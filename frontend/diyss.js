(function (_0x15a6f0, _0x2d7149) {
    if (typeof exports == "object" && typeof module == "object") {
      module.exports = _0x2d7149();
    } else if (typeof define == "function" && define.amd) {
      define([], _0x2d7149);
    } else if (typeof exports == "object") {
      exports.XTU = _0x2d7149();
    } else {
      _0x15a6f0.XTU = _0x2d7149();
    }
  })(self, function () {
    return (() => {
      var _0x5c5e52 = {
        1747: _0x558eb3 => {
          _0x558eb3 = function (_0x403bc9) {
            'got it';
  
            var _0x3736da;
            var _0xf6a733 = Object.prototype;
            var _0x1b5428 = _0xf6a733.hasOwnProperty;
            var _0x361db7 = typeof Symbol == "function" ? Symbol : {};
            var _0x218e3d = _0x361db7.iterator || "@@iterator";
            var _0x2f3df9 = _0x361db7.asyncIterator || "@@asyncIterator";
            var _0x2276b0 = _0x361db7.toStringTag || "@@toStringTag";
            function _0x44482b(_0x3eb0cb, _0x327f6e, _0x15269f) {
              Object.defineProperty(_0x3eb0cb, _0x327f6e, {
                value: _0x15269f,
                enumerable: !(847473 ^ 847473),
                configurable: !(698132 ^ 698132),
                writable: !(106241 ^ 106241)
              });
              return _0x3eb0cb[_0x327f6e];
            }
            try {
              _0x44482b({}, "");
            } catch (_0x1d7d0b) {
              _0x44482b = function (_0x818603, _0x3206df, _0x589f58) {
                return _0x818603[_0x3206df] = _0x589f58;
              };
            }
            function _0x32da5b(_0x19e42f, _0x44e0f2, _0x3f7abb, _0x436808) {
              var _0x5c0e31;
              var _0x77e0ff;
              var _0x1ed66e;
              var _0x16f600;
              _0x44e0f2 = _0x44e0f2 && _0x44e0f2.prototype instanceof _0x3e864c ? _0x44e0f2 : _0x3e864c;
              _0x44e0f2 = Object.create(_0x44e0f2.prototype);
              _0x436808 = new _0x406423(_0x436808 || []);
              _0x5c0e31 = _0x19e42f;
              _0x77e0ff = _0x3f7abb;
              _0x1ed66e = _0x436808;
              _0x16f600 = _0x284628;
              _0x44e0f2._invoke = function (_0x2d2c07, _0x275597) {
                if (_0x16f600 === _0x24be08) {
                  throw new Error("``````````````````````");
                }
                if (_0x16f600 === _0x1308fc) {
                  if (_0x2d2c07 === "throw") {
                    throw _0x275597;
                  }
                  return _0x321975();
                }
                _0x1ed66e.method = _0x2d2c07;
                _0x1ed66e.arg = _0x275597;
                for (;;) {
                  var _0x3a739c = _0x1ed66e.delegate;
                  if (_0x3a739c) {
                    var _0x2e32c1 = function _0x1a3172(_0x48d5a5, _0x2fed1f) {
                      var _0x321bd8;
                      if ((_0x321bd8 = _0x48d5a5.iterator[_0x2fed1f.method]) === _0x3736da) {
                        _0x2fed1f.delegate = null;
                        if (_0x2fed1f.method === "throw") {
                          if (_0x48d5a5.iterator.return && (_0x2fed1f.method = "return", _0x2fed1f.arg = _0x3736da, _0x1a3172(_0x48d5a5, _0x2fed1f), _0x2fed1f.method === "throw")) {
                            return _0x5f2385;
                          }
                          _0x2fed1f.method = "throw";
                          _0x2fed1f.arg = new TypeError(".......");
                        }
                        return _0x5f2385;
                      }
                      if ((_0x321bd8 = _0xeb5d31(_0x321bd8, _0x48d5a5.iterator, _0x2fed1f.arg)).type === "throw") {
                        _0x2fed1f.method = "throw";
                        _0x2fed1f.arg = _0x321bd8.arg;
                        _0x2fed1f.delegate = null;
                        return _0x5f2385;
                      } else if (_0x321bd8 = _0x321bd8.arg) {
                        if (_0x321bd8.done) {
                          _0x2fed1f[_0x48d5a5.resultName] = _0x321bd8.value;
                          _0x2fed1f.next = _0x48d5a5.nextLoc;
                          if (_0x2fed1f.method !== "return") {
                            _0x2fed1f.method = "next";
                            _0x2fed1f.arg = _0x3736da;
                          }
                          _0x2fed1f.delegate = null;
                          return _0x5f2385;
                        } else {
                          return _0x321bd8;
                        }
                      } else {
                        _0x2fed1f.method = "throw";
                        _0x2fed1f.arg = new TypeError(".......");
                        _0x2fed1f.delegate = null;
                        return _0x5f2385;
                      }
                    }(_0x3a739c, _0x1ed66e);
                    if (_0x2e32c1) {
                      if (_0x2e32c1 === _0x5f2385) {
                        continue;
                      }
                      return _0x2e32c1;
                    }
                  }
                  if (_0x1ed66e.method === "next") {
                    _0x1ed66e.sent = _0x1ed66e._sent = _0x1ed66e.arg;
                  } else if (_0x1ed66e.method === "throw") {
                    if (_0x16f600 === _0x284628) {
                      _0x16f600 = _0x1308fc;
                      throw _0x1ed66e.arg;
                    }
                    _0x1ed66e.dispatchException(_0x1ed66e.arg);
                  } else if (_0x1ed66e.method === "return") {
                    _0x1ed66e.abrupt("return", _0x1ed66e.arg);
                  }
                  _0x16f600 = _0x24be08;
                  if ((_0x2e32c1 = _0xeb5d31(_0x5c0e31, _0x77e0ff, _0x1ed66e)).type === "normal") {
                    _0x16f600 = _0x1ed66e.done ? _0x1308fc : _0x24c7dc;
                    if (_0x2e32c1.arg !== _0x5f2385) {
                      return {
                        value: _0x2e32c1.arg,
                        done: _0x1ed66e.done
                      };
                    }
                  } else if (_0x2e32c1.type === "throw") {
                    _0x16f600 = _0x1308fc;
                    _0x1ed66e.method = "throw";
                    _0x1ed66e.arg = _0x2e32c1.arg;
                  }
                }
              };
              return _0x44e0f2;
            }
            function _0xeb5d31(_0x1abddc, _0x145c2, _0x3b4a3e) {
              try {
                return {
                  type: "normal",
                  arg: _0x1abddc.call(_0x145c2, _0x3b4a3e)
                };
              } catch (_0x4f1ac4) {
                return {
                  type: "throw",
                  arg: _0x4f1ac4
                };
              }
            }
            _0x403bc9.wrap = _0x32da5b;
            var _0x284628 = "suspendedStart";
            var _0x24c7dc = "suspendedYield";
            var _0x24be08 = "executing";
            var _0x1308fc = "completed";
            var _0x5f2385 = {};
            function _0x3e864c() {}
            function _0x3c16e3() {}
            function _0x33acd0() {}
            var _0x4886dd = {};
            _0x44482b(_0x4886dd, _0x218e3d, function () {
              return this;
            });
            if ((_0x361db7 = (_0x361db7 = Object.getPrototypeOf) && _0x361db7(_0x361db7(_0x598d45([])))) && _0x361db7 !== _0xf6a733 && _0x1b5428.call(_0x361db7, _0x218e3d)) {
              _0x4886dd = _0x361db7;
            }
            var _0x12a4e1 = _0x33acd0.prototype = _0x3e864c.prototype = Object.create(_0x4886dd);
            function _0x51bd76(_0x3df368) {
              ["next", "throw", "return"].forEach(function (_0x3200e7) {
                _0x44482b(_0x3df368, _0x3200e7, function (_0x526044) {
                  return this._invoke(_0x3200e7, _0x526044);
                });
              });
            }
            function _0x57ffac(_0x11f277, _0x213333) {
              var _0x27b0cb;
              this._invoke = function (_0x527581, _0x5881f8) {
                function _0x47eba3() {
                  return new _0x213333(function (_0x5ac229, _0x2702f1) {
                    (function _0x5a968a(_0xd66e22, _0x1cef4b, _0x13062b, _0x340f65) {
                      if ((_0xd66e22 = _0xeb5d31(_0x11f277[_0xd66e22], _0x11f277, _0x1cef4b)).type !== "throw") {
                        var _0x15ad3b = _0xd66e22.arg;
                        if ((_0x1cef4b = _0x15ad3b.value) && typeof _0x1cef4b == "object" && _0x1b5428.call(_0x1cef4b, "__await")) {
                          return _0x213333.resolve(_0x1cef4b.__await).then(function (_0x424e97) {
                            _0x5a968a("next", _0x424e97, _0x13062b, _0x340f65);
                          }, function (_0x4227b2) {
                            _0x5a968a("throw", _0x4227b2, _0x13062b, _0x340f65);
                          });
                        } else {
                          return _0x213333.resolve(_0x1cef4b).then(function (_0x5cb4eb) {
                            _0x15ad3b.value = _0x5cb4eb;
                            _0x13062b(_0x15ad3b);
                          }, function (_0x2a83f6) {
                            return _0x5a968a("throw", _0x2a83f6, _0x13062b, _0x340f65);
                          });
                        }
                      }
                      _0x340f65(_0xd66e22.arg);
                    })(_0x527581, _0x5881f8, _0x5ac229, _0x2702f1);
                  });
                }
                return _0x27b0cb = _0x27b0cb ? _0x27b0cb.then(_0x47eba3, _0x47eba3) : _0x47eba3();
              };
            }
            function _0x4e03ec(_0x47db18) {
              var _0x5ade36 = {
                tryLoc: _0x47db18[276808 ^ 276808]
              };
              if ((146836 ^ 146837) in _0x47db18) {
                _0x5ade36.catchLoc = _0x47db18[668725 ^ 668724];
              }
              if ((869440 ^ 869442) in _0x47db18) {
                _0x5ade36.finallyLoc = _0x47db18[601568 ^ 601570];
                _0x5ade36.afterLoc = _0x47db18[485886 ^ 485885];
              }
              this.tryEntries.push(_0x5ade36);
            }
            function _0x482bf5(_0x1a4321) {
              var _0x5606df = _0x1a4321.completion || {};
              _0x5606df.type = "normal";
              delete _0x5606df.arg;
              _0x1a4321.completion = _0x5606df;
            }
            function _0x406423(_0x28ef01) {
              this.tryEntries = [{
                tryLoc: "root"
              }];
              _0x28ef01.forEach(_0x4e03ec, this);
              this.reset(!(777685 ^ 777685));
            }
            function _0x598d45(_0x524287) {
              if (_0x524287) {
                if (_0x28da9b = _0x524287[_0x218e3d]) {
                  return _0x28da9b.call(_0x524287);
                }
                if (typeof _0x524287.next == "function") {
                  return _0x524287;
                }
                if (!isNaN(_0x524287.length)) {
                  var _0x28da9b;
                  var _0x1f3ddd = -(594196 ^ 594197);
                  return (_0x28da9b = function _0x583062() {
                    for (; ++_0x1f3ddd < _0x524287.length;) {
                      if (_0x1b5428.call(_0x524287, _0x1f3ddd)) {
                        _0x583062.value = _0x524287[_0x1f3ddd];
                        _0x583062.done = false;
                        return _0x583062;
                      }
                    }
                    _0x583062.value = _0x3736da;
                    _0x583062.done = true;
                    return _0x583062;
                  }).next = _0x28da9b;
                }
              }
              return {
                next: _0x321975
              };
            }
            function _0x321975() {
              return {
                value: _0x3736da,
                done: !(505843 ^ 505843)
              };
            }
            _0x44482b(_0x12a4e1, "constructor", _0x3c16e3.prototype = _0x33acd0);
            _0x44482b(_0x33acd0, "constructor", _0x3c16e3);
            _0x3c16e3.displayName = _0x44482b(_0x33acd0, _0x2276b0, "GeneratorFunction");
            _0x403bc9.isGeneratorFunction = function (_0xbba4c0) {
              return !!(_0xbba4c0 = typeof _0xbba4c0 == "function" && _0xbba4c0.constructor) && (_0xbba4c0 === _0x3c16e3 || (_0xbba4c0.displayName || _0xbba4c0.name) === "GeneratorFunction");
            };
            _0x403bc9.mark = function (_0x2cc2fa) {
              if (Object.setPrototypeOf) {
                Object.setPrototypeOf(_0x2cc2fa, _0x33acd0);
              } else {
                _0x2cc2fa.__proto__ = _0x33acd0;
                _0x44482b(_0x2cc2fa, _0x2276b0, "GeneratorFunction");
              }
              _0x2cc2fa.prototype = Object.create(_0x12a4e1);
              return _0x2cc2fa;
            };
            _0x403bc9.awrap = function (_0x129e72) {
              return {
                __await: _0x129e72
              };
            };
            _0x51bd76(_0x57ffac.prototype);
            _0x44482b(_0x57ffac.prototype, _0x2f3df9, function () {
              return this;
            });
            _0x403bc9.AsyncIterator = _0x57ffac;
            _0x403bc9.async = function (_0x2a1d38, _0x12c8a6, _0x25620a, _0xa4bad0, _0x96f9fd) {
              if (_0x96f9fd === undefined) {
                _0x96f9fd = Promise;
              }
              var _0x390271 = new _0x57ffac(_0x32da5b(_0x2a1d38, _0x12c8a6, _0x25620a, _0xa4bad0), _0x96f9fd);
              if (_0x403bc9.isGeneratorFunction(_0x12c8a6)) {
                return _0x390271;
              } else {
                return _0x390271.next().then(function (_0x2e2fee) {
                  if (_0x2e2fee.done) {
                    return _0x2e2fee.value;
                  } else {
                    return _0x390271.next();
                  }
                });
              }
            };
            _0x51bd76(_0x12a4e1);
            _0x44482b(_0x12a4e1, _0x2276b0, "Generator");
            _0x44482b(_0x12a4e1, _0x218e3d, function () {
              return this;
            });
            _0x44482b(_0x12a4e1, "toString", function () {
              return "[object Generator]";
            });
            _0x403bc9.keys = function (_0x2ebbaa) {
              var _0x56acdf;
              var _0x3ad227 = [];
              for (_0x56acdf in _0x2ebbaa) {
                _0x3ad227.push(_0x56acdf);
              }
              _0x3ad227.reverse();
              return function _0x8bf462() {
                for (; _0x3ad227.length;) {
                  var _0x1b1b47 = _0x3ad227.pop();
                  if (_0x1b1b47 in _0x2ebbaa) {
                    _0x8bf462.value = _0x1b1b47;
                    _0x8bf462.done = false;
                    return _0x8bf462;
                  }
                }
                _0x8bf462.done = true;
                return _0x8bf462;
              };
            };
            _0x403bc9.values = _0x598d45;
            _0x406423.prototype = {
              constructor: _0x406423,
              reset: function (_0x5659ec) {
                this.prev = 193992 ^ 193992;
                this.next = 0;
                this.sent = this._sent = _0x3736da;
                this.done = !(700224 ^ 700225);
                this.delegate = null;
                this.method = "next";
                this.arg = _0x3736da;
                this.tryEntries.forEach(_0x482bf5);
                if (!_0x5659ec) {
                  for (var _0x304c70 in this) {
                    if (_0x304c70.charAt(629229 ^ 629229) === "t" && _0x1b5428.call(this, _0x304c70) && !isNaN(+_0x304c70.slice(712302 ^ 712303))) {
                      this[_0x304c70] = _0x3736da;
                    }
                  }
                }
              },
              stop: function () {
                this.done = true;
                var _0x4acd56 = this.tryEntries[0].completion;
                if (_0x4acd56.type === "throw") {
                  throw _0x4acd56.arg;
                }
                return this.rval;
              },
              dispatchException: function (_0x1c0b85) {
                if (this.done) {
                  throw _0x1c0b85;
                }
                var _0x3885c8 = this;
                function _0xffe4bd(_0x19ccdb, _0x5ef229) {
                  _0x553413.type = "throw";
                  _0x553413.arg = _0x1c0b85;
                  _0x3885c8.next = _0x19ccdb;
                  if (_0x5ef229) {
                    _0x3885c8.method = "next";
                    _0x3885c8.arg = _0x3736da;
                  }
                  return !!_0x5ef229;
                }
                for (var _0x122973 = this.tryEntries.length - (875090 ^ 875091); (995974 ^ 995974) <= _0x122973; --_0x122973) {
                  var _0x354d34 = this.tryEntries[_0x122973];
                  var _0x553413 = _0x354d34.completion;
                  if (_0x354d34.tryLoc === "root") {
                    return _0xffe4bd("end");
                  }
                  if (_0x354d34.tryLoc <= this.prev) {
                    var _0x60271c = _0x1b5428.call(_0x354d34, "catchLoc");
                    var _0x548632 = _0x1b5428.call(_0x354d34, "finallyLoc");
                    if (_0x60271c && _0x548632) {
                      if (this.prev < _0x354d34.catchLoc) {
                        return _0xffe4bd(_0x354d34.catchLoc, true);
                      }
                      if (this.prev < _0x354d34.finallyLoc) {
                        return _0xffe4bd(_0x354d34.finallyLoc);
                      }
                    } else if (_0x60271c) {
                      if (this.prev < _0x354d34.catchLoc) {
                        return _0xffe4bd(_0x354d34.catchLoc, !(174843 ^ 174843));
                      }
                    } else {
                      if (!_0x548632) {
                        throw new Error(".......");
                      }
                      if (this.prev < _0x354d34.finallyLoc) {
                        return _0xffe4bd(_0x354d34.finallyLoc);
                      }
                    }
                  }
                }
              },
              abrupt: function (_0x1fc789, _0x4db1ec) {
                for (var _0x1e6b0e = this.tryEntries.length - (740109 ^ 740108); (369063 ^ 369063) <= _0x1e6b0e; --_0x1e6b0e) {
                  var _0x2829f3 = this.tryEntries[_0x1e6b0e];
                  if (_0x2829f3.tryLoc <= this.prev && _0x1b5428.call(_0x2829f3, "finallyLoc") && this.prev < _0x2829f3.finallyLoc) {
                    var _0x2e519c = _0x2829f3;
                    break;
                  }
                }
                var _0x564b82 = (_0x2e519c = _0x2e519c && (_0x1fc789 === "break" || _0x1fc789 === "continue") && _0x2e519c.tryLoc <= _0x4db1ec && _0x4db1ec <= _0x2e519c.finallyLoc ? null : _0x2e519c) ? _0x2e519c.completion : {};
                _0x564b82.type = _0x1fc789;
                _0x564b82.arg = _0x4db1ec;
                if (_0x2e519c) {
                  this.method = "next";
                  this.next = _0x2e519c.finallyLoc;
                  return _0x5f2385;
                } else {
                  return this.complete(_0x564b82);
                }
              },
              complete: function (_0x4c062b, _0x13ac83) {
                if (_0x4c062b.type === "throw") {
                  throw _0x4c062b.arg;
                }
                if (_0x4c062b.type === "break" || _0x4c062b.type === "continue") {
                  this.next = _0x4c062b.arg;
                } else if (_0x4c062b.type === "return") {
                  this.rval = this.arg = _0x4c062b.arg;
                  this.method = "return";
                  this.next = "end";
                } else if (_0x4c062b.type === "normal" && _0x13ac83) {
                  this.next = _0x13ac83;
                }
                return _0x5f2385;
              },
              finish: function (_0x43fd9e) {
                for (var _0x2de466 = this.tryEntries.length - (974953 ^ 974952); (717758 ^ 717758) <= _0x2de466; --_0x2de466) {
                  var _0x1a1492 = this.tryEntries[_0x2de466];
                  if (_0x1a1492.finallyLoc === _0x43fd9e) {
                    this.complete(_0x1a1492.completion, _0x1a1492.afterLoc);
                    _0x482bf5(_0x1a1492);
                    return _0x5f2385;
                  }
                }
              },
              catch: function (_0xa8b5b3) {
                for (var _0x2be8ef = this.tryEntries.length - 1; _0x2be8ef >= 0; --_0x2be8ef) {
                  var _0x4860d5 = this.tryEntries[_0x2be8ef];
                  if (_0x4860d5.tryLoc === _0xa8b5b3) {
                    var _0x499d5f;
                    var _0x446b2d = _0x4860d5.completion;
                    if (_0x446b2d.type === "throw") {
                      _0x499d5f = _0x446b2d.arg;
                      _0x482bf5(_0x4860d5);
                    }
                    return _0x499d5f;
                  }
                }
                throw new Error(".......");
              },
              delegateYield: function (_0x52023d, _0x2ed9ed, _0xd34d29) {
                this.delegate = {
                  iterator: _0x598d45(_0x52023d),
                  resultName: _0x2ed9ed,
                  nextLoc: _0xd34d29
                };
                if (this.method === "next") {
                  this.arg = _0x3736da;
                }
                return _0x5f2385;
              }
            };
            return _0x403bc9;
          }(_0x558eb3.exports);
          try {
            regeneratorRuntime = _0x558eb3;
          } catch (_0x54bbe2) {
            if (typeof globalThis == "object") {
              globalThis.regeneratorRuntime = _0x558eb3;
            } else {
              Function("r", "regeneratorRuntime = r")(_0x558eb3);
            }
          }
        },
        7757: (_0x4f5370, _0x2ddd3f, _0x50dc38) => {
          _0x4f5370.exports = _0x50dc38(212132 ^ 211575);
        },
        1234: function (_0x594e33, _0x12275c) {
          (function (_0x271458) {
            'got it';
  
            var _0x305103 = {
              3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
              5: "class enum extends super const export import",
              6: "enum",
              strict: "implements interface let package private protected public static yield",
              strictBind: "eval arguments"
            };
            var _0x111240 = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
            var _0x2e1384 = {
              5: _0x111240,
              "5module": _0x111240 + " export import",
              6: _0x111240 + " const class extends export import super"
            };
            var _0x19fb95 = /^in(stanceof)?$/;
            var _0x5e9a2a = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
            var _0x5273be = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";
            var _0x40a9ea = new RegExp("[" + _0x5e9a2a + "]");
            var _0x20e325 = new RegExp("[" + _0x5e9a2a + _0x5273be + "]");
            _0x5e9a2a = _0x5273be = null;
            var _0x564eda = [285513 ^ 285513, 11, 2, 813255 ^ 813278, 2, 18, 149952 ^ 149954, 150125 ^ 150124, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 734239 ^ 734235, 268681 ^ 268729, 528628 ^ 528580, 351876 ^ 351899, 686557 ^ 686547, 29, 171276 ^ 171274, 37, 11, 905822 ^ 905795, 3, 196579 ^ 196544, 186773 ^ 186768, 514160 ^ 514167, 2, 4, 343634 ^ 343673, 689985 ^ 690140, 19, 757813 ^ 757782, 5, 35, 5, 39, 9, 718398 ^ 718349, 453138 ^ 453151, 10, 898930 ^ 898928, 14, 2, 6, 167028 ^ 167030, 1, 2, 10, 450478 ^ 450476, 957066 ^ 957060, 653344 ^ 653346, 6, 802062 ^ 802060, 1, 68, 306152 ^ 305886, 10, 477158 ^ 477171, 11, 7, 25, 647392 ^ 647397, 2, 41, 2, 347780 ^ 347788, 70, 5, 685998 ^ 685997, 0, 221087 ^ 221085, 43, 2, 574764 ^ 574765, 884466 ^ 884470, 843015 ^ 843015, 589661 ^ 589662, 799506 ^ 799492, 11, 22, 10, 256291 ^ 256317, 789085 ^ 789023, 18, 500344 ^ 500346, 393159 ^ 393158, 153588 ^ 153599, 356511 ^ 356490, 11, 102518 ^ 102511, 974362 ^ 974429, 55, 7, 761480 ^ 761481, 203552 ^ 203617, 554326 ^ 554326, 16, 3, 2, 728191 ^ 728189, 2, 284175 ^ 284179, 43, 28, 292321 ^ 292325, 28, 36, 7, 2, 938350 ^ 938357, 656013 ^ 656017, 946989 ^ 946968, 909390 ^ 909381, 731285 ^ 731264, 109772 ^ 109767, 229284 ^ 229302, 14, 462069 ^ 462052, 111, 314669 ^ 314725, 56, 239811 ^ 239857, 332363 ^ 332357, 472417 ^ 472403, 14, 35, 986860 ^ 987057, 222461 ^ 222420, 999337 ^ 999342, 1, 265493 ^ 265562, 792994 ^ 793022, 396040 ^ 396035, 967932 ^ 967932, 958280 ^ 958273, 460681 ^ 460700, 932454 ^ 932429, 17, 47, 863910 ^ 863922, 649692 ^ 649664, 22, 127049 ^ 127044, 52, 58, 1, 794419 ^ 794416, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
            var _0x355db9 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
            function _0x3c6394(_0x2f3a28, _0x226d64) {
              for (var _0x439798 = 65536, _0x104188 = 0; _0x104188 < _0x226d64.length; _0x104188 += 2) {
                if ((_0x439798 += _0x226d64[_0x104188]) > _0x2f3a28) {
                  return false;
                }
                if ((_0x439798 += _0x226d64[_0x104188 + 1]) >= _0x2f3a28) {
                  return true;
                }
              }
            }
            function _0x32cd9a(_0x29bf23, _0x3c5da4) {
              if (_0x29bf23 < 65) {
                return _0x29bf23 === 36;
              } else {
                return _0x29bf23 < 91 || (_0x29bf23 < 97 ? _0x29bf23 === 95 : _0x29bf23 < 123 || (_0x29bf23 <= 65535 ? _0x29bf23 >= 170 && _0x40a9ea.test(String.fromCharCode(_0x29bf23)) : _0x3c5da4 !== false && _0x3c6394(_0x29bf23, _0x564eda)));
              }
            }
            function _0x5942d0(_0x48f2a3, _0x894860) {
              if (_0x48f2a3 < 48) {
                return _0x48f2a3 === 36;
              } else {
                return _0x48f2a3 < 58 || !(_0x48f2a3 < 65) && (_0x48f2a3 < 91 || (_0x48f2a3 < 97 ? _0x48f2a3 === 95 : _0x48f2a3 < 123 || (_0x48f2a3 <= 65535 ? _0x48f2a3 >= 170 && _0x20e325.test(String.fromCharCode(_0x48f2a3)) : _0x894860 !== false && (_0x3c6394(_0x48f2a3, _0x564eda) || _0x3c6394(_0x48f2a3, _0x355db9)))));
              }
            }
            function _0x1ad360(_0x328ced, _0x3d3570) {
              if (_0x3d3570 === undefined) {
                _0x3d3570 = {};
              }
              this.label = _0x328ced;
              this.keyword = _0x3d3570.keyword;
              this.beforeExpr = !!_0x3d3570.beforeExpr;
              this.startsExpr = !!_0x3d3570.startsExpr;
              this.isLoop = !!_0x3d3570.isLoop;
              this.isAssign = !!_0x3d3570.isAssign;
              this.prefix = !!_0x3d3570.prefix;
              this.postfix = !!_0x3d3570.postfix;
              this.binop = _0x3d3570.binop || null;
              this.updateContext = null;
            }
            function _0x584c33(_0x506050, _0x52721b) {
              return new _0x1ad360(_0x506050, {
                beforeExpr: true,
                binop: _0x52721b
              });
            }
            var _0x226939 = {
              beforeExpr: true
            };
            var _0x1d7b21 = {
              startsExpr: true
            };
            var _0x3cc7af = {};
            function _0x3f2661(_0xde7aed, _0xd5087c) {
              if (_0xd5087c === undefined) {
                _0xd5087c = {};
              }
              _0xd5087c.keyword = _0xde7aed;
              return _0x3cc7af[_0xde7aed] = new _0x1ad360(_0xde7aed, _0xd5087c);
            }
            // TOLOOK
            var _0x47ea38 = {
              num: new _0x1ad360("num", _0x1d7b21),
              regexp: new _0x1ad360("regexp", _0x1d7b21),
              string: new _0x1ad360("string", _0x1d7b21),
              name: new _0x1ad360("name", _0x1d7b21),
              privateId: new _0x1ad360("privateId", _0x1d7b21),
              eof: new _0x1ad360("eof"),
              bracketL: new _0x1ad360("[", {
                beforeExpr: true,
                startsExpr: true
              }),
              bracketR: new _0x1ad360("]"),
              braceL: new _0x1ad360("{", {
                beforeExpr: true,
                startsExpr: true
              }),
              braceR: new _0x1ad360("}"),
              parenL: new _0x1ad360("(", {
                beforeExpr: true,
                startsExpr: true
              }),
              parenR: new _0x1ad360(")"),
              comma: new _0x1ad360(",", _0x226939),
              semi: new _0x1ad360(";", _0x226939),
              colon: new _0x1ad360(":", _0x226939),
              dot: new _0x1ad360("."),
              question: new _0x1ad360("?", _0x226939),
              questionDot: new _0x1ad360("?."),
              arrow: new _0x1ad360("=>", _0x226939),
              template: new _0x1ad360("template"),
              invalidTemplate: new _0x1ad360("invalidTemplate"),
              ellipsis: new _0x1ad360("...", _0x226939),
              backQuote: new _0x1ad360("`", _0x1d7b21),
              dollarBraceL: new _0x1ad360("${", {
                beforeExpr: true,
                startsExpr: true
              }),
              eq: new _0x1ad360("=", {
                beforeExpr: true,
                isAssign: true
              }),
              assign: new _0x1ad360("_=", {
                beforeExpr: true,
                isAssign: true
              }),
              incDec: new _0x1ad360("++/--", {
                prefix: true,
                postfix: true,
                startsExpr: true
              }),
              prefix: new _0x1ad360("!/~", {
                beforeExpr: true,
                prefix: true,
                startsExpr: true
              }),
              logicalOR: _0x584c33("||", 1),
              logicalAND: _0x584c33("&&", 2),
              bitwiseOR: _0x584c33("|", 3),
              bitwiseXOR: _0x584c33("^", 4),
              bitwiseAND: _0x584c33("&", 5),
              equality: _0x584c33("==/!=/===/!==", 6),
              relational: _0x584c33("</>/<=/>=", 7),
              bitShift: _0x584c33("<</>>/>>>", 8),
              plusMin: new _0x1ad360("+/-", {
                beforeExpr: true,
                binop: 9,
                prefix: true,
                startsExpr: true
              }),
              modulo: _0x584c33("%", 10),
              star: _0x584c33("*", 10),
              slash: _0x584c33("/", 10),
              starstar: new _0x1ad360("**", {
                beforeExpr: true
              }),
              coalesce: _0x584c33("??", 1),
              _break: _0x3f2661("break"),
              _case: _0x3f2661("case", _0x226939),
              _catch: _0x3f2661("catch"),
              _continue: _0x3f2661("continue"),
              _debugger: _0x3f2661("debugger"),
              _default: _0x3f2661("default", _0x226939),
              _do: _0x3f2661("do", {
                isLoop: true,
                beforeExpr: true
              }),
              _else: _0x3f2661("else", _0x226939),
              _finally: _0x3f2661("finally"),
              _for: _0x3f2661("for", {
                isLoop: true
              }),
              _function: _0x3f2661("function", _0x1d7b21),
              _if: _0x3f2661("if"),
              _return: _0x3f2661("return", _0x226939),
              _switch: _0x3f2661("switch"),
              _throw: _0x3f2661("throw", _0x226939),
              _try: _0x3f2661("try"),
              _var: _0x3f2661("var"),
              _const: _0x3f2661("const"),
              _while: _0x3f2661("while", {
                isLoop: true
              }),
              _with: _0x3f2661("with"),
              _new: _0x3f2661("new", {
                beforeExpr: true,
                startsExpr: true
              }),
              _this: _0x3f2661("this", _0x1d7b21),
              _super: _0x3f2661("super", _0x1d7b21),
              _class: _0x3f2661("class", _0x1d7b21),
              _extends: _0x3f2661("extends", _0x226939),
              _export: _0x3f2661("export"),
              _import: _0x3f2661("import", _0x1d7b21),
              _null: _0x3f2661("null", _0x1d7b21),
              _true: _0x3f2661("true", _0x1d7b21),
              _false: _0x3f2661("false", _0x1d7b21),
              _in: _0x3f2661("in", {
                beforeExpr: true,
                binop: 7
              }),
              _instanceof: _0x3f2661("instanceof", {
                beforeExpr: true,
                binop: 7
              }),
              _typeof: _0x3f2661("typeof", {
                beforeExpr: true,
                prefix: true,
                startsExpr: true
              }),
              _void: _0x3f2661("void", {
                beforeExpr: true,
                prefix: true,
                startsExpr: true
              }),
              _delete: _0x3f2661("delete", {
                beforeExpr: true,
                prefix: true,
                startsExpr: true
              })
            };
            var _0x1c21f2 = /\r\n?|\n|\u2028|\u2029/;
            var _0x45e5fc = new RegExp(_0x1c21f2.source, "g");
            function _0x47ac09(_0x294e39) {
              return _0x294e39 === 10 || _0x294e39 === 13 || _0x294e39 === 8232 || _0x294e39 === 8233;
            }
            function _0x19617a(_0x2a8525, _0x216cef, _0x376123) {
              if (_0x376123 === undefined) {
                _0x376123 = _0x2a8525.length;
              }
              for (var _0x36fd32 = _0x216cef; _0x36fd32 < _0x376123; _0x36fd32++) {
                var _0x32b0a6 = _0x2a8525.charCodeAt(_0x36fd32);
                if (_0x47ac09(_0x32b0a6)) {
                  if (_0x36fd32 < _0x376123 - 1 && _0x32b0a6 === 13 && _0x2a8525.charCodeAt(_0x36fd32 + 1) === 10) {
                    return _0x36fd32 + 2;
                  } else {
                    return _0x36fd32 + 1;
                  }
                }
              }
              return -1;
            }
            var _0x38be38 = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
            var _0xb0af09 = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
            var _0x5d5c59 = Object.prototype;
            var _0x1f8fd6 = _0x5d5c59.hasOwnProperty;
            var _0x2bf188 = _0x5d5c59.toString;
            var _0x25ab37 = Object.hasOwn || function (_0x56b304, _0x293653) {
              return _0x1f8fd6.call(_0x56b304, _0x293653);
            };
            var _0xad1afe = Array.isArray || function (_0x5e79be) {
              return _0x2bf188.call(_0x5e79be) === "[object Array]";
            };
            function _0x220e5e(_0x1284fe) {
              return new RegExp("^(?:" + _0x1284fe.replace(/ /g, "|") + ")$");
            }
            var _0x560494 = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;
            function _0x1d26ea(_0x2cfd79, _0x597ea3) {
              this.line = _0x2cfd79;
              this.column = _0x597ea3;
            }
            _0x1d26ea.prototype.offset = function (_0x1567eb) {
              return new _0x1d26ea(this.line, this.column + _0x1567eb);
            };
            function _0x36faf2(_0x20d4bb, _0x16a5b8, _0x170b6c) {
              this.start = _0x16a5b8;
              this.end = _0x170b6c;
              if (_0x20d4bb.sourceFile !== null) {
                this.source = _0x20d4bb.sourceFile;
              }
            }
            function _0x35e77b(_0x44b303, _0x223080) {
              var _0xabbfd3 = 1;
              var _0x18477d = 0;
              for (;;) {
                var _0x3a9e0e = _0x19617a(_0x44b303, _0x18477d, _0x223080);
                if (_0x3a9e0e < 0) {
                  return new _0x1d26ea(_0xabbfd3, _0x223080 - _0x18477d);
                }
                ++_0xabbfd3;
                _0x18477d = _0x3a9e0e;
              }
            }
            var _0x5e37ae = {
              ecmaVersion: null,
              sourceType: "script",
              onInsertedSemicolon: null,
              onTrailingComma: null,
              allowReserved: null,
              allowReturnOutsideFunction: false,
              allowImportExportEverywhere: false,
              allowAwaitOutsideFunction: null,
              allowSuperOutsideMethod: null,
              allowHashBang: false,
              locations: false,
              onToken: null,
              onComment: null,
              ranges: false,
              program: null,
              sourceFile: null,
              directSourceFile: null,
              preserveParens: false
            };
            var _0x10a6d7 = false;
            function _0x2aab28(_0x5d701d) {
              var _0x4a619e = {};
              for (var _0xc354d8 in _0x5e37ae) {
                _0x4a619e[_0xc354d8] = _0x5d701d && _0x25ab37(_0x5d701d, _0xc354d8) ? _0x5d701d[_0xc354d8] : _0x5e37ae[_0xc354d8];
              }
              if (_0x4a619e.ecmaVersion === "latest") {
                _0x4a619e.ecmaVersion = 100000000;
              } else if (_0x4a619e.ecmaVersion == null) {
                if (!_0x10a6d7 && typeof console == "object" && console.warn) {
                  _0x10a6d7 = true;
                  console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
                }
                _0x4a619e.ecmaVersion = 11;
              } else if (_0x4a619e.ecmaVersion >= 2015) {
                _0x4a619e.ecmaVersion -= 2009;
              }
              if (_0x4a619e.allowReserved == null) {
                _0x4a619e.allowReserved = _0x4a619e.ecmaVersion < 5;
              }
              if (_0xad1afe(_0x4a619e.onToken)) {
                var _0xc58c93 = _0x4a619e.onToken;
                _0x4a619e.onToken = function (_0x35315c) {
                  return _0xc58c93.push(_0x35315c);
                };
              }
              if (_0xad1afe(_0x4a619e.onComment)) {
                _0x4a619e.onComment = function (_0x44f4d9, _0x2847e6) {
                  return function (_0x6f3f1d, _0x2100f0, _0x2cc99d, _0x5895b3, _0x1295e5, _0x3c64a5) {
                    var _0x429869 = {
                      type: _0x6f3f1d ? "Block" : "Line",
                      value: _0x2100f0,
                      start: _0x2cc99d,
                      end: _0x5895b3
                    };
                    if (_0x44f4d9.locations) {
                      _0x429869.loc = new _0x36faf2(this, _0x1295e5, _0x3c64a5);
                    }
                    if (_0x44f4d9.ranges) {
                      _0x429869.range = [_0x2cc99d, _0x5895b3];
                    }
                    _0x2847e6.push(_0x429869);
                  };
                }(_0x4a619e, _0x4a619e.onComment);
              }
              return _0x4a619e;
            }
            var _0x2b5d6a = 256;
            function _0x4a114f(_0x722786, _0x3891ab) {
              return (_0x722786 ? 4 : 0) | 2 | (_0x3891ab ? 8 : 0);
            }
            function _0x504270(_0x57f0fd, _0x369c1a, _0x58b471) {
              this.options = _0x57f0fd = _0x2aab28(_0x57f0fd);
              this.sourceFile = _0x57f0fd.sourceFile;
              this.keywords = _0x220e5e(_0x2e1384[_0x57f0fd.ecmaVersion >= 6 ? 6 : _0x57f0fd.sourceType === "module" ? "5module" : 5]);
              var _0x1513e7 = "";
              if (_0x57f0fd.allowReserved !== true) {
                _0x1513e7 = _0x305103[_0x57f0fd.ecmaVersion >= 6 ? 6 : _0x57f0fd.ecmaVersion === 5 ? 5 : 3];
                if (_0x57f0fd.sourceType === "module") {
                  _0x1513e7 += " await";
                }
              }
              this.reservedWords = _0x220e5e(_0x1513e7);
              var _0x597bf7 = (_0x1513e7 ? _0x1513e7 + " " : "") + _0x305103.strict;
              this.reservedWordsStrict = _0x220e5e(_0x597bf7);
              this.reservedWordsStrictBind = _0x220e5e(_0x597bf7 + " " + _0x305103.strictBind);
              this.input = String(_0x369c1a);
              this.containsEsc = false;
              if (_0x58b471) {
                this.pos = _0x58b471;
                this.lineStart = this.input.lastIndexOf("\n", _0x58b471 - 1) + 1;
                this.curLine = this.input.slice(0, this.lineStart).split(_0x1c21f2).length;
              } else {
                this.pos = this.lineStart = 0;
                this.curLine = 1;
              }
              this.type = _0x47ea38.eof;
              this.value = null;
              this.start = this.end = this.pos;
              this.startLoc = this.endLoc = this.curPosition();
              this.lastTokEndLoc = this.lastTokStartLoc = null;
              this.lastTokStart = this.lastTokEnd = this.pos;
              this.context = this.initialContext();
              this.exprAllowed = true;
              this.inModule = _0x57f0fd.sourceType === "module";
              this.strict = this.inModule || this.strictDirective(this.pos);
              this.potentialArrowAt = -1;
              this.potentialArrowInForAwait = false;
              this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
              this.labels = [];
              this.undefinedExports = Object.create(null);
              if (this.pos === 0 && _0x57f0fd.allowHashBang && this.input.slice(0, 2) === "#!") {
                this.skipLineComment(2);
              }
              this.scopeStack = [];
              this.enterScope(1);
              this.regexpState = null;
              this.privateNameStack = [];
            }
            var _0x5d3c40 = {
              inFunction: {
                configurable: true
              },
              inGenerator: {
                configurable: true
              },
              inAsync: {
                configurable: true
              },
              canAwait: {
                configurable: true
              },
              allowSuper: {
                configurable: true
              },
              allowDirectSuper: {
                configurable: true
              },
              treatFunctionsAsVar: {
                configurable: true
              },
              allowNewDotTarget: {
                configurable: true
              },
              inClassStaticBlock: {
                configurable: true
              }
            };
            _0x504270.prototype.parse = function () {
              var _0x421c7c = this.options.program || this.startNode();
              this.nextToken();
              return this.parseTopLevel(_0x421c7c);
            };
            _0x5d3c40.inFunction.get = function () {
              return (this.currentVarScope().flags & 2) > 0;
            };
            _0x5d3c40.inGenerator.get = function () {
              return (this.currentVarScope().flags & 8) > 0 && !this.currentVarScope().inClassFieldInit;
            };
            _0x5d3c40.inAsync.get = function () {
              return (this.currentVarScope().flags & 4) > 0 && !this.currentVarScope().inClassFieldInit;
            };
            _0x5d3c40.canAwait.get = function () {
              for (var _0x1966b7 = this.scopeStack.length - 1; _0x1966b7 >= 0; _0x1966b7--) {
                var _0x107b39 = this.scopeStack[_0x1966b7];
                if (_0x107b39.inClassFieldInit || _0x107b39.flags & _0x2b5d6a) {
                  return false;
                }
                if (_0x107b39.flags & 2) {
                  return (_0x107b39.flags & 4) > 0;
                }
              }
              return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
            };
            _0x5d3c40.allowSuper.get = function () {
              var _0x10cb03 = this.currentThisScope();
              var _0x28c69a = _0x10cb03.flags;
              var _0x4960fb = _0x10cb03.inClassFieldInit;
              return (_0x28c69a & 64) > 0 || _0x4960fb || this.options.allowSuperOutsideMethod;
            };
            _0x5d3c40.allowDirectSuper.get = function () {
              return (this.currentThisScope().flags & 128) > 0;
            };
            _0x5d3c40.treatFunctionsAsVar.get = function () {
              return this.treatFunctionsAsVarInScope(this.currentScope());
            };
            _0x5d3c40.allowNewDotTarget.get = function () {
              var _0x272ee1 = this.currentThisScope();
              var _0x107d0f = _0x272ee1.flags;
              var _0x616529 = _0x272ee1.inClassFieldInit;
              return (_0x107d0f & 258) > 0 || _0x616529;
            };
            _0x5d3c40.inClassStaticBlock.get = function () {
              return (this.currentVarScope().flags & _0x2b5d6a) > 0;
            };
            _0x504270.extend = function () {
              for (var _0x2bdb44 = [], _0x2996ae = arguments.length; _0x2996ae--;) {
                _0x2bdb44[_0x2996ae] = arguments[_0x2996ae];
              }
              for (var _0xdd87d = this, _0x56d570 = 0; _0x56d570 < _0x2bdb44.length; _0x56d570++) {
                _0xdd87d = _0x2bdb44[_0x56d570](_0xdd87d);
              }
              return _0xdd87d;
            };
            _0x504270.parse = function (_0x14c75e, _0x2cb6b5) {
              return new this(_0x2cb6b5, _0x14c75e).parse();
            };
            _0x504270.parseExpressionAt = function (_0x477c07, _0x16f2c8, _0x3990ce) {
              var _0xecfa7c = new this(_0x3990ce, _0x477c07, _0x16f2c8);
              _0xecfa7c.nextToken();
              return _0xecfa7c.parseExpression();
            };
            _0x504270.tokenizer = function (_0x4a3db0, _0x3fb410) {
              return new this(_0x3fb410, _0x4a3db0);
            };
            Object.defineProperties(_0x504270.prototype, _0x5d3c40);
            var _0x5552a1 = _0x504270.prototype;
            var _0x3d372f = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
            function _0x24e5bd() {
              this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
            }
            _0x5552a1.strictDirective = function (_0x4f56ab) {
              for (;;) {
                _0xb0af09.lastIndex = _0x4f56ab;
                _0x4f56ab += _0xb0af09.exec(this.input)[0].length;
                var _0x466a46 = _0x3d372f.exec(this.input.slice(_0x4f56ab));
                if (!_0x466a46) {
                  return false;
                }
                if ((_0x466a46[1] || _0x466a46[2]) === "got it") {
                  _0xb0af09.lastIndex = _0x4f56ab + _0x466a46[0].length;
                  var _0x87f28c = _0xb0af09.exec(this.input);
                  var _0x451001 = _0x87f28c.index + _0x87f28c[0].length;
                  var _0x3b46b9 = this.input.charAt(_0x451001);
                  return _0x3b46b9 === ";" || _0x3b46b9 === "}" || _0x1c21f2.test(_0x87f28c[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(_0x3b46b9) || _0x3b46b9 === "!" && this.input.charAt(_0x451001 + 1) === "=");
                }
                _0x4f56ab += _0x466a46[0].length;
                _0xb0af09.lastIndex = _0x4f56ab;
                _0x4f56ab += _0xb0af09.exec(this.input)[0].length;
                if (this.input[_0x4f56ab] === ";") {
                  _0x4f56ab++;
                }
              }
            };
            _0x5552a1.eat = function (_0x53eb3f) {
              return this.type === _0x53eb3f && (this.next(), true);
            };
            _0x5552a1.isContextual = function (_0x5d637f) {
              return this.type === _0x47ea38.name && this.value === _0x5d637f && !this.containsEsc;
            };
            _0x5552a1.eatContextual = function (_0x106e0a) {
              return !!this.isContextual(_0x106e0a) && (this.next(), true);
            };
            _0x5552a1.expectContextual = function (_0x55403b) {
              if (!this.eatContextual(_0x55403b)) {
                this.unexpected();
              }
            };
            _0x5552a1.canInsertSemicolon = function () {
              return this.type === _0x47ea38.eof || this.type === _0x47ea38.braceR || _0x1c21f2.test(this.input.slice(this.lastTokEnd, this.start));
            };
            _0x5552a1.insertSemicolon = function () {
              if (this.canInsertSemicolon()) {
                if (this.options.onInsertedSemicolon) {
                  this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
                }
                return true;
              }
            };
            _0x5552a1.semicolon = function () {
              if (!(this.eat(_0x47ea38.semi) || this.insertSemicolon())) {
                this.unexpected();
              }
            };
            _0x5552a1.afterTrailingComma = function (_0x35824f, _0x33b995) {
              if (this.type === _0x35824f) {
                if (this.options.onTrailingComma) {
                  this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
                }
                if (!_0x33b995) {
                  this.next();
                }
                return true;
              }
            };
            _0x5552a1.expect = function (_0x5b542a) {
              if (!this.eat(_0x5b542a)) {
                this.unexpected();
              }
            };
            _0x5552a1.unexpected = function (_0x4b5d59) {
              this.raise(_0x4b5d59 != null ? _0x4b5d59 : this.start, "Unexpected token");
            };
            _0x5552a1.checkPatternErrors = function (_0x3ada2a, _0x198df4) {
              if (_0x3ada2a) {
                if (_0x3ada2a.trailingComma > -1) {
                  this.raiseRecoverable(_0x3ada2a.trailingComma, "Comma is not permitted after the rest element");
                }
                var _0x273055 = _0x198df4 ? _0x3ada2a.parenthesizedAssign : _0x3ada2a.parenthesizedBind;
                if (_0x273055 > -1) {
                  this.raiseRecoverable(_0x273055, "Parenthesized pattern");
                }
              }
            };
            _0x5552a1.checkExpressionErrors = function (_0x11aaf3, _0x2a7862) {
              if (!_0x11aaf3) {
                return false;
              }
              var _0x2d814e = _0x11aaf3.shorthandAssign;
              var _0x388921 = _0x11aaf3.doubleProto;
              if (!_0x2a7862) {
                return _0x2d814e >= 0 || _0x388921 >= 0;
              }
              if (_0x2d814e >= 0) {
                this.raise(_0x2d814e, "Shorthand property assignments are valid only in destructuring patterns");
              }
              if (_0x388921 >= 0) {
                this.raiseRecoverable(_0x388921, "Redefinition of __proto__ property");
              }
            };
            _0x5552a1.checkYieldAwaitInDefaultParams = function () {
              if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
                this.raise(this.yieldPos, "Yield expression cannot be a default value");
              }
              if (this.awaitPos) {
                this.raise(this.awaitPos, "Await expression cannot be a default value");
              }
            };
            _0x5552a1.isSimpleAssignTarget = function (_0x1b7307) {
              if (_0x1b7307.type === "ParenthesizedExpression") {
                return this.isSimpleAssignTarget(_0x1b7307.expression);
              } else {
                return _0x1b7307.type === "Identifier" || _0x1b7307.type === "MemberExpression";
              }
            };
            var _0x231242 = _0x504270.prototype;
            _0x231242.parseTopLevel = function (_0x2005df) {
              var _0x25e92e = Object.create(null);
              for (_0x2005df.body || (_0x2005df.body = []); this.type !== _0x47ea38.eof;) {
                var _0x536464 = this.parseStatement(null, true, _0x25e92e);
                _0x2005df.body.push(_0x536464);
              }
              if (this.inModule) {
                for (var _0x4e4d0c = 0, _0x542c73 = Object.keys(this.undefinedExports); _0x4e4d0c < _0x542c73.length; _0x4e4d0c += 1) {
                  var _0x599426 = _0x542c73[_0x4e4d0c];
                  this.raiseRecoverable(this.undefinedExports[_0x599426].start, "Export '" + _0x599426 + "' is not defined");
                }
              }
              this.adaptDirectivePrologue(_0x2005df.body);
              this.next();
              _0x2005df.sourceType = this.options.sourceType;
              return this.finishNode(_0x2005df, "Program");
            };
            var _0x3e158f = {
              kind: "loop"
            };
            var _0x3a4a19 = {
              kind: "switch"
            };
            _0x231242.isLet = function (_0x47a82b) {
              if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
                return false;
              }
              _0xb0af09.lastIndex = this.pos;
              var _0x365061 = _0xb0af09.exec(this.input);
              var _0x3178b2 = this.pos + _0x365061[0].length;
              var _0x2f06e7 = this.input.charCodeAt(_0x3178b2);
              if (_0x2f06e7 === 91 || _0x2f06e7 === 92 || _0x2f06e7 > 55295 && _0x2f06e7 < 56320) {
                return true;
              }
              if (_0x47a82b) {
                return false;
              }
              if (_0x2f06e7 === 123) {
                return true;
              }
              if (_0x32cd9a(_0x2f06e7, true)) {
                for (var _0x8a52be = _0x3178b2 + 1; _0x5942d0(_0x2f06e7 = this.input.charCodeAt(_0x8a52be), true);) {
                  ++_0x8a52be;
                }
                if (_0x2f06e7 === 92 || _0x2f06e7 > 55295 && _0x2f06e7 < 56320) {
                  return true;
                }
                var _0x4ab109 = this.input.slice(_0x3178b2, _0x8a52be);
                if (!_0x19fb95.test(_0x4ab109)) {
                  return true;
                }
              }
              return false;
            };
            _0x231242.isAsyncFunction = function () {
              if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
                return false;
              }
              _0xb0af09.lastIndex = this.pos;
              var _0x435508;
              var _0x3c2f8c = _0xb0af09.exec(this.input);
              var _0x58c2aa = this.pos + _0x3c2f8c[0].length;
              return !(_0x1c21f2.test(this.input.slice(this.pos, _0x58c2aa)) || this.input.slice(_0x58c2aa, _0x58c2aa + 8) !== "function" || _0x58c2aa + 8 !== this.input.length && (_0x5942d0(_0x435508 = this.input.charCodeAt(_0x58c2aa + 8)) || _0x435508 > 55295 && _0x435508 < 56320));
            };
            _0x231242.parseStatement = function (_0xc560db, _0x6d2e5a, _0x13d305) {
              var _0x2f9b61;
              var _0x1130da = this.type;
              var _0x5e6fa4 = this.startNode();
              if (this.isLet(_0xc560db)) {
                _0x1130da = _0x47ea38._var;
                _0x2f9b61 = "let";
              }
              switch (_0x1130da) {
                case _0x47ea38._break:
                case _0x47ea38._continue:
                  return this.parseBreakContinueStatement(_0x5e6fa4, _0x1130da.keyword);
                case _0x47ea38._debugger:
                  return this.parseDebuggerStatement(_0x5e6fa4);
                case _0x47ea38._do:
                  return this.parseDoStatement(_0x5e6fa4);
                case _0x47ea38._for:
                  return this.parseForStatement(_0x5e6fa4);
                case _0x47ea38._function:
                  if (_0xc560db && (this.strict || _0xc560db !== "if" && _0xc560db !== "label") && this.options.ecmaVersion >= 6) {
                    this.unexpected();
                  }
                  return this.parseFunctionStatement(_0x5e6fa4, false, !_0xc560db);
                case _0x47ea38._class:
                  if (_0xc560db) {
                    this.unexpected();
                  }
                  return this.parseClass(_0x5e6fa4, true);
                case _0x47ea38._if:
                  return this.parseIfStatement(_0x5e6fa4);
                case _0x47ea38._return:
                  return this.parseReturnStatement(_0x5e6fa4);
                case _0x47ea38._switch:
                  return this.parseSwitchStatement(_0x5e6fa4);
                case _0x47ea38._throw:
                  return this.parseThrowStatement(_0x5e6fa4);
                case _0x47ea38._try:
                  return this.parseTryStatement(_0x5e6fa4);
                case _0x47ea38._const:
                case _0x47ea38._var:
                  _0x2f9b61 = _0x2f9b61 || this.value;
                  if (_0xc560db && _0x2f9b61 !== "var") {
                    this.unexpected();
                  }
                  return this.parseVarStatement(_0x5e6fa4, _0x2f9b61);
                case _0x47ea38._while:
                  return this.parseWhileStatement(_0x5e6fa4);
                case _0x47ea38._with:
                  return this.parseWithStatement(_0x5e6fa4);
                case _0x47ea38.braceL:
                  return this.parseBlock(true, _0x5e6fa4);
                case _0x47ea38.semi:
                  return this.parseEmptyStatement(_0x5e6fa4);
                case _0x47ea38._export:
                case _0x47ea38._import:
                  if (this.options.ecmaVersion > 10 && _0x1130da === _0x47ea38._import) {
                    _0xb0af09.lastIndex = this.pos;
                    var _0x52eb94 = _0xb0af09.exec(this.input);
                    var _0x316f50 = this.pos + _0x52eb94[0].length;
                    var _0x3c590a = this.input.charCodeAt(_0x316f50);
                    if (_0x3c590a === 40 || _0x3c590a === 46) {
                      return this.parseExpressionStatement(_0x5e6fa4, this.parseExpression());
                    }
                  }
                  if (!this.options.allowImportExportEverywhere) {
                    if (!_0x6d2e5a) {
                      this.raise(this.start, "'import' and 'export' may only appear at the top level");
                    }
                    if (!this.inModule) {
                      this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
                    }
                  }
                  if (_0x1130da === _0x47ea38._import) {
                    return this.parseImport(_0x5e6fa4);
                  } else {
                    return this.parseExport(_0x5e6fa4, _0x13d305);
                  }
                default:
                  if (this.isAsyncFunction()) {
                    if (_0xc560db) {
                      this.unexpected();
                    }
                    this.next();
                    return this.parseFunctionStatement(_0x5e6fa4, true, !_0xc560db);
                  }
                  var _0x155888 = this.value;
                  var _0x5675d1 = this.parseExpression();
                  if (_0x1130da === _0x47ea38.name && _0x5675d1.type === "Identifier" && this.eat(_0x47ea38.colon)) {
                    return this.parseLabeledStatement(_0x5e6fa4, _0x155888, _0x5675d1, _0xc560db);
                  } else {
                    return this.parseExpressionStatement(_0x5e6fa4, _0x5675d1);
                  }
              }
            };
            _0x231242.parseBreakContinueStatement = function (_0x1bb3a8, _0x1f9019) {
              var _0x4facbd = _0x1f9019 === "break";
              this.next();
              if (this.eat(_0x47ea38.semi) || this.insertSemicolon()) {
                _0x1bb3a8.label = null;
              } else if (this.type !== _0x47ea38.name) {
                this.unexpected();
              } else {
                _0x1bb3a8.label = this.parseIdent();
                this.semicolon();
              }
              for (var _0x1cebe5 = 0; _0x1cebe5 < this.labels.length; ++_0x1cebe5) {
                var _0x51243a = this.labels[_0x1cebe5];
                if (_0x1bb3a8.label == null || _0x51243a.name === _0x1bb3a8.label.name) {
                  if (_0x51243a.kind != null && (_0x4facbd || _0x51243a.kind === "loop")) {
                    break;
                  }
                  if (_0x1bb3a8.label && _0x4facbd) {
                    break;
                  }
                }
              }
              if (_0x1cebe5 === this.labels.length) {
                this.raise(_0x1bb3a8.start, "Unsyntactic " + _0x1f9019);
              }
              return this.finishNode(_0x1bb3a8, _0x4facbd ? "BreakStatement" : "ContinueStatement");
            };
            _0x231242.parseDebuggerStatement = function (_0x9137fa) {
              this.next();
              this.semicolon();
              return this.finishNode(_0x9137fa, "DebuggerStatement");
            };
            _0x231242.parseDoStatement = function (_0x1b4d5d) {
              this.next();
              this.labels.push(_0x3e158f);
              _0x1b4d5d.body = this.parseStatement("do");
              this.labels.pop();
              this.expect(_0x47ea38._while);
              _0x1b4d5d.test = this.parseParenExpression();
              if (this.options.ecmaVersion >= 6) {
                this.eat(_0x47ea38.semi);
              } else {
                this.semicolon();
              }
              return this.finishNode(_0x1b4d5d, "DoWhileStatement");
            };
            _0x231242.parseForStatement = function (_0x3a8922) {
              this.next();
              var _0xe03dc8 = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
              this.labels.push(_0x3e158f);
              this.enterScope(0);
              this.expect(_0x47ea38.parenL);
              if (this.type === _0x47ea38.semi) {
                if (_0xe03dc8 > -1) {
                  this.unexpected(_0xe03dc8);
                }
                return this.parseFor(_0x3a8922, null);
              }
              var _0x401263 = this.isLet();
              if (this.type === _0x47ea38._var || this.type === _0x47ea38._const || _0x401263) {
                var _0x4d9294 = this.startNode();
                var _0x1b5542 = _0x401263 ? "let" : this.value;
                this.next();
                this.parseVar(_0x4d9294, true, _0x1b5542);
                this.finishNode(_0x4d9294, "VariableDeclaration");
                if ((this.type === _0x47ea38._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && _0x4d9294.declarations.length === 1) {
                  if (this.options.ecmaVersion >= 9) {
                    if (this.type === _0x47ea38._in) {
                      if (_0xe03dc8 > -1) {
                        this.unexpected(_0xe03dc8);
                      }
                    } else {
                      _0x3a8922.await = _0xe03dc8 > -1;
                    }
                  }
                  return this.parseForIn(_0x3a8922, _0x4d9294);
                } else {
                  if (_0xe03dc8 > -1) {
                    this.unexpected(_0xe03dc8);
                  }
                  return this.parseFor(_0x3a8922, _0x4d9294);
                }
              }
              var _0x4e338f = this.isContextual("let");
              var _0x2a5e18 = false;
              var _0x3d01f2 = new _0x24e5bd();
              var _0x8e1dbb = this.parseExpression(!(_0xe03dc8 > -1) || "await", _0x3d01f2);
              if (this.type === _0x47ea38._in || (_0x2a5e18 = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
                if (this.options.ecmaVersion >= 9) {
                  if (this.type === _0x47ea38._in) {
                    if (_0xe03dc8 > -1) {
                      this.unexpected(_0xe03dc8);
                    }
                  } else {
                    _0x3a8922.await = _0xe03dc8 > -1;
                  }
                }
                if (_0x4e338f && _0x2a5e18) {
                  this.raise(_0x8e1dbb.start, "The left-hand side of a for-of loop may not start with 'let'.");
                }
                this.toAssignable(_0x8e1dbb, false, _0x3d01f2);
                this.checkLValPattern(_0x8e1dbb);
                return this.parseForIn(_0x3a8922, _0x8e1dbb);
              } else {
                this.checkExpressionErrors(_0x3d01f2, true);
                if (_0xe03dc8 > -1) {
                  this.unexpected(_0xe03dc8);
                }
                return this.parseFor(_0x3a8922, _0x8e1dbb);
              }
            };
            _0x231242.parseFunctionStatement = function (_0x250fb0, _0x107544, _0x4e1871) {
              this.next();
              return this.parseFunction(_0x250fb0, _0x134098 | (_0x4e1871 ? 0 : _0x5eba7d), false, _0x107544);
            };
            _0x231242.parseIfStatement = function (_0x54cb9f) {
              this.next();
              _0x54cb9f.test = this.parseParenExpression();
              _0x54cb9f.consequent = this.parseStatement("if");
              _0x54cb9f.alternate = this.eat(_0x47ea38._else) ? this.parseStatement("if") : null;
              return this.finishNode(_0x54cb9f, "IfStatement");
            };
            _0x231242.parseReturnStatement = function (_0x1c4266) {
              if (!(this.inFunction || this.options.allowReturnOutsideFunction)) {
                this.raise(this.start, "'return' outside of function");
              }
              this.next();
              if (this.eat(_0x47ea38.semi) || this.insertSemicolon()) {
                _0x1c4266.argument = null;
              } else {
                _0x1c4266.argument = this.parseExpression();
                this.semicolon();
              }
              return this.finishNode(_0x1c4266, "ReturnStatement");
            };
            _0x231242.parseSwitchStatement = function (_0x407d98) {
              var _0x589736;
              this.next();
              _0x407d98.discriminant = this.parseParenExpression();
              _0x407d98.cases = [];
              this.expect(_0x47ea38.braceL);
              this.labels.push(_0x3a4a19);
              this.enterScope(0);
              for (var _0x9ad8d8 = false; this.type !== _0x47ea38.braceR;) {
                if (this.type === _0x47ea38._case || this.type === _0x47ea38._default) {
                  var _0x15bae4 = this.type === _0x47ea38._case;
                  if (_0x589736) {
                    this.finishNode(_0x589736, "SwitchCase");
                  }
                  _0x407d98.cases.push(_0x589736 = this.startNode());
                  _0x589736.consequent = [];
                  this.next();
                  if (_0x15bae4) {
                    _0x589736.test = this.parseExpression();
                  } else {
                    if (_0x9ad8d8) {
                      this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
                    }
                    _0x9ad8d8 = true;
                    _0x589736.test = null;
                  }
                  this.expect(_0x47ea38.colon);
                } else {
                  if (!_0x589736) {
                    this.unexpected();
                  }
                  _0x589736.consequent.push(this.parseStatement(null));
                }
              }
              this.exitScope();
              if (_0x589736) {
                this.finishNode(_0x589736, "SwitchCase");
              }
              this.next();
              this.labels.pop();
              return this.finishNode(_0x407d98, "SwitchStatement");
            };
            _0x231242.parseThrowStatement = function (_0x1165ff) {
              this.next();
              if (_0x1c21f2.test(this.input.slice(this.lastTokEnd, this.start))) {
                this.raise(this.lastTokEnd, "Illegal newline after throw");
              }
              _0x1165ff.argument = this.parseExpression();
              this.semicolon();
              return this.finishNode(_0x1165ff, "ThrowStatement");
            };
            var _0x2943df = [];
            _0x231242.parseTryStatement = function (_0xfd8500) {
              this.next();
              _0xfd8500.block = this.parseBlock();
              _0xfd8500.handler = null;
              if (this.type === _0x47ea38._catch) {
                var _0x565918 = this.startNode();
                this.next();
                if (this.eat(_0x47ea38.parenL)) {
                  _0x565918.param = this.parseBindingAtom();
                  var _0x50d7f8 = _0x565918.param.type === "Identifier";
                  this.enterScope(_0x50d7f8 ? 32 : 0);
                  this.checkLValPattern(_0x565918.param, _0x50d7f8 ? 4 : 2);
                  this.expect(_0x47ea38.parenR);
                } else {
                  if (this.options.ecmaVersion < 10) {
                    this.unexpected();
                  }
                  _0x565918.param = null;
                  this.enterScope(0);
                }
                _0x565918.body = this.parseBlock(false);
                this.exitScope();
                _0xfd8500.handler = this.finishNode(_0x565918, "CatchClause");
              }
              _0xfd8500.finalizer = this.eat(_0x47ea38._finally) ? this.parseBlock() : null;
              if (!(_0xfd8500.handler || _0xfd8500.finalizer)) {
                this.raise(_0xfd8500.start, "Missing catch or finally clause");
              }
              return this.finishNode(_0xfd8500, "TryStatement");
            };
            _0x231242.parseVarStatement = function (_0xb5fa4c, _0x5a6bb2) {
              this.next();
              this.parseVar(_0xb5fa4c, false, _0x5a6bb2);
              this.semicolon();
              return this.finishNode(_0xb5fa4c, "VariableDeclaration");
            };
            _0x231242.parseWhileStatement = function (_0x387db0) {
              this.next();
              _0x387db0.test = this.parseParenExpression();
              this.labels.push(_0x3e158f);
              _0x387db0.body = this.parseStatement("while");
              this.labels.pop();
              return this.finishNode(_0x387db0, "WhileStatement");
            };
            _0x231242.parseWithStatement = function (_0xfdc6e2) {
              if (this.strict) {
                this.raise(this.start, "'with' in strict mode");
              }
              this.next();
              _0xfdc6e2.object = this.parseParenExpression();
              _0xfdc6e2.body = this.parseStatement("with");
              return this.finishNode(_0xfdc6e2, "WithStatement");
            };
            _0x231242.parseEmptyStatement = function (_0xbe724a) {
              this.next();
              return this.finishNode(_0xbe724a, "EmptyStatement");
            };
            _0x231242.parseLabeledStatement = function (_0x544e86, _0x10761a, _0x145aa9, _0x160697) {
              for (var _0x6e9f4b = 0, _0x165340 = this.labels; _0x6e9f4b < _0x165340.length; _0x6e9f4b += 1) {
                if (_0x165340[_0x6e9f4b].name === _0x10761a) {
                  this.raise(_0x145aa9.start, "Label '" + _0x10761a + "' is already declared");
                }
              }
              for (var _0x18981c = this.type.isLoop ? "loop" : this.type === _0x47ea38._switch ? "switch" : null, _0x482505 = this.labels.length - 1; _0x482505 >= 0; _0x482505--) {
                var _0x1ee8d8 = this.labels[_0x482505];
                if (_0x1ee8d8.statementStart !== _0x544e86.start) {
                  break;
                }
                _0x1ee8d8.statementStart = this.start;
                _0x1ee8d8.kind = _0x18981c;
              }
              this.labels.push({
                name: _0x10761a,
                kind: _0x18981c,
                statementStart: this.start
              });
              _0x544e86.body = this.parseStatement(_0x160697 ? _0x160697.indexOf("label") === -1 ? _0x160697 + "label" : _0x160697 : "label");
              this.labels.pop();
              _0x544e86.label = _0x145aa9;
              return this.finishNode(_0x544e86, "LabeledStatement");
            };
            _0x231242.parseExpressionStatement = function (_0x18702f, _0x4e2ee3) {
              _0x18702f.expression = _0x4e2ee3;
              this.semicolon();
              return this.finishNode(_0x18702f, "ExpressionStatement");
            };
            _0x231242.parseBlock = function (_0x31f3c3, _0xeed5ec, _0x1d8f11) {
              if (_0x31f3c3 === undefined) {
                _0x31f3c3 = true;
              }
              if (_0xeed5ec === undefined) {
                _0xeed5ec = this.startNode();
              }
              _0xeed5ec.body = [];
              this.expect(_0x47ea38.braceL);
              if (_0x31f3c3) {
                this.enterScope(0);
              }
              for (; this.type !== _0x47ea38.braceR;) {
                var _0x3002f6 = this.parseStatement(null);
                _0xeed5ec.body.push(_0x3002f6);
              }
              if (_0x1d8f11) {
                this.strict = false;
              }
              this.next();
              if (_0x31f3c3) {
                this.exitScope();
              }
              return this.finishNode(_0xeed5ec, "BlockStatement");
            };
            _0x231242.parseFor = function (_0x4748d9, _0x331992) {
              _0x4748d9.init = _0x331992;
              this.expect(_0x47ea38.semi);
              _0x4748d9.test = this.type === _0x47ea38.semi ? null : this.parseExpression();
              this.expect(_0x47ea38.semi);
              _0x4748d9.update = this.type === _0x47ea38.parenR ? null : this.parseExpression();
              this.expect(_0x47ea38.parenR);
              _0x4748d9.body = this.parseStatement("for");
              this.exitScope();
              this.labels.pop();
              return this.finishNode(_0x4748d9, "ForStatement");
            };
            _0x231242.parseForIn = function (_0x3bf5b9, _0x5731c3) {
              var _0x57d1ed = this.type === _0x47ea38._in;
              this.next();
              if (_0x5731c3.type === "VariableDeclaration" && _0x5731c3.declarations[0].init != null && (!_0x57d1ed || this.options.ecmaVersion < 8 || this.strict || _0x5731c3.kind !== "var" || _0x5731c3.declarations[0].id.type !== "Identifier")) {
                this.raise(_0x5731c3.start, (_0x57d1ed ? "for-in" : "for-of") + " loop variable declaration may not have an initializer");
              }
              _0x3bf5b9.left = _0x5731c3;
              _0x3bf5b9.right = _0x57d1ed ? this.parseExpression() : this.parseMaybeAssign();
              this.expect(_0x47ea38.parenR);
              _0x3bf5b9.body = this.parseStatement("for");
              this.exitScope();
              this.labels.pop();
              return this.finishNode(_0x3bf5b9, _0x57d1ed ? "ForInStatement" : "ForOfStatement");
            };
            _0x231242.parseVar = function (_0x5db13a, _0x3ba142, _0x4136bf) {
              _0x5db13a.declarations = [];
              _0x5db13a.kind = _0x4136bf;
              for (;;) {
                var _0x5a2f17 = this.startNode();
                this.parseVarId(_0x5a2f17, _0x4136bf);
                if (this.eat(_0x47ea38.eq)) {
                  _0x5a2f17.init = this.parseMaybeAssign(_0x3ba142);
                } else if (_0x4136bf !== "const" || this.type === _0x47ea38._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
                  if (_0x5a2f17.id.type === "Identifier" || _0x3ba142 && (this.type === _0x47ea38._in || this.isContextual("of"))) {
                    _0x5a2f17.init = null;
                  } else {
                    this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
                  }
                } else {
                  this.unexpected();
                }
                _0x5db13a.declarations.push(this.finishNode(_0x5a2f17, "VariableDeclarator"));
                if (!this.eat(_0x47ea38.comma)) {
                  break;
                }
              }
              return _0x5db13a;
            };
            _0x231242.parseVarId = function (_0x158283, _0x349c08) {
              _0x158283.id = this.parseBindingAtom();
              this.checkLValPattern(_0x158283.id, _0x349c08 === "var" ? 1 : 2, false);
            };
            var _0x134098 = 1;
            var _0x5eba7d = 2;
            function _0x488152(_0x3ff069, _0x437202) {
              var _0x587465 = _0x437202.key.name;
              var _0x4da31c = _0x3ff069[_0x587465];
              var _0x4cf21d = "true";
              if (!(_0x437202.type !== "MethodDefinition" || _0x437202.kind !== "get" && _0x437202.kind !== "set")) {
                _0x4cf21d = (_0x437202.static ? "s" : "i") + _0x437202.kind;
              }
              if (_0x4da31c === "iget" && _0x4cf21d === "iset" || _0x4da31c === "iset" && _0x4cf21d === "iget" || _0x4da31c === "sget" && _0x4cf21d === "sset" || _0x4da31c === "sset" && _0x4cf21d === "sget") {
                _0x3ff069[_0x587465] = "true";
                return false;
              } else {
                return !!_0x4da31c || (_0x3ff069[_0x587465] = _0x4cf21d, false);
              }
            }
            function _0x49a2bf(_0x288213, _0x36b75c) {
              var _0x292ddd = _0x288213.computed;
              var _0x1ec5db = _0x288213.key;
              return !_0x292ddd && (_0x1ec5db.type === "Identifier" && _0x1ec5db.name === _0x36b75c || _0x1ec5db.type === "Literal" && _0x1ec5db.value === _0x36b75c);
            }
            _0x231242.parseFunction = function (_0xce7ab5, _0xd9b5d8, _0x1d7561, _0x36eb5e, _0x206429) {
              this.initFunction(_0xce7ab5);
              if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !_0x36eb5e) {
                if (this.type === _0x47ea38.star && _0xd9b5d8 & _0x5eba7d) {
                  this.unexpected();
                }
                _0xce7ab5.generator = this.eat(_0x47ea38.star);
              }
              if (this.options.ecmaVersion >= 8) {
                _0xce7ab5.async = !!_0x36eb5e;
              }
              if (_0xd9b5d8 & _0x134098) {
                _0xce7ab5.id = _0xd9b5d8 & 4 && this.type !== _0x47ea38.name ? null : this.parseIdent();
                if (!(!_0xce7ab5.id || _0xd9b5d8 & _0x5eba7d)) {
                  this.checkLValSimple(_0xce7ab5.id, this.strict || _0xce7ab5.generator || _0xce7ab5.async ? this.treatFunctionsAsVar ? 1 : 2 : 3);
                }
              }
              var _0x5e3bd4 = this.yieldPos;
              var _0x4ae7f2 = this.awaitPos;
              var _0x327b09 = this.awaitIdentPos;
              this.yieldPos = 0;
              this.awaitPos = 0;
              this.awaitIdentPos = 0;
              this.enterScope(_0x4a114f(_0xce7ab5.async, _0xce7ab5.generator));
              if (!(_0xd9b5d8 & _0x134098)) {
                _0xce7ab5.id = this.type === _0x47ea38.name ? this.parseIdent() : null;
              }
              this.parseFunctionParams(_0xce7ab5);
              this.parseFunctionBody(_0xce7ab5, _0x1d7561, false, _0x206429);
              this.yieldPos = _0x5e3bd4;
              this.awaitPos = _0x4ae7f2;
              this.awaitIdentPos = _0x327b09;
              return this.finishNode(_0xce7ab5, _0xd9b5d8 & _0x134098 ? "FunctionDeclaration" : "FunctionExpression");
            };
            _0x231242.parseFunctionParams = function (_0x124f98) {
              this.expect(_0x47ea38.parenL);
              _0x124f98.params = this.parseBindingList(_0x47ea38.parenR, false, this.options.ecmaVersion >= 8);
              this.checkYieldAwaitInDefaultParams();
            };
            _0x231242.parseClass = function (_0x3ebbea, _0x4ed7a6) {
              this.next();
              var _0x479ab9 = this.strict;
              this.strict = true;
              this.parseClassId(_0x3ebbea, _0x4ed7a6);
              this.parseClassSuper(_0x3ebbea);
              var _0x4f6a42 = this.enterClassBody();
              var _0xd54da9 = this.startNode();
              var _0x457fb3 = false;
              _0xd54da9.body = [];
              this.expect(_0x47ea38.braceL);
              for (; this.type !== _0x47ea38.braceR;) {
                var _0x276385 = this.parseClassElement(_0x3ebbea.superClass !== null);
                if (_0x276385) {
                  _0xd54da9.body.push(_0x276385);
                  if (_0x276385.type === "MethodDefinition" && _0x276385.kind === "constructor") {
                    if (_0x457fb3) {
                      this.raise(_0x276385.start, "Duplicate constructor in the same class");
                    }
                    _0x457fb3 = true;
                  } else if (_0x276385.key && _0x276385.key.type === "PrivateIdentifier" && _0x488152(_0x4f6a42, _0x276385)) {
                    this.raiseRecoverable(_0x276385.key.start, "Identifier '#" + _0x276385.key.name + "' has already been declared");
                  }
                }
              }
              this.strict = _0x479ab9;
              this.next();
              _0x3ebbea.body = this.finishNode(_0xd54da9, "ClassBody");
              this.exitClassBody();
              return this.finishNode(_0x3ebbea, _0x4ed7a6 ? "ClassDeclaration" : "ClassExpression");
            };
            _0x231242.parseClassElement = function (_0x91a3a2) {
              if (this.eat(_0x47ea38.semi)) {
                return null;
              }
              var _0x532b65 = this.options.ecmaVersion;
              var _0x13b7f9 = this.startNode();
              var _0x522bda = "";
              var _0x4f5258 = false;
              var _0x2d324f = false;
              var _0x4bd07e = "method";
              var _0x378d7a = false;
              if (this.eatContextual("static")) {
                if (_0x532b65 >= 13 && this.eat(_0x47ea38.braceL)) {
                  this.parseClassStaticBlock(_0x13b7f9);
                  return _0x13b7f9;
                }
                if (this.isClassElementNameStart() || this.type === _0x47ea38.star) {
                  _0x378d7a = true;
                } else {
                  _0x522bda = "static";
                }
              }
              _0x13b7f9.static = _0x378d7a;
              if (!_0x522bda && _0x532b65 >= 8 && this.eatContextual("async")) {
                if (!this.isClassElementNameStart() && this.type !== _0x47ea38.star || this.canInsertSemicolon()) {
                  _0x522bda = "async";
                } else {
                  _0x2d324f = true;
                }
              }
              if (!_0x522bda && (_0x532b65 >= 9 || !_0x2d324f) && this.eat(_0x47ea38.star)) {
                _0x4f5258 = true;
              }
              if (!_0x522bda && !_0x2d324f && !_0x4f5258) {
                var _0xa7fec1 = this.value;
                if (this.eatContextual("get") || this.eatContextual("set")) {
                  if (this.isClassElementNameStart()) {
                    _0x4bd07e = _0xa7fec1;
                  } else {
                    _0x522bda = _0xa7fec1;
                  }
                }
              }
              if (_0x522bda) {
                _0x13b7f9.computed = false;
                _0x13b7f9.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
                _0x13b7f9.key.name = _0x522bda;
                this.finishNode(_0x13b7f9.key, "Identifier");
              } else {
                this.parseClassElementName(_0x13b7f9);
              }
              if (_0x532b65 < 13 || this.type === _0x47ea38.parenL || _0x4bd07e !== "method" || _0x4f5258 || _0x2d324f) {
                var _0x25fb2e = !_0x13b7f9.static && _0x49a2bf(_0x13b7f9, "constructor");
                var _0x2eb44a = _0x25fb2e && _0x91a3a2;
                if (_0x25fb2e && _0x4bd07e !== "method") {
                  this.raise(_0x13b7f9.key.start, "Constructor can't have get/set modifier");
                }
                _0x13b7f9.kind = _0x25fb2e ? "constructor" : _0x4bd07e;
                this.parseClassMethod(_0x13b7f9, _0x4f5258, _0x2d324f, _0x2eb44a);
              } else {
                this.parseClassField(_0x13b7f9);
              }
              return _0x13b7f9;
            };
            _0x231242.isClassElementNameStart = function () {
              return this.type === _0x47ea38.name || this.type === _0x47ea38.privateId || this.type === _0x47ea38.num || this.type === _0x47ea38.string || this.type === _0x47ea38.bracketL || this.type.keyword;
            };
            _0x231242.parseClassElementName = function (_0x1eca2d) {
              if (this.type === _0x47ea38.privateId) {
                if (this.value === "constructor") {
                  this.raise(this.start, "Classes can't have an element named '#constructor'");
                }
                _0x1eca2d.computed = false;
                _0x1eca2d.key = this.parsePrivateIdent();
              } else {
                this.parsePropertyName(_0x1eca2d);
              }
            };
            _0x231242.parseClassMethod = function (_0x18270e, _0x196460, _0x690d86, _0x3a1d55) {
              var _0x3298eb = _0x18270e.key;
              if (_0x18270e.kind === "constructor") {
                if (_0x196460) {
                  this.raise(_0x3298eb.start, "Constructor can't be a generator");
                }
                if (_0x690d86) {
                  this.raise(_0x3298eb.start, "Constructor can't be an async method");
                }
              } else if (_0x18270e.static && _0x49a2bf(_0x18270e, "prototype")) {
                this.raise(_0x3298eb.start, "Classes may not have a static property named prototype");
              }
              var _0xa24937 = _0x18270e.value = this.parseMethod(_0x196460, _0x690d86, _0x3a1d55);
              if (_0x18270e.kind === "get" && _0xa24937.params.length !== 0) {
                this.raiseRecoverable(_0xa24937.start, "getter should have no params");
              }
              if (_0x18270e.kind === "set" && _0xa24937.params.length !== 1) {
                this.raiseRecoverable(_0xa24937.start, "setter should have exactly one param");
              }
              if (_0x18270e.kind === "set" && _0xa24937.params[0].type === "RestElement") {
                this.raiseRecoverable(_0xa24937.params[0].start, "Setter cannot use rest params");
              }
              return this.finishNode(_0x18270e, "MethodDefinition");
            };
            _0x231242.parseClassField = function (_0x4b0d88) {
              if (_0x49a2bf(_0x4b0d88, "constructor")) {
                this.raise(_0x4b0d88.key.start, "Classes can't have a field named 'constructor'");
              } else if (_0x4b0d88.static && _0x49a2bf(_0x4b0d88, "prototype")) {
                this.raise(_0x4b0d88.key.start, "Classes can't have a static field named 'prototype'");
              }
              if (this.eat(_0x47ea38.eq)) {
                var _0x53dad8 = this.currentThisScope();
                var _0x54233f = _0x53dad8.inClassFieldInit;
                _0x53dad8.inClassFieldInit = true;
                _0x4b0d88.value = this.parseMaybeAssign();
                _0x53dad8.inClassFieldInit = _0x54233f;
              } else {
                _0x4b0d88.value = null;
              }
              this.semicolon();
              return this.finishNode(_0x4b0d88, "PropertyDefinition");
            };
            _0x231242.parseClassStaticBlock = function (_0x17fd5b) {
              _0x17fd5b.body = [];
              var _0x4c5594 = this.labels;
              this.labels = [];
              this.enterScope(320);
              for (; this.type !== _0x47ea38.braceR;) {
                var _0xfa93d6 = this.parseStatement(null);
                _0x17fd5b.body.push(_0xfa93d6);
              }
              this.next();
              this.exitScope();
              this.labels = _0x4c5594;
              return this.finishNode(_0x17fd5b, "StaticBlock");
            };
            _0x231242.parseClassId = function (_0x2b66a7, _0x535d7e) {
              if (this.type === _0x47ea38.name) {
                _0x2b66a7.id = this.parseIdent();
                if (_0x535d7e) {
                  this.checkLValSimple(_0x2b66a7.id, 2, false);
                }
              } else {
                if (_0x535d7e === true) {
                  this.unexpected();
                }
                _0x2b66a7.id = null;
              }
            };
            _0x231242.parseClassSuper = function (_0x2b19b7) {
              _0x2b19b7.superClass = this.eat(_0x47ea38._extends) ? this.parseExprSubscripts(false) : null;
            };
            _0x231242.enterClassBody = function () {
              var _0x59e6b8 = {
                declared: Object.create(null),
                used: []
              };
              this.privateNameStack.push(_0x59e6b8);
              return _0x59e6b8.declared;
            };
            _0x231242.exitClassBody = function () {
              for (var _0x579127 = this.privateNameStack.pop(), _0x181361 = _0x579127.declared, _0x4c0002 = _0x579127.used, _0xee744d = this.privateNameStack.length, _0x2054b3 = _0xee744d === 0 ? null : this.privateNameStack[_0xee744d - 1], _0x81788f = 0; _0x81788f < _0x4c0002.length; ++_0x81788f) {
                var _0x412fa8 = _0x4c0002[_0x81788f];
                if (!_0x25ab37(_0x181361, _0x412fa8.name)) {
                  if (_0x2054b3) {
                    _0x2054b3.used.push(_0x412fa8);
                  } else {
                    this.raiseRecoverable(_0x412fa8.start, "Private field '#" + _0x412fa8.name + "' must be declared in an enclosing class");
                  }
                }
              }
            };
            _0x231242.parseExport = function (_0xd39a56, _0x5eb7ee) {
              this.next();
              if (this.eat(_0x47ea38.star)) {
                if (this.options.ecmaVersion >= 11) {
                  if (this.eatContextual("as")) {
                    _0xd39a56.exported = this.parseModuleExportName();
                    this.checkExport(_0x5eb7ee, _0xd39a56.exported.name, this.lastTokStart);
                  } else {
                    _0xd39a56.exported = null;
                  }
                }
                this.expectContextual("from");
                if (this.type !== _0x47ea38.string) {
                  this.unexpected();
                }
                _0xd39a56.source = this.parseExprAtom();
                this.semicolon();
                return this.finishNode(_0xd39a56, "ExportAllDeclaration");
              }
              if (this.eat(_0x47ea38._default)) {
                var _0x2a9645;
                this.checkExport(_0x5eb7ee, "default", this.lastTokStart);
                if (this.type === _0x47ea38._function || (_0x2a9645 = this.isAsyncFunction())) {
                  var _0x10a19d = this.startNode();
                  this.next();
                  if (_0x2a9645) {
                    this.next();
                  }
                  _0xd39a56.declaration = this.parseFunction(_0x10a19d, _0x134098 | 4, false, _0x2a9645);
                } else if (this.type === _0x47ea38._class) {
                  var _0x48d68a = this.startNode();
                  _0xd39a56.declaration = this.parseClass(_0x48d68a, "nullableID");
                } else {
                  _0xd39a56.declaration = this.parseMaybeAssign();
                  this.semicolon();
                }
                return this.finishNode(_0xd39a56, "ExportDefaultDeclaration");
              }
              if (this.shouldParseExportStatement()) {
                _0xd39a56.declaration = this.parseStatement(null);
                if (_0xd39a56.declaration.type === "VariableDeclaration") {
                  this.checkVariableExport(_0x5eb7ee, _0xd39a56.declaration.declarations);
                } else {
                  this.checkExport(_0x5eb7ee, _0xd39a56.declaration.id.name, _0xd39a56.declaration.id.start);
                }
                _0xd39a56.specifiers = [];
                _0xd39a56.source = null;
              } else {
                _0xd39a56.declaration = null;
                _0xd39a56.specifiers = this.parseExportSpecifiers(_0x5eb7ee);
                if (this.eatContextual("from")) {
                  if (this.type !== _0x47ea38.string) {
                    this.unexpected();
                  }
                  _0xd39a56.source = this.parseExprAtom();
                } else {
                  for (var _0x2907da = 0, _0x7e53ba = _0xd39a56.specifiers; _0x2907da < _0x7e53ba.length; _0x2907da += 1) {
                    var _0x1a8ad8 = _0x7e53ba[_0x2907da];
                    this.checkUnreserved(_0x1a8ad8.local);
                    this.checkLocalExport(_0x1a8ad8.local);
                    if (_0x1a8ad8.local.type === "Literal") {
                      this.raise(_0x1a8ad8.local.start, "A string literal cannot be used as an exported binding without `from`.");
                    }
                  }
                  _0xd39a56.source = null;
                }
                this.semicolon();
              }
              return this.finishNode(_0xd39a56, "ExportNamedDeclaration");
            };
            _0x231242.checkExport = function (_0x401e3, _0x1465a1, _0x2858e8) {
              if (_0x401e3) {
                if (_0x25ab37(_0x401e3, _0x1465a1)) {
                  this.raiseRecoverable(_0x2858e8, "Duplicate export '" + _0x1465a1 + "'");
                }
                _0x401e3[_0x1465a1] = true;
              }
            };
            _0x231242.checkPatternExport = function (_0x5916a6, _0x43fdd8) {
              var _0x4cb4c8 = _0x43fdd8.type;
              if (_0x4cb4c8 === "Identifier") {
                this.checkExport(_0x5916a6, _0x43fdd8.name, _0x43fdd8.start);
              } else if (_0x4cb4c8 === "ObjectPattern") {
                for (var _0x1e6428 = 0, _0x3a2f28 = _0x43fdd8.properties; _0x1e6428 < _0x3a2f28.length; _0x1e6428 += 1) {
                  var _0x19b663 = _0x3a2f28[_0x1e6428];
                  this.checkPatternExport(_0x5916a6, _0x19b663);
                }
              } else if (_0x4cb4c8 === "ArrayPattern") {
                for (var _0x285e70 = 0, _0x146d27 = _0x43fdd8.elements; _0x285e70 < _0x146d27.length; _0x285e70 += 1) {
                  var _0x42366f = _0x146d27[_0x285e70];
                  if (_0x42366f) {
                    this.checkPatternExport(_0x5916a6, _0x42366f);
                  }
                }
              } else if (_0x4cb4c8 === "Property") {
                this.checkPatternExport(_0x5916a6, _0x43fdd8.value);
              } else if (_0x4cb4c8 === "AssignmentPattern") {
                this.checkPatternExport(_0x5916a6, _0x43fdd8.left);
              } else if (_0x4cb4c8 === "RestElement") {
                this.checkPatternExport(_0x5916a6, _0x43fdd8.argument);
              } else if (_0x4cb4c8 === "ParenthesizedExpression") {
                this.checkPatternExport(_0x5916a6, _0x43fdd8.expression);
              }
            };
            _0x231242.checkVariableExport = function (_0x42b960, _0x4986c3) {
              if (_0x42b960) {
                for (var _0x30f0c5 = 0, _0xbb6959 = _0x4986c3; _0x30f0c5 < _0xbb6959.length; _0x30f0c5 += 1) {
                  var _0x4b097b = _0xbb6959[_0x30f0c5];
                  this.checkPatternExport(_0x42b960, _0x4b097b.id);
                }
              }
            };
            _0x231242.shouldParseExportStatement = function () {
              return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
            };
            _0x231242.parseExportSpecifiers = function (_0x1596bb) {
              var _0x23d6ac = [];
              var _0x59b244 = true;
              for (this.expect(_0x47ea38.braceL); !this.eat(_0x47ea38.braceR);) {
                if (_0x59b244) {
                  _0x59b244 = false;
                } else {
                  this.expect(_0x47ea38.comma);
                  if (this.afterTrailingComma(_0x47ea38.braceR)) {
                    break;
                  }
                }
                var _0x46836f = this.startNode();
                _0x46836f.local = this.parseModuleExportName();
                _0x46836f.exported = this.eatContextual("as") ? this.parseModuleExportName() : _0x46836f.local;
                this.checkExport(_0x1596bb, _0x46836f.exported[_0x46836f.exported.type === "Identifier" ? "name" : "value"], _0x46836f.exported.start);
                _0x23d6ac.push(this.finishNode(_0x46836f, "ExportSpecifier"));
              }
              return _0x23d6ac;
            };
            _0x231242.parseImport = function (_0xb158e0) {
              this.next();
              if (this.type === _0x47ea38.string) {
                _0xb158e0.specifiers = _0x2943df;
                _0xb158e0.source = this.parseExprAtom();
              } else {
                _0xb158e0.specifiers = this.parseImportSpecifiers();
                this.expectContextual("from");
                _0xb158e0.source = this.type === _0x47ea38.string ? this.parseExprAtom() : this.unexpected();
              }
              this.semicolon();
              return this.finishNode(_0xb158e0, "ImportDeclaration");
            };
            _0x231242.parseImportSpecifiers = function () {
              var _0x5eca88 = [];
              var _0x4363b7 = true;
              if (this.type === _0x47ea38.name) {
                var _0x29febe = this.startNode();
                _0x29febe.local = this.parseIdent();
                this.checkLValSimple(_0x29febe.local, 2);
                _0x5eca88.push(this.finishNode(_0x29febe, "ImportDefaultSpecifier"));
                if (!this.eat(_0x47ea38.comma)) {
                  return _0x5eca88;
                }
              }
              if (this.type === _0x47ea38.star) {
                var _0x2cd610 = this.startNode();
                this.next();
                this.expectContextual("as");
                _0x2cd610.local = this.parseIdent();
                this.checkLValSimple(_0x2cd610.local, 2);
                _0x5eca88.push(this.finishNode(_0x2cd610, "ImportNamespaceSpecifier"));
                return _0x5eca88;
              }
              for (this.expect(_0x47ea38.braceL); !this.eat(_0x47ea38.braceR);) {
                if (_0x4363b7) {
                  _0x4363b7 = false;
                } else {
                  this.expect(_0x47ea38.comma);
                  if (this.afterTrailingComma(_0x47ea38.braceR)) {
                    break;
                  }
                }
                var _0x42339b = this.startNode();
                _0x42339b.imported = this.parseModuleExportName();
                if (this.eatContextual("as")) {
                  _0x42339b.local = this.parseIdent();
                } else {
                  this.checkUnreserved(_0x42339b.imported);
                  _0x42339b.local = _0x42339b.imported;
                }
                this.checkLValSimple(_0x42339b.local, 2);
                _0x5eca88.push(this.finishNode(_0x42339b, "ImportSpecifier"));
              }
              return _0x5eca88;
            };
            _0x231242.parseModuleExportName = function () {
              if (this.options.ecmaVersion >= 13 && this.type === _0x47ea38.string) {
                var _0x486eb5 = this.parseLiteral(this.value);
                if (_0x560494.test(_0x486eb5.value)) {
                  this.raise(_0x486eb5.start, "An export name cannot include a lone surrogate.");
                }
                return _0x486eb5;
              }
              return this.parseIdent(true);
            };
            _0x231242.adaptDirectivePrologue = function (_0x587a88) {
              for (var _0x36e89e = 0; _0x36e89e < _0x587a88.length && this.isDirectiveCandidate(_0x587a88[_0x36e89e]); ++_0x36e89e) {
                _0x587a88[_0x36e89e].directive = _0x587a88[_0x36e89e].expression.raw.slice(1, -1);
              }
            };
            _0x231242.isDirectiveCandidate = function (_0x327f85) {
              return _0x327f85.type === "ExpressionStatement" && _0x327f85.expression.type === "Literal" && typeof _0x327f85.expression.value == "string" && (this.input[_0x327f85.start] === "\"" || this.input[_0x327f85.start] === "'");
            };
            var _0x43b3ea = _0x504270.prototype;
            _0x43b3ea.toAssignable = function (_0x263e84, _0x2d8b66, _0x254e4b) {
              if (this.options.ecmaVersion >= 6 && _0x263e84) {
                switch (_0x263e84.type) {
                  case "Identifier":
                    if (this.inAsync && _0x263e84.name === "await") {
                      this.raise(_0x263e84.start, "Cannot use 'await' as identifier inside an async function");
                    }
                    break;
                  case "ObjectPattern":
                  case "ArrayPattern":
                  case "AssignmentPattern":
                  case "RestElement":
                    break;
                  case "ObjectExpression":
                    _0x263e84.type = "ObjectPattern";
                    if (_0x254e4b) {
                      this.checkPatternErrors(_0x254e4b, true);
                    }
                    for (var _0xe3c470 = 0, _0x2371d0 = _0x263e84.properties; _0xe3c470 < _0x2371d0.length; _0xe3c470 += 1) {
                      var _0x3f24e7 = _0x2371d0[_0xe3c470];
                      this.toAssignable(_0x3f24e7, _0x2d8b66);
                      if (!(_0x3f24e7.type !== "RestElement" || _0x3f24e7.argument.type !== "ArrayPattern" && _0x3f24e7.argument.type !== "ObjectPattern")) {
                        this.raise(_0x3f24e7.argument.start, "Unexpected token");
                      }
                    }
                    break;
                  case "Property":
                    if (_0x263e84.kind !== "init") {
                      this.raise(_0x263e84.key.start, "Object pattern can't contain getter or setter");
                    }
                    this.toAssignable(_0x263e84.value, _0x2d8b66);
                    break;
                  case "ArrayExpression":
                    _0x263e84.type = "ArrayPattern";
                    if (_0x254e4b) {
                      this.checkPatternErrors(_0x254e4b, true);
                    }
                    this.toAssignableList(_0x263e84.elements, _0x2d8b66);
                    break;
                  case "SpreadElement":
                    _0x263e84.type = "RestElement";
                    this.toAssignable(_0x263e84.argument, _0x2d8b66);
                    if (_0x263e84.argument.type === "AssignmentPattern") {
                      this.raise(_0x263e84.argument.start, "Rest elements cannot have a default value");
                    }
                    break;
                  case "AssignmentExpression":
                    if (_0x263e84.operator !== "=") {
                      this.raise(_0x263e84.left.end, "Only '=' operator can be used for specifying default value.");
                    }
                    _0x263e84.type = "AssignmentPattern";
                    delete _0x263e84.operator;
                    this.toAssignable(_0x263e84.left, _0x2d8b66);
                    break;
                  case "ParenthesizedExpression":
                    this.toAssignable(_0x263e84.expression, _0x2d8b66, _0x254e4b);
                    break;
                  case "ChainExpression":
                    this.raiseRecoverable(_0x263e84.start, "Optional chaining cannot appear in left-hand side");
                    break;
                  case "MemberExpression":
                    if (!_0x2d8b66) {
                      break;
                    }
                  default:
                    this.raise(_0x263e84.start, "Assigning to rvalue");
                }
              } else if (_0x254e4b) {
                this.checkPatternErrors(_0x254e4b, true);
              }
              return _0x263e84;
            };
            _0x43b3ea.toAssignableList = function (_0x8c508a, _0x177a40) {
              for (var _0x11e427 = _0x8c508a.length, _0xaa657d = 0; _0xaa657d < _0x11e427; _0xaa657d++) {
                var _0x2a280f = _0x8c508a[_0xaa657d];
                if (_0x2a280f) {
                  this.toAssignable(_0x2a280f, _0x177a40);
                }
              }
              if (_0x11e427) {
                var _0x1dcf0e = _0x8c508a[_0x11e427 - 1];
                if (this.options.ecmaVersion === 6 && _0x177a40 && _0x1dcf0e && _0x1dcf0e.type === "RestElement" && _0x1dcf0e.argument.type !== "Identifier") {
                  this.unexpected(_0x1dcf0e.argument.start);
                }
              }
              return _0x8c508a;
            };
            _0x43b3ea.parseSpread = function (_0x1ff35c) {
              var _0x36ecc7 = this.startNode();
              this.next();
              _0x36ecc7.argument = this.parseMaybeAssign(false, _0x1ff35c);
              return this.finishNode(_0x36ecc7, "SpreadElement");
            };
            _0x43b3ea.parseRestBinding = function () {
              var _0x135418 = this.startNode();
              this.next();
              if (this.options.ecmaVersion === 6 && this.type !== _0x47ea38.name) {
                this.unexpected();
              }
              _0x135418.argument = this.parseBindingAtom();
              return this.finishNode(_0x135418, "RestElement");
            };
            _0x43b3ea.parseBindingAtom = function () {
              if (this.options.ecmaVersion >= 6) {
                switch (this.type) {
                  case _0x47ea38.bracketL:
                    var _0x3096d7 = this.startNode();
                    this.next();
                    _0x3096d7.elements = this.parseBindingList(_0x47ea38.bracketR, true, true);
                    return this.finishNode(_0x3096d7, "ArrayPattern");
                  case _0x47ea38.braceL:
                    return this.parseObj(true);
                }
              }
              return this.parseIdent();
            };
            _0x43b3ea.parseBindingList = function (_0x3ca5a4, _0x5ee7b9, _0x3dfca7) {
              for (var _0x3d43e9 = [], _0x52987f = true; !this.eat(_0x3ca5a4);) {
                if (_0x52987f) {
                  _0x52987f = false;
                } else {
                  this.expect(_0x47ea38.comma);
                }
                if (_0x5ee7b9 && this.type === _0x47ea38.comma) {
                  _0x3d43e9.push(null);
                } else {
                  if (_0x3dfca7 && this.afterTrailingComma(_0x3ca5a4)) {
                    break;
                  }
                  if (this.type === _0x47ea38.ellipsis) {
                    var _0x49d4ab = this.parseRestBinding();
                    this.parseBindingListItem(_0x49d4ab);
                    _0x3d43e9.push(_0x49d4ab);
                    if (this.type === _0x47ea38.comma) {
                      this.raise(this.start, "Comma is not permitted after the rest element");
                    }
                    this.expect(_0x3ca5a4);
                    break;
                  }
                  var _0x2aa269 = this.parseMaybeDefault(this.start, this.startLoc);
                  this.parseBindingListItem(_0x2aa269);
                  _0x3d43e9.push(_0x2aa269);
                }
              }
              return _0x3d43e9;
            };
            _0x43b3ea.parseBindingListItem = function (_0x237d56) {
              return _0x237d56;
            };
            _0x43b3ea.parseMaybeDefault = function (_0x10edab, _0x24f873, _0x4b52ab) {
              _0x4b52ab = _0x4b52ab || this.parseBindingAtom();
              if (this.options.ecmaVersion < 6 || !this.eat(_0x47ea38.eq)) {
                return _0x4b52ab;
              }
              var _0x9b939 = this.startNodeAt(_0x10edab, _0x24f873);
              _0x9b939.left = _0x4b52ab;
              _0x9b939.right = this.parseMaybeAssign();
              return this.finishNode(_0x9b939, "AssignmentPattern");
            };
            _0x43b3ea.checkLValSimple = function (_0x44db8d, _0x4df472, _0x2da4a9) {
              if (_0x4df472 === undefined) {
                _0x4df472 = 0;
              }
              var _0x1589d2 = _0x4df472 !== 0;
              switch (_0x44db8d.type) {
                case "Identifier":
                  if (this.strict && this.reservedWordsStrictBind.test(_0x44db8d.name)) {
                    this.raiseRecoverable(_0x44db8d.start, (_0x1589d2 ? "Binding " : "Assigning to ") + _0x44db8d.name + " in strict mode");
                  }
                  if (_0x1589d2) {
                    if (_0x4df472 === 2 && _0x44db8d.name === "let") {
                      this.raiseRecoverable(_0x44db8d.start, "let is disallowed as a lexically bound name");
                    }
                    if (_0x2da4a9) {
                      if (_0x25ab37(_0x2da4a9, _0x44db8d.name)) {
                        this.raiseRecoverable(_0x44db8d.start, "Argument name clash");
                      }
                      _0x2da4a9[_0x44db8d.name] = true;
                    }
                    if (_0x4df472 !== 5) {
                      this.declareName(_0x44db8d.name, _0x4df472, _0x44db8d.start);
                    }
                  }
                  break;
                case "ChainExpression":
                  this.raiseRecoverable(_0x44db8d.start, "Optional chaining cannot appear in left-hand side");
                  break;
                case "MemberExpression":
                  if (_0x1589d2) {
                    this.raiseRecoverable(_0x44db8d.start, "Binding member expression");
                  }
                  break;
                case "ParenthesizedExpression":
                  if (_0x1589d2) {
                    this.raiseRecoverable(_0x44db8d.start, "Binding parenthesized expression");
                  }
                  return this.checkLValSimple(_0x44db8d.expression, _0x4df472, _0x2da4a9);
                default:
                  this.raise(_0x44db8d.start, (_0x1589d2 ? "Binding" : "Assigning to") + " rvalue");
              }
            };
            _0x43b3ea.checkLValPattern = function (_0x37f7b1, _0x5532a8, _0xbc2f51) {
              if (_0x5532a8 === undefined) {
                _0x5532a8 = 0;
              }
              switch (_0x37f7b1.type) {
                case "ObjectPattern":
                  for (var _0x15cd28 = 0, _0x21c763 = _0x37f7b1.properties; _0x15cd28 < _0x21c763.length; _0x15cd28 += 1) {
                    var _0x33003a = _0x21c763[_0x15cd28];
                    this.checkLValInnerPattern(_0x33003a, _0x5532a8, _0xbc2f51);
                  }
                  break;
                case "ArrayPattern":
                  for (var _0x4e7b08 = 0, _0x3acab7 = _0x37f7b1.elements; _0x4e7b08 < _0x3acab7.length; _0x4e7b08 += 1) {
                    var _0x299b6b = _0x3acab7[_0x4e7b08];
                    if (_0x299b6b) {
                      this.checkLValInnerPattern(_0x299b6b, _0x5532a8, _0xbc2f51);
                    }
                  }
                  break;
                default:
                  this.checkLValSimple(_0x37f7b1, _0x5532a8, _0xbc2f51);
              }
            };
            _0x43b3ea.checkLValInnerPattern = function (_0x475385, _0x2bc37a, _0x584a38) {
              if (_0x2bc37a === undefined) {
                _0x2bc37a = 0;
              }
              switch (_0x475385.type) {
                case "Property":
                  this.checkLValInnerPattern(_0x475385.value, _0x2bc37a, _0x584a38);
                  break;
                case "AssignmentPattern":
                  this.checkLValPattern(_0x475385.left, _0x2bc37a, _0x584a38);
                  break;
                case "RestElement":
                  this.checkLValPattern(_0x475385.argument, _0x2bc37a, _0x584a38);
                  break;
                default:
                  this.checkLValPattern(_0x475385, _0x2bc37a, _0x584a38);
              }
            };
            function _0x4c9032(_0x4ba394, _0x1dd7e2, _0x5d4803, _0x153ce1, _0x2757ce) {
              this.token = _0x4ba394;
              this.isExpr = !!_0x1dd7e2;
              this.preserveSpace = !!_0x5d4803;
              this.override = _0x153ce1;
              this.generator = !!_0x2757ce;
            }
            var _0x292dad = {
              b_stat: new _0x4c9032("{", false),
              b_expr: new _0x4c9032("{", true),
              b_tmpl: new _0x4c9032("${", false),
              p_stat: new _0x4c9032("(", false),
              p_expr: new _0x4c9032("(", true),
              q_tmpl: new _0x4c9032("`", true, true, function (_0x529cde) {
                return _0x529cde.tryReadTemplateToken();
              }),
              f_stat: new _0x4c9032("function", false),
              f_expr: new _0x4c9032("function", true),
              f_expr_gen: new _0x4c9032("function", true, false, null, true),
              f_gen: new _0x4c9032("function", false, false, null, true)
            };
            var _0xaeeed4 = _0x504270.prototype;
            _0xaeeed4.initialContext = function () {
              return [_0x292dad.b_stat];
            };
            _0xaeeed4.curContext = function () {
              return this.context[this.context.length - 1];
            };
            _0xaeeed4.braceIsBlock = function (_0x457c6e) {
              var _0x12520a = this.curContext();
              return _0x12520a === _0x292dad.f_expr || _0x12520a === _0x292dad.f_stat || (_0x457c6e !== _0x47ea38.colon || _0x12520a !== _0x292dad.b_stat && _0x12520a !== _0x292dad.b_expr ? _0x457c6e === _0x47ea38._return || _0x457c6e === _0x47ea38.name && this.exprAllowed ? _0x1c21f2.test(this.input.slice(this.lastTokEnd, this.start)) : _0x457c6e === _0x47ea38._else || _0x457c6e === _0x47ea38.semi || _0x457c6e === _0x47ea38.eof || _0x457c6e === _0x47ea38.parenR || _0x457c6e === _0x47ea38.arrow || (_0x457c6e === _0x47ea38.braceL ? _0x12520a === _0x292dad.b_stat : _0x457c6e !== _0x47ea38._var && _0x457c6e !== _0x47ea38._const && _0x457c6e !== _0x47ea38.name && !this.exprAllowed) : !_0x12520a.isExpr);
            };
            _0xaeeed4.inGeneratorContext = function () {
              for (var _0x495076 = this.context.length - 1; _0x495076 >= 1; _0x495076--) {
                var _0x1b980e = this.context[_0x495076];
                if (_0x1b980e.token === "function") {
                  return _0x1b980e.generator;
                }
              }
              return false;
            };
            _0xaeeed4.updateContext = function (_0x777309) {
              var _0x4e813d;
              var _0x366b6c = this.type;
              if (_0x366b6c.keyword && _0x777309 === _0x47ea38.dot) {
                this.exprAllowed = false;
              } else if (_0x4e813d = _0x366b6c.updateContext) {
                _0x4e813d.call(this, _0x777309);
              } else {
                this.exprAllowed = _0x366b6c.beforeExpr;
              }
            };
            _0xaeeed4.overrideContext = function (_0x49df36) {
              if (this.curContext() !== _0x49df36) {
                this.context[this.context.length - 1] = _0x49df36;
              }
            };
            _0x47ea38.parenR.updateContext = _0x47ea38.braceR.updateContext = function () {
              if (this.context.length !== 1) {
                var _0x1b1523 = this.context.pop();
                if (_0x1b1523 === _0x292dad.b_stat && this.curContext().token === "function") {
                  _0x1b1523 = this.context.pop();
                }
                this.exprAllowed = !_0x1b1523.isExpr;
              } else {
                this.exprAllowed = true;
              }
            };
            _0x47ea38.braceL.updateContext = function (_0x39b1cf) {
              this.context.push(this.braceIsBlock(_0x39b1cf) ? _0x292dad.b_stat : _0x292dad.b_expr);
              this.exprAllowed = true;
            };
            _0x47ea38.dollarBraceL.updateContext = function () {
              this.context.push(_0x292dad.b_tmpl);
              this.exprAllowed = true;
            };
            _0x47ea38.parenL.updateContext = function (_0x5edda0) {
              var _0x5df20f = _0x5edda0 === _0x47ea38._if || _0x5edda0 === _0x47ea38._for || _0x5edda0 === _0x47ea38._with || _0x5edda0 === _0x47ea38._while;
              this.context.push(_0x5df20f ? _0x292dad.p_stat : _0x292dad.p_expr);
              this.exprAllowed = true;
            };
            _0x47ea38.incDec.updateContext = function () {};
            _0x47ea38._function.updateContext = _0x47ea38._class.updateContext = function (_0x53f325) {
              if (!_0x53f325.beforeExpr || _0x53f325 === _0x47ea38._else || _0x53f325 === _0x47ea38.semi && this.curContext() !== _0x292dad.p_stat || _0x53f325 === _0x47ea38._return && _0x1c21f2.test(this.input.slice(this.lastTokEnd, this.start)) || (_0x53f325 === _0x47ea38.colon || _0x53f325 === _0x47ea38.braceL) && this.curContext() === _0x292dad.b_stat) {
                this.context.push(_0x292dad.f_stat);
              } else {
                this.context.push(_0x292dad.f_expr);
              }
              this.exprAllowed = false;
            };
            _0x47ea38.backQuote.updateContext = function () {
              if (this.curContext() === _0x292dad.q_tmpl) {
                this.context.pop();
              } else {
                this.context.push(_0x292dad.q_tmpl);
              }
              this.exprAllowed = false;
            };
            _0x47ea38.star.updateContext = function (_0x2a3397) {
              if (_0x2a3397 === _0x47ea38._function) {
                var _0x423cf1 = this.context.length - 1;
                if (this.context[_0x423cf1] === _0x292dad.f_expr) {
                  this.context[_0x423cf1] = _0x292dad.f_expr_gen;
                } else {
                  this.context[_0x423cf1] = _0x292dad.f_gen;
                }
              }
              this.exprAllowed = true;
            };
            _0x47ea38.name.updateContext = function (_0x1e4213) {
              var _0x263fe9 = false;
              if (this.options.ecmaVersion >= 6 && _0x1e4213 !== _0x47ea38.dot && (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext())) {
                _0x263fe9 = true;
              }
              this.exprAllowed = _0x263fe9;
            };
            var _0x42d986 = _0x504270.prototype;
            function _0x428142(_0x3f3df1) {
              return _0x3f3df1.type === "MemberExpression" && _0x3f3df1.property.type === "PrivateIdentifier" || _0x3f3df1.type === "ChainExpression" && _0x428142(_0x3f3df1.expression);
            }
            _0x42d986.checkPropClash = function (_0x596bb8, _0x1f868c, _0x2937ca) {
              if (!(this.options.ecmaVersion >= 9 && _0x596bb8.type === "SpreadElement" || this.options.ecmaVersion >= 6 && (_0x596bb8.computed || _0x596bb8.method || _0x596bb8.shorthand))) {
                var _0x2c5011;
                var _0x1f67fc = _0x596bb8.key;
                switch (_0x1f67fc.type) {
                  case "Identifier":
                    _0x2c5011 = _0x1f67fc.name;
                    break;
                  case "Literal":
                    _0x2c5011 = String(_0x1f67fc.value);
                    break;
                  default:
                    return;
                }
                var _0x1471ab = _0x596bb8.kind;
                if (this.options.ecmaVersion >= 6) {
                  if (_0x2c5011 === "__proto__" && _0x1471ab === "init") {
                    if (_0x1f868c.proto) {
                      if (_0x2937ca) {
                        if (_0x2937ca.doubleProto < 0) {
                          _0x2937ca.doubleProto = _0x1f67fc.start;
                        }
                      } else {
                        this.raiseRecoverable(_0x1f67fc.start, "Redefinition of __proto__ property");
                      }
                    }
                    _0x1f868c.proto = true;
                  }
                } else {
                  var _0xe94bcf = _0x1f868c[_0x2c5011 = "$" + _0x2c5011];
                  if (_0xe94bcf) {
                    if (_0x1471ab === "init" ? this.strict && _0xe94bcf.init || _0xe94bcf.get || _0xe94bcf.set : _0xe94bcf.init || _0xe94bcf[_0x1471ab]) {
                      this.raiseRecoverable(_0x1f67fc.start, "Redefinition of property");
                    }
                  } else {
                    _0xe94bcf = _0x1f868c[_0x2c5011] = {
                      init: false,
                      get: false,
                      set: false
                    };
                  }
                  _0xe94bcf[_0x1471ab] = true;
                }
              }
            };
            _0x42d986.parseExpression = function (_0x20cbed, _0x33a3a6) {
              var _0x2e8cf6 = this.start;
              var _0x3726aa = this.startLoc;
              var _0x37f39c = this.parseMaybeAssign(_0x20cbed, _0x33a3a6);
              if (this.type === _0x47ea38.comma) {
                var _0x41c3ec = this.startNodeAt(_0x2e8cf6, _0x3726aa);
                for (_0x41c3ec.expressions = [_0x37f39c]; this.eat(_0x47ea38.comma);) {
                  _0x41c3ec.expressions.push(this.parseMaybeAssign(_0x20cbed, _0x33a3a6));
                }
                return this.finishNode(_0x41c3ec, "SequenceExpression");
              }
              return _0x37f39c;
            };
            _0x42d986.parseMaybeAssign = function (_0x471135, _0x39e0c2, _0x45b238) {
              if (this.isContextual("yield")) {
                if (this.inGenerator) {
                  return this.parseYield(_0x471135);
                }
                this.exprAllowed = false;
              }
              var _0x540582 = false;
              var _0x39fd7a = -1;
              var _0x2f16c7 = -1;
              var _0xfa868f = -1;
              if (_0x39e0c2) {
                _0x39fd7a = _0x39e0c2.parenthesizedAssign;
                _0x2f16c7 = _0x39e0c2.trailingComma;
                _0xfa868f = _0x39e0c2.doubleProto;
                _0x39e0c2.parenthesizedAssign = _0x39e0c2.trailingComma = -1;
              } else {
                _0x39e0c2 = new _0x24e5bd();
                _0x540582 = true;
              }
              var _0xdf1bea = this.start;
              var _0x507001 = this.startLoc;
              if (!(this.type !== _0x47ea38.parenL && this.type !== _0x47ea38.name)) {
                this.potentialArrowAt = this.start;
                this.potentialArrowInForAwait = _0x471135 === "await";
              }
              var _0x511336 = this.parseMaybeConditional(_0x471135, _0x39e0c2);
              if (_0x45b238) {
                _0x511336 = _0x45b238.call(this, _0x511336, _0xdf1bea, _0x507001);
              }
              if (this.type.isAssign) {
                var _0x163f4b = this.startNodeAt(_0xdf1bea, _0x507001);
                _0x163f4b.operator = this.value;
                if (this.type === _0x47ea38.eq) {
                  _0x511336 = this.toAssignable(_0x511336, false, _0x39e0c2);
                }
                if (!_0x540582) {
                  _0x39e0c2.parenthesizedAssign = _0x39e0c2.trailingComma = _0x39e0c2.doubleProto = -1;
                }
                if (_0x39e0c2.shorthandAssign >= _0x511336.start) {
                  _0x39e0c2.shorthandAssign = -1;
                }
                if (this.type === _0x47ea38.eq) {
                  this.checkLValPattern(_0x511336);
                } else {
                  this.checkLValSimple(_0x511336);
                }
                _0x163f4b.left = _0x511336;
                this.next();
                _0x163f4b.right = this.parseMaybeAssign(_0x471135);
                if (_0xfa868f > -1) {
                  _0x39e0c2.doubleProto = _0xfa868f;
                }
                return this.finishNode(_0x163f4b, "AssignmentExpression");
              }
              if (_0x540582) {
                this.checkExpressionErrors(_0x39e0c2, true);
              }
              if (_0x39fd7a > -1) {
                _0x39e0c2.parenthesizedAssign = _0x39fd7a;
              }
              if (_0x2f16c7 > -1) {
                _0x39e0c2.trailingComma = _0x2f16c7;
              }
              return _0x511336;
            };
            _0x42d986.parseMaybeConditional = function (_0x47da12, _0x3980b4) {
              var _0x3e19e2 = this.start;
              var _0x19fe0c = this.startLoc;
              var _0x3bb8c5 = this.parseExprOps(_0x47da12, _0x3980b4);
              if (this.checkExpressionErrors(_0x3980b4)) {
                return _0x3bb8c5;
              }
              if (this.eat(_0x47ea38.question)) {
                var _0x5564f0 = this.startNodeAt(_0x3e19e2, _0x19fe0c);
                _0x5564f0.test = _0x3bb8c5;
                _0x5564f0.consequent = this.parseMaybeAssign();
                this.expect(_0x47ea38.colon);
                _0x5564f0.alternate = this.parseMaybeAssign(_0x47da12);
                return this.finishNode(_0x5564f0, "ConditionalExpression");
              }
              return _0x3bb8c5;
            };
            _0x42d986.parseExprOps = function (_0x40f603, _0x5f280f) {
              var _0x11c22d = this.start;
              var _0x45dbe3 = this.startLoc;
              var _0x221982 = this.parseMaybeUnary(_0x5f280f, false, false, _0x40f603);
              if (this.checkExpressionErrors(_0x5f280f) || _0x221982.start === _0x11c22d && _0x221982.type === "ArrowFunctionExpression") {
                return _0x221982;
              } else {
                return this.parseExprOp(_0x221982, _0x11c22d, _0x45dbe3, -1, _0x40f603);
              }
            };
            _0x42d986.parseExprOp = function (_0x20a8fa, _0x23f33d, _0x4df32a, _0xbb3c9b, _0x1a7841) {
              var _0x55b4a6 = this.type.binop;
              if (_0x55b4a6 != null && (!_0x1a7841 || this.type !== _0x47ea38._in) && _0x55b4a6 > _0xbb3c9b) {
                var _0x12a291 = this.type === _0x47ea38.logicalOR || this.type === _0x47ea38.logicalAND;
                var _0x35092d = this.type === _0x47ea38.coalesce;
                if (_0x35092d) {
                  _0x55b4a6 = _0x47ea38.logicalAND.binop;
                }
                var _0x1ad6d8 = this.value;
                this.next();
                var _0x583ed8 = this.start;
                var _0x4122d5 = this.startLoc;
                var _0x5244ae = this.parseExprOp(this.parseMaybeUnary(null, false, false, _0x1a7841), _0x583ed8, _0x4122d5, _0x55b4a6, _0x1a7841);
                var _0x1a3723 = this.buildBinary(_0x23f33d, _0x4df32a, _0x20a8fa, _0x5244ae, _0x1ad6d8, _0x12a291 || _0x35092d);
                if (_0x12a291 && this.type === _0x47ea38.coalesce || _0x35092d && (this.type === _0x47ea38.logicalOR || this.type === _0x47ea38.logicalAND)) {
                  this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
                }
                return this.parseExprOp(_0x1a3723, _0x23f33d, _0x4df32a, _0xbb3c9b, _0x1a7841);
              }
              return _0x20a8fa;
            };
            _0x42d986.buildBinary = function (_0x2b9579, _0x3073f7, _0x44fd35, _0x3b5b6b, _0x360f0d, _0x5c49af) {
              if (_0x3b5b6b.type === "PrivateIdentifier") {
                this.raise(_0x3b5b6b.start, "Private identifier can only be left side of binary expression");
              }
              var _0x536550 = this.startNodeAt(_0x2b9579, _0x3073f7);
              _0x536550.left = _0x44fd35;
              _0x536550.operator = _0x360f0d;
              _0x536550.right = _0x3b5b6b;
              return this.finishNode(_0x536550, _0x5c49af ? "LogicalExpression" : "BinaryExpression");
            };
            _0x42d986.parseMaybeUnary = function (_0x4fa13b, _0x297e26, _0x44dd39, _0x1965cc) {
              var _0x4fb92a;
              var _0x82ad43 = this.start;
              var _0x1ef008 = this.startLoc;
              if (this.isContextual("await") && this.canAwait) {
                _0x4fb92a = this.parseAwait(_0x1965cc);
                _0x297e26 = true;
              } else if (this.type.prefix) {
                var _0x2de5cf = this.startNode();
                var _0x3873c0 = this.type === _0x47ea38.incDec;
                _0x2de5cf.operator = this.value;
                _0x2de5cf.prefix = true;
                this.next();
                _0x2de5cf.argument = this.parseMaybeUnary(null, true, _0x3873c0, _0x1965cc);
                this.checkExpressionErrors(_0x4fa13b, true);
                if (_0x3873c0) {
                  this.checkLValSimple(_0x2de5cf.argument);
                } else if (this.strict && _0x2de5cf.operator === "delete" && _0x2de5cf.argument.type === "Identifier") {
                  this.raiseRecoverable(_0x2de5cf.start, "Deleting local variable in strict mode");
                } else if (_0x2de5cf.operator === "delete" && _0x428142(_0x2de5cf.argument)) {
                  this.raiseRecoverable(_0x2de5cf.start, "Private fields can not be deleted");
                } else {
                  _0x297e26 = true;
                }
                _0x4fb92a = this.finishNode(_0x2de5cf, _0x3873c0 ? "UpdateExpression" : "UnaryExpression");
              } else if (_0x297e26 || this.type !== _0x47ea38.privateId) {
                _0x4fb92a = this.parseExprSubscripts(_0x4fa13b, _0x1965cc);
                if (this.checkExpressionErrors(_0x4fa13b)) {
                  return _0x4fb92a;
                }
                for (; this.type.postfix && !this.canInsertSemicolon();) {
                  var _0x3c9c20 = this.startNodeAt(_0x82ad43, _0x1ef008);
                  _0x3c9c20.operator = this.value;
                  _0x3c9c20.prefix = false;
                  _0x3c9c20.argument = _0x4fb92a;
                  this.checkLValSimple(_0x4fb92a);
                  this.next();
                  _0x4fb92a = this.finishNode(_0x3c9c20, "UpdateExpression");
                }
              } else {
                if (_0x1965cc || this.privateNameStack.length === 0) {
                  this.unexpected();
                }
                _0x4fb92a = this.parsePrivateIdent();
                if (this.type !== _0x47ea38._in) {
                  this.unexpected();
                }
              }
              if (_0x44dd39 || !this.eat(_0x47ea38.starstar)) {
                return _0x4fb92a;
              } else if (_0x297e26) {
                this.unexpected(this.lastTokStart);
                return;
              } else {
                return this.buildBinary(_0x82ad43, _0x1ef008, _0x4fb92a, this.parseMaybeUnary(null, false, false, _0x1965cc), "**", false);
              }
            };
            _0x42d986.parseExprSubscripts = function (_0x52414c, _0x4e8ec0) {
              var _0x7c8c51 = this.start;
              var _0x412efa = this.startLoc;
              var _0x40d9b1 = this.parseExprAtom(_0x52414c, _0x4e8ec0);
              if (_0x40d9b1.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
                return _0x40d9b1;
              }
              var _0x59b2b6 = this.parseSubscripts(_0x40d9b1, _0x7c8c51, _0x412efa, false, _0x4e8ec0);
              if (_0x52414c && _0x59b2b6.type === "MemberExpression") {
                if (_0x52414c.parenthesizedAssign >= _0x59b2b6.start) {
                  _0x52414c.parenthesizedAssign = -1;
                }
                if (_0x52414c.parenthesizedBind >= _0x59b2b6.start) {
                  _0x52414c.parenthesizedBind = -1;
                }
                if (_0x52414c.trailingComma >= _0x59b2b6.start) {
                  _0x52414c.trailingComma = -1;
                }
              }
              return _0x59b2b6;
            };
            _0x42d986.parseSubscripts = function (_0x2ef171, _0x16d8ea, _0x4c5f34, _0x123c71, _0x190510) {
              var _0x3fc170 = this.options.ecmaVersion >= 8 && _0x2ef171.type === "Identifier" && _0x2ef171.name === "async" && this.lastTokEnd === _0x2ef171.end && !this.canInsertSemicolon() && _0x2ef171.end - _0x2ef171.start == 5 && this.potentialArrowAt === _0x2ef171.start;
              var _0x2991eb = false;
              for (;;) {
                var _0x1a58d9 = this.parseSubscript(_0x2ef171, _0x16d8ea, _0x4c5f34, _0x123c71, _0x3fc170, _0x2991eb, _0x190510);
                if (_0x1a58d9.optional) {
                  _0x2991eb = true;
                }
                if (_0x1a58d9 === _0x2ef171 || _0x1a58d9.type === "ArrowFunctionExpression") {
                  if (_0x2991eb) {
                    var _0x2158de = this.startNodeAt(_0x16d8ea, _0x4c5f34);
                    _0x2158de.expression = _0x1a58d9;
                    _0x1a58d9 = this.finishNode(_0x2158de, "ChainExpression");
                  }
                  return _0x1a58d9;
                }
                _0x2ef171 = _0x1a58d9;
              }
            };
            _0x42d986.parseSubscript = function (_0x1bbc33, _0x4e79db, _0x4f3413, _0x1f407b, _0x21b863, _0x46f45a, _0x1c122d) {
              var _0xcc4618 = this.options.ecmaVersion >= 11;
              var _0x19da1c = _0xcc4618 && this.eat(_0x47ea38.questionDot);
              if (_0x1f407b && _0x19da1c) {
                this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
              }
              var _0x41f871 = this.eat(_0x47ea38.bracketL);
              if (_0x41f871 || _0x19da1c && this.type !== _0x47ea38.parenL && this.type !== _0x47ea38.backQuote || this.eat(_0x47ea38.dot)) {
                var _0x2efab8 = this.startNodeAt(_0x4e79db, _0x4f3413);
                _0x2efab8.object = _0x1bbc33;
                if (_0x41f871) {
                  _0x2efab8.property = this.parseExpression();
                  this.expect(_0x47ea38.bracketR);
                } else if (this.type === _0x47ea38.privateId && _0x1bbc33.type !== "Super") {
                  _0x2efab8.property = this.parsePrivateIdent();
                } else {
                  _0x2efab8.property = this.parseIdent(this.options.allowReserved !== "never");
                }
                _0x2efab8.computed = !!_0x41f871;
                if (_0xcc4618) {
                  _0x2efab8.optional = _0x19da1c;
                }
                _0x1bbc33 = this.finishNode(_0x2efab8, "MemberExpression");
              } else if (!_0x1f407b && this.eat(_0x47ea38.parenL)) {
                var _0x5869e5 = new _0x24e5bd();
                var _0x20987d = this.yieldPos;
                var _0x5149f0 = this.awaitPos;
                var _0x467fee = this.awaitIdentPos;
                this.yieldPos = 0;
                this.awaitPos = 0;
                this.awaitIdentPos = 0;
                var _0x2e34f1 = this.parseExprList(_0x47ea38.parenR, this.options.ecmaVersion >= 8, false, _0x5869e5);
                if (_0x21b863 && !_0x19da1c && !this.canInsertSemicolon() && this.eat(_0x47ea38.arrow)) {
                  this.checkPatternErrors(_0x5869e5, false);
                  this.checkYieldAwaitInDefaultParams();
                  if (this.awaitIdentPos > 0) {
                    this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
                  }
                  this.yieldPos = _0x20987d;
                  this.awaitPos = _0x5149f0;
                  this.awaitIdentPos = _0x467fee;
                  return this.parseArrowExpression(this.startNodeAt(_0x4e79db, _0x4f3413), _0x2e34f1, true, _0x1c122d);
                }
                this.checkExpressionErrors(_0x5869e5, true);
                this.yieldPos = _0x20987d || this.yieldPos;
                this.awaitPos = _0x5149f0 || this.awaitPos;
                this.awaitIdentPos = _0x467fee || this.awaitIdentPos;
                var _0x3a8e3d = this.startNodeAt(_0x4e79db, _0x4f3413);
                _0x3a8e3d.callee = _0x1bbc33;
                _0x3a8e3d.arguments = _0x2e34f1;
                if (_0xcc4618) {
                  _0x3a8e3d.optional = _0x19da1c;
                }
                _0x1bbc33 = this.finishNode(_0x3a8e3d, "CallExpression");
              } else if (this.type === _0x47ea38.backQuote) {
                if (_0x19da1c || _0x46f45a) {
                  this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
                }
                var _0x4ce851 = this.startNodeAt(_0x4e79db, _0x4f3413);
                _0x4ce851.tag = _0x1bbc33;
                _0x4ce851.quasi = this.parseTemplate({
                  isTagged: true
                });
                _0x1bbc33 = this.finishNode(_0x4ce851, "TaggedTemplateExpression");
              }
              return _0x1bbc33;
            };
            _0x42d986.parseExprAtom = function (_0x2b844a, _0x29c15e) {
              if (this.type === _0x47ea38.slash) {
                this.readRegexp();
              }
              var _0x11ee29;
              var _0x3365e0 = this.potentialArrowAt === this.start;
              switch (this.type) {
                case _0x47ea38._super:
                  if (!this.allowSuper) {
                    this.raise(this.start, "'super' keyword outside a method");
                  }
                  _0x11ee29 = this.startNode();
                  this.next();
                  if (!(this.type !== _0x47ea38.parenL || this.allowDirectSuper)) {
                    this.raise(_0x11ee29.start, "super() call outside constructor of a subclass");
                  }
                  if (this.type !== _0x47ea38.dot && this.type !== _0x47ea38.bracketL && this.type !== _0x47ea38.parenL) {
                    this.unexpected();
                  }
                  return this.finishNode(_0x11ee29, "Super");
                case _0x47ea38._this:
                  _0x11ee29 = this.startNode();
                  this.next();
                  return this.finishNode(_0x11ee29, "ThisExpression");
                case _0x47ea38.name:
                  var _0xcb9bb7 = this.start;
                  var _0x7e5046 = this.startLoc;
                  var _0xf78eca = this.containsEsc;
                  var _0x3fd6bc = this.parseIdent(false);
                  if (this.options.ecmaVersion >= 8 && !_0xf78eca && _0x3fd6bc.name === "async" && !this.canInsertSemicolon() && this.eat(_0x47ea38._function)) {
                    this.overrideContext(_0x292dad.f_expr);
                    return this.parseFunction(this.startNodeAt(_0xcb9bb7, _0x7e5046), 0, false, true, _0x29c15e);
                  }
                  if (_0x3365e0 && !this.canInsertSemicolon()) {
                    if (this.eat(_0x47ea38.arrow)) {
                      return this.parseArrowExpression(this.startNodeAt(_0xcb9bb7, _0x7e5046), [_0x3fd6bc], false, _0x29c15e);
                    }
                    if (this.options.ecmaVersion >= 8 && _0x3fd6bc.name === "async" && this.type === _0x47ea38.name && !_0xf78eca && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
                      _0x3fd6bc = this.parseIdent(false);
                      if (!(!this.canInsertSemicolon() && this.eat(_0x47ea38.arrow))) {
                        this.unexpected();
                      }
                      return this.parseArrowExpression(this.startNodeAt(_0xcb9bb7, _0x7e5046), [_0x3fd6bc], true, _0x29c15e);
                    }
                  }
                  return _0x3fd6bc;
                case _0x47ea38.regexp:
                  var _0x4edd66 = this.value;
                  (_0x11ee29 = this.parseLiteral(_0x4edd66.value)).regex = {
                    pattern: _0x4edd66.pattern,
                    flags: _0x4edd66.flags
                  };
                  return _0x11ee29;
                case _0x47ea38.num:
                case _0x47ea38.string:
                  return this.parseLiteral(this.value);
                case _0x47ea38._null:
                case _0x47ea38._true:
                case _0x47ea38._false:
                  (_0x11ee29 = this.startNode()).value = this.type === _0x47ea38._null ? null : this.type === _0x47ea38._true;
                  _0x11ee29.raw = this.type.keyword;
                  this.next();
                  return this.finishNode(_0x11ee29, "Literal");
                case _0x47ea38.parenL:
                  var _0xf3565d = this.start;
                  var _0x1ff9cd = this.parseParenAndDistinguishExpression(_0x3365e0, _0x29c15e);
                  if (_0x2b844a) {
                    if (_0x2b844a.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(_0x1ff9cd)) {
                      _0x2b844a.parenthesizedAssign = _0xf3565d;
                    }
                    if (_0x2b844a.parenthesizedBind < 0) {
                      _0x2b844a.parenthesizedBind = _0xf3565d;
                    }
                  }
                  return _0x1ff9cd;
                case _0x47ea38.bracketL:
                  _0x11ee29 = this.startNode();
                  this.next();
                  _0x11ee29.elements = this.parseExprList(_0x47ea38.bracketR, true, true, _0x2b844a);
                  return this.finishNode(_0x11ee29, "ArrayExpression");
                case _0x47ea38.braceL:
                  this.overrideContext(_0x292dad.b_expr);
                  return this.parseObj(false, _0x2b844a);
                case _0x47ea38._function:
                  _0x11ee29 = this.startNode();
                  this.next();
                  return this.parseFunction(_0x11ee29, 0);
                case _0x47ea38._class:
                  return this.parseClass(this.startNode(), false);
                case _0x47ea38._new:
                  return this.parseNew();
                case _0x47ea38.backQuote:
                  return this.parseTemplate();
                case _0x47ea38._import:
                  if (this.options.ecmaVersion >= 11) {
                    return this.parseExprImport();
                  } else {
                    return this.unexpected();
                  }
                default:
                  this.unexpected();
              }
            };
            _0x42d986.parseExprImport = function () {
              var _0x12a793 = this.startNode();
              if (this.containsEsc) {
                this.raiseRecoverable(this.start, "Escape sequence in keyword import");
              }
              var _0x7fcfce = this.parseIdent(true);
              switch (this.type) {
                case _0x47ea38.parenL:
                  return this.parseDynamicImport(_0x12a793);
                case _0x47ea38.dot:
                  _0x12a793.meta = _0x7fcfce;
                  return this.parseImportMeta(_0x12a793);
                default:
                  this.unexpected();
              }
            };
            _0x42d986.parseDynamicImport = function (_0x2c08dd) {
              this.next();
              _0x2c08dd.source = this.parseMaybeAssign();
              if (!this.eat(_0x47ea38.parenR)) {
                var _0xcadc4a = this.start;
                if (this.eat(_0x47ea38.comma) && this.eat(_0x47ea38.parenR)) {
                  this.raiseRecoverable(_0xcadc4a, "Trailing comma is not allowed in import()");
                } else {
                  this.unexpected(_0xcadc4a);
                }
              }
              return this.finishNode(_0x2c08dd, "ImportExpression");
            };
            _0x42d986.parseImportMeta = function (_0x18c56e) {
              this.next();
              var _0x4ea9a1 = this.containsEsc;
              _0x18c56e.property = this.parseIdent(true);
              if (_0x18c56e.property.name !== "meta") {
                this.raiseRecoverable(_0x18c56e.property.start, "The only valid meta property for import is 'import.meta'");
              }
              if (_0x4ea9a1) {
                this.raiseRecoverable(_0x18c56e.start, "'import.meta' must not contain escaped characters");
              }
              if (!(this.options.sourceType === "module" || this.options.allowImportExportEverywhere)) {
                this.raiseRecoverable(_0x18c56e.start, "Cannot use 'import.meta' outside a module");
              }
              return this.finishNode(_0x18c56e, "MetaProperty");
            };
            _0x42d986.parseLiteral = function (_0x522ac2) {
              var _0x17244e = this.startNode();
              _0x17244e.value = _0x522ac2;
              _0x17244e.raw = this.input.slice(this.start, this.end);
              if (_0x17244e.raw.charCodeAt(_0x17244e.raw.length - 1) === 110) {
                _0x17244e.bigint = _0x17244e.raw.slice(0, -1).replace(/_/g, "");
              }
              this.next();
              return this.finishNode(_0x17244e, "Literal");
            };
            _0x42d986.parseParenExpression = function () {
              this.expect(_0x47ea38.parenL);
              var _0x43540d = this.parseExpression();
              this.expect(_0x47ea38.parenR);
              return _0x43540d;
            };
            _0x42d986.parseParenAndDistinguishExpression = function (_0x262274, _0x10c637) {
              var _0x1c504f;
              var _0x4160f3 = this.start;
              var _0x175efc = this.startLoc;
              var _0x33fe4a = this.options.ecmaVersion >= 8;
              if (this.options.ecmaVersion >= 6) {
                this.next();
                var _0x15f468;
                var _0x4220d4 = this.start;
                var _0x50a443 = this.startLoc;
                var _0x3fe2d1 = [];
                var _0x4affe5 = true;
                var _0x434206 = false;
                var _0x14b6a8 = new _0x24e5bd();
                var _0x22f4d0 = this.yieldPos;
                var _0x27c280 = this.awaitPos;
                this.yieldPos = 0;
                this.awaitPos = 0;
                for (; this.type !== _0x47ea38.parenR;) {
                  if (_0x4affe5) {
                    _0x4affe5 = false;
                  } else {
                    this.expect(_0x47ea38.comma);
                  }
                  if (_0x33fe4a && this.afterTrailingComma(_0x47ea38.parenR, true)) {
                    _0x434206 = true;
                    break;
                  }
                  if (this.type === _0x47ea38.ellipsis) {
                    _0x15f468 = this.start;
                    _0x3fe2d1.push(this.parseParenItem(this.parseRestBinding()));
                    if (this.type === _0x47ea38.comma) {
                      this.raise(this.start, "Comma is not permitted after the rest element");
                    }
                    break;
                  }
                  _0x3fe2d1.push(this.parseMaybeAssign(false, _0x14b6a8, this.parseParenItem));
                }
                var _0x3e2d2a = this.lastTokEnd;
                var _0x34a0a2 = this.lastTokEndLoc;
                this.expect(_0x47ea38.parenR);
                if (_0x262274 && !this.canInsertSemicolon() && this.eat(_0x47ea38.arrow)) {
                  this.checkPatternErrors(_0x14b6a8, false);
                  this.checkYieldAwaitInDefaultParams();
                  this.yieldPos = _0x22f4d0;
                  this.awaitPos = _0x27c280;
                  return this.parseParenArrowList(_0x4160f3, _0x175efc, _0x3fe2d1, _0x10c637);
                }
                if (!(_0x3fe2d1.length && !_0x434206)) {
                  this.unexpected(this.lastTokStart);
                }
                if (_0x15f468) {
                  this.unexpected(_0x15f468);
                }
                this.checkExpressionErrors(_0x14b6a8, true);
                this.yieldPos = _0x22f4d0 || this.yieldPos;
                this.awaitPos = _0x27c280 || this.awaitPos;
                if (_0x3fe2d1.length > 1) {
                  (_0x1c504f = this.startNodeAt(_0x4220d4, _0x50a443)).expressions = _0x3fe2d1;
                  this.finishNodeAt(_0x1c504f, "SequenceExpression", _0x3e2d2a, _0x34a0a2);
                } else {
                  _0x1c504f = _0x3fe2d1[0];
                }
              } else {
                _0x1c504f = this.parseParenExpression();
              }
              if (this.options.preserveParens) {
                var _0x4c8bfa = this.startNodeAt(_0x4160f3, _0x175efc);
                _0x4c8bfa.expression = _0x1c504f;
                return this.finishNode(_0x4c8bfa, "ParenthesizedExpression");
              }
              return _0x1c504f;
            };
            _0x42d986.parseParenItem = function (_0x32f10e) {
              return _0x32f10e;
            };
            _0x42d986.parseParenArrowList = function (_0x4e6325, _0x3fb269, _0xe37e2f, _0x527027) {
              return this.parseArrowExpression(this.startNodeAt(_0x4e6325, _0x3fb269), _0xe37e2f, false, _0x527027);
            };
            var _0x176032 = [];
            _0x42d986.parseNew = function () {
              if (this.containsEsc) {
                this.raiseRecoverable(this.start, "Escape sequence in keyword new");
              }
              var _0x26ad65 = this.startNode();
              var _0x21f5b9 = this.parseIdent(true);
              if (this.options.ecmaVersion >= 6 && this.eat(_0x47ea38.dot)) {
                _0x26ad65.meta = _0x21f5b9;
                var _0x33a7a0 = this.containsEsc;
                _0x26ad65.property = this.parseIdent(true);
                if (_0x26ad65.property.name !== "target") {
                  this.raiseRecoverable(_0x26ad65.property.start, "The only valid meta property for new is 'new.target'");
                }
                if (_0x33a7a0) {
                  this.raiseRecoverable(_0x26ad65.start, "'new.target' must not contain escaped characters");
                }
                if (!this.allowNewDotTarget) {
                  this.raiseRecoverable(_0x26ad65.start, "'new.target' can only be used in functions and class static block");
                }
                return this.finishNode(_0x26ad65, "MetaProperty");
              }
              var _0x106536 = this.start;
              var _0x52bbd7 = this.startLoc;
              var _0x8a4ee5 = this.type === _0x47ea38._import;
              _0x26ad65.callee = this.parseSubscripts(this.parseExprAtom(), _0x106536, _0x52bbd7, true, false);
              if (_0x8a4ee5 && _0x26ad65.callee.type === "ImportExpression") {
                this.raise(_0x106536, "Cannot use new with import()");
              }
              if (this.eat(_0x47ea38.parenL)) {
                _0x26ad65.arguments = this.parseExprList(_0x47ea38.parenR, this.options.ecmaVersion >= 8, false);
              } else {
                _0x26ad65.arguments = _0x176032;
              }
              return this.finishNode(_0x26ad65, "NewExpression");
            };
            _0x42d986.parseTemplateElement = function (_0x90dad8) {
              var _0x3afd1a = _0x90dad8.isTagged;
              var _0x4886b5 = this.startNode();
              if (this.type === _0x47ea38.invalidTemplate) {
                if (!_0x3afd1a) {
                  this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
                }
                _0x4886b5.value = {
                  raw: this.value,
                  cooked: null
                };
              } else {
                _0x4886b5.value = {
                  raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
                  cooked: this.value
                };
              }
              this.next();
              _0x4886b5.tail = this.type === _0x47ea38.backQuote;
              return this.finishNode(_0x4886b5, "TemplateElement");
            };
            _0x42d986.parseTemplate = function (_0x5dbb52) {
              if (_0x5dbb52 === undefined) {
                _0x5dbb52 = {};
              }
              var _0x559ed4 = _0x5dbb52.isTagged;
              if (_0x559ed4 === undefined) {
                _0x559ed4 = false;
              }
              var _0x3778bb = this.startNode();
              this.next();
              _0x3778bb.expressions = [];
              var _0x47c318 = this.parseTemplateElement({
                isTagged: _0x559ed4
              });
              for (_0x3778bb.quasis = [_0x47c318]; !_0x47c318.tail;) {
                if (this.type === _0x47ea38.eof) {
                  this.raise(this.pos, "Unterminated template literal");
                }
                this.expect(_0x47ea38.dollarBraceL);
                _0x3778bb.expressions.push(this.parseExpression());
                this.expect(_0x47ea38.braceR);
                _0x3778bb.quasis.push(_0x47c318 = this.parseTemplateElement({
                  isTagged: _0x559ed4
                }));
              }
              this.next();
              return this.finishNode(_0x3778bb, "TemplateLiteral");
            };
            _0x42d986.isAsyncProp = function (_0xb9b3f1) {
              return !_0xb9b3f1.computed && _0xb9b3f1.key.type === "Identifier" && _0xb9b3f1.key.name === "async" && (this.type === _0x47ea38.name || this.type === _0x47ea38.num || this.type === _0x47ea38.string || this.type === _0x47ea38.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === _0x47ea38.star) && !_0x1c21f2.test(this.input.slice(this.lastTokEnd, this.start));
            };
            _0x42d986.parseObj = function (_0x2bc0fc, _0x2e8635) {
              var _0xfcc493 = this.startNode();
              var _0x4d2479 = true;
              var _0xd69f86 = {};
              _0xfcc493.properties = [];
              this.next();
              for (; !this.eat(_0x47ea38.braceR);) {
                if (_0x4d2479) {
                  _0x4d2479 = false;
                } else {
                  this.expect(_0x47ea38.comma);
                  if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(_0x47ea38.braceR)) {
                    break;
                  }
                }
                var _0x49d77a = this.parseProperty(_0x2bc0fc, _0x2e8635);
                if (!_0x2bc0fc) {
                  this.checkPropClash(_0x49d77a, _0xd69f86, _0x2e8635);
                }
                _0xfcc493.properties.push(_0x49d77a);
              }
              return this.finishNode(_0xfcc493, _0x2bc0fc ? "ObjectPattern" : "ObjectExpression");
            };
            _0x42d986.parseProperty = function (_0x5b2b34, _0x249b9b) {
              var _0x8f5010;
              var _0x4f0aaa;
              var _0x42f011;
              var _0x5325c5;
              var _0x58da29 = this.startNode();
              if (this.options.ecmaVersion >= 9 && this.eat(_0x47ea38.ellipsis)) {
                if (_0x5b2b34) {
                  _0x58da29.argument = this.parseIdent(false);
                  if (this.type === _0x47ea38.comma) {
                    this.raise(this.start, "Comma is not permitted after the rest element");
                  }
                  return this.finishNode(_0x58da29, "RestElement");
                } else {
                  if (this.type === _0x47ea38.parenL && _0x249b9b) {
                    if (_0x249b9b.parenthesizedAssign < 0) {
                      _0x249b9b.parenthesizedAssign = this.start;
                    }
                    if (_0x249b9b.parenthesizedBind < 0) {
                      _0x249b9b.parenthesizedBind = this.start;
                    }
                  }
                  _0x58da29.argument = this.parseMaybeAssign(false, _0x249b9b);
                  if (this.type === _0x47ea38.comma && _0x249b9b && _0x249b9b.trailingComma < 0) {
                    _0x249b9b.trailingComma = this.start;
                  }
                  return this.finishNode(_0x58da29, "SpreadElement");
                }
              }
              if (this.options.ecmaVersion >= 6) {
                _0x58da29.method = false;
                _0x58da29.shorthand = false;
                if (_0x5b2b34 || _0x249b9b) {
                  _0x42f011 = this.start;
                  _0x5325c5 = this.startLoc;
                }
                if (!_0x5b2b34) {
                  _0x8f5010 = this.eat(_0x47ea38.star);
                }
              }
              var _0x540fb3 = this.containsEsc;
              this.parsePropertyName(_0x58da29);
              if (!_0x5b2b34 && !_0x540fb3 && this.options.ecmaVersion >= 8 && !_0x8f5010 && this.isAsyncProp(_0x58da29)) {
                _0x4f0aaa = true;
                _0x8f5010 = this.options.ecmaVersion >= 9 && this.eat(_0x47ea38.star);
                this.parsePropertyName(_0x58da29, _0x249b9b);
              } else {
                _0x4f0aaa = false;
              }
              this.parsePropertyValue(_0x58da29, _0x5b2b34, _0x8f5010, _0x4f0aaa, _0x42f011, _0x5325c5, _0x249b9b, _0x540fb3);
              return this.finishNode(_0x58da29, "Property");
            };
            _0x42d986.parsePropertyValue = function (_0x3154eb, _0x3e47a0, _0x3d8857, _0x1d9101, _0x41ce94, _0x35d97c, _0x405538, _0x34b283) {
              if ((_0x3d8857 || _0x1d9101) && this.type === _0x47ea38.colon) {
                this.unexpected();
              }
              if (this.eat(_0x47ea38.colon)) {
                _0x3154eb.value = _0x3e47a0 ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, _0x405538);
                _0x3154eb.kind = "init";
              } else if (this.options.ecmaVersion >= 6 && this.type === _0x47ea38.parenL) {
                if (_0x3e47a0) {
                  this.unexpected();
                }
                _0x3154eb.kind = "init";
                _0x3154eb.method = true;
                _0x3154eb.value = this.parseMethod(_0x3d8857, _0x1d9101);
              } else if (_0x3e47a0 || _0x34b283 || !(this.options.ecmaVersion >= 5) || _0x3154eb.computed || _0x3154eb.key.type !== "Identifier" || _0x3154eb.key.name !== "get" && _0x3154eb.key.name !== "set" || this.type === _0x47ea38.comma || this.type === _0x47ea38.braceR || this.type === _0x47ea38.eq) {
                if (this.options.ecmaVersion >= 6 && !_0x3154eb.computed && _0x3154eb.key.type === "Identifier") {
                  if (_0x3d8857 || _0x1d9101) {
                    this.unexpected();
                  }
                  this.checkUnreserved(_0x3154eb.key);
                  if (!(_0x3154eb.key.name !== "await" || this.awaitIdentPos)) {
                    this.awaitIdentPos = _0x41ce94;
                  }
                  _0x3154eb.kind = "init";
                  if (_0x3e47a0) {
                    _0x3154eb.value = this.parseMaybeDefault(_0x41ce94, _0x35d97c, this.copyNode(_0x3154eb.key));
                  } else if (this.type === _0x47ea38.eq && _0x405538) {
                    if (_0x405538.shorthandAssign < 0) {
                      _0x405538.shorthandAssign = this.start;
                    }
                    _0x3154eb.value = this.parseMaybeDefault(_0x41ce94, _0x35d97c, this.copyNode(_0x3154eb.key));
                  } else {
                    _0x3154eb.value = this.copyNode(_0x3154eb.key);
                  }
                  _0x3154eb.shorthand = true;
                } else {
                  this.unexpected();
                }
              } else {
                if (_0x3d8857 || _0x1d9101) {
                  this.unexpected();
                }
                _0x3154eb.kind = _0x3154eb.key.name;
                this.parsePropertyName(_0x3154eb);
                _0x3154eb.value = this.parseMethod(false);
                var _0x6759fc = _0x3154eb.kind === "get" ? 0 : 1;
                if (_0x3154eb.value.params.length !== _0x6759fc) {
                  var _0xcfcaf8 = _0x3154eb.value.start;
                  if (_0x3154eb.kind === "get") {
                    this.raiseRecoverable(_0xcfcaf8, "getter should have no params");
                  } else {
                    this.raiseRecoverable(_0xcfcaf8, "setter should have exactly one param");
                  }
                } else if (_0x3154eb.kind === "set" && _0x3154eb.value.params[0].type === "RestElement") {
                  this.raiseRecoverable(_0x3154eb.value.params[0].start, "Setter cannot use rest params");
                }
              }
            };
            _0x42d986.parsePropertyName = function (_0x4a33be) {
              if (this.options.ecmaVersion >= 6) {
                if (this.eat(_0x47ea38.bracketL)) {
                  _0x4a33be.computed = true;
                  _0x4a33be.key = this.parseMaybeAssign();
                  this.expect(_0x47ea38.bracketR);
                  return _0x4a33be.key;
                }
                _0x4a33be.computed = false;
              }
              return _0x4a33be.key = this.type === _0x47ea38.num || this.type === _0x47ea38.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
            };
            _0x42d986.initFunction = function (_0x46c836) {
              _0x46c836.id = null;
              if (this.options.ecmaVersion >= 6) {
                _0x46c836.generator = _0x46c836.expression = false;
              }
              if (this.options.ecmaVersion >= 8) {
                _0x46c836.async = false;
              }
            };
            _0x42d986.parseMethod = function (_0x48e738, _0xb103a1, _0x1cfc00) {
              var _0x848a5b = this.startNode();
              var _0x3e3349 = this.yieldPos;
              var _0x4b8ba1 = this.awaitPos;
              var _0x5e164a = this.awaitIdentPos;
              this.initFunction(_0x848a5b);
              if (this.options.ecmaVersion >= 6) {
                _0x848a5b.generator = _0x48e738;
              }
              if (this.options.ecmaVersion >= 8) {
                _0x848a5b.async = !!_0xb103a1;
              }
              this.yieldPos = 0;
              this.awaitPos = 0;
              this.awaitIdentPos = 0;
              this.enterScope(_0x4a114f(_0xb103a1, _0x848a5b.generator) | 64 | (_0x1cfc00 ? 128 : 0));
              this.expect(_0x47ea38.parenL);
              _0x848a5b.params = this.parseBindingList(_0x47ea38.parenR, false, this.options.ecmaVersion >= 8);
              this.checkYieldAwaitInDefaultParams();
              this.parseFunctionBody(_0x848a5b, false, true, false);
              this.yieldPos = _0x3e3349;
              this.awaitPos = _0x4b8ba1;
              this.awaitIdentPos = _0x5e164a;
              return this.finishNode(_0x848a5b, "FunctionExpression");
            };
            _0x42d986.parseArrowExpression = function (_0x4640ed, _0x3d74c6, _0x48d669, _0xe83755) {
              var _0x191957 = this.yieldPos;
              var _0x5822b4 = this.awaitPos;
              var _0x325e9a = this.awaitIdentPos;
              this.enterScope(_0x4a114f(_0x48d669, false) | 16);
              this.initFunction(_0x4640ed);
              if (this.options.ecmaVersion >= 8) {
                _0x4640ed.async = !!_0x48d669;
              }
              this.yieldPos = 0;
              this.awaitPos = 0;
              this.awaitIdentPos = 0;
              _0x4640ed.params = this.toAssignableList(_0x3d74c6, true);
              this.parseFunctionBody(_0x4640ed, true, false, _0xe83755);
              this.yieldPos = _0x191957;
              this.awaitPos = _0x5822b4;
              this.awaitIdentPos = _0x325e9a;
              return this.finishNode(_0x4640ed, "ArrowFunctionExpression");
            };
            _0x42d986.parseFunctionBody = function (_0x5029e4, _0x11ac61, _0x4f9da4, _0x488f7f) {
              var _0x6582c9 = _0x11ac61 && this.type !== _0x47ea38.braceL;
              var _0x43f391 = this.strict;
              var _0x25862a = false;
              if (_0x6582c9) {
                _0x5029e4.body = this.parseMaybeAssign(_0x488f7f);
                _0x5029e4.expression = true;
                this.checkParams(_0x5029e4, false);
              } else {
                var _0x460a00 = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(_0x5029e4.params);
                if (!(_0x43f391 && !_0x460a00)) {
                  if ((_0x25862a = this.strictDirective(this.end)) && _0x460a00) {
                    this.raiseRecoverable(_0x5029e4.start, "Illegal 'got it' directive in function with non-simple parameter list");
                  }
                }
                var _0x18e683 = this.labels;
                this.labels = [];
                if (_0x25862a) {
                  this.strict = true;
                }
                this.checkParams(_0x5029e4, !_0x43f391 && !_0x25862a && !_0x11ac61 && !_0x4f9da4 && this.isSimpleParamList(_0x5029e4.params));
                if (this.strict && _0x5029e4.id) {
                  this.checkLValSimple(_0x5029e4.id, 5);
                }
                _0x5029e4.body = this.parseBlock(false, undefined, _0x25862a && !_0x43f391);
                _0x5029e4.expression = false;
                this.adaptDirectivePrologue(_0x5029e4.body.body);
                this.labels = _0x18e683;
              }
              this.exitScope();
            };
            _0x42d986.isSimpleParamList = function (_0x530226) {
              for (var _0x39446c = 0, _0x1330a3 = _0x530226; _0x39446c < _0x1330a3.length; _0x39446c += 1) {
                if (_0x1330a3[_0x39446c].type !== "Identifier") {
                  return false;
                }
              }
              return true;
            };
            _0x42d986.checkParams = function (_0x277711, _0x100f14) {
              for (var _0x2ee2e3 = Object.create(null), _0x1c113e = 0, _0x25c450 = _0x277711.params; _0x1c113e < _0x25c450.length; _0x1c113e += 1) {
                var _0x1bc6e3 = _0x25c450[_0x1c113e];
                this.checkLValInnerPattern(_0x1bc6e3, 1, _0x100f14 ? null : _0x2ee2e3);
              }
            };
            _0x42d986.parseExprList = function (_0x9ed489, _0x5bde16, _0x208c76, _0xf51364) {
              for (var _0xfca00c = [], _0x589726 = true; !this.eat(_0x9ed489);) {
                if (_0x589726) {
                  _0x589726 = false;
                } else {
                  this.expect(_0x47ea38.comma);
                  if (_0x5bde16 && this.afterTrailingComma(_0x9ed489)) {
                    break;
                  }
                }
                var _0x2754da = undefined;
                if (_0x208c76 && this.type === _0x47ea38.comma) {
                  _0x2754da = null;
                } else if (this.type === _0x47ea38.ellipsis) {
                  _0x2754da = this.parseSpread(_0xf51364);
                  if (_0xf51364 && this.type === _0x47ea38.comma && _0xf51364.trailingComma < 0) {
                    _0xf51364.trailingComma = this.start;
                  }
                } else {
                  _0x2754da = this.parseMaybeAssign(false, _0xf51364);
                }
                _0xfca00c.push(_0x2754da);
              }
              return _0xfca00c;
            };
            _0x42d986.checkUnreserved = function (_0x167927) {
              var _0x27856a = _0x167927.start;
              var _0x402cdf = _0x167927.end;
              var _0x13073e = _0x167927.name;
              if (!(this.inGenerator && _0x13073e === "yield" && this.raiseRecoverable(_0x27856a, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && _0x13073e === "await" && this.raiseRecoverable(_0x27856a, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && _0x13073e === "arguments" && this.raiseRecoverable(_0x27856a, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || _0x13073e !== "arguments" && _0x13073e !== "await" || this.raise(_0x27856a, "Cannot use " + _0x13073e + " in class static initialization block"), this.keywords.test(_0x13073e) && this.raise(_0x27856a, "Unexpected keyword '" + _0x13073e + "'"), this.options.ecmaVersion < 6 && this.input.slice(_0x27856a, _0x402cdf).indexOf("\\") !== -1)) {
                if ((this.strict ? this.reservedWordsStrict : this.reservedWords).test(_0x13073e)) {
                  if (!(this.inAsync || _0x13073e !== "await")) {
                    this.raiseRecoverable(_0x27856a, "Cannot use keyword 'await' outside an async function");
                  }
                  this.raiseRecoverable(_0x27856a, "The keyword '" + _0x13073e + "' is reserved");
                }
              }
            };
            _0x42d986.parseIdent = function (_0x5de798, _0x515827) {
              var _0xcaa2d1 = this.startNode();
              if (this.type === _0x47ea38.name) {
                _0xcaa2d1.name = this.value;
              } else if (this.type.keyword) {
                _0xcaa2d1.name = this.type.keyword;
                if (!(_0xcaa2d1.name !== "class" && _0xcaa2d1.name !== "function" || this.lastTokEnd === this.lastTokStart + 1 && this.input.charCodeAt(this.lastTokStart) === 46)) {
                  this.context.pop();
                }
              } else {
                this.unexpected();
              }
              this.next(!!_0x5de798);
              this.finishNode(_0xcaa2d1, "Identifier");
              if (!_0x5de798) {
                this.checkUnreserved(_0xcaa2d1);
                if (!(_0xcaa2d1.name !== "await" || this.awaitIdentPos)) {
                  this.awaitIdentPos = _0xcaa2d1.start;
                }
              }
              return _0xcaa2d1;
            };
            _0x42d986.parsePrivateIdent = function () {
              var _0x377ae6 = this.startNode();
              if (this.type === _0x47ea38.privateId) {
                _0x377ae6.name = this.value;
              } else {
                this.unexpected();
              }
              this.next();
              this.finishNode(_0x377ae6, "PrivateIdentifier");
              if (this.privateNameStack.length === 0) {
                this.raise(_0x377ae6.start, "Private field '#" + _0x377ae6.name + "' must be declared in an enclosing class");
              } else {
                this.privateNameStack[this.privateNameStack.length - 1].used.push(_0x377ae6);
              }
              return _0x377ae6;
            };
            _0x42d986.parseYield = function (_0x120d25) {
              if (!this.yieldPos) {
                this.yieldPos = this.start;
              }
              var _0x57a88e = this.startNode();
              this.next();
              if (this.type === _0x47ea38.semi || this.canInsertSemicolon() || this.type !== _0x47ea38.star && !this.type.startsExpr) {
                _0x57a88e.delegate = false;
                _0x57a88e.argument = null;
              } else {
                _0x57a88e.delegate = this.eat(_0x47ea38.star);
                _0x57a88e.argument = this.parseMaybeAssign(_0x120d25);
              }
              return this.finishNode(_0x57a88e, "YieldExpression");
            };
            _0x42d986.parseAwait = function (_0x593a98) {
              if (!this.awaitPos) {
                this.awaitPos = this.start;
              }
              var _0x6ef67e = this.startNode();
              this.next();
              _0x6ef67e.argument = this.parseMaybeUnary(null, true, false, _0x593a98);
              return this.finishNode(_0x6ef67e, "AwaitExpression");
            };
            var _0x6567b8 = _0x504270.prototype;
            _0x6567b8.raise = function (_0x56a319, _0x3db9f5) {
              var _0x19ec5f = _0x35e77b(this.input, _0x56a319);
              _0x3db9f5 += " (" + _0x19ec5f.line + ":" + _0x19ec5f.column + ")";
              var _0x5623e6 = new SyntaxError(_0x3db9f5);
              _0x5623e6.pos = _0x56a319;
              _0x5623e6.loc = _0x19ec5f;
              _0x5623e6.raisedAt = this.pos;
              throw _0x5623e6;
            };
            _0x6567b8.raiseRecoverable = _0x6567b8.raise;
            _0x6567b8.curPosition = function () {
              if (this.options.locations) {
                return new _0x1d26ea(this.curLine, this.pos - this.lineStart);
              }
            };
            var _0x2d8c9c = _0x504270.prototype;
            function _0x35a43e(_0x4f7089) {
              this.flags = _0x4f7089;
              this.var = [];
              this.lexical = [];
              this.functions = [];
              this.inClassFieldInit = false;
            }
            _0x2d8c9c.enterScope = function (_0x120781) {
              this.scopeStack.push(new _0x35a43e(_0x120781));
            };
            _0x2d8c9c.exitScope = function () {
              this.scopeStack.pop();
            };
            _0x2d8c9c.treatFunctionsAsVarInScope = function (_0x56ee76) {
              return _0x56ee76.flags & 2 || !this.inModule && _0x56ee76.flags & 1;
            };
            _0x2d8c9c.declareName = function (_0x4ddeb5, _0x2bf69c, _0xdab5e5) {
              var _0x2a8d2f = false;
              if (_0x2bf69c === 2) {
                var _0x239a82 = this.currentScope();
                _0x2a8d2f = _0x239a82.lexical.indexOf(_0x4ddeb5) > -1 || _0x239a82.functions.indexOf(_0x4ddeb5) > -1 || _0x239a82.var.indexOf(_0x4ddeb5) > -1;
                _0x239a82.lexical.push(_0x4ddeb5);
                if (this.inModule && _0x239a82.flags & 1) {
                  delete this.undefinedExports[_0x4ddeb5];
                }
              } else if (_0x2bf69c === 4) {
                this.currentScope().lexical.push(_0x4ddeb5);
              } else if (_0x2bf69c === 3) {
                var _0x1ffb76 = this.currentScope();
                _0x2a8d2f = this.treatFunctionsAsVar ? _0x1ffb76.lexical.indexOf(_0x4ddeb5) > -1 : _0x1ffb76.lexical.indexOf(_0x4ddeb5) > -1 || _0x1ffb76.var.indexOf(_0x4ddeb5) > -1;
                _0x1ffb76.functions.push(_0x4ddeb5);
              } else {
                for (var _0x107ec2 = this.scopeStack.length - 1; _0x107ec2 >= 0; --_0x107ec2) {
                  var _0x3e1f3e = this.scopeStack[_0x107ec2];
                  if (_0x3e1f3e.lexical.indexOf(_0x4ddeb5) > -1 && !(_0x3e1f3e.flags & 32 && _0x3e1f3e.lexical[0] === _0x4ddeb5) || !this.treatFunctionsAsVarInScope(_0x3e1f3e) && _0x3e1f3e.functions.indexOf(_0x4ddeb5) > -1) {
                    _0x2a8d2f = true;
                    break;
                  }
                  _0x3e1f3e.var.push(_0x4ddeb5);
                  if (this.inModule && _0x3e1f3e.flags & 1) {
                    delete this.undefinedExports[_0x4ddeb5];
                  }
                  if (_0x3e1f3e.flags & 259) {
                    break;
                  }
                }
              }
              if (_0x2a8d2f) {
                this.raiseRecoverable(_0xdab5e5, "Identifier '" + _0x4ddeb5 + "' has already been declared");
              }
            };
            _0x2d8c9c.checkLocalExport = function (_0x5bc047) {
              if (this.scopeStack[0].lexical.indexOf(_0x5bc047.name) === -1 && this.scopeStack[0].var.indexOf(_0x5bc047.name) === -1) {
                this.undefinedExports[_0x5bc047.name] = _0x5bc047;
              }
            };
            _0x2d8c9c.currentScope = function () {
              return this.scopeStack[this.scopeStack.length - 1];
            };
            _0x2d8c9c.currentVarScope = function () {
              for (var _0x3b5ca0 = this.scopeStack.length - 1;; _0x3b5ca0--) {
                var _0x58623e = this.scopeStack[_0x3b5ca0];
                if (_0x58623e.flags & 259) {
                  return _0x58623e;
                }
              }
            };
            _0x2d8c9c.currentThisScope = function () {
              for (var _0x1aedf9 = this.scopeStack.length - 1;; _0x1aedf9--) {
                var _0x180ae0 = this.scopeStack[_0x1aedf9];
                if (_0x180ae0.flags & 259 && !(_0x180ae0.flags & 16)) {
                  return _0x180ae0;
                }
              }
            };
            function _0x344284(_0x2fec9c, _0x12f74e, _0x2855e2) {
              this.type = "";
              this.start = _0x12f74e;
              this.end = 0;
              if (_0x2fec9c.options.locations) {
                this.loc = new _0x36faf2(_0x2fec9c, _0x2855e2);
              }
              if (_0x2fec9c.options.directSourceFile) {
                this.sourceFile = _0x2fec9c.options.directSourceFile;
              }
              if (_0x2fec9c.options.ranges) {
                this.range = [_0x12f74e, 0];
              }
            }
            var _0x2238ec = _0x504270.prototype;
            function _0xcf13c2(_0x178a0c, _0x6bb695, _0x2cd8d7, _0x522bfd) {
              _0x178a0c.type = _0x6bb695;
              _0x178a0c.end = _0x2cd8d7;
              if (this.options.locations) {
                _0x178a0c.loc.end = _0x522bfd;
              }
              if (this.options.ranges) {
                _0x178a0c.range[1] = _0x2cd8d7;
              }
              return _0x178a0c;
            }
            _0x2238ec.startNode = function () {
              return new _0x344284(this, this.start, this.startLoc);
            };
            _0x2238ec.startNodeAt = function (_0x19851f, _0x17d0b5) {
              return new _0x344284(this, _0x19851f, _0x17d0b5);
            };
            _0x2238ec.finishNode = function (_0x471847, _0x2f285f) {
              return _0xcf13c2.call(this, _0x471847, _0x2f285f, this.lastTokEnd, this.lastTokEndLoc);
            };
            _0x2238ec.finishNodeAt = function (_0x2c7538, _0x1b7150, _0x4815d2, _0x4160f0) {
              return _0xcf13c2.call(this, _0x2c7538, _0x1b7150, _0x4815d2, _0x4160f0);
            };
            _0x2238ec.copyNode = function (_0xc436fc) {
              var _0x414388 = new _0x344284(this, _0xc436fc.start, this.startLoc);
              for (var _0x2ac949 in _0xc436fc) {
                _0x414388[_0x2ac949] = _0xc436fc[_0x2ac949];
              }
              return _0x414388;
            };
            var _0x3ced5a = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
            var _0x23c7ed = _0x3ced5a + " Extended_Pictographic";
            var _0x4ad492 = _0x23c7ed + " EBase EComp EMod EPres ExtPict";
            var _0x1ace73 = {
              9: _0x3ced5a,
              10: _0x23c7ed,
              11: _0x23c7ed,
              12: _0x4ad492,
              13: _0x4ad492
            };
            var _0x19e3ea = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
            var _0x5e4a9f = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
            var _0x2af726 = _0x5e4a9f + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
            var _0x383dcd = _0x2af726 + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
            var _0x3bda9d = _0x383dcd + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
            var _0x4ff138 = {
              9: _0x5e4a9f,
              10: _0x2af726,
              11: _0x383dcd,
              12: _0x3bda9d,
              13: _0x3bda9d + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith"
            };
            var _0x28b3ee = {};
            function _0x3395be(_0x48c937) {
              var _0x16281f = _0x28b3ee[_0x48c937] = {
                binary: _0x220e5e(_0x1ace73[_0x48c937] + " " + _0x19e3ea),
                nonBinary: {
                  General_Category: _0x220e5e(_0x19e3ea),
                  Script: _0x220e5e(_0x4ff138[_0x48c937])
                }
              };
              _0x16281f.nonBinary.Script_Extensions = _0x16281f.nonBinary.Script;
              _0x16281f.nonBinary.gc = _0x16281f.nonBinary.General_Category;
              _0x16281f.nonBinary.sc = _0x16281f.nonBinary.Script;
              _0x16281f.nonBinary.scx = _0x16281f.nonBinary.Script_Extensions;
            }
            for (var _0x2267f5 = 0, _0xdaf442 = [9, 10, 11, 12, 13]; _0x2267f5 < _0xdaf442.length; _0x2267f5 += 1) {
              _0x3395be(_0xdaf442[_0x2267f5]);
            }
            var _0x52d1ac = _0x504270.prototype;
            function _0x3e4c9a(_0xbc4f2c) {
              this.parser = _0xbc4f2c;
              this.validFlags = "gim" + (_0xbc4f2c.options.ecmaVersion >= 6 ? "uy" : "") + (_0xbc4f2c.options.ecmaVersion >= 9 ? "s" : "") + (_0xbc4f2c.options.ecmaVersion >= 13 ? "d" : "");
              this.unicodeProperties = _0x28b3ee[_0xbc4f2c.options.ecmaVersion >= 13 ? 13 : _0xbc4f2c.options.ecmaVersion];
              this.source = "";
              this.flags = "";
              this.start = 0;
              this.switchU = false;
              this.switchN = false;
              this.pos = 0;
              this.lastIntValue = 0;
              this.lastStringValue = "";
              this.lastAssertionIsQuantifiable = false;
              this.numCapturingParens = 0;
              this.maxBackReference = 0;
              this.groupNames = [];
              this.backReferenceNames = [];
            }
            function _0x9afc08(_0x1ff01f) {
              if (_0x1ff01f <= 65535) {
                return String.fromCharCode(_0x1ff01f);
              } else {
                _0x1ff01f -= 65536;
                return String.fromCharCode(55296 + (_0x1ff01f >> 10), 56320 + (_0x1ff01f & 1023));
              }
            }
            function _0x5f516c(_0x330a3f) {
              return _0x330a3f === 36 || _0x330a3f >= 40 && _0x330a3f <= 43 || _0x330a3f === 46 || _0x330a3f === 63 || _0x330a3f >= 91 && _0x330a3f <= 94 || _0x330a3f >= 123 && _0x330a3f <= 125;
            }
            function _0x4b13ca(_0x137fa4) {
              return _0x137fa4 >= 65 && _0x137fa4 <= 90 || _0x137fa4 >= 97 && _0x137fa4 <= 122;
            }
            function _0x307153(_0x1655b5) {
              return _0x4b13ca(_0x1655b5) || _0x1655b5 === 95;
            }
            function _0xfa9a17(_0x258571) {
              return _0x307153(_0x258571) || _0x3eec57(_0x258571);
            }
            function _0x3eec57(_0x5b7bce) {
              return _0x5b7bce >= 48 && _0x5b7bce <= 57;
            }
            function _0x5c1ef8(_0x3d0b40) {
              return _0x3d0b40 >= 48 && _0x3d0b40 <= 57 || _0x3d0b40 >= 65 && _0x3d0b40 <= 70 || _0x3d0b40 >= 97 && _0x3d0b40 <= 102;
            }
            function _0x316e59(_0x4d4e87) {
              if (_0x4d4e87 >= 65 && _0x4d4e87 <= 70) {
                return _0x4d4e87 - 65 + 10;
              } else if (_0x4d4e87 >= 97 && _0x4d4e87 <= 102) {
                return _0x4d4e87 - 97 + 10;
              } else {
                return _0x4d4e87 - 48;
              }
            }
            function _0x53c6c4(_0x547cd9) {
              return _0x547cd9 >= 48 && _0x547cd9 <= 55;
            }
            _0x3e4c9a.prototype.reset = function (_0x51f11b, _0x598c35, _0x57243d) {
              var _0x15f959 = _0x57243d.indexOf("u") !== -1;
              this.start = _0x51f11b | 0;
              this.source = _0x598c35 + "";
              this.flags = _0x57243d;
              this.switchU = _0x15f959 && this.parser.options.ecmaVersion >= 6;
              this.switchN = _0x15f959 && this.parser.options.ecmaVersion >= 9;
            };
            _0x3e4c9a.prototype.raise = function (_0x2a1812) {
              this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + _0x2a1812);
            };
            _0x3e4c9a.prototype.at = function (_0x389093, _0x41f137) {
              if (_0x41f137 === undefined) {
                _0x41f137 = false;
              }
              var _0x2bd04b = this.source;
              var _0x5a3f2d = _0x2bd04b.length;
              if (_0x389093 >= _0x5a3f2d) {
                return -1;
              }
              var _0x4ff6db = _0x2bd04b.charCodeAt(_0x389093);
              if (!_0x41f137 && !this.switchU || _0x4ff6db <= 55295 || _0x4ff6db >= 57344 || _0x389093 + 1 >= _0x5a3f2d) {
                return _0x4ff6db;
              }
              var _0x44b722 = _0x2bd04b.charCodeAt(_0x389093 + 1);
              if (_0x44b722 >= 56320 && _0x44b722 <= 57343) {
                return (_0x4ff6db << 10) + _0x44b722 - 56613888;
              } else {
                return _0x4ff6db;
              }
            };
            _0x3e4c9a.prototype.nextIndex = function (_0x7f7dcc, _0x5d7ca4) {
              if (_0x5d7ca4 === undefined) {
                _0x5d7ca4 = false;
              }
              var _0x12f8d9 = this.source;
              var _0x4f5421 = _0x12f8d9.length;
              if (_0x7f7dcc >= _0x4f5421) {
                return _0x4f5421;
              }
              var _0x3c9b00;
              var _0x59f3c4 = _0x12f8d9.charCodeAt(_0x7f7dcc);
              if (!_0x5d7ca4 && !this.switchU || _0x59f3c4 <= 55295 || _0x59f3c4 >= 57344 || _0x7f7dcc + 1 >= _0x4f5421 || (_0x3c9b00 = _0x12f8d9.charCodeAt(_0x7f7dcc + 1)) < 56320 || _0x3c9b00 > 57343) {
                return _0x7f7dcc + 1;
              } else {
                return _0x7f7dcc + 2;
              }
            };
            _0x3e4c9a.prototype.current = function (_0x440626) {
              if (_0x440626 === undefined) {
                _0x440626 = false;
              }
              return this.at(this.pos, _0x440626);
            };
            _0x3e4c9a.prototype.lookahead = function (_0x511a72) {
              if (_0x511a72 === undefined) {
                _0x511a72 = false;
              }
              return this.at(this.nextIndex(this.pos, _0x511a72), _0x511a72);
            };
            _0x3e4c9a.prototype.advance = function (_0x5cb2a1) {
              if (_0x5cb2a1 === undefined) {
                _0x5cb2a1 = false;
              }
              this.pos = this.nextIndex(this.pos, _0x5cb2a1);
            };
            _0x3e4c9a.prototype.eat = function (_0x52314d, _0x1f05a3) {
              if (_0x1f05a3 === undefined) {
                _0x1f05a3 = false;
              }
              return this.current(_0x1f05a3) === _0x52314d && (this.advance(_0x1f05a3), true);
            };
            _0x52d1ac.validateRegExpFlags = function (_0x530d3d) {
              for (var _0x5d298b = _0x530d3d.validFlags, _0x53c6bf = _0x530d3d.flags, _0xd5cff1 = 0; _0xd5cff1 < _0x53c6bf.length; _0xd5cff1++) {
                var _0x2ace56 = _0x53c6bf.charAt(_0xd5cff1);
                if (_0x5d298b.indexOf(_0x2ace56) === -1) {
                  this.raise(_0x530d3d.start, "Invalid regular expression flag");
                }
                if (_0x53c6bf.indexOf(_0x2ace56, _0xd5cff1 + 1) > -1) {
                  this.raise(_0x530d3d.start, "Duplicate regular expression flag");
                }
              }
            };
            _0x52d1ac.validateRegExpPattern = function (_0x43da54) {
              this.regexp_pattern(_0x43da54);
              if (!_0x43da54.switchN && this.options.ecmaVersion >= 9 && _0x43da54.groupNames.length > 0) {
                _0x43da54.switchN = true;
                this.regexp_pattern(_0x43da54);
              }
            };
            _0x52d1ac.regexp_pattern = function (_0x2d425c) {
              _0x2d425c.pos = 0;
              _0x2d425c.lastIntValue = 0;
              _0x2d425c.lastStringValue = "";
              _0x2d425c.lastAssertionIsQuantifiable = false;
              _0x2d425c.numCapturingParens = 0;
              _0x2d425c.maxBackReference = 0;
              _0x2d425c.groupNames.length = 0;
              _0x2d425c.backReferenceNames.length = 0;
              this.regexp_disjunction(_0x2d425c);
              if (_0x2d425c.pos !== _0x2d425c.source.length) {
                if (_0x2d425c.eat(41)) {
                  _0x2d425c.raise("Unmatched ')'");
                }
                if (_0x2d425c.eat(93) || _0x2d425c.eat(125)) {
                  _0x2d425c.raise("Lone quantifier brackets");
                }
              }
              if (_0x2d425c.maxBackReference > _0x2d425c.numCapturingParens) {
                _0x2d425c.raise("Invalid escape");
              }
              for (var _0x3c76e6 = 0, _0xd818ce = _0x2d425c.backReferenceNames; _0x3c76e6 < _0xd818ce.length; _0x3c76e6 += 1) {
                var _0x248b42 = _0xd818ce[_0x3c76e6];
                if (_0x2d425c.groupNames.indexOf(_0x248b42) === -1) {
                  _0x2d425c.raise("Invalid named capture referenced");
                }
              }
            };
            _0x52d1ac.regexp_disjunction = function (_0x4ffe9b) {
              for (this.regexp_alternative(_0x4ffe9b); _0x4ffe9b.eat(124);) {
                this.regexp_alternative(_0x4ffe9b);
              }
              if (this.regexp_eatQuantifier(_0x4ffe9b, true)) {
                _0x4ffe9b.raise("Nothing to repeat");
              }
              if (_0x4ffe9b.eat(123)) {
                _0x4ffe9b.raise("Lone quantifier brackets");
              }
            };
            _0x52d1ac.regexp_alternative = function (_0x5c530d) {
              for (; _0x5c530d.pos < _0x5c530d.source.length && this.regexp_eatTerm(_0x5c530d););
            };
            _0x52d1ac.regexp_eatTerm = function (_0x404253) {
              if (this.regexp_eatAssertion(_0x404253)) {
                if (_0x404253.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(_0x404253) && _0x404253.switchU) {
                  _0x404253.raise("Invalid quantifier");
                }
                return true;
              } else {
                return !!(_0x404253.switchU ? this.regexp_eatAtom(_0x404253) : this.regexp_eatExtendedAtom(_0x404253)) && (this.regexp_eatQuantifier(_0x404253), true);
              }
            };
            _0x52d1ac.regexp_eatAssertion = function (_0x4c917) {
              var _0x2cd0e9 = _0x4c917.pos;
              _0x4c917.lastAssertionIsQuantifiable = false;
              if (_0x4c917.eat(94) || _0x4c917.eat(36)) {
                return true;
              }
              if (_0x4c917.eat(92)) {
                if (_0x4c917.eat(66) || _0x4c917.eat(98)) {
                  return true;
                }
                _0x4c917.pos = _0x2cd0e9;
              }
              if (_0x4c917.eat(40) && _0x4c917.eat(63)) {
                var _0xbbe957 = false;
                if (this.options.ecmaVersion >= 9) {
                  _0xbbe957 = _0x4c917.eat(60);
                }
                if (_0x4c917.eat(61) || _0x4c917.eat(33)) {
                  this.regexp_disjunction(_0x4c917);
                  if (!_0x4c917.eat(41)) {
                    _0x4c917.raise("Unterminated group");
                  }
                  _0x4c917.lastAssertionIsQuantifiable = !_0xbbe957;
                  return true;
                }
              }
              _0x4c917.pos = _0x2cd0e9;
              return false;
            };
            _0x52d1ac.regexp_eatQuantifier = function (_0x4a0a2a, _0x151bf5) {
              if (_0x151bf5 === undefined) {
                _0x151bf5 = false;
              }
              return !!this.regexp_eatQuantifierPrefix(_0x4a0a2a, _0x151bf5) && (_0x4a0a2a.eat(63), true);
            };
            _0x52d1ac.regexp_eatQuantifierPrefix = function (_0x381973, _0x268545) {
              return _0x381973.eat(42) || _0x381973.eat(43) || _0x381973.eat(63) || this.regexp_eatBracedQuantifier(_0x381973, _0x268545);
            };
            _0x52d1ac.regexp_eatBracedQuantifier = function (_0xf6fe2d, _0x293486) {
              var _0x3c4535 = _0xf6fe2d.pos;
              if (_0xf6fe2d.eat(123)) {
                var _0x3d2a86 = 0;
                var _0x36498b = -1;
                if (this.regexp_eatDecimalDigits(_0xf6fe2d) && (_0x3d2a86 = _0xf6fe2d.lastIntValue, _0xf6fe2d.eat(44) && this.regexp_eatDecimalDigits(_0xf6fe2d) && (_0x36498b = _0xf6fe2d.lastIntValue), _0xf6fe2d.eat(125))) {
                  if (_0x36498b !== -1 && _0x36498b < _0x3d2a86 && !_0x293486) {
                    _0xf6fe2d.raise("numbers out of order in {} quantifier");
                  }
                  return true;
                }
                if (_0xf6fe2d.switchU && !_0x293486) {
                  _0xf6fe2d.raise("Incomplete quantifier");
                }
                _0xf6fe2d.pos = _0x3c4535;
              }
              return false;
            };
            _0x52d1ac.regexp_eatAtom = function (_0x476969) {
              return this.regexp_eatPatternCharacters(_0x476969) || _0x476969.eat(46) || this.regexp_eatReverseSolidusAtomEscape(_0x476969) || this.regexp_eatCharacterClass(_0x476969) || this.regexp_eatUncapturingGroup(_0x476969) || this.regexp_eatCapturingGroup(_0x476969);
            };
            _0x52d1ac.regexp_eatReverseSolidusAtomEscape = function (_0x4262c9) {
              var _0x4d41bb = _0x4262c9.pos;
              if (_0x4262c9.eat(92)) {
                if (this.regexp_eatAtomEscape(_0x4262c9)) {
                  return true;
                }
                _0x4262c9.pos = _0x4d41bb;
              }
              return false;
            };
            _0x52d1ac.regexp_eatUncapturingGroup = function (_0x392fe1) {
              var _0x4e5a2e = _0x392fe1.pos;
              if (_0x392fe1.eat(40)) {
                if (_0x392fe1.eat(63) && _0x392fe1.eat(58)) {
                  this.regexp_disjunction(_0x392fe1);
                  if (_0x392fe1.eat(41)) {
                    return true;
                  }
                  _0x392fe1.raise("Unterminated group");
                }
                _0x392fe1.pos = _0x4e5a2e;
              }
              return false;
            };
            _0x52d1ac.regexp_eatCapturingGroup = function (_0x4ae991) {
              if (_0x4ae991.eat(40)) {
                if (this.options.ecmaVersion >= 9) {
                  this.regexp_groupSpecifier(_0x4ae991);
                } else if (_0x4ae991.current() === 63) {
                  _0x4ae991.raise("Invalid group");
                }
                this.regexp_disjunction(_0x4ae991);
                if (_0x4ae991.eat(41)) {
                  _0x4ae991.numCapturingParens += 1;
                  return true;
                }
                _0x4ae991.raise("Unterminated group");
              }
              return false;
            };
            _0x52d1ac.regexp_eatExtendedAtom = function (_0x1a0ac2) {
              return _0x1a0ac2.eat(46) || this.regexp_eatReverseSolidusAtomEscape(_0x1a0ac2) || this.regexp_eatCharacterClass(_0x1a0ac2) || this.regexp_eatUncapturingGroup(_0x1a0ac2) || this.regexp_eatCapturingGroup(_0x1a0ac2) || this.regexp_eatInvalidBracedQuantifier(_0x1a0ac2) || this.regexp_eatExtendedPatternCharacter(_0x1a0ac2);
            };
            _0x52d1ac.regexp_eatInvalidBracedQuantifier = function (_0x347cce) {
              if (this.regexp_eatBracedQuantifier(_0x347cce, true)) {
                _0x347cce.raise("Nothing to repeat");
              }
              return false;
            };
            _0x52d1ac.regexp_eatSyntaxCharacter = function (_0x22de73) {
              var _0xf7890 = _0x22de73.current();
              return !!_0x5f516c(_0xf7890) && (_0x22de73.lastIntValue = _0xf7890, _0x22de73.advance(), true);
            };
            _0x52d1ac.regexp_eatPatternCharacters = function (_0x1d2854) {
              for (var _0x142f68 = _0x1d2854.pos, _0x3d47dc = 0; (_0x3d47dc = _0x1d2854.current()) !== -1 && !_0x5f516c(_0x3d47dc);) {
                _0x1d2854.advance();
              }
              return _0x1d2854.pos !== _0x142f68;
            };
            _0x52d1ac.regexp_eatExtendedPatternCharacter = function (_0x53cb73) {
              var _0x675ce9 = _0x53cb73.current();
              return !(_0x675ce9 === -1 || _0x675ce9 === 36 || _0x675ce9 >= 40 && _0x675ce9 <= 43 || _0x675ce9 === 46 || _0x675ce9 === 63 || _0x675ce9 === 91 || _0x675ce9 === 94 || _0x675ce9 === 124) && (_0x53cb73.advance(), true);
            };
            _0x52d1ac.regexp_groupSpecifier = function (_0x3172b4) {
              if (_0x3172b4.eat(63)) {
                if (this.regexp_eatGroupName(_0x3172b4)) {
                  if (_0x3172b4.groupNames.indexOf(_0x3172b4.lastStringValue) !== -1) {
                    _0x3172b4.raise("Duplicate capture group name");
                  }
                  _0x3172b4.groupNames.push(_0x3172b4.lastStringValue);
                  return;
                }
                _0x3172b4.raise("Invalid group");
              }
            };
            _0x52d1ac.regexp_eatGroupName = function (_0x13f236) {
              _0x13f236.lastStringValue = "";
              if (_0x13f236.eat(60)) {
                if (this.regexp_eatRegExpIdentifierName(_0x13f236) && _0x13f236.eat(62)) {
                  return true;
                }
                _0x13f236.raise("Invalid capture group name");
              }
              return false;
            };
            _0x52d1ac.regexp_eatRegExpIdentifierName = function (_0x2b3928) {
              _0x2b3928.lastStringValue = "";
              if (this.regexp_eatRegExpIdentifierStart(_0x2b3928)) {
                for (_0x2b3928.lastStringValue += _0x9afc08(_0x2b3928.lastIntValue); this.regexp_eatRegExpIdentifierPart(_0x2b3928);) {
                  _0x2b3928.lastStringValue += _0x9afc08(_0x2b3928.lastIntValue);
                }
                return true;
              }
              return false;
            };
            _0x52d1ac.regexp_eatRegExpIdentifierStart = function (_0x2131d5) {
              var _0x1cdeea = _0x2131d5.pos;
              var _0x1165e9 = this.options.ecmaVersion >= 11;
              var _0x31ecb8 = _0x2131d5.current(_0x1165e9);
              _0x2131d5.advance(_0x1165e9);
              if (_0x31ecb8 === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(_0x2131d5, _0x1165e9)) {
                _0x31ecb8 = _0x2131d5.lastIntValue;
              }
              if (function (_0xaa0517) {
                return _0x32cd9a(_0xaa0517, true) || _0xaa0517 === 36 || _0xaa0517 === 95;
              }(_0x31ecb8)) {
                _0x2131d5.lastIntValue = _0x31ecb8;
                return true;
              } else {
                _0x2131d5.pos = _0x1cdeea;
                return false;
              }
            };
            _0x52d1ac.regexp_eatRegExpIdentifierPart = function (_0x35aa3c) {
              var _0xe78da4 = _0x35aa3c.pos;
              var _0x34449e = this.options.ecmaVersion >= 11;
              var _0x7d3c70 = _0x35aa3c.current(_0x34449e);
              _0x35aa3c.advance(_0x34449e);
              if (_0x7d3c70 === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(_0x35aa3c, _0x34449e)) {
                _0x7d3c70 = _0x35aa3c.lastIntValue;
              }
              if (function (_0x223486) {
                return _0x5942d0(_0x223486, true) || _0x223486 === 36 || _0x223486 === 95 || _0x223486 === 8204 || _0x223486 === 8205;
              }(_0x7d3c70)) {
                _0x35aa3c.lastIntValue = _0x7d3c70;
                return true;
              } else {
                _0x35aa3c.pos = _0xe78da4;
                return false;
              }
            };
            _0x52d1ac.regexp_eatAtomEscape = function (_0x202db4) {
              return !!(this.regexp_eatBackReference(_0x202db4) || this.regexp_eatCharacterClassEscape(_0x202db4) || this.regexp_eatCharacterEscape(_0x202db4) || _0x202db4.switchN && this.regexp_eatKGroupName(_0x202db4)) || (_0x202db4.switchU && (_0x202db4.current() === 99 && _0x202db4.raise("Invalid unicode escape"), _0x202db4.raise("Invalid escape")), false);
            };
            _0x52d1ac.regexp_eatBackReference = function (_0x2bb964) {
              var _0x42912e = _0x2bb964.pos;
              if (this.regexp_eatDecimalEscape(_0x2bb964)) {
                var _0x3271a4 = _0x2bb964.lastIntValue;
                if (_0x2bb964.switchU) {
                  if (_0x3271a4 > _0x2bb964.maxBackReference) {
                    _0x2bb964.maxBackReference = _0x3271a4;
                  }
                  return true;
                }
                if (_0x3271a4 <= _0x2bb964.numCapturingParens) {
                  return true;
                }
                _0x2bb964.pos = _0x42912e;
              }
              return false;
            };
            _0x52d1ac.regexp_eatKGroupName = function (_0x48184f) {
              if (_0x48184f.eat(107)) {
                if (this.regexp_eatGroupName(_0x48184f)) {
                  _0x48184f.backReferenceNames.push(_0x48184f.lastStringValue);
                  return true;
                }
                _0x48184f.raise("Invalid named reference");
              }
              return false;
            };
            _0x52d1ac.regexp_eatCharacterEscape = function (_0x490c3d) {
              return this.regexp_eatControlEscape(_0x490c3d) || this.regexp_eatCControlLetter(_0x490c3d) || this.regexp_eatZero(_0x490c3d) || this.regexp_eatHexEscapeSequence(_0x490c3d) || this.regexp_eatRegExpUnicodeEscapeSequence(_0x490c3d, false) || !_0x490c3d.switchU && this.regexp_eatLegacyOctalEscapeSequence(_0x490c3d) || this.regexp_eatIdentityEscape(_0x490c3d);
            };
            _0x52d1ac.regexp_eatCControlLetter = function (_0x5e9b0f) {
              var _0x3beabd = _0x5e9b0f.pos;
              if (_0x5e9b0f.eat(99)) {
                if (this.regexp_eatControlLetter(_0x5e9b0f)) {
                  return true;
                }
                _0x5e9b0f.pos = _0x3beabd;
              }
              return false;
            };
            _0x52d1ac.regexp_eatZero = function (_0x433c4e) {
              return _0x433c4e.current() === 48 && !_0x3eec57(_0x433c4e.lookahead()) && (_0x433c4e.lastIntValue = 0, _0x433c4e.advance(), true);
            };
            _0x52d1ac.regexp_eatControlEscape = function (_0x60fe5d) {
              var _0xe21ddc = _0x60fe5d.current();
              if (_0xe21ddc === 116) {
                _0x60fe5d.lastIntValue = 9;
                _0x60fe5d.advance();
                return true;
              } else if (_0xe21ddc === 110) {
                _0x60fe5d.lastIntValue = 10;
                _0x60fe5d.advance();
                return true;
              } else if (_0xe21ddc === 118) {
                _0x60fe5d.lastIntValue = 11;
                _0x60fe5d.advance();
                return true;
              } else if (_0xe21ddc === 102) {
                _0x60fe5d.lastIntValue = 12;
                _0x60fe5d.advance();
                return true;
              } else {
                return _0xe21ddc === 114 && (_0x60fe5d.lastIntValue = 13, _0x60fe5d.advance(), true);
              }
            };
            _0x52d1ac.regexp_eatControlLetter = function (_0x1b314b) {
              var _0x3ac087 = _0x1b314b.current();
              return !!_0x4b13ca(_0x3ac087) && (_0x1b314b.lastIntValue = _0x3ac087 % 32, _0x1b314b.advance(), true);
            };
            _0x52d1ac.regexp_eatRegExpUnicodeEscapeSequence = function (_0x440f0a, _0x42d173) {
              if (_0x42d173 === undefined) {
                _0x42d173 = false;
              }
              var _0x2eba7e = _0x440f0a.pos;
              var _0x47aabb = _0x42d173 || _0x440f0a.switchU;
              if (_0x440f0a.eat(117)) {
                if (this.regexp_eatFixedHexDigits(_0x440f0a, 4)) {
                  var _0x5d74bd = _0x440f0a.lastIntValue;
                  if (_0x47aabb && _0x5d74bd >= 55296 && _0x5d74bd <= 56319) {
                    var _0x269c60 = _0x440f0a.pos;
                    if (_0x440f0a.eat(92) && _0x440f0a.eat(117) && this.regexp_eatFixedHexDigits(_0x440f0a, 4)) {
                      var _0x4fdb69 = _0x440f0a.lastIntValue;
                      if (_0x4fdb69 >= 56320 && _0x4fdb69 <= 57343) {
                        _0x440f0a.lastIntValue = (_0x5d74bd - 55296) * 1024 + (_0x4fdb69 - 56320) + 65536;
                        return true;
                      }
                    }
                    _0x440f0a.pos = _0x269c60;
                    _0x440f0a.lastIntValue = _0x5d74bd;
                  }
                  return true;
                }
                if (_0x47aabb && _0x440f0a.eat(123) && this.regexp_eatHexDigits(_0x440f0a) && _0x440f0a.eat(125) && function (_0x2072c3) {
                  return _0x2072c3 >= 0 && _0x2072c3 <= 1114111;
                }(_0x440f0a.lastIntValue)) {
                  return true;
                }
                if (_0x47aabb) {
                  _0x440f0a.raise("Invalid unicode escape");
                }
                _0x440f0a.pos = _0x2eba7e;
              }
              return false;
            };
            _0x52d1ac.regexp_eatIdentityEscape = function (_0x4c7e4f) {
              if (_0x4c7e4f.switchU) {
                return !!this.regexp_eatSyntaxCharacter(_0x4c7e4f) || !!_0x4c7e4f.eat(47) && (_0x4c7e4f.lastIntValue = 47, true);
              }
              var _0x4a7e87 = _0x4c7e4f.current();
              return !(_0x4a7e87 === 99 || _0x4c7e4f.switchN && _0x4a7e87 === 107) && (_0x4c7e4f.lastIntValue = _0x4a7e87, _0x4c7e4f.advance(), true);
            };
            _0x52d1ac.regexp_eatDecimalEscape = function (_0x2fc043) {
              _0x2fc043.lastIntValue = 0;
              var _0x207be9 = _0x2fc043.current();
              if (_0x207be9 >= 49 && _0x207be9 <= 57) {
                do {
                  _0x2fc043.lastIntValue = _0x2fc043.lastIntValue * 10 + (_0x207be9 - 48);
                  _0x2fc043.advance();
                } while ((_0x207be9 = _0x2fc043.current()) >= 48 && _0x207be9 <= 57);
                return true;
              }
              return false;
            };
            _0x52d1ac.regexp_eatCharacterClassEscape = function (_0x33f0ed) {
              var _0x510082 = _0x33f0ed.current();
              if (function (_0x6cf823) {
                return _0x6cf823 === 100 || _0x6cf823 === 68 || _0x6cf823 === 115 || _0x6cf823 === 83 || _0x6cf823 === 119 || _0x6cf823 === 87;
              }(_0x510082)) {
                _0x33f0ed.lastIntValue = -1;
                _0x33f0ed.advance();
                return true;
              }
              if (_0x33f0ed.switchU && this.options.ecmaVersion >= 9 && (_0x510082 === 80 || _0x510082 === 112)) {
                _0x33f0ed.lastIntValue = -1;
                _0x33f0ed.advance();
                if (_0x33f0ed.eat(123) && this.regexp_eatUnicodePropertyValueExpression(_0x33f0ed) && _0x33f0ed.eat(125)) {
                  return true;
                }
                _0x33f0ed.raise("Invalid property name");
              }
              return false;
            };
            _0x52d1ac.regexp_eatUnicodePropertyValueExpression = function (_0x5d5b02) {
              var _0x2dd036 = _0x5d5b02.pos;
              if (this.regexp_eatUnicodePropertyName(_0x5d5b02) && _0x5d5b02.eat(61)) {
                var _0x225657 = _0x5d5b02.lastStringValue;
                if (this.regexp_eatUnicodePropertyValue(_0x5d5b02)) {
                  var _0x48f193 = _0x5d5b02.lastStringValue;
                  this.regexp_validateUnicodePropertyNameAndValue(_0x5d5b02, _0x225657, _0x48f193);
                  return true;
                }
              }
              _0x5d5b02.pos = _0x2dd036;
              if (this.regexp_eatLoneUnicodePropertyNameOrValue(_0x5d5b02)) {
                var _0x552289 = _0x5d5b02.lastStringValue;
                this.regexp_validateUnicodePropertyNameOrValue(_0x5d5b02, _0x552289);
                return true;
              }
              return false;
            };
            _0x52d1ac.regexp_validateUnicodePropertyNameAndValue = function (_0x5cd510, _0x61daf, _0x47c7dc) {
              if (!_0x25ab37(_0x5cd510.unicodeProperties.nonBinary, _0x61daf)) {
                _0x5cd510.raise("Invalid property name");
              }
              if (!_0x5cd510.unicodeProperties.nonBinary[_0x61daf].test(_0x47c7dc)) {
                _0x5cd510.raise("Invalid property value");
              }
            };
            _0x52d1ac.regexp_validateUnicodePropertyNameOrValue = function (_0x452807, _0x4f9013) {
              if (!_0x452807.unicodeProperties.binary.test(_0x4f9013)) {
                _0x452807.raise("Invalid property name");
              }
            };
            _0x52d1ac.regexp_eatUnicodePropertyName = function (_0x2f0c7d) {
              var _0xc6d71b = 0;
              for (_0x2f0c7d.lastStringValue = ""; _0x307153(_0xc6d71b = _0x2f0c7d.current());) {
                _0x2f0c7d.lastStringValue += _0x9afc08(_0xc6d71b);
                _0x2f0c7d.advance();
              }
              return _0x2f0c7d.lastStringValue !== "";
            };
            _0x52d1ac.regexp_eatUnicodePropertyValue = function (_0x43a423) {
              var _0x435e2b = 0;
              for (_0x43a423.lastStringValue = ""; _0xfa9a17(_0x435e2b = _0x43a423.current());) {
                _0x43a423.lastStringValue += _0x9afc08(_0x435e2b);
                _0x43a423.advance();
              }
              return _0x43a423.lastStringValue !== "";
            };
            _0x52d1ac.regexp_eatLoneUnicodePropertyNameOrValue = function (_0x217722) {
              return this.regexp_eatUnicodePropertyValue(_0x217722);
            };
            _0x52d1ac.regexp_eatCharacterClass = function (_0x3fccbf) {
              if (_0x3fccbf.eat(91)) {
                _0x3fccbf.eat(94);
                this.regexp_classRanges(_0x3fccbf);
                if (_0x3fccbf.eat(93)) {
                  return true;
                }
                _0x3fccbf.raise("Unterminated character class");
              }
              return false;
            };
            _0x52d1ac.regexp_classRanges = function (_0x3ee638) {
              for (; this.regexp_eatClassAtom(_0x3ee638);) {
                var _0x341b0d = _0x3ee638.lastIntValue;
                if (_0x3ee638.eat(45) && this.regexp_eatClassAtom(_0x3ee638)) {
                  var _0x24cf9e = _0x3ee638.lastIntValue;
                  if (!(!_0x3ee638.switchU || _0x341b0d !== -1 && _0x24cf9e !== -1)) {
                    _0x3ee638.raise("Invalid character class");
                  }
                  if (_0x341b0d !== -1 && _0x24cf9e !== -1 && _0x341b0d > _0x24cf9e) {
                    _0x3ee638.raise("Range out of order in character class");
                  }
                }
              }
            };
            _0x52d1ac.regexp_eatClassAtom = function (_0x36265d) {
              var _0x335c04 = _0x36265d.pos;
              if (_0x36265d.eat(92)) {
                if (this.regexp_eatClassEscape(_0x36265d)) {
                  return true;
                }
                if (_0x36265d.switchU) {
                  var _0xd90946 = _0x36265d.current();
                  if (_0xd90946 === 99 || _0x53c6c4(_0xd90946)) {
                    _0x36265d.raise("Invalid class escape");
                  }
                  _0x36265d.raise("Invalid escape");
                }
                _0x36265d.pos = _0x335c04;
              }
              var _0x21a6b7 = _0x36265d.current();
              return _0x21a6b7 !== 93 && (_0x36265d.lastIntValue = _0x21a6b7, _0x36265d.advance(), true);
            };
            _0x52d1ac.regexp_eatClassEscape = function (_0x4c3d98) {
              var _0xbf3ab2 = _0x4c3d98.pos;
              if (_0x4c3d98.eat(98)) {
                _0x4c3d98.lastIntValue = 8;
                return true;
              }
              if (_0x4c3d98.switchU && _0x4c3d98.eat(45)) {
                _0x4c3d98.lastIntValue = 45;
                return true;
              }
              if (!_0x4c3d98.switchU && _0x4c3d98.eat(99)) {
                if (this.regexp_eatClassControlLetter(_0x4c3d98)) {
                  return true;
                }
                _0x4c3d98.pos = _0xbf3ab2;
              }
              return this.regexp_eatCharacterClassEscape(_0x4c3d98) || this.regexp_eatCharacterEscape(_0x4c3d98);
            };
            _0x52d1ac.regexp_eatClassControlLetter = function (_0xc199a5) {
              var _0x492276 = _0xc199a5.current();
              return !(!_0x3eec57(_0x492276) && _0x492276 !== 95) && (_0xc199a5.lastIntValue = _0x492276 % 32, _0xc199a5.advance(), true);
            };
            _0x52d1ac.regexp_eatHexEscapeSequence = function (_0x5f5af7) {
              var _0x10dce8 = _0x5f5af7.pos;
              if (_0x5f5af7.eat(120)) {
                if (this.regexp_eatFixedHexDigits(_0x5f5af7, 2)) {
                  return true;
                }
                if (_0x5f5af7.switchU) {
                  _0x5f5af7.raise("Invalid escape");
                }
                _0x5f5af7.pos = _0x10dce8;
              }
              return false;
            };
            _0x52d1ac.regexp_eatDecimalDigits = function (_0x4862ed) {
              var _0x33a274 = _0x4862ed.pos;
              var _0x262fd0 = 0;
              for (_0x4862ed.lastIntValue = 0; _0x3eec57(_0x262fd0 = _0x4862ed.current());) {
                _0x4862ed.lastIntValue = _0x4862ed.lastIntValue * 10 + (_0x262fd0 - 48);
                _0x4862ed.advance();
              }
              return _0x4862ed.pos !== _0x33a274;
            };
            _0x52d1ac.regexp_eatHexDigits = function (_0x1a12ad) {
              var _0x310e04 = _0x1a12ad.pos;
              var _0x27822b = 0;
              for (_0x1a12ad.lastIntValue = 0; _0x5c1ef8(_0x27822b = _0x1a12ad.current());) {
                _0x1a12ad.lastIntValue = _0x1a12ad.lastIntValue * 16 + _0x316e59(_0x27822b);
                _0x1a12ad.advance();
              }
              return _0x1a12ad.pos !== _0x310e04;
            };
            _0x52d1ac.regexp_eatLegacyOctalEscapeSequence = function (_0x232eb4) {
              if (this.regexp_eatOctalDigit(_0x232eb4)) {
                var _0x17fade = _0x232eb4.lastIntValue;
                if (this.regexp_eatOctalDigit(_0x232eb4)) {
                  var _0x9496e3 = _0x232eb4.lastIntValue;
                  if (_0x17fade <= 3 && this.regexp_eatOctalDigit(_0x232eb4)) {
                    _0x232eb4.lastIntValue = _0x17fade * 64 + _0x9496e3 * 8 + _0x232eb4.lastIntValue;
                  } else {
                    _0x232eb4.lastIntValue = _0x17fade * 8 + _0x9496e3;
                  }
                } else {
                  _0x232eb4.lastIntValue = _0x17fade;
                }
                return true;
              }
              return false;
            };
            _0x52d1ac.regexp_eatOctalDigit = function (_0x35e8f7) {
              var _0x19dd2a = _0x35e8f7.current();
              if (_0x53c6c4(_0x19dd2a)) {
                _0x35e8f7.lastIntValue = _0x19dd2a - 48;
                _0x35e8f7.advance();
                return true;
              } else {
                _0x35e8f7.lastIntValue = 0;
                return false;
              }
            };
            _0x52d1ac.regexp_eatFixedHexDigits = function (_0x14bac1, _0x5bbad0) {
              var _0x11c826 = _0x14bac1.pos;
              _0x14bac1.lastIntValue = 0;
              for (var _0x561ca4 = 0; _0x561ca4 < _0x5bbad0; ++_0x561ca4) {
                var _0x450d06 = _0x14bac1.current();
                if (!_0x5c1ef8(_0x450d06)) {
                  _0x14bac1.pos = _0x11c826;
                  return false;
                }
                _0x14bac1.lastIntValue = _0x14bac1.lastIntValue * 16 + _0x316e59(_0x450d06);
                _0x14bac1.advance();
              }
              return true;
            };
            function _0x343820(_0x61e9e9) {
              this.type = _0x61e9e9.type;
              this.value = _0x61e9e9.value;
              this.start = _0x61e9e9.start;
              this.end = _0x61e9e9.end;
              if (_0x61e9e9.options.locations) {
                this.loc = new _0x36faf2(_0x61e9e9, _0x61e9e9.startLoc, _0x61e9e9.endLoc);
              }
              if (_0x61e9e9.options.ranges) {
                this.range = [_0x61e9e9.start, _0x61e9e9.end];
              }
            }
            var _0x2931b1 = _0x504270.prototype;
            function _0x57ad7f(_0x42b2a1) {
              if (typeof BigInt != "function") {
                return null;
              } else {
                return BigInt(_0x42b2a1.replace(/_/g, ""));
              }
            }
            function _0x3c0735(_0x4debb4) {
              if (_0x4debb4 <= 65535) {
                return String.fromCharCode(_0x4debb4);
              } else {
                _0x4debb4 -= 65536;
                return String.fromCharCode(55296 + (_0x4debb4 >> 10), 56320 + (_0x4debb4 & 1023));
              }
            }
            _0x2931b1.next = function (_0x42a556) {
              if (!_0x42a556 && this.type.keyword && this.containsEsc) {
                this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
              }
              if (this.options.onToken) {
                this.options.onToken(new _0x343820(this));
              }
              this.lastTokEnd = this.end;
              this.lastTokStart = this.start;
              this.lastTokEndLoc = this.endLoc;
              this.lastTokStartLoc = this.startLoc;
              this.nextToken();
            };
            _0x2931b1.getToken = function () {
              this.next();
              return new _0x343820(this);
            };
            if (typeof Symbol != "undefined") {
              _0x2931b1[Symbol.iterator] = function () {
                var _0x2e338e = this;
                return {
                  next: function () {
                    var _0x5ad185 = _0x2e338e.getToken();
                    return {
                      done: _0x5ad185.type === _0x47ea38.eof,
                      value: _0x5ad185
                    };
                  }
                };
              };
            }
            _0x2931b1.nextToken = function () {
              var _0x546e62 = this.curContext();
              if (!(_0x546e62 && _0x546e62.preserveSpace)) {
                this.skipSpace();
              }
              this.start = this.pos;
              if (this.options.locations) {
                this.startLoc = this.curPosition();
              }
              if (this.pos >= this.input.length) {
                return this.finishToken(_0x47ea38.eof);
              } else if (_0x546e62.override) {
                return _0x546e62.override(this);
              } else {
                this.readToken(this.fullCharCodeAtPos());
                return;
              }
            };
            _0x2931b1.readToken = function (_0x2b47a7) {
              if (_0x32cd9a(_0x2b47a7, this.options.ecmaVersion >= 6) || _0x2b47a7 === 92) {
                return this.readWord();
              } else {
                return this.getTokenFromCode(_0x2b47a7);
              }
            };
            _0x2931b1.fullCharCodeAtPos = function () {
              var _0x12d94e = this.input.charCodeAt(this.pos);
              if (_0x12d94e <= 55295 || _0x12d94e >= 56320) {
                return _0x12d94e;
              }
              var _0x3243e5 = this.input.charCodeAt(this.pos + 1);
              if (_0x3243e5 <= 56319 || _0x3243e5 >= 57344) {
                return _0x12d94e;
              } else {
                return (_0x12d94e << 10) + _0x3243e5 - 56613888;
              }
            };
            _0x2931b1.skipBlockComment = function () {
              var _0xee8800 = this.options.onComment && this.curPosition();
              var _0x312e0e = this.pos;
              var _0x3f0855 = this.input.indexOf("*/", this.pos += 2);
              if (_0x3f0855 === -1) {
                this.raise(this.pos - 2, "Unterminated comment");
              }
              this.pos = _0x3f0855 + 2;
              if (this.options.locations) {
                for (var _0x28e383 = undefined, _0x3c6ed0 = _0x312e0e; (_0x28e383 = _0x19617a(this.input, _0x3c6ed0, this.pos)) > -1;) {
                  ++this.curLine;
                  _0x3c6ed0 = this.lineStart = _0x28e383;
                }
              }
              if (this.options.onComment) {
                this.options.onComment(true, this.input.slice(_0x312e0e + 2, _0x3f0855), _0x312e0e, this.pos, _0xee8800, this.curPosition());
              }
            };
            _0x2931b1.skipLineComment = function (_0x2802e8) {
              for (var _0x22b46a = this.pos, _0x6fbd93 = this.options.onComment && this.curPosition(), _0x51ee5f = this.input.charCodeAt(this.pos += _0x2802e8); this.pos < this.input.length && !_0x47ac09(_0x51ee5f);) {
                _0x51ee5f = this.input.charCodeAt(++this.pos);
              }
              if (this.options.onComment) {
                this.options.onComment(false, this.input.slice(_0x22b46a + _0x2802e8, this.pos), _0x22b46a, this.pos, _0x6fbd93, this.curPosition());
              }
            };
            _0x2931b1.skipSpace = function () {
              _0x21374b: for (; this.pos < this.input.length;) {
                var _0xc6a7dc = this.input.charCodeAt(this.pos);
                switch (_0xc6a7dc) {
                  case 32:
                  case 160:
                    ++this.pos;
                    break;
                  case 13:
                    if (this.input.charCodeAt(this.pos + 1) === 10) {
                      ++this.pos;
                    }
                  case 10:
                  case 8232:
                  case 8233:
                    ++this.pos;
                    if (this.options.locations) {
                      ++this.curLine;
                      this.lineStart = this.pos;
                    }
                    break;
                  case 47:
                    switch (this.input.charCodeAt(this.pos + 1)) {
                      case 42:
                        this.skipBlockComment();
                        break;
                      case 47:
                        this.skipLineComment(2);
                        break;
                      default:
                        break _0x21374b;
                    }
                    break;
                  default:
                    if (!(_0xc6a7dc > 8 && _0xc6a7dc < 14 || _0xc6a7dc >= 5760 && _0x38be38.test(String.fromCharCode(_0xc6a7dc)))) {
                      break _0x21374b;
                    }
                    ++this.pos;
                }
              }
            };
            _0x2931b1.finishToken = function (_0x15c2b6, _0x504a39) {
              this.end = this.pos;
              if (this.options.locations) {
                this.endLoc = this.curPosition();
              }
              var _0x17741a = this.type;
              this.type = _0x15c2b6;
              this.value = _0x504a39;
              this.updateContext(_0x17741a);
            };
            _0x2931b1.readToken_dot = function () {
              var _0x31460c = this.input.charCodeAt(this.pos + 1);
              if (_0x31460c >= 48 && _0x31460c <= 57) {
                return this.readNumber(true);
              }
              var _0x20792c = this.input.charCodeAt(this.pos + 2);
              if (this.options.ecmaVersion >= 6 && _0x31460c === 46 && _0x20792c === 46) {
                this.pos += 3;
                return this.finishToken(_0x47ea38.ellipsis);
              } else {
                ++this.pos;
                return this.finishToken(_0x47ea38.dot);
              }
            };
            _0x2931b1.readToken_slash = function () {
              var _0xe006ab = this.input.charCodeAt(this.pos + 1);
              if (this.exprAllowed) {
                ++this.pos;
                return this.readRegexp();
              } else if (_0xe006ab === 61) {
                return this.finishOp(_0x47ea38.assign, 2);
              } else {
                return this.finishOp(_0x47ea38.slash, 1);
              }
            };
            _0x2931b1.readToken_mult_modulo_exp = function (_0x4b2304) {
              var _0x534e3a = this.input.charCodeAt(this.pos + 1);
              var _0x35057e = 1;
              var _0x264272 = _0x4b2304 === 42 ? _0x47ea38.star : _0x47ea38.modulo;
              if (this.options.ecmaVersion >= 7 && _0x4b2304 === 42 && _0x534e3a === 42) {
                ++_0x35057e;
                _0x264272 = _0x47ea38.starstar;
                _0x534e3a = this.input.charCodeAt(this.pos + 2);
              }
              if (_0x534e3a === 61) {
                return this.finishOp(_0x47ea38.assign, _0x35057e + 1);
              } else {
                return this.finishOp(_0x264272, _0x35057e);
              }
            };
            _0x2931b1.readToken_pipe_amp = function (_0x221345) {
              var _0x510ff9 = this.input.charCodeAt(this.pos + 1);
              if (_0x510ff9 === _0x221345) {
                if (this.options.ecmaVersion >= 12) {
                  if (this.input.charCodeAt(this.pos + 2) === 61) {
                    return this.finishOp(_0x47ea38.assign, 3);
                  }
                }
                return this.finishOp(_0x221345 === 124 ? _0x47ea38.logicalOR : _0x47ea38.logicalAND, 2);
              }
              if (_0x510ff9 === 61) {
                return this.finishOp(_0x47ea38.assign, 2);
              } else {
                return this.finishOp(_0x221345 === 124 ? _0x47ea38.bitwiseOR : _0x47ea38.bitwiseAND, 1);
              }
            };
            _0x2931b1.readToken_caret = function () {
              if (this.input.charCodeAt(this.pos + 1) === 61) {
                return this.finishOp(_0x47ea38.assign, 2);
              } else {
                return this.finishOp(_0x47ea38.bitwiseXOR, 1);
              }
            };
            _0x2931b1.readToken_plus_min = function (_0x29279e) {
              var _0x5812db = this.input.charCodeAt(this.pos + 1);
              if (_0x5812db === _0x29279e) {
                if (_0x5812db !== 45 || this.inModule || this.input.charCodeAt(this.pos + 2) !== 62 || this.lastTokEnd !== 0 && !_0x1c21f2.test(this.input.slice(this.lastTokEnd, this.pos))) {
                  return this.finishOp(_0x47ea38.incDec, 2);
                } else {
                  this.skipLineComment(3);
                  this.skipSpace();
                  return this.nextToken();
                }
              } else if (_0x5812db === 61) {
                return this.finishOp(_0x47ea38.assign, 2);
              } else {
                return this.finishOp(_0x47ea38.plusMin, 1);
              }
            };
            _0x2931b1.readToken_lt_gt = function (_0x1d353a) {
              var _0x4d8ff0 = this.input.charCodeAt(this.pos + 1);
              var _0x745ee7 = 1;
              if (_0x4d8ff0 === _0x1d353a) {
                _0x745ee7 = _0x1d353a === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
                if (this.input.charCodeAt(this.pos + _0x745ee7) === 61) {
                  return this.finishOp(_0x47ea38.assign, _0x745ee7 + 1);
                } else {
                  return this.finishOp(_0x47ea38.bitShift, _0x745ee7);
                }
              } else if (_0x4d8ff0 !== 33 || _0x1d353a !== 60 || this.inModule || this.input.charCodeAt(this.pos + 2) !== 45 || this.input.charCodeAt(this.pos + 3) !== 45) {
                if (_0x4d8ff0 === 61) {
                  _0x745ee7 = 2;
                }
                return this.finishOp(_0x47ea38.relational, _0x745ee7);
              } else {
                this.skipLineComment(4);
                this.skipSpace();
                return this.nextToken();
              }
            };
            _0x2931b1.readToken_eq_excl = function (_0x3bb4cb) {
              var _0x1a83e5 = this.input.charCodeAt(this.pos + 1);
              if (_0x1a83e5 === 61) {
                return this.finishOp(_0x47ea38.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
              } else if (_0x3bb4cb === 61 && _0x1a83e5 === 62 && this.options.ecmaVersion >= 6) {
                this.pos += 2;
                return this.finishToken(_0x47ea38.arrow);
              } else {
                return this.finishOp(_0x3bb4cb === 61 ? _0x47ea38.eq : _0x47ea38.prefix, 1);
              }
            };
            _0x2931b1.readToken_question = function () {
              var _0x2b7018 = this.options.ecmaVersion;
              if (_0x2b7018 >= 11) {
                var _0x4bbb03 = this.input.charCodeAt(this.pos + 1);
                if (_0x4bbb03 === 46) {
                  var _0x557a6a = this.input.charCodeAt(this.pos + 2);
                  if (_0x557a6a < 48 || _0x557a6a > 57) {
                    return this.finishOp(_0x47ea38.questionDot, 2);
                  }
                }
                if (_0x4bbb03 === 63) {
                  if (_0x2b7018 >= 12) {
                    if (this.input.charCodeAt(this.pos + 2) === 61) {
                      return this.finishOp(_0x47ea38.assign, 3);
                    }
                  }
                  return this.finishOp(_0x47ea38.coalesce, 2);
                }
              }
              return this.finishOp(_0x47ea38.question, 1);
            };
            _0x2931b1.readToken_numberSign = function () {
              var _0x408c3f = 35;
              if (this.options.ecmaVersion >= 13 && (++this.pos, _0x32cd9a(_0x408c3f = this.fullCharCodeAtPos(), true) || _0x408c3f === 92)) {
                return this.finishToken(_0x47ea38.privateId, this.readWord1());
              }
              this.raise(this.pos, "Unexpected character '" + _0x3c0735(_0x408c3f) + "'");
            };
            _0x2931b1.getTokenFromCode = function (_0x4081e9) {
              switch (_0x4081e9) {
                case 46:
                  return this.readToken_dot();
                case 40:
                  ++this.pos;
                  return this.finishToken(_0x47ea38.parenL);
                case 41:
                  ++this.pos;
                  return this.finishToken(_0x47ea38.parenR);
                case 59:
                  ++this.pos;
                  return this.finishToken(_0x47ea38.semi);
                case 44:
                  ++this.pos;
                  return this.finishToken(_0x47ea38.comma);
                case 91:
                  ++this.pos;
                  return this.finishToken(_0x47ea38.bracketL);
                case 93:
                  ++this.pos;
                  return this.finishToken(_0x47ea38.bracketR);
                case 123:
                  ++this.pos;
                  return this.finishToken(_0x47ea38.braceL);
                case 125:
                  ++this.pos;
                  return this.finishToken(_0x47ea38.braceR);
                case 58:
                  ++this.pos;
                  return this.finishToken(_0x47ea38.colon);
                case 96:
                  if (this.options.ecmaVersion < 6) {
                    break;
                  }
                  ++this.pos;
                  return this.finishToken(_0x47ea38.backQuote);
                case 48:
                  var _0x27f1ab = this.input.charCodeAt(this.pos + 1);
                  if (_0x27f1ab === 120 || _0x27f1ab === 88) {
                    return this.readRadixNumber(16);
                  }
                  if (this.options.ecmaVersion >= 6) {
                    if (_0x27f1ab === 111 || _0x27f1ab === 79) {
                      return this.readRadixNumber(8);
                    }
                    if (_0x27f1ab === 98 || _0x27f1ab === 66) {
                      return this.readRadixNumber(2);
                    }
                  }
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                  return this.readNumber(false);
                case 34:
                case 39:
                  return this.readString(_0x4081e9);
                case 47:
                  return this.readToken_slash();
                case 37:
                case 42:
                  return this.readToken_mult_modulo_exp(_0x4081e9);
                case 124:
                case 38:
                  return this.readToken_pipe_amp(_0x4081e9);
                case 94:
                  return this.readToken_caret();
                case 43:
                case 45:
                  return this.readToken_plus_min(_0x4081e9);
                case 60:
                case 62:
                  return this.readToken_lt_gt(_0x4081e9);
                case 61:
                case 33:
                  return this.readToken_eq_excl(_0x4081e9);
                case 63:
                  return this.readToken_question();
                case 126:
                  return this.finishOp(_0x47ea38.prefix, 1);
                case 35:
                  return this.readToken_numberSign();
              }
              this.raise(this.pos, "Unexpected character '" + _0x3c0735(_0x4081e9) + "'");
            };
            _0x2931b1.finishOp = function (_0x55b197, _0x44c7e5) {
              var _0xb60fdd = this.input.slice(this.pos, this.pos + _0x44c7e5);
              this.pos += _0x44c7e5;
              return this.finishToken(_0x55b197, _0xb60fdd);
            };
            _0x2931b1.readRegexp = function () {
              var _0x8912fe;
              var _0x914316;
              var _0x5b968f = this.pos;
              for (;;) {
                if (this.pos >= this.input.length) {
                  this.raise(_0x5b968f, "Unterminated regular expression");
                }
                var _0xec9807 = this.input.charAt(this.pos);
                if (_0x1c21f2.test(_0xec9807)) {
                  this.raise(_0x5b968f, "Unterminated regular expression");
                }
                if (_0x8912fe) {
                  _0x8912fe = false;
                } else {
                  if (_0xec9807 === "[") {
                    _0x914316 = true;
                  } else if (_0xec9807 === "]" && _0x914316) {
                    _0x914316 = false;
                  } else if (_0xec9807 === "/" && !_0x914316) {
                    break;
                  }
                  _0x8912fe = _0xec9807 === "\\";
                }
                ++this.pos;
              }
              var _0x280afd = this.input.slice(_0x5b968f, this.pos);
              ++this.pos;
              var _0x4982cd = this.pos;
              var _0xaf602a = this.readWord1();
              if (this.containsEsc) {
                this.unexpected(_0x4982cd);
              }
              var _0x211087 = this.regexpState || (this.regexpState = new _0x3e4c9a(this));
              _0x211087.reset(_0x5b968f, _0x280afd, _0xaf602a);
              this.validateRegExpFlags(_0x211087);
              this.validateRegExpPattern(_0x211087);
              var _0x4ced88 = null;
              try {
                _0x4ced88 = new RegExp(_0x280afd, _0xaf602a);
              } catch (_0x5481ea) {}
              return this.finishToken(_0x47ea38.regexp, {
                pattern: _0x280afd,
                flags: _0xaf602a,
                value: _0x4ced88
              });
            };
            _0x2931b1.readInt = function (_0x5d47d9, _0x5c1244, _0x371f8e) {
              for (var _0x1725a9 = this.options.ecmaVersion >= 12 && _0x5c1244 === undefined, _0x261842 = _0x371f8e && this.input.charCodeAt(this.pos) === 48, _0x494aa4 = this.pos, _0x856c3 = 0, _0x44f39f = 0, _0x5d60dc = 0, _0x4731cd = _0x5c1244 == null ? Infinity : _0x5c1244; _0x5d60dc < _0x4731cd; ++_0x5d60dc, ++this.pos) {
                var _0x5e5905 = this.input.charCodeAt(this.pos);
                var _0x35ef67 = undefined;
                if (_0x1725a9 && _0x5e5905 === 95) {
                  if (_0x261842) {
                    this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals");
                  }
                  if (_0x44f39f === 95) {
                    this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore");
                  }
                  if (_0x5d60dc === 0) {
                    this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits");
                  }
                  _0x44f39f = _0x5e5905;
                } else {
                  if ((_0x35ef67 = _0x5e5905 >= 97 ? _0x5e5905 - 97 + 10 : _0x5e5905 >= 65 ? _0x5e5905 - 65 + 10 : _0x5e5905 >= 48 && _0x5e5905 <= 57 ? _0x5e5905 - 48 : Infinity) >= _0x5d47d9) {
                    break;
                  }
                  _0x44f39f = _0x5e5905;
                  _0x856c3 = _0x856c3 * _0x5d47d9 + _0x35ef67;
                }
              }
              if (_0x1725a9 && _0x44f39f === 95) {
                this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits");
              }
              if (this.pos === _0x494aa4 || _0x5c1244 != null && this.pos - _0x494aa4 !== _0x5c1244) {
                return null;
              } else {
                return _0x856c3;
              }
            };
            _0x2931b1.readRadixNumber = function (_0x57ce8f) {
              var _0x4ed8c9 = this.pos;
              this.pos += 2;
              var _0x4bba43 = this.readInt(_0x57ce8f);
              if (_0x4bba43 == null) {
                this.raise(this.start + 2, "Expected number in radix " + _0x57ce8f);
              }
              if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
                _0x4bba43 = _0x57ad7f(this.input.slice(_0x4ed8c9, this.pos));
                ++this.pos;
              } else if (_0x32cd9a(this.fullCharCodeAtPos())) {
                this.raise(this.pos, "Identifier directly after number");
              }
              return this.finishToken(_0x47ea38.num, _0x4bba43);
            };
            _0x2931b1.readNumber = function (_0x4c89fc) {
              var _0x5aba0f = this.pos;
              if (!(_0x4c89fc || this.readInt(10, undefined, true) !== null)) {
                this.raise(_0x5aba0f, "Invalid number");
              }
              var _0x2888dc = this.pos - _0x5aba0f >= 2 && this.input.charCodeAt(_0x5aba0f) === 48;
              if (_0x2888dc && this.strict) {
                this.raise(_0x5aba0f, "Invalid number");
              }
              var _0x4619ef = this.input.charCodeAt(this.pos);
              if (!_0x2888dc && !_0x4c89fc && this.options.ecmaVersion >= 11 && _0x4619ef === 110) {
                var _0x3fedf5 = _0x57ad7f(this.input.slice(_0x5aba0f, this.pos));
                ++this.pos;
                if (_0x32cd9a(this.fullCharCodeAtPos())) {
                  this.raise(this.pos, "Identifier directly after number");
                }
                return this.finishToken(_0x47ea38.num, _0x3fedf5);
              }
              if (_0x2888dc && /[89]/.test(this.input.slice(_0x5aba0f, this.pos))) {
                _0x2888dc = false;
              }
              if (!(_0x4619ef !== 46 || _0x2888dc)) {
                ++this.pos;
                this.readInt(10);
                _0x4619ef = this.input.charCodeAt(this.pos);
              }
              if (!(_0x4619ef !== 69 && _0x4619ef !== 101 || _0x2888dc)) {
                if (!((_0x4619ef = this.input.charCodeAt(++this.pos)) !== 43 && _0x4619ef !== 45)) {
                  ++this.pos;
                }
                if (this.readInt(10) === null) {
                  this.raise(_0x5aba0f, "Invalid number");
                }
              }
              if (_0x32cd9a(this.fullCharCodeAtPos())) {
                this.raise(this.pos, "Identifier directly after number");
              }
              var _0x19940a = function (_0x123de4, _0x2df6fc) {
                if (_0x2df6fc) {
                  return parseInt(_0x123de4, 8);
                } else {
                  return parseFloat(_0x123de4.replace(/_/g, ""));
                }
              }(this.input.slice(_0x5aba0f, this.pos), _0x2888dc);
              return this.finishToken(_0x47ea38.num, _0x19940a);
            };
            _0x2931b1.readCodePoint = function () {
              var _0x51f4b4;
              if (this.input.charCodeAt(this.pos) === 123) {
                if (this.options.ecmaVersion < 6) {
                  this.unexpected();
                }
                var _0x569a1b = ++this.pos;
                _0x51f4b4 = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
                ++this.pos;
                if (_0x51f4b4 > 1114111) {
                  this.invalidStringToken(_0x569a1b, "Code point out of bounds");
                }
              } else {
                _0x51f4b4 = this.readHexChar(4);
              }
              return _0x51f4b4;
            };
            _0x2931b1.readString = function (_0x2a707e) {
              var _0x1d501f = "";
              var _0x3402c8 = ++this.pos;
              for (;;) {
                if (this.pos >= this.input.length) {
                  this.raise(this.start, "Unterminated string constant");
                }
                var _0xc68a76 = this.input.charCodeAt(this.pos);
                if (_0xc68a76 === _0x2a707e) {
                  break;
                }
                if (_0xc68a76 === 92) {
                  _0x1d501f += this.input.slice(_0x3402c8, this.pos);
                  _0x1d501f += this.readEscapedChar(false);
                  _0x3402c8 = this.pos;
                } else if (_0xc68a76 === 8232 || _0xc68a76 === 8233) {
                  if (this.options.ecmaVersion < 10) {
                    this.raise(this.start, "Unterminated string constant");
                  }
                  ++this.pos;
                  if (this.options.locations) {
                    this.curLine++;
                    this.lineStart = this.pos;
                  }
                } else {
                  if (_0x47ac09(_0xc68a76)) {
                    this.raise(this.start, "Unterminated string constant");
                  }
                  ++this.pos;
                }
              }
              _0x1d501f += this.input.slice(_0x3402c8, this.pos++);
              return this.finishToken(_0x47ea38.string, _0x1d501f);
            };
            var _0x133a14 = {};
            _0x2931b1.tryReadTemplateToken = function () {
              this.inTemplateElement = true;
              try {
                this.readTmplToken();
              } catch (_0x35e03a) {
                if (_0x35e03a !== _0x133a14) {
                  throw _0x35e03a;
                }
                this.readInvalidTemplateToken();
              }
              this.inTemplateElement = false;
            };
            _0x2931b1.invalidStringToken = function (_0x5355b9, _0x44ce02) {
              if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
                throw _0x133a14;
              }
              this.raise(_0x5355b9, _0x44ce02);
            };
            _0x2931b1.readTmplToken = function () {
              var _0x1ae54d = "";
              var _0x329d63 = this.pos;
              for (;;) {
                if (this.pos >= this.input.length) {
                  this.raise(this.start, "Unterminated template");
                }
                var _0x47ccf3 = this.input.charCodeAt(this.pos);
                if (_0x47ccf3 === 96 || _0x47ccf3 === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
                  if (this.pos !== this.start || this.type !== _0x47ea38.template && this.type !== _0x47ea38.invalidTemplate) {
                    _0x1ae54d += this.input.slice(_0x329d63, this.pos);
                    return this.finishToken(_0x47ea38.template, _0x1ae54d);
                  } else if (_0x47ccf3 === 36) {
                    this.pos += 2;
                    return this.finishToken(_0x47ea38.dollarBraceL);
                  } else {
                    ++this.pos;
                    return this.finishToken(_0x47ea38.backQuote);
                  }
                }
                if (_0x47ccf3 === 92) {
                  _0x1ae54d += this.input.slice(_0x329d63, this.pos);
                  _0x1ae54d += this.readEscapedChar(true);
                  _0x329d63 = this.pos;
                } else if (_0x47ac09(_0x47ccf3)) {
                  _0x1ae54d += this.input.slice(_0x329d63, this.pos);
                  ++this.pos;
                  switch (_0x47ccf3) {
                    case 13:
                      if (this.input.charCodeAt(this.pos) === 10) {
                        ++this.pos;
                      }
                    case 10:
                      _0x1ae54d += "\n";
                      break;
                    default:
                      _0x1ae54d += String.fromCharCode(_0x47ccf3);
                  }
                  if (this.options.locations) {
                    ++this.curLine;
                    this.lineStart = this.pos;
                  }
                  _0x329d63 = this.pos;
                } else {
                  ++this.pos;
                }
              }
            };
            _0x2931b1.readInvalidTemplateToken = function () {
              for (; this.pos < this.input.length; this.pos++) {
                switch (this.input[this.pos]) {
                  case "\\":
                    ++this.pos;
                    break;
                  case "$":
                    if (this.input[this.pos + 1] !== "{") {
                      break;
                    }
                  case "`":
                    return this.finishToken(_0x47ea38.invalidTemplate, this.input.slice(this.start, this.pos));
                }
              }
              this.raise(this.start, "Unterminated template");
            };
            _0x2931b1.readEscapedChar = function (_0x5d3f68) {
              var _0x1002ad = this.input.charCodeAt(++this.pos);
              ++this.pos;
              switch (_0x1002ad) {
                case 110:
                  return "\n";
                case 114:
                  return "\r";
                case 120:
                  return String.fromCharCode(this.readHexChar(2));
                case 117:
                  return _0x3c0735(this.readCodePoint());
                case 116:
                  return "\t";
                case 98:
                  return "\b";
                case 118:
                  return "";
                case 102:
                  return "\f";
                case 13:
                  if (this.input.charCodeAt(this.pos) === 10) {
                    ++this.pos;
                  }
                case 10:
                  if (this.options.locations) {
                    this.lineStart = this.pos;
                    ++this.curLine;
                  }
                  return "";
                case 56:
                case 57:
                  if (this.strict) {
                    this.invalidStringToken(this.pos - 1, "Invalid escape sequence");
                  }
                  if (_0x5d3f68) {
                    var _0x21e755 = this.pos - 1;
                    this.invalidStringToken(_0x21e755, "Invalid escape sequence in template string");
                    return null;
                  }
                default:
                  if (_0x1002ad >= 48 && _0x1002ad <= 55) {
                    var _0x5b027c = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
                    var _0x1926f3 = parseInt(_0x5b027c, 8);
                    if (_0x1926f3 > 255) {
                      _0x5b027c = _0x5b027c.slice(0, -1);
                      _0x1926f3 = parseInt(_0x5b027c, 8);
                    }
                    this.pos += _0x5b027c.length - 1;
                    _0x1002ad = this.input.charCodeAt(this.pos);
                    if (!(_0x5b027c === "0" && _0x1002ad !== 56 && _0x1002ad !== 57 || !this.strict && !_0x5d3f68)) {
                      this.invalidStringToken(this.pos - 1 - _0x5b027c.length, _0x5d3f68 ? "Octal literal in template string" : "Octal literal in strict mode");
                    }
                    return String.fromCharCode(_0x1926f3);
                  }
                  if (_0x47ac09(_0x1002ad)) {
                    return "";
                  } else {
                    return String.fromCharCode(_0x1002ad);
                  }
              }
            };
            _0x2931b1.readHexChar = function (_0x2ded56) {
              var _0x30f05a = this.pos;
              var _0x3775b1 = this.readInt(16, _0x2ded56);
              if (_0x3775b1 === null) {
                this.invalidStringToken(_0x30f05a, "Bad character escape sequence");
              }
              return _0x3775b1;
            };
            _0x2931b1.readWord1 = function () {
              this.containsEsc = false;
              for (var _0x9dcb49 = "", _0x20e749 = true, _0x1e9e8c = this.pos, _0x48e5f8 = this.options.ecmaVersion >= 6; this.pos < this.input.length;) {
                var _0x58e6b0 = this.fullCharCodeAtPos();
                if (_0x5942d0(_0x58e6b0, _0x48e5f8)) {
                  this.pos += _0x58e6b0 <= 65535 ? 1 : 2;
                } else {
                  if (_0x58e6b0 !== 92) {
                    break;
                  }
                  this.containsEsc = true;
                  _0x9dcb49 += this.input.slice(_0x1e9e8c, this.pos);
                  var _0x573949 = this.pos;
                  if (this.input.charCodeAt(++this.pos) !== 117) {
                    this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
                  }
                  ++this.pos;
                  var _0x32cae0 = this.readCodePoint();
                  if (!(_0x20e749 ? _0x32cd9a : _0x5942d0)(_0x32cae0, _0x48e5f8)) {
                    this.invalidStringToken(_0x573949, "Invalid Unicode escape");
                  }
                  _0x9dcb49 += _0x3c0735(_0x32cae0);
                  _0x1e9e8c = this.pos;
                }
                _0x20e749 = false;
              }
              return _0x9dcb49 + this.input.slice(_0x1e9e8c, this.pos);
            };
            _0x2931b1.readWord = function () {
              var _0x6b136b = this.readWord1();
              var _0x3600ba = _0x47ea38.name;
              if (this.keywords.test(_0x6b136b)) {
                _0x3600ba = _0x3cc7af[_0x6b136b];
              }
              return this.finishToken(_0x3600ba, _0x6b136b);
            };
            var _0x388f2d = "8.7.0";
            _0x504270.acorn = {
              Parser: _0x504270,
              version: _0x388f2d,
              defaultOptions: _0x5e37ae,
              Position: _0x1d26ea,
              SourceLocation: _0x36faf2,
              getLineInfo: _0x35e77b,
              Node: _0x344284,
              TokenType: _0x1ad360,
              tokTypes: _0x47ea38,
              keywordTypes: _0x3cc7af,
              TokContext: _0x4c9032,
              tokContexts: _0x292dad,
              isIdentifierChar: _0x5942d0,
              isIdentifierStart: _0x32cd9a,
              Token: _0x343820,
              isNewLine: _0x47ac09,
              lineBreak: _0x1c21f2,
              lineBreakG: _0x45e5fc,
              nonASCIIwhitespace: _0x38be38
            };
            _0x271458.Node = _0x344284;
            _0x271458.Parser = _0x504270;
            _0x271458.Position = _0x1d26ea;
            _0x271458.SourceLocation = _0x36faf2;
            _0x271458.TokContext = _0x4c9032;
            _0x271458.Token = _0x343820;
            _0x271458.TokenType = _0x1ad360;
            _0x271458.defaultOptions = _0x5e37ae;
            _0x271458.getLineInfo = _0x35e77b;
            _0x271458.isIdentifierChar = _0x5942d0;
            _0x271458.isIdentifierStart = _0x32cd9a;
            _0x271458.isNewLine = _0x47ac09;
            _0x271458.keywordTypes = _0x3cc7af;
            _0x271458.lineBreak = _0x1c21f2;
            _0x271458.lineBreakG = _0x45e5fc;
            _0x271458.nonASCIIwhitespace = _0x38be38;
            _0x271458.parse = function (_0x14deab, _0x9172ef) {
              return _0x504270.parse(_0x14deab, _0x9172ef);
            };
            _0x271458.parseExpressionAt = function (_0x53a769, _0xffee17, _0x21f74c) {
              return _0x504270.parseExpressionAt(_0x53a769, _0xffee17, _0x21f74c);
            };
            _0x271458.tokContexts = _0x292dad;
            _0x271458.tokTypes = _0x47ea38;
            _0x271458.tokenizer = function (_0x212479, _0x43aeba) {
              return _0x504270.tokenizer(_0x212479, _0x43aeba);
            };
            _0x271458.version = _0x388f2d;
            Object.defineProperty(_0x271458, "__esModule", {
              value: true
            });
          })(_0x12275c);
        },
        9669: (_0x4c7452, _0x5df612, _0x262787) => {
          _0x4c7452.exports = _0x262787(1609);
        },
        5448: (_0x4b55e3, _0x3a63b6, _0x1ad77c) => {
          'got it';
  
          var _0xf7096c = _0x1ad77c(4867);
          var _0x5dcb9e = _0x1ad77c(6026);
          var _0x46479d = _0x1ad77c(4372);
          var _0x58a0a5 = _0x1ad77c(5327);
          var _0x416a69 = _0x1ad77c(4097);
          var _0x3588fb = _0x1ad77c(4109);
          var _0xf56914 = _0x1ad77c(7985);
          var _0x352a88 = _0x1ad77c(5061);
          var _0x3beeda = _0x1ad77c(5655);
          var _0x23f04a = _0x1ad77c(5263);
          _0x4b55e3.exports = function (_0x4c89e3) {
            return new Promise(function (_0x3706c3, _0x4ca4d2) {
              var _0x5738da;
              var _0x1a4683 = _0x4c89e3.data;
              var _0x521f8b = _0x4c89e3.headers;
              var _0x27e123 = _0x4c89e3.responseType;
              function _0x2ca238() {
                if (_0x4c89e3.cancelToken) {
                  _0x4c89e3.cancelToken.unsubscribe(_0x5738da);
                }
                if (_0x4c89e3.signal) {
                  _0x4c89e3.signal.removeEventListener("abort", _0x5738da);
                }
              }
              if (_0xf7096c.isFormData(_0x1a4683)) {
                delete _0x521f8b["Content-Type"];
              }
              var _0x4367f6;
              var _0xf96fbf = new XMLHttpRequest();
              if (_0x4c89e3.auth) {
                _0x4367f6 = _0x4c89e3.auth.username || "";
                _0x510702 = _0x4c89e3.auth.password ? unescape(encodeURIComponent(_0x4c89e3.auth.password)) : "";
                _0x521f8b.Authorization = "Basic " + btoa(_0x4367f6 + ":" + _0x510702);
              }
              var _0x510702 = _0x416a69(_0x4c89e3.baseURL, _0x4c89e3.url);
              function _0x9744df() {
                var _0x4a1444;
                if (_0xf96fbf) {
                  _0x4a1444 = "getAllResponseHeaders" in _0xf96fbf ? _0x3588fb(_0xf96fbf.getAllResponseHeaders()) : null;
                  _0x4a1444 = {
                    data: _0x27e123 && _0x27e123 !== "text" && _0x27e123 !== "json" ? _0xf96fbf.response : _0xf96fbf.responseText,
                    status: _0xf96fbf.status,
                    statusText: _0xf96fbf.statusText,
                    headers: _0x4a1444,
                    config: _0x4c89e3,
                    request: _0xf96fbf
                  };
                  _0x5dcb9e(function (_0x2b29e8) {
                    _0x3706c3(_0x2b29e8);
                  }, function (_0x2b8d45) {
                    _0x3706c3(_0x2b8d45);
                  }, _0x4a1444);
                  _0xf96fbf = null;
                }
              }
              _0xf96fbf.open(_0x4c89e3.method.toUpperCase(), _0x58a0a5(_0x510702, _0x4c89e3.params, _0x4c89e3.paramsSerializer), true);
              _0xf96fbf.timeout = _0x4c89e3.timeout;
              if ("onloadend" in _0xf96fbf) {
                _0xf96fbf.onloadend = _0x9744df;
              } else {
                _0xf96fbf.onreadystatechange = function () {
                  if (_0xf96fbf && _0xf96fbf.readyState === 4 && (_0xf96fbf.status !== 0 || _0xf96fbf.responseURL && _0xf96fbf.responseURL.indexOf("file:") === 0)) {
                    // TOLOOK
                    setTimeout(_0x9744df);
                  }
                };
              }
              _0xf96fbf.onabort = function () {
                if (_0xf96fbf) {
                  _0x4ca4d2(_0x352a88("Request aborted", _0x4c89e3, "ECONNABORTED", _0xf96fbf));
                  _0xf96fbf = null;
                }
              };
              _0xf96fbf.onerror = function () {
                _0x4ca4d2(_0x352a88("Network Error", _0x4c89e3, null, _0xf96fbf));
                _0xf96fbf = null;
              };
              _0xf96fbf.ontimeout = function () {
                var _0xb7a53c = _0x4c89e3.timeout ? "timeout of " + _0x4c89e3.timeout + "ms exceeded" : "timeout exceeded";
                var _0x585a31 = _0x4c89e3.transitional || _0x3beeda.transitional;
                if (_0x4c89e3.timeoutErrorMessage) {
                  _0xb7a53c = _0x4c89e3.timeoutErrorMessage;
                }
                _0x4ca4d2(_0x352a88(_0xb7a53c, _0x4c89e3, _0x585a31.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", _0xf96fbf));
                _0xf96fbf = null;
              };
              if (!!_0xf7096c.isStandardBrowserEnv()) {
                if (_0x510702 = (_0x4c89e3.withCredentials || _0xf56914(_0x510702)) && _0x4c89e3.xsrfCookieName ? _0x46479d.read(_0x4c89e3.xsrfCookieName) : undefined) {
                  _0x521f8b[_0x4c89e3.xsrfHeaderName] = _0x510702;
                }
              }
              if ("setRequestHeader" in _0xf96fbf) {
                _0xf7096c.forEach(_0x521f8b, function (_0x206872, _0xddacc9) {
                  if (_0x1a4683 === undefined && _0xddacc9.toLowerCase() === "content-type") {
                    delete _0x521f8b[_0xddacc9];
                  } else {
                    _0xf96fbf.setRequestHeader(_0xddacc9, _0x206872);
                  }
                });
              }
              if (!_0xf7096c.isUndefined(_0x4c89e3.withCredentials)) {
                _0xf96fbf.withCredentials = !!_0x4c89e3.withCredentials;
              }
              if (_0x27e123 && _0x27e123 !== "json") {
                _0xf96fbf.responseType = _0x4c89e3.responseType;
              }
              if (typeof _0x4c89e3.onDownloadProgress == "function") {
                _0xf96fbf.addEventListener("progress", _0x4c89e3.onDownloadProgress);
              }
              if (typeof _0x4c89e3.onUploadProgress == "function" && _0xf96fbf.upload) {
                _0xf96fbf.upload.addEventListener("progress", _0x4c89e3.onUploadProgress);
              }
              if (_0x4c89e3.cancelToken || _0x4c89e3.signal) {
                _0x5738da = function (_0x1f7063) {
                  if (_0xf96fbf) {
                    _0x4ca4d2(!_0x1f7063 || _0x1f7063.type ? new _0x23f04a("canceled") : _0x1f7063);
                    _0xf96fbf.abort();
                    _0xf96fbf = null;
                  }
                };
                if (_0x4c89e3.cancelToken) {
                  _0x4c89e3.cancelToken.subscribe(_0x5738da);
                }
                if (_0x4c89e3.signal) {
                  if (_0x4c89e3.signal.aborted) {
                    _0x5738da();
                  } else {
                    _0x4c89e3.signal.addEventListener("abort", _0x5738da);
                  }
                }
              }
              _0x1a4683 = _0x1a4683 || null;
              _0xf96fbf.send(_0x1a4683);
            });
          };
        },
        1609: (_0x53ec5d, _0x378531, _0x409e7b) => {
          'got it';
  
          var _0xde43f2 = _0x409e7b(4867);
          var _0x3a74d2 = _0x409e7b(1849);
          var _0x9a32d7 = _0x409e7b(321);
          var _0x393f76 = _0x409e7b(7185);
          var _0x26f3ed = function _0x9a062f(_0x2f8936) {
            var _0x5207e5 = new _0x9a32d7(_0x2f8936);
            var _0x51a35c = _0x3a74d2(_0x9a32d7.prototype.request, _0x5207e5);
            _0xde43f2.extend(_0x51a35c, _0x9a32d7.prototype, _0x5207e5);
            _0xde43f2.extend(_0x51a35c, _0x5207e5);
            _0x51a35c.create = function (_0x329dbe) {
              return _0x9a062f(_0x393f76(_0x2f8936, _0x329dbe));
            };
            return _0x51a35c;
          }(_0x409e7b(5655));
          _0x26f3ed.Axios = _0x9a32d7;
          _0x26f3ed.Cancel = _0x409e7b(5263);
          _0x26f3ed.CancelToken = _0x409e7b(4972);
          _0x26f3ed.isCancel = _0x409e7b(6502);
          _0x26f3ed.VERSION = _0x409e7b(7288).version;
          _0x26f3ed.all = function (_0x273076) {
            return Promise.all(_0x273076);
          };
          _0x26f3ed.spread = _0x409e7b(8713);
          _0x26f3ed.isAxiosError = _0x409e7b(6268);
          _0x53ec5d.exports = _0x26f3ed;
          _0x53ec5d.exports.default = _0x26f3ed;
        },
        5263: _0x12d18e => {
          'got it';
  
          function _0x28de79(_0x16d0a6) {
            this.message = _0x16d0a6;
          }
          _0x28de79.prototype.toString = function () {
            return "Cancel" + (this.message ? ": " + this.message : "");
          };
          _0x28de79.prototype.__CANCEL__ = true;
          _0x12d18e.exports = _0x28de79;
        },
        4972: (_0x3ff099, _0x2e1c0, _0x1cc75a) => {
          'got it';
  
          var _0x114234 = _0x1cc75a(5263);
          function _0x13b49f(_0x221043) {
            if (typeof _0x221043 != "function") {
              throw new TypeError(".......");
            }
            var _0x53f85f;
            this.promise = new Promise(function (_0x2bb861) {
              _0x53f85f = _0x2bb861;
            });
            var _0x1f8bfa = this;
            this.promise.then(function (_0x59cc57) {
              if (_0x1f8bfa._listeners) {
                for (var _0x3cc871 = _0x1f8bfa._listeners.length, _0x513177 = 0; _0x513177 < _0x3cc871; _0x513177++) {
                  _0x1f8bfa._listeners[_0x513177](_0x59cc57);
                }
                _0x1f8bfa._listeners = null;
              }
            });
            this.promise.then = function (_0x341020) {
              var _0x1b2048;
              (_0x341020 = new Promise(function (_0xd08ce9) {
                _0x1f8bfa.subscribe(_0xd08ce9);
                _0x1b2048 = _0xd08ce9;
              }).then(_0x341020)).cancel = function () {
                _0x1f8bfa.unsubscribe(_0x1b2048);
              };
              return _0x341020;
            };
            _0x221043(function (_0x310efa) {
              if (!_0x1f8bfa.reason) {
                _0x1f8bfa.reason = new _0x114234(_0x310efa);
                _0x53f85f(_0x1f8bfa.reason);
              }
            });
          }
          _0x13b49f.prototype.throwIfRequested = function () {
            if (this.reason) {
              throw this.reason;
            }
          };
          _0x13b49f.prototype.subscribe = function (_0x2ba23e) {
            if (this.reason) {
              _0x2ba23e(this.reason);
            } else if (this._listeners) {
              this._listeners.push(_0x2ba23e);
            } else {
              this._listeners = [_0x2ba23e];
            }
          };
          _0x13b49f.prototype.unsubscribe = function (_0x51c50b) {
            if (!!this._listeners) {
              if ((_0x51c50b = this._listeners.indexOf(_0x51c50b)) !== -1) {
                this._listeners.splice(_0x51c50b, 1);
              }
            }
          };
          _0x13b49f.source = function () {
            var _0x4a9547;
            return {
              token: new _0x13b49f(function (_0x39112b) {
                _0x4a9547 = _0x39112b;
              }),
              cancel: _0x4a9547
            };
          };
          _0x3ff099.exports = _0x13b49f;
        },
        6502: _0x567d53 => {
          'got it';
  
          _0x567d53.exports = function (_0x33663a) {
            return !(!_0x33663a || !_0x33663a.__CANCEL__);
          };
        },
        321: (_0x38bde8, _0x5cad01, _0x5d8a43) => {
          'got it';
  
          var _0x265524 = _0x5d8a43(4867);
          var _0x30abb4 = _0x5d8a43(5327);
          var _0xb7fafd = _0x5d8a43(782);
          var _0xbecbe8 = _0x5d8a43(3572);
          var _0x368da6 = _0x5d8a43(7185);
          var _0x1b65c9 = _0x5d8a43(4875);
          var _0xf3e635 = _0x1b65c9.validators;
          function _0x237917(_0x45fc42) {
            this.defaults = _0x45fc42;
            this.interceptors = {
              request: new _0xb7fafd(),
              response: new _0xb7fafd()
            };
          }
          _0x237917.prototype.request = function (_0xcfeb73) {
            if (typeof _0xcfeb73 == "string") {
              (_0xcfeb73 = arguments[1] || {}).url = arguments[0];
            } else {
              _0xcfeb73 = _0xcfeb73 || {};
            }
            if ((_0xcfeb73 = _0x368da6(this.defaults, _0xcfeb73)).method) {
              _0xcfeb73.method = _0xcfeb73.method.toLowerCase();
            } else if (this.defaults.method) {
              _0xcfeb73.method = this.defaults.method.toLowerCase();
            } else {
              _0xcfeb73.method = "get";
            }
            var _0x50df4e = _0xcfeb73.transitional;
            if (_0x50df4e !== undefined) {
              _0x1b65c9.assertOptions(_0x50df4e, {
                silentJSONParsing: _0xf3e635.transitional(_0xf3e635.boolean),
                forcedJSONParsing: _0xf3e635.transitional(_0xf3e635.boolean),
                clarifyTimeoutError: _0xf3e635.transitional(_0xf3e635.boolean)
              }, false);
            }
            var _0x3e6e2f = [];
            var _0x45eec9 = true;
            this.interceptors.request.forEach(function (_0x11dc5b) {
              if (!(typeof _0x11dc5b.runWhen == "function" && _0x11dc5b.runWhen(_0xcfeb73) === false)) {
                _0x45eec9 = _0x45eec9 && _0x11dc5b.synchronous;
                _0x3e6e2f.unshift(_0x11dc5b.fulfilled, _0x11dc5b.rejected);
              }
            });
            var _0x2665cb;
            var _0x57bfcb = [];
            this.interceptors.response.forEach(function (_0x3f8b16) {
              _0x57bfcb.push(_0x3f8b16.fulfilled, _0x3f8b16.rejected);
            });
            if (!_0x45eec9) {
              var _0x51e772 = [_0xbecbe8, undefined];
              Array.prototype.unshift.apply(_0x51e772, _0x3e6e2f);
              _0x51e772 = _0x51e772.concat(_0x57bfcb);
              _0x2665cb = Promise.resolve(_0xcfeb73);
              for (; _0x51e772.length;) {
                _0x2665cb = _0x2665cb.then(_0x51e772.shift(), _0x51e772.shift());
              }
              return _0x2665cb;
            }
            for (var _0x494d6a = _0xcfeb73; _0x3e6e2f.length;) {
              var _0x3ddd5e = _0x3e6e2f.shift();
              var _0x5ea5ba = _0x3e6e2f.shift();
              try {
                _0x494d6a = _0x3ddd5e(_0x494d6a);
              } catch (_0x5d1be2) {
                _0x5ea5ba(_0x5d1be2);
                break;
              }
            }
            try {
              _0x2665cb = _0xbecbe8(_0x494d6a);
            } catch (_0x3b1213) {
              return Promise.reject(_0x3b1213);
            }
            for (; _0x57bfcb.length;) {
              _0x2665cb = _0x2665cb.then(_0x57bfcb.shift(), _0x57bfcb.shift());
            }
            return _0x2665cb;
          };
          _0x237917.prototype.getUri = function (_0x58cb9d) {
            _0x58cb9d = _0x368da6(this.defaults, _0x58cb9d);
            return _0x30abb4(_0x58cb9d.url, _0x58cb9d.params, _0x58cb9d.paramsSerializer).replace(/^\?/, "");
          };
          _0x265524.forEach(["delete", "get", "head", "options"], function (_0x30cc3d) {
            _0x237917.prototype[_0x30cc3d] = function (_0x1b680d, _0x2617d3) {
              return this.request(_0x368da6(_0x2617d3 || {}, {
                method: _0x30cc3d,
                url: _0x1b680d,
                data: (_0x2617d3 || {}).data
              }));
            };
          });
          _0x265524.forEach(["post", "put", "patch"], function (_0x238adc) {
            _0x237917.prototype[_0x238adc] = function (_0x2291b7, _0x48a60c, _0x9869aa) {
              return this.request(_0x368da6(_0x9869aa || {}, {
                method: _0x238adc,
                url: _0x2291b7,
                data: _0x48a60c
              }));
            };
          });
          _0x38bde8.exports = _0x237917;
        },
        782: (_0xabd54a, _0x5849ce, _0x27a051) => {
          'got it';
  
          var _0x585a73 = _0x27a051(4867);
          function _0x520b2c() {
            this.handlers = [];
          }
          _0x520b2c.prototype.use = function (_0x4f4a3a, _0x4e3440, _0x28dde0) {
            this.handlers.push({
              fulfilled: _0x4f4a3a,
              rejected: _0x4e3440,
              synchronous: !!_0x28dde0 && _0x28dde0.synchronous,
              runWhen: _0x28dde0 ? _0x28dde0.runWhen : null
            });
            return this.handlers.length - 1;
          };
          _0x520b2c.prototype.eject = function (_0x445f5e) {
            if (this.handlers[_0x445f5e]) {
              this.handlers[_0x445f5e] = null;
            }
          };
          _0x520b2c.prototype.forEach = function (_0x39f5a1) {
            _0x585a73.forEach(this.handlers, function (_0xa3b12b) {
              if (_0xa3b12b !== null) {
                _0x39f5a1(_0xa3b12b);
              }
            });
          };
          _0xabd54a.exports = _0x520b2c;
        },
        4097: (_0x2ecd64, _0x1d5f27, _0x2c8448) => {
          'got it';
  
          var _0x460125 = _0x2c8448(1793);
          var _0x547fa1 = _0x2c8448(7303);
          _0x2ecd64.exports = function (_0x108c50, _0x4084b9) {
            if (_0x108c50 && !_0x460125(_0x4084b9)) {
              return _0x547fa1(_0x108c50, _0x4084b9);
            } else {
              return _0x4084b9;
            }
          };
        },
        5061: (_0x28f0d1, _0x486c1d, _0x1fc17b) => {
          'got it';
  
          var _0x255154 = _0x1fc17b(481);
          _0x28f0d1.exports = function (_0x4d4456, _0xa37dd7, _0x31dd1c, _0x2013d1, _0x1cf1ce) {
            _0x4d4456 = new Error(_0x4d4456);
            return _0x255154(_0x4d4456, _0xa37dd7, _0x31dd1c, _0x2013d1, _0x1cf1ce);
          };
        },
        3572: (_0x1b36c8, _0xa3b547, _0x897871) => {
          'got it';
  
          var _0x394ce8 = _0x897871(4867);
          var _0x24b18d = _0x897871(8527);
          var _0x388655 = _0x897871(6502);
          var _0x4f9ffa = _0x897871(5655);
          var _0x151463 = _0x897871(5263);
          function _0x40d5dc(_0x376513) {
            if (_0x376513.cancelToken) {
              _0x376513.cancelToken.throwIfRequested();
            }
            if (_0x376513.signal && _0x376513.signal.aborted) {
              throw new _0x151463("canceled");
            }
          }
          _0x1b36c8.exports = function (_0x9e561b) {
            _0x40d5dc(_0x9e561b);
            _0x9e561b.headers = _0x9e561b.headers || {};
            _0x9e561b.data = _0x24b18d.call(_0x9e561b, _0x9e561b.data, _0x9e561b.headers, _0x9e561b.transformRequest);
            _0x9e561b.headers = _0x394ce8.merge(_0x9e561b.headers.common || {}, _0x9e561b.headers[_0x9e561b.method] || {}, _0x9e561b.headers);
            _0x394ce8.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function (_0x149024) {
              delete _0x9e561b.headers[_0x149024];
            });
            return (_0x9e561b.adapter || _0x4f9ffa.adapter)(_0x9e561b).then(function (_0x510dde) {
              _0x40d5dc(_0x9e561b);
              _0x510dde.data = _0x24b18d.call(_0x9e561b, _0x510dde.data, _0x510dde.headers, _0x9e561b.transformResponse);
              return _0x510dde;
            }, function (_0x2e754c) {
              if (!_0x388655(_0x2e754c)) {
                _0x40d5dc(_0x9e561b);
                if (_0x2e754c && _0x2e754c.response) {
                  _0x2e754c.response.data = _0x24b18d.call(_0x9e561b, _0x2e754c.response.data, _0x2e754c.response.headers, _0x9e561b.transformResponse);
                }
              }
              return Promise.reject(_0x2e754c);
            });
          };
        },
        481: _0x16fbc4 => {
          'got it';
  
          _0x16fbc4.exports = function (_0x3343d7, _0x187304, _0x1ba9f7, _0xaa5195, _0x135294) {
            _0x3343d7.config = _0x187304;
            if (_0x1ba9f7) {
              _0x3343d7.code = _0x1ba9f7;
            }
            _0x3343d7.request = _0xaa5195;
            _0x3343d7.response = _0x135294;
            _0x3343d7.isAxiosError = true;
            _0x3343d7.toJSON = function () {
              return {
                message: this.message,
                name: this.name,
                description: this.description,
                number: this.number,
                fileName: this.fileName,
                lineNumber: this.lineNumber,
                columnNumber: this.columnNumber,
                stack: this.stack,
                config: this.config,
                code: this.code,
                status: this.response && this.response.status ? this.response.status : null
              };
            };
            return _0x3343d7;
          };
        },
        7185: (_0x492477, _0x4ab544, _0x17902d) => {
          'got it';
  
          var _0x3bfca3 = _0x17902d(4867);
          _0x492477.exports = function (_0x28294a, _0x586cda) {
            _0x586cda = _0x586cda || {};
            var _0x5241cc = {};
            function _0x37882e(_0x31f3ca, _0x2099c5) {
              if (_0x3bfca3.isPlainObject(_0x31f3ca) && _0x3bfca3.isPlainObject(_0x2099c5)) {
                return _0x3bfca3.merge(_0x31f3ca, _0x2099c5);
              } else if (_0x3bfca3.isPlainObject(_0x2099c5)) {
                return _0x3bfca3.merge({}, _0x2099c5);
              } else if (_0x3bfca3.isArray(_0x2099c5)) {
                return _0x2099c5.slice();
              } else {
                return _0x2099c5;
              }
            }
            function _0x22d70f(_0x464171) {
              if (_0x3bfca3.isUndefined(_0x586cda[_0x464171])) {
                if (_0x3bfca3.isUndefined(_0x28294a[_0x464171])) {
                  return undefined;
                } else {
                  return _0x37882e(undefined, _0x28294a[_0x464171]);
                }
              } else {
                return _0x37882e(_0x28294a[_0x464171], _0x586cda[_0x464171]);
              }
            }
            function _0xcdc879(_0x328044) {
              if (!_0x3bfca3.isUndefined(_0x586cda[_0x328044])) {
                return _0x37882e(undefined, _0x586cda[_0x328044]);
              }
            }
            function _0x44fd5f(_0x2ef1fa) {
              if (_0x3bfca3.isUndefined(_0x586cda[_0x2ef1fa])) {
                if (_0x3bfca3.isUndefined(_0x28294a[_0x2ef1fa])) {
                  return undefined;
                } else {
                  return _0x37882e(undefined, _0x28294a[_0x2ef1fa]);
                }
              } else {
                return _0x37882e(undefined, _0x586cda[_0x2ef1fa]);
              }
            }
            function _0x3ee96e(_0x25ae2d) {
              if (_0x25ae2d in _0x586cda) {
                return _0x37882e(_0x28294a[_0x25ae2d], _0x586cda[_0x25ae2d]);
              } else if (_0x25ae2d in _0x28294a) {
                return _0x37882e(undefined, _0x28294a[_0x25ae2d]);
              } else {
                return undefined;
              }
            }
            var _0x5029e0 = {
              url: _0xcdc879,
              method: _0xcdc879,
              data: _0xcdc879,
              baseURL: _0x44fd5f,
              transformRequest: _0x44fd5f,
              transformResponse: _0x44fd5f,
              paramsSerializer: _0x44fd5f,
              timeout: _0x44fd5f,
              timeoutMessage: _0x44fd5f,
              withCredentials: _0x44fd5f,
              adapter: _0x44fd5f,
              responseType: _0x44fd5f,
              xsrfCookieName: _0x44fd5f,
              xsrfHeaderName: _0x44fd5f,
              onUploadProgress: _0x44fd5f,
              onDownloadProgress: _0x44fd5f,
              decompress: _0x44fd5f,
              maxContentLength: _0x44fd5f,
              maxBodyLength: _0x44fd5f,
              transport: _0x44fd5f,
              httpAgent: _0x44fd5f,
              httpsAgent: _0x44fd5f,
              cancelToken: _0x44fd5f,
              socketPath: _0x44fd5f,
              responseEncoding: _0x44fd5f,
              validateStatus: _0x3ee96e
            };
            _0x3bfca3.forEach(Object.keys(_0x28294a).concat(Object.keys(_0x586cda)), function (_0x480d19) {
              var _0x560f88 = _0x5029e0[_0x480d19] || _0x22d70f;
              var _0x496620 = _0x560f88(_0x480d19);
              if (!(_0x3bfca3.isUndefined(_0x496620) && _0x560f88 !== _0x3ee96e)) {
                _0x5241cc[_0x480d19] = _0x496620;
              }
            });
            return _0x5241cc;
          };
        },
        6026: (_0x18e2cc, _0x2f0b3e, _0x1d4d3c) => {
          'got it';
  
          var _0x5023bb = _0x1d4d3c(5061);
          _0x18e2cc.exports = function (_0x192730, _0x50fe4d, _0x4fa82e) {
            var _0x4ee773 = _0x4fa82e.config.validateStatus;
            if (_0x4fa82e.status && _0x4ee773 && !_0x4ee773(_0x4fa82e.status)) {
              _0x50fe4d(_0x5023bb("Request failed with status code " + _0x4fa82e.status, _0x4fa82e.config, null, _0x4fa82e.request, _0x4fa82e));
            } else {
              _0x192730(_0x4fa82e);
            }
          };
        },
        8527: (_0x11b300, _0x38a541, _0x2a690d) => {
          'got it';
  
          var _0x3c0624 = _0x2a690d(4867);
          var _0x38c17b = _0x2a690d(5655);
          _0x11b300.exports = function (_0x93e8b, _0x335c0f, _0x29faef) {
            var _0x586bd6 = this || _0x38c17b;
            _0x3c0624.forEach(_0x29faef, function (_0x297fca) {
              _0x93e8b = _0x297fca.call(_0x586bd6, _0x93e8b, _0x335c0f);
            });
            return _0x93e8b;
          };
        },
        5655: (_0x1f958f, _0x1afae5, _0x2ec0f6) => {
          'got it';
  
          var _0x11e8a6 = _0x2ec0f6(4867);
          var _0x89297 = _0x2ec0f6(6016);
          var _0x120ef5 = _0x2ec0f6(481);
          var _0x176762 = {
            "Content-Type": "application/x-www-form-urlencoded"
          };
          function _0x24ccc3(_0x9b6bcf, _0x7135d1) {
            if (!_0x11e8a6.isUndefined(_0x9b6bcf) && _0x11e8a6.isUndefined(_0x9b6bcf["Content-Type"])) {
              _0x9b6bcf["Content-Type"] = _0x7135d1;
            }
          }
          var _0xf47fc4;
          var _0x4a25bb = {
            transitional: {
              silentJSONParsing: true,
              forcedJSONParsing: true,
              clarifyTimeoutError: false
            },
            adapter: _0xf47fc4 = typeof XMLHttpRequest != "undefined" || typeof process != "undefined" && Object.prototype.toString.call(process) === "[object process]" ? _0x2ec0f6(5448) : _0xf47fc4,
            transformRequest: [function (_0x5d875c, _0x2f94e8) {
              _0x89297(_0x2f94e8, "Accept");
              _0x89297(_0x2f94e8, "Content-Type");
              if (_0x11e8a6.isFormData(_0x5d875c) || _0x11e8a6.isArrayBuffer(_0x5d875c) || _0x11e8a6.isBuffer(_0x5d875c) || _0x11e8a6.isStream(_0x5d875c) || _0x11e8a6.isFile(_0x5d875c) || _0x11e8a6.isBlob(_0x5d875c)) {
                return _0x5d875c;
              } else if (_0x11e8a6.isArrayBufferView(_0x5d875c)) {
                return _0x5d875c.buffer;
              } else if (_0x11e8a6.isURLSearchParams(_0x5d875c)) {
                _0x24ccc3(_0x2f94e8, "application/x-www-form-urlencoded;charset=utf-8");
                return _0x5d875c.toString();
              } else if (_0x11e8a6.isObject(_0x5d875c) || _0x2f94e8 && _0x2f94e8["Content-Type"] === "application/json") {
                _0x24ccc3(_0x2f94e8, "application/json");
                return function (_0x5402bc, _0x4e929c, _0x7f7706) {
                  if (_0x11e8a6.isString(_0x5402bc)) {
                    try {
                      (0, JSON.parse)(_0x5402bc);
                      return _0x11e8a6.trim(_0x5402bc);
                    } catch (_0x11cb90) {
                      if (_0x11cb90.name !== "SyntaxError") {
                        throw _0x11cb90;
                      }
                    }
                  }
                  return (0, JSON.stringify)(_0x5402bc);
                }(_0x5d875c);
              } else {
                return _0x5d875c;
              }
            }],
            transformResponse: [function (_0x3df60d) {
              var _0x430b66 = (_0x444437 = this.transitional || _0x4a25bb.transitional) && _0x444437.silentJSONParsing;
              var _0x444437 = _0x444437 && _0x444437.forcedJSONParsing;
              if ((_0x430b66 = !_0x430b66 && this.responseType === "json") || _0x444437 && _0x11e8a6.isString(_0x3df60d) && _0x3df60d.length) {
                try {
                  return JSON.parse(_0x3df60d);
                } catch (_0x2d8dcd) {
                  if (_0x430b66) {
                    if (_0x2d8dcd.name === "SyntaxError") {
                      throw _0x120ef5(_0x2d8dcd, this, "E_JSON_PARSE");
                    }
                    throw _0x2d8dcd;
                  }
                }
              }
              return _0x3df60d;
            }],
            timeout: 0,
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN",
            maxContentLength: -1,
            maxBodyLength: -1,
            validateStatus: function (_0x22846e) {
              return _0x22846e >= 200 && _0x22846e < 300;
            },
            headers: {
              common: {
                Accept: "application/json, text/plain, */*"
              }
            }
          };
          _0x11e8a6.forEach(["delete", "get", "head"], function (_0x2b045c) {
            _0x4a25bb.headers[_0x2b045c] = {};
          });
          _0x11e8a6.forEach(["post", "put", "patch"], function (_0x408b78) {
            _0x4a25bb.headers[_0x408b78] = _0x11e8a6.merge(_0x176762);
          });
          _0x1f958f.exports = _0x4a25bb;
        },
        7288: _0x1012cf => {
          _0x1012cf.exports = {
            version: "0.24.0"
          };
        },
        1849: _0x41fe25 => {
          'got it';
  
          _0x41fe25.exports = function (_0x4881b9, _0x5ecd5a) {
            return function () {
              for (var _0xc5be9b = new Array(arguments.length), _0x5b7e45 = 0; _0x5b7e45 < _0xc5be9b.length; _0x5b7e45++) {
                _0xc5be9b[_0x5b7e45] = arguments[_0x5b7e45];
              }
              return _0x4881b9.apply(_0x5ecd5a, _0xc5be9b);
            };
          };
        },
        5327: (_0x49da6c, _0x19e237, _0x3444e8) => {
          'got it';
  
          var _0x20cf14 = _0x3444e8(4867);
          function _0x3f198e(_0x58184f) {
            return encodeURIComponent(_0x58184f).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
          }
          _0x49da6c.exports = function (_0x1c131c, _0x123cec, _0x28138d) {
            if (!_0x123cec) {
              return _0x1c131c;
            }
            var _0x4d45d3;
            _0x28138d = _0x28138d ? _0x28138d(_0x123cec) : _0x20cf14.isURLSearchParams(_0x123cec) ? _0x123cec.toString() : (_0x4d45d3 = [], _0x20cf14.forEach(_0x123cec, function (_0x13cab1, _0x3193fe) {
              if (_0x13cab1 != null) {
                if (_0x20cf14.isArray(_0x13cab1)) {
                  _0x3193fe += "[]";
                } else {
                  _0x13cab1 = [_0x13cab1];
                }
                _0x20cf14.forEach(_0x13cab1, function (_0x16d5b1) {
                  if (_0x20cf14.isDate(_0x16d5b1)) {
                    _0x16d5b1 = _0x16d5b1.toISOString();
                  } else if (_0x20cf14.isObject(_0x16d5b1)) {
                    _0x16d5b1 = JSON.stringify(_0x16d5b1);
                  }
                  _0x4d45d3.push(_0x3f198e(_0x3193fe) + "=" + _0x3f198e(_0x16d5b1));
                });
              }
            }), _0x4d45d3.join("&"));
            if (_0x28138d) {
              if ((_0x123cec = _0x1c131c.indexOf("#")) !== -1) {
                _0x1c131c = _0x1c131c.slice(0, _0x123cec);
              }
              _0x1c131c += (_0x1c131c.indexOf("?") === -1 ? "?" : "&") + _0x28138d;
            }
            return _0x1c131c;
          };
        },
        7303: _0x379d14 => {
          'got it';
  
          _0x379d14.exports = function (_0x9621ea, _0x9452c6) {
            if (_0x9452c6) {
              return _0x9621ea.replace(/\/+$/, "") + "/" + _0x9452c6.replace(/^\/+/, "");
            } else {
              return _0x9621ea;
            }
          };
        },
        4372: (_0x55ae0f, _0x22aa55, _0x1a94a1) => {
          'got it';
  
          var _0x5e1fc7 = _0x1a94a1(4867);
          _0x55ae0f.exports = _0x5e1fc7.isStandardBrowserEnv() ? {
            write: function (_0xdcfc6a, _0x1c6f69, _0xe82c25, _0x3c0785, _0x5863a0, _0x3ef385) {
              var _0x1fab1d = [];
              _0x1fab1d.push(_0xdcfc6a + "=" + encodeURIComponent(_0x1c6f69));
              if (_0x5e1fc7.isNumber(_0xe82c25)) {
                _0x1fab1d.push("expires=" + new Date(_0xe82c25).toGMTString());
              }
              if (_0x5e1fc7.isString(_0x3c0785)) {
                _0x1fab1d.push("path=" + _0x3c0785);
              }
              if (_0x5e1fc7.isString(_0x5863a0)) {
                _0x1fab1d.push("domain=" + _0x5863a0);
              }
              if (_0x3ef385 === true) {
                _0x1fab1d.push("secure");
              }
              document.cookie = _0x1fab1d.join("; ");
            },
            read: function (_0x1434c8) {
              if (_0x1434c8 = document.cookie.match(new RegExp("(^|;\\s*)(" + _0x1434c8 + ")=([^;]*)"))) {
                return decodeURIComponent(_0x1434c8[3]);
              } else {
                return null;
              }
            },
            remove: function (_0x21c513) {
              this.write(_0x21c513, "", Date.now() - 86400000);
            }
          } : {
            write: function () {},
            read: function () {
              return null;
            },
            remove: function () {}
          };
        },
        1793: _0x2bf6d1 => {
          'got it';
  
          _0x2bf6d1.exports = function (_0x55bcf5) {
            return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(_0x55bcf5);
          };
        },
        6268: _0xd83389 => {
          'got it';
  
          _0xd83389.exports = function (_0x132ac0) {
            return typeof _0x132ac0 == "object" && _0x132ac0.isAxiosError === true;
          };
        },
        7985: (_0x2123f4, _0x5b1b32, _0x27ac9c) => {
          'got it';
  
          var _0x1f0e33;
          var _0x240eac;
          var _0x37c287;
          var _0x571699 = _0x27ac9c(4867);
          function _0x8ea706(_0x26d7e7) {
            if (_0x240eac) {
              _0x37c287.setAttribute("href", _0x26d7e7);
              _0x26d7e7 = _0x37c287.href;
            }
            _0x37c287.setAttribute("href", _0x26d7e7);
            return {
              href: _0x37c287.href,
              protocol: _0x37c287.protocol ? _0x37c287.protocol.replace(/:$/, "") : "",
              host: _0x37c287.host,
              search: _0x37c287.search ? _0x37c287.search.replace(/^\?/, "") : "",
              hash: _0x37c287.hash ? _0x37c287.hash.replace(/^#/, "") : "",
              hostname: _0x37c287.hostname,
              port: _0x37c287.port,
              pathname: _0x37c287.pathname.charAt(0) === "/" ? _0x37c287.pathname : "/" + _0x37c287.pathname
            };
          }
          _0x2123f4.exports = _0x571699.isStandardBrowserEnv() ? (_0x240eac = /(msie|trident)/i.test(navigator.userAgent), _0x37c287 = document.createElement("a"), _0x1f0e33 = _0x8ea706(window.location.href), function (_0x23b889) {
            return (_0x23b889 = _0x571699.isString(_0x23b889) ? _0x8ea706(_0x23b889) : _0x23b889).protocol === _0x1f0e33.protocol && _0x23b889.host === _0x1f0e33.host;
          }) : function () {
            return true;
          };
        },
        6016: (_0x5f5a9b, _0x36fcca, _0xf9629d) => {
          'got it';
  
          var _0x450762 = _0xf9629d(4867);
          _0x5f5a9b.exports = function (_0x2750ff, _0x469470) {
            _0x450762.forEach(_0x2750ff, function (_0x5c9c58, _0x43ff12) {
              if (_0x43ff12 !== _0x469470 && _0x43ff12.toUpperCase() === _0x469470.toUpperCase()) {
                _0x2750ff[_0x469470] = _0x5c9c58;
                delete _0x2750ff[_0x43ff12];
              }
            });
          };
        },
        4109: (_0x207694, _0xadb0be, _0x463531) => {
          'got it';
  
          var _0x34bd09 = _0x463531(4867);
          var _0x395bc1 = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];
          _0x207694.exports = function (_0x59943f) {
            var _0x7d1f16;
            var _0x2f23e2;
            var _0x149496 = {};
            if (_0x59943f) {
              _0x34bd09.forEach(_0x59943f.split("\n"), function (_0x48bf2c) {
                _0x2f23e2 = _0x48bf2c.indexOf(":");
                _0x7d1f16 = _0x34bd09.trim(_0x48bf2c.substr(0, _0x2f23e2)).toLowerCase();
                _0x2f23e2 = _0x34bd09.trim(_0x48bf2c.substr(_0x2f23e2 + 1));
                if (_0x7d1f16) {
                  if (!(_0x149496[_0x7d1f16] && _0x395bc1.indexOf(_0x7d1f16) >= 0)) {
                    _0x149496[_0x7d1f16] = _0x7d1f16 === "set-cookie" ? (_0x149496[_0x7d1f16] || []).concat([_0x2f23e2]) : _0x149496[_0x7d1f16] ? _0x149496[_0x7d1f16] + ", " + _0x2f23e2 : _0x2f23e2;
                  }
                }
              });
            }
            return _0x149496;
          };
        },
        8713: _0xe03c9a => {
          'got it';
  
          _0xe03c9a.exports = function (_0xb4b32) {
            return function (_0x394594) {
              return _0xb4b32.apply(null, _0x394594);
            };
          };
        },
        4875: (_0x5271e0, _0x425003, _0x1d5830) => {
          'got it';
  
          var _0x5b520d = _0x1d5830(7288).version;
          var _0xedba8a = {};
          ["object", "boolean", "number", "function", "string", "symbol"].forEach(function (_0x584ffd, _0x56f536) {
            _0xedba8a[_0x584ffd] = function (_0x3917de) {
              return typeof _0x3917de === _0x584ffd || "a" + (_0x56f536 < 1 ? "n " : " ") + _0x584ffd;
            };
          });
          var _0x2b75c8 = {};
          _0xedba8a.transitional = function (_0x2254d6, _0x1b7f67, _0x4703a6) {
            function _0x2ced02(_0x152d4e, _0x30423a) {
              return "[Axios v" + _0x5b520d + "] Transitional option '" + _0x152d4e + "'" + _0x30423a + (_0x4703a6 ? ". " + _0x4703a6 : "");
            }
            return function (_0x276dce, _0x54d40e, _0x465eb8) {
              if (_0x2254d6 === false) {
                throw new Error(_0x2ced02(_0x54d40e, " has been removed" + (_0x1b7f67 ? " in " + _0x1b7f67 : "")));
              }
              if (_0x1b7f67 && !_0x2b75c8[_0x54d40e]) {
                _0x2b75c8[_0x54d40e] = true;
              }
              return !_0x2254d6 || _0x2254d6(_0x276dce, _0x54d40e, _0x465eb8);
            };
          };
          _0x5271e0.exports = {
            assertOptions: function (_0x52dfee, _0x411c1f, _0x414c25) {
              if (typeof _0x52dfee != "object") {
                throw new TypeError(".......");
              }
              for (var _0x5509cc = Object.keys(_0x52dfee), _0x499029 = _0x5509cc.length; _0x499029-- > 0;) {
                var _0x53d757;
                var _0x1a51f2 = _0x5509cc[_0x499029];
                var _0x155975 = _0x411c1f[_0x1a51f2];
                if (_0x155975) {
                  if ((_0x53d757 = (_0x53d757 = _0x52dfee[_0x1a51f2]) === undefined || _0x155975(_0x53d757, _0x1a51f2, _0x52dfee)) !== true) {
                    throw new TypeError(".......");
                  }
                } else if (_0x414c25 !== true) {
                  throw Error(".......");
                }
              }
            },
            validators: _0xedba8a
          };
        },
        4867: (_0x483419, _0x56199f, _0xd3cb0) => {
          'got it';
  
          var _0x1ff3d9 = _0xd3cb0(1849);
          var _0x578fac = Object.prototype.toString;
          function _0x3291a6(_0x1d8522) {
            return _0x578fac.call(_0x1d8522) === "[object Array]";
          }
          function _0x48899d(_0x359f31) {
            return _0x359f31 === undefined;
          }
          function _0x1158d7(_0x129a01) {
            return _0x129a01 !== null && typeof _0x129a01 == "object";
          }
          function _0x3696e6(_0x38f9f4) {
            return _0x578fac.call(_0x38f9f4) === "[object Object]" && ((_0x38f9f4 = Object.getPrototypeOf(_0x38f9f4)) === null || _0x38f9f4 === Object.prototype);
          }
          function _0x1f1c59(_0x32d488) {
            return _0x578fac.call(_0x32d488) === "[object Function]";
          }
          function _0x54d139(_0x5050e3, _0x5ea9c8) {
            if (_0x5050e3 != null) {
              if (_0x3291a6(_0x5050e3 = typeof _0x5050e3 != "object" ? [_0x5050e3] : _0x5050e3)) {
                for (var _0x43f85b = 0, _0x245e1f = _0x5050e3.length; _0x43f85b < _0x245e1f; _0x43f85b++) {
                  _0x5ea9c8.call(null, _0x5050e3[_0x43f85b], _0x43f85b, _0x5050e3);
                }
              } else {
                for (var _0x16bf1c in _0x5050e3) {
                  if (Object.prototype.hasOwnProperty.call(_0x5050e3, _0x16bf1c)) {
                    _0x5ea9c8.call(null, _0x5050e3[_0x16bf1c], _0x16bf1c, _0x5050e3);
                  }
                }
              }
            }
          }
          _0x483419.exports = {
            isArray: _0x3291a6,
            isArrayBuffer: function (_0x4232a8) {
              return _0x578fac.call(_0x4232a8) === "[object ArrayBuffer]";
            },
            isBuffer: function (_0x43adb1) {
              return _0x43adb1 !== null && !_0x48899d(_0x43adb1) && _0x43adb1.constructor !== null && !_0x48899d(_0x43adb1.constructor) && typeof _0x43adb1.constructor.isBuffer == "function" && _0x43adb1.constructor.isBuffer(_0x43adb1);
            },
            isFormData: function (_0x1bca1e) {
              return typeof FormData != "undefined" && _0x1bca1e instanceof FormData;
            },
            isArrayBufferView: function (_0x1a023e) {
              if (typeof ArrayBuffer != "undefined" && ArrayBuffer.isView) {
                return ArrayBuffer.isView(_0x1a023e);
              } else {
                return _0x1a023e && _0x1a023e.buffer && _0x1a023e.buffer instanceof ArrayBuffer;
              }
            },
            isString: function (_0x4d221a) {
              return typeof _0x4d221a == "string";
            },
            isNumber: function (_0xdde227) {
              return typeof _0xdde227 == "number";
            },
            isObject: _0x1158d7,
            isPlainObject: _0x3696e6,
            isUndefined: _0x48899d,
            isDate: function (_0x4b2027) {
              return _0x578fac.call(_0x4b2027) === "[object Date]";
            },
            isFile: function (_0x3c8f9b) {
              return _0x578fac.call(_0x3c8f9b) === "[object File]";
            },
            isBlob: function (_0x3ce481) {
              return _0x578fac.call(_0x3ce481) === "[object Blob]";
            },
            isFunction: _0x1f1c59,
            isStream: function (_0x129069) {
              return _0x1158d7(_0x129069) && _0x1f1c59(_0x129069.pipe);
            },
            isURLSearchParams: function (_0x5ad869) {
              return typeof URLSearchParams != "undefined" && _0x5ad869 instanceof URLSearchParams;
            },
            isStandardBrowserEnv: function () {
              return (typeof navigator == "undefined" || navigator.product !== "ReactNative" && navigator.product !== "NativeScript" && navigator.product !== "NS") && typeof window != "undefined" && typeof document != "undefined";
            },
            forEach: _0x54d139,
            merge: function _0x583a4d() {
              var _0x19dc36 = {};
              function _0x3f4b7c(_0x360bc7, _0x115c13) {
                if (_0x3696e6(_0x19dc36[_0x115c13]) && _0x3696e6(_0x360bc7)) {
                  _0x19dc36[_0x115c13] = _0x583a4d(_0x19dc36[_0x115c13], _0x360bc7);
                } else if (_0x3696e6(_0x360bc7)) {
                  _0x19dc36[_0x115c13] = _0x583a4d({}, _0x360bc7);
                } else if (_0x3291a6(_0x360bc7)) {
                  _0x19dc36[_0x115c13] = _0x360bc7.slice();
                } else {
                  _0x19dc36[_0x115c13] = _0x360bc7;
                }
              }
              for (var _0x2e4f8e = 0, _0x4fef93 = arguments.length; _0x2e4f8e < _0x4fef93; _0x2e4f8e++) {
                _0x54d139(arguments[_0x2e4f8e], _0x3f4b7c);
              }
              return _0x19dc36;
            },
            extend: function (_0x185e1e, _0x5735d2, _0x5162fd) {
              _0x54d139(_0x5735d2, function (_0xfe623e, _0x30607f) {
                _0x185e1e[_0x30607f] = _0x5162fd && typeof _0xfe623e == "function" ? _0x1ff3d9(_0xfe623e, _0x5162fd) : _0xfe623e;
              });
              return _0x185e1e;
            },
            trim: function (_0x13b9a5) {
              if (_0x13b9a5.trim) {
                return _0x13b9a5.trim();
              } else {
                return _0x13b9a5.replace(/^\s+|\s+$/g, "");
              }
            },
            stripBOM: function (_0xc4765f) {
              if (_0xc4765f.charCodeAt(0) === 65279) {
                return _0xc4765f.slice(1);
              } else {
                return _0xc4765f;
              }
            }
          };
        },
        4043: (_0x148608, _0x1832ab, _0x211096) => {
          _0x148608.exports = {
            default: _0x211096(3404),
            __esModule: true
          };
        },
        6378: (_0x2bf003, _0x38a0fb, _0x5910c0) => {
          _0x2bf003.exports = {
            default: _0x5910c0(3597),
            __esModule: true
          };
        },
        863: (_0xca050b, _0x2b142a, _0x42c756) => {
          _0xca050b.exports = {
            default: _0x42c756(1035),
            __esModule: true
          };
        },
        2945: (_0x19861a, _0x5844a2, _0x7fdef2) => {
          _0x19861a.exports = {
            default: _0x7fdef2(6981),
            __esModule: true
          };
        },
        2242: (_0x5ec496, _0x33454a, _0x25bce2) => {
          _0x5ec496.exports = {
            default: _0x25bce2(3391),
            __esModule: true
          };
        },
        3516: (_0x8d9359, _0x365755, _0x474872) => {
          _0x8d9359.exports = {
            default: _0x474872(25),
            __esModule: true
          };
        },
        9663: (_0x57c272, _0x1fd586) => {
          'got it';
  
          _0x1fd586.__esModule = true;
          _0x1fd586.default = function (_0x153c56, _0x523892) {
            if (!(_0x153c56 instanceof _0x523892)) {
              throw new TypeError(".......");
            }
          };
        },
        2600: (_0x9fb505, _0x3862d2, _0x378643) => {
          'got it';
  
          _0x3862d2.__esModule = true;
          var _0x1ced26 = (_0x378643 = _0x378643 = _0x378643(2242)) && _0x378643.__esModule ? _0x378643 : {
            default: _0x378643
          };
          function _0x22613c(_0x116c14, _0x1b6735) {
            for (var _0x395ade = 0; _0x395ade < _0x1b6735.length; _0x395ade++) {
              var _0x3354fe = _0x1b6735[_0x395ade];
              _0x3354fe.enumerable = _0x3354fe.enumerable || false;
              _0x3354fe.configurable = true;
              if ("value" in _0x3354fe) {
                _0x3354fe.writable = true;
              }
              (0, _0x1ced26.default)(_0x116c14, _0x3354fe.key, _0x3354fe);
            }
          }
          _0x3862d2.default = function (_0x5d386d, _0x556bb7, _0x3a4919) {
            if (_0x556bb7) {
              _0x22613c(_0x5d386d.prototype, _0x556bb7);
            }
            if (_0x3a4919) {
              _0x22613c(_0x5d386d, _0x3a4919);
            }
            return _0x5d386d;
          };
        },
        2424: (_0x170c2f, _0x4ca41c, _0x143c7) => {
          'got it';
  
          _0x4ca41c.__esModule = true;
          var _0x26613f = _0x570183(_0x143c7(863));
          var _0x2b3f22 = _0x570183(_0x143c7(6378));
          function _0x570183(_0xe2adef) {
            if (_0xe2adef && _0xe2adef.__esModule) {
              return _0xe2adef;
            } else {
              return {
                default: _0xe2adef
              };
            }
          }
          _0x4ca41c.default = function (_0x3cc449, _0x2107fe) {
            if (Array.isArray(_0x3cc449)) {
              return _0x3cc449;
            }
            if ((0, _0x26613f.default)(Object(_0x3cc449))) {
              return function (_0x3da2ef, _0x45dff7) {
                var _0x1bc872 = [];
                var _0x387f85 = true;
                var _0x221c2d = false;
                var _0x197833 = undefined;
                try {
                  for (var _0x4f83d7, _0x356d1e = (0, _0x2b3f22.default)(_0x3da2ef); !(_0x387f85 = (_0x4f83d7 = _0x356d1e.next()).done) && (_0x1bc872.push(_0x4f83d7.value), !_0x45dff7 || _0x1bc872.length !== _0x45dff7); _0x387f85 = true);
                } catch (_0x13b40e) {
                  _0x221c2d = true;
                  _0x197833 = _0x13b40e;
                } finally {
                  try {
                    if (!_0x387f85 && _0x356d1e.return) {
                      _0x356d1e.return();
                    }
                  } finally {
                    if (_0x221c2d) {
                      throw _0x197833;
                    }
                  }
                }
                return _0x1bc872;
              }(_0x3cc449, _0x2107fe);
            }
            throw new TypeError(".......");
          };
        },
        542: (_0x520fe5, _0x41e8be, _0x44864a) => {
          'got it';
  
          _0x41e8be.__esModule = true;
          var _0x3faf32 = (_0x44864a = _0x44864a = _0x44864a(4043)) && _0x44864a.__esModule ? _0x44864a : {
            default: _0x44864a
          };
          _0x41e8be.default = function (_0x27d9d8) {
            if (Array.isArray(_0x27d9d8)) {
              return _0x27d9d8;
            } else {
              return (0, _0x3faf32.default)(_0x27d9d8);
            }
          };
        },
        5315: (_0x395726, _0x51d55b, _0x323c90) => {
          'got it';
  
          _0x51d55b.__esModule = true;
          var _0xadaa94 = (_0x323c90 = _0x323c90 = _0x323c90(4043)) && _0x323c90.__esModule ? _0x323c90 : {
            default: _0x323c90
          };
          _0x51d55b.default = function (_0x16559a) {
            if (Array.isArray(_0x16559a)) {
              for (var _0x11bc57 = 0, _0x284319 = Array(_0x16559a.length); _0x11bc57 < _0x16559a.length; _0x11bc57++) {
                _0x284319[_0x11bc57] = _0x16559a[_0x11bc57];
              }
              return _0x284319;
            }
            return (0, _0xadaa94.default)(_0x16559a);
          };
        },
        3404: (_0x4c1c03, _0xfb2f68, _0xc39bca) => {
          _0xc39bca(1867);
          _0xc39bca(2586);
          _0x4c1c03.exports = _0xc39bca(4579).Array.from;
        },
        3597: (_0x201893, _0x1922b7, _0xc9a5a0) => {
          _0xc9a5a0(3871);
          _0xc9a5a0(1867);
          _0x201893.exports = _0xc9a5a0(6459);
        },
        1035: (_0x51040e, _0xbdc015, _0x40cc23) => {
          _0x40cc23(3871);
          _0x40cc23(1867);
          _0x51040e.exports = _0x40cc23(9553);
        },
        6981: (_0x4680b5, _0x4515c8, _0x44af01) => {
          _0x44af01(2699);
          _0x4680b5.exports = _0x44af01(4579).Object.assign;
        },
        3391: (_0x16490d, _0x3f58df, _0x2896df) => {
          _0x2896df(1477);
          var _0x3c20bd = _0x2896df(4579).Object;
          _0x16490d.exports = function (_0x2f4d02, _0x124ec1, _0x3d575b) {
            return _0x3c20bd.defineProperty(_0x2f4d02, _0x124ec1, _0x3d575b);
          };
        },
        25: (_0x1b93ce, _0x53f838, _0x2be30e) => {
          _0x2be30e(6840);
          _0x2be30e(4058);
          _0x2be30e(8174);
          _0x2be30e(6461);
          _0x1b93ce.exports = _0x2be30e(4579).Symbol;
        },
        5663: _0xb1a425 => {
          _0xb1a425.exports = function (_0x143301) {
            if (typeof _0x143301 != "function") {
              throw TypeError(".......");
            }
            return _0x143301;
          };
        },
        9003: _0x292edb => {
          _0x292edb.exports = function () {};
        },
        2159: (_0x558f4d, _0x4881b7, _0x3c4b57) => {
          var _0x332104 = _0x3c4b57(6727);
          _0x558f4d.exports = function (_0x3d5354) {
            if (!_0x332104(_0x3d5354)) {
              throw TypeError(".......");
            }
            return _0x3d5354;
          };
        },
        7428: (_0x446ee2, _0x46945d, _0xd379b0) => {
          var _0x19597e = _0xd379b0(7932);
          var _0x260822 = _0xd379b0(8728);
          var _0x48bd7f = _0xd379b0(6531);
          _0x446ee2.exports = function (_0x120cb1) {
            return function (_0x23d9a9, _0x68ba1d, _0x56d5ce) {
              var _0xa05d0e;
              var _0x2aa03f = _0x19597e(_0x23d9a9);
              var _0x1ed866 = _0x260822(_0x2aa03f.length);
              var _0x3b8595 = _0x48bd7f(_0x56d5ce, _0x1ed866);
              if (_0x120cb1 && _0x68ba1d != _0x68ba1d) {
                for (; _0x3b8595 < _0x1ed866;) {
                  if ((_0xa05d0e = _0x2aa03f[_0x3b8595++]) != _0xa05d0e) {
                    return true;
                  }
                }
              } else {
                for (; _0x3b8595 < _0x1ed866; _0x3b8595++) {
                  if ((_0x120cb1 || _0x3b8595 in _0x2aa03f) && _0x2aa03f[_0x3b8595] === _0x68ba1d) {
                    return _0x120cb1 || _0x3b8595 || 0;
                  }
                }
              }
              return !_0x120cb1 && -1;
            };
          };
        },
        4677: (_0x3be2c1, _0x4ad511, _0x1c8174) => {
          var _0x29c075 = _0x1c8174(2894);
          var _0x1764e4 = _0x1c8174(2939)("toStringTag");
          var _0x178bbc = _0x29c075(function () {
            return arguments;
          }()) == "Arguments";
          _0x3be2c1.exports = function (_0x1b5315) {
            var _0x4bd158;
            if (_0x1b5315 === undefined) {
              return "Undefined";
            } else if (_0x1b5315 === null) {
              return "Null";
            } else if (typeof (_0x1b5315 = function (_0x135e3f, _0x435135) {
              try {
                return _0x135e3f[_0x435135];
              } catch (_0x82a62b) {}
            }(_0x4bd158 = Object(_0x1b5315), _0x1764e4)) == "string") {
              return _0x1b5315;
            } else if (_0x178bbc) {
              return _0x29c075(_0x4bd158);
            } else if ((_0x1b5315 = _0x29c075(_0x4bd158)) == "Object" && typeof _0x4bd158.callee == "function") {
              return "Arguments";
            } else {
              return _0x1b5315;
            }
          };
        },
        2894: _0x186a59 => {
          var _0x45568d = {}.toString;
          _0x186a59.exports = function (_0x5b02fc) {
            return _0x45568d.call(_0x5b02fc).slice(8, -1);
          };
        },
        4579: _0x4b54e9 => {
          _0x4b54e9 = _0x4b54e9.exports = {
            version: "2.6.12"
          };
          if (typeof __e == "number") {
            __e = _0x4b54e9;
          }
        },
        2445: (_0x1f58a5, _0xa28611, _0x3be492) => {
          'got it';
  
          var _0x51475f = _0x3be492(4743);
          var _0x113f49 = _0x3be492(3101);
          _0x1f58a5.exports = function (_0x30e7e6, _0x4e48a7, _0x383c90) {
            if (_0x4e48a7 in _0x30e7e6) {
              _0x51475f.f(_0x30e7e6, _0x4e48a7, _0x113f49(0, _0x383c90));
            } else {
              _0x30e7e6[_0x4e48a7] = _0x383c90;
            }
          };
        },
        9216: (_0x2bbfd9, _0x3caf2a, _0x14b5d6) => {
          var _0x23aae1 = _0x14b5d6(5663);
          _0x2bbfd9.exports = function (_0x3b7b38, _0x5da5e3, _0x525376) {
            _0x23aae1(_0x3b7b38);
            if (_0x5da5e3 === undefined) {
              return _0x3b7b38;
            }
            switch (_0x525376) {
              case 1:
                return function (_0x5e673f) {
                  return _0x3b7b38.call(_0x5da5e3, _0x5e673f);
                };
              case 2:
                return function (_0x119ec9, _0x3a3dc4) {
                  return _0x3b7b38.call(_0x5da5e3, _0x119ec9, _0x3a3dc4);
                };
              case 3:
                return function (_0x2fe735, _0x46c7bc, _0x3f50ac) {
                  return _0x3b7b38.call(_0x5da5e3, _0x2fe735, _0x46c7bc, _0x3f50ac);
                };
            }
            return function () {
              return _0x3b7b38.apply(_0x5da5e3, arguments);
            };
          };
        },
        8333: _0x2ca441 => {
          _0x2ca441.exports = function (_0x2466da) {
            if (_0x2466da == null) {
              throw TypeError(".......");
            }
            return _0x2466da;
          };
        },
        9666: (_0x31f013, _0x5bea9a, _0x88de9e) => {
          _0x31f013.exports = !_0x88de9e(7929)(function () {
            return Object.defineProperty({}, "a", {
              get: function () {
                return 7;
              }
            }).a != 7;
          });
        },
        7467: (_0x3e2ee3, _0x41a1d1, _0x58d701) => {
          var _0x44e30e = _0x58d701(6727);
          var _0x3460d4 = _0x58d701(3938).document;
          var _0x33ea2d = _0x44e30e(_0x3460d4) && _0x44e30e(_0x3460d4.createElement);
          _0x3e2ee3.exports = function (_0x37f6e9) {
            if (_0x33ea2d) {
              return _0x3460d4.createElement(_0x37f6e9);
            } else {
              return {};
            }
          };
        },
        3338: _0x4a84b9 => {
          _0x4a84b9.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
        },
        337: (_0x413778, _0x2320e1, _0x1796f5) => {
          var _0x13e38b = _0x1796f5(6162);
          var _0x47479a = _0x1796f5(8195);
          var _0x47dc0d = _0x1796f5(6274);
          _0x413778.exports = function (_0x2357ec) {
            var _0x1f5540 = _0x13e38b(_0x2357ec);
            var _0x12b5c1 = _0x47479a.f;
            if (_0x12b5c1) {
              for (var _0x1e4538, _0x517d77 = _0x12b5c1(_0x2357ec), _0x1a1374 = _0x47dc0d.f, _0x369605 = 0; _0x517d77.length > _0x369605;) {
                if (_0x1a1374.call(_0x2357ec, _0x1e4538 = _0x517d77[_0x369605++])) {
                  _0x1f5540.push(_0x1e4538);
                }
              }
            }
            return _0x1f5540;
          };
        },
        3856: (_0x2dd5b6, _0x338e4f, _0x1743f5) => {
          function _0x12422b(_0x40dad1, _0x239570, _0x40d9e3) {
            var _0x140977;
            var _0xb6d7fc;
            var _0x38b4f7;
            var _0x30c79a = _0x40dad1 & _0x12422b.F;
            var _0x242c5e = _0x40dad1 & _0x12422b.G;
            var _0x38037c = _0x40dad1 & _0x12422b.S;
            var _0x164255 = _0x40dad1 & _0x12422b.P;
            var _0x5daf07 = _0x40dad1 & _0x12422b.B;
            var _0x44e3f6 = _0x40dad1 & _0x12422b.W;
            var _0x2fab1f = _0x242c5e ? _0x2ac9d9 : _0x2ac9d9[_0x239570] || (_0x2ac9d9[_0x239570] = {});
            var _0x48a2a2 = _0x2fab1f[_0x174a91];
            var _0x38e120 = _0x242c5e ? _0x506657 : _0x38037c ? _0x506657[_0x239570] : (_0x506657[_0x239570] || {})[_0x174a91];
            for (_0x140977 in _0x40d9e3 = _0x242c5e ? _0x239570 : _0x40d9e3) {
              if (!((_0xb6d7fc = !_0x30c79a && _0x38e120 && _0x38e120[_0x140977] !== undefined) && _0x2a76ab(_0x2fab1f, _0x140977))) {
                _0x38b4f7 = (_0xb6d7fc ? _0x38e120 : _0x40d9e3)[_0x140977];
                _0x2fab1f[_0x140977] = _0x242c5e && typeof _0x38e120[_0x140977] != "function" ? _0x40d9e3[_0x140977] : _0x5daf07 && _0xb6d7fc ? _0x238dae(_0x38b4f7, _0x506657) : _0x44e3f6 && _0x38e120[_0x140977] == _0x38b4f7 ? function (_0x4229b1) {
                  function _0x533ae2(_0x151755, _0x3d0aa0, _0x2b7c8f) {
                    if (this instanceof _0x4229b1) {
                      switch (arguments.length) {
                        case 0:
                          return new _0x4229b1();
                        case 1:
                          return new _0x4229b1(_0x151755);
                        case 2:
                          return new _0x4229b1(_0x151755, _0x3d0aa0);
                      }
                      return new _0x4229b1(_0x151755, _0x3d0aa0, _0x2b7c8f);
                    }
                    return _0x4229b1.apply(this, arguments);
                  }
                  _0x533ae2[_0x174a91] = _0x4229b1[_0x174a91];
                  return _0x533ae2;
                }(_0x38b4f7) : _0x164255 && typeof _0x38b4f7 == "function" ? _0x238dae(Function.call, _0x38b4f7) : _0x38b4f7;
                if (_0x164255) {
                  (_0x2fab1f.virtual || (_0x2fab1f.virtual = {}))[_0x140977] = _0x38b4f7;
                  if (_0x40dad1 & _0x12422b.R && _0x48a2a2 && !_0x48a2a2[_0x140977]) {
                    _0x231e47(_0x48a2a2, _0x140977, _0x38b4f7);
                  }
                }
              }
            }
          }
          var _0x506657 = _0x1743f5(3938);
          var _0x2ac9d9 = _0x1743f5(4579);
          var _0x238dae = _0x1743f5(9216);
          var _0x231e47 = _0x1743f5(1818);
          var _0x2a76ab = _0x1743f5(7069);
          var _0x174a91 = "prototype";
          _0x12422b.F = 1;
          _0x12422b.G = 2;
          _0x12422b.S = 4;
          _0x12422b.P = 8;
          _0x12422b.B = 16;
          _0x12422b.W = 32;
          _0x12422b.U = 64;
          _0x12422b.R = 128;
          _0x2dd5b6.exports = _0x12422b;
        },
        7929: _0x6f892d => {
          _0x6f892d.exports = function (_0x45a009) {
            try {
              return !!_0x45a009();
            } catch (_0x415bfe) {
              return true;
            }
          };
        },
        3938: _0x5d1657 => {
          _0x5d1657 = _0x5d1657.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
          if (typeof __g == "number") {
            __g = _0x5d1657;
          }
        },
        7069: _0x44fb62 => {
          var _0x45d9fa = {}.hasOwnProperty;
          _0x44fb62.exports = function (_0x2602b6, _0x32cc28) {
            return _0x45d9fa.call(_0x2602b6, _0x32cc28);
          };
        },
        1818: (_0x12ca51, _0x2bf87b, _0x1d7830) => {
          var _0x2e6c09 = _0x1d7830(4743);
          var _0x2d2519 = _0x1d7830(3101);
          _0x12ca51.exports = _0x1d7830(9666) ? function (_0x1f27e0, _0x539d75, _0x289e78) {
            return _0x2e6c09.f(_0x1f27e0, _0x539d75, _0x2d2519(1, _0x289e78));
          } : function (_0x404b43, _0x2a2803, _0x406d6b) {
            _0x404b43[_0x2a2803] = _0x406d6b;
            return _0x404b43;
          };
        },
        4881: (_0x288a54, _0x9d00d, _0x3cc1ef) => {
          _0x3cc1ef = _0x3cc1ef(3938).document;
          _0x288a54.exports = _0x3cc1ef && _0x3cc1ef.documentElement;
        },
        3758: (_0xf35930, _0x4f62f1, _0x3e8b1a) => {
          _0xf35930.exports = !_0x3e8b1a(9666) && !_0x3e8b1a(7929)(function () {
            return Object.defineProperty(_0x3e8b1a(7467)("div"), "a", {
              get: function () {
                return 7;
              }
            }).a != 7;
          });
        },
        799: (_0x4a5f29, _0x5ea4cd, _0x4ab4b5) => {
          var _0x7bbb2 = _0x4ab4b5(2894);
          _0x4a5f29.exports = Object("z").propertyIsEnumerable(0) ? Object : function (_0x1be8b9) {
            if (_0x7bbb2(_0x1be8b9) == "String") {
              return _0x1be8b9.split("");
            } else {
              return Object(_0x1be8b9);
            }
          };
        },
        5991: (_0x12668e, _0x465040, _0x54ce53) => {
          var _0x2f8b2a = _0x54ce53(5449);
          var _0x1a0fda = _0x54ce53(2939)("iterator");
          var _0xa15993 = Array.prototype;
          _0x12668e.exports = function (_0x3aba79) {
            return _0x3aba79 !== undefined && (_0x2f8b2a.Array === _0x3aba79 || _0xa15993[_0x1a0fda] === _0x3aba79);
          };
        },
        1421: (_0x12ef04, _0xea9c12, _0x8ad9ff) => {
          var _0x3e5831 = _0x8ad9ff(2894);
          _0x12ef04.exports = Array.isArray || function (_0x356874) {
            return _0x3e5831(_0x356874) == "Array";
          };
        },
        6727: _0x514edf => {
          _0x514edf.exports = function (_0x2834d8) {
            if (typeof _0x2834d8 == "object") {
              return _0x2834d8 !== null;
            } else {
              return typeof _0x2834d8 == "function";
            }
          };
        },
        5602: (_0x282b28, _0x3c35cc, _0x3ea258) => {
          var _0x3bd8f8 = _0x3ea258(2159);
          _0x282b28.exports = function (_0x108b2e, _0x508ccc, _0x140785, _0x5bfa4b) {
            try {
              if (_0x5bfa4b) {
                return _0x508ccc(_0x3bd8f8(_0x140785)[0], _0x140785[1]);
              } else {
                return _0x508ccc(_0x140785);
              }
            } catch (_0x4980c9) {
              if ((_0x140785 = _0x108b2e.return) !== undefined) {
                _0x3bd8f8(_0x140785.call(_0x108b2e));
              }
              throw _0x4980c9;
            }
          };
        },
        3945: (_0x4a9d94, _0x4204be, _0x7fef9) => {
          'got it';
  
          var _0x16b141 = _0x7fef9(8989);
          var _0x130dd1 = _0x7fef9(3101);
          var _0x2c2b09 = _0x7fef9(5378);
          var _0x22d37f = {};
          _0x7fef9(1818)(_0x22d37f, _0x7fef9(2939)("iterator"), function () {
            return this;
          });
          _0x4a9d94.exports = function (_0x3f5971, _0x3d54f3, _0x1ffac3) {
            _0x3f5971.prototype = _0x16b141(_0x22d37f, {
              next: _0x130dd1(1, _0x1ffac3)
            });
            _0x2c2b09(_0x3f5971, _0x3d54f3 + " Iterator");
          };
        },
        5700: (_0x4bbf35, _0x315671, _0x26f7cd) => {
          'got it';
  
          function _0x5cdb4f() {
            return this;
          }
          var _0x6093fc = _0x26f7cd(6227);
          var _0x528a20 = _0x26f7cd(3856);
          var _0x7d46b3 = _0x26f7cd(7470);
          var _0x1bc4c8 = _0x26f7cd(1818);
          var _0x17c81a = _0x26f7cd(5449);
          var _0x2a70e0 = _0x26f7cd(3945);
          var _0xbcc214 = _0x26f7cd(5378);
          var _0x34ed50 = _0x26f7cd(5089);
          var _0x4af7ca = _0x26f7cd(2939)("iterator");
          var _0x449e0d = !([].keys && "next" in [].keys());
          var _0x2c5423 = "values";
          _0x4bbf35.exports = function (_0x22a879, _0x493760, _0x3a7bda, _0x569333, _0x15c42b, _0x5e353c, _0x572b49) {
            function _0x3a460b(_0x20387b) {
              if (!_0x449e0d && _0x20387b in _0xb30ac4) {
                return _0xb30ac4[_0x20387b];
              }
              switch (_0x20387b) {
                case "keys":
                case _0x2c5423:
                  return function () {
                    return new _0x3a7bda(this, _0x20387b);
                  };
              }
              return function () {
                return new _0x3a7bda(this, _0x20387b);
              };
            }
            _0x2a70e0(_0x3a7bda, _0x493760, _0x569333);
            var _0x5698d9;
            var _0x3d26e6;
            var _0x27ab54;
            var _0x484c1e = _0x493760 + " Iterator";
            var _0x3683a1 = _0x15c42b == _0x2c5423;
            var _0x2e2797 = false;
            var _0xb30ac4 = _0x22a879.prototype;
            var _0x49b59e = _0xb30ac4[_0x4af7ca] || _0xb30ac4["@@iterator"] || _0x15c42b && _0xb30ac4[_0x15c42b];
            var _0x59d453 = _0x49b59e || _0x3a460b(_0x15c42b);
            var _0xda52e2 = _0x15c42b ? _0x3683a1 ? _0x3a460b("entries") : _0x59d453 : undefined;
            if ((_0x569333 = _0x493760 == "Array" && _0xb30ac4.entries || _0x49b59e) && (_0x27ab54 = _0x34ed50(_0x569333.call(new _0x22a879()))) !== Object.prototype && _0x27ab54.next) {
              _0xbcc214(_0x27ab54, _0x484c1e, true);
              if (!(_0x6093fc || typeof _0x27ab54[_0x4af7ca] == "function")) {
                _0x1bc4c8(_0x27ab54, _0x4af7ca, _0x5cdb4f);
              }
            }
            if (_0x3683a1 && _0x49b59e && _0x49b59e.name !== _0x2c5423) {
              _0x2e2797 = true;
              _0x59d453 = function () {
                return _0x49b59e.call(this);
              };
            }
            if (!(_0x6093fc && !_0x572b49 || !_0x449e0d && !_0x2e2797 && _0xb30ac4[_0x4af7ca])) {
              _0x1bc4c8(_0xb30ac4, _0x4af7ca, _0x59d453);
            }
            _0x17c81a[_0x493760] = _0x59d453;
            _0x17c81a[_0x484c1e] = _0x5cdb4f;
            if (_0x15c42b) {
              _0x5698d9 = {
                values: _0x3683a1 ? _0x59d453 : _0x3a460b(_0x2c5423),
                keys: _0x5e353c ? _0x59d453 : _0x3a460b("keys"),
                entries: _0xda52e2
              };
              if (_0x572b49) {
                for (_0x3d26e6 in _0x5698d9) {
                  if (!(_0x3d26e6 in _0xb30ac4)) {
                    _0x7d46b3(_0xb30ac4, _0x3d26e6, _0x5698d9[_0x3d26e6]);
                  }
                }
              } else {
                _0x528a20(_0x528a20.P + _0x528a20.F * (_0x449e0d || _0x2e2797), _0x493760, _0x5698d9);
              }
            }
            return _0x5698d9;
          };
        },
        6630: (_0x358f32, _0x1014bb, _0x3e394b) => {
          var _0x3ee560 = _0x3e394b(2939)("iterator");
          var _0x28dbf0 = false;
          try {
            var _0x243ab6 = [7][_0x3ee560]();
            _0x243ab6.return = function () {
              _0x28dbf0 = true;
            };
            Array.from(_0x243ab6, function () {
              throw 2;
            });
          } catch (_0x34ef4f) {}
          _0x358f32.exports = function (_0x24878e, _0x35ba36) {
            if (!_0x35ba36 && !_0x28dbf0) {
              return false;
            }
            var _0x8a69d6 = false;
            try {
              var _0x2a3dc1 = [7];
              var _0xfa682f = _0x2a3dc1[_0x3ee560]();
              _0xfa682f.next = function () {
                return {
                  done: _0x8a69d6 = true
                };
              };
              _0x2a3dc1[_0x3ee560] = function () {
                return _0xfa682f;
              };
              _0x24878e(_0x2a3dc1);
            } catch (_0x303b97) {}
            return _0x8a69d6;
          };
        },
        5084: _0x43d034 => {
          _0x43d034.exports = function (_0x5be45d, _0x4e7410) {
            return {
              value: _0x4e7410,
              done: !!_0x5be45d
            };
          };
        },
        5449: _0x31f4b0 => {
          _0x31f4b0.exports = {};
        },
        6227: _0x522671 => {
          _0x522671.exports = true;
        },
        7177: (_0x55ab51, _0x20a7af, _0x33026c) => {
          function _0x42995d(_0x837d09) {
            _0x4deaf3(_0x837d09, _0x328392, {
              value: {
                i: "O" + ++_0x1dd824,
                w: {}
              }
            });
          }
          var _0x328392 = _0x33026c(5730)("meta");
          var _0x2efc58 = _0x33026c(6727);
          var _0x5519ad = _0x33026c(7069);
          var _0x4deaf3 = _0x33026c(4743).f;
          var _0x1dd824 = 0;
          var _0x20d29e = Object.isExtensible || function () {
            return true;
          };
          var _0x1f9b9a = !_0x33026c(7929)(function () {
            return _0x20d29e(Object.preventExtensions({}));
          });
          var _0x3cb1a8 = _0x55ab51.exports = {
            KEY: _0x328392,
            NEED: false,
            fastKey: function (_0x3de7dd, _0x3677d0) {
              if (!_0x2efc58(_0x3de7dd)) {
                if (typeof _0x3de7dd == "symbol") {
                  return _0x3de7dd;
                } else {
                  return (typeof _0x3de7dd == "string" ? "S" : "P") + _0x3de7dd;
                }
              }
              if (!_0x5519ad(_0x3de7dd, _0x328392)) {
                if (!_0x20d29e(_0x3de7dd)) {
                  return "F";
                }
                if (!_0x3677d0) {
                  return "E";
                }
                _0x42995d(_0x3de7dd);
              }
              return _0x3de7dd[_0x328392].i;
            },
            getWeak: function (_0x9dc76b, _0x1b9e7b) {
              if (!_0x5519ad(_0x9dc76b, _0x328392)) {
                if (!_0x20d29e(_0x9dc76b)) {
                  return true;
                }
                if (!_0x1b9e7b) {
                  return false;
                }
                _0x42995d(_0x9dc76b);
              }
              return _0x9dc76b[_0x328392].w;
            },
            onFreeze: function (_0x5b29f4) {
              if (_0x1f9b9a && _0x3cb1a8.NEED && _0x20d29e(_0x5b29f4) && !_0x5519ad(_0x5b29f4, _0x328392)) {
                _0x42995d(_0x5b29f4);
              }
              return _0x5b29f4;
            }
          };
        },
        8082: (_0xcf8a54, _0x5e5f85, _0x5a99f9) => {
          'got it';
  
          var _0x3bd077 = _0x5a99f9(9666);
          var _0x509e3a = _0x5a99f9(6162);
          var _0x23c253 = _0x5a99f9(8195);
          var _0x4fcd01 = _0x5a99f9(6274);
          var _0x1d0abb = _0x5a99f9(6530);
          var _0x5afc35 = _0x5a99f9(799);
          var _0x2d70ff = Object.assign;
          _0xcf8a54.exports = !_0x2d70ff || _0x5a99f9(7929)(function () {
            var _0x3a1bc3 = {};
            var _0x5cfbac = {};
            var _0xdd2bec = Symbol();
            var _0x1b9994 = "abcdefghijklmnopqrst";
            _0x3a1bc3[_0xdd2bec] = 7;
            _0x1b9994.split("").forEach(function (_0x2a6da4) {
              _0x5cfbac[_0x2a6da4] = _0x2a6da4;
            });
            return _0x2d70ff({}, _0x3a1bc3)[_0xdd2bec] != 7 || Object.keys(_0x2d70ff({}, _0x5cfbac)).join("") != _0x1b9994;
          }) ? function (_0x59e5e0, _0x528666) {
            for (var _0x47b3e2 = _0x1d0abb(_0x59e5e0), _0xcefead = arguments.length, _0x5a7b6a = 1, _0x4a9fa2 = _0x23c253.f, _0x454c9d = _0x4fcd01.f; _0x5a7b6a < _0xcefead;) {
              for (var _0x517e0d, _0x1c49df = _0x5afc35(arguments[_0x5a7b6a++]), _0x30c4e6 = _0x4a9fa2 ? _0x509e3a(_0x1c49df).concat(_0x4a9fa2(_0x1c49df)) : _0x509e3a(_0x1c49df), _0x1adc70 = _0x30c4e6.length, _0x4c4429 = 0; _0x4c4429 < _0x1adc70;) {
                _0x517e0d = _0x30c4e6[_0x4c4429++];
                if (!(_0x3bd077 && !_0x454c9d.call(_0x1c49df, _0x517e0d))) {
                  _0x47b3e2[_0x517e0d] = _0x1c49df[_0x517e0d];
                }
              }
            }
            return _0x47b3e2;
          } : _0x2d70ff;
        },
        8989: (_0x5c3ffc, _0x3b12e6, _0x9fd6a6) => {
          function _0x26e4b5() {}
          var _0x4a730f = _0x9fd6a6(2159);
          var _0x15e199 = _0x9fd6a6(7856);
          var _0x157358 = _0x9fd6a6(3338);
          var _0x129d5b = _0x9fd6a6(7281)("IE_PROTO");
          var _0x52d1f6 = "prototype";
          function _0x2fe32b() {
            var _0x2e83a2 = _0x9fd6a6(7467)("iframe");
            var _0x229de0 = _0x157358.length;
            _0x2e83a2.style.display = "none";
            _0x9fd6a6(4881).appendChild(_0x2e83a2);
            _0x2e83a2.src = "javascript:";
            (_0x2e83a2 = _0x2e83a2.contentWindow.document).open();
            _0x2e83a2.write("<script>document.F=Object</script>");
            _0x2e83a2.close();
            _0x2fe32b = _0x2e83a2.F;
            for (; _0x229de0--;) {
              delete _0x2fe32b[_0x52d1f6][_0x157358[_0x229de0]];
            }
            return _0x2fe32b();
          }
          _0x5c3ffc.exports = Object.create || function (_0x2ad35a, _0x2dc3ba) {
            var _0x5ef49d;
            if (_0x2ad35a !== null) {
              _0x26e4b5[_0x52d1f6] = _0x4a730f(_0x2ad35a);
              _0x5ef49d = new _0x26e4b5();
              _0x26e4b5[_0x52d1f6] = null;
              _0x5ef49d[_0x129d5b] = _0x2ad35a;
            } else {
              _0x5ef49d = _0x2fe32b();
            }
            if (_0x2dc3ba === undefined) {
              return _0x5ef49d;
            } else {
              return _0x15e199(_0x5ef49d, _0x2dc3ba);
            }
          };
        },
        4743: (_0x27f516, _0x2ecef4, _0x24bfb9) => {
          var _0x481b5d = _0x24bfb9(2159);
          var _0x1d12b2 = _0x24bfb9(3758);
          var _0x183e92 = _0x24bfb9(3206);
          var _0x43459e = Object.defineProperty;
          _0x2ecef4.f = _0x24bfb9(9666) ? Object.defineProperty : function (_0x2ffac6, _0x13491c, _0x4d07a5) {
            _0x481b5d(_0x2ffac6);
            _0x13491c = _0x183e92(_0x13491c, true);
            _0x481b5d(_0x4d07a5);
            if (_0x1d12b2) {
              try {
                return _0x43459e(_0x2ffac6, _0x13491c, _0x4d07a5);
              } catch (_0x49cbc3) {}
            }
            if ("get" in _0x4d07a5 || "set" in _0x4d07a5) {
              throw TypeError(".......");
            }
            if ("value" in _0x4d07a5) {
              _0x2ffac6[_0x13491c] = _0x4d07a5.value;
            }
            return _0x2ffac6;
          };
        },
        7856: (_0x59a1db, _0x4624a4, _0x4a14bc) => {
          var _0x8072e5 = _0x4a14bc(4743);
          var _0x4ce4a8 = _0x4a14bc(2159);
          var _0x2b567c = _0x4a14bc(6162);
          _0x59a1db.exports = _0x4a14bc(9666) ? Object.defineProperties : function (_0x585bf3, _0x399468) {
            _0x4ce4a8(_0x585bf3);
            for (var _0x2df1b4, _0x58ea05 = _0x2b567c(_0x399468), _0x5e0180 = _0x58ea05.length, _0x414cd9 = 0; _0x414cd9 < _0x5e0180;) {
              _0x8072e5.f(_0x585bf3, _0x2df1b4 = _0x58ea05[_0x414cd9++], _0x399468[_0x2df1b4]);
            }
            return _0x585bf3;
          };
        },
        6183: (_0x5294f8, _0x377a59, _0x1a7d75) => {
          var _0x30ae67 = _0x1a7d75(6274);
          var _0x537763 = _0x1a7d75(3101);
          var _0xa9a1aa = _0x1a7d75(7932);
          var _0x1679c8 = _0x1a7d75(3206);
          var _0x20532a = _0x1a7d75(7069);
          var _0x1a9da1 = _0x1a7d75(3758);
          var _0x4c34d3 = Object.getOwnPropertyDescriptor;
          _0x377a59.f = _0x1a7d75(9666) ? _0x4c34d3 : function (_0x5648fb, _0x104a90) {
            _0x5648fb = _0xa9a1aa(_0x5648fb);
            _0x104a90 = _0x1679c8(_0x104a90, true);
            if (_0x1a9da1) {
              try {
                return _0x4c34d3(_0x5648fb, _0x104a90);
              } catch (_0x26e306) {}
            }
            if (_0x20532a(_0x5648fb, _0x104a90)) {
              return _0x537763(!_0x30ae67.f.call(_0x5648fb, _0x104a90), _0x5648fb[_0x104a90]);
            }
          };
        },
        4368: (_0x308835, _0x2744af, _0x19b3b3) => {
          var _0x48ac82 = _0x19b3b3(7932);
          var _0x185210 = _0x19b3b3(3230).f;
          var _0x3a3015 = {}.toString;
          var _0x188e11 = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
          _0x308835.exports.f = function (_0x334f83) {
            if (_0x188e11 && _0x3a3015.call(_0x334f83) == "[object Window]") {
              return function (_0x3dd6c9) {
                try {
                  return _0x185210(_0x3dd6c9);
                } catch (_0x55b7fa) {
                  return _0x188e11.slice();
                }
              }(_0x334f83);
            } else {
              return _0x185210(_0x48ac82(_0x334f83));
            }
          };
        },
        3230: (_0x243f35, _0x30705e, _0x3e8cbe) => {
          var _0xf1fbf1 = _0x3e8cbe(2963);
          var _0x6a5fec = _0x3e8cbe(3338).concat("length", "prototype");
          _0x30705e.f = Object.getOwnPropertyNames || function (_0x27692d) {
            return _0xf1fbf1(_0x27692d, _0x6a5fec);
          };
        },
        8195: (_0x36be9a, _0x3254b7) => {
          _0x3254b7.f = Object.getOwnPropertySymbols;
        },
        5089: (_0x46750a, _0x563976, _0x46ccce) => {
          var _0x56ab4b = _0x46ccce(7069);
          var _0x1d677e = _0x46ccce(6530);
          var _0x287e20 = _0x46ccce(7281)("IE_PROTO");
          var _0x417fab = Object.prototype;
          _0x46750a.exports = Object.getPrototypeOf || function (_0x4bd955) {
            _0x4bd955 = _0x1d677e(_0x4bd955);
            if (_0x56ab4b(_0x4bd955, _0x287e20)) {
              return _0x4bd955[_0x287e20];
            } else if (typeof _0x4bd955.constructor == "function" && _0x4bd955 instanceof _0x4bd955.constructor) {
              return _0x4bd955.constructor.prototype;
            } else if (_0x4bd955 instanceof Object) {
              return _0x417fab;
            } else {
              return null;
            }
          };
        },
        2963: (_0x9229a4, _0x2f7d8d, _0x10e553) => {
          var _0x1b0908 = _0x10e553(7069);
          var _0x206239 = _0x10e553(7932);
          var _0x44edf4 = _0x10e553(7428)(false);
          var _0x1d4272 = _0x10e553(7281)("IE_PROTO");
          _0x9229a4.exports = function (_0x4f2c95, _0x487c90) {
            var _0x1eb761;
            var _0xbc77d5 = _0x206239(_0x4f2c95);
            var _0x348693 = 0;
            var _0x30640f = [];
            for (_0x1eb761 in _0xbc77d5) {
              if (_0x1eb761 != _0x1d4272 && _0x1b0908(_0xbc77d5, _0x1eb761)) {
                _0x30640f.push(_0x1eb761);
              }
            }
            for (; _0x487c90.length > _0x348693;) {
              if (_0x1b0908(_0xbc77d5, _0x1eb761 = _0x487c90[_0x348693++])) {
                if (!~_0x44edf4(_0x30640f, _0x1eb761)) {
                  _0x30640f.push(_0x1eb761);
                }
              }
            }
            return _0x30640f;
          };
        },
        6162: (_0x19a269, _0x368862, _0x19ed2e) => {
          var _0x315a99 = _0x19ed2e(2963);
          var _0x278dc5 = _0x19ed2e(3338);
          _0x19a269.exports = Object.keys || function (_0x421dfc) {
            return _0x315a99(_0x421dfc, _0x278dc5);
          };
        },
        6274: (_0x547e0d, _0x281c49) => {
          _0x281c49.f = {}.propertyIsEnumerable;
        },
        3101: _0x31a3e0 => {
          _0x31a3e0.exports = function (_0x330a67, _0x564e82) {
            return {
              enumerable: !(_0x330a67 & 1),
              configurable: !(_0x330a67 & 2),
              writable: !(_0x330a67 & 4),
              value: _0x564e82
            };
          };
        },
        7470: (_0x4f652d, _0x320c80, _0xb77ffc) => {
          _0x4f652d.exports = _0xb77ffc(1818);
        },
        5378: (_0x59e85a, _0x6b54ae, _0x5816b6) => {
          var _0x9632fa = _0x5816b6(4743).f;
          var _0x334d6a = _0x5816b6(7069);
          var _0x277d3d = _0x5816b6(2939)("toStringTag");
          _0x59e85a.exports = function (_0x2a59db, _0x40b175, _0x71f017) {
            if (_0x2a59db && !_0x334d6a(_0x2a59db = _0x71f017 ? _0x2a59db : _0x2a59db.prototype, _0x277d3d)) {
              _0x9632fa(_0x2a59db, _0x277d3d, {
                configurable: true,
                value: _0x40b175
              });
            }
          };
        },
        7281: (_0xdcbffa, _0x40f4f8, _0x351375) => {
          var _0x532c9a = _0x351375(250)("keys");
          var _0x1352d9 = _0x351375(5730);
          _0xdcbffa.exports = function (_0x4f15da) {
            return _0x532c9a[_0x4f15da] || (_0x532c9a[_0x4f15da] = _0x1352d9(_0x4f15da));
          };
        },
        250: (_0x4b0284, _0x2cd06b, _0x9ac663) => {
          var _0x21ede3 = _0x9ac663(4579);
          var _0x13db26 = _0x9ac663(3938);
          var _0x324bae = "__core-js_shared__";
          var _0x13d97b = _0x13db26[_0x324bae] || (_0x13db26[_0x324bae] = {});
          (_0x4b0284.exports = function (_0x4e5199, _0x14058d) {
            return _0x13d97b[_0x4e5199] || (_0x13d97b[_0x4e5199] = _0x14058d !== undefined ? _0x14058d : {});
          })("versions", []).push({
            version: _0x21ede3.version,
            mode: _0x9ac663(6227) ? "pure" : "global",
            copyright: "© 2020 Denis Pushkarev (zloirock.ru)"
          });
        },
        510: (_0x5654b7, _0x14ac50, _0x145014) => {
          var _0x11f7cf = _0x145014(1052);
          var _0xe2d2e8 = _0x145014(8333);
          _0x5654b7.exports = function (_0x1cef37) {
            return function (_0x4c4167, _0x125a05) {
              var _0x97eca8;
              var _0x95ee7f = String(_0xe2d2e8(_0x4c4167));
              var _0xb4108c = _0x11f7cf(_0x125a05);
              _0x4c4167 = _0x95ee7f.length;
              if (_0xb4108c < 0 || _0x4c4167 <= _0xb4108c) {
                if (_0x1cef37) {
                  return "";
                } else {
                  return undefined;
                }
              } else if ((_0x125a05 = _0x95ee7f.charCodeAt(_0xb4108c)) < 55296 || _0x125a05 > 56319 || _0xb4108c + 1 === _0x4c4167 || (_0x97eca8 = _0x95ee7f.charCodeAt(_0xb4108c + 1)) < 56320 || _0x97eca8 > 57343) {
                if (_0x1cef37) {
                  return _0x95ee7f.charAt(_0xb4108c);
                } else {
                  return _0x125a05;
                }
              } else if (_0x1cef37) {
                return _0x95ee7f.slice(_0xb4108c, _0xb4108c + 2);
              } else {
                return _0x97eca8 - 56320 + (_0x125a05 - 55296 << 10) + 65536;
              }
            };
          };
        },
        6531: (_0x49b86a, _0x3cce4f, _0x18c05f) => {
          var _0xa6e5ba = _0x18c05f(1052);
          var _0x5dd306 = Math.max;
          var _0x44d8f4 = Math.min;
          _0x49b86a.exports = function (_0x1168dd, _0x5af199) {
            if ((_0x1168dd = _0xa6e5ba(_0x1168dd)) < 0) {
              return _0x5dd306(_0x1168dd + _0x5af199, 0);
            } else {
              return _0x44d8f4(_0x1168dd, _0x5af199);
            }
          };
        },
        1052: _0x44cd35 => {
          var _0x4ebcb8 = Math.ceil;
          var _0x352422 = Math.floor;
          _0x44cd35.exports = function (_0x20d654) {
            if (isNaN(_0x20d654 = +_0x20d654)) {
              return 0;
            } else {
              return (_0x20d654 > 0 ? _0x352422 : _0x4ebcb8)(_0x20d654);
            }
          };
        },
        7932: (_0x8e9267, _0x1b5833, _0x4965d0) => {
          var _0x3bd16a = _0x4965d0(799);
          var _0x46fb4c = _0x4965d0(8333);
          _0x8e9267.exports = function (_0x460e5f) {
            return _0x3bd16a(_0x46fb4c(_0x460e5f));
          };
        },
        8728: (_0x4988f3, _0x596e41, _0x2c1103) => {
          var _0x6aed5a = _0x2c1103(1052);
          var _0x80ef40 = Math.min;
          _0x4988f3.exports = function (_0x204dd2) {
            if (_0x204dd2 > 0) {
              return _0x80ef40(_0x6aed5a(_0x204dd2), 9007199254740991);
            } else {
              return 0;
            }
          };
        },
        6530: (_0x5ddb70, _0x45d2c8, _0x1d3a29) => {
          var _0x28a993 = _0x1d3a29(8333);
          _0x5ddb70.exports = function (_0x202c4a) {
            return Object(_0x28a993(_0x202c4a));
          };
        },
        3206: (_0xccc660, _0x3f59cf, _0xa3b6b6) => {
          var _0x4dbb85 = _0xa3b6b6(6727);
          _0xccc660.exports = function (_0x265f1d, _0x39ce8b) {
            if (!_0x4dbb85(_0x265f1d)) {
              return _0x265f1d;
            }
            var _0x3d0d8e;
            var _0x45d75d;
            if (_0x39ce8b && typeof (_0x3d0d8e = _0x265f1d.toString) == "function" && !_0x4dbb85(_0x45d75d = _0x3d0d8e.call(_0x265f1d))) {
              return _0x45d75d;
            }
            if (typeof (_0x3d0d8e = _0x265f1d.valueOf) == "function" && !_0x4dbb85(_0x45d75d = _0x3d0d8e.call(_0x265f1d))) {
              return _0x45d75d;
            }
            if (!_0x39ce8b && typeof (_0x3d0d8e = _0x265f1d.toString) == "function" && !_0x4dbb85(_0x45d75d = _0x3d0d8e.call(_0x265f1d))) {
              return _0x45d75d;
            }
            throw TypeError(".......");
          };
        },
        5730: _0x3e10b5 => {
          var _0x4e2c1a = 0;
          var _0x36956b = Math.random();
          _0x3e10b5.exports = function (_0x138f4f) {
            return `Symbol(${_0x138f4f === undefined ? "" : _0x138f4f})_${(++_0x4e2c1a + _0x36956b).toString(36)}`;
          };
        },
        6347: (_0x5ea727, _0x184032, _0x9d77de) => {
          var _0x273826 = _0x9d77de(3938);
          var _0x4edcba = _0x9d77de(4579);
          var _0x56538b = _0x9d77de(6227);
          var _0x110370 = _0x9d77de(5103);
          var _0x17f6bd = _0x9d77de(4743).f;
          _0x5ea727.exports = function (_0x1ade87) {
            var _0x3fb4b0 = _0x4edcba.Symbol || (_0x4edcba.Symbol = !_0x56538b && _0x273826.Symbol || {});
            if (!(_0x1ade87.charAt(0) == "_" || _0x1ade87 in _0x3fb4b0)) {
              _0x17f6bd(_0x3fb4b0, _0x1ade87, {
                value: _0x110370.f(_0x1ade87)
              });
            }
          };
        },
        5103: (_0x100b5b, _0x1fc029, _0x7e3ef9) => {
          _0x1fc029.f = _0x7e3ef9(2939);
        },
        2939: (_0x51e599, _0x42ec20, _0x43d989) => {
          var _0x1d57ff = _0x43d989(250)("wks");
          var _0xff3994 = _0x43d989(5730);
          var _0xc97393 = _0x43d989(3938).Symbol;
          var _0x2499a2 = typeof _0xc97393 == "function";
          (_0x51e599.exports = function (_0x4a1fba) {
            return _0x1d57ff[_0x4a1fba] || (_0x1d57ff[_0x4a1fba] = _0x2499a2 && _0xc97393[_0x4a1fba] || (_0x2499a2 ? _0xc97393 : _0xff3994)("Symbol." + _0x4a1fba));
          }).store = _0x1d57ff;
        },
        3728: (_0x495eba, _0x43bc0a, _0x2d79fa) => {
          var _0xce286e = _0x2d79fa(4677);
          var _0x4d2665 = _0x2d79fa(2939)("iterator");
          var _0x2d44c0 = _0x2d79fa(5449);
          _0x495eba.exports = _0x2d79fa(4579).getIteratorMethod = function (_0x26d8ee) {
            if (_0x26d8ee != null) {
              return _0x26d8ee[_0x4d2665] || _0x26d8ee["@@iterator"] || _0x2d44c0[_0xce286e(_0x26d8ee)];
            }
          };
        },
        6459: (_0x51d955, _0x47c501, _0x306299) => {
          var _0x2fd382 = _0x306299(2159);
          var _0x5e5cc5 = _0x306299(3728);
          _0x51d955.exports = _0x306299(4579).getIterator = function (_0x1123a1) {
            var _0xd98366 = _0x5e5cc5(_0x1123a1);
            if (typeof _0xd98366 != "function") {
              throw TypeError(".......");
            }
            return _0x2fd382(_0xd98366.call(_0x1123a1));
          };
        },
        9553: (_0xac02c0, _0x453b2f, _0xc04721) => {
          var _0x4e9f40 = _0xc04721(4677);
          var _0x3d2d24 = _0xc04721(2939)("iterator");
          var _0x10323 = _0xc04721(5449);
          _0xac02c0.exports = _0xc04721(4579).isIterable = function (_0x20cdc0) {
            return (_0x20cdc0 = Object(_0x20cdc0))[_0x3d2d24] !== undefined || "@@iterator" in _0x20cdc0 || _0x10323.hasOwnProperty(_0x4e9f40(_0x20cdc0));
          };
        },
        2586: (_0x4de4e3, _0x36b975, _0x3fd8b8) => {
          'got it';
  
          var _0x13042f = _0x3fd8b8(9216);
          var _0x21e944 = _0x3fd8b8(3856);
          var _0x39fe68 = _0x3fd8b8(6530);
          var _0x4f0d9a = _0x3fd8b8(5602);
          var _0x3b47cd = _0x3fd8b8(5991);
          var _0x580960 = _0x3fd8b8(8728);
          var _0x47aa59 = _0x3fd8b8(2445);
          var _0x595726 = _0x3fd8b8(3728);
          _0x21e944(_0x21e944.S + _0x21e944.F * !_0x3fd8b8(6630)(function (_0x811f58) {
            Array.from(_0x811f58);
          }), "Array", {
            from: function (_0x9dc3b1) {
              var _0x494155;
              var _0x5c1970;
              var _0x564d4b;
              var _0x5deca6;
              var _0x7fdaeb = _0x39fe68(_0x9dc3b1);
              var _0x2f4718 = typeof this == "function" ? this : Array;
              var _0x2dc654 = arguments.length;
              var _0x3a4603 = _0x2dc654 > 1 ? arguments[1] : undefined;
              var _0xd0f3a3 = _0x3a4603 !== undefined;
              var _0x4b1b5e = 0;
              _0x9dc3b1 = _0x595726(_0x7fdaeb);
              if (_0xd0f3a3) {
                _0x3a4603 = _0x13042f(_0x3a4603, _0x2dc654 > 2 ? arguments[2] : undefined, 2);
              }
              if (_0x9dc3b1 == null || _0x2f4718 == Array && _0x3b47cd(_0x9dc3b1)) {
                for (_0x5c1970 = new _0x2f4718(_0x494155 = _0x580960(_0x7fdaeb.length)); _0x4b1b5e < _0x494155; _0x4b1b5e++) {
                  _0x47aa59(_0x5c1970, _0x4b1b5e, _0xd0f3a3 ? _0x3a4603(_0x7fdaeb[_0x4b1b5e], _0x4b1b5e) : _0x7fdaeb[_0x4b1b5e]);
                }
              } else {
                _0x5deca6 = _0x9dc3b1.call(_0x7fdaeb);
                _0x5c1970 = new _0x2f4718();
                _0x5deca6 = _0x9dc3b1.call(_0x7fdaeb);
                _0x5c1970 = new _0x2f4718();
                for (; !(_0x564d4b = _0x5deca6.next()).done; _0x4b1b5e++) {
                  _0x47aa59(_0x5c1970, _0x4b1b5e, _0xd0f3a3 ? _0x4f0d9a(_0x5deca6, _0x3a4603, [_0x564d4b.value, _0x4b1b5e], true) : _0x564d4b.value);
                }
              }
              _0x5c1970.length = _0x4b1b5e;
              return _0x5c1970;
            }
          });
        },
        3882: (_0x10b7ff, _0x2b4bb8, _0x387ff7) => {
          'got it';
  
          var _0x4dacff = _0x387ff7(9003);
          var _0x3601cd = _0x387ff7(5084);
          var _0x2ba50e = _0x387ff7(5449);
          var _0xca2116 = _0x387ff7(7932);
          _0x10b7ff.exports = _0x387ff7(5700)(Array, "Array", function (_0x1f6f5c, _0x41c43c) {
            this._t = _0xca2116(_0x1f6f5c);
            this._i = 0;
            this._k = _0x41c43c;
          }, function () {
            var _0x3c695e = this._t;
            var _0x136eb7 = this._k;
            var _0x31e2a4 = this._i++;
            if (!_0x3c695e || _0x31e2a4 >= _0x3c695e.length) {
              this._t = undefined;
              return _0x3601cd(1);
            } else {
              return _0x3601cd(0, _0x136eb7 == "keys" ? _0x31e2a4 : _0x136eb7 == "values" ? _0x3c695e[_0x31e2a4] : [_0x31e2a4, _0x3c695e[_0x31e2a4]]);
            }
          }, "values");
          _0x2ba50e.Arguments = _0x2ba50e.Array;
          _0x4dacff("keys");
          _0x4dacff("values");
          _0x4dacff("entries");
        },
        2699: (_0x7be1cd, _0x491ebc, _0x40b892) => {
          var _0xe2c5b0 = _0x40b892(3856);
          _0xe2c5b0(_0xe2c5b0.S + _0xe2c5b0.F, "Object", {
            assign: _0x40b892(8082)
          });
        },
        1477: (_0xb638bb, _0x1dcbfc, _0x4975ed) => {
          var _0x2f669d = _0x4975ed(3856);
          _0x2f669d(_0x2f669d.S + _0x2f669d.F * !_0x4975ed(9666), "Object", {
            defineProperty: _0x4975ed(4743).f
          });
        },
        4058: () => {},
        1867: (_0x3f2c74, _0x16628a, _0x115cc5) => {
          'got it';
  
          var _0x315b5f = _0x115cc5(510)(true);
          _0x115cc5(5700)(String, "String", function (_0x1c3d33) {
            this._t = String(_0x1c3d33);
            this._i = 0;
          }, function () {
            var _0x31bd46 = this._t;
            var _0xbc386a = this._i;
            if (_0xbc386a >= _0x31bd46.length) {
              return {
                value: undefined,
                done: true
              };
            } else {
              _0xbc386a = _0x315b5f(_0x31bd46, _0xbc386a);
              this._i += _0xbc386a.length;
              return {
                value: _0xbc386a,
                done: false
              };
            }
          });
        },
        6840: (_0x3f0dbb, _0x267ed2, _0x14a6d4) => {
          'got it';
  
          function _0x1486ce(_0x2892a7) {
            var _0x5a87b3 = _0x5da924[_0x2892a7] = _0x2ca3ed(_0x110f07[_0xfea973]);
            _0x5a87b3._k = _0x2892a7;
            return _0x5a87b3;
          }
          function _0x3af2c0(_0x8f0e8e, _0x525151) {
            _0x2bbbfd(_0x8f0e8e);
            for (var _0x1cf40e, _0x41f5c9 = _0x118f2d(_0x525151 = _0x55cce4(_0x525151)), _0x6d52f0 = 0, _0x2b9f9c = _0x41f5c9.length; _0x6d52f0 < _0x2b9f9c;) {
              _0x5f9ff9(_0x8f0e8e, _0x1cf40e = _0x41f5c9[_0x6d52f0++], _0x525151[_0x1cf40e]);
            }
            return _0x8f0e8e;
          }
          function _0x1755df(_0x51e6c3) {
            var _0xb724c5 = _0x55d321.call(this, _0x51e6c3 = _0x8a0030(_0x51e6c3, true));
            return !(this === _0x447e79 && _0x10f57a(_0x5da924, _0x51e6c3) && !_0x10f57a(_0x5d17dd, _0x51e6c3)) && (!(_0xb724c5 || !_0x10f57a(this, _0x51e6c3) || !_0x10f57a(_0x5da924, _0x51e6c3) || _0x10f57a(this, _0x4df763) && this[_0x4df763][_0x51e6c3]) || _0xb724c5);
          }
          function _0x5e75e8(_0x1c87cf, _0x4016e2) {
            _0x1c87cf = _0x55cce4(_0x1c87cf);
            _0x4016e2 = _0x8a0030(_0x4016e2, true);
            if (_0x1c87cf !== _0x447e79 || !_0x10f57a(_0x5da924, _0x4016e2) || _0x10f57a(_0x5d17dd, _0x4016e2)) {
              var _0x3181ed = _0x40918e(_0x1c87cf, _0x4016e2);
              if (!(!_0x3181ed || !_0x10f57a(_0x5da924, _0x4016e2) || _0x10f57a(_0x1c87cf, _0x4df763) && _0x1c87cf[_0x4df763][_0x4016e2])) {
                _0x3181ed.enumerable = true;
              }
              return _0x3181ed;
            }
          }
          function _0x5e2ecb(_0x5eec68) {
            for (var _0x1a428c, _0x6fd727 = _0xe2a6fc(_0x55cce4(_0x5eec68)), _0x284775 = [], _0x304af9 = 0; _0x6fd727.length > _0x304af9;) {
              if (!(_0x10f57a(_0x5da924, _0x1a428c = _0x6fd727[_0x304af9++]) || _0x1a428c == _0x4df763 || _0x1a428c == _0x52fc60)) {
                _0x284775.push(_0x1a428c);
              }
            }
            return _0x284775;
          }
          function _0x89b2d5(_0x58db29) {
            for (var _0x376d87, _0x184c4c = _0x58db29 === _0x447e79, _0x1bc3af = _0xe2a6fc(_0x184c4c ? _0x5d17dd : _0x55cce4(_0x58db29)), _0x20689a = [], _0x28097b = 0; _0x1bc3af.length > _0x28097b;) {
              if (!(!_0x10f57a(_0x5da924, _0x376d87 = _0x1bc3af[_0x28097b++]) || _0x184c4c && !_0x10f57a(_0x447e79, _0x376d87))) {
                _0x20689a.push(_0x5da924[_0x376d87]);
              }
            }
            return _0x20689a;
          }
          var _0x5c5c8a = _0x14a6d4(3938);
          var _0x10f57a = _0x14a6d4(7069);
          var _0x1720ad = _0x14a6d4(9666);
          var _0x4f3fed = _0x14a6d4(3856);
          var _0x300a59 = _0x14a6d4(7470);
          var _0x52fc60 = _0x14a6d4(7177).KEY;
          var _0xeab4a6 = _0x14a6d4(7929);
          var _0x2177f5 = _0x14a6d4(250);
          var _0x4090bf = _0x14a6d4(5378);
          var _0x50c4ff = _0x14a6d4(5730);
          var _0x5d38b5 = _0x14a6d4(2939);
          var _0x5d7608 = _0x14a6d4(5103);
          var _0x1d7920 = _0x14a6d4(6347);
          var _0x118f2d = _0x14a6d4(337);
          var _0xcc6c8 = _0x14a6d4(1421);
          var _0x2bbbfd = _0x14a6d4(2159);
          var _0x237504 = _0x14a6d4(6727);
          var _0x38f8fe = _0x14a6d4(6530);
          var _0x55cce4 = _0x14a6d4(7932);
          var _0x8a0030 = _0x14a6d4(3206);
          var _0x440a51 = _0x14a6d4(3101);
          var _0x2ca3ed = _0x14a6d4(8989);
          var _0x2936be = _0x14a6d4(4368);
          var _0x3c2cf4 = _0x14a6d4(6183);
          var _0x37618e = _0x14a6d4(8195);
          var _0x3bc911 = _0x14a6d4(4743);
          var _0x413c80 = _0x14a6d4(6162);
          var _0x40918e = _0x3c2cf4.f;
          var _0x5027f7 = _0x3bc911.f;
          var _0xe2a6fc = _0x2936be.f;
          var _0x110f07 = _0x5c5c8a.Symbol;
          var _0x372dd4 = _0x5c5c8a.JSON;
          var _0x1605be = _0x372dd4 && _0x372dd4.stringify;
          var _0xfea973 = "prototype";
          var _0x4df763 = _0x5d38b5("_hidden");
          var _0x5d14f8 = _0x5d38b5("toPrimitive");
          var _0x55d321 = {}.propertyIsEnumerable;
          var _0x118f15 = _0x2177f5("symbol-registry");
          var _0x5da924 = _0x2177f5("symbols");
          var _0x5d17dd = _0x2177f5("op-symbols");
          var _0x447e79 = Object[_0xfea973];
          var _0x34d324 = typeof _0x110f07 == "function" && !!_0x37618e.f;
          var _0x1515d3 = !(_0x2177f5 = _0x5c5c8a.QObject) || !_0x2177f5[_0xfea973] || !_0x2177f5[_0xfea973].findChild;
          var _0x5d6ad8 = _0x1720ad && _0xeab4a6(function () {
            return _0x2ca3ed(_0x5027f7({}, "a", {
              get: function () {
                return _0x5027f7(this, "a", {
                  value: 7
                }).a;
              }
            })).a != 7;
          }) ? function (_0x23290f, _0x26bef7, _0x44660f) {
            var _0x346997 = _0x40918e(_0x447e79, _0x26bef7);
            if (_0x346997) {
              delete _0x447e79[_0x26bef7];
            }
            _0x5027f7(_0x23290f, _0x26bef7, _0x44660f);
            if (_0x346997 && _0x23290f !== _0x447e79) {
              _0x5027f7(_0x447e79, _0x26bef7, _0x346997);
            }
          } : _0x5027f7;
          var _0x394dde = _0x34d324 && typeof _0x110f07.iterator == "symbol" ? function (_0xccb5ca) {
            return typeof _0xccb5ca == "symbol";
          } : function (_0x267cfa) {
            return _0x267cfa instanceof _0x110f07;
          };
          function _0x5f9ff9(_0xb97fe2, _0x5573bc, _0x429e7d) {
            if (_0xb97fe2 === _0x447e79) {
              _0x5f9ff9(_0x5d17dd, _0x5573bc, _0x429e7d);
            }
            _0x2bbbfd(_0xb97fe2);
            _0x5573bc = _0x8a0030(_0x5573bc, true);
            _0x2bbbfd(_0x429e7d);
            if (_0x10f57a(_0x5da924, _0x5573bc)) {
              if (_0x429e7d.enumerable) {
                if (_0x10f57a(_0xb97fe2, _0x4df763) && _0xb97fe2[_0x4df763][_0x5573bc]) {
                  _0xb97fe2[_0x4df763][_0x5573bc] = false;
                }
                _0x429e7d = _0x2ca3ed(_0x429e7d, {
                  enumerable: _0x440a51(0, false)
                });
              } else {
                if (!_0x10f57a(_0xb97fe2, _0x4df763)) {
                  _0x5027f7(_0xb97fe2, _0x4df763, _0x440a51(1, {}));
                }
                _0xb97fe2[_0x4df763][_0x5573bc] = true;
              }
              return _0x5d6ad8(_0xb97fe2, _0x5573bc, _0x429e7d);
            } else {
              return _0x5027f7(_0xb97fe2, _0x5573bc, _0x429e7d);
            }
          }
          if (!_0x34d324) {
            _0x300a59((_0x110f07 = function () {
              if (this instanceof _0x110f07) {
                throw TypeError(".......");
              }
              var _0x59b4b1 = _0x50c4ff(arguments.length > 0 ? arguments[0] : undefined);
              function _0x100ca5(_0x1d388b) {
                if (this === _0x447e79) {
                  _0x100ca5.call(_0x5d17dd, _0x1d388b);
                }
                if (_0x10f57a(this, _0x4df763) && _0x10f57a(this[_0x4df763], _0x59b4b1)) {
                  this[_0x4df763][_0x59b4b1] = false;
                }
                _0x5d6ad8(this, _0x59b4b1, _0x440a51(1, _0x1d388b));
              }
              if (_0x1720ad && _0x1515d3) {
                _0x5d6ad8(_0x447e79, _0x59b4b1, {
                  configurable: true,
                  set: _0x100ca5
                });
              }
              return _0x1486ce(_0x59b4b1);
            })[_0xfea973], "toString", function () {
              return this._k;
            });
            _0x3c2cf4.f = _0x5e75e8;
            _0x3bc911.f = _0x5f9ff9;
            _0x14a6d4(3230).f = _0x2936be.f = _0x5e2ecb;
            _0x14a6d4(6274).f = _0x1755df;
            _0x37618e.f = _0x89b2d5;
            if (_0x1720ad && !_0x14a6d4(6227)) {
              _0x300a59(_0x447e79, "propertyIsEnumerable", _0x1755df, true);
            }
            _0x5d7608.f = function (_0x25ca8f) {
              return _0x1486ce(_0x5d38b5(_0x25ca8f));
            };
          }
          _0x4f3fed(_0x4f3fed.G + _0x4f3fed.W + _0x4f3fed.F * !_0x34d324, {
            Symbol: _0x110f07
          });
          for (var _0x455ba1 = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), _0x45804 = 0; _0x455ba1.length > _0x45804;) {
            _0x5d38b5(_0x455ba1[_0x45804++]);
          }
          for (var _0x442608 = _0x413c80(_0x5d38b5.store), _0x264b95 = 0; _0x442608.length > _0x264b95;) {
            _0x1d7920(_0x442608[_0x264b95++]);
          }
          _0x4f3fed(_0x4f3fed.S + _0x4f3fed.F * !_0x34d324, "Symbol", {
            for: function (_0x1ce341) {
              if (_0x10f57a(_0x118f15, _0x1ce341 += "")) {
                return _0x118f15[_0x1ce341];
              } else {
                return _0x118f15[_0x1ce341] = _0x110f07(_0x1ce341);
              }
            },
            keyFor: function (_0x235273) {
              if (!_0x394dde(_0x235273)) {
                throw TypeError(".......");
              }
              for (var _0x5b4245 in _0x118f15) {
                if (_0x118f15[_0x5b4245] === _0x235273) {
                  return _0x5b4245;
                }
              }
            },
            useSetter: function () {
              _0x1515d3 = true;
            },
            useSimple: function () {
              _0x1515d3 = false;
            }
          });
          _0x4f3fed(_0x4f3fed.S + _0x4f3fed.F * !_0x34d324, "Object", {
            create: function (_0xef0773, _0x254fd6) {
              if (_0x254fd6 === undefined) {
                return _0x2ca3ed(_0xef0773);
              } else {
                return _0x3af2c0(_0x2ca3ed(_0xef0773), _0x254fd6);
              }
            },
            defineProperty: _0x5f9ff9,
            defineProperties: _0x3af2c0,
            getOwnPropertyDescriptor: _0x5e75e8,
            getOwnPropertyNames: _0x5e2ecb,
            getOwnPropertySymbols: _0x89b2d5
          });
          _0x413c80 = _0xeab4a6(function () {
            _0x37618e.f(1);
          });
          _0x4f3fed(_0x4f3fed.S + _0x4f3fed.F * _0x413c80, "Object", {
            getOwnPropertySymbols: function (_0x271c69) {
              return _0x37618e.f(_0x38f8fe(_0x271c69));
            }
          });
          if (_0x372dd4) {
            _0x4f3fed(_0x4f3fed.S + _0x4f3fed.F * (!_0x34d324 || _0xeab4a6(function () {
              var _0x3d4076 = _0x110f07();
              return _0x1605be([_0x3d4076]) != "[null]" || _0x1605be({
                a: _0x3d4076
              }) != "{}" || _0x1605be(Object(_0x3d4076)) != "{}";
            })), "JSON", {
              stringify: function (_0xb87629) {
                for (var _0x286968, _0x43d772, _0x3dde7a = [_0xb87629], _0x3f4308 = 1; _0x3f4308 < arguments.length;) {
                  _0x3dde7a.push(arguments[_0x3f4308++]);
                }
                _0x43d772 = _0x286968 = _0x3dde7a[1];
                if ((_0x237504(_0x286968) || _0xb87629 !== undefined) && !_0x394dde(_0xb87629)) {
                  if (!_0xcc6c8(_0x286968)) {
                    _0x286968 = function (_0x48d7cc, _0x292d77) {
                      if (typeof _0x43d772 == "function") {
                        _0x292d77 = _0x43d772.call(this, _0x48d7cc, _0x292d77);
                      }
                      if (!_0x394dde(_0x292d77)) {
                        return _0x292d77;
                      }
                    };
                  }
                  _0x3dde7a[1] = _0x286968;
                  return _0x1605be.apply(_0x372dd4, _0x3dde7a);
                }
              }
            });
          }
          if (!_0x110f07[_0xfea973][_0x5d14f8]) {
            _0x14a6d4(1818)(_0x110f07[_0xfea973], _0x5d14f8, _0x110f07[_0xfea973].valueOf);
          }
          _0x4090bf(_0x110f07, "Symbol");
          _0x4090bf(Math, "Math", true);
          _0x4090bf(_0x5c5c8a.JSON, "JSON", true);
        },
        8174: (_0x4f91b9, _0x44622f, _0x191a88) => {
          _0x191a88(6347)("asyncIterator");
        },
        6461: (_0x7c396d, _0x3da09f, _0x4d59e4) => {
          _0x4d59e4(6347)("observable");
        },
        3871: (_0xb3c88, _0xb771a7, _0xa34ad0) => {
          _0xa34ad0(3882);
          for (var _0x264c50 = _0xa34ad0(3938), _0xae5a39 = _0xa34ad0(1818), _0x42857b = _0xa34ad0(5449), _0x392355 = _0xa34ad0(2939)("toStringTag"), _0x3843bd = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","), _0x5ed636 = 0; _0x5ed636 < _0x3843bd.length; _0x5ed636++) {
            var _0x436f17;
            var _0xe52eae = _0x3843bd[_0x5ed636];
            if ((_0x436f17 = (_0x436f17 = _0x264c50[_0xe52eae]) && _0x436f17.prototype) && !_0x436f17[_0x392355]) {
              _0xae5a39(_0x436f17, _0x392355, _0xe52eae);
            }
            _0x42857b[_0xe52eae] = _0x42857b.Array;
          }
        },
        5809: function (_0x4198fa) {
          var _0x13e967;
          _0x13e967 = function () {
            'got it';
  
            return function (_0x43308a, _0x52d09a) {
              function _0x1a74f2() {}
              function _0xf0d3e1(_0x2ccc32) {
                // TOLOOK
                setTimeout(_0x2ccc32 || _0x1a74f2, 0);
              }
              var _0x29c7e5 = !!window.addEventListener;
              var _0x21b3b6 = "ontouchstart" in window || window.DocumentTouch && document instanceof window.DocumentTouch;
              var _0x3cd3b2 = function (_0x4102cb) {
                var _0x2d9216;
                var _0x27cd14 = ["transitionProperty", "WebkitTransition", "MozTransition", "OTransition", "msTransition"];
                for (_0x2d9216 in _0x27cd14) {
                  if (_0x4102cb.style[_0x27cd14[_0x2d9216]] !== undefined) {
                    return true;
                  }
                }
                return false;
              }(document.createElement("swipe"));
              if (_0x43308a) {
                var _0xcd9717;
                var _0x24cbab;
                var _0x579a34;
                var _0x4531af = _0x43308a.children[0];
                _0x52d09a = _0x52d09a || {};
                var _0x370396 = _0x4531af.children.length;
                var _0x297b22 = _0x43308a.getBoundingClientRect().width || _0x43308a.offsetWidth;
                var _0x1311a4 = parseInt(_0x52d09a.startSlide, 10) || 0;
                var _0x3d0986 = _0x52d09a.speed || 300;
                var _0x57d255 = _0x52d09a.offset || 0;
                var _0x3e2ab1 = _0x52d09a.continuous = _0x52d09a.continuous !== undefined && _0x52d09a.continuous;
                if (_0x3e2ab1) {
                  (function () {
                    var _0x5561a9 = _0x4531af.children.length;
                    if (_0x5561a9 == 2 || _0x5561a9 == 3) {
                      for (var _0x1e9efc = 0; _0x1e9efc < _0x5561a9; _0x1e9efc++) {
                        var _0x4ef23e = _0x4531af.children[_0x1e9efc];
                        var _0x3e9d9a = _0x4ef23e.cloneNode(true);
                        (function (_0xe07768, _0x5f08e3) {
                          _0x5f08e3.addEventListener("click", function (_0x3b860c) {
                            for (var _0x47070d = _0x3b860c.target.nodeName, _0x349236 = _0x3b860c.target.attributes, _0x42b55b = _0x47070d, _0x434d94 = 0; _0x434d94 < _0x349236.length; _0x434d94++) {
                              var _0x197ffd = _0x349236[_0x434d94];
                              if (_0x434d94 > 0) {
                                _0x42b55b += ",";
                              }
                              _0x42b55b += "[" + _0x197ffd.nodeName + "='" + _0x197ffd.nodeValue + "']";
                            }
                            if (!function _0x321e03(_0x40433b) {
                              var _0x14ea83 = _0x40433b.hasAttribute("onclick");
                              if (_0x14ea83) {
                                return true;
                              }
                              for (var _0x155064 = 0; _0x155064 < _0x40433b.children.length; _0x155064++) {
                                if (_0x14ea83 = _0x321e03(_0x40433b.children[_0x155064])) {
                                  return true;
                                }
                              }
                              return _0x14ea83;
                            }(_0xe07768)) {
                              _0xe07768.querySelector(_0x42b55b).click();
                            }
                          }, false);
                          _0x4531af.appendChild(_0x5f08e3);
                        })(_0x4ef23e, _0x3e9d9a);
                      }
                    }
                  })();
                }
                var _0x22f629;
                var _0x501995;
                var _0x4ac820 = _0x52d09a.auto || 0;
                var _0xf382ca = {};
                var _0x257fe2 = {};
                var _0x2bce3c = {
                  handleEvent: function (_0x54c288) {
                    switch (_0x54c288.type) {
                      case "touchstart":
                        this.start(_0x54c288);
                        break;
                      case "touchmove":
                        this.move(_0x54c288);
                        break;
                      case "touchend":
                        _0xf0d3e1(this.end(_0x54c288));
                        break;
                      case "webkitTransitionEnd":
                      case "msTransitionEnd":
                      case "oTransitionEnd":
                      case "otransitionend":
                      case "transitionend":
                        _0xf0d3e1(this.transitionEnd(_0x54c288));
                        break;
                      case "resize":
                        _0xf0d3e1(_0x15ddfc);
                    }
                    if (_0x52d09a.stopPropagation) {
                      _0x54c288.stopPropagation();
                    }
                  },
                  start: function (_0x16040e) {
                    _0x16040e = _0x16040e.touches[0];
                    _0xf382ca = {
                      x: _0x16040e.pageX,
                      y: _0x16040e.pageY,
                      time: +new Date()
                    };
                    _0x501995 = undefined;
                    _0x257fe2 = {};
                    _0x4531af.addEventListener("touchmove", this, false);
                    _0x4531af.addEventListener("touchend", this, false);
                  },
                  move: function (_0xe9e2e6) {
                    var _0x2fbd7c;
                    if (!(_0xe9e2e6.touches.length > 1 || _0xe9e2e6.scale && _0xe9e2e6.scale !== 1 || _0x52d09a.disableScroll)) {
                      _0x2fbd7c = _0xe9e2e6.touches[0];
                      _0x2fbd7c = (_0x257fe2 = {
                        x: _0x2fbd7c.pageX - _0xf382ca.x,
                        y: _0x2fbd7c.pageY - _0xf382ca.y
                      }).x < 0;
                      if (!(_0x501995 = _0x501995 === undefined ? !!(_0x501995 || Math.abs(_0x257fe2.x) < Math.abs(_0x257fe2.y)) : _0x501995)) {
                        _0xe9e2e6.preventDefault();
                        _0x2fa9bf();
                        if (_0x3e2ab1) {
                          _0x130fac(_0x40ebaa(_0x1311a4 - 1), _0x257fe2.x + _0x24cbab[_0x40ebaa(_0x1311a4 - 1)], 0);
                          _0x130fac(_0x1311a4, _0x257fe2.x + _0x24cbab[_0x1311a4], 0);
                          _0x130fac(_0x40ebaa(_0x1311a4 + 1), _0x257fe2.x + _0x24cbab[_0x40ebaa(_0x1311a4 + 1)], 0);
                          if (_0x2fbd7c) {
                            _0x130fac(_0x40ebaa(_0x1311a4 + 2), _0x257fe2.x + _0x579a34 * 2, 0);
                          } else {
                            _0x130fac(_0x40ebaa(_0x1311a4 - 2), -_0x257fe2.x - _0x579a34 * 2, 0);
                          }
                        } else {
                          _0x257fe2.x = _0x257fe2.x / (!_0x1311a4 && _0x257fe2.x > 0 || _0x1311a4 == _0xcd9717.length - 1 && _0x257fe2.x < 0 ? Math.abs(_0x257fe2.x) / _0x579a34 + 1 : 1);
                          _0x130fac(_0x1311a4 - 1, _0x257fe2.x + _0x24cbab[_0x1311a4 - 1], 0);
                          _0x130fac(_0x1311a4, _0x257fe2.x + _0x24cbab[_0x1311a4], 0);
                          _0x130fac(_0x1311a4 + 1, _0x257fe2.x + _0x24cbab[_0x1311a4 + 1], 0);
                        }
                        if (_0x52d09a.swiping) {
                          _0x52d09a.swiping(-_0x257fe2.x / _0x579a34);
                        }
                      }
                    }
                  },
                  end: function (_0x432713) {
                    var _0x3411f6 = +new Date() - _0xf382ca.time;
                    var _0x3f3ff6 = Number(_0x3411f6) < 250 && Math.abs(_0x257fe2.x) > 20 || Math.abs(_0x257fe2.x) > _0x579a34 / 2;
                    var _0x5c7d45 = !_0x1311a4 && _0x257fe2.x > 0 || _0x1311a4 == _0xcd9717.length - 1 && _0x257fe2.x < 0;
                    if (_0x3e2ab1) {
                      _0x5c7d45 = false;
                    }
                    _0x3411f6 = _0x257fe2.x < 0;
                    if (!_0x501995) {
                      if (_0x3f3ff6 && !_0x5c7d45) {
                        if (_0x3411f6) {
                          if (_0x3e2ab1) {
                            _0x40ccc6(_0x40ebaa(_0x1311a4 - 1), -_0x579a34, _0x3d0986);
                            _0x40ccc6(_0x40ebaa(_0x1311a4 + 2), _0x579a34, _0x3d0986);
                            _0x40ccc6(_0x1311a4, _0x24cbab[_0x1311a4] - _0x579a34, _0x3d0986);
                            _0x40ccc6(_0x40ebaa(_0x1311a4 + 1), _0x24cbab[_0x40ebaa(_0x1311a4 + 1)] - _0x579a34, _0x3d0986);
                            _0x1311a4 = _0x40ebaa(_0x1311a4 + 1);
                          } else {
                            _0x1311a4 = _0x40ebaa(_0x1311a4 + 1);
                            for (var _0x53b8a0 = 0; _0x53b8a0 < _0x24cbab.length; _0x53b8a0++) {
                              _0x40ccc6(_0x53b8a0, _0x579a34 * (_0x53b8a0 - _0x1311a4), Math.round(_0x53b8a0 - _0x1311a4) > 1 ? 0 : _0x3d0986);
                            }
                          }
                        } else if (_0x3e2ab1) {
                          _0x40ccc6(_0x40ebaa(_0x1311a4 + 1), _0x579a34, _0x3d0986);
                          _0x40ccc6(_0x40ebaa(_0x1311a4 - 2), -_0x579a34, _0x3d0986);
                          _0x40ccc6(_0x1311a4, _0x24cbab[_0x1311a4] + _0x579a34, _0x3d0986);
                          _0x40ccc6(_0x40ebaa(_0x1311a4 - 1), _0x24cbab[_0x40ebaa(_0x1311a4 - 1)] + _0x579a34, _0x3d0986);
                          _0x1311a4 = _0x40ebaa(_0x1311a4 - 1);
                        } else {
                          _0x1311a4 = _0x40ebaa(_0x1311a4 - 1);
                          _0x53b8a0 = 0;
                          _0x1311a4 = _0x40ebaa(_0x1311a4 - 1);
                          _0x53b8a0 = 0;
                          for (; _0x53b8a0 < _0x24cbab.length; _0x53b8a0++) {
                            _0x40ccc6(_0x53b8a0, _0x53b8a0 <= _0x1311a4 ? -_0x579a34 * (_0x1311a4 - _0x53b8a0) : _0x579a34 * (_0x53b8a0 - _0x1311a4), _0x3d0986);
                          }
                        }
                        _0x55de22();
                        if (_0x52d09a.callback) {
                          _0x52d09a.callback(_0x1311a4 % _0x370396, _0xcd9717[_0x1311a4]);
                        }
                      } else if (_0x3e2ab1) {
                        _0x40ccc6(_0x40ebaa(_0x1311a4 - 1), -_0x579a34, _0x3d0986);
                        _0x40ccc6(_0x1311a4, 0, _0x3d0986);
                        _0x40ccc6(_0x40ebaa(_0x1311a4 + 1), _0x579a34, _0x3d0986);
                      } else {
                        _0x4531af.click();
                        _0x40ccc6(_0x1311a4 - 1, -_0x579a34, _0x3d0986);
                        _0x40ccc6(_0x1311a4, 0, _0x3d0986);
                        _0x40ccc6(_0x1311a4 + 1, _0x579a34, _0x3d0986);
                      }
                    }
                    _0x4531af.removeEventListener("touchmove", _0x2bce3c, false);
                    _0x4531af.removeEventListener("touchend", _0x2bce3c, false);
                    _0x4531af.removeEventListener("touchforcechange", function () {}, false);
                  },
                  transitionEnd: function (_0x2996e7) {
                    if (parseInt(_0x2996e7.target.getAttribute("data-index"), 10) == _0x1311a4) {
                      if (_0x4ac820) {
                        _0x56a982();
                      }
                      if (_0x52d09a.transitionEnd) {
                        _0x52d09a.transitionEnd.call(_0x2996e7, _0x1311a4 % _0x370396, _0xcd9717[_0x1311a4]);
                      }
                    }
                  }
                };
                _0x15ddfc();
                if (_0x4ac820) {
                  _0x56a982();
                }
                if (_0x29c7e5) {
                  if (_0x21b3b6) {
                    _0x4531af.addEventListener("touchstart", _0x2bce3c, false);
                    _0x4531af.addEventListener("touchforcechange", function () {}, false);
                  }
                  if (_0x3cd3b2) {
                    _0x4531af.addEventListener("webkitTransitionEnd", _0x2bce3c, false);
                    _0x4531af.addEventListener("msTransitionEnd", _0x2bce3c, false);
                    _0x4531af.addEventListener("oTransitionEnd", _0x2bce3c, false);
                    _0x4531af.addEventListener("otransitionend", _0x2bce3c, false);
                    _0x4531af.addEventListener("transitionend", _0x2bce3c, false);
                  }
                  window.addEventListener("resize", _0x2bce3c, false);
                } else {
                  window.onresize = function () {
                    _0x15ddfc();
                  };
                }
                return {
                  setup: function () {
                    _0x15ddfc();
                  },
                  slide: function (_0x2495b0, _0x1bbf86) {
                    _0x2fa9bf();
                    _0x55b5a8(_0x2495b0, _0x1bbf86);
                  },
                  prev: function () {
                    _0x2fa9bf();
                    if (_0x3e2ab1) {
                      _0x130fac(_0x40ebaa(_0x1311a4 - 2), -_0x579a34 * 2, 0);
                    }
                    // TOLOOK
                    setTimeout(function () {
                      if (_0x3e2ab1 || _0x1311a4) {
                        _0x55b5a8(_0x1311a4 - 1);
                      }
                    }, 20);
                  },
                  next: function () {
                    _0x2fa9bf();
                    _0xda2978();
                  },
                  stop: function () {
                    _0x2fa9bf(true);
                  },
                  getPos: function () {
                    return _0x1311a4 % _0x370396;
                  },
                  getNumSlides: function () {
                    return _0x370396;
                  },
                  kill: function () {
                    _0x2fa9bf(true);
                    _0x4531af.style.width = "";
                    _0x4531af.style.left = "";
                    for (var _0x1e97a0 = _0xcd9717.length; _0x1e97a0--;) {
                      var _0x3d68b8 = _0xcd9717[_0x1e97a0];
                      _0x3d68b8.style.width = "";
                      _0x3d68b8.style.left = "";
                      if (_0x3cd3b2) {
                        _0x130fac(_0x1e97a0, 0, 0);
                      }
                    }
                    if (_0x29c7e5) {
                      _0x4531af.removeEventListener("touchstart", _0x2bce3c, false);
                      _0x4531af.removeEventListener("webkitTransitionEnd", _0x2bce3c, false);
                      _0x4531af.removeEventListener("msTransitionEnd", _0x2bce3c, false);
                      _0x4531af.removeEventListener("oTransitionEnd", _0x2bce3c, false);
                      _0x4531af.removeEventListener("otransitionend", _0x2bce3c, false);
                      _0x4531af.removeEventListener("transitionend", _0x2bce3c, false);
                      window.removeEventListener("resize", _0x2bce3c, false);
                    } else {
                      window.onresize = null;
                    }
                  }
                };
              }
              function _0x15ddfc() {
                (_0xcd9717 = _0x4531af.children).length;
                _0x3e2ab1 = !(_0xcd9717.length < 2) && _0x52d09a.continuous;
                _0x24cbab = new Array(_0xcd9717.length);
                _0x579a34 = Math.round(_0x52d09a.width || _0x297b22);
                _0x4531af.style.width = _0xcd9717.length * _0x579a34 + "px";
                for (var _0x394325 = _0xcd9717.length; _0x394325--;) {
                  var _0x2de4c8 = _0xcd9717[_0x394325];
                  _0x2de4c8.style.width = _0x579a34 + "px";
                  _0x2de4c8.style.zIndex = _0x1311a4 == _0x394325 ? 1 : 0;
                  _0x2de4c8.setAttribute("data-index", _0x394325);
                  if (_0x3cd3b2) {
                    _0x2de4c8.style.left = _0x394325 * -_0x579a34 + _0x57d255 + "px";
                    _0x40ccc6(_0x394325, _0x394325 < _0x1311a4 ? -_0x579a34 * _0x394325 : _0x1311a4 < _0x394325 ? _0x579a34 * _0x394325 : 0, 0);
                  }
                }
                if (_0x3e2ab1 && _0x3cd3b2) {
                  _0x40ccc6(_0x40ebaa(_0x1311a4 - 1), -_0x579a34, 0);
                  _0x40ccc6(_0x40ebaa(_0x1311a4 + 1), _0x579a34, 0);
                }
                if (!_0x3cd3b2) {
                  _0x4531af.style.left = _0x1311a4 * -_0x579a34 + _0x57d255 + "px";
                }
                _0x43308a.style.visibility = "visible";
                _0x55de22();
              }
              function _0xda2978() {
                if (_0x3e2ab1) {
                  _0x130fac(_0x40ebaa(_0x1311a4 + 2), _0x579a34 * 2, 0);
                }
                // TOLOOK
                setTimeout(function () {
                  if (_0x3e2ab1 || _0x1311a4 < _0xcd9717.length - 1) {
                    _0x55b5a8(_0x1311a4 + 1);
                  }
                }, 20);
              }
              function _0x40ebaa(_0x1e64b0) {
                return (_0xcd9717.length + _0x1e64b0 % _0xcd9717.length) % _0xcd9717.length;
              }
              function _0x55b5a8(_0x54299c, _0x35df15) {
                if (_0x1311a4 != _0x54299c) {
                  _0x35df15 = _0x35df15 || _0x3d0986;
                  if (_0x3cd3b2) {
                    var _0x3085fc = Math.abs(_0x1311a4 - _0x54299c) / (_0x54299c - _0x1311a4);
                    if (_0x3e2ab1) {
                      _0x40ccc6(_0x40ebaa((_0x54299c -= _0x3085fc) - _0x3085fc), -_0x579a34 * _0x3085fc, _0x35df15 / 3);
                      _0x40ccc6(_0x40ebaa(_0x54299c + _0x3085fc * 2), _0x579a34 * _0x3085fc, _0x35df15);
                      _0x40ccc6(_0x54299c, _0x24cbab[_0x54299c] - _0x579a34 * _0x3085fc, _0x35df15);
                      _0x40ccc6(_0x40ebaa(_0x54299c + _0x3085fc), _0x24cbab[_0x40ebaa(_0x54299c + _0x3085fc)] - _0x579a34 * _0x3085fc, _0x35df15);
                      _0x54299c = _0x40ebaa(_0x54299c + _0x3085fc);
                    } else {
                      _0x54299c = _0x40ebaa(_0x54299c);
                      for (var _0x4e7e8c = 0; _0x4e7e8c < _0x24cbab.length; _0x4e7e8c++) {
                        _0x40ccc6(_0x4e7e8c, _0x579a34 * (_0x4e7e8c - _0x54299c), Math.abs(_0x4e7e8c - _0x54299c) > 1 ? 0 : _0x35df15);
                      }
                    }
                  } else {
                    _0x54299c = _0x40ebaa(_0x54299c);
                    _0x53601d = _0x1311a4 * -_0x579a34;
                    _0x4d764b = _0x54299c * -_0x579a34;
                    if (_0x4e9191 = _0x35df15) {
                      _0x2a7dcb = +new Date();
                      _0x5c5c47 = // TOLOOK
                      setInterval(function () {
                        var _0x29bc2f = +new Date() - _0x2a7dcb;
                        if (_0x4e9191 < _0x29bc2f) {
                          _0x4531af.style.left = _0x4d764b + "px";
                          if (_0x4ac820) {
                            _0x56a982();
                          }
                          if (_0x52d09a.transitionEnd) {
                            _0x52d09a.transitionEnd.call(event, _0x1311a4 % _0x370396, _0xcd9717[_0x1311a4]);
                          }
                          clearInterval(_0x5c5c47);
                          return;
                        }
                        _0x4531af.style.left = (_0x4d764b - _0x53601d) * (Math.floor(_0x29bc2f / _0x4e9191 * 100) / 100) + _0x53601d + "px";
                      }, 4);
                    } else {
                      _0x4531af.style.left = _0x4d764b + "px";
                    }
                  }
                  var _0x53601d;
                  var _0x4d764b;
                  var _0x4e9191;
                  var _0x2a7dcb;
                  var _0x5c5c47;
                  _0x1311a4 = _0x54299c;
                  _0x55de22();
                  _0xf0d3e1(_0x52d09a.callback && _0x52d09a.callback(_0x1311a4 % _0x370396, _0xcd9717[_0x1311a4]));
                }
              }
              function _0x40ccc6(_0x15ef16, _0x49e88d, _0x301dfe) {
                _0x130fac(_0x15ef16, _0x49e88d, _0x301dfe);
                _0x24cbab[_0x15ef16] = _0x49e88d;
              }
              function _0x130fac(_0x21f1e9, _0xb7fa8a, _0x2d9e12) {
                var _0x95280d;
                if (_0x95280d = (_0x95280d = _0xcd9717[_0x21f1e9]) && _0x95280d.style) {
                  _0x95280d.zIndex = _0x1311a4 == _0x21f1e9 ? 1 : 0;
                  _0x95280d.webkitTransitionDuration = _0x95280d.MozTransitionDuration = _0x95280d.msTransitionDuration = _0x95280d.OTransitionDuration = _0x95280d.transitionDuration = _0x2d9e12 + "ms";
                  _0x95280d.webkitTransform = "translate(" + _0xb7fa8a + "px,0)translateZ(0)";
                  _0x95280d.msTransform = _0x95280d.MozTransform = _0x95280d.OTransform = "translateX(" + _0xb7fa8a + "px)";
                }
              }
              function _0x55de22() {
                if (_0x3e2ab1) {
                  for (var _0x4ce05f = 0; _0x4ce05f < _0xcd9717.length; _0x4ce05f++) {
                    if (_0x4ce05f == _0x40ebaa(_0x1311a4 - 1) || _0x4ce05f == _0x1311a4 || _0x4ce05f == _0x40ebaa(_0x1311a4 + 1)) {
                      _0xcd9717[_0x4ce05f].style.visibility = "visible";
                    } else {
                      _0xcd9717[_0x4ce05f].style.visibility = "hidden";
                    }
                  }
                }
              }
              function _0x56a982() {
                clearTimeout(_0x22f629);
                _0x22f629 = // TOLOOK
                setTimeout(_0xda2978, _0x4ac820);
              }
              function _0x2fa9bf(_0x39f095) {
                if (_0x39f095) {
                  _0x4ac820 = 0;
                }
                clearTimeout(_0x22f629);
              }
            };
          };
          if (_0x4198fa.exports) {
            _0x4198fa.exports = _0x13e967();
          } else {
            this.lightSwiper = _0x13e967();
          }
        },
        3267: function (_0x3803b8, _0x32b466, _0x80d65b) {
          var _0x1e0dff;
          var _0x2ff683;
          var _0x1a1307;
          (function (_0x536850, _0x2bd7be) {
            var _0x21c198 = (_0x536850 = _0x536850 || _0x80d65b(4158)).window;
            var _0x13c74c = _0x536850.document;
            var _0x28b48a = new function () {
              function _0x53da80(_0x18757b, _0x3bafdb) {
                for (var _0x1ec283 in this) {
                  if (this.hasOwnProperty(_0x1ec283)) {
                    _0x18757b.call(_0x3bafdb, this[_0x1ec283], _0x1ec283, this);
                  }
                }
              }
              function _0x184a11(_0x5b23b8, _0x1bf8f7, _0x1c0925) {
                var _0x27378e;
                if (_0x5b23b8) {
                  ((_0x27378e = _0x57b1fc(_0x5b23b8, "length")) && typeof _0x27378e.value == "number" ? _0x21eacf : _0x53da80).call(_0x5b23b8, _0x1bf8f7, _0x1c0925 = _0x1c0925 || _0x5b23b8);
                }
                return _0x1c0925;
              }
              var _0x25d990 = /^(statics|enumerable|beans|preserve)$/;
              var _0x4642ed = [];
              var _0x1b567c = _0x4642ed.slice;
              var _0x384cba = Object.create;
              var _0x57b1fc = Object.getOwnPropertyDescriptor;
              var _0x407c87 = Object.defineProperty;
              var _0x21eacf = _0x4642ed.forEach || function (_0x3e2740, _0x993e2c) {
                for (var _0x576f54 = 0, _0x598f75 = this.length; _0x576f54 < _0x598f75; _0x576f54++) {
                  _0x3e2740.call(_0x993e2c, this[_0x576f54], _0x576f54, this);
                }
              };
              var _0x2a59f2 = Object.assign || function (_0x16087a) {
                for (var _0x89e643 = 1, _0x4791aa = arguments.length; _0x89e643 < _0x4791aa; _0x89e643++) {
                  var _0x5036f0;
                  var _0x580043 = arguments[_0x89e643];
                  for (_0x5036f0 in _0x580043) {
                    if (_0x580043.hasOwnProperty(_0x5036f0)) {
                      _0x16087a[_0x5036f0] = _0x580043[_0x5036f0];
                    }
                  }
                }
                return _0x16087a;
              };
              function _0x51120b(_0x370f05, _0x179f77, _0x8cc53a, _0x509b03, _0x477afa) {
                var _0x126eb0 = {};
                function _0x16bb31(_0x45cf29, _0x1b065d) {
                  var _0x6bb6cd;
                  var _0x3f42bd = typeof (_0x1b065d = typeof (_0x1b065d = _0x1b065d || (_0x1b065d = _0x57b1fc(_0x179f77, _0x45cf29)) && (_0x1b065d.get ? _0x1b065d : _0x1b065d.value)) == "string" && _0x1b065d[0] === "#" && _0x370f05[_0x1b065d.substring(1)] || _0x1b065d) == "function";
                  var _0x3ee83a = _0x1b065d;
                  var _0x17ba04 = _0x477afa || _0x3f42bd && !_0x1b065d.base ? _0x1b065d && _0x1b065d.get ? _0x45cf29 in _0x370f05 : _0x370f05[_0x45cf29] : null;
                  if (!(_0x477afa && _0x17ba04)) {
                    if (_0x3f42bd && _0x17ba04) {
                      _0x1b065d.base = _0x17ba04;
                    }
                    if (_0x3f42bd && _0x509b03 !== false && (_0x6bb6cd = _0x45cf29.match(/^([gs]et|is)(([A-Z])(.*))$/))) {
                      _0x126eb0[_0x6bb6cd[3].toLowerCase() + _0x6bb6cd[4]] = _0x6bb6cd[2];
                    }
                    if (!(_0x3ee83a && !_0x3f42bd && _0x3ee83a.get && typeof _0x3ee83a.get == "function" && _0x49ab87.isPlainObject(_0x3ee83a))) {
                      _0x3ee83a = {
                        value: _0x3ee83a,
                        writable: true
                      };
                    }
                    if ((_0x57b1fc(_0x370f05, _0x45cf29) || {
                      configurable: true
                    }).configurable) {
                      _0x3ee83a.configurable = true;
                      _0x3ee83a.enumerable = _0x8cc53a != null ? _0x8cc53a : !_0x6bb6cd;
                    }
                    _0x407c87(_0x370f05, _0x45cf29, _0x3ee83a);
                  }
                }
                if (_0x179f77) {
                  for (var _0xcb53a6 in _0x179f77) {
                    if (_0x179f77.hasOwnProperty(_0xcb53a6) && !_0x25d990.test(_0xcb53a6)) {
                      _0x16bb31(_0xcb53a6);
                    }
                  }
                  for (var _0xcb53a6 in _0x126eb0) {
                    var _0x6ffae4 = _0x126eb0[_0xcb53a6];
                    var _0x3ef065 = _0x370f05["set" + _0x6ffae4];
                    if (!(!(_0x6ffae4 = _0x370f05["get" + _0x6ffae4] || _0x3ef065 && _0x370f05["is" + _0x6ffae4]) || _0x509b03 !== true && _0x6ffae4.length !== 0)) {
                      _0x16bb31(_0xcb53a6, {
                        get: _0x6ffae4,
                        set: _0x3ef065
                      });
                    }
                  }
                }
                return _0x370f05;
              }
              function _0x49ab87() {
                for (var _0x17d9f5 = 0, _0x39fd32 = arguments.length; _0x17d9f5 < _0x39fd32; _0x17d9f5++) {
                  var _0x1521f6 = arguments[_0x17d9f5];
                  if (_0x1521f6) {
                    _0x2a59f2(this, _0x1521f6);
                  }
                }
                return this;
              }
              return _0x51120b(_0x49ab87, {
                inject: function (_0x82ad0a) {
                  var _0x543da8;
                  var _0x16c705;
                  var _0x3345c0;
                  if (_0x82ad0a) {
                    _0x543da8 = _0x82ad0a.statics === true ? _0x82ad0a : _0x82ad0a.statics;
                    _0x16c705 = _0x82ad0a.beans;
                    _0x3345c0 = _0x82ad0a.preserve;
                    if (_0x543da8 !== _0x82ad0a) {
                      _0x51120b(this.prototype, _0x82ad0a, _0x82ad0a.enumerable, _0x16c705, _0x3345c0);
                    }
                    _0x51120b(this, _0x543da8, null, _0x16c705, _0x3345c0);
                  }
                  for (var _0x17a9a8 = 1, _0x259de6 = arguments.length; _0x17a9a8 < _0x259de6; _0x17a9a8++) {
                    this.inject(arguments[_0x17a9a8]);
                  }
                  return this;
                },
                extend: function () {
                  for (var _0x37b9cc, _0x3f06c4, _0xfc5cd6, _0x3d06d8 = this, _0x1a5c5e = 0, _0x3af377 = arguments.length; _0x1a5c5e < _0x3af377 && (!_0x37b9cc || !_0x3f06c4); _0x1a5c5e++) {
                    _0xfc5cd6 = arguments[_0x1a5c5e];
                    _0x37b9cc = _0x37b9cc || _0xfc5cd6.initialize;
                    _0x3f06c4 = _0x3f06c4 || _0xfc5cd6.prototype;
                  }
                  _0x3f06c4 = (_0x37b9cc = _0x37b9cc || function () {
                    _0x3d06d8.apply(this, arguments);
                  }).prototype = _0x3f06c4 || _0x384cba(this.prototype);
                  _0x407c87(_0x3f06c4, "constructor", {
                    value: _0x37b9cc,
                    writable: true,
                    configurable: true
                  });
                  _0x51120b(_0x37b9cc, this);
                  if (arguments.length) {
                    this.inject.apply(_0x37b9cc, arguments);
                  }
                  _0x37b9cc.base = _0x3d06d8;
                  return _0x37b9cc;
                }
              }).inject({
                enumerable: false,
                initialize: _0x49ab87,
                set: _0x49ab87,
                inject: function () {
                  for (var _0x3169cb = 0, _0x10b265 = arguments.length; _0x3169cb < _0x10b265; _0x3169cb++) {
                    var _0x29d6cf = arguments[_0x3169cb];
                    if (_0x29d6cf) {
                      _0x51120b(this, _0x29d6cf, _0x29d6cf.enumerable, _0x29d6cf.beans, _0x29d6cf.preserve);
                    }
                  }
                  return this;
                },
                extend: function () {
                  var _0x1bd8f6 = _0x384cba(this);
                  return _0x1bd8f6.inject.apply(_0x1bd8f6, arguments);
                },
                each: function (_0x2e8277, _0x307f8c) {
                  return _0x184a11(this, _0x2e8277, _0x307f8c);
                },
                clone: function () {
                  return new this.constructor(this);
                },
                statics: {
                  set: _0x2a59f2,
                  each: _0x184a11,
                  create: _0x384cba,
                  define: _0x407c87,
                  describe: _0x57b1fc,
                  clone: function (_0x7074cb) {
                    return _0x2a59f2(new _0x7074cb.constructor(), _0x7074cb);
                  },
                  isPlainObject: function (_0x2dc611) {
                    return (_0x2dc611 = _0x2dc611 != null && _0x2dc611.constructor) && (_0x2dc611 === Object || _0x2dc611 === _0x49ab87 || _0x2dc611.name === "Object");
                  },
                  pick: function (_0x50ffd1, _0x1095de) {
                    if (_0x50ffd1 !== _0x2bd7be) {
                      return _0x50ffd1;
                    } else {
                      return _0x1095de;
                    }
                  },
                  slice: function (_0x523b82, _0x201cee, _0x396c21) {
                    return _0x1b567c.call(_0x523b82, _0x201cee, _0x396c21);
                  }
                }
              });
            }();
            (_0x3803b8.exports = _0x28b48a).inject({
              enumerable: false,
              toString: function () {
                if (this._id != null) {
                  return (this._class || "Object") + (this._name ? " '" + this._name + "'" : " @" + this._id);
                } else {
                  return "{ " + _0x28b48a.each(this, function (_0x4deaa0, _0x410d8d) {
                    if (!/^_/.test(_0x410d8d)) {
                      this.push(_0x410d8d + ": " + ((_0x410d8d = typeof _0x4deaa0) == "number" ? _0x5735bc.instance.number(_0x4deaa0) : _0x410d8d == "string" ? "'" + _0x4deaa0 + "'" : _0x4deaa0));
                    }
                  }, []).join(", ") + " }";
                }
              },
              getClassName: function () {
                return this._class || "";
              },
              importJSON: function (_0xd3f9f6) {
                return _0x28b48a.importJSON(_0xd3f9f6, this);
              },
              exportJSON: function (_0x3c2665) {
                return _0x28b48a.exportJSON(this, _0x3c2665);
              },
              toJSON: function () {
                return _0x28b48a.serialize(this);
              },
              set: function (_0x6a8afc, _0x52f590) {
                if (_0x6a8afc) {
                  _0x28b48a.filter(this, _0x6a8afc, _0x52f590, this._prioritize);
                }
                return this;
              }
            }, {
              beans: false,
              statics: {
                exports: {},
                extend: function _0xc2761d() {
                  var _0x47b73 = _0xc2761d.base.apply(this, arguments);
                  var _0x2c1465 = _0x47b73.prototype._class;
                  if (_0x2c1465 && !_0x28b48a.exports[_0x2c1465]) {
                    _0x28b48a.exports[_0x2c1465] = _0x47b73;
                  }
                  return _0x47b73;
                },
                equals: function (_0x3324d6, _0x2c173d) {
                  if (_0x3324d6 === _0x2c173d) {
                    return true;
                  }
                  if (_0x3324d6 && _0x3324d6.equals) {
                    return _0x3324d6.equals(_0x2c173d);
                  }
                  if (_0x2c173d && _0x2c173d.equals) {
                    return _0x2c173d.equals(_0x3324d6);
                  }
                  if (_0x3324d6 && _0x2c173d && typeof _0x3324d6 == "object" && typeof _0x2c173d == "object") {
                    if (Array.isArray(_0x3324d6) && Array.isArray(_0x2c173d)) {
                      if ((_0x528405 = _0x3324d6.length) !== _0x2c173d.length) {
                        return false;
                      }
                      for (; _0x528405--;) {
                        if (!_0x28b48a.equals(_0x3324d6[_0x528405], _0x2c173d[_0x528405])) {
                          return false;
                        }
                      }
                    } else {
                      var _0x528405;
                      var _0x4ae90c = Object.keys(_0x3324d6);
                      if ((_0x528405 = _0x4ae90c.length) !== Object.keys(_0x2c173d).length) {
                        return false;
                      }
                      for (; _0x528405--;) {
                        var _0x7189ba = _0x4ae90c[_0x528405];
                        if (!_0x2c173d.hasOwnProperty(_0x7189ba) || !_0x28b48a.equals(_0x3324d6[_0x7189ba], _0x2c173d[_0x7189ba])) {
                          return false;
                        }
                      }
                    }
                    return true;
                  }
                  return false;
                },
                read: function (_0x4f4963, _0x2a91fb, _0x58c349, _0x1e14ea) {
                  if (this === _0x28b48a) {
                    var _0xd82ae = this.peek(_0x4f4963, _0x2a91fb);
                    _0x4f4963.__index++;
                    return _0xd82ae;
                  }
                  var _0x37c0bc = this.prototype;
                  var _0x43f3bc = _0x37c0bc._readIndex;
                  var _0x2ed20e = _0x2a91fb || _0x43f3bc && _0x4f4963.__index || 0;
                  _0xd82ae = _0x4f4963.length;
                  _0x1e14ea = _0x1e14ea || _0xd82ae - _0x2ed20e;
                  if ((_0x2a91fb = _0x4f4963[_0x2ed20e]) instanceof this || _0x58c349 && _0x58c349.readNull && _0x2a91fb == null && _0x1e14ea <= 1) {
                    if (_0x43f3bc) {
                      _0x4f4963.__index = _0x2ed20e + 1;
                    }
                    if (_0x2a91fb && _0x58c349 && _0x58c349.clone) {
                      return _0x2a91fb.clone();
                    } else {
                      return _0x2a91fb;
                    }
                  } else {
                    _0x2a91fb = _0x28b48a.create(_0x37c0bc);
                    if (_0x43f3bc) {
                      _0x2a91fb.__read = true;
                    }
                    _0x2a91fb = _0x2a91fb.initialize.apply(_0x2a91fb, _0x2ed20e > 0 || _0x2ed20e + _0x1e14ea < _0xd82ae ? _0x28b48a.slice(_0x4f4963, _0x2ed20e, _0x2ed20e + _0x1e14ea) : _0x4f4963) || _0x2a91fb;
                    if (_0x43f3bc) {
                      _0x4f4963.__index = _0x2ed20e + _0x2a91fb.__read;
                      if (_0x2ed20e = _0x2a91fb.__filtered) {
                        _0x4f4963.__filtered = _0x2ed20e;
                        _0x2a91fb.__filtered = _0x2bd7be;
                      }
                      _0x2a91fb.__read = _0x2bd7be;
                    }
                    return _0x2a91fb;
                  }
                },
                peek: function (_0x551bf8, _0x284ad1) {
                  return _0x551bf8[_0x551bf8.__index = _0x284ad1 || _0x551bf8.__index || 0];
                },
                remain: function (_0x5ecce8) {
                  return _0x5ecce8.length - (_0x5ecce8.__index || 0);
                },
                readList: function (_0x5d9abd, _0x227d0f, _0xd80bad, _0x18bf72) {
                  for (var _0x4cb92f, _0x534731 = [], _0x4f178b = (_0x227d0f = _0x227d0f || 0, _0x18bf72 ? _0x227d0f + _0x18bf72 : _0x5d9abd.length), _0x3c91ef = _0x227d0f; _0x3c91ef < _0x4f178b; _0x3c91ef++) {
                    _0x534731.push(Array.isArray(_0x4cb92f = _0x5d9abd[_0x3c91ef]) ? this.read(_0x4cb92f, 0, _0xd80bad) : this.read(_0x5d9abd, _0x3c91ef, _0xd80bad, 1));
                  }
                  return _0x534731;
                },
                readNamed: function (_0x105c0e, _0x17fa6e, _0x1dca79, _0x61b796, _0x164685) {
                  var _0xb0c206;
                  var _0x2ee169;
                  var _0x427b14 = this.getNamed(_0x105c0e, _0x17fa6e);
                  var _0x44260c = _0x427b14 !== _0x2bd7be;
                  if (_0x44260c) {
                    if (!(_0x2ee169 = _0x105c0e.__filtered)) {
                      _0xb0c206 = this.getSource(_0x105c0e);
                      (_0x2ee169 = _0x105c0e.__filtered = _0x28b48a.create(_0xb0c206)).__unfiltered = _0xb0c206;
                    }
                    _0x2ee169[_0x17fa6e] = _0x2bd7be;
                  }
                  return this.read(_0x44260c ? [_0x427b14] : _0x105c0e, _0x1dca79, _0x61b796, _0x164685);
                },
                readSupported: function (_0x4338d0, _0x4ac6ba) {
                  var _0x5478d7 = this.getSource(_0x4338d0);
                  var _0x10364e = this;
                  var _0x3eb181 = false;
                  if (_0x5478d7) {
                    Object.keys(_0x5478d7).forEach(function (_0x12666b) {
                      var _0x31df9f;
                      if (_0x12666b in _0x4ac6ba) {
                        if ((_0x31df9f = _0x10364e.readNamed(_0x4338d0, _0x12666b)) !== _0x2bd7be) {
                          _0x4ac6ba[_0x12666b] = _0x31df9f;
                        }
                        _0x3eb181 = true;
                      }
                    });
                  }
                  return _0x3eb181;
                },
                getSource: function (_0x68df7e) {
                  var _0x48f2a1;
                  var _0x29ad1f = _0x68df7e.__source;
                  if (_0x29ad1f === _0x2bd7be) {
                    _0x48f2a1 = _0x68df7e.length === 1 && _0x68df7e[0];
                    _0x29ad1f = _0x68df7e.__source = _0x48f2a1 && _0x28b48a.isPlainObject(_0x48f2a1) ? _0x48f2a1 : null;
                  }
                  return _0x29ad1f;
                },
                getNamed: function (_0x10f19d, _0x30189f) {
                  var _0x3e796c = this.getSource(_0x10f19d);
                  if (_0x3e796c) {
                    if (_0x30189f) {
                      return _0x3e796c[_0x30189f];
                    } else {
                      return _0x10f19d.__filtered || _0x3e796c;
                    }
                  }
                },
                hasNamed: function (_0xcff829, _0x1f439a) {
                  return !!this.getNamed(_0xcff829, _0x1f439a);
                },
                filter: function (_0x45473f, _0x2d6d92, _0x4e04c5, _0x1d59b2) {
                  var _0x2df4f9;
                  function _0x464a6d(_0x1c4a24) {
                    var _0x515b68;
                    if (!(_0x4e04c5 && _0x1c4a24 in _0x4e04c5 || _0x2df4f9 && _0x1c4a24 in _0x2df4f9)) {
                      if ((_0x515b68 = _0x2d6d92[_0x1c4a24]) !== _0x2bd7be) {
                        _0x45473f[_0x1c4a24] = _0x515b68;
                      }
                    }
                  }
                  if (_0x1d59b2) {
                    for (var _0x1b2927, _0x52b0c7 = {}, _0x110571 = 0, _0x465ec7 = _0x1d59b2.length; _0x110571 < _0x465ec7; _0x110571++) {
                      if ((_0x1b2927 = _0x1d59b2[_0x110571]) in _0x2d6d92) {
                        _0x464a6d(_0x1b2927);
                        _0x52b0c7[_0x1b2927] = true;
                      }
                    }
                    _0x2df4f9 = _0x52b0c7;
                  }
                  Object.keys(_0x2d6d92.__unfiltered || _0x2d6d92).forEach(_0x464a6d);
                  return _0x45473f;
                },
                isPlainValue: function (_0x206f5b, _0x4d653a) {
                  return _0x28b48a.isPlainObject(_0x206f5b) || Array.isArray(_0x206f5b) || _0x4d653a && typeof _0x206f5b == "string";
                },
                serialize: function (_0x5e326e, _0x880f, _0x24501c, _0x593378) {
                  _0x880f = _0x880f || {};
                  var _0x562c93 = !_0x593378;
                  if (_0x562c93) {
                    _0x880f.formatter = new _0x5735bc(_0x880f.precision);
                    _0x593378 = {
                      length: 0,
                      definitions: {},
                      references: {},
                      add: function (_0x16b7aa, _0x5b5c4d) {
                        var _0x4b01ad = "#" + _0x16b7aa._id;
                        var _0x4f8e2a = this.references[_0x4b01ad];
                        if (!_0x4f8e2a) {
                          this.length++;
                          _0x5b5c4d = _0x5b5c4d.call(_0x16b7aa);
                          if ((_0x16b7aa = _0x16b7aa._class) && _0x5b5c4d[0] !== _0x16b7aa) {
                            _0x5b5c4d.unshift(_0x16b7aa);
                          }
                          this.definitions[_0x4b01ad] = _0x5b5c4d;
                          _0x4f8e2a = this.references[_0x4b01ad] = [_0x4b01ad];
                        }
                        return _0x4f8e2a;
                      }
                    };
                  }
                  if (_0x5e326e && _0x5e326e._serialize) {
                    var _0x52bf11 = _0x5e326e._serialize(_0x880f, _0x593378);
                    var _0x261b63 = _0x5e326e._class;
                    if (!(!_0x261b63 || _0x5e326e._compactSerialize || !_0x562c93 && _0x24501c || _0x52bf11[0] === _0x261b63)) {
                      _0x52bf11.unshift(_0x261b63);
                    }
                  } else if (Array.isArray(_0x5e326e)) {
                    _0x52bf11 = [];
                    for (var _0x26cb5f = 0, _0x35e92c = _0x5e326e.length; _0x26cb5f < _0x35e92c; _0x26cb5f++) {
                      _0x52bf11[_0x26cb5f] = _0x28b48a.serialize(_0x5e326e[_0x26cb5f], _0x880f, _0x24501c, _0x593378);
                    }
                  } else if (_0x28b48a.isPlainObject(_0x5e326e)) {
                    _0x52bf11 = {};
                    var _0x107bec = Object.keys(_0x5e326e);
                    _0x26cb5f = 0;
                    _0x35e92c = _0x107bec.length;
                    for (; _0x26cb5f < _0x35e92c; _0x26cb5f++) {
                      var _0x56c765 = _0x107bec[_0x26cb5f];
                      _0x52bf11[_0x56c765] = _0x28b48a.serialize(_0x5e326e[_0x56c765], _0x880f, _0x24501c, _0x593378);
                    }
                  } else {
                    _0x52bf11 = typeof _0x5e326e == "number" ? _0x880f.formatter.number(_0x5e326e, _0x880f.precision) : _0x5e326e;
                  }
                  if (_0x562c93 && _0x593378.length > 0) {
                    return [["dictionary", _0x593378.definitions], _0x52bf11];
                  } else {
                    return _0x52bf11;
                  }
                },
                deserialize: function (_0x402ea6, _0x4e1c53, _0x448d6d, _0x39b428, _0x9f35d0) {
                  var _0x27cf2b = _0x402ea6;
                  var _0x1635b5 = !_0x448d6d;
                  var _0xd1631b = _0x1635b5 && _0x402ea6 && _0x402ea6.length && _0x402ea6[0][0] === "dictionary";
                  _0x448d6d = _0x448d6d || {};
                  if (Array.isArray(_0x402ea6)) {
                    var _0x10f937 = _0x402ea6[0];
                    var _0xefb2cb = _0x10f937 === "dictionary";
                    if (_0x402ea6.length == 1 && /^#/.test(_0x10f937)) {
                      return _0x448d6d.dictionary[_0x10f937];
                    }
                    _0x27cf2b = [];
                    for (var _0xab002f, _0x620058 = (_0x10f937 = _0x28b48a.exports[_0x10f937]) ? 1 : 0, _0x2311c3 = _0x402ea6.length; _0x620058 < _0x2311c3; _0x620058++) {
                      _0x27cf2b.push(_0x28b48a.deserialize(_0x402ea6[_0x620058], _0x4e1c53, _0x448d6d, _0xefb2cb, _0xd1631b));
                    }
                    if (_0x10f937) {
                      _0xab002f = _0x27cf2b;
                      _0x27cf2b = _0x4e1c53 ? _0x4e1c53(_0x10f937, _0xab002f, _0x1635b5 || _0x9f35d0) : new _0x10f937(_0xab002f);
                    }
                  } else if (_0x28b48a.isPlainObject(_0x402ea6)) {
                    _0x27cf2b = {};
                    if (_0x39b428) {
                      _0x448d6d.dictionary = _0x27cf2b;
                    }
                    for (var _0x4c96d5 in _0x402ea6) {
                      _0x27cf2b[_0x4c96d5] = _0x28b48a.deserialize(_0x402ea6[_0x4c96d5], _0x4e1c53, _0x448d6d);
                    }
                  }
                  if (_0xd1631b) {
                    return _0x27cf2b[1];
                  } else {
                    return _0x27cf2b;
                  }
                },
                exportJSON: function (_0x1f88cb, _0x34e3ff) {
                  _0x1f88cb = _0x28b48a.serialize(_0x1f88cb, _0x34e3ff);
                  if (_0x34e3ff && _0x34e3ff.asString == 0) {
                    return _0x1f88cb;
                  } else {
                    return JSON.stringify(_0x1f88cb);
                  }
                },
                importJSON: function (_0xcb857c, _0x372a5d) {
                  return _0x28b48a.deserialize(typeof _0xcb857c == "string" ? JSON.parse(_0xcb857c) : _0xcb857c, function (_0x48e924, _0x431010, _0x392de4) {
                    var _0x9da821 = _0x392de4 && _0x372a5d && _0x372a5d.constructor === _0x48e924;
                    var _0x239c23 = _0x9da821 ? _0x372a5d : _0x28b48a.create(_0x48e924.prototype);
                    if (!(!(_0x431010.length === 1 && _0x239c23 instanceof _0x1f30bb) || !_0x9da821 && _0x239c23 instanceof _0xcb7ead)) {
                      _0x392de4 = _0x431010[0];
                      if (_0x28b48a.isPlainObject(_0x392de4)) {
                        _0x392de4.insert = false;
                        if (_0x9da821) {
                          _0x431010 = _0x431010.concat([{
                            insert: true
                          }]);
                        }
                      }
                    }
                    (_0x9da821 ? _0x239c23.set : _0x48e924).apply(_0x239c23, _0x431010);
                    if (_0x9da821) {
                      _0x372a5d = null;
                    }
                    return _0x239c23;
                  });
                },
                push: function (_0x5ce963, _0x77ca9a) {
                  var _0x324526 = _0x77ca9a.length;
                  if (_0x324526 < 4096) {
                    _0x5ce963.push.apply(_0x5ce963, _0x77ca9a);
                  } else {
                    var _0x2d4e00 = _0x5ce963.length;
                    _0x5ce963.length += _0x324526;
                    for (var _0x1b2414 = 0; _0x1b2414 < _0x324526; _0x1b2414++) {
                      _0x5ce963[_0x2d4e00 + _0x1b2414] = _0x77ca9a[_0x1b2414];
                    }
                  }
                  return _0x5ce963;
                },
                splice: function (_0x160b34, _0x4f3c5d, _0x5eb6fc, _0x10019b) {
                  var _0x5c416e = _0x4f3c5d && _0x4f3c5d.length;
                  var _0x256247 = _0x5eb6fc === _0x2bd7be;
                  if ((_0x5eb6fc = _0x256247 ? _0x160b34.length : _0x5eb6fc) > _0x160b34.length) {
                    _0x5eb6fc = _0x160b34.length;
                  }
                  for (var _0x18696a = 0; _0x18696a < _0x5c416e; _0x18696a++) {
                    _0x4f3c5d[_0x18696a]._index = _0x5eb6fc + _0x18696a;
                  }
                  if (_0x256247) {
                    _0x28b48a.push(_0x160b34, _0x4f3c5d);
                    return [];
                  }
                  _0x10019b = [_0x5eb6fc, _0x10019b];
                  if (_0x4f3c5d) {
                    _0x28b48a.push(_0x10019b, _0x4f3c5d);
                  }
                  for (var _0x3abb6d = _0x160b34.splice.apply(_0x160b34, _0x10019b), _0x710311 = (_0x18696a = 0, _0x3abb6d.length); _0x18696a < _0x710311; _0x18696a++) {
                    _0x3abb6d[_0x18696a]._index = _0x2bd7be;
                  }
                  _0x18696a = _0x5eb6fc + _0x5c416e;
                  _0x710311 = _0x160b34.length;
                  for (; _0x18696a < _0x710311; _0x18696a++) {
                    _0x160b34[_0x18696a]._index = _0x18696a;
                  }
                  return _0x3abb6d;
                },
                capitalize: function (_0x5a56a1) {
                  return _0x5a56a1.replace(/\b[a-z]/g, function (_0x348764) {
                    return _0x348764.toUpperCase();
                  });
                },
                camelize: function (_0x5e1dc0) {
                  return _0x5e1dc0.replace(/-(.)/g, function (_0x1df525, _0x55a4a5) {
                    return _0x55a4a5.toUpperCase();
                  });
                },
                hyphenate: function (_0x2a372b) {
                  return _0x2a372b.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
                }
              }
            });
            var _0x139988 = {
              on: function (_0x5b0f29, _0x267b81) {
                var _0x2c9548;
                var _0x14f8bf;
                if (typeof _0x5b0f29 != "string") {
                  _0x28b48a.each(_0x5b0f29, function (_0xd1581e, _0x144053) {
                    this.on(_0x144053, _0xd1581e);
                  }, this);
                } else {
                  _0x2c9548 = (_0x14f8bf = this._eventTypes) && _0x14f8bf[_0x5b0f29];
                  if ((_0x14f8bf = (_0x14f8bf = this._callbacks = this._callbacks || {})[_0x5b0f29] = _0x14f8bf[_0x5b0f29] || []).indexOf(_0x267b81) === -1) {
                    _0x14f8bf.push(_0x267b81);
                    if (_0x2c9548 && _0x2c9548.install && _0x14f8bf.length === 1) {
                      _0x2c9548.install.call(this, _0x5b0f29);
                    }
                  }
                }
                return this;
              },
              off: function (_0x2a9060, _0x247a7b) {
                if (typeof _0x2a9060 == "string") {
                  var _0x27ebc7;
                  var _0x4d7c64;
                  var _0x2bea01 = (_0x4d7c64 = this._eventTypes) && _0x4d7c64[_0x2a9060];
                  if (_0x4d7c64 = this._callbacks && this._callbacks[_0x2a9060]) {
                    if (!_0x247a7b || (_0x27ebc7 = _0x4d7c64.indexOf(_0x247a7b)) !== -1 && _0x4d7c64.length === 1) {
                      if (_0x2bea01 && _0x2bea01.uninstall) {
                        _0x2bea01.uninstall.call(this, _0x2a9060);
                      }
                      delete this._callbacks[_0x2a9060];
                    } else if (_0x27ebc7 !== -1) {
                      _0x4d7c64.splice(_0x27ebc7, 1);
                    }
                  }
                  return this;
                }
                _0x28b48a.each(_0x2a9060, function (_0x282946, _0x3622f9) {
                  this.off(_0x3622f9, _0x282946);
                }, this);
              },
              once: function (_0x13632d, _0x20cb82) {
                return this.on(_0x13632d, function _0x568e6e() {
                  _0x20cb82.apply(this, arguments);
                  this.off(_0x13632d, _0x568e6e);
                });
              },
              emit: function (_0x3b09e2, _0x4bf772) {
                if (!(_0x3f2e14 = this._callbacks && this._callbacks[_0x3b09e2])) {
                  return false;
                }
                var _0x296db2 = _0x28b48a.slice(arguments, 1);
                var _0x37fb96 = _0x4bf772 && _0x4bf772.target && !_0x4bf772.currentTarget;
                var _0x3f2e14 = _0x3f2e14.slice();
                if (_0x37fb96) {
                  _0x4bf772.currentTarget = this;
                }
                for (var _0x1ff436 = 0, _0x2f3f75 = _0x3f2e14.length; _0x1ff436 < _0x2f3f75; _0x1ff436++) {
                  if (_0x3f2e14[_0x1ff436].apply(this, _0x296db2) == 0) {
                    if (_0x4bf772 && _0x4bf772.stop) {
                      _0x4bf772.stop();
                    }
                    break;
                  }
                }
                if (_0x37fb96) {
                  delete _0x4bf772.currentTarget;
                }
                return true;
              },
              responds: function (_0x996eff) {
                return !(!this._callbacks || !this._callbacks[_0x996eff]);
              },
              attach: "#on",
              detach: "#off",
              fire: "#emit",
              _installEvents: function (_0x1c7467) {
                var _0x38b8f3;
                var _0x4bd861 = this._eventTypes;
                var _0x38acee = this._callbacks;
                var _0x220dac = _0x1c7467 ? "install" : "uninstall";
                if (_0x4bd861) {
                  for (var _0x3fbd1e in _0x38acee) {
                    if (_0x38acee[_0x3fbd1e].length > 0 && (_0x38b8f3 = (_0x38b8f3 = _0x4bd861[_0x3fbd1e]) && _0x38b8f3[_0x220dac])) {
                      _0x38b8f3.call(this, _0x3fbd1e);
                    }
                  }
                }
              },
              statics: {
                inject: function _0x4c0c95(_0x422b13) {
                  var _0x5ed9ef;
                  var _0x9e3c4e = _0x422b13._events;
                  if (_0x9e3c4e) {
                    _0x5ed9ef = {};
                    _0x28b48a.each(_0x9e3c4e, function (_0x154400, _0x1392d3) {
                      var _0x495d5c = typeof _0x154400 == "string";
                      var _0x581631 = _0x495d5c ? _0x154400 : _0x1392d3;
                      _0x1392d3 = _0x28b48a.capitalize(_0x581631);
                      var _0x1ddb25 = _0x581631.substring(2).toLowerCase();
                      _0x5ed9ef[_0x1ddb25] = _0x495d5c ? {} : _0x154400;
                      _0x581631 = "_" + _0x581631;
                      _0x422b13["get" + _0x1392d3] = function () {
                        return this[_0x581631];
                      };
                      _0x422b13["set" + _0x1392d3] = function (_0x375c95) {
                        var _0x429aba = this[_0x581631];
                        if (_0x429aba) {
                          this.off(_0x1ddb25, _0x429aba);
                        }
                        if (_0x375c95) {
                          this.on(_0x1ddb25, _0x375c95);
                        }
                        this[_0x581631] = _0x375c95;
                      };
                    });
                    _0x422b13._eventTypes = _0x5ed9ef;
                  }
                  return _0x4c0c95.base.apply(this, arguments);
                }
              }
            };
            var _0xfce993 = _0x28b48a.extend({
              _class: "PaperScope",
              initialize: function _0x381ae4() {
                (_0x36d317 = this).settings = new _0x28b48a({
                  applyMatrix: true,
                  insertItems: true,
                  handleSize: 4,
                  hitTolerance: 0
                });
                this.project = null;
                this.projects = [];
                this.tools = [];
                this._id = _0x381ae4._id++;
                _0x381ae4._scopes[this._id] = this;
                var _0x24297b;
                var _0x26a9be;
                var _0x277b42;
                var _0x15419c = _0x381ae4.prototype;
                if (!this.support) {
                  _0x26a9be = _0xc9a63f.getContext(1, 1) || {};
                  _0x15419c.support = {
                    nativeDash: "setLineDash" in _0x26a9be || "mozDash" in _0x26a9be,
                    nativeBlendModes: _0x482b6b.nativeModes
                  };
                  _0xc9a63f.release(_0x26a9be);
                }
                if (!this.agent) {
                  _0x24297b = _0x536850.navigator.userAgent.toLowerCase();
                  _0x26a9be = (/(darwin|win|mac|linux|freebsd|sunos)/.exec(_0x24297b) || [])[0];
                  _0x277b42 = _0x15419c.agent = _0x15419c.browser = {
                    platform: _0x26a9be = _0x26a9be === "darwin" ? "mac" : _0x26a9be
                  };
                  if (_0x26a9be) {
                    _0x277b42[_0x26a9be] = true;
                  }
                  _0x24297b.replace(/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node|jsdom)\/?\s*([.\d]+)(?:.*version\/([.\d]+))?(?:.*rv\:v?([.\d]+))?/g, function (_0x5834a1, _0x39f6a8, _0x458bdf, _0x3912b6, _0x400c34) {
                    if (!_0x277b42.chrome) {
                      _0x458bdf = _0x39f6a8 === "opera" ? _0x3912b6 : /^(node|trident)$/.test(_0x39f6a8) ? _0x400c34 : _0x458bdf;
                      _0x277b42.version = _0x458bdf;
                      _0x277b42.versionNumber = parseFloat(_0x458bdf);
                      _0x277b42.name = _0x39f6a8 = {
                        trident: "msie",
                        jsdom: "node"
                      }[_0x39f6a8] || _0x39f6a8;
                      _0x277b42[_0x39f6a8] = true;
                    }
                  });
                  if (_0x277b42.chrome) {
                    delete _0x277b42.webkit;
                  }
                  if (_0x277b42.atom) {
                    delete _0x277b42.chrome;
                  }
                }
              },
              version: "0.12.15",
              getView: function () {
                var _0x216eb4 = this.project;
                return _0x216eb4 && _0x216eb4._view;
              },
              getPaper: function () {
                return this;
              },
              execute: function (_0x1ea235, _0x275fd2) {
                _0x275fd2 = _0x36d317.PaperScript.execute(_0x1ea235, this, _0x275fd2);
                _0x5d3cad.updateFocus();
                return _0x275fd2;
              },
              install: function (_0x140c0c) {
                var _0x37ef4c;
                var _0x3bcba2 = this;
                _0x28b48a.each(["project", "view", "tool"], function (_0x3ea646) {
                  _0x28b48a.define(_0x140c0c, _0x3ea646, {
                    configurable: true,
                    get: function () {
                      return _0x3bcba2[_0x3ea646];
                    }
                  });
                });
                for (_0x37ef4c in this) {
                  if (!/^_/.test(_0x37ef4c) && this[_0x37ef4c]) {
                    _0x140c0c[_0x37ef4c] = this[_0x37ef4c];
                  }
                }
              },
              setup: function (_0x197e2d) {
                (_0x36d317 = this).project = new _0x25cf80(_0x197e2d);
                return this;
              },
              createCanvas: function (_0x1a5bf9, _0x5214d) {
                return _0xc9a63f.getCanvas(_0x1a5bf9, _0x5214d);
              },
              activate: function () {
                _0x36d317 = this;
              },
              clear: function () {
                for (var _0x2d903f = this.projects, _0x2c07f9 = this.tools, _0x4fbe36 = _0x2d903f.length - 1; _0x4fbe36 >= 0; _0x4fbe36--) {
                  _0x2d903f[_0x4fbe36].remove();
                }
                for (_0x4fbe36 = _0x2c07f9.length - 1; _0x4fbe36 >= 0; _0x4fbe36--) {
                  _0x2c07f9[_0x4fbe36].remove();
                }
              },
              remove: function () {
                this.clear();
                delete _0xfce993._scopes[this._id];
              },
              statics: new function () {
                function _0x3dbd1c(_0x13a1a8) {
                  _0x13a1a8 += "Attribute";
                  return function (_0x42c3b5, _0x57c458) {
                    return _0x42c3b5[_0x13a1a8](_0x57c458) || _0x42c3b5[_0x13a1a8]("data-paper-" + _0x57c458);
                  };
                }
                return {
                  _scopes: {},
                  _id: 0,
                  get: function (_0x1be70b) {
                    return this._scopes[_0x1be70b] || null;
                  },
                  getAttribute: _0x3dbd1c("get"),
                  hasAttribute: _0x3dbd1c("has")
                };
              }()
            });
            var _0xfdb836 = _0x28b48a.extend(_0x139988, {
              initialize: function (_0x3f373c) {
                this._scope = _0x36d317;
                this._index = this._scope[this._list].push(this) - 1;
                if (!(!_0x3f373c && this._scope[this._reference])) {
                  this.activate();
                }
              },
              activate: function () {
                if (!this._scope) {
                  return false;
                }
                var _0x37cde5 = this._scope[this._reference];
                if (_0x37cde5 && _0x37cde5 !== this) {
                  _0x37cde5.emit("deactivate");
                }
                (this._scope[this._reference] = this).emit("activate", _0x37cde5);
                return true;
              },
              isActive: function () {
                return this._scope[this._reference] === this;
              },
              remove: function () {
                return this._index != null && (_0x28b48a.splice(this._scope[this._list], null, this._index, 1), this._scope[this._reference] == this && (this._scope[this._reference] = null), !(this._scope = null));
              },
              getView: function () {
                return this._scope.getView();
              }
            });
            var _0x402ec8 = {
              findItemBoundsCollisions: function (_0x2dac0e, _0x49160a, _0x410b49) {
                function _0x835b53(_0xda7534) {
                  for (var _0x30db12 = new Array(_0xda7534.length), _0x16bea3 = 0; _0x16bea3 < _0xda7534.length; _0x16bea3++) {
                    var _0x103d8e = _0xda7534[_0x16bea3].getBounds();
                    _0x30db12[_0x16bea3] = [_0x103d8e.left, _0x103d8e.top, _0x103d8e.right, _0x103d8e.bottom];
                  }
                  return _0x30db12;
                }
                var _0x2678a1 = _0x835b53(_0x2dac0e);
                _0x49160a = _0x49160a && _0x49160a !== _0x2dac0e ? _0x835b53(_0x49160a) : _0x2678a1;
                return this.findBoundsCollisions(_0x2678a1, _0x49160a, _0x410b49 || 0);
              },
              findCurveBoundsCollisions: function (_0x274e6, _0x500ed2, _0x1dd7c5, _0x442ee9) {
                function _0x522ab0(_0x49a1c3) {
                  for (var _0x4b683a = Math.min, _0x5d0c76 = Math.max, _0x2296b = new Array(_0x49a1c3.length), _0x533f45 = 0; _0x533f45 < _0x49a1c3.length; _0x533f45++) {
                    var _0x37f95c = _0x49a1c3[_0x533f45];
                    _0x2296b[_0x533f45] = [_0x4b683a(_0x37f95c[0], _0x37f95c[2], _0x37f95c[4], _0x37f95c[6]), _0x4b683a(_0x37f95c[1], _0x37f95c[3], _0x37f95c[5], _0x37f95c[7]), _0x5d0c76(_0x37f95c[0], _0x37f95c[2], _0x37f95c[4], _0x37f95c[6]), _0x5d0c76(_0x37f95c[1], _0x37f95c[3], _0x37f95c[5], _0x37f95c[7])];
                  }
                  return _0x2296b;
                }
                var _0x152eb8 = _0x522ab0(_0x274e6);
                _0x500ed2 = _0x500ed2 && _0x500ed2 !== _0x274e6 ? _0x522ab0(_0x500ed2) : _0x152eb8;
                if (_0x442ee9) {
                  for (var _0x2773b4 = this.findBoundsCollisions(_0x152eb8, _0x500ed2, _0x1dd7c5 || 0, false, true), _0x1e6708 = this.findBoundsCollisions(_0x152eb8, _0x500ed2, _0x1dd7c5 || 0, true, true), _0x5ef709 = [], _0x4479d2 = 0, _0x3e2cff = _0x2773b4.length; _0x4479d2 < _0x3e2cff; _0x4479d2++) {
                    _0x5ef709[_0x4479d2] = {
                      hor: _0x2773b4[_0x4479d2],
                      ver: _0x1e6708[_0x4479d2]
                    };
                  }
                  return _0x5ef709;
                }
                return this.findBoundsCollisions(_0x152eb8, _0x500ed2, _0x1dd7c5 || 0);
              },
              findBoundsCollisions: function (_0xc0069d, _0x294a4c, _0x43b92a, _0x301402, _0x33f082) {
                var _0x3ca92c = !_0x294a4c || _0xc0069d === _0x294a4c;
                var _0x8adbd6 = _0x3ca92c ? _0xc0069d : _0xc0069d.concat(_0x294a4c);
                var _0x44706f = _0xc0069d.length;
                var _0x287297 = _0x8adbd6.length;
                function _0x3c4caf(_0x19caba, _0x1dcd6a, _0x23a941) {
                  for (var _0x59a733 = 0, _0x1bb93a = _0x19caba.length; _0x59a733 < _0x1bb93a;) {
                    var _0x41d16a = _0x1bb93a + _0x59a733 >>> 1;
                    if (_0x8adbd6[_0x19caba[_0x41d16a]][_0x1dcd6a] < _0x23a941) {
                      _0x59a733 = 1 + _0x41d16a;
                    } else {
                      _0x1bb93a = _0x41d16a;
                    }
                  }
                  return _0x59a733 - 1;
                }
                for (var _0x517384 = _0x301402 ? 1 : 0, _0x3da324 = 2 + _0x517384, _0x26307b = _0x301402 ? 0 : 1, _0x51b198 = 2 + _0x26307b, _0x1ea942 = new Array(_0x287297), _0x28daf2 = 0; _0x28daf2 < _0x287297; _0x28daf2++) {
                  _0x1ea942[_0x28daf2] = _0x28daf2;
                }
                _0x1ea942.sort(function (_0x49e409, _0x7f740a) {
                  return _0x8adbd6[_0x49e409][_0x517384] - _0x8adbd6[_0x7f740a][_0x517384];
                });
                var _0x28cd58 = [];
                var _0x5f4a08 = new Array(_0x44706f);
                for (_0x28daf2 = 0; _0x28daf2 < _0x287297; _0x28daf2++) {
                  var _0x265011 = _0x1ea942[_0x28daf2];
                  var _0x206f2b = _0x8adbd6[_0x265011];
                  var _0x4320dd = _0x3ca92c ? _0x265011 : _0x265011 - _0x44706f;
                  var _0xc5fa55 = _0x265011 < _0x44706f;
                  var _0x2a07c5 = _0x3ca92c || !_0xc5fa55;
                  var _0x213e92 = _0xc5fa55 ? [] : null;
                  if (_0x28cd58.length) {
                    var _0x5bf5b4 = _0x3c4caf(_0x28cd58, _0x3da324, _0x206f2b[_0x517384] - _0x43b92a) + 1;
                    _0x28cd58.splice(0, _0x5bf5b4);
                    if (_0x3ca92c && _0x33f082) {
                      _0x213e92 = _0x213e92.concat(_0x28cd58);
                      for (var _0x557005 = 0; _0x557005 < _0x28cd58.length; _0x557005++) {
                        _0x5f4a08[_0x40ffc5 = _0x28cd58[_0x557005]].push(_0x4320dd);
                      }
                    } else {
                      var _0x5952e2 = _0x206f2b[_0x51b198];
                      var _0x55c2c8 = _0x206f2b[_0x26307b];
                      for (_0x557005 = 0; _0x557005 < _0x28cd58.length; _0x557005++) {
                        var _0x40ffc5 = _0x28cd58[_0x557005];
                        var _0xeb9c8a = _0x8adbd6[_0x40ffc5];
                        var _0x107a3a = _0x40ffc5 < _0x44706f;
                        var _0x56a17e = _0x3ca92c || _0x44706f <= _0x40ffc5;
                        if (_0x33f082 || (_0xc5fa55 && _0x56a17e || _0x2a07c5 && _0x107a3a) && _0x5952e2 >= _0xeb9c8a[_0x26307b] - _0x43b92a && _0x55c2c8 <= _0xeb9c8a[_0x51b198] + _0x43b92a) {
                          if (_0xc5fa55 && _0x56a17e) {
                            _0x213e92.push(_0x3ca92c ? _0x40ffc5 : _0x40ffc5 - _0x44706f);
                          }
                          if (_0x2a07c5 && _0x107a3a) {
                            _0x5f4a08[_0x40ffc5].push(_0x4320dd);
                          }
                        }
                      }
                    }
                  }
                  if (_0xc5fa55) {
                    if (_0xc0069d === _0x294a4c) {
                      _0x213e92.push(_0x265011);
                    }
                    _0x5f4a08[_0x265011] = _0x213e92;
                  }
                  if (_0x28cd58.length) {
                    _0x206f2b = _0x3c4caf(_0x28cd58, _0x3da324, _0x206f2b[_0x3da324]);
                    _0x28cd58.splice(_0x206f2b + 1, 0, _0x265011);
                  } else {
                    _0x28cd58.push(_0x265011);
                  }
                }
                for (_0x28daf2 = 0; _0x28daf2 < _0x5f4a08.length; _0x28daf2++) {
                  var _0x5e16c8 = _0x5f4a08[_0x28daf2];
                  if (_0x5e16c8) {
                    _0x5e16c8.sort(function (_0x129007, _0x35902c) {
                      return _0x129007 - _0x35902c;
                    });
                  }
                }
                return _0x5f4a08;
              }
            };
            var _0x5735bc = _0x28b48a.extend({
              initialize: function (_0x423070) {
                this.precision = _0x28b48a.pick(_0x423070, 5);
                this.multiplier = Math.pow(10, this.precision);
              },
              number: function (_0x5dc8b6) {
                if (this.precision < 16) {
                  return Math.round(_0x5dc8b6 * this.multiplier) / this.multiplier;
                } else {
                  return _0x5dc8b6;
                }
              },
              pair: function (_0x1b820a, _0x62f104, _0x5b25c9) {
                return this.number(_0x1b820a) + (_0x5b25c9 || ",") + this.number(_0x62f104);
              },
              point: function (_0x109b5a, _0x144a08) {
                return this.number(_0x109b5a.x) + (_0x144a08 || ",") + this.number(_0x109b5a.y);
              },
              size: function (_0x41b04d, _0x18c748) {
                return this.number(_0x41b04d.width) + (_0x18c748 || ",") + this.number(_0x41b04d.height);
              },
              rectangle: function (_0x130855, _0x1fff34) {
                return this.point(_0x130855, _0x1fff34) + (_0x1fff34 || ",") + this.size(_0x130855, _0x1fff34);
              }
            });
            _0x5735bc.instance = new _0x5735bc();
            var _0x3c029b = new function () {
              var _0x326035 = [[0.5773502691896257], [0, 0.7745966692414834], [0.33998104358485626, 0.8611363115940526], [0, 0.5384693101056831, 0.906179845938664], [0.2386191860831969, 0.6612093864662645, 0.932469514203152], [0, 0.4058451513773972, 0.7415311855993945, 0.9491079123427585], [0.1834346424956498, 0.525532409916329, 0.7966664774136267, 0.9602898564975363], [0, 0.3242534234038089, 0.6133714327005904, 0.8360311073266358, 0.9681602395076261], [0.14887433898163122, 0.4333953941292472, 0.6794095682990244, 0.8650633666889845, 0.9739065285171717], [0, 0.26954315595234496, 0.5190961292068118, 0.7301520055740494, 0.8870625997680953, 0.978228658146057], [0.1252334085114689, 0.3678314989981802, 0.5873179542866175, 0.7699026741943047, 0.9041172563704749, 0.9815606342467192], [0, 0.2304583159551348, 0.44849275103644687, 0.6423493394403402, 0.8015780907333099, 0.9175983992229779, 0.9841830547185881], [0.10805494870734367, 0.31911236892788974, 0.5152486363581541, 0.6872929048116855, 0.827201315069765, 0.9284348836635735, 0.9862838086968123], [0, 0.20119409399743451, 0.3941513470775634, 0.5709721726085388, 0.7244177313601701, 0.8482065834104272, 0.937273392400706, 0.9879925180204854], [0.09501250983763744, 0.2816035507792589, 0.45801677765722737, 0.6178762444026438, 0.755404408355003, 0.8656312023878318, 0.9445750230732326, 0.9894009349916499]];
              var _0x5d81ec = [[1], [0.8888888888888888, 0.5555555555555556], [0.6521451548625461, 0.34785484513745385], [0.5688888888888889, 0.47862867049936647, 0.23692688505618908], [0.46791393457269104, 0.3607615730481386, 0.17132449237917036], [0.4179591836734694, 0.3818300505051189, 0.27970539148927664, 0.1294849661688697], [0.362683783378362, 0.31370664587788727, 0.22238103445337448, 0.10122853629037626], [0.3302393550012598, 0.31234707704000286, 0.26061069640293544, 0.1806481606948574, 0.08127438836157441], [0.29552422471475287, 0.26926671930999635, 0.21908636251598204, 0.1494513491505806, 0.06667134430868814], [0.2729250867779006, 0.26280454451024665, 0.23319376459199048, 0.18629021092773426, 0.1255803694649046, 0.05566856711617366], [0.24914704581340277, 0.2334925365383548, 0.20316742672306592, 0.16007832854334622, 0.10693932599531843, 0.04717533638651183], [0.2325515532308739, 0.22628318026289723, 0.2078160475368885, 0.17814598076194574, 0.13887351021978725, 0.09212149983772845, 0.04048400476531588], [0.2152638534631578, 0.2051984637212956, 0.18553839747793782, 0.15720316715819355, 0.12151857068790319, 0.08015808715976021, 0.03511946033175186], [0.2025782419255613, 0.19843148532711158, 0.1861610000155622, 0.16626920581699392, 0.13957067792615432, 0.10715922046717194, 0.07036604748810812, 0.03075324199611727], [0.1894506104550685, 0.18260341504492358, 0.16915651939500254, 0.14959598881657674, 0.12462897125553388, 0.09515851168249279, 0.062253523938647894, 0.027152459411754096]];
              var _0x147ff6 = Math.abs;
              var _0x24a7b = Math.sqrt;
              var _0x499c8d = Math.pow;
              var _0x359d48 = Math.log2 || function (_0x307461) {
                return Math.log(_0x307461) * Math.LOG2E;
              };
              var _0x22f393 = 1e-12;
              var _0x5646fb = 1.12e-16;
              function _0x549d2c(_0x162e5e, _0x429258, _0x2f3bfc) {
                if (_0x162e5e < _0x429258) {
                  return _0x429258;
                } else if (_0x2f3bfc < _0x162e5e) {
                  return _0x2f3bfc;
                } else {
                  return _0x162e5e;
                }
              }
              function _0x123550(_0x22f5a7, _0x13a68a, _0x6d8e3d) {
                function _0x3f7dcf(_0x41b7da) {
                  var _0x55c072;
                  return [_0x55c072 = _0x41b7da - (_0x55c072 = _0x41b7da * 134217729) + _0x55c072, _0x41b7da - _0x55c072];
                }
                var _0x30100e;
                var _0x38df21;
                var _0x9ec6e8 = _0x13a68a * _0x13a68a - _0x22f5a7 * _0x6d8e3d;
                var _0x143a78 = _0x13a68a * _0x13a68a + _0x22f5a7 * _0x6d8e3d;
                if (_0x147ff6(_0x9ec6e8) * 3 < _0x143a78) {
                  _0x30100e = _0x3f7dcf(_0x22f5a7);
                  _0x38df21 = _0x3f7dcf(_0x13a68a);
                  _0x143a78 = _0x3f7dcf(_0x6d8e3d);
                  _0x9ec6e8 = (_0x13a68a *= _0x13a68a) - (_0x6d8e3d *= _0x22f5a7) + (_0x38df21[0] * _0x38df21[0] - _0x13a68a + _0x38df21[0] * 2 * _0x38df21[1] + _0x38df21[1] * _0x38df21[1] - (_0x30100e[0] * _0x143a78[0] - _0x6d8e3d + _0x30100e[0] * _0x143a78[1] + _0x30100e[1] * _0x143a78[0] + _0x30100e[1] * _0x143a78[1]));
                }
                return _0x9ec6e8;
              }
              function _0x4d3cd5() {
                var _0x172d8d = Math.max.apply(Math, arguments);
                if (_0x172d8d && (_0x172d8d < 1e-8 || _0x172d8d > 100000000)) {
                  return _0x499c8d(2, -Math.round(_0x359d48(_0x172d8d)));
                } else {
                  return 0;
                }
              }
              return {
                EPSILON: _0x22f393,
                MACHINE_EPSILON: _0x5646fb,
                CURVETIME_EPSILON: 1e-8,
                GEOMETRIC_EPSILON: 1e-7,
                TRIGONOMETRIC_EPSILON: 1e-8,
                KAPPA: (_0x24a7b(2) - 1) * 4 / 3,
                isZero: function (_0x4f10dd) {
                  return -_0x22f393 <= _0x4f10dd && _0x4f10dd <= _0x22f393;
                },
                isMachineZero: function (_0x5e17cf) {
                  return -_0x5646fb <= _0x5e17cf && _0x5e17cf <= _0x5646fb;
                },
                clamp: _0x549d2c,
                integrate: function (_0x56bafe, _0x48a3cc, _0x4512a3, _0x502917) {
                  for (var _0x25234f = _0x326035[_0x502917 - 2], _0x1d10c4 = _0x5d81ec[_0x502917 - 2], _0x5a6f88 = (_0x4512a3 - _0x48a3cc) * 0.5, _0x592348 = _0x5a6f88 + _0x48a3cc, _0x413e26 = 0, _0x4cfd69 = _0x502917 + 1 >> 1, _0x295d3e = _0x502917 & 1 ? _0x1d10c4[_0x413e26++] * _0x56bafe(_0x592348) : 0; _0x413e26 < _0x4cfd69;) {
                    var _0x15123b = _0x5a6f88 * _0x25234f[_0x413e26];
                    _0x295d3e += _0x1d10c4[_0x413e26++] * (_0x56bafe(_0x592348 + _0x15123b) + _0x56bafe(_0x592348 - _0x15123b));
                  }
                  return _0x5a6f88 * _0x295d3e;
                },
                findRoot: function (_0x3ad5d0, _0x5367b6, _0x1ffff7, _0x4c9725, _0x492564, _0x395873, _0x4d6bdc) {
                  for (var _0x2857ce = 0; _0x2857ce < _0x395873; _0x2857ce++) {
                    var _0x48d23b = _0x3ad5d0(_0x1ffff7);
                    var _0x390a60 = _0x48d23b / _0x5367b6(_0x1ffff7);
                    var _0x32b8d6 = _0x1ffff7 - _0x390a60;
                    if (_0x147ff6(_0x390a60) < _0x4d6bdc) {
                      _0x1ffff7 = _0x32b8d6;
                      break;
                    }
                    _0x1ffff7 = _0x48d23b > 0 ? (_0x492564 = _0x1ffff7, _0x32b8d6 <= _0x4c9725 ? (_0x4c9725 + _0x492564) * 0.5 : _0x32b8d6) : (_0x4c9725 = _0x1ffff7, _0x492564 <= _0x32b8d6 ? (_0x4c9725 + _0x492564) * 0.5 : _0x32b8d6);
                  }
                  return _0x549d2c(_0x1ffff7, _0x4c9725, _0x492564);
                },
                solveQuadratic: function (_0x4d17c3, _0x58ed0, _0x3dddee, _0x469cdd, _0x5982e9, _0x1b6458) {
                  var _0x442b42;
                  var _0x3ac780 = Infinity;
                  if (_0x147ff6(_0x4d17c3) < _0x22f393) {
                    if (_0x147ff6(_0x58ed0) < _0x22f393) {
                      if (_0x147ff6(_0x3dddee) < _0x22f393) {
                        return -1;
                      } else {
                        return 0;
                      }
                    }
                    _0x442b42 = -_0x3dddee / _0x58ed0;
                  } else {
                    var _0x36f5b2;
                    var _0x57a3d8 = _0x123550(_0x4d17c3, _0x58ed0 *= -0.5, _0x3dddee);
                    if (_0x57a3d8 && _0x147ff6(_0x57a3d8) < _0x5646fb && (_0x36f5b2 = _0x4d3cd5(_0x147ff6(_0x4d17c3), _0x147ff6(_0x58ed0), _0x147ff6(_0x3dddee)))) {
                      _0x57a3d8 = _0x123550(_0x4d17c3 *= _0x36f5b2, _0x58ed0 *= _0x36f5b2, _0x3dddee *= _0x36f5b2);
                    }
                    if (-_0x5646fb <= _0x57a3d8) {
                      _0x572664 = _0x57a3d8 < 0 ? 0 : _0x24a7b(_0x57a3d8);
                      _0x3ac780 = (_0x15d117 = _0x58ed0 + (_0x58ed0 < 0 ? -_0x572664 : _0x572664)) === 0 ? -(_0x442b42 = _0x3dddee / _0x4d17c3) : (_0x442b42 = _0x15d117 / _0x4d17c3, _0x3dddee / _0x15d117);
                    }
                  }
                  var _0x572664 = 0;
                  _0x4d17c3 = _0x5982e9 == null;
                  _0x3dddee = _0x5982e9 - _0x22f393;
                  var _0x15d117 = _0x1b6458 + _0x22f393;
                  if (isFinite(_0x442b42) && (_0x4d17c3 || _0x3dddee < _0x442b42 && _0x442b42 < _0x15d117)) {
                    _0x469cdd[_0x572664++] = _0x4d17c3 ? _0x442b42 : _0x549d2c(_0x442b42, _0x5982e9, _0x1b6458);
                  }
                  if (_0x3ac780 !== _0x442b42 && isFinite(_0x3ac780) && (_0x4d17c3 || _0x3dddee < _0x3ac780 && _0x3ac780 < _0x15d117)) {
                    _0x469cdd[_0x572664++] = _0x4d17c3 ? _0x3ac780 : _0x549d2c(_0x3ac780, _0x5982e9, _0x1b6458);
                  }
                  return _0x572664;
                },
                solveCubic: function (_0x59b5d2, _0xeffd14, _0x393277, _0x5ac2e3, _0x39fc87, _0x34294e, _0xda66c1) {
                  var _0x3028f0;
                  var _0x5e8fe4;
                  var _0x26fc8d;
                  var _0x55d0d9;
                  var _0x300258;
                  var _0x3ffbd6 = _0x4d3cd5(_0x147ff6(_0x59b5d2), _0x147ff6(_0xeffd14), _0x147ff6(_0x393277), _0x147ff6(_0x5ac2e3));
                  function _0xb0575f(_0x29faa6) {
                    _0x29faa6 = _0x59b5d2 * (_0x3028f0 = _0x29faa6);
                    _0x55d0d9 = (_0x29faa6 + (_0x5e8fe4 = _0x29faa6 + _0xeffd14)) * _0x3028f0 + (_0x26fc8d = _0x5e8fe4 * _0x3028f0 + _0x393277);
                    _0x300258 = _0x26fc8d * _0x3028f0 + _0x5ac2e3;
                  }
                  if (_0x3ffbd6) {
                    _0x59b5d2 *= _0x3ffbd6;
                    _0xeffd14 *= _0x3ffbd6;
                    _0x393277 *= _0x3ffbd6;
                    _0x5ac2e3 *= _0x3ffbd6;
                  }
                  if (_0x147ff6(_0x59b5d2) < _0x22f393) {
                    _0x59b5d2 = _0xeffd14;
                    _0x5e8fe4 = _0x393277;
                    _0x26fc8d = _0x5ac2e3;
                    _0x3028f0 = Infinity;
                  } else if (_0x147ff6(_0x5ac2e3) < _0x22f393) {
                    _0x5e8fe4 = _0xeffd14;
                    _0x26fc8d = _0x393277;
                    _0x3028f0 = 0;
                  } else {
                    _0xb0575f(-_0xeffd14 / _0x59b5d2 / 3);
                    var _0x38e4e6 = _0x499c8d(_0x147ff6(_0x154f5 = _0x300258 / _0x59b5d2), 1 / 3);
                    var _0x2b9920 = _0x154f5 < 0 ? -1 : 1;
                    var _0x154f5 = (_0x154f5 = -_0x55d0d9 / _0x59b5d2) > 0 ? Math.max(_0x38e4e6, _0x24a7b(_0x154f5)) * 1.324717957244746 : _0x38e4e6;
                    var _0x397308 = _0x3028f0 - _0x2b9920 * _0x154f5;
                    if (_0x397308 !== _0x3028f0) {
                      for (; _0xb0575f(_0x397308), _0x2b9920 * _0x3028f0 < _0x2b9920 * (_0x397308 = _0x55d0d9 === 0 ? _0x3028f0 : _0x3028f0 - _0x300258 / _0x55d0d9 / (1 + _0x5646fb)););
                      if (_0x147ff6(_0x59b5d2) * _0x3028f0 * _0x3028f0 > _0x147ff6(_0x5ac2e3 / _0x3028f0)) {
                        _0x5e8fe4 = ((_0x26fc8d = -_0x5ac2e3 / _0x3028f0) - _0x393277) / _0x3028f0;
                      }
                    }
                  }
                  _0x38e4e6 = _0x3c029b.solveQuadratic(_0x59b5d2, _0x5e8fe4, _0x26fc8d, _0x39fc87, _0x34294e, _0xda66c1);
                  _0x154f5 = _0x34294e == null;
                  if (isFinite(_0x3028f0) && (_0x38e4e6 === 0 || _0x38e4e6 > 0 && _0x3028f0 !== _0x39fc87[0] && _0x3028f0 !== _0x39fc87[1]) && (_0x154f5 || _0x34294e - _0x22f393 < _0x3028f0 && _0x3028f0 < _0xda66c1 + _0x22f393)) {
                    _0x39fc87[_0x38e4e6++] = _0x154f5 ? _0x3028f0 : _0x549d2c(_0x3028f0, _0x34294e, _0xda66c1);
                  }
                  return _0x38e4e6;
                }
              };
            }();
            var _0x2231b4 = {
              _id: 1,
              _pools: {},
              get: function (_0x1a6c87) {
                if (_0x1a6c87) {
                  var _0x391147 = this._pools[_0x1a6c87];
                  return (_0x391147 = _0x391147 || (this._pools[_0x1a6c87] = {
                    _id: 1
                  }))._id++;
                }
                return this._id++;
              }
            };
            var _0xbc5c4a = _0x28b48a.extend({
              _class: "Point",
              _readIndex: true,
              initialize: function (_0x4cee6e, _0x5c38c0) {
                var _0x5aaa8b;
                var _0xa29fac = typeof _0x4cee6e;
                var _0x2d1676 = this.__read;
                var _0x17e8db = 0;
                if (_0xa29fac == "number") {
                  this._set(_0x4cee6e, (_0x5aaa8b = typeof _0x5c38c0 == "number") ? _0x5c38c0 : _0x4cee6e);
                  if (_0x2d1676) {
                    _0x17e8db = _0x5aaa8b ? 2 : 1;
                  }
                } else if (_0xa29fac == "undefined" || _0x4cee6e === null) {
                  this._set(0, 0);
                  if (_0x2d1676) {
                    _0x17e8db = _0x4cee6e === null ? 1 : 0;
                  }
                } else {
                  _0x4cee6e = _0xa29fac == "string" ? _0x4cee6e.split(/[\s,]+/) || [] : _0x4cee6e;
                  _0x17e8db = 1;
                  if (Array.isArray(_0x4cee6e)) {
                    this._set(+_0x4cee6e[0], +(_0x4cee6e.length > 1 ? _0x4cee6e[1] : _0x4cee6e[0]));
                  } else if ("x" in _0x4cee6e) {
                    this._set(_0x4cee6e.x || 0, _0x4cee6e.y || 0);
                  } else if ("width" in _0x4cee6e) {
                    this._set(_0x4cee6e.width || 0, _0x4cee6e.height || 0);
                  } else if ("angle" in _0x4cee6e) {
                    this._set(_0x4cee6e.length || 0, 0);
                    this.setAngle(_0x4cee6e.angle || 0);
                  } else {
                    this._set(0, 0);
                    _0x17e8db = 0;
                  }
                }
                if (_0x2d1676) {
                  this.__read = _0x17e8db;
                }
                return this;
              },
              set: "#initialize",
              _set: function (_0x12e947, _0x1b987e) {
                this.x = _0x12e947;
                this.y = _0x1b987e;
                return this;
              },
              equals: function (_0x2045d7) {
                return this === _0x2045d7 || _0x2045d7 && (this.x === _0x2045d7.x && this.y === _0x2045d7.y || Array.isArray(_0x2045d7) && this.x === _0x2045d7[0] && this.y === _0x2045d7[1]) || false;
              },
              clone: function () {
                return new _0xbc5c4a(this.x, this.y);
              },
              toString: function () {
                var _0x10e060 = _0x5735bc.instance;
                return "{ x: " + _0x10e060.number(this.x) + ", y: " + _0x10e060.number(this.y) + " }";
              },
              _serialize: function (_0x54afa1) {
                return [(_0x54afa1 = _0x54afa1.formatter).number(this.x), _0x54afa1.number(this.y)];
              },
              getLength: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y);
              },
              setLength: function (_0x481a18) {
                var _0x3d8907;
                if (this.isZero()) {
                  _0x3d8907 = this._angle || 0;
                  this._set(Math.cos(_0x3d8907) * _0x481a18, Math.sin(_0x3d8907) * _0x481a18);
                } else {
                  _0x481a18 /= this.getLength();
                  if (_0x3c029b.isZero(_0x481a18)) {
                    this.getAngle();
                  }
                  this._set(this.x * _0x481a18, this.y * _0x481a18);
                }
              },
              getAngle: function () {
                return this.getAngleInRadians.apply(this, arguments) * 180 / Math.PI;
              },
              setAngle: function (_0xa7e4fe) {
                this.setAngleInRadians.call(this, _0xa7e4fe * Math.PI / 180);
              },
              getAngleInDegrees: "#getAngle",
              setAngleInDegrees: "#setAngle",
              getAngleInRadians: function () {
                if (arguments.length) {
                  var _0x452947 = _0xbc5c4a.read(arguments);
                  var _0x27918e = this.getLength() * _0x452947.getLength();
                  if (_0x3c029b.isZero(_0x27918e)) {
                    return NaN;
                  } else {
                    _0x27918e = this.dot(_0x452947) / _0x27918e;
                    return Math.acos(_0x27918e < -1 ? -1 : _0x27918e > 1 ? 1 : _0x27918e);
                  }
                }
                if (this.isZero()) {
                  return this._angle || 0;
                } else {
                  return this._angle = Math.atan2(this.y, this.x);
                }
              },
              setAngleInRadians: function (_0x23b26b) {
                var _0x48d460;
                this._angle = _0x23b26b;
                if (!this.isZero()) {
                  _0x48d460 = this.getLength();
                  this._set(Math.cos(_0x23b26b) * _0x48d460, Math.sin(_0x23b26b) * _0x48d460);
                }
              },
              getQuadrant: function () {
                if (this.x >= 0) {
                  if (this.y >= 0) {
                    return 1;
                  } else {
                    return 4;
                  }
                } else if (this.y >= 0) {
                  return 2;
                } else {
                  return 3;
                }
              }
            }, {
              beans: false,
              getDirectedAngle: function () {
                var _0x322dcd = _0xbc5c4a.read(arguments);
                return Math.atan2(this.cross(_0x322dcd), this.dot(_0x322dcd)) * 180 / Math.PI;
              },
              getDistance: function () {
                var _0x43896c = arguments;
                var _0x51585e = (_0x1f4224 = _0xbc5c4a.read(_0x43896c)).x - this.x;
                var _0x1f4224 = _0x51585e * _0x51585e + (_0x1f4224 = _0x1f4224.y - this.y) * _0x1f4224;
                if (_0x28b48a.read(_0x43896c)) {
                  return _0x1f4224;
                } else {
                  return Math.sqrt(_0x1f4224);
                }
              },
              normalize: function (_0x3123a7) {
                if (_0x3123a7 === _0x2bd7be) {
                  _0x3123a7 = 1;
                }
                _0x3123a7 = (_0xda2fa7 = this.getLength()) !== 0 ? _0x3123a7 / _0xda2fa7 : 0;
                var _0xda2fa7 = new _0xbc5c4a(this.x * _0x3123a7, this.y * _0x3123a7);
                if (_0x3123a7 >= 0) {
                  _0xda2fa7._angle = this._angle;
                }
                return _0xda2fa7;
              },
              rotate: function (_0x4ad287, _0x56d0df) {
                if (_0x4ad287 === 0) {
                  return this.clone();
                }
                _0x4ad287 = _0x4ad287 * Math.PI / 180;
                var _0x476715 = _0x56d0df ? this.subtract(_0x56d0df) : this;
                var _0x42a32a = Math.sin(_0x4ad287);
                _0x4ad287 = Math.cos(_0x4ad287);
                _0x476715 = new _0xbc5c4a(_0x476715.x * _0x4ad287 - _0x476715.y * _0x42a32a, _0x476715.x * _0x42a32a + _0x476715.y * _0x4ad287);
                if (_0x56d0df) {
                  return _0x476715.add(_0x56d0df);
                } else {
                  return _0x476715;
                }
              },
              transform: function (_0x38d8b7) {
                if (_0x38d8b7) {
                  return _0x38d8b7._transformPoint(this);
                } else {
                  return this;
                }
              },
              add: function () {
                var _0x5ea942 = _0xbc5c4a.read(arguments);
                return new _0xbc5c4a(this.x + _0x5ea942.x, this.y + _0x5ea942.y);
              },
              subtract: function () {
                var _0x4ae217 = _0xbc5c4a.read(arguments);
                return new _0xbc5c4a(this.x - _0x4ae217.x, this.y - _0x4ae217.y);
              },
              multiply: function () {
                var _0x140aa9 = _0xbc5c4a.read(arguments);
                return new _0xbc5c4a(this.x * _0x140aa9.x, this.y * _0x140aa9.y);
              },
              divide: function () {
                var _0x285362 = _0xbc5c4a.read(arguments);
                return new _0xbc5c4a(this.x / _0x285362.x, this.y / _0x285362.y);
              },
              modulo: function () {
                var _0x295562 = _0xbc5c4a.read(arguments);
                return new _0xbc5c4a(this.x % _0x295562.x, this.y % _0x295562.y);
              },
              negate: function () {
                return new _0xbc5c4a(-this.x, -this.y);
              },
              isInside: function () {
                return _0x5384ce.read(arguments).contains(this);
              },
              isClose: function () {
                var _0xd0f8cf = arguments;
                var _0xaa7fbd = _0xbc5c4a.read(_0xd0f8cf);
                _0xd0f8cf = _0x28b48a.read(_0xd0f8cf);
                return this.getDistance(_0xaa7fbd) <= _0xd0f8cf;
              },
              isCollinear: function () {
                var _0x199a1f = _0xbc5c4a.read(arguments);
                return _0xbc5c4a.isCollinear(this.x, this.y, _0x199a1f.x, _0x199a1f.y);
              },
              isColinear: "#isCollinear",
              isOrthogonal: function () {
                var _0x37fd67 = _0xbc5c4a.read(arguments);
                return _0xbc5c4a.isOrthogonal(this.x, this.y, _0x37fd67.x, _0x37fd67.y);
              },
              isZero: function () {
                var _0x481020 = _0x3c029b.isZero;
                return _0x481020(this.x) && _0x481020(this.y);
              },
              isNaN: function () {
                return isNaN(this.x) || isNaN(this.y);
              },
              isInQuadrant: function (_0x151a4b) {
                return this.x * (_0x151a4b > 1 && _0x151a4b < 4 ? -1 : 1) >= 0 && this.y * (_0x151a4b > 2 ? -1 : 1) >= 0;
              },
              dot: function () {
                var _0x577a63 = _0xbc5c4a.read(arguments);
                return this.x * _0x577a63.x + this.y * _0x577a63.y;
              },
              cross: function () {
                var _0x581d33 = _0xbc5c4a.read(arguments);
                return this.x * _0x581d33.y - this.y * _0x581d33.x;
              },
              project: function () {
                var _0x4b9108 = _0xbc5c4a.read(arguments);
                var _0x253aea = _0x4b9108.isZero() ? 0 : this.dot(_0x4b9108) / _0x4b9108.dot(_0x4b9108);
                return new _0xbc5c4a(_0x4b9108.x * _0x253aea, _0x4b9108.y * _0x253aea);
              },
              statics: {
                min: function () {
                  var _0x2f8600 = arguments;
                  var _0x356103 = _0xbc5c4a.read(_0x2f8600);
                  _0x2f8600 = _0xbc5c4a.read(_0x2f8600);
                  return new _0xbc5c4a(Math.min(_0x356103.x, _0x2f8600.x), Math.min(_0x356103.y, _0x2f8600.y));
                },
                max: function () {
                  var _0x219793 = arguments;
                  var _0x344b53 = _0xbc5c4a.read(_0x219793);
                  _0x219793 = _0xbc5c4a.read(_0x219793);
                  return new _0xbc5c4a(Math.max(_0x344b53.x, _0x219793.x), Math.max(_0x344b53.y, _0x219793.y));
                },
                random: function () {
                  return new _0xbc5c4a(Math.random(), Math.random());
                },
                isCollinear: function (_0x4d90e1, _0x342b8f, _0x399445, _0x33dca4) {
                  return Math.abs(_0x4d90e1 * _0x33dca4 - _0x342b8f * _0x399445) <= Math.sqrt((_0x4d90e1 * _0x4d90e1 + _0x342b8f * _0x342b8f) * (_0x399445 * _0x399445 + _0x33dca4 * _0x33dca4)) * 1e-8;
                },
                isOrthogonal: function (_0x367fc6, _0x5b0989, _0x219897, _0x4eecf2) {
                  return Math.abs(_0x367fc6 * _0x219897 + _0x5b0989 * _0x4eecf2) <= Math.sqrt((_0x367fc6 * _0x367fc6 + _0x5b0989 * _0x5b0989) * (_0x219897 * _0x219897 + _0x4eecf2 * _0x4eecf2)) * 1e-8;
                }
              }
            }, _0x28b48a.each(["round", "ceil", "floor", "abs"], function (_0x46781d) {
              var _0x9fc140 = Math[_0x46781d];
              this[_0x46781d] = function () {
                return new _0xbc5c4a(_0x9fc140(this.x), _0x9fc140(this.y));
              };
            }, {}));
            var _0x3d6d6d = _0xbc5c4a.extend({
              initialize: function (_0x52591a, _0x4b0566, _0x185c31, _0x54fc8b) {
                this._x = _0x52591a;
                this._y = _0x4b0566;
                this._owner = _0x185c31;
                this._setter = _0x54fc8b;
              },
              _set: function (_0x258df1, _0x29f297, _0x6097e9) {
                this._x = _0x258df1;
                this._y = _0x29f297;
                if (!_0x6097e9) {
                  this._owner[this._setter](this);
                }
                return this;
              },
              getX: function () {
                return this._x;
              },
              setX: function (_0x22d0df) {
                this._x = _0x22d0df;
                this._owner[this._setter](this);
              },
              getY: function () {
                return this._y;
              },
              setY: function (_0x1ecfca) {
                this._y = _0x1ecfca;
                this._owner[this._setter](this);
              },
              isSelected: function () {
                return !!(this._owner._selection & this._getSelection());
              },
              setSelected: function (_0x41770f) {
                this._owner._changeSelection(this._getSelection(), _0x41770f);
              },
              _getSelection: function () {
                if (this._setter === "setPosition") {
                  return 4;
                } else {
                  return 0;
                }
              }
            });
            var _0x236987 = _0x28b48a.extend({
              _class: "Size",
              _readIndex: true,
              initialize: function (_0x52bc64, _0x1baa89) {
                var _0x28fa4c;
                var _0x591572 = typeof _0x52bc64;
                var _0x400b2f = this.__read;
                var _0x218ff3 = 0;
                if (_0x591572 == "number") {
                  this._set(_0x52bc64, (_0x28fa4c = typeof _0x1baa89 == "number") ? _0x1baa89 : _0x52bc64);
                  if (_0x400b2f) {
                    _0x218ff3 = _0x28fa4c ? 2 : 1;
                  }
                } else if (_0x591572 == "undefined" || _0x52bc64 === null) {
                  this._set(0, 0);
                  if (_0x400b2f) {
                    _0x218ff3 = _0x52bc64 === null ? 1 : 0;
                  }
                } else {
                  _0x52bc64 = _0x591572 == "string" ? _0x52bc64.split(/[\s,]+/) || [] : _0x52bc64;
                  _0x218ff3 = 1;
                  if (Array.isArray(_0x52bc64)) {
                    this._set(+_0x52bc64[0], +(_0x52bc64.length > 1 ? _0x52bc64[1] : _0x52bc64[0]));
                  } else if ("width" in _0x52bc64) {
                    this._set(_0x52bc64.width || 0, _0x52bc64.height || 0);
                  } else if ("x" in _0x52bc64) {
                    this._set(_0x52bc64.x || 0, _0x52bc64.y || 0);
                  } else {
                    this._set(0, 0);
                    _0x218ff3 = 0;
                  }
                }
                if (_0x400b2f) {
                  this.__read = _0x218ff3;
                }
                return this;
              },
              set: "#initialize",
              _set: function (_0x455c97, _0x252b7e) {
                this.width = _0x455c97;
                this.height = _0x252b7e;
                return this;
              },
              equals: function (_0x1b3e16) {
                return _0x1b3e16 === this || _0x1b3e16 && (this.width === _0x1b3e16.width && this.height === _0x1b3e16.height || Array.isArray(_0x1b3e16) && this.width === _0x1b3e16[0] && this.height === _0x1b3e16[1]) || false;
              },
              clone: function () {
                return new _0x236987(this.width, this.height);
              },
              toString: function () {
                var _0x5c0200 = _0x5735bc.instance;
                return "{ width: " + _0x5c0200.number(this.width) + ", height: " + _0x5c0200.number(this.height) + " }";
              },
              _serialize: function (_0x1cfb53) {
                return [(_0x1cfb53 = _0x1cfb53.formatter).number(this.width), _0x1cfb53.number(this.height)];
              },
              add: function () {
                var _0x31d981 = _0x236987.read(arguments);
                return new _0x236987(this.width + _0x31d981.width, this.height + _0x31d981.height);
              },
              subtract: function () {
                var _0x583501 = _0x236987.read(arguments);
                return new _0x236987(this.width - _0x583501.width, this.height - _0x583501.height);
              },
              multiply: function () {
                var _0x4dfdfc = _0x236987.read(arguments);
                return new _0x236987(this.width * _0x4dfdfc.width, this.height * _0x4dfdfc.height);
              },
              divide: function () {
                var _0x2f6fbd = _0x236987.read(arguments);
                return new _0x236987(this.width / _0x2f6fbd.width, this.height / _0x2f6fbd.height);
              },
              modulo: function () {
                var _0x13fa81 = _0x236987.read(arguments);
                return new _0x236987(this.width % _0x13fa81.width, this.height % _0x13fa81.height);
              },
              negate: function () {
                return new _0x236987(-this.width, -this.height);
              },
              isZero: function () {
                var _0xbe23bb = _0x3c029b.isZero;
                return _0xbe23bb(this.width) && _0xbe23bb(this.height);
              },
              isNaN: function () {
                return isNaN(this.width) || isNaN(this.height);
              },
              statics: {
                min: function (_0x1c600d, _0x18003d) {
                  return new _0x236987(Math.min(_0x1c600d.width, _0x18003d.width), Math.min(_0x1c600d.height, _0x18003d.height));
                },
                max: function (_0x2cdb5d, _0x55364b) {
                  return new _0x236987(Math.max(_0x2cdb5d.width, _0x55364b.width), Math.max(_0x2cdb5d.height, _0x55364b.height));
                },
                random: function () {
                  return new _0x236987(Math.random(), Math.random());
                }
              }
            }, _0x28b48a.each(["round", "ceil", "floor", "abs"], function (_0x41648a) {
              var _0xc9a503 = Math[_0x41648a];
              this[_0x41648a] = function () {
                return new _0x236987(_0xc9a503(this.width), _0xc9a503(this.height));
              };
            }, {}));
            var _0x29ac77 = _0x236987.extend({
              initialize: function (_0x5d26eb, _0x326284, _0x2c17b7, _0xb1f5af) {
                this._width = _0x5d26eb;
                this._height = _0x326284;
                this._owner = _0x2c17b7;
                this._setter = _0xb1f5af;
              },
              _set: function (_0x2e81ce, _0x183255, _0x415843) {
                this._width = _0x2e81ce;
                this._height = _0x183255;
                if (!_0x415843) {
                  this._owner[this._setter](this);
                }
                return this;
              },
              getWidth: function () {
                return this._width;
              },
              setWidth: function (_0x5f1229) {
                this._width = _0x5f1229;
                this._owner[this._setter](this);
              },
              getHeight: function () {
                return this._height;
              },
              setHeight: function (_0x47e5f1) {
                this._height = _0x47e5f1;
                this._owner[this._setter](this);
              }
            });
            var _0x5384ce = _0x28b48a.extend({
              _class: "Rectangle",
              _readIndex: true,
              beans: true,
              initialize: function (_0x3f68c5, _0x395e9a, _0x128c1c, _0x44831a) {
                var _0x143cd6;
                var _0x3e0b55;
                var _0x3c8b70;
                var _0x2ca9fd;
                var _0x190833;
                var _0x97208e;
                var _0xcb6f5 = arguments;
                var _0x185f62 = typeof _0x3f68c5;
                if (_0x185f62 == "number") {
                  this._set(_0x3f68c5, _0x395e9a, _0x128c1c, _0x44831a);
                  _0x143cd6 = 4;
                } else if (_0x185f62 == "undefined" || _0x3f68c5 === null) {
                  this._set(0, 0, 0, 0);
                  _0x143cd6 = _0x3f68c5 === null ? 1 : 0;
                } else if (_0xcb6f5.length === 1) {
                  if (Array.isArray(_0x3f68c5)) {
                    this._set.apply(this, _0x3f68c5);
                    _0x143cd6 = 1;
                  } else if (_0x3f68c5.x !== _0x2bd7be || _0x3f68c5.width !== _0x2bd7be) {
                    this._set(_0x3f68c5.x || 0, _0x3f68c5.y || 0, _0x3f68c5.width || 0, _0x3f68c5.height || 0);
                    _0x143cd6 = 1;
                  } else if (_0x3f68c5.from === _0x2bd7be && _0x3f68c5.to === _0x2bd7be) {
                    this._set(0, 0, 0, 0);
                    if (_0x28b48a.readSupported(_0xcb6f5, this)) {
                      _0x143cd6 = 1;
                    }
                  }
                }
                if (_0x143cd6 === _0x2bd7be) {
                  _0x3c8b70 = _0xbc5c4a.readNamed(_0xcb6f5, "from");
                  _0x3e0b55 = _0x28b48a.peek(_0xcb6f5);
                  _0x185f62 = _0x3c8b70.x;
                  _0x3c8b70 = _0x3c8b70.y;
                  if (_0x3e0b55 && _0x3e0b55.x !== _0x2bd7be || _0x28b48a.hasNamed(_0xcb6f5, "to")) {
                    _0x2ca9fd = (_0x97208e = _0xbc5c4a.readNamed(_0xcb6f5, "to")).x - _0x185f62;
                    _0x190833 = _0x97208e.y - _0x3c8b70;
                    if (_0x2ca9fd < 0) {
                      _0x185f62 = _0x97208e.x;
                      _0x2ca9fd = -_0x2ca9fd;
                    }
                    if (_0x190833 < 0) {
                      _0x3c8b70 = _0x97208e.y;
                      _0x190833 = -_0x190833;
                    }
                  } else {
                    _0x2ca9fd = (_0x97208e = _0x236987.read(_0xcb6f5)).width;
                    _0x190833 = _0x97208e.height;
                  }
                  this._set(_0x185f62, _0x3c8b70, _0x2ca9fd, _0x190833);
                  _0x143cd6 = _0xcb6f5.__index;
                }
                if (_0xcb6f5 = _0xcb6f5.__filtered) {
                  this.__filtered = _0xcb6f5;
                }
                if (this.__read) {
                  this.__read = _0x143cd6;
                }
                return this;
              },
              set: "#initialize",
              _set: function (_0x3a4698, _0x1aa3d8, _0x52e0d9, _0x1def77) {
                this.x = _0x3a4698;
                this.y = _0x1aa3d8;
                this.width = _0x52e0d9;
                this.height = _0x1def77;
                return this;
              },
              clone: function () {
                return new _0x5384ce(this.x, this.y, this.width, this.height);
              },
              equals: function (_0x16c673) {
                var _0x25dede = _0x28b48a.isPlainValue(_0x16c673) ? _0x5384ce.read(arguments) : _0x16c673;
                return _0x25dede === this || _0x25dede && this.x === _0x25dede.x && this.y === _0x25dede.y && this.width === _0x25dede.width && this.height === _0x25dede.height || false;
              },
              toString: function () {
                var _0x3c650f = _0x5735bc.instance;
                return "{ x: " + _0x3c650f.number(this.x) + ", y: " + _0x3c650f.number(this.y) + ", width: " + _0x3c650f.number(this.width) + ", height: " + _0x3c650f.number(this.height) + " }";
              },
              _serialize: function (_0x3283e4) {
                return [(_0x3283e4 = _0x3283e4.formatter).number(this.x), _0x3283e4.number(this.y), _0x3283e4.number(this.width), _0x3283e4.number(this.height)];
              },
              getPoint: function (_0x1609d9) {
                return new (_0x1609d9 ? _0xbc5c4a : _0x3d6d6d)(this.x, this.y, this, "setPoint");
              },
              setPoint: function () {
                var _0x4c5652 = _0xbc5c4a.read(arguments);
                this.x = _0x4c5652.x;
                this.y = _0x4c5652.y;
              },
              getSize: function (_0x3de8fb) {
                return new (_0x3de8fb ? _0x236987 : _0x29ac77)(this.width, this.height, this, "setSize");
              },
              _fw: 1,
              _fh: 1,
              setSize: function () {
                var _0x1b7c79 = _0x236987.read(arguments);
                var _0x3be6ad = this._sx;
                var _0x1db019 = this._sy;
                var _0x10c119 = _0x1b7c79.width;
                _0x1b7c79 = _0x1b7c79.height;
                if (_0x3be6ad) {
                  this.x += (this.width - _0x10c119) * _0x3be6ad;
                }
                if (_0x1db019) {
                  this.y += (this.height - _0x1b7c79) * _0x1db019;
                }
                this.width = _0x10c119;
                this.height = _0x1b7c79;
                this._fw = this._fh = 1;
              },
              getLeft: function () {
                return this.x;
              },
              setLeft: function (_0x2ba14a) {
                var _0x17947b;
                if (!this._fw) {
                  _0x17947b = _0x2ba14a - this.x;
                  this.width -= this._sx === 0.5 ? _0x17947b * 2 : _0x17947b;
                }
                this.x = _0x2ba14a;
                this._sx = this._fw = 0;
              },
              getTop: function () {
                return this.y;
              },
              setTop: function (_0x5124d) {
                var _0x3789af;
                if (!this._fh) {
                  _0x3789af = _0x5124d - this.y;
                  this.height -= this._sy === 0.5 ? _0x3789af * 2 : _0x3789af;
                }
                this.y = _0x5124d;
                this._sy = this._fh = 0;
              },
              getRight: function () {
                return this.x + this.width;
              },
              setRight: function (_0x3cf1ed) {
                var _0x2f29e4;
                if (!this._fw) {
                  _0x2f29e4 = _0x3cf1ed - this.x;
                  this.width = this._sx === 0.5 ? _0x2f29e4 * 2 : _0x2f29e4;
                }
                this.x = _0x3cf1ed - this.width;
                this._sx = 1;
                this._fw = 0;
              },
              getBottom: function () {
                return this.y + this.height;
              },
              setBottom: function (_0x9d5fe1) {
                var _0x1afa8d;
                if (!this._fh) {
                  _0x1afa8d = _0x9d5fe1 - this.y;
                  this.height = this._sy === 0.5 ? _0x1afa8d * 2 : _0x1afa8d;
                }
                this.y = _0x9d5fe1 - this.height;
                this._sy = 1;
                this._fh = 0;
              },
              getCenterX: function () {
                return this.x + this.width / 2;
              },
              setCenterX: function (_0x4dba72) {
                if (this._fw || this._sx === 0.5) {
                  this.x = _0x4dba72 - this.width / 2;
                } else {
                  if (this._sx) {
                    this.x += (_0x4dba72 - this.x) * 2 * this._sx;
                  }
                  this.width = (_0x4dba72 - this.x) * 2;
                }
                this._sx = 0.5;
                this._fw = 0;
              },
              getCenterY: function () {
                return this.y + this.height / 2;
              },
              setCenterY: function (_0x4c6dd3) {
                if (this._fh || this._sy === 0.5) {
                  this.y = _0x4c6dd3 - this.height / 2;
                } else {
                  if (this._sy) {
                    this.y += (_0x4c6dd3 - this.y) * 2 * this._sy;
                  }
                  this.height = (_0x4c6dd3 - this.y) * 2;
                }
                this._sy = 0.5;
                this._fh = 0;
              },
              getCenter: function (_0x28643a) {
                return new (_0x28643a ? _0xbc5c4a : _0x3d6d6d)(this.getCenterX(), this.getCenterY(), this, "setCenter");
              },
              setCenter: function () {
                var _0x521ea8 = _0xbc5c4a.read(arguments);
                this.setCenterX(_0x521ea8.x);
                this.setCenterY(_0x521ea8.y);
                return this;
              },
              getArea: function () {
                return this.width * this.height;
              },
              isEmpty: function () {
                return this.width === 0 || this.height === 0;
              },
              contains: function (_0x39b6b1) {
                if (_0x39b6b1 && _0x39b6b1.width !== _0x2bd7be || (Array.isArray(_0x39b6b1) ? _0x39b6b1 : arguments).length === 4) {
                  return this._containsRectangle(_0x5384ce.read(arguments));
                } else {
                  return this._containsPoint(_0xbc5c4a.read(arguments));
                }
              },
              _containsPoint: function (_0x5612c8) {
                var _0x426c08 = _0x5612c8.x;
                _0x5612c8 = _0x5612c8.y;
                return _0x426c08 >= this.x && _0x5612c8 >= this.y && _0x426c08 <= this.x + this.width && _0x5612c8 <= this.y + this.height;
              },
              _containsRectangle: function (_0x72b1b3) {
                var _0x8a591 = _0x72b1b3.x;
                var _0x414f78 = _0x72b1b3.y;
                return _0x8a591 >= this.x && _0x414f78 >= this.y && _0x8a591 + _0x72b1b3.width <= this.x + this.width && _0x414f78 + _0x72b1b3.height <= this.y + this.height;
              },
              intersects: function () {
                var _0x388bec = _0x5384ce.read(arguments);
                var _0xc4f5fb = _0x28b48a.read(arguments) || 0;
                return _0x388bec.x + _0x388bec.width > this.x - _0xc4f5fb && _0x388bec.y + _0x388bec.height > this.y - _0xc4f5fb && _0x388bec.x < this.x + this.width + _0xc4f5fb && _0x388bec.y < this.y + this.height + _0xc4f5fb;
              },
              intersect: function () {
                var _0x158be0 = _0x5384ce.read(arguments);
                var _0x27e631 = Math.max(this.x, _0x158be0.x);
                var _0x2e18a8 = Math.max(this.y, _0x158be0.y);
                var _0x1f89a9 = Math.min(this.x + this.width, _0x158be0.x + _0x158be0.width);
                _0x158be0 = Math.min(this.y + this.height, _0x158be0.y + _0x158be0.height);
                return new _0x5384ce(_0x27e631, _0x2e18a8, _0x1f89a9 - _0x27e631, _0x158be0 - _0x2e18a8);
              },
              unite: function () {
                var _0x41086f = _0x5384ce.read(arguments);
                var _0x2f7bf5 = Math.min(this.x, _0x41086f.x);
                var _0x59bb0a = Math.min(this.y, _0x41086f.y);
                var _0x2cb9ab = Math.max(this.x + this.width, _0x41086f.x + _0x41086f.width);
                _0x41086f = Math.max(this.y + this.height, _0x41086f.y + _0x41086f.height);
                return new _0x5384ce(_0x2f7bf5, _0x59bb0a, _0x2cb9ab - _0x2f7bf5, _0x41086f - _0x59bb0a);
              },
              include: function () {
                var _0x4c975f = _0xbc5c4a.read(arguments);
                var _0x1cc2a9 = Math.min(this.x, _0x4c975f.x);
                var _0x160383 = Math.min(this.y, _0x4c975f.y);
                var _0x347d29 = Math.max(this.x + this.width, _0x4c975f.x);
                _0x4c975f = Math.max(this.y + this.height, _0x4c975f.y);
                return new _0x5384ce(_0x1cc2a9, _0x160383, _0x347d29 - _0x1cc2a9, _0x4c975f - _0x160383);
              },
              expand: function () {
                var _0x3b91f7 = (_0x2ba63e = _0x236987.read(arguments)).width;
                var _0x2ba63e = _0x2ba63e.height;
                return new _0x5384ce(this.x - _0x3b91f7 / 2, this.y - _0x2ba63e / 2, this.width + _0x3b91f7, this.height + _0x2ba63e);
              },
              scale: function (_0x4e1508, _0x18b048) {
                return this.expand(this.width * _0x4e1508 - this.width, this.height * (_0x18b048 === _0x2bd7be ? _0x4e1508 : _0x18b048) - this.height);
              }
            }, _0x28b48a.each([["Top", "Left"], ["Top", "Right"], ["Bottom", "Left"], ["Bottom", "Right"], ["Left", "Center"], ["Top", "Center"], ["Right", "Center"], ["Bottom", "Center"]], function (_0x87a35a, _0x1d1326) {
              var _0x1ea0fb = _0x87a35a.join("");
              var _0x5bfc83 = /^[RL]/.test(_0x1ea0fb);
              if (_0x1d1326 >= 4) {
                _0x87a35a[1] += _0x5bfc83 ? "Y" : "X";
              }
              _0x1d1326 = _0x87a35a[_0x5bfc83 ? 0 : 1];
              _0x5bfc83 = _0x87a35a[_0x5bfc83 ? 1 : 0];
              var _0x440a70 = "get" + _0x1d1326;
              var _0x44f1d1 = "get" + _0x5bfc83;
              var _0xe87099 = "set" + _0x1d1326;
              var _0x4dd512 = "set" + _0x5bfc83;
              var _0x1521ff = "set" + _0x1ea0fb;
              this["get" + _0x1ea0fb] = function (_0x175e2c) {
                return new (_0x175e2c ? _0xbc5c4a : _0x3d6d6d)(this[_0x440a70](), this[_0x44f1d1](), this, _0x1521ff);
              };
              this[_0x1521ff] = function () {
                var _0x4e352b = _0xbc5c4a.read(arguments);
                this[_0xe87099](_0x4e352b.x);
                this[_0x4dd512](_0x4e352b.y);
              };
            }, {
              beans: true
            }));
            var _0x3d7bf7 = _0x5384ce.extend({
              initialize: function (_0x5cb747, _0x4ea349, _0x30a0aa, _0x6552a5, _0x4160f8, _0xbe73d8) {
                this._set(_0x5cb747, _0x4ea349, _0x30a0aa, _0x6552a5, true);
                this._owner = _0x4160f8;
                this._setter = _0xbe73d8;
              },
              _set: function (_0x8c47eb, _0x10b9b8, _0x3cf4a5, _0x4db79d, _0x9503a4) {
                this._x = _0x8c47eb;
                this._y = _0x10b9b8;
                this._width = _0x3cf4a5;
                this._height = _0x4db79d;
                if (!_0x9503a4) {
                  this._owner[this._setter](this);
                }
                return this;
              }
            }, new function () {
              var _0x22baca = _0x5384ce.prototype;
              return _0x28b48a.each(["x", "y", "width", "height"], function (_0x1e654c) {
                var _0x15feef = _0x28b48a.capitalize(_0x1e654c);
                var _0x535b79 = "_" + _0x1e654c;
                this["get" + _0x15feef] = function () {
                  return this[_0x535b79];
                };
                this["set" + _0x15feef] = function (_0x2dbe30) {
                  this[_0x535b79] = _0x2dbe30;
                  if (!this._dontNotify) {
                    this._owner[this._setter](this);
                  }
                };
              }, _0x28b48a.each(["Point", "Size", "Center", "Left", "Top", "Right", "Bottom", "CenterX", "CenterY", "TopLeft", "TopRight", "BottomLeft", "BottomRight", "LeftCenter", "TopCenter", "RightCenter", "BottomCenter"], function (_0x20cefd) {
                var _0x11796f = "set" + _0x20cefd;
                this[_0x11796f] = function () {
                  this._dontNotify = true;
                  _0x22baca[_0x11796f].apply(this, arguments);
                  this._dontNotify = false;
                  this._owner[this._setter](this);
                };
              }, {
                isSelected: function () {
                  return !!(this._owner._selection & 2);
                },
                setSelected: function (_0xf218b3) {
                  var _0x3eb214 = this._owner;
                  if (_0x3eb214._changeSelection) {
                    _0x3eb214._changeSelection(2, _0xf218b3);
                  }
                }
              }));
            }());
            var _0x1a5a7c = _0x28b48a.extend({
              _class: "Matrix",
              initialize: function _0xfc551d(_0x11b967, _0x1df7ce) {
                var _0x39499e = arguments;
                var _0x38fd3e = _0x39499e.length;
                var _0x148e76 = true;
                if (_0x38fd3e >= 6) {
                  this._set.apply(this, _0x39499e);
                } else if (_0x38fd3e === 1 || _0x38fd3e === 2) {
                  if (_0x11b967 instanceof _0xfc551d) {
                    this._set(_0x11b967._a, _0x11b967._b, _0x11b967._c, _0x11b967._d, _0x11b967._tx, _0x11b967._ty, _0x1df7ce);
                  } else if (Array.isArray(_0x11b967)) {
                    this._set.apply(this, _0x1df7ce ? _0x11b967.concat([_0x1df7ce]) : _0x11b967);
                  } else {
                    _0x148e76 = false;
                  }
                } else if (_0x38fd3e) {
                  _0x148e76 = false;
                } else {
                  this.reset();
                }
                if (!_0x148e76) {
                  throw new Error(".......");
                }
                return this;
              },
              set: "#initialize",
              _set: function (_0x4d152b, _0x7c174, _0x47e44e, _0x42b5f3, _0x1b5a5a, _0x3e1cd8, _0x100062) {
                this._a = _0x4d152b;
                this._b = _0x7c174;
                this._c = _0x47e44e;
                this._d = _0x42b5f3;
                this._tx = _0x1b5a5a;
                this._ty = _0x3e1cd8;
                if (!_0x100062) {
                  this._changed();
                }
                return this;
              },
              _serialize: function (_0x20f87f, _0x12a104) {
                return _0x28b48a.serialize(this.getValues(), _0x20f87f, true, _0x12a104);
              },
              _changed: function () {
                var _0xc4e3df = this._owner;
                if (_0xc4e3df) {
                  if (_0xc4e3df._applyMatrix) {
                    _0xc4e3df.transform(null, true);
                  } else {
                    _0xc4e3df._changed(25);
                  }
                }
              },
              clone: function () {
                return new _0x1a5a7c(this._a, this._b, this._c, this._d, this._tx, this._ty);
              },
              equals: function (_0x5d28ae) {
                return _0x5d28ae === this || _0x5d28ae && this._a === _0x5d28ae._a && this._b === _0x5d28ae._b && this._c === _0x5d28ae._c && this._d === _0x5d28ae._d && this._tx === _0x5d28ae._tx && this._ty === _0x5d28ae._ty;
              },
              toString: function () {
                var _0x2ba4fb = _0x5735bc.instance;
                return "[[" + [_0x2ba4fb.number(this._a), _0x2ba4fb.number(this._c), _0x2ba4fb.number(this._tx)].join(", ") + "], [" + [_0x2ba4fb.number(this._b), _0x2ba4fb.number(this._d), _0x2ba4fb.number(this._ty)].join(", ") + "]]";
              },
              reset: function (_0x1aaafd) {
                this._a = this._d = 1;
                this._b = this._c = this._tx = this._ty = 0;
                if (!_0x1aaafd) {
                  this._changed();
                }
                return this;
              },
              apply: function (_0x34b3b7, _0xbc6d43) {
                var _0x1a6f39 = this._owner;
                return !!_0x1a6f39 && (_0x1a6f39.transform(null, _0x28b48a.pick(_0x34b3b7, true), _0xbc6d43), this.isIdentity());
              },
              translate: function () {
                var _0x29b974 = (_0x3e7880 = _0xbc5c4a.read(arguments)).x;
                var _0x3e7880 = _0x3e7880.y;
                this._tx += _0x29b974 * this._a + _0x3e7880 * this._c;
                this._ty += _0x29b974 * this._b + _0x3e7880 * this._d;
                this._changed();
                return this;
              },
              scale: function () {
                var _0x37631a = arguments;
                var _0x1b21d2 = _0xbc5c4a.read(_0x37631a);
                if (_0x37631a = _0xbc5c4a.read(_0x37631a, 0, {
                  readNull: true
                })) {
                  this.translate(_0x37631a);
                }
                this._a *= _0x1b21d2.x;
                this._b *= _0x1b21d2.x;
                this._c *= _0x1b21d2.y;
                this._d *= _0x1b21d2.y;
                if (_0x37631a) {
                  this.translate(_0x37631a.negate());
                }
                this._changed();
                return this;
              },
              rotate: function (_0x2a693d) {
                _0x2a693d *= Math.PI / 180;
                var _0x2f3146 = (_0x5fcc66 = _0xbc5c4a.read(arguments, 1)).x;
                var _0x365c24 = _0x5fcc66.y;
                var _0x52be21 = Math.cos(_0x2a693d);
                var _0xde1733 = Math.sin(_0x2a693d);
                var _0x363157 = _0x2f3146 - _0x2f3146 * _0x52be21 + _0x365c24 * _0xde1733;
                var _0x46663a = _0x365c24 - _0x2f3146 * _0xde1733 - _0x365c24 * _0x52be21;
                var _0x356d77 = this._a;
                var _0x5fcc66 = this._b;
                _0x2f3146 = this._c;
                _0x365c24 = this._d;
                this._a = _0x52be21 * _0x356d77 + _0xde1733 * _0x2f3146;
                this._b = _0x52be21 * _0x5fcc66 + _0xde1733 * _0x365c24;
                this._c = -_0xde1733 * _0x356d77 + _0x52be21 * _0x2f3146;
                this._d = -_0xde1733 * _0x5fcc66 + _0x52be21 * _0x365c24;
                this._tx += _0x363157 * _0x356d77 + _0x46663a * _0x2f3146;
                this._ty += _0x363157 * _0x5fcc66 + _0x46663a * _0x365c24;
                this._changed();
                return this;
              },
              shear: function () {
                var _0x19e804 = arguments;
                var _0x2daa67 = _0xbc5c4a.read(_0x19e804);
                var _0x261f7f = _0xbc5c4a.read(_0x19e804, 0, {
                  readNull: true
                });
                if (_0x261f7f) {
                  this.translate(_0x261f7f);
                }
                var _0x2f9385 = this._a;
                _0x19e804 = this._b;
                this._a += _0x2daa67.y * this._c;
                this._b += _0x2daa67.y * this._d;
                this._c += _0x2daa67.x * _0x2f9385;
                this._d += _0x2daa67.x * _0x19e804;
                if (_0x261f7f) {
                  this.translate(_0x261f7f.negate());
                }
                this._changed();
                return this;
              },
              skew: function () {
                var _0x5a65db = arguments;
                var _0x20e3fa = _0xbc5c4a.read(_0x5a65db);
                var _0x334a17 = _0xbc5c4a.read(_0x5a65db, 0, {
                  readNull: true
                });
                _0x5a65db = Math.PI / 180;
                _0x5a65db = new _0xbc5c4a(Math.tan(_0x20e3fa.x * _0x5a65db), Math.tan(_0x20e3fa.y * _0x5a65db));
                return this.shear(_0x5a65db, _0x334a17);
              },
              append: function (_0x13a8a3, _0x4a5156) {
                var _0x4e53c2;
                var _0x578d6a;
                var _0x32f5d7;
                var _0x4e3785;
                var _0x52f875;
                var _0x291500;
                var _0x189e06;
                var _0x478066;
                var _0x5d454d;
                if (_0x13a8a3) {
                  _0x4e53c2 = this._a;
                  _0x578d6a = this._b;
                  _0x32f5d7 = this._c;
                  _0x4e3785 = this._d;
                  _0x52f875 = _0x13a8a3._a;
                  _0x291500 = _0x13a8a3._c;
                  _0x189e06 = _0x13a8a3._b;
                  _0x478066 = _0x13a8a3._d;
                  _0x5d454d = _0x13a8a3._tx;
                  _0x13a8a3 = _0x13a8a3._ty;
                  this._a = _0x52f875 * _0x4e53c2 + _0x189e06 * _0x32f5d7;
                  this._c = _0x291500 * _0x4e53c2 + _0x478066 * _0x32f5d7;
                  this._b = _0x52f875 * _0x578d6a + _0x189e06 * _0x4e3785;
                  this._d = _0x291500 * _0x578d6a + _0x478066 * _0x4e3785;
                  this._tx += _0x5d454d * _0x4e53c2 + _0x13a8a3 * _0x32f5d7;
                  this._ty += _0x5d454d * _0x578d6a + _0x13a8a3 * _0x4e3785;
                  if (!_0x4a5156) {
                    this._changed();
                  }
                }
                return this;
              },
              prepend: function (_0x1d00b4, _0x3192d8) {
                var _0x3165bc;
                var _0x10eb4e;
                var _0x5662f0;
                var _0x3d6faa;
                var _0x487e57;
                var _0x8234;
                var _0x168b7d;
                var _0x5f18d1;
                var _0x263ef4;
                var _0x26d8cb;
                var _0x15ef8d;
                if (_0x1d00b4) {
                  _0x3165bc = this._a;
                  _0x10eb4e = this._b;
                  _0x5662f0 = this._c;
                  _0x3d6faa = this._d;
                  _0x487e57 = this._tx;
                  _0x8234 = this._ty;
                  _0x168b7d = _0x1d00b4._a;
                  _0x5f18d1 = _0x1d00b4._c;
                  _0x263ef4 = _0x1d00b4._b;
                  _0x26d8cb = _0x1d00b4._d;
                  _0x15ef8d = _0x1d00b4._tx;
                  _0x1d00b4 = _0x1d00b4._ty;
                  this._a = _0x168b7d * _0x3165bc + _0x5f18d1 * _0x10eb4e;
                  this._c = _0x168b7d * _0x5662f0 + _0x5f18d1 * _0x3d6faa;
                  this._b = _0x263ef4 * _0x3165bc + _0x26d8cb * _0x10eb4e;
                  this._d = _0x263ef4 * _0x5662f0 + _0x26d8cb * _0x3d6faa;
                  this._tx = _0x168b7d * _0x487e57 + _0x5f18d1 * _0x8234 + _0x15ef8d;
                  this._ty = _0x263ef4 * _0x487e57 + _0x26d8cb * _0x8234 + _0x1d00b4;
                  if (!_0x3192d8) {
                    this._changed();
                  }
                }
                return this;
              },
              appended: function (_0x1ec7a6) {
                return this.clone().append(_0x1ec7a6);
              },
              prepended: function (_0x467289) {
                return this.clone().prepend(_0x467289);
              },
              invert: function () {
                var _0x1e34f6 = this._a;
                var _0x200da3 = this._b;
                var _0xdb99b1 = this._c;
                var _0x363a07 = this._d;
                var _0x3779c2 = this._tx;
                var _0xe9106d = this._ty;
                var _0x198a99 = _0x1e34f6 * _0x363a07 - _0x200da3 * _0xdb99b1;
                var _0xaddf0b = null;
                if (_0x198a99 && !isNaN(_0x198a99) && isFinite(_0x3779c2) && isFinite(_0xe9106d)) {
                  this._a = _0x363a07 / _0x198a99;
                  this._b = -_0x200da3 / _0x198a99;
                  this._c = -_0xdb99b1 / _0x198a99;
                  this._d = _0x1e34f6 / _0x198a99;
                  this._tx = (_0xdb99b1 * _0xe9106d - _0x363a07 * _0x3779c2) / _0x198a99;
                  this._ty = (_0x200da3 * _0x3779c2 - _0x1e34f6 * _0xe9106d) / _0x198a99;
                  _0xaddf0b = this;
                }
                return _0xaddf0b;
              },
              inverted: function () {
                return this.clone().invert();
              },
              concatenate: "#append",
              preConcatenate: "#prepend",
              chain: "#appended",
              _shiftless: function () {
                return new _0x1a5a7c(this._a, this._b, this._c, this._d, 0, 0);
              },
              _orNullIfIdentity: function () {
                if (this.isIdentity()) {
                  return null;
                } else {
                  return this;
                }
              },
              isIdentity: function () {
                return this._a === 1 && this._b === 0 && this._c === 0 && this._d === 1 && this._tx === 0 && this._ty === 0;
              },
              isInvertible: function () {
                var _0x5edc2f = this._a * this._d - this._c * this._b;
                return _0x5edc2f && !isNaN(_0x5edc2f) && isFinite(this._tx) && isFinite(this._ty);
              },
              isSingular: function () {
                return !this.isInvertible();
              },
              transform: function (_0x4fabdc, _0x39ed8d, _0x23c725) {
                if (arguments.length < 3) {
                  return this._transformPoint(_0xbc5c4a.read(arguments));
                } else {
                  return this._transformCoordinates(_0x4fabdc, _0x39ed8d, _0x23c725);
                }
              },
              _transformPoint: function (_0x217051, _0x26b432, _0x21c0c8) {
                var _0x4dbfc5 = _0x217051.x;
                _0x217051 = _0x217051.y;
                return (_0x26b432 = _0x26b432 || new _0xbc5c4a())._set(_0x4dbfc5 * this._a + _0x217051 * this._c + this._tx, _0x4dbfc5 * this._b + _0x217051 * this._d + this._ty, _0x21c0c8);
              },
              _transformCoordinates: function (_0x1ddf84, _0x5929ce, _0x25826a) {
                for (var _0x39a0d1 = 0, _0x578b65 = _0x25826a * 2; _0x39a0d1 < _0x578b65; _0x39a0d1 += 2) {
                  var _0xae9153 = _0x1ddf84[_0x39a0d1];
                  var _0x5c7bd8 = _0x1ddf84[_0x39a0d1 + 1];
                  _0x5929ce[_0x39a0d1] = _0xae9153 * this._a + _0x5c7bd8 * this._c + this._tx;
                  _0x5929ce[_0x39a0d1 + 1] = _0xae9153 * this._b + _0x5c7bd8 * this._d + this._ty;
                }
                return _0x5929ce;
              },
              _transformCorners: function (_0x3c8435) {
                var _0x2d1eed = _0x3c8435.x;
                var _0x476cfd = _0x3c8435.y;
                var _0x379405 = _0x2d1eed + _0x3c8435.width;
                _0x3c8435 = [_0x2d1eed, _0x476cfd, _0x379405, _0x476cfd, _0x379405, _0x3c8435 = _0x476cfd + _0x3c8435.height, _0x2d1eed, _0x3c8435];
                return this._transformCoordinates(_0x3c8435, _0x3c8435, 4);
              },
              _transformBounds: function (_0xb2e423, _0x3d6383, _0x1bbde3) {
                for (var _0x5ee816 = this._transformCorners(_0xb2e423), _0x5cf7a7 = _0x5ee816.slice(0, 2), _0x71611a = _0x5cf7a7.slice(), _0x7bdc47 = 2; _0x7bdc47 < 8; _0x7bdc47++) {
                  var _0x26df88 = _0x5ee816[_0x7bdc47];
                  var _0x533f34 = _0x7bdc47 & 1;
                  if (_0x26df88 < _0x5cf7a7[_0x533f34]) {
                    _0x5cf7a7[_0x533f34] = _0x26df88;
                  } else if (_0x26df88 > _0x71611a[_0x533f34]) {
                    _0x71611a[_0x533f34] = _0x26df88;
                  }
                }
                return (_0x3d6383 = _0x3d6383 || new _0x5384ce())._set(_0x5cf7a7[0], _0x5cf7a7[1], _0x71611a[0] - _0x5cf7a7[0], _0x71611a[1] - _0x5cf7a7[1], _0x1bbde3);
              },
              inverseTransform: function () {
                return this._inverseTransform(_0xbc5c4a.read(arguments));
              },
              _inverseTransform: function (_0x1960dd, _0x2e7458, _0x30e920) {
                var _0x391de7 = this._a;
                var _0xfc1743 = this._b;
                var _0x48a88d = this._c;
                var _0x5886fc = this._d;
                var _0x11367a = this._tx;
                var _0x4e9451 = this._ty;
                var _0x5d5bfb = _0x391de7 * _0x5886fc - _0xfc1743 * _0x48a88d;
                var _0x2ee2c6 = null;
                if (_0x5d5bfb && !isNaN(_0x5d5bfb) && isFinite(_0x11367a) && isFinite(_0x4e9451)) {
                  _0x4e9451 = _0x1960dd.x - this._tx;
                  _0x1960dd = _0x1960dd.y - this._ty;
                  _0x2ee2c6 = (_0x2e7458 = _0x2e7458 || new _0xbc5c4a())._set((_0x4e9451 * _0x5886fc - _0x1960dd * _0x48a88d) / _0x5d5bfb, (_0x1960dd * _0x391de7 - _0x4e9451 * _0xfc1743) / _0x5d5bfb, _0x30e920);
                }
                return _0x2ee2c6;
              },
              decompose: function () {
                var _0x554af0;
                var _0x50f8fb;
                var _0x5e5958;
                var _0x5980dd;
                var _0x212137 = this._a;
                var _0x5be372 = this._b;
                var _0xa14d7c = this._c;
                var _0x2859e2 = this._d;
                var _0x482c42 = _0x212137 * _0x2859e2 - _0x5be372 * _0xa14d7c;
                var _0x33796a = Math.sqrt;
                var _0x2d6891 = Math.atan2;
                var _0x8e73dd = 180 / Math.PI;
                _0x5980dd = _0x212137 !== 0 || _0x5be372 !== 0 ? (_0x554af0 = _0x33796a(_0x212137 * _0x212137 + _0x5be372 * _0x5be372), _0x50f8fb = Math.acos(_0x212137 / _0x554af0) * (_0x5be372 > 0 ? 1 : -1), _0x5e5958 = [_0x554af0, _0x482c42 / _0x554af0], [_0x2d6891(_0x212137 * _0xa14d7c + _0x5be372 * _0x2859e2, _0x554af0 * _0x554af0), 0]) : _0xa14d7c !== 0 || _0x2859e2 !== 0 ? (_0x5980dd = _0x33796a(_0xa14d7c * _0xa14d7c + _0x2859e2 * _0x2859e2), _0x50f8fb = Math.asin(_0xa14d7c / _0x5980dd) * (_0x2859e2 > 0 ? 1 : -1), _0x5e5958 = [_0x482c42 / _0x5980dd, _0x5980dd], [0, _0x2d6891(_0x212137 * _0xa14d7c + _0x5be372 * _0x2859e2, _0x5980dd * _0x5980dd)]) : _0x5e5958 = [_0x50f8fb = 0, 0];
                return {
                  translation: this.getTranslation(),
                  rotation: _0x50f8fb * _0x8e73dd,
                  scaling: new _0xbc5c4a(_0x5e5958),
                  skewing: new _0xbc5c4a(_0x5980dd[0] * _0x8e73dd, _0x5980dd[1] * _0x8e73dd)
                };
              },
              getValues: function () {
                return [this._a, this._b, this._c, this._d, this._tx, this._ty];
              },
              getTranslation: function () {
                return new _0xbc5c4a(this._tx, this._ty);
              },
              getScaling: function () {
                return this.decompose().scaling;
              },
              getRotation: function () {
                return this.decompose().rotation;
              },
              applyToContext: function (_0x156fcf) {
                if (!this.isIdentity()) {
                  _0x156fcf.transform(this._a, this._b, this._c, this._d, this._tx, this._ty);
                }
              }
            }, _0x28b48a.each(["a", "b", "c", "d", "tx", "ty"], function (_0x9cbe00) {
              var _0x58f78f = _0x28b48a.capitalize(_0x9cbe00);
              var _0x8d85bc = "_" + _0x9cbe00;
              this["get" + _0x58f78f] = function () {
                return this[_0x8d85bc];
              };
              this["set" + _0x58f78f] = function (_0x158c1b) {
                this[_0x8d85bc] = _0x158c1b;
                this._changed();
              };
            }, {}));
            var _0x170222 = _0x28b48a.extend({
              _class: "Line",
              initialize: function (_0x12b885, _0x30edfc, _0x3d5147, _0x2d26ad, _0x71e2c) {
                if (!(arguments.length >= 4 ? (this._px = _0x12b885, this._py = _0x30edfc, this._vx = _0x3d5147, this._vy = _0x2d26ad, _0x71e2c) : (this._px = _0x12b885.x, this._py = _0x12b885.y, this._vx = _0x30edfc.x, this._vy = _0x30edfc.y, _0x3d5147))) {
                  this._vx -= this._px;
                  this._vy -= this._py;
                }
              },
              getPoint: function () {
                return new _0xbc5c4a(this._px, this._py);
              },
              getVector: function () {
                return new _0xbc5c4a(this._vx, this._vy);
              },
              getLength: function () {
                return this.getVector().getLength();
              },
              intersect: function (_0x1a4c49, _0x5d9cca) {
                return _0x170222.intersect(this._px, this._py, this._vx, this._vy, _0x1a4c49._px, _0x1a4c49._py, _0x1a4c49._vx, _0x1a4c49._vy, true, _0x5d9cca);
              },
              getSide: function (_0x3877d0, _0x4834a8) {
                return _0x170222.getSide(this._px, this._py, this._vx, this._vy, _0x3877d0.x, _0x3877d0.y, true, _0x4834a8);
              },
              getDistance: function (_0x559685) {
                return Math.abs(this.getSignedDistance(_0x559685));
              },
              getSignedDistance: function (_0x3106fd) {
                return _0x170222.getSignedDistance(this._px, this._py, this._vx, this._vy, _0x3106fd.x, _0x3106fd.y, true);
              },
              isCollinear: function (_0x42b001) {
                return _0xbc5c4a.isCollinear(this._vx, this._vy, _0x42b001._vx, _0x42b001._vy);
              },
              isOrthogonal: function (_0xffe840) {
                return _0xbc5c4a.isOrthogonal(this._vx, this._vy, _0xffe840._vx, _0xffe840._vy);
              },
              statics: {
                intersect: function (_0x25a9d5, _0x4eee2c, _0x42569e, _0x26e25d, _0x539163, _0x4b94a7, _0x1f05a6, _0x1f9fab, _0x510747, _0x1b65fb) {
                  if (!_0x510747) {
                    _0x42569e -= _0x25a9d5;
                    _0x26e25d -= _0x4eee2c;
                    _0x1f05a6 -= _0x539163;
                    _0x1f9fab -= _0x4b94a7;
                  }
                  _0x510747 = _0x42569e * _0x1f9fab - _0x26e25d * _0x1f05a6;
                  if (!_0x3c029b.isMachineZero(_0x510747) && (_0x1f9fab = (_0x1f05a6 * (_0x4b94a7 = _0x4eee2c - _0x4b94a7) - _0x1f9fab * (_0x539163 = _0x25a9d5 - _0x539163)) / _0x510747, _0x510747 = (_0x42569e * _0x4b94a7 - _0x26e25d * _0x539163) / _0x510747, _0x1b65fb || _0x1f9fab > -1e-12 && _0x1f9fab < 1.000000000001 && _0x510747 > -1e-12 && _0x510747 < 1.000000000001)) {
                    return new _0xbc5c4a(_0x25a9d5 + (_0x1f9fab = _0x1b65fb ? _0x1f9fab : _0x1f9fab <= 0 ? 0 : _0x1f9fab >= 1 ? 1 : _0x1f9fab) * _0x42569e, _0x4eee2c + _0x1f9fab * _0x26e25d);
                  }
                },
                getSide: function (_0x1ce383, _0x3bf81c, _0x3d07c2, _0x1a0801, _0x41e4e9, _0x4f8093, _0x3318d7, _0x559f40) {
                  if (!_0x3318d7) {
                    _0x3d07c2 -= _0x1ce383;
                    _0x1a0801 -= _0x3bf81c;
                  }
                  _0x3bf81c = (_0x1ce383 = _0x41e4e9 - _0x1ce383) * _0x1a0801 - (_0x4f8093 - _0x3bf81c) * _0x3d07c2;
                  if ((_0x3bf81c = !_0x559f40 && _0x3c029b.isMachineZero(_0x3bf81c) && (_0x3bf81c = (_0x1ce383 * _0x3d07c2 + _0x1ce383 * _0x3d07c2) / (_0x3d07c2 * _0x3d07c2 + _0x1a0801 * _0x1a0801)) >= 0 && _0x3bf81c <= 1 ? 0 : _0x3bf81c) < 0) {
                    return -1;
                  } else if (_0x3bf81c > 0) {
                    return 1;
                  } else {
                    return 0;
                  }
                },
                getSignedDistance: function (_0x19def5, _0x470550, _0x417212, _0x1e4409, _0x55fb6a, _0x2cbf07, _0x5685f9) {
                  if (!_0x5685f9) {
                    _0x417212 -= _0x19def5;
                    _0x1e4409 -= _0x470550;
                  }
                  if (_0x417212 === 0) {
                    if (_0x1e4409 > 0) {
                      return _0x55fb6a - _0x19def5;
                    } else {
                      return _0x19def5 - _0x55fb6a;
                    }
                  } else if (_0x1e4409 === 0) {
                    if (_0x417212 < 0) {
                      return _0x2cbf07 - _0x470550;
                    } else {
                      return _0x470550 - _0x2cbf07;
                    }
                  } else {
                    return ((_0x55fb6a - _0x19def5) * _0x1e4409 - (_0x2cbf07 - _0x470550) * _0x417212) / (_0x417212 < _0x1e4409 ? _0x1e4409 * Math.sqrt(1 + _0x417212 * _0x417212 / (_0x1e4409 * _0x1e4409)) : _0x417212 * Math.sqrt(1 + _0x1e4409 * _0x1e4409 / (_0x417212 * _0x417212)));
                  }
                },
                getDistance: function (_0x122dec, _0x3ee057, _0x11fde3, _0x4d3198, _0x3b6efd, _0x70c6d5, _0x11c227) {
                  return Math.abs(_0x170222.getSignedDistance(_0x122dec, _0x3ee057, _0x11fde3, _0x4d3198, _0x3b6efd, _0x70c6d5, _0x11c227));
                }
              }
            });
            var _0x25cf80 = _0xfdb836.extend({
              _class: "Project",
              _list: "projects",
              _reference: "project",
              _compactSerialize: true,
              initialize: function (_0x386da4) {
                _0xfdb836.call(this, true);
                this._children = [];
                this._namedChildren = {};
                this._activeLayer = null;
                this._currentStyle = new _0x567b1a(null, null, this);
                this._view = _0x5d3cad.create(this, _0x386da4 || _0xc9a63f.getCanvas(1, 1));
                this._selectionItems = {};
                this._selectionCount = 0;
                this._updateVersion = 0;
              },
              _serialize: function (_0x3bb949, _0x5e1648) {
                return _0x28b48a.serialize(this._children, _0x3bb949, true, _0x5e1648);
              },
              _changed: function (_0x16ce9b, _0x2730dd) {
                if (_0x16ce9b & 1 && (_0x585bf8 = this._view)) {
                  _0x585bf8._needsUpdate = true;
                  if (!_0x585bf8._requested && _0x585bf8._autoUpdate) {
                    _0x585bf8.requestUpdate();
                  }
                }
                var _0x2394af;
                var _0x3e7788;
                var _0x585bf8;
                var _0x55e402 = this._changes;
                if (_0x55e402 && _0x2730dd) {
                  if (_0x585bf8 = (_0x2394af = this._changesById)[_0x3e7788 = _0x2730dd._id]) {
                    _0x585bf8.flags |= _0x16ce9b;
                  } else {
                    _0x55e402.push(_0x2394af[_0x3e7788] = {
                      item: _0x2730dd,
                      flags: _0x16ce9b
                    });
                  }
                }
              },
              clear: function () {
                for (var _0x12a429 = this._children, _0x240dac = _0x12a429.length - 1; _0x240dac >= 0; _0x240dac--) {
                  _0x12a429[_0x240dac].remove();
                }
              },
              isEmpty: function () {
                return !this._children.length;
              },
              remove: function _0x201224() {
                return !!_0x201224.base.call(this) && (this._view && this._view.remove(), true);
              },
              getView: function () {
                return this._view;
              },
              getCurrentStyle: function () {
                return this._currentStyle;
              },
              setCurrentStyle: function (_0x2ca5ee) {
                this._currentStyle.set(_0x2ca5ee);
              },
              getIndex: function () {
                return this._index;
              },
              getOptions: function () {
                return this._scope.settings;
              },
              getLayers: function () {
                return this._children;
              },
              getActiveLayer: function () {
                return this._activeLayer || new _0xcb7ead({
                  project: this,
                  insert: true
                });
              },
              getSymbolDefinitions: function () {
                var _0x51575e = [];
                var _0x1d4603 = {};
                this.getItems({
                  class: _0x34220f,
                  match: function (_0x3346fc) {
                    var _0x4ed32b = _0x3346fc._definition;
                    _0x3346fc = _0x4ed32b._id;
                    if (!_0x1d4603[_0x3346fc]) {
                      _0x1d4603[_0x3346fc] = true;
                      _0x51575e.push(_0x4ed32b);
                    }
                    return false;
                  }
                });
                return _0x51575e;
              },
              getSymbols: "getSymbolDefinitions",
              getSelectedItems: function () {
                var _0x4da466;
                var _0x36364b = this._selectionItems;
                var _0x68ac42 = [];
                for (_0x4da466 in _0x36364b) {
                  var _0x105f4a = _0x36364b[_0x4da466];
                  var _0x57c0e5 = _0x105f4a._selection;
                  if (_0x57c0e5 & 1 && _0x105f4a.isInserted()) {
                    _0x68ac42.push(_0x105f4a);
                  } else if (!_0x57c0e5) {
                    this._updateSelection(_0x105f4a);
                  }
                }
                return _0x68ac42;
              },
              _updateSelection: function (_0x32a0e5) {
                var _0x78e119 = _0x32a0e5._id;
                var _0x18cddf = this._selectionItems;
                if (_0x32a0e5._selection) {
                  if (_0x18cddf[_0x78e119] !== _0x32a0e5) {
                    this._selectionCount++;
                    _0x18cddf[_0x78e119] = _0x32a0e5;
                  }
                } else if (_0x18cddf[_0x78e119] === _0x32a0e5) {
                  this._selectionCount--;
                  delete _0x18cddf[_0x78e119];
                }
              },
              selectAll: function () {
                for (var _0x2031e0 = this._children, _0x255fc4 = 0, _0x34eb54 = _0x2031e0.length; _0x255fc4 < _0x34eb54; _0x255fc4++) {
                  _0x2031e0[_0x255fc4].setFullySelected(true);
                }
              },
              deselectAll: function () {
                var _0x4281af;
                var _0x3d4e06 = this._selectionItems;
                for (_0x4281af in _0x3d4e06) {
                  _0x3d4e06[_0x4281af].setFullySelected(false);
                }
              },
              addLayer: function (_0x18e912) {
                return this.insertLayer(_0x2bd7be, _0x18e912);
              },
              insertLayer: function (_0x3bc6e9, _0x1b469a) {
                if (_0x1b469a instanceof _0xcb7ead) {
                  _0x1b469a._remove(false, true);
                  _0x28b48a.splice(this._children, [_0x1b469a], _0x3bc6e9, 0);
                  _0x1b469a._setProject(this, true);
                  if (_0x3bc6e9 = _0x1b469a._name) {
                    _0x1b469a.setName(_0x3bc6e9);
                  }
                  if (this._changes) {
                    _0x1b469a._changed(5);
                  }
                  if (!this._activeLayer) {
                    this._activeLayer = _0x1b469a;
                  }
                } else {
                  _0x1b469a = null;
                }
                return _0x1b469a;
              },
              _insertItem: function (_0x14643c, _0x33bffa, _0x3244ff) {
                _0x33bffa = this.insertLayer(_0x14643c, _0x33bffa) || (this._activeLayer || this._insertItem(_0x2bd7be, new _0xcb7ead(_0x1f30bb.NO_INSERT), true)).insertChild(_0x14643c, _0x33bffa);
                if (_0x3244ff && _0x33bffa.activate) {
                  _0x33bffa.activate();
                }
                return _0x33bffa;
              },
              getItems: function (_0x369df0) {
                return _0x1f30bb._getItems(this, _0x369df0);
              },
              getItem: function (_0x47e873) {
                return _0x1f30bb._getItems(this, _0x47e873, null, null, true)[0] || null;
              },
              importJSON: function (_0xfd0508) {
                this.activate();
                var _0x47a33b = this._activeLayer;
                return _0x28b48a.importJSON(_0xfd0508, _0x47a33b && _0x47a33b.isEmpty() && _0x47a33b);
              },
              removeOn: function (_0x298a3c) {
                var _0x197b58 = this._removeSets;
                if (_0x197b58) {
                  if (_0x298a3c === "mouseup") {
                    _0x197b58.mousedrag = null;
                  }
                  var _0x309b60 = _0x197b58[_0x298a3c];
                  if (_0x309b60) {
                    for (var _0x18b5aa in _0x309b60) {
                      var _0x15808f;
                      var _0x381e0e = _0x309b60[_0x18b5aa];
                      for (_0x15808f in _0x197b58) {
                        var _0x2ce50b = _0x197b58[_0x15808f];
                        if (_0x2ce50b && _0x2ce50b != _0x309b60) {
                          delete _0x2ce50b[_0x381e0e._id];
                        }
                      }
                      _0x381e0e.remove();
                    }
                    _0x197b58[_0x298a3c] = null;
                  }
                }
              },
              draw: function (_0xf27419, _0x2c6a95, _0x1a2d32) {
                this._updateVersion++;
                _0xf27419.save();
                _0x2c6a95.applyToContext(_0xf27419);
                for (var _0x1aa163 = this._children, _0x401c72 = new _0x28b48a({
                    offset: new _0xbc5c4a(0, 0),
                    pixelRatio: _0x1a2d32,
                    viewMatrix: _0x2c6a95.isIdentity() ? null : _0x2c6a95,
                    matrices: [new _0x1a5a7c()],
                    updateMatrix: true
                  }), _0x130658 = 0, _0xf0beb8 = _0x1aa163.length; _0x130658 < _0xf0beb8; _0x130658++) {
                  _0x1aa163[_0x130658].draw(_0xf27419, _0x401c72);
                }
                _0xf27419.restore();
                if (this._selectionCount > 0) {
                  _0xf27419.save();
                  _0xf27419.strokeWidth = 1;
                  var _0x58df0a;
                  var _0x362a2f = this._selectionItems;
                  var _0x5ecf9e = this._scope.settings.handleSize;
                  var _0x2c504a = this._updateVersion;
                  for (_0x58df0a in _0x362a2f) {
                    _0x362a2f[_0x58df0a]._drawSelection(_0xf27419, _0x2c6a95, _0x5ecf9e, _0x362a2f, _0x2c504a);
                  }
                  _0xf27419.restore();
                }
              }
            });
            var _0x1f30bb = _0x28b48a.extend(_0x139988, {
              statics: {
                extend: function _0x322f7d(_0xfc43b1) {
                  if (_0xfc43b1._serializeFields) {
                    _0xfc43b1._serializeFields = _0x28b48a.set({}, this.prototype._serializeFields, _0xfc43b1._serializeFields);
                  }
                  return _0x322f7d.base.apply(this, arguments);
                },
                NO_INSERT: {
                  insert: false
                }
              },
              _class: "Item",
              _name: null,
              _applyMatrix: true,
              _canApplyMatrix: true,
              _canScaleStroke: false,
              _pivot: null,
              _visible: true,
              _blendMode: "normal",
              _opacity: 1,
              _locked: false,
              _guide: false,
              _clipMask: false,
              _selection: 0,
              _selectBounds: true,
              _selectChildren: false,
              _serializeFields: {
                name: null,
                applyMatrix: null,
                matrix: new _0x1a5a7c(),
                pivot: null,
                visible: true,
                blendMode: "normal",
                opacity: 1,
                locked: false,
                guide: false,
                clipMask: false,
                selected: false,
                data: {}
              },
              _prioritize: ["applyMatrix"]
            }, new function () {
              var _0x987972 = ["onMouseDown", "onMouseUp", "onMouseDrag", "onClick", "onDoubleClick", "onMouseMove", "onMouseEnter", "onMouseLeave"];
              return _0x28b48a.each(_0x987972, function (_0x3f9c09) {
                this._events[_0x3f9c09] = {
                  install: function (_0x325444) {
                    this.getView()._countItemEvent(_0x325444, 1);
                  },
                  uninstall: function (_0x41c084) {
                    this.getView()._countItemEvent(_0x41c084, -1);
                  }
                };
              }, {
                _events: {
                  onFrame: {
                    install: function () {
                      this.getView()._animateItem(this, true);
                    },
                    uninstall: function () {
                      this.getView()._animateItem(this, false);
                    }
                  },
                  onLoad: {},
                  onError: {}
                },
                statics: {
                  _itemHandlers: _0x987972
                }
              });
            }(), {
              initialize: function () {},
              _initialize: function (_0x2833c4, _0x5371f7) {
                var _0x1437f = _0x2833c4 && _0x28b48a.isPlainObject(_0x2833c4);
                var _0x1179b9 = _0x1437f && _0x2833c4.internal === true;
                var _0x52a977 = this._matrix = new _0x1a5a7c();
                var _0x309f8d = _0x1437f && _0x2833c4.project || _0x36d317.project;
                var _0x72fd07 = _0x36d317.settings;
                this._id = _0x1179b9 ? null : _0x2231b4.get();
                this._parent = this._index = null;
                this._applyMatrix = this._canApplyMatrix && _0x72fd07.applyMatrix;
                if (_0x5371f7) {
                  _0x52a977.translate(_0x5371f7);
                }
                (_0x52a977._owner = this)._style = new _0x567b1a(_0x309f8d._currentStyle, this, _0x309f8d);
                if (_0x1179b9 || _0x1437f && _0x2833c4.insert == 0 || !_0x72fd07.insertItems && (!_0x1437f || _0x2833c4.insert !== true)) {
                  this._setProject(_0x309f8d);
                } else {
                  (_0x1437f && _0x2833c4.parent || _0x309f8d)._insertItem(_0x2bd7be, this, true);
                }
                if (_0x1437f && _0x2833c4 !== _0x1f30bb.NO_INSERT) {
                  this.set(_0x2833c4, {
                    internal: true,
                    insert: true,
                    project: true,
                    parent: true
                  });
                }
                return _0x1437f;
              },
              _serialize: function (_0x591542, _0x58927e) {
                var _0x3f5807 = {};
                var _0x48137c = this;
                function _0xa88ff6(_0x1dae9c) {
                  for (var _0x153ceb in _0x1dae9c) {
                    var _0x208cb8 = _0x48137c[_0x153ceb];
                    if (!_0x28b48a.equals(_0x208cb8, _0x153ceb === "leading" ? _0x1dae9c.fontSize * 1.2 : _0x1dae9c[_0x153ceb])) {
                      _0x3f5807[_0x153ceb] = _0x28b48a.serialize(_0x208cb8, _0x591542, _0x153ceb !== "data", _0x58927e);
                    }
                  }
                }
                _0xa88ff6(this._serializeFields);
                if (!(this instanceof _0x46c1f5)) {
                  _0xa88ff6(this._style._defaults);
                }
                return [this._class, _0x3f5807];
              },
              _changed: function (_0xc8f202) {
                var _0x4d9ba8 = this._symbol;
                var _0x24177a = this._parent || _0x4d9ba8;
                var _0x4d8fe5 = this._project;
                if (_0xc8f202 & 8) {
                  this._bounds = this._position = this._decomposed = _0x2bd7be;
                }
                if (_0xc8f202 & 16) {
                  this._globalMatrix = _0x2bd7be;
                }
                if (_0x24177a && _0xc8f202 & 72) {
                  _0x1f30bb._clearBoundsCache(_0x24177a);
                }
                if (_0xc8f202 & 2) {
                  _0x1f30bb._clearBoundsCache(this);
                }
                if (_0x4d8fe5) {
                  _0x4d8fe5._changed(_0xc8f202, this);
                }
                if (_0x4d9ba8) {
                  _0x4d9ba8._changed(_0xc8f202);
                }
              },
              getId: function () {
                return this._id;
              },
              getName: function () {
                return this._name;
              },
              setName: function (_0x438b71) {
                if (this._name) {
                  this._removeNamed();
                }
                if (_0x438b71 === +_0x438b71 + "") {
                  throw new Error(".......");
                }
                var _0x369acd;
                var _0x1bb444 = this._getOwner();
                if (_0x438b71 && _0x1bb444) {
                  _0x369acd = _0x1bb444._children;
                  ((_0x1bb444 = _0x1bb444._namedChildren)[_0x438b71] = _0x1bb444[_0x438b71] || []).push(this);
                  if (!(_0x438b71 in _0x369acd)) {
                    _0x369acd[_0x438b71] = this;
                  }
                }
                this._name = _0x438b71 || _0x2bd7be;
                this._changed(256);
              },
              getStyle: function () {
                return this._style;
              },
              setStyle: function (_0x5ef3d2) {
                this.getStyle().set(_0x5ef3d2);
              }
            }, _0x28b48a.each(["locked", "visible", "blendMode", "opacity", "guide"], function (_0x3804ff) {
              var _0x38b853 = _0x28b48a.capitalize(_0x3804ff);
              var _0xaf9b0e = "_" + _0x3804ff;
              var _0x16665f = {
                locked: 256,
                visible: 265
              };
              this["get" + _0x38b853] = function () {
                return this[_0xaf9b0e];
              };
              this["set" + _0x38b853] = function (_0x2d93cf) {
                if (_0x2d93cf != this[_0xaf9b0e]) {
                  this[_0xaf9b0e] = _0x2d93cf;
                  this._changed(_0x16665f[_0x3804ff] || 257);
                }
              };
            }, {}), {
              beans: true,
              getSelection: function () {
                return this._selection;
              },
              setSelection: function (_0x5b81cc) {
                if (_0x5b81cc !== this._selection) {
                  this._selection = _0x5b81cc;
                  if (_0x5b81cc = this._project) {
                    _0x5b81cc._updateSelection(this);
                    this._changed(257);
                  }
                }
              },
              _changeSelection: function (_0x2f57a6, _0x2bb86c) {
                var _0x6d17c4 = this._selection;
                this.setSelection(_0x2bb86c ? _0x6d17c4 | _0x2f57a6 : _0x6d17c4 & ~_0x2f57a6);
              },
              isSelected: function () {
                if (this._selectChildren) {
                  for (var _0x107bbc = this._children, _0x410255 = 0, _0x4009c6 = _0x107bbc.length; _0x410255 < _0x4009c6; _0x410255++) {
                    if (_0x107bbc[_0x410255].isSelected()) {
                      return true;
                    }
                  }
                }
                return !!(this._selection & 1);
              },
              setSelected: function (_0x361c46) {
                if (this._selectChildren) {
                  for (var _0x3b912b = this._children, _0x19ee73 = 0, _0x369fab = _0x3b912b.length; _0x19ee73 < _0x369fab; _0x19ee73++) {
                    _0x3b912b[_0x19ee73].setSelected(_0x361c46);
                  }
                }
                this._changeSelection(1, _0x361c46);
              },
              isFullySelected: function () {
                var _0x1044a5 = this._children;
                var _0x2fa455 = !!(this._selection & 1);
                if (_0x1044a5 && _0x2fa455) {
                  for (var _0x488af8 = 0, _0x268590 = _0x1044a5.length; _0x488af8 < _0x268590; _0x488af8++) {
                    if (!_0x1044a5[_0x488af8].isFullySelected()) {
                      return false;
                    }
                  }
                  return true;
                }
                return _0x2fa455;
              },
              setFullySelected: function (_0x169832) {
                var _0x1d14b4 = this._children;
                if (_0x1d14b4) {
                  for (var _0xe6fb45 = 0, _0x541f77 = _0x1d14b4.length; _0xe6fb45 < _0x541f77; _0xe6fb45++) {
                    _0x1d14b4[_0xe6fb45].setFullySelected(_0x169832);
                  }
                }
                this._changeSelection(1, _0x169832);
              },
              isClipMask: function () {
                return this._clipMask;
              },
              setClipMask: function (_0x4308d7) {
                if (this._clipMask != (_0x4308d7 = !!_0x4308d7)) {
                  if (this._clipMask = _0x4308d7) {
                    this.setFillColor(null);
                    this.setStrokeColor(null);
                  }
                  this._changed(257);
                  if (this._parent) {
                    this._parent._changed(2048);
                  }
                }
              },
              getData: function () {
                if (!this._data) {
                  this._data = {};
                }
                return this._data;
              },
              setData: function (_0xc8106) {
                this._data = _0xc8106;
              },
              getPosition: function (_0x196d3f) {
                return new (_0x196d3f ? _0xbc5c4a : _0x3d6d6d)((_0x196d3f = this._position || (this._position = this._getPositionFromBounds())).x, _0x196d3f.y, this, "setPosition");
              },
              setPosition: function () {
                this.translate(_0xbc5c4a.read(arguments).subtract(this.getPosition(true)));
              },
              _getPositionFromBounds: function (_0x5787ee) {
                if (this._pivot) {
                  return this._matrix._transformPoint(this._pivot);
                } else {
                  return (_0x5787ee || this.getBounds()).getCenter(true);
                }
              },
              getPivot: function () {
                var _0x55cb16 = this._pivot;
                if (_0x55cb16) {
                  return new _0x3d6d6d(_0x55cb16.x, _0x55cb16.y, this, "setPivot");
                } else {
                  return null;
                }
              },
              setPivot: function () {
                this._pivot = _0xbc5c4a.read(arguments, 0, {
                  clone: true,
                  readNull: true
                });
                this._position = _0x2bd7be;
              }
            }, _0x28b48a.each({
              getStrokeBounds: {
                stroke: true
              },
              getHandleBounds: {
                handle: true
              },
              getInternalBounds: {
                internal: true
              }
            }, function (_0x45e274, _0x91ab79) {
              this[_0x91ab79] = function (_0x13a1cf) {
                return this.getBounds(_0x13a1cf, _0x45e274);
              };
            }, {
              beans: true,
              getBounds: function (_0x39e56e, _0x3e542e) {
                var _0x4ae7cf = _0x3e542e || _0x39e56e instanceof _0x1a5a7c;
                var _0x40d2c4 = _0x28b48a.set({}, _0x4ae7cf ? _0x3e542e : _0x39e56e, this._boundsOptions);
                if (!(_0x40d2c4.stroke && !this.getStrokeScaling())) {
                  _0x40d2c4.cacheItem = this;
                }
                _0x40d2c4 = this._getCachedBounds(_0x4ae7cf && _0x39e56e, _0x40d2c4).rect;
                if (arguments.length) {
                  return _0x40d2c4;
                } else {
                  return new _0x3d7bf7(_0x40d2c4.x, _0x40d2c4.y, _0x40d2c4.width, _0x40d2c4.height, this, "setBounds");
                }
              },
              setBounds: function () {
                var _0x121fae = _0x5384ce.read(arguments);
                var _0x374dd5 = this.getBounds();
                var _0x2afdb0 = this._matrix;
                var _0x21c777 = new _0x1a5a7c();
                var _0x51566d = _0x121fae.getCenter();
                _0x21c777.translate(_0x51566d);
                if (!(_0x121fae.width == _0x374dd5.width && _0x121fae.height == _0x374dd5.height)) {
                  if (!_0x2afdb0.isInvertible()) {
                    _0x2afdb0.set(_0x2afdb0._backup || new _0x1a5a7c().translate(_0x2afdb0.getTranslation()));
                    _0x374dd5 = this.getBounds();
                  }
                  _0x21c777.scale(_0x374dd5.width !== 0 ? _0x121fae.width / _0x374dd5.width : 0, _0x374dd5.height !== 0 ? _0x121fae.height / _0x374dd5.height : 0);
                }
                _0x51566d = _0x374dd5.getCenter();
                _0x21c777.translate(-_0x51566d.x, -_0x51566d.y);
                this.transform(_0x21c777);
              },
              _getBounds: function (_0x4048c8, _0x33b284) {
                var _0x2a96f9 = this._children;
                if (_0x2a96f9 && _0x2a96f9.length) {
                  _0x1f30bb._updateBoundsCache(this, _0x33b284.cacheItem);
                  return _0x1f30bb._getBounds(_0x2a96f9, _0x4048c8, _0x33b284);
                } else {
                  return new _0x5384ce();
                }
              },
              _getBoundsCacheKey: function (_0x44b918, _0x27758d) {
                return [_0x44b918.stroke ? 1 : 0, _0x44b918.handle ? 1 : 0, _0x27758d ? 1 : 0].join("");
              },
              _getCachedBounds: function (_0x36da32, _0x4ff414, _0x39ab41) {
                _0x36da32 = _0x36da32 && _0x36da32._orNullIfIdentity();
                var _0xed9b8d = _0x4ff414.internal && !_0x39ab41;
                var _0x1b2dbe = _0x4ff414.cacheItem;
                var _0x8c8c54 = _0xed9b8d ? null : this._matrix._orNullIfIdentity();
                var _0x281e2c = _0x1b2dbe && (!_0x36da32 || _0x36da32.equals(_0x8c8c54)) && this._getBoundsCacheKey(_0x4ff414, _0xed9b8d);
                _0x39ab41 = this._bounds;
                _0x1f30bb._updateBoundsCache(this._parent || this._symbol, _0x1b2dbe);
                if (_0x281e2c && _0x39ab41 && _0x281e2c in _0x39ab41) {
                  return {
                    rect: (_0x358e43 = _0x39ab41[_0x281e2c]).rect.clone(),
                    nonscaling: _0x358e43.nonscaling
                  };
                }
                var _0x358e43;
                _0x8c8c54 = (_0x36da32 = this._getBounds(_0x36da32 || _0x8c8c54, _0x4ff414)).rect || _0x36da32;
                _0x4ff414 = this._style;
                _0x4ff414 = _0x36da32.nonscaling || _0x4ff414.hasStroke() && !_0x4ff414.getStrokeScaling();
                if (_0x281e2c) {
                  if (!_0x39ab41) {
                    this._bounds = _0x39ab41 = {};
                  }
                  _0x358e43 = _0x39ab41[_0x281e2c] = {
                    rect: _0x8c8c54.clone(),
                    nonscaling: _0x4ff414,
                    internal: _0xed9b8d
                  };
                }
                return {
                  rect: _0x8c8c54,
                  nonscaling: _0x4ff414
                };
              },
              _getStrokeMatrix: function (_0x34fa98, _0x2e4f91) {
                return (_0x34fa98 = (_0x2e4f91 = this.getStrokeScaling() ? null : _0x2e4f91 && _0x2e4f91.internal ? this : this._parent || this._symbol && this._symbol._item) ? _0x2e4f91.getViewMatrix().invert() : _0x34fa98) && _0x34fa98._shiftless();
              },
              statics: {
                _updateBoundsCache: function (_0x46f18a, _0x14c201) {
                  var _0x4aef04;
                  if (_0x46f18a && _0x14c201) {
                    _0x4aef04 = _0x14c201._id;
                    if (!(_0x46f18a = _0x46f18a._boundsCache = _0x46f18a._boundsCache || {
                      ids: {},
                      list: []
                    }).ids[_0x4aef04]) {
                      _0x46f18a.list.push(_0x14c201);
                      _0x46f18a.ids[_0x4aef04] = _0x14c201;
                    }
                  }
                },
                _clearBoundsCache: function (_0x58a549) {
                  var _0x49bb61 = _0x58a549._boundsCache;
                  if (_0x49bb61) {
                    _0x58a549._bounds = _0x58a549._position = _0x58a549._boundsCache = _0x2bd7be;
                    for (var _0x58e32e = 0, _0x3b1e0c = _0x49bb61.list, _0x4b5aa2 = _0x3b1e0c.length; _0x58e32e < _0x4b5aa2; _0x58e32e++) {
                      var _0x6ac7ec = _0x3b1e0c[_0x58e32e];
                      if (_0x6ac7ec !== _0x58a549) {
                        _0x6ac7ec._bounds = _0x6ac7ec._position = _0x2bd7be;
                        if (_0x6ac7ec._boundsCache) {
                          _0x1f30bb._clearBoundsCache(_0x6ac7ec);
                        }
                      }
                    }
                  }
                },
                _getBounds: function (_0x3696bb, _0x5ef62b, _0x1d5c9c) {
                  var _0x3c823f = _0x1a60f8 = Infinity;
                  var _0x384a74 = _0x48ea76 = -_0x1a60f8;
                  var _0x277a54 = false;
                  _0x1d5c9c = _0x1d5c9c || {};
                  for (var _0x5c2ff0 = 0, _0x1728c3 = _0x3696bb.length; _0x5c2ff0 < _0x1728c3; _0x5c2ff0++) {
                    var _0x2b47af;
                    var _0x1a60f8;
                    var _0x48ea76;
                    var _0x5dae52 = _0x3696bb[_0x5c2ff0];
                    if (_0x5dae52._visible && !_0x5dae52.isEmpty(true)) {
                      _0x5dae52 = (_0x2b47af = _0x5dae52._getCachedBounds(_0x5ef62b && _0x5ef62b.appended(_0x5dae52._matrix), _0x1d5c9c, true)).rect;
                      _0x1a60f8 = Math.min(_0x5dae52.x, _0x1a60f8);
                      _0x3c823f = Math.min(_0x5dae52.y, _0x3c823f);
                      _0x48ea76 = Math.max(_0x5dae52.x + _0x5dae52.width, _0x48ea76);
                      _0x384a74 = Math.max(_0x5dae52.y + _0x5dae52.height, _0x384a74);
                      if (_0x2b47af.nonscaling) {
                        _0x277a54 = true;
                      }
                    }
                  }
                  return {
                    rect: isFinite(_0x1a60f8) ? new _0x5384ce(_0x1a60f8, _0x3c823f, _0x48ea76 - _0x1a60f8, _0x384a74 - _0x3c823f) : new _0x5384ce(),
                    nonscaling: _0x277a54
                  };
                }
              }
            }), {
              beans: true,
              _decompose: function () {
                if (this._applyMatrix) {
                  return null;
                } else {
                  return this._decomposed || (this._decomposed = this._matrix.decompose());
                }
              },
              getRotation: function () {
                var _0x22da4e = this._decompose();
                if (_0x22da4e) {
                  return _0x22da4e.rotation;
                } else {
                  return 0;
                }
              },
              setRotation: function (_0x287049) {
                var _0x4f4eb9;
                var _0x490a74 = this.getRotation();
                if (_0x490a74 != null && _0x287049 != null) {
                  _0x4f4eb9 = this._decomposed;
                  this.rotate(_0x287049 - _0x490a74);
                  if (_0x4f4eb9) {
                    _0x4f4eb9.rotation = _0x287049;
                    this._decomposed = _0x4f4eb9;
                  }
                }
              },
              getScaling: function () {
                var _0x477423 = (_0x477423 = this._decompose()) && _0x477423.scaling;
                return new _0x3d6d6d(_0x477423 ? _0x477423.x : 1, _0x477423 ? _0x477423.y : 1, this, "setScaling");
              },
              setScaling: function () {
                var _0x1d44c8;
                var _0x12c3a7;
                var _0x5dfd0f;
                var _0x229ee4;
                var _0x57dcb2 = this.getScaling();
                var _0x15c56f = _0xbc5c4a.read(arguments, 0, {
                  clone: true,
                  readNull: true
                });
                if (_0x57dcb2 && _0x15c56f && !_0x57dcb2.equals(_0x15c56f)) {
                  _0x1d44c8 = this.getRotation();
                  _0x12c3a7 = this._decomposed;
                  _0x5dfd0f = new _0x1a5a7c();
                  if ((_0x229ee4 = _0x3c029b.isZero)(_0x57dcb2.x) || _0x229ee4(_0x57dcb2.y)) {
                    _0x5dfd0f.translate(_0x12c3a7.translation);
                    if (_0x1d44c8) {
                      _0x5dfd0f.rotate(_0x1d44c8);
                    }
                    _0x5dfd0f.scale(_0x15c56f.x, _0x15c56f.y);
                    this._matrix.set(_0x5dfd0f);
                  } else {
                    _0x229ee4 = this.getPosition(true);
                    _0x5dfd0f.translate(_0x229ee4);
                    if (_0x1d44c8) {
                      _0x5dfd0f.rotate(_0x1d44c8);
                    }
                    _0x5dfd0f.scale(_0x15c56f.x / _0x57dcb2.x, _0x15c56f.y / _0x57dcb2.y);
                    if (_0x1d44c8) {
                      _0x5dfd0f.rotate(-_0x1d44c8);
                    }
                    _0x5dfd0f.translate(_0x229ee4.negate());
                    this.transform(_0x5dfd0f);
                  }
                  if (_0x12c3a7) {
                    _0x12c3a7.scaling = _0x15c56f;
                    this._decomposed = _0x12c3a7;
                  }
                }
              },
              getMatrix: function () {
                return this._matrix;
              },
              setMatrix: function () {
                var _0x116271 = this._matrix;
                _0x116271.set.apply(_0x116271, arguments);
              },
              getGlobalMatrix: function (_0x5b6cdb) {
                if (_0x514deb = this._globalMatrix) {
                  for (var _0x5e485c = this._parent, _0x5ce696 = []; _0x5e485c;) {
                    if (!_0x5e485c._globalMatrix) {
                      for (var _0x514deb = null, _0x5ab312 = 0, _0x5c353b = _0x5ce696.length; _0x5ab312 < _0x5c353b; _0x5ab312++) {
                        _0x5ce696[_0x5ab312]._globalMatrix = null;
                      }
                      break;
                    }
                    _0x5ce696.push(_0x5e485c);
                    _0x5e485c = _0x5e485c._parent;
                  }
                }
                if (!_0x514deb) {
                  _0x514deb = this._globalMatrix = this._matrix.clone();
                  if (_0x5e485c = this._parent) {
                    _0x514deb.prepend(_0x5e485c.getGlobalMatrix(true));
                  }
                }
                if (_0x5b6cdb) {
                  return _0x514deb;
                } else {
                  return _0x514deb.clone();
                }
              },
              getViewMatrix: function () {
                return this.getGlobalMatrix().prepend(this.getView()._matrix);
              },
              getApplyMatrix: function () {
                return this._applyMatrix;
              },
              setApplyMatrix: function (_0x4e5f98) {
                if (this._applyMatrix = this._canApplyMatrix && !!_0x4e5f98) {
                  this.transform(null, true);
                }
              },
              getTransformContent: "#getApplyMatrix",
              setTransformContent: "#setApplyMatrix"
            }, {
              getProject: function () {
                return this._project;
              },
              _setProject: function (_0x4b0d40, _0x27c2f1) {
                if (this._project !== _0x4b0d40) {
                  if (this._project) {
                    this._installEvents(false);
                  }
                  this._project = _0x4b0d40;
                  for (var _0x1656a3 = this._children, _0x5ae874 = 0, _0x40b34d = _0x1656a3 && _0x1656a3.length; _0x5ae874 < _0x40b34d; _0x5ae874++) {
                    _0x1656a3[_0x5ae874]._setProject(_0x4b0d40);
                  }
                  _0x27c2f1 = true;
                }
                if (_0x27c2f1) {
                  this._installEvents(true);
                }
              },
              getView: function () {
                return this._project._view;
              },
              _installEvents: function _0x17ea81(_0x3b55b2) {
                _0x17ea81.base.call(this, _0x3b55b2);
                for (var _0x4e2e6f = this._children, _0x3c893d = 0, _0x28e4fb = _0x4e2e6f && _0x4e2e6f.length; _0x3c893d < _0x28e4fb; _0x3c893d++) {
                  _0x4e2e6f[_0x3c893d]._installEvents(_0x3b55b2);
                }
              },
              getLayer: function () {
                for (var _0xb50843 = this; _0xb50843 = _0xb50843._parent;) {
                  if (_0xb50843 instanceof _0xcb7ead) {
                    return _0xb50843;
                  }
                }
                return null;
              },
              getParent: function () {
                return this._parent;
              },
              setParent: function (_0x38c3eb) {
                return _0x38c3eb.addChild(this);
              },
              _getOwner: "#getParent",
              getChildren: function () {
                return this._children;
              },
              setChildren: function (_0x1905d4) {
                this.removeChildren();
                this.addChildren(_0x1905d4);
              },
              getFirstChild: function () {
                return this._children && this._children[0] || null;
              },
              getLastChild: function () {
                return this._children && this._children[this._children.length - 1] || null;
              },
              getNextSibling: function () {
                var _0x5de3a2 = this._getOwner();
                return _0x5de3a2 && _0x5de3a2._children[this._index + 1] || null;
              },
              getPreviousSibling: function () {
                var _0x5cf9b1 = this._getOwner();
                return _0x5cf9b1 && _0x5cf9b1._children[this._index - 1] || null;
              },
              getIndex: function () {
                return this._index;
              },
              equals: function (_0x2ff732) {
                return _0x2ff732 === this || _0x2ff732 && this._class === _0x2ff732._class && this._style.equals(_0x2ff732._style) && this._matrix.equals(_0x2ff732._matrix) && this._locked === _0x2ff732._locked && this._visible === _0x2ff732._visible && this._blendMode === _0x2ff732._blendMode && this._opacity === _0x2ff732._opacity && this._clipMask === _0x2ff732._clipMask && this._guide === _0x2ff732._guide && this._equals(_0x2ff732) || false;
              },
              _equals: function (_0x203674) {
                return _0x28b48a.equals(this._children, _0x203674._children);
              },
              clone: function (_0x402091) {
                var _0x53c195 = new this.constructor(_0x1f30bb.NO_INSERT);
                var _0x230c37 = this._children;
                var _0x435083 = _0x28b48a.pick(_0x402091 ? _0x402091.insert : _0x2bd7be, _0x402091 === _0x2bd7be || _0x402091 === true);
                _0x402091 = _0x28b48a.pick(_0x402091 ? _0x402091.deep : _0x2bd7be, true);
                if (_0x230c37) {
                  _0x53c195.copyAttributes(this);
                }
                if (!(_0x230c37 && !_0x402091)) {
                  _0x53c195.copyContent(this);
                }
                if (!_0x230c37) {
                  _0x53c195.copyAttributes(this);
                }
                if (_0x435083) {
                  _0x53c195.insertAbove(this);
                }
                var _0x8ca7ef = this._name;
                _0x435083 = this._parent;
                if (_0x8ca7ef && _0x435083) {
                  _0x230c37 = _0x435083._children;
                  for (var _0x53c7ad = _0x8ca7ef, _0x3d4f19 = 1; _0x230c37[_0x8ca7ef];) {
                    _0x8ca7ef = _0x53c7ad + " " + _0x3d4f19++;
                  }
                  if (_0x8ca7ef !== _0x53c7ad) {
                    _0x53c195.setName(_0x8ca7ef);
                  }
                }
                return _0x53c195;
              },
              copyContent: function (_0x202a0a) {
                for (var _0x49493d = _0x202a0a._children, _0x734e78 = 0, _0x3d6f7a = _0x49493d && _0x49493d.length; _0x734e78 < _0x3d6f7a; _0x734e78++) {
                  this.addChild(_0x49493d[_0x734e78].clone(false), true);
                }
              },
              copyAttributes: function (_0x4eb958, _0x54486a) {
                this.setStyle(_0x4eb958._style);
                for (var _0x1405ce = ["_locked", "_visible", "_blendMode", "_opacity", "_clipMask", "_guide"], _0x4dcb7d = 0, _0x26cc3c = _0x1405ce.length; _0x4dcb7d < _0x26cc3c; _0x4dcb7d++) {
                  var _0x432da8 = _0x1405ce[_0x4dcb7d];
                  if (_0x4eb958.hasOwnProperty(_0x432da8)) {
                    this[_0x432da8] = _0x4eb958[_0x432da8];
                  }
                }
                if (!_0x54486a) {
                  this._matrix.set(_0x4eb958._matrix, true);
                }
                this.setApplyMatrix(_0x4eb958._applyMatrix);
                this.setPivot(_0x4eb958._pivot);
                this.setSelection(_0x4eb958._selection);
                var _0x51ddb7 = _0x4eb958._data;
                _0x54486a = _0x4eb958._name;
                this._data = _0x51ddb7 ? _0x28b48a.clone(_0x51ddb7) : null;
                if (_0x54486a) {
                  this.setName(_0x54486a);
                }
              },
              rasterize: function (_0x50dcaf, _0x12d0c4) {
                var _0x273b2a;
                var _0x577768;
                if (_0x28b48a.isPlainObject(_0x50dcaf)) {
                  _0x2ed9cd = _0x50dcaf.resolution;
                  _0x273b2a = _0x50dcaf.insert;
                  _0x577768 = _0x50dcaf.raster;
                } else {
                  _0x2ed9cd = _0x50dcaf;
                  _0x273b2a = _0x12d0c4;
                }
                if (_0x577768) {
                  _0x577768.matrix.reset(true);
                } else {
                  _0x577768 = new _0x10b4fc(_0x1f30bb.NO_INSERT);
                }
                var _0x3abbb7 = this.getStrokeBounds();
                var _0x116186 = (_0x2ed9cd || this.getView().getResolution()) / 72;
                _0x50dcaf = _0x3abbb7.getTopLeft().floor();
                _0x12d0c4 = _0x3abbb7.getBottomRight().ceil();
                var _0x2ed9cd = new _0x236987(_0x12d0c4.subtract(_0x50dcaf));
                _0x3abbb7 = _0x2ed9cd.multiply(_0x116186);
                _0x577768.setSize(_0x3abbb7, true);
                if (!_0x3abbb7.isZero()) {
                  _0x12d0c4 = _0x577768.getContext(true);
                  _0x3abbb7 = new _0x1a5a7c().scale(_0x116186).translate(_0x50dcaf.negate());
                  _0x12d0c4.save();
                  _0x3abbb7.applyToContext(_0x12d0c4);
                  this.draw(_0x12d0c4, new _0x28b48a({
                    matrices: [_0x3abbb7]
                  }));
                  _0x12d0c4.restore();
                }
                _0x577768.transform(new _0x1a5a7c().translate(_0x50dcaf.add(_0x2ed9cd.divide(2))).scale(1 / _0x116186));
                if (!(_0x273b2a !== _0x2bd7be && !_0x273b2a)) {
                  _0x577768.insertAbove(this);
                }
                return _0x577768;
              },
              contains: function () {
                var _0x5eeccd = this._matrix;
                return _0x5eeccd.isInvertible() && !!this._contains(_0x5eeccd._inverseTransform(_0xbc5c4a.read(arguments)));
              },
              _contains: function (_0xdc88c0) {
                var _0x4e83b6 = this._children;
                if (_0x4e83b6) {
                  for (var _0xb627b4 = _0x4e83b6.length - 1; _0xb627b4 >= 0; _0xb627b4--) {
                    if (_0x4e83b6[_0xb627b4].contains(_0xdc88c0)) {
                      return true;
                    }
                  }
                  return false;
                }
                return _0xdc88c0.isInside(this.getInternalBounds());
              },
              isInside: function () {
                return _0x5384ce.read(arguments).contains(this.getBounds());
              },
              _asPathItem: function () {
                return new _0x5615aa.Rectangle({
                  rectangle: this.getInternalBounds(),
                  matrix: this._matrix,
                  insert: false
                });
              },
              intersects: function (_0x4daf0b, _0x391058) {
                return _0x4daf0b instanceof _0x1f30bb && this._asPathItem().getIntersections(_0x4daf0b._asPathItem(), null, _0x391058, true).length > 0;
              }
            }, new function () {
              function _0x4c46e8() {
                var _0x52406b = arguments;
                return this._hitTest(_0xbc5c4a.read(_0x52406b), _0xc7a363.getOptions(_0x52406b));
              }
              function _0x41bcec() {
                var _0x51e83b = arguments;
                var _0x1f1ae4 = _0xbc5c4a.read(_0x51e83b);
                var _0x4c42ba = _0xc7a363.getOptions(_0x51e83b);
                _0x51e83b = [];
                this._hitTest(_0x1f1ae4, new _0x28b48a({
                  all: _0x51e83b
                }, _0x4c42ba));
                return _0x51e83b;
              }
              function _0x3af0ef(_0x325f24, _0x3ea027, _0x3bf8d5, _0x52ad74) {
                var _0xf413af = this._children;
                if (_0xf413af) {
                  for (var _0x46a922 = _0xf413af.length - 1; _0x46a922 >= 0; _0x46a922--) {
                    var _0x4a358b;
                    if ((_0x4a358b = (_0x4a358b = _0xf413af[_0x46a922]) !== _0x52ad74 && _0x4a358b._hitTest(_0x325f24, _0x3ea027, _0x3bf8d5)) && !_0x3ea027.all) {
                      return _0x4a358b;
                    }
                  }
                }
                return null;
              }
              _0x25cf80.inject({
                hitTest: _0x4c46e8,
                hitTestAll: _0x41bcec,
                _hitTest: _0x3af0ef
              });
              return {
                hitTest: _0x4c46e8,
                hitTestAll: _0x41bcec,
                _hitTestChildren: _0x3af0ef
              };
            }(), {
              _hitTest: function (_0x23abb4, _0x25bbe4, _0x5abf22) {
                if (this._locked || !this._visible || this._guide && !_0x25bbe4.guides || this.isEmpty()) {
                  return null;
                }
                var _0x3ca4f5 = this._matrix;
                var _0x584f0e = _0x5abf22 ? _0x5abf22.appended(_0x3ca4f5) : this.getGlobalMatrix().prepend(this.getView()._matrix);
                var _0x3176a0 = Math.max(_0x25bbe4.tolerance, 1e-12);
                var _0x2dc1fd = _0x25bbe4._tolerancePadding = new _0x236987(_0x5615aa._getStrokePadding(_0x3176a0, _0x3ca4f5._shiftless().invert()));
                if (!(_0x23abb4 = _0x3ca4f5._inverseTransform(_0x23abb4)) || !this._children && !this.getBounds({
                  internal: true,
                  stroke: true,
                  handle: true
                }).expand(_0x2dc1fd.multiply(2))._containsPoint(_0x23abb4)) {
                  return null;
                }
                var _0x41c0ae;
                var _0x2193b7;
                var _0x48ff7e = !(_0x25bbe4.guides && !this._guide || _0x25bbe4.selected && !this.isSelected() || _0x25bbe4.type && _0x25bbe4.type !== _0x28b48a.hyphenate(this._class) || _0x25bbe4.class && !(this instanceof _0x25bbe4.class));
                var _0x1d7b2c = _0x25bbe4.match;
                var _0x424ed4 = this;
                function _0x311f9b(_0x2110ce) {
                  if ((_0x2110ce = _0x2110ce && _0x1d7b2c && !_0x1d7b2c(_0x2110ce) ? null : _0x2110ce) && _0x25bbe4.all) {
                    _0x25bbe4.all.push(_0x2110ce);
                  }
                  return _0x2110ce;
                }
                function _0x3d67c2(_0x56942b, _0x256be8) {
                  var _0x2ca603 = _0x256be8 ? _0x41c0ae["get" + _0x256be8]() : _0x424ed4.getPosition();
                  if (_0x23abb4.subtract(_0x2ca603).divide(_0x2dc1fd).length <= 1) {
                    return new _0xc7a363(_0x56942b, _0x424ed4, {
                      name: _0x256be8 ? _0x28b48a.hyphenate(_0x256be8) : _0x56942b,
                      point: _0x2ca603
                    });
                  }
                }
                var _0x2b58dd = _0x25bbe4.position;
                _0x5abf22 = _0x25bbe4.center;
                _0x3176a0 = _0x25bbe4.bounds;
                if (_0x48ff7e && this._parent && (_0x2b58dd || _0x5abf22 || _0x3176a0)) {
                  if (_0x5abf22 || _0x3176a0) {
                    _0x41c0ae = this.getInternalBounds();
                  }
                  if (!(_0x2193b7 = _0x2b58dd && _0x3d67c2("position") || _0x5abf22 && _0x3d67c2("center", "Center")) && _0x3176a0) {
                    for (var _0x123a79 = ["TopLeft", "TopRight", "BottomLeft", "BottomRight", "LeftCenter", "TopCenter", "RightCenter", "BottomCenter"], _0xaf952c = 0; _0xaf952c < 8 && !_0x2193b7; _0xaf952c++) {
                      _0x2193b7 = _0x3d67c2("bounds", _0x123a79[_0xaf952c]);
                    }
                  }
                  _0x2193b7 = _0x311f9b(_0x2193b7);
                }
                if ((_0x2193b7 = _0x2193b7 || this._hitTestChildren(_0x23abb4, _0x25bbe4, _0x584f0e) || _0x48ff7e && _0x311f9b(this._hitTestSelf(_0x23abb4, _0x25bbe4, _0x584f0e, this.getStrokeScaling() ? null : _0x584f0e._shiftless().invert())) || null) && _0x2193b7.point) {
                  _0x2193b7.point = _0x3ca4f5.transform(_0x2193b7.point);
                }
                return _0x2193b7;
              },
              _hitTestSelf: function (_0x437ca2, _0x43c60f) {
                if (_0x43c60f.fill && this.hasFill() && this._contains(_0x437ca2)) {
                  return new _0xc7a363("fill", this);
                }
              },
              matches: function (_0x19722b, _0x347d4d) {
                var _0x293aa3 = typeof _0x19722b;
                if (_0x293aa3 == "object") {
                  for (var _0x1b48c9 in _0x19722b) {
                    if (_0x19722b.hasOwnProperty(_0x1b48c9) && !this.matches(_0x1b48c9, _0x19722b[_0x1b48c9])) {
                      return false;
                    }
                  }
                  return true;
                }
                if (_0x293aa3 == "function") {
                  return _0x19722b(this);
                }
                if (_0x19722b === "match") {
                  return _0x347d4d(this);
                }
                _0x293aa3 = /^(empty|editable)$/.test(_0x19722b) ? this["is" + _0x28b48a.capitalize(_0x19722b)]() : _0x19722b === "type" ? _0x28b48a.hyphenate(this._class) : this[_0x19722b];
                if (_0x19722b === "class") {
                  if (typeof _0x347d4d == "function") {
                    return this instanceof _0x347d4d;
                  }
                  _0x293aa3 = this._class;
                }
                if (typeof _0x347d4d == "function") {
                  return !!_0x347d4d(_0x293aa3);
                }
                if (_0x347d4d) {
                  if (_0x347d4d.test) {
                    return _0x347d4d.test(_0x293aa3);
                  }
                  if (_0x28b48a.isPlainObject(_0x347d4d)) {
                    return function _0x559bda(_0x3002eb, _0x50b358) {
                      for (var _0x3a28f3 in _0x3002eb) {
                        if (_0x3002eb.hasOwnProperty(_0x3a28f3)) {
                          var _0xee68e6 = _0x3002eb[_0x3a28f3];
                          _0x3a28f3 = _0x50b358[_0x3a28f3];
                          if (_0x28b48a.isPlainObject(_0xee68e6) && _0x28b48a.isPlainObject(_0x3a28f3)) {
                            if (!_0x559bda(_0xee68e6, _0x3a28f3)) {
                              return false;
                            }
                          } else if (!_0x28b48a.equals(_0xee68e6, _0x3a28f3)) {
                            return false;
                          }
                        }
                      }
                      return true;
                    }(_0x347d4d, _0x293aa3);
                  }
                }
                return _0x28b48a.equals(_0x293aa3, _0x347d4d);
              },
              getItems: function (_0x4b58db) {
                return _0x1f30bb._getItems(this, _0x4b58db, this._matrix);
              },
              getItem: function (_0x5738a5) {
                return _0x1f30bb._getItems(this, _0x5738a5, this._matrix, null, true)[0] || null;
              },
              statics: {
                _getItems: function _0x56da30(_0x4a12e2, _0xb28eea, _0x233d4d, _0x5f4402, _0x3fac04) {
                  var _0x198cb2;
                  var _0xfff229;
                  var _0x43ae07;
                  if (!_0x5f4402) {
                    _0xfff229 = (_0x198cb2 = typeof _0xb28eea == "object" && _0xb28eea) && _0x198cb2.overlapping;
                    _0x43ae07 = _0x198cb2 && _0x198cb2.inside;
                    _0x5dcd7a = (_0x3d9f4b = _0xfff229 || _0x43ae07) && _0x5384ce.read([_0x3d9f4b]);
                    _0x5f4402 = {
                      items: [],
                      recursive: _0x198cb2 && _0x198cb2.recursive !== false,
                      inside: !!_0x43ae07,
                      overlapping: !!_0xfff229,
                      rect: _0x5dcd7a,
                      path: _0xfff229 && new _0x5615aa.Rectangle({
                        rectangle: _0x5dcd7a,
                        insert: false
                      })
                    };
                    if (_0x198cb2) {
                      _0xb28eea = _0x28b48a.filter({}, _0xb28eea, {
                        recursive: true,
                        inside: true,
                        overlapping: true
                      });
                    }
                  }
                  var _0x5dcd7a;
                  var _0x56cc7c = _0x4a12e2._children;
                  var _0x20d9cc = _0x5f4402.items;
                  _0x233d4d = (_0x5dcd7a = _0x5f4402.rect) && (_0x233d4d || new _0x1a5a7c());
                  for (var _0x4337d0 = 0, _0x3412dd = _0x56cc7c && _0x56cc7c.length; _0x4337d0 < _0x3412dd; _0x4337d0++) {
                    var _0x342b93 = _0x56cc7c[_0x4337d0];
                    var _0x129a73 = _0x233d4d && _0x233d4d.appended(_0x342b93._matrix);
                    var _0x3b9f64 = true;
                    if (_0x5dcd7a) {
                      var _0x3d9f4b = _0x342b93.getBounds(_0x129a73);
                      if (!_0x5dcd7a.intersects(_0x3d9f4b)) {
                        continue;
                      }
                      if (!(_0x5dcd7a.contains(_0x3d9f4b) || _0x5f4402.overlapping && (_0x3d9f4b.contains(_0x5dcd7a) || _0x5f4402.path.intersects(_0x342b93, _0x129a73)))) {
                        _0x3b9f64 = false;
                      }
                    }
                    if (_0x3b9f64 && _0x342b93.matches(_0xb28eea) && (_0x20d9cc.push(_0x342b93), _0x3fac04)) {
                      break;
                    }
                    if (_0x5f4402.recursive !== false) {
                      _0x56da30(_0x342b93, _0xb28eea, _0x129a73, _0x5f4402, _0x3fac04);
                    }
                    if (_0x3fac04 && _0x20d9cc.length > 0) {
                      break;
                    }
                  }
                  return _0x20d9cc;
                }
              }
            }, {
              importJSON: function (_0x47b18a) {
                if ((_0x47b18a = _0x28b48a.importJSON(_0x47b18a, this)) !== this) {
                  return this.addChild(_0x47b18a);
                } else {
                  return _0x47b18a;
                }
              },
              addChild: function (_0x12400e) {
                return this.insertChild(_0x2bd7be, _0x12400e);
              },
              insertChild: function (_0x23e8ee, _0x25b2f1) {
                return (_0x25b2f1 = _0x25b2f1 ? this.insertChildren(_0x23e8ee, [_0x25b2f1]) : null) && _0x25b2f1[0];
              },
              addChildren: function (_0x3b7a7c) {
                return this.insertChildren(this._children.length, _0x3b7a7c);
              },
              insertChildren: function (_0x44f7dd, _0x18ffde) {
                var _0x58abf4 = this._children;
                if (_0x58abf4 && _0x18ffde && _0x18ffde.length > 0) {
                  for (var _0x2cddac = {}, _0x1ee332 = (_0x18ffde = _0x28b48a.slice(_0x18ffde)).length - 1; _0x1ee332 >= 0; _0x1ee332--) {
                    var _0x3729ea = (_0x2b3cef = _0x18ffde[_0x1ee332]) && _0x2b3cef._id;
                    if (!_0x2b3cef || _0x2cddac[_0x3729ea]) {
                      _0x18ffde.splice(_0x1ee332, 1);
                    } else {
                      _0x2b3cef._remove(false, true);
                      _0x2cddac[_0x3729ea] = true;
                    }
                  }
                  _0x28b48a.splice(_0x58abf4, _0x18ffde, _0x44f7dd, 0);
                  for (var _0x4c480b = this._project, _0x1213ec = _0x4c480b._changes, _0x51046e = (_0x1ee332 = 0, _0x18ffde.length); _0x1ee332 < _0x51046e; _0x1ee332++) {
                    var _0x2b3cef;
                    var _0x2c1d9e = (_0x2b3cef = _0x18ffde[_0x1ee332])._name;
                    _0x2b3cef._parent = this;
                    _0x2b3cef._setProject(_0x4c480b, true);
                    if (_0x2c1d9e) {
                      _0x2b3cef.setName(_0x2c1d9e);
                    }
                    if (_0x1213ec) {
                      _0x2b3cef._changed(5);
                    }
                  }
                  this._changed(11);
                } else {
                  _0x18ffde = null;
                }
                return _0x18ffde;
              },
              _insertItem: "#insertChild",
              _insertAt: function (_0x72fbef, _0x9dfe51) {
                var _0x33e58c = _0x72fbef && _0x72fbef._getOwner();
                var _0x3b2b38 = _0x72fbef !== this && _0x33e58c ? this : null;
                if (_0x3b2b38) {
                  _0x3b2b38._remove(false, true);
                  _0x33e58c._insertItem(_0x72fbef._index + _0x9dfe51, _0x3b2b38);
                }
                return _0x3b2b38;
              },
              insertAbove: function (_0x38a3de) {
                return this._insertAt(_0x38a3de, 1);
              },
              insertBelow: function (_0x56573f) {
                return this._insertAt(_0x56573f, 0);
              },
              sendToBack: function () {
                var _0x54ae22 = this._getOwner();
                if (_0x54ae22) {
                  return _0x54ae22._insertItem(0, this);
                } else {
                  return null;
                }
              },
              bringToFront: function () {
                var _0x15bdd5 = this._getOwner();
                if (_0x15bdd5) {
                  return _0x15bdd5._insertItem(_0x2bd7be, this);
                } else {
                  return null;
                }
              },
              appendTop: "#addChild",
              appendBottom: function (_0xac3c1e) {
                return this.insertChild(0, _0xac3c1e);
              },
              moveAbove: "#insertAbove",
              moveBelow: "#insertBelow",
              addTo: function (_0x3643d0) {
                return _0x3643d0._insertItem(_0x2bd7be, this);
              },
              copyTo: function (_0x3dbd18) {
                return this.clone(false).addTo(_0x3dbd18);
              },
              reduce: function (_0x7bdbcd) {
                var _0x1d42b9 = this._children;
                if (_0x1d42b9 && _0x1d42b9.length === 1) {
                  _0x7bdbcd = _0x1d42b9[0].reduce(_0x7bdbcd);
                  if (this._parent) {
                    _0x7bdbcd.insertAbove(this);
                    this.remove();
                  } else {
                    _0x7bdbcd.remove();
                  }
                  return _0x7bdbcd;
                } else {
                  return this;
                }
              },
              _removeNamed: function () {
                var _0x5c7b6d;
                var _0x90507c;
                var _0x406bf6;
                var _0x5db421;
                var _0x1807df = this._getOwner();
                if (_0x1807df) {
                  _0x5c7b6d = _0x1807df._children;
                  if ((_0x1807df = (_0x5db421 = (_0x90507c = _0x1807df._namedChildren)[_0x406bf6 = this._name]) ? _0x5db421.indexOf(this) : -1) !== -1) {
                    if (_0x5c7b6d[_0x406bf6] == this) {
                      delete _0x5c7b6d[_0x406bf6];
                    }
                    _0x5db421.splice(_0x1807df, 1);
                    if (_0x5db421.length) {
                      _0x5c7b6d[_0x406bf6] = _0x5db421[0];
                    } else {
                      delete _0x90507c[_0x406bf6];
                    }
                  }
                }
              },
              _remove: function (_0x43096f, _0xace0e4) {
                var _0x3c0427 = this._getOwner();
                var _0x446661 = this._project;
                var _0x4fd325 = this._index;
                if (this._style) {
                  this._style._dispose();
                }
                return !(!_0x3c0427 || (this._name && this._removeNamed(), _0x4fd325 != null && (_0x446661._activeLayer === this && (_0x446661._activeLayer = this.getNextSibling() || this.getPreviousSibling()), _0x28b48a.splice(_0x3c0427._children, null, _0x4fd325, 1)), this._installEvents(false), _0x43096f && _0x446661._changes && this._changed(5), _0xace0e4 && _0x3c0427._changed(11, this), this._parent = null));
              },
              remove: function () {
                return this._remove(true, true);
              },
              replaceWith: function (_0x3f80ad) {
                if (_0x3f80ad = _0x3f80ad && _0x3f80ad.insertBelow(this)) {
                  this.remove();
                }
                return _0x3f80ad;
              },
              removeChildren: function (_0xd54051, _0x32b5a0) {
                if (!this._children) {
                  return null;
                }
                _0xd54051 = _0xd54051 || 0;
                _0x32b5a0 = _0x28b48a.pick(_0x32b5a0, this._children.length);
                for (var _0x7278eb = _0x28b48a.splice(this._children, null, _0xd54051, _0x32b5a0 - _0xd54051), _0xfe2e52 = _0x7278eb.length - 1; _0xfe2e52 >= 0; _0xfe2e52--) {
                  _0x7278eb[_0xfe2e52]._remove(true, false);
                }
                if (_0x7278eb.length > 0) {
                  this._changed(11);
                }
                return _0x7278eb;
              },
              clear: "#removeChildren",
              reverseChildren: function () {
                if (this._children) {
                  this._children.reverse();
                  for (var _0x294b83 = 0, _0x120ab0 = this._children.length; _0x294b83 < _0x120ab0; _0x294b83++) {
                    this._children[_0x294b83]._index = _0x294b83;
                  }
                  this._changed(11);
                }
              },
              isEmpty: function (_0x5371d8) {
                var _0x526ea7 = this._children;
                var _0xf1b65 = _0x526ea7 ? _0x526ea7.length : 0;
                if (_0x5371d8) {
                  for (var _0x5c8435 = 0; _0x5c8435 < _0xf1b65; _0x5c8435++) {
                    if (!_0x526ea7[_0x5c8435].isEmpty(_0x5371d8)) {
                      return false;
                    }
                  }
                  return true;
                }
                return !_0xf1b65;
              },
              isEditable: function () {
                for (var _0x35f57f = this; _0x35f57f;) {
                  if (!_0x35f57f._visible || _0x35f57f._locked) {
                    return false;
                  }
                  _0x35f57f = _0x35f57f._parent;
                }
                return true;
              },
              hasFill: function () {
                return this.getStyle().hasFill();
              },
              hasStroke: function () {
                return this.getStyle().hasStroke();
              },
              hasShadow: function () {
                return this.getStyle().hasShadow();
              },
              _getOrder: function (_0x38acf6) {
                function _0x3173bb(_0x2b6669) {
                  for (var _0x24036a = []; _0x24036a.unshift(_0x2b6669), _0x2b6669 = _0x2b6669._parent;);
                  return _0x24036a;
                }
                for (var _0xd51d65 = _0x3173bb(this), _0x3d8cc8 = _0x3173bb(_0x38acf6), _0x2361df = 0, _0x59aafa = Math.min(_0xd51d65.length, _0x3d8cc8.length); _0x2361df < _0x59aafa; _0x2361df++) {
                  if (_0xd51d65[_0x2361df] != _0x3d8cc8[_0x2361df]) {
                    if (_0xd51d65[_0x2361df]._index < _0x3d8cc8[_0x2361df]._index) {
                      return 1;
                    } else {
                      return -1;
                    }
                  }
                }
                return 0;
              },
              hasChildren: function () {
                return this._children && this._children.length > 0;
              },
              isInserted: function () {
                return !!this._parent && this._parent.isInserted();
              },
              isAbove: function (_0x8d5785) {
                return this._getOrder(_0x8d5785) === -1;
              },
              isBelow: function (_0x59fa4e) {
                return this._getOrder(_0x59fa4e) === 1;
              },
              isParent: function (_0x4372fe) {
                return this._parent === _0x4372fe;
              },
              isChild: function (_0x268e29) {
                return _0x268e29 && _0x268e29._parent === this;
              },
              isDescendant: function (_0x24eccc) {
                for (var _0xdc3e6 = this; _0xdc3e6 = _0xdc3e6._parent;) {
                  if (_0xdc3e6 === _0x24eccc) {
                    return true;
                  }
                }
                return false;
              },
              isAncestor: function (_0x1375f9) {
                return !!_0x1375f9 && _0x1375f9.isDescendant(this);
              },
              isSibling: function (_0x12d11a) {
                return this._parent === _0x12d11a._parent;
              },
              isGroupedWith: function (_0x5a1843) {
                for (var _0x48e0dd = this._parent; _0x48e0dd;) {
                  if (_0x48e0dd._parent && /^(Group|Layer|CompoundPath)$/.test(_0x48e0dd._class) && _0x5a1843.isDescendant(_0x48e0dd)) {
                    return true;
                  }
                  _0x48e0dd = _0x48e0dd._parent;
                }
                return false;
              }
            }, _0x28b48a.each(["rotate", "scale", "shear", "skew"], function (_0x40f6c6) {
              var _0x1b706b = _0x40f6c6 === "rotate";
              this[_0x40f6c6] = function () {
                var _0x17cf8a = arguments;
                var _0x2baaf1 = (_0x1b706b ? _0x28b48a : _0xbc5c4a).read(_0x17cf8a);
                _0x17cf8a = _0xbc5c4a.read(_0x17cf8a, 0, {
                  readNull: true
                });
                return this.transform(new _0x1a5a7c()[_0x40f6c6](_0x2baaf1, _0x17cf8a || this.getPosition(true)));
              };
            }, {
              translate: function () {
                var _0x4be464 = new _0x1a5a7c();
                return this.transform(_0x4be464.translate.apply(_0x4be464, arguments));
              },
              transform: function (_0x47bc2c, _0x2c4945, _0x426457) {
                var _0x3c360a;
                var _0x1a8dea;
                var _0x474b2c = this._matrix;
                var _0x31f44c = _0x47bc2c && !_0x47bc2c.isIdentity();
                var _0x3a4074 = _0x426457 && this._canApplyMatrix || this._applyMatrix && (_0x31f44c || !_0x474b2c.isIdentity() || _0x2c4945 && this._children);
                if (!_0x31f44c && !_0x3a4074) {
                  return this;
                }
                if (_0x31f44c) {
                  if (!_0x47bc2c.isInvertible() && _0x474b2c.isInvertible()) {
                    _0x474b2c._backup = _0x474b2c.getValues();
                  }
                  _0x474b2c.prepend(_0x47bc2c, true);
                  _0x3c360a = (_0x1a8dea = this._style).getFillColor(true);
                  _0x1a8dea = _0x1a8dea.getStrokeColor(true);
                  if (_0x3c360a) {
                    _0x3c360a.transform(_0x47bc2c);
                  }
                  if (_0x1a8dea) {
                    _0x1a8dea.transform(_0x47bc2c);
                  }
                }
                if (_0x3a4074 = _0x3a4074 && this._transformContent(_0x474b2c, _0x2c4945, _0x426457)) {
                  if (_0x2c4945 = this._pivot) {
                    _0x474b2c._transformPoint(_0x2c4945, _0x2c4945, true);
                  }
                  _0x474b2c.reset(true);
                  if (_0x426457 && this._canApplyMatrix) {
                    this._applyMatrix = true;
                  }
                }
                var _0x11bfad = this._bounds;
                _0x474b2c = this._position;
                if (_0x31f44c || _0x3a4074) {
                  this._changed(25);
                }
                if ((_0x426457 = _0x31f44c && _0x11bfad && _0x47bc2c.decompose()) && _0x426457.skewing.isZero() && _0x426457.rotation % 90 == 0) {
                  for (var _0x574ab9 in _0x11bfad) {
                    var _0x5adbeb = _0x11bfad[_0x574ab9];
                    if (_0x5adbeb.nonscaling) {
                      delete _0x11bfad[_0x574ab9];
                    } else if (!(!_0x3a4074 && _0x5adbeb.internal)) {
                      _0x5adbeb = _0x5adbeb.rect;
                      _0x47bc2c._transformBounds(_0x5adbeb, _0x5adbeb);
                    }
                  }
                  if (_0x426457 = (this._bounds = _0x11bfad)[this._getBoundsCacheKey(this._boundsOptions || {})]) {
                    this._position = this._getPositionFromBounds(_0x426457.rect);
                  }
                } else if (_0x31f44c && _0x474b2c && this._pivot) {
                  this._position = _0x47bc2c._transformPoint(_0x474b2c, _0x474b2c);
                }
                return this;
              },
              _transformContent: function (_0x2b5a44, _0x3e00c7, _0x17e573) {
                var _0x22ce52 = this._children;
                if (_0x22ce52) {
                  for (var _0x284e69 = 0, _0x2ed522 = _0x22ce52.length; _0x284e69 < _0x2ed522; _0x284e69++) {
                    _0x22ce52[_0x284e69].transform(_0x2b5a44, _0x3e00c7, _0x17e573);
                  }
                  return true;
                }
              },
              globalToLocal: function () {
                return this.getGlobalMatrix(true)._inverseTransform(_0xbc5c4a.read(arguments));
              },
              localToGlobal: function () {
                return this.getGlobalMatrix(true)._transformPoint(_0xbc5c4a.read(arguments));
              },
              parentToLocal: function () {
                return this._matrix._inverseTransform(_0xbc5c4a.read(arguments));
              },
              localToParent: function () {
                return this._matrix._transformPoint(_0xbc5c4a.read(arguments));
              },
              fitBounds: function (_0x6f598, _0xf599ce) {
                _0x6f598 = _0x5384ce.read(arguments);
                var _0x3ba343 = this.getBounds();
                var _0x51da82 = _0x3ba343.height / _0x3ba343.width;
                var _0x28a9ff = _0x6f598.height / _0x6f598.width;
                _0x28a9ff = (_0xf599ce ? _0x28a9ff < _0x51da82 : _0x51da82 < _0x28a9ff) ? _0x6f598.width / _0x3ba343.width : _0x6f598.height / _0x3ba343.height;
                (_0x28a9ff = new _0x5384ce(new _0xbc5c4a(), new _0x236987(_0x3ba343.width * _0x28a9ff, _0x3ba343.height * _0x28a9ff))).setCenter(_0x6f598.getCenter());
                this.setBounds(_0x28a9ff);
              }
            }), {
              _setStyles: function (_0x53b93b, _0x35a84e, _0x19e5b4) {
                var _0x5e223f;
                var _0x42be0c;
                var _0x90194d = this._style;
                var _0x5bb1c9 = this._matrix;
                if (_0x90194d.hasFill()) {
                  _0x53b93b.fillStyle = _0x90194d.getFillColor().toCanvasStyle(_0x53b93b, _0x5bb1c9);
                }
                if (_0x90194d.hasStroke()) {
                  _0x53b93b.strokeStyle = _0x90194d.getStrokeColor().toCanvasStyle(_0x53b93b, _0x5bb1c9);
                  _0x53b93b.lineWidth = _0x90194d.getStrokeWidth();
                  _0x5e223f = _0x90194d.getStrokeJoin();
                  _0x42be0c = _0x90194d.getStrokeCap();
                  _0x5bb1c9 = _0x90194d.getMiterLimit();
                  if (_0x5e223f) {
                    _0x53b93b.lineJoin = _0x5e223f;
                  }
                  if (_0x42be0c) {
                    _0x53b93b.lineCap = _0x42be0c;
                  }
                  if (_0x5bb1c9) {
                    _0x53b93b.miterLimit = _0x5bb1c9;
                  }
                  if (_0x36d317.support.nativeDash) {
                    _0x42be0c = _0x90194d.getDashArray();
                    _0x5bb1c9 = _0x90194d.getDashOffset();
                    if (_0x42be0c && _0x42be0c.length) {
                      if ("setLineDash" in _0x53b93b) {
                        _0x53b93b.setLineDash(_0x42be0c);
                        _0x53b93b.lineDashOffset = _0x5bb1c9;
                      } else {
                        _0x53b93b.mozDash = _0x42be0c;
                        _0x53b93b.mozDashOffset = _0x5bb1c9;
                      }
                    }
                  }
                }
                if (_0x90194d.hasShadow()) {
                  _0x35a84e = _0x35a84e.pixelRatio || 1;
                  _0x35a84e = (_0x19e5b4 = _0x19e5b4._shiftless().prepend(new _0x1a5a7c().scale(_0x35a84e, _0x35a84e))).transform(new _0xbc5c4a(_0x90194d.getShadowBlur(), 0));
                  _0x19e5b4 = _0x19e5b4.transform(this.getShadowOffset());
                  _0x53b93b.shadowColor = _0x90194d.getShadowColor().toCanvasStyle(_0x53b93b);
                  _0x53b93b.shadowBlur = _0x35a84e.getLength();
                  _0x53b93b.shadowOffsetX = _0x19e5b4.x;
                  _0x53b93b.shadowOffsetY = _0x19e5b4.y;
                }
              },
              draw: function (_0x268e69, _0xe4094e, _0x4ce4d5) {
                this._updateVersion = this._project._updateVersion;
                if (this._visible && this._opacity !== 0) {
                  var _0x52a39f = _0xe4094e.matrices;
                  var _0x32482e = _0xe4094e.viewMatrix;
                  var _0x3788a0 = this._matrix;
                  if ((_0x39e6cd = _0x52a39f[_0x52a39f.length - 1].appended(_0x3788a0)).isInvertible()) {
                    _0x32482e = _0x32482e ? _0x32482e.appended(_0x39e6cd) : _0x39e6cd;
                    _0x52a39f.push(_0x39e6cd);
                    if (_0xe4094e.updateMatrix) {
                      this._globalMatrix = _0x39e6cd;
                    }
                    var _0x2dc09b;
                    var _0x144eeb;
                    var _0x38e8ba;
                    var _0x58853f = this._blendMode;
                    var _0x28274f = _0x3c029b.clamp(this._opacity, 0, 1);
                    var _0x649f96 = _0x58853f === "normal";
                    var _0x415685 = _0x482b6b.nativeModes[_0x58853f];
                    var _0x534b84 = _0x649f96 && _0x28274f === 1 || _0xe4094e.dontStart || _0xe4094e.clip || (_0x415685 || _0x649f96 && _0x28274f < 1) && this._canComposite();
                    var _0x39e6cd = _0xe4094e.pixelRatio || 1;
                    if (!_0x534b84) {
                      if (!(_0x20551c = this.getStrokeBounds(_0x32482e)).width || !_0x20551c.height) {
                        _0x52a39f.pop();
                        return;
                      }
                      _0x38e8ba = _0xe4094e.offset;
                      _0x144eeb = _0xe4094e.offset = _0x20551c.getTopLeft().floor();
                      _0x2dc09b = _0x268e69;
                      _0x268e69 = _0xc9a63f.getContext(_0x20551c.getSize().ceil().add(1).multiply(_0x39e6cd));
                      if (_0x39e6cd !== 1) {
                        _0x268e69.scale(_0x39e6cd, _0x39e6cd);
                      }
                    }
                    _0x268e69.save();
                    _0x649f96 = _0x4ce4d5 ? _0x4ce4d5.appended(_0x3788a0) : this._canScaleStroke && !this.getStrokeScaling(true) && _0x32482e;
                    var _0x20551c = !_0x534b84 && _0xe4094e.clipItem;
                    _0x4ce4d5 = !_0x649f96 || _0x20551c;
                    if (_0x534b84) {
                      _0x268e69.globalAlpha = _0x28274f;
                      if (_0x415685) {
                        _0x268e69.globalCompositeOperation = _0x58853f;
                      }
                    } else if (_0x4ce4d5) {
                      _0x268e69.translate(-_0x144eeb.x, -_0x144eeb.y);
                    }
                    if (_0x4ce4d5) {
                      (_0x534b84 ? _0x3788a0 : _0x32482e).applyToContext(_0x268e69);
                    }
                    if (_0x20551c) {
                      _0xe4094e.clipItem.draw(_0x268e69, _0xe4094e.extend({
                        clip: true
                      }));
                    }
                    if (_0x649f96) {
                      _0x268e69.setTransform(_0x39e6cd, 0, 0, _0x39e6cd, 0, 0);
                      if (_0x20551c = _0xe4094e.offset) {
                        _0x268e69.translate(-_0x20551c.x, -_0x20551c.y);
                      }
                    }
                    this._draw(_0x268e69, _0xe4094e, _0x32482e, _0x649f96);
                    _0x268e69.restore();
                    _0x52a39f.pop();
                    if (_0xe4094e.clip && !_0xe4094e.dontFinish) {
                      _0x268e69.clip("evenodd");
                    }
                    if (!_0x534b84) {
                      _0x482b6b.process(_0x58853f, _0x268e69, _0x2dc09b, _0x28274f, _0x144eeb.subtract(_0x38e8ba).multiply(_0x39e6cd));
                      _0xc9a63f.release(_0x268e69);
                      _0xe4094e.offset = _0x38e8ba;
                    }
                  }
                }
              },
              _isUpdated: function (_0x4fc891) {
                var _0x389115 = this._parent;
                if (_0x389115 instanceof _0x5efee7) {
                  return _0x389115._isUpdated(_0x4fc891);
                }
                var _0xeaddb9 = this._updateVersion === _0x4fc891;
                if (!_0xeaddb9 && _0x389115 && _0x389115._visible && _0x389115._isUpdated(_0x4fc891)) {
                  this._updateVersion = _0x4fc891;
                  _0xeaddb9 = true;
                }
                return _0xeaddb9;
              },
              _drawSelection: function (_0x53edd8, _0x1665f2, _0x167d8b, _0x1ef27e, _0x293951) {
                var _0x157daa = (_0x23da44 = this._selection) & 1;
                var _0x311990 = _0x23da44 & 2 || _0x157daa && this._selectBounds;
                var _0x23da44 = _0x23da44 & 4;
                if (((_0x157daa = !!this._drawSelected && _0x157daa) || _0x311990 || _0x23da44) && this._isUpdated(_0x293951)) {
                  var _0x34c568 = this.getSelectedColor(true) || (_0x34c568 = this.getLayer()) && _0x34c568.getSelectedColor(true);
                  _0x1665f2 = _0x1665f2.appended(this.getGlobalMatrix(true));
                  var _0x598c65 = _0x167d8b / 2;
                  _0x53edd8.strokeStyle = _0x53edd8.fillStyle = _0x34c568 ? _0x34c568.toCanvasStyle(_0x53edd8) : "#009dec";
                  if (_0x157daa) {
                    this._drawSelected(_0x53edd8, _0x1665f2, _0x1ef27e);
                  }
                  if (_0x23da44) {
                    _0x1ef27e = this.getPosition(true);
                    var _0x882d42 = (_0x1ef27e = (_0x23da44 = this._parent) ? _0x23da44.localToGlobal(_0x1ef27e) : _0x1ef27e).x;
                    var _0x160fc2 = _0x1ef27e.y;
                    _0x53edd8.beginPath();
                    _0x53edd8.arc(_0x882d42, _0x160fc2, _0x598c65, 0, Math.PI * 2, true);
                    _0x53edd8.stroke();
                    for (var _0x39716e = [[0, -1], [1, 0], [0, 1], [-1, 0]], _0x368fb6 = _0x598c65, _0x580201 = _0x167d8b + 1, _0x3460c0 = 0; _0x3460c0 < 4; _0x3460c0++) {
                      var _0x27d0d7 = (_0x43191c = _0x39716e[_0x3460c0])[0];
                      var _0x43191c = _0x43191c[1];
                      _0x53edd8.moveTo(_0x882d42 + _0x27d0d7 * _0x368fb6, _0x160fc2 + _0x43191c * _0x368fb6);
                      _0x53edd8.lineTo(_0x882d42 + _0x27d0d7 * _0x580201, _0x160fc2 + _0x43191c * _0x580201);
                      _0x53edd8.stroke();
                    }
                  }
                  if (_0x311990) {
                    var _0x5d883f = _0x1665f2._transformCorners(this.getInternalBounds());
                    _0x53edd8.beginPath();
                    _0x3460c0 = 0;
                    for (; _0x3460c0 < 8; _0x3460c0++) {
                      _0x53edd8[_0x3460c0 ? "lineTo" : "moveTo"](_0x5d883f[_0x3460c0], _0x5d883f[++_0x3460c0]);
                    }
                    _0x53edd8.closePath();
                    _0x53edd8.stroke();
                    _0x3460c0 = 0;
                    for (; _0x3460c0 < 8; _0x3460c0++) {
                      _0x53edd8.fillRect(_0x5d883f[_0x3460c0] - _0x598c65, _0x5d883f[++_0x3460c0] - _0x598c65, _0x167d8b, _0x167d8b);
                    }
                  }
                }
              },
              _canComposite: function () {
                return false;
              }
            }, _0x28b48a.each(["down", "drag", "up", "move"], function (_0x35f3bd) {
              this["removeOn" + _0x28b48a.capitalize(_0x35f3bd)] = function () {
                var _0x1a7eb7 = {
                  [_0x35f3bd]: true
                };
                return this.removeOn(_0x1a7eb7);
              };
            }, {
              removeOn: function (_0x4ac356) {
                for (var _0x2818dd in _0x4ac356) {
                  var _0x1415e4;
                  if (_0x4ac356[_0x2818dd]) {
                    _0x1415e4 = "mouse" + _0x2818dd;
                    (_0x2818dd = (_0x2818dd = this._project)._removeSets = _0x2818dd._removeSets || {})[_0x1415e4] = _0x2818dd[_0x1415e4] || {};
                    _0x2818dd[_0x1415e4][this._id] = this;
                  }
                }
                return this;
              }
            }), {
              tween: function (_0x517968, _0x590023, _0x5d16c7) {
                if (!_0x5d16c7) {
                  _0x5d16c7 = _0x590023;
                  _0x590023 = _0x517968;
                  _0x517968 = null;
                  if (!_0x5d16c7) {
                    _0x5d16c7 = _0x590023;
                    _0x590023 = null;
                  }
                }
                var _0x176a7b = _0x5d16c7 && _0x5d16c7.easing;
                var _0x4e7271 = _0x5d16c7 && _0x5d16c7.start;
                _0x5d16c7 = _0x5d16c7 != null && (typeof _0x5d16c7 == "number" ? _0x5d16c7 : _0x5d16c7.duration);
                var _0x2c2b4b = new _0x24d063(this, _0x517968, _0x590023, _0x5d16c7, _0x176a7b, _0x4e7271);
                if (_0x5d16c7) {
                  this.on("frame", function _0x47a1d0(_0xba73da) {
                    _0x2c2b4b._handleFrame(_0xba73da.time * 1000);
                    if (!_0x2c2b4b.running) {
                      this.off("frame", _0x47a1d0);
                    }
                  });
                }
                return _0x2c2b4b;
              },
              tweenTo: function (_0x4898f4, _0x45b58b) {
                return this.tween(null, _0x4898f4, _0x45b58b);
              },
              tweenFrom: function (_0x573d1b, _0x1c8bf9) {
                return this.tween(_0x573d1b, null, _0x1c8bf9);
              }
            });
            var _0x46c1f5 = _0x1f30bb.extend({
              _class: "Group",
              _selectBounds: false,
              _selectChildren: true,
              _serializeFields: {
                children: []
              },
              initialize: function (_0x133a26) {
                this._children = [];
                this._namedChildren = {};
                if (!this._initialize(_0x133a26)) {
                  this.addChildren(Array.isArray(_0x133a26) ? _0x133a26 : arguments);
                }
              },
              _changed: function _0x3cc187(_0x155778) {
                _0x3cc187.base.call(this, _0x155778);
                if (_0x155778 & 2050) {
                  this._clipItem = _0x2bd7be;
                }
              },
              _getClipItem: function () {
                if ((_0x4cfb78 = this._clipItem) === _0x2bd7be) {
                  for (var _0x4cfb78 = null, _0x30b97a = this._children, _0x16c17d = 0, _0x4b131e = _0x30b97a.length; _0x16c17d < _0x4b131e; _0x16c17d++) {
                    if (_0x30b97a[_0x16c17d]._clipMask) {
                      _0x4cfb78 = _0x30b97a[_0x16c17d];
                      break;
                    }
                  }
                  this._clipItem = _0x4cfb78;
                }
                return _0x4cfb78;
              },
              isClipped: function () {
                return !!this._getClipItem();
              },
              setClipped: function (_0x3a9ee9) {
                var _0x455856 = this.getFirstChild();
                if (_0x455856) {
                  _0x455856.setClipMask(_0x3a9ee9);
                }
              },
              _getBounds: function _0x492765(_0x5e97c4, _0x428a78) {
                var _0x375d86 = this._getClipItem();
                if (_0x375d86) {
                  return _0x375d86._getCachedBounds(_0x375d86._matrix.prepended(_0x5e97c4), _0x28b48a.set({}, _0x428a78, {
                    stroke: false
                  }));
                } else {
                  return _0x492765.base.call(this, _0x5e97c4, _0x428a78);
                }
              },
              _hitTestChildren: function _0x1696a2(_0x4441dc, _0x53412b, _0x1f8d4e) {
                var _0x583b11 = this._getClipItem();
                return (!_0x583b11 || _0x583b11.contains(_0x4441dc)) && _0x1696a2.base.call(this, _0x4441dc, _0x53412b, _0x1f8d4e, _0x583b11);
              },
              _draw: function (_0x565eeb, _0x1a88dd) {
                var _0x2f080c = _0x1a88dd.clip;
                var _0x57279b = !_0x2f080c && this._getClipItem();
                _0x1a88dd = _0x1a88dd.extend({
                  clipItem: _0x57279b,
                  clip: false
                });
                if (_0x2f080c) {
                  _0x565eeb.beginPath();
                  _0x1a88dd.dontStart = _0x1a88dd.dontFinish = true;
                } else if (_0x57279b) {
                  _0x57279b.draw(_0x565eeb, _0x1a88dd.extend({
                    clip: true
                  }));
                }
                for (var _0x25413d = this._children, _0x16330c = 0, _0x46382d = _0x25413d.length; _0x16330c < _0x46382d; _0x16330c++) {
                  var _0x2fca6f = _0x25413d[_0x16330c];
                  if (_0x2fca6f !== _0x57279b) {
                    _0x2fca6f.draw(_0x565eeb, _0x1a88dd);
                  }
                }
              }
            });
            var _0xcb7ead = _0x46c1f5.extend({
              _class: "Layer",
              initialize: function () {
                _0x46c1f5.apply(this, arguments);
              },
              _getOwner: function () {
                return this._parent || this._index != null && this._project;
              },
              isInserted: function _0x509b67() {
                if (this._parent) {
                  return _0x509b67.base.call(this);
                } else {
                  return this._index != null;
                }
              },
              activate: function () {
                this._project._activeLayer = this;
              },
              _hitTestSelf: function () {}
            });
            var _0xa8e5b4 = _0x1f30bb.extend({
              _class: "Shape",
              _applyMatrix: false,
              _canApplyMatrix: false,
              _canScaleStroke: true,
              _serializeFields: {
                type: null,
                size: null,
                radius: null
              },
              initialize: function (_0x2fd667, _0x1d4647) {
                this._initialize(_0x2fd667, _0x1d4647);
              },
              _equals: function (_0xcfd301) {
                return this._type === _0xcfd301._type && this._size.equals(_0xcfd301._size) && _0x28b48a.equals(this._radius, _0xcfd301._radius);
              },
              copyContent: function (_0x55c176) {
                this.setType(_0x55c176._type);
                this.setSize(_0x55c176._size);
                this.setRadius(_0x55c176._radius);
              },
              getType: function () {
                return this._type;
              },
              setType: function (_0x52032c) {
                this._type = _0x52032c;
              },
              getShape: "#getType",
              setShape: "#setType",
              getSize: function () {
                var _0x491501 = this._size;
                return new _0x29ac77(_0x491501.width, _0x491501.height, this, "setSize");
              },
              setSize: function () {
                var _0x44334e;
                var _0x2ed05e;
                var _0x30e35c;
                var _0x246c87 = _0x236987.read(arguments);
                if (this._size) {
                  if (!this._size.equals(_0x246c87)) {
                    _0x44334e = this._type;
                    _0x2ed05e = _0x246c87.width;
                    _0x30e35c = _0x246c87.height;
                    if (_0x44334e === "rectangle") {
                      this._radius.set(_0x236987.min(this._radius, _0x246c87.divide(2).abs()));
                    } else if (_0x44334e === "circle") {
                      _0x2ed05e = _0x30e35c = (_0x2ed05e + _0x30e35c) / 2;
                      this._radius = _0x2ed05e / 2;
                    } else if (_0x44334e === "ellipse") {
                      this._radius._set(_0x2ed05e / 2, _0x30e35c / 2);
                    }
                    this._size._set(_0x2ed05e, _0x30e35c);
                    this._changed(9);
                  }
                } else {
                  this._size = _0x246c87.clone();
                }
              },
              getRadius: function () {
                var _0x1ae205 = this._radius;
                if (this._type === "circle") {
                  return _0x1ae205;
                } else {
                  return new _0x29ac77(_0x1ae205.width, _0x1ae205.height, this, "setRadius");
                }
              },
              setRadius: function (_0x2fec78) {
                var _0x404c78 = this._type;
                if (_0x404c78 === "circle") {
                  if (_0x2fec78 === this._radius) {
                    return;
                  }
                  var _0x50a9ba = _0x2fec78 * 2;
                  this._radius = _0x2fec78;
                  this._size._set(_0x50a9ba, _0x50a9ba);
                } else {
                  _0x2fec78 = _0x236987.read(arguments);
                  if (this._radius) {
                    if (this._radius.equals(_0x2fec78)) {
                      return;
                    }
                    this._radius.set(_0x2fec78);
                    if (_0x404c78 === "rectangle") {
                      _0x50a9ba = _0x236987.max(this._size, _0x2fec78.multiply(2));
                      this._size.set(_0x50a9ba);
                    } else if (_0x404c78 === "ellipse") {
                      this._size._set(_0x2fec78.width * 2, _0x2fec78.height * 2);
                    }
                  } else {
                    this._radius = _0x2fec78.clone();
                  }
                }
                this._changed(9);
              },
              isEmpty: function () {
                return false;
              },
              toPath: function (_0x407b5d) {
                var _0x121bf3 = new _0x5615aa[_0x28b48a.capitalize(this._type)]({
                  center: new _0xbc5c4a(),
                  size: this._size,
                  radius: this._radius,
                  insert: false
                });
                _0x121bf3.copyAttributes(this);
                if (_0x36d317.settings.applyMatrix) {
                  _0x121bf3.setApplyMatrix(true);
                }
                if (!(_0x407b5d !== _0x2bd7be && !_0x407b5d)) {
                  _0x121bf3.insertAbove(this);
                }
                return _0x121bf3;
              },
              toShape: "#clone",
              _asPathItem: function () {
                return this.toPath(false);
              },
              _draw: function (_0x1c37d8, _0x41c84a, _0x37db9a, _0x4887ec) {
                var _0x1dc462;
                var _0x474b33;
                var _0xa2318c;
                var _0x7ca59a;
                var _0x58da2b;
                var _0x41a9c2 = this._style;
                var _0xe8cfa4 = _0x41a9c2.hasFill();
                var _0x19c4f1 = _0x41a9c2.hasStroke();
                var _0x46c9e4 = _0x41c84a.dontFinish || _0x41c84a.clip;
                var _0x3011c6 = !_0x4887ec;
                if (_0xe8cfa4 || _0x19c4f1 || _0x46c9e4) {
                  _0xa2318c = this._type;
                  _0x7ca59a = this._radius;
                  _0x58da2b = _0xa2318c === "circle";
                  if (!_0x41c84a.dontStart) {
                    _0x1c37d8.beginPath();
                  }
                  if (_0x3011c6 && _0x58da2b) {
                    _0x1c37d8.arc(0, 0, _0x7ca59a, 0, Math.PI * 2, true);
                  } else {
                    _0x1dc462 = _0x58da2b ? _0x7ca59a : _0x7ca59a.width;
                    _0x474b33 = _0x58da2b ? _0x7ca59a : _0x7ca59a.height;
                    _0x7ca59a = (_0x58da2b = this._size).width;
                    _0x58da2b = _0x58da2b.height;
                    if (_0x3011c6 && _0xa2318c === "rectangle" && _0x1dc462 === 0 && _0x474b33 === 0) {
                      _0x1c37d8.rect(-_0x7ca59a / 2, -_0x58da2b / 2, _0x7ca59a, _0x58da2b);
                    } else {
                      _0x58da2b = [-(_0x3011c6 = _0x7ca59a / 2), -(_0xa2318c = _0x58da2b / 2) + _0x474b33, -_0x3011c6, (_0x58da2b = _0x474b33 * (_0x7ca59a = 0.44771525016920644)) - _0xa2318c, (_0x7ca59a *= _0x1dc462) - _0x3011c6, -_0xa2318c, -_0x3011c6 + _0x1dc462, -_0xa2318c, _0x3011c6 - _0x1dc462, -_0xa2318c, _0x3011c6 - _0x7ca59a, -_0xa2318c, _0x3011c6, _0x58da2b - _0xa2318c, _0x3011c6, -_0xa2318c + _0x474b33, _0x3011c6, _0xa2318c - _0x474b33, _0x3011c6, _0xa2318c - _0x58da2b, _0x3011c6 - _0x7ca59a, _0xa2318c, _0x3011c6 - _0x1dc462, _0xa2318c, -_0x3011c6 + _0x1dc462, _0xa2318c, _0x7ca59a - _0x3011c6, _0xa2318c, -_0x3011c6, _0xa2318c - _0x58da2b, -_0x3011c6, _0xa2318c - _0x474b33];
                      if (_0x4887ec) {
                        _0x4887ec.transform(_0x58da2b, _0x58da2b, 32);
                      }
                      _0x1c37d8.moveTo(_0x58da2b[0], _0x58da2b[1]);
                      _0x1c37d8.bezierCurveTo(_0x58da2b[2], _0x58da2b[3], _0x58da2b[4], _0x58da2b[5], _0x58da2b[6], _0x58da2b[7]);
                      if (_0x3011c6 !== _0x1dc462) {
                        _0x1c37d8.lineTo(_0x58da2b[8], _0x58da2b[9]);
                      }
                      _0x1c37d8.bezierCurveTo(_0x58da2b[10], _0x58da2b[11], _0x58da2b[12], _0x58da2b[13], _0x58da2b[14], _0x58da2b[15]);
                      if (_0xa2318c !== _0x474b33) {
                        _0x1c37d8.lineTo(_0x58da2b[16], _0x58da2b[17]);
                      }
                      _0x1c37d8.bezierCurveTo(_0x58da2b[18], _0x58da2b[19], _0x58da2b[20], _0x58da2b[21], _0x58da2b[22], _0x58da2b[23]);
                      if (_0x3011c6 !== _0x1dc462) {
                        _0x1c37d8.lineTo(_0x58da2b[24], _0x58da2b[25]);
                      }
                      _0x1c37d8.bezierCurveTo(_0x58da2b[26], _0x58da2b[27], _0x58da2b[28], _0x58da2b[29], _0x58da2b[30], _0x58da2b[31]);
                    }
                  }
                  _0x1c37d8.closePath();
                }
                if (!(_0x46c9e4 || !_0xe8cfa4 && !_0x19c4f1)) {
                  this._setStyles(_0x1c37d8, _0x41c84a, _0x37db9a);
                  if (_0xe8cfa4) {
                    _0x1c37d8.fill("evenodd");
                    _0x1c37d8.shadowColor = "rgba(0,0,0,0)";
                  }
                  if (_0x19c4f1) {
                    _0x1c37d8.stroke();
                  }
                }
              },
              _canComposite: function () {
                return !(this.hasFill() && this.hasStroke());
              },
              _getBounds: function (_0x291922, _0x520c90) {
                var _0x3f21a = new _0x5384ce(this._size).setCenter(0, 0);
                var _0x191693 = this._style;
                _0x191693 = _0x520c90.stroke && _0x191693.hasStroke() && _0x191693.getStrokeWidth();
                if (_0x291922) {
                  _0x3f21a = _0x291922._transformBounds(_0x3f21a);
                }
                if (_0x191693) {
                  return _0x3f21a.expand(_0x5615aa._getStrokePadding(_0x191693, this._getStrokeMatrix(_0x291922, _0x520c90)));
                } else {
                  return _0x3f21a;
                }
              }
            }, new function () {
              function _0x7ffc37(_0x35c56b, _0x2989d5, _0x3ebaad) {
                var _0x29b04a = _0x35c56b._radius;
                if (!_0x29b04a.isZero()) {
                  for (var _0x336a0b = _0x35c56b._size.divide(2), _0x363e40 = 1; _0x363e40 <= 4; _0x363e40++) {
                    var _0x4d83c1 = new _0xbc5c4a(_0x363e40 > 1 && _0x363e40 < 4 ? -1 : 1, _0x363e40 > 2 ? -1 : 1);
                    var _0x3faf71 = _0x4d83c1.multiply(_0x336a0b);
                    var _0x398f69 = _0x3faf71.subtract(_0x4d83c1.multiply(_0x29b04a));
                    if (new _0x5384ce(_0x3ebaad ? _0x3faf71.add(_0x4d83c1.multiply(_0x3ebaad)) : _0x3faf71, _0x398f69).contains(_0x2989d5)) {
                      return {
                        point: _0x398f69,
                        quadrant: _0x363e40
                      };
                    }
                  }
                }
              }
              function _0x458b31(_0xa87ee6, _0x185ebe, _0x57ccc0, _0x9d14d6) {
                _0xa87ee6 = _0xa87ee6.divide(_0x185ebe);
                return (!_0x9d14d6 || _0xa87ee6.isInQuadrant(_0x9d14d6)) && _0xa87ee6.subtract(_0xa87ee6.normalize()).multiply(_0x185ebe).divide(_0x57ccc0).length <= 1;
              }
              return {
                _contains: function _0x16ba1b(_0x424c8e) {
                  if (this._type !== "rectangle") {
                    return _0x424c8e.divide(this.size).getLength() <= 0.5;
                  }
                  var _0x51e177 = _0x7ffc37(this, _0x424c8e);
                  if (_0x51e177) {
                    return _0x424c8e.subtract(_0x51e177.point).divide(this._radius).getLength() <= 1;
                  } else {
                    return _0x16ba1b.base.call(this, _0x424c8e);
                  }
                },
                _hitTestSelf: function _0x44bc4b(_0x533626, _0x1c12b5, _0x175456, _0x3dc3ed) {
                  var _0x31bbb5;
                  var _0x320eb0;
                  var _0x2d386c;
                  var _0x59416a = false;
                  var _0x5b6acc = this._style;
                  var _0x2e2b2f = _0x1c12b5.stroke && _0x5b6acc.hasStroke();
                  var _0x578436 = _0x1c12b5.fill && _0x5b6acc.hasFill();
                  if (_0x2e2b2f || _0x578436) {
                    _0x320eb0 = this._type;
                    _0x31bbb5 = this._radius;
                    _0x2d386c = _0x2e2b2f ? _0x5b6acc.getStrokeWidth() / 2 : 0;
                    _0x578436 = _0x1c12b5._tolerancePadding.add(_0x5615aa._getStrokePadding(_0x2d386c, !_0x5b6acc.getStrokeScaling() && _0x3dc3ed));
                    _0x59416a = _0x320eb0 === "rectangle" ? (_0x5b6acc = _0x7ffc37(this, _0x533626, _0x2d386c = _0x578436.multiply(2))) ? _0x458b31(_0x533626.subtract(_0x5b6acc.point), _0x31bbb5, _0x578436, _0x5b6acc.quadrant) : (_0x5b6acc = (_0x320eb0 = new _0x5384ce(this._size).setCenter(0, 0)).expand(_0x2d386c), _0x2d386c = _0x320eb0.expand(_0x2d386c.negate()), _0x5b6acc._containsPoint(_0x533626) && !_0x2d386c._containsPoint(_0x533626)) : _0x458b31(_0x533626, _0x31bbb5, _0x578436);
                  }
                  if (_0x59416a) {
                    return new _0xc7a363(_0x2e2b2f ? "stroke" : "fill", this);
                  } else {
                    return _0x44bc4b.base.apply(this, arguments);
                  }
                }
              };
            }(), {
              statics: new function () {
                function _0x4bcf20(_0x1b63ec, _0xcea7e3, _0x55d5b6, _0x3e9d49, _0x5823ff) {
                  var _0x502c58 = _0x28b48a.create(_0xa8e5b4.prototype);
                  _0x502c58._type = _0x1b63ec;
                  _0x502c58._size = _0x55d5b6;
                  _0x502c58._radius = _0x3e9d49;
                  _0x502c58._initialize(_0x28b48a.getNamed(_0x5823ff), _0xcea7e3);
                  return _0x502c58;
                }
                return {
                  Circle: function () {
                    var _0xd666e7 = arguments;
                    var _0x2d7ae8 = _0xbc5c4a.readNamed(_0xd666e7, "center");
                    var _0x3f668b = _0x28b48a.readNamed(_0xd666e7, "radius");
                    return _0x4bcf20("circle", _0x2d7ae8, new _0x236987(_0x3f668b * 2), _0x3f668b, _0xd666e7);
                  },
                  Rectangle: function () {
                    var _0x2f442a = arguments;
                    var _0x77ed2c = _0x5384ce.readNamed(_0x2f442a, "rectangle");
                    var _0x57ec21 = _0x236987.min(_0x236987.readNamed(_0x2f442a, "radius"), _0x77ed2c.getSize(true).divide(2));
                    return _0x4bcf20("rectangle", _0x77ed2c.getCenter(true), _0x77ed2c.getSize(true), _0x57ec21, _0x2f442a);
                  },
                  Ellipse: function () {
                    var _0x1b6816 = arguments;
                    var _0x370b59 = _0xa8e5b4._readEllipse(_0x1b6816);
                    var _0x1a9d45 = _0x370b59.radius;
                    return _0x4bcf20("ellipse", _0x370b59.center, _0x1a9d45.multiply(2), _0x1a9d45, _0x1b6816);
                  },
                  _readEllipse: function (_0x5f04a9) {
                    var _0x4d2a8c;
                    var _0x70ff72;
                    _0x70ff72 = _0x28b48a.hasNamed(_0x5f04a9, "radius") ? (_0x4d2a8c = _0xbc5c4a.readNamed(_0x5f04a9, "center"), _0x236987.readNamed(_0x5f04a9, "radius")) : (_0x4d2a8c = (_0x70ff72 = _0x5384ce.readNamed(_0x5f04a9, "rectangle")).getCenter(true), _0x70ff72.getSize(true).divide(2));
                    return {
                      center: _0x4d2a8c,
                      radius: _0x70ff72
                    };
                  }
                };
              }()
            });
            var _0x10b4fc = _0x1f30bb.extend({
              _class: "Raster",
              _applyMatrix: false,
              _canApplyMatrix: false,
              _boundsOptions: {
                stroke: false,
                handle: false
              },
              _serializeFields: {
                crossOrigin: null,
                source: null
              },
              _prioritize: ["crossOrigin"],
              _smoothing: "low",
              beans: true,
              initialize: function (_0x58a642, _0x502663) {
                var _0x29bae7;
                var _0x2173ac;
                if (!this._initialize(_0x58a642, _0x502663 !== _0x2bd7be && _0xbc5c4a.read(arguments))) {
                  if ((_0x2173ac = (_0x2173ac = typeof _0x58a642) == "string" ? _0x13c74c.getElementById(_0x58a642) : _0x2173ac == "object" ? _0x58a642 : null) && _0x2173ac !== _0x1f30bb.NO_INSERT) {
                    if (_0x2173ac.getContext || _0x2173ac.naturalHeight != null) {
                      _0x29bae7 = _0x2173ac;
                    } else if (_0x2173ac) {
                      if (!(_0x2173ac = _0x236987.read(arguments)).isZero()) {
                        _0x29bae7 = _0xc9a63f.getCanvas(_0x2173ac);
                      }
                    }
                  }
                  if (_0x29bae7) {
                    this.setImage(_0x29bae7);
                  } else {
                    this.setSource(_0x58a642);
                  }
                }
                if (!this._size) {
                  this._size = new _0x236987();
                  this._loaded = false;
                }
              },
              _equals: function (_0x2d5b28) {
                return this.getSource() === _0x2d5b28.getSource();
              },
              copyContent: function (_0x35024a) {
                var _0x208eca = _0x35024a._image;
                var _0x50812d = _0x35024a._canvas;
                if (_0x208eca) {
                  this._setImage(_0x208eca);
                } else if (_0x50812d) {
                  (_0x208eca = _0xc9a63f.getCanvas(_0x35024a._size)).getContext("2d").drawImage(_0x50812d, 0, 0);
                  this._setImage(_0x208eca);
                }
                this._crossOrigin = _0x35024a._crossOrigin;
              },
              getSize: function () {
                var _0x187c5b = this._size;
                return new _0x29ac77(_0x187c5b ? _0x187c5b.width : 0, _0x187c5b ? _0x187c5b.height : 0, this, "setSize");
              },
              setSize: function (_0x2408b0, _0xe1537) {
                var _0x2ae36a;
                var _0x51949d = _0x236987.read(arguments);
                if (_0x51949d.equals(this._size)) {
                  if (_0xe1537) {
                    this.clear();
                  }
                } else if (_0x51949d.width > 0 && _0x51949d.height > 0) {
                  _0x2ae36a = !_0xe1537 && this.getElement();
                  this._setImage(_0xc9a63f.getCanvas(_0x51949d));
                  if (_0x2ae36a) {
                    this.getContext(true).drawImage(_0x2ae36a, 0, 0, _0x51949d.width, _0x51949d.height);
                  }
                } else {
                  if (this._canvas) {
                    _0xc9a63f.release(this._canvas);
                  }
                  this._size = _0x51949d.clone();
                }
              },
              getWidth: function () {
                if (this._size) {
                  return this._size.width;
                } else {
                  return 0;
                }
              },
              setWidth: function (_0x49db32) {
                this.setSize(_0x49db32, this.getHeight());
              },
              getHeight: function () {
                if (this._size) {
                  return this._size.height;
                } else {
                  return 0;
                }
              },
              setHeight: function (_0x3a294b) {
                this.setSize(this.getWidth(), _0x3a294b);
              },
              getLoaded: function () {
                return this._loaded;
              },
              isEmpty: function () {
                var _0x56ce15 = this._size;
                return !_0x56ce15 || _0x56ce15.width === 0 && _0x56ce15.height === 0;
              },
              getResolution: function () {
                var _0x4d6598 = this._matrix;
                var _0x389223 = new _0xbc5c4a(0, 0).transform(_0x4d6598);
                var _0x48d773 = new _0xbc5c4a(1, 0).transform(_0x4d6598).subtract(_0x389223);
                _0x389223 = new _0xbc5c4a(0, 1).transform(_0x4d6598).subtract(_0x389223);
                return new _0x236987(72 / _0x48d773.getLength(), 72 / _0x389223.getLength());
              },
              getPpi: "#getResolution",
              getImage: function () {
                return this._image;
              },
              setImage: function (_0x361baa) {
                var _0x3cd7f3 = this;
                function _0x24850e(_0x4c94c7) {
                  var _0x3cc082 = _0x3cd7f3.getView();
                  var _0x18078a = _0x4c94c7 && _0x4c94c7.type || "load";
                  if (_0x3cc082 && _0x3cd7f3.responds(_0x18078a)) {
                    _0x36d317 = _0x3cc082._scope;
                    _0x3cd7f3.emit(_0x18078a, new _0x59e435(_0x4c94c7));
                  }
                }
                this._setImage(_0x361baa);
                if (this._loaded) {
                  // TOLOOK
                  setTimeout(_0x24850e, 0);
                } else if (_0x361baa) {
                  _0x19df6d.add(_0x361baa, {
                    load: function (_0x5a299f) {
                      _0x3cd7f3._setImage(_0x361baa);
                      _0x24850e(_0x5a299f);
                    },
                    error: _0x24850e
                  });
                }
              },
              _setImage: function (_0x427ecf) {
                if (this._canvas) {
                  _0xc9a63f.release(this._canvas);
                }
                if (_0x427ecf && _0x427ecf.getContext) {
                  this._image = null;
                  this._canvas = _0x427ecf;
                  this._loaded = true;
                } else {
                  this._image = _0x427ecf;
                  this._canvas = null;
                  this._loaded = !!(_0x427ecf && _0x427ecf.src && _0x427ecf.complete);
                }
                this._size = new _0x236987(_0x427ecf ? _0x427ecf.naturalWidth || _0x427ecf.width : 0, _0x427ecf ? _0x427ecf.naturalHeight || _0x427ecf.height : 0);
                this._context = null;
                this._changed(1033);
              },
              getCanvas: function () {
                if (!this._canvas) {
                  var _0x5313e1 = _0xc9a63f.getContext(this._size);
                  try {
                    if (this._image) {
                      _0x5313e1.drawImage(this._image, 0, 0);
                    }
                    this._canvas = _0x5313e1.canvas;
                  } catch (_0x76342a) {
                    _0xc9a63f.release(_0x5313e1);
                  }
                }
                return this._canvas;
              },
              setCanvas: "#setImage",
              getContext: function (_0x31160a) {
                if (!this._context) {
                  this._context = this.getCanvas().getContext("2d");
                }
                if (_0x31160a) {
                  this._image = null;
                  this._changed(1025);
                }
                return this._context;
              },
              setContext: function (_0x6e5270) {
                this._context = _0x6e5270;
              },
              getSource: function () {
                var _0x5d06f4 = this._image;
                return _0x5d06f4 && _0x5d06f4.src || this.toDataURL("image/jpeg", 0.7);
              },
              setSource: function (_0x274a7c) {
                var _0x6a03f7 = new _0x536850.Image();
                var _0xec7114 = this._crossOrigin;
                if (_0xec7114) {
                  _0x6a03f7.crossOrigin = _0xec7114;
                }
                if (_0x274a7c) {
                  _0x6a03f7.src = _0x274a7c;
                }
                this.setImage(_0x6a03f7);
              },
              getCrossOrigin: function () {
                var _0x27766c = this._image;
                return _0x27766c && _0x27766c.crossOrigin || this._crossOrigin || "";
              },
              setCrossOrigin: function (_0x3c37e5) {
                this._crossOrigin = _0x3c37e5;
                var _0x5fad9 = this._image;
                if (_0x5fad9) {
                  _0x5fad9.crossOrigin = _0x3c37e5;
                }
              },
              getSmoothing: function () {
                return this._smoothing;
              },
              setSmoothing: function (_0x52315f) {
                this._smoothing = typeof _0x52315f == "string" ? _0x52315f : _0x52315f ? "low" : "off";
                this._changed(257);
              },
              getElement: function () {
                return this._canvas || this._loaded && this._image;
              }
            }, {
              beans: false,
              getSubCanvas: function () {
                var _0x53ad46 = _0x5384ce.read(arguments);
                var _0x573f8c = _0xc9a63f.getContext(_0x53ad46.getSize());
                _0x573f8c.drawImage(this.getCanvas(), _0x53ad46.x, _0x53ad46.y, _0x53ad46.width, _0x53ad46.height, 0, 0, _0x53ad46.width, _0x53ad46.height);
                return _0x573f8c.canvas;
              },
              getSubRaster: function () {
                var _0x150e24 = _0x5384ce.read(arguments);
                var _0x19d80a = new _0x10b4fc(_0x1f30bb.NO_INSERT);
                _0x19d80a._setImage(this.getSubCanvas(_0x150e24));
                _0x19d80a.translate(_0x150e24.getCenter().subtract(this.getSize().divide(2)));
                _0x19d80a._matrix.prepend(this._matrix);
                _0x19d80a.insertAbove(this);
                return _0x19d80a;
              },
              toDataURL: function () {
                var _0x3f681a = (_0x3f681a = this._image) && _0x3f681a.src;
                if (/^data:/.test(_0x3f681a)) {
                  return _0x3f681a;
                } else if (_0x3f681a = this.getCanvas()) {
                  return _0x3f681a.toDataURL.apply(_0x3f681a, arguments);
                } else {
                  return null;
                }
              },
              drawImage: function (_0x4ae5a7) {
                var _0x29def9 = _0xbc5c4a.read(arguments, 1);
                this.getContext(true).drawImage(_0x4ae5a7, _0x29def9.x, _0x29def9.y);
              },
              getAverageColor: function (_0x4b6dd0) {
                if (_0x4b6dd0) {
                  if (_0x4b6dd0 instanceof _0xfff515) {
                    _0xdad5f7 = (_0x360421 = _0x4b6dd0).getBounds();
                  } else if (typeof _0x4b6dd0 == "object") {
                    if ("width" in _0x4b6dd0) {
                      _0xdad5f7 = new _0x5384ce(_0x4b6dd0);
                    } else if ("x" in _0x4b6dd0) {
                      _0xdad5f7 = new _0x5384ce(_0x4b6dd0.x - 0.5, _0x4b6dd0.y - 0.5, 1, 1);
                    }
                  }
                } else {
                  _0xdad5f7 = this.getBounds();
                }
                if (!_0xdad5f7) {
                  return null;
                }
                var _0x3189cd = Math.min(_0xdad5f7.width, 32);
                var _0x289f17 = Math.min(_0xdad5f7.height, 32);
                if (_0x4b6dd0 = _0x10b4fc._sampleContext) {
                  _0x4b6dd0.clearRect(0, 0, 33, 33);
                } else {
                  _0x4b6dd0 = _0x10b4fc._sampleContext = _0xc9a63f.getContext(new _0x236987(32));
                }
                _0x4b6dd0.save();
                (_0xdad5f7 = new _0x1a5a7c().scale(_0x3189cd / _0xdad5f7.width, _0x289f17 / _0xdad5f7.height).translate(-_0xdad5f7.x, -_0xdad5f7.y)).applyToContext(_0x4b6dd0);
                if (_0x360421) {
                  _0x360421.draw(_0x4b6dd0, new _0x28b48a({
                    clip: true,
                    matrices: [_0xdad5f7]
                  }));
                }
                this._matrix.applyToContext(_0x4b6dd0);
                var _0x360421 = this.getElement();
                var _0xdad5f7 = this._size;
                if (_0x360421) {
                  _0x4b6dd0.drawImage(_0x360421, -_0xdad5f7.width / 2, -_0xdad5f7.height / 2);
                }
                _0x4b6dd0.restore();
                for (var _0x124fb4 = _0x4b6dd0.getImageData(0.5, 0.5, Math.ceil(_0x3189cd), Math.ceil(_0x289f17)).data, _0x1797cd = [0, 0, 0], _0x3e511f = 0, _0x308c92 = 0, _0x2b8218 = _0x124fb4.length; _0x308c92 < _0x2b8218; _0x308c92 += 4) {
                  var _0x48859e = _0x124fb4[_0x308c92 + 3];
                  _0x3e511f += _0x48859e;
                  _0x48859e /= 255;
                  _0x1797cd[0] += _0x124fb4[_0x308c92] * _0x48859e;
                  _0x1797cd[1] += _0x124fb4[_0x308c92 + 1] * _0x48859e;
                  _0x1797cd[2] += _0x124fb4[_0x308c92 + 2] * _0x48859e;
                }
                for (_0x308c92 = 0; _0x308c92 < 3; _0x308c92++) {
                  _0x1797cd[_0x308c92] /= _0x3e511f;
                }
                if (_0x3e511f) {
                  return _0x42fac4.read(_0x1797cd);
                } else {
                  return null;
                }
              },
              getPixel: function () {
                var _0x3fb67d = _0xbc5c4a.read(arguments);
                _0x3fb67d = this.getContext().getImageData(_0x3fb67d.x, _0x3fb67d.y, 1, 1).data;
                return new _0x42fac4("rgb", [_0x3fb67d[0] / 255, _0x3fb67d[1] / 255, _0x3fb67d[2] / 255], _0x3fb67d[3] / 255);
              },
              setPixel: function () {
                var _0x4e834d;
                var _0x43d624 = arguments;
                var _0x5c0aa7 = _0xbc5c4a.read(_0x43d624);
                var _0x42a29f = (_0x4e834d = _0x42fac4.read(_0x43d624))._convert("rgb");
                var _0x1187e2 = _0x4e834d._alpha;
                var _0x47a0b0 = this.getContext(true);
                (_0x4e834d = (_0x43d624 = _0x47a0b0.createImageData(1, 1)).data)[0] = _0x42a29f[0] * 255;
                _0x4e834d[1] = _0x42a29f[1] * 255;
                _0x4e834d[2] = _0x42a29f[2] * 255;
                _0x4e834d[3] = _0x1187e2 != null ? _0x1187e2 * 255 : 255;
                _0x47a0b0.putImageData(_0x43d624, _0x5c0aa7.x, _0x5c0aa7.y);
              },
              clear: function () {
                var _0x4b368b = this._size;
                this.getContext(true).clearRect(0, 0, _0x4b368b.width + 1, _0x4b368b.height + 1);
              },
              createImageData: function () {
                var _0x472c51 = _0x236987.read(arguments);
                return this.getContext().createImageData(_0x472c51.width, _0x472c51.height);
              },
              getImageData: function () {
                var _0x39d473 = _0x5384ce.read(arguments);
                if (_0x39d473.isEmpty()) {
                  _0x39d473 = new _0x5384ce(this._size);
                }
                return this.getContext().getImageData(_0x39d473.x, _0x39d473.y, _0x39d473.width, _0x39d473.height);
              },
              setImageData: function (_0x4646c0) {
                var _0x2a5e6e = _0xbc5c4a.read(arguments, 1);
                this.getContext(true).putImageData(_0x4646c0, _0x2a5e6e.x, _0x2a5e6e.y);
              },
              _getBounds: function (_0x17a322, _0x3e4133) {
                var _0x13c8fc = new _0x5384ce(this._size).setCenter(0, 0);
                if (_0x17a322) {
                  return _0x17a322._transformBounds(_0x13c8fc);
                } else {
                  return _0x13c8fc;
                }
              },
              _hitTestSelf: function (_0x2e554a) {
                if (this._contains(_0x2e554a)) {
                  var _0x4f6ceb = this;
                  return new _0xc7a363("pixel", _0x4f6ceb, {
                    offset: _0x2e554a.add(_0x4f6ceb._size.divide(2)).round(),
                    color: {
                      get: function () {
                        return _0x4f6ceb.getPixel(this.offset);
                      }
                    }
                  });
                }
              },
              _draw: function (_0x5f0084, _0x487ee6, _0x334455) {
                var _0x28549b = this.getElement();
                if (_0x28549b && _0x28549b.width > 0 && _0x28549b.height > 0) {
                  _0x5f0084.globalAlpha = _0x3c029b.clamp(this._opacity, 0, 1);
                  this._setStyles(_0x5f0084, _0x487ee6, _0x334455);
                  _0x487ee6 = this._smoothing;
                  _0x3c5bb5.setPrefixed(_0x5f0084, (_0x334455 = _0x487ee6 === "off") ? "imageSmoothingEnabled" : "imageSmoothingQuality", !_0x334455 && _0x487ee6);
                  _0x5f0084.drawImage(_0x28549b, -this._size.width / 2, -this._size.height / 2);
                }
              },
              _canComposite: function () {
                return true;
              }
            });
            var _0x34220f = _0x1f30bb.extend({
              _class: "SymbolItem",
              _applyMatrix: false,
              _canApplyMatrix: false,
              _boundsOptions: {
                stroke: true
              },
              _serializeFields: {
                symbol: null
              },
              initialize: function (_0x109edd, _0x2455f3) {
                if (!this._initialize(_0x109edd, _0x2455f3 !== _0x2bd7be && _0xbc5c4a.read(arguments, 1))) {
                  this.setDefinition(_0x109edd instanceof _0x365352 ? _0x109edd : new _0x365352(_0x109edd));
                }
              },
              _equals: function (_0x3d7dae) {
                return this._definition === _0x3d7dae._definition;
              },
              copyContent: function (_0x2f1c54) {
                this.setDefinition(_0x2f1c54._definition);
              },
              getDefinition: function () {
                return this._definition;
              },
              setDefinition: function (_0x3a6676) {
                this._definition = _0x3a6676;
                this._changed(9);
              },
              getSymbol: "#getDefinition",
              setSymbol: "#setDefinition",
              isEmpty: function () {
                return this._definition._item.isEmpty();
              },
              _getBounds: function (_0x1c7c7b, _0x3cf6af) {
                var _0x2a82d9 = this._definition._item;
                return _0x2a82d9._getCachedBounds(_0x2a82d9._matrix.prepended(_0x1c7c7b), _0x3cf6af);
              },
              _hitTestSelf: function (_0x2f897b, _0x3ede12, _0x1c0ba6) {
                _0x3ede12 = _0x3ede12.extend({
                  all: false
                });
                if (_0x1c0ba6 = this._definition._item._hitTest(_0x2f897b, _0x3ede12, _0x1c0ba6)) {
                  _0x1c0ba6.item = this;
                }
                return _0x1c0ba6;
              },
              _draw: function (_0x536318, _0x13d867) {
                this._definition._item.draw(_0x536318, _0x13d867);
              }
            });
            var _0x365352 = _0x28b48a.extend({
              _class: "SymbolDefinition",
              initialize: function (_0x640dce, _0x4f6559) {
                this._id = _0x2231b4.get();
                this.project = _0x36d317.project;
                if (_0x640dce) {
                  this.setItem(_0x640dce, _0x4f6559);
                }
              },
              _serialize: function (_0x23266f, _0x4ef237) {
                return _0x4ef237.add(this, function () {
                  return _0x28b48a.serialize([this._class, this._item], _0x23266f, false, _0x4ef237);
                });
              },
              _changed: function (_0x305ca6) {
                if (_0x305ca6 & 8) {
                  _0x1f30bb._clearBoundsCache(this);
                }
                if (_0x305ca6 & 1) {
                  this.project._changed(_0x305ca6);
                }
              },
              getItem: function () {
                return this._item;
              },
              setItem: function (_0x27e863, _0x5c41bd) {
                if (_0x27e863._symbol) {
                  _0x27e863 = _0x27e863.clone();
                }
                if (this._item) {
                  this._item._symbol = null;
                }
                (this._item = _0x27e863).remove();
                _0x27e863.setSelected(false);
                if (!_0x5c41bd) {
                  _0x27e863.setPosition(new _0xbc5c4a());
                }
                (_0x27e863._symbol = this)._changed(9);
              },
              getDefinition: "#getItem",
              setDefinition: "#setItem",
              place: function (_0x650069) {
                return new _0x34220f(this, _0x650069);
              },
              clone: function () {
                return new _0x365352(this._item.clone(false));
              },
              equals: function (_0x52a5d2) {
                return _0x52a5d2 === this || _0x52a5d2 && this._item.equals(_0x52a5d2._item) || false;
              }
            });
            var _0xc7a363 = _0x28b48a.extend({
              _class: "HitResult",
              initialize: function (_0x206f6f, _0x11137f, _0x13997f) {
                this.type = _0x206f6f;
                this.item = _0x11137f;
                if (_0x13997f) {
                  this.inject(_0x13997f);
                }
              },
              statics: {
                getOptions: function (_0x167664) {
                  _0x167664 = _0x167664 && _0x28b48a.read(_0x167664);
                  return new _0x28b48a({
                    type: null,
                    tolerance: _0x36d317.settings.hitTolerance,
                    fill: !_0x167664,
                    stroke: !_0x167664,
                    segments: !_0x167664,
                    handles: false,
                    ends: false,
                    position: false,
                    center: false,
                    bounds: false,
                    guides: false,
                    selected: false
                  }, _0x167664);
                }
              }
            });
            var _0x2657e4 = _0x28b48a.extend({
              _class: "Segment",
              beans: true,
              _selection: 0,
              initialize: function (_0xfd7c08, _0x344355, _0x240880, _0x7a9e58, _0x5336f4, _0x3f1ded) {
                var _0x13ee72;
                var _0x1d81fb;
                var _0x590703;
                var _0x1bc9ec;
                var _0x57c94a = arguments.length;
                if (_0x57c94a > 0) {
                  if (_0xfd7c08 == null || typeof _0xfd7c08 == "object") {
                    _0x1bc9ec = _0x57c94a === 1 && _0xfd7c08 && "point" in _0xfd7c08 ? (_0x13ee72 = _0xfd7c08.point, _0x1d81fb = _0xfd7c08.handleIn, _0x590703 = _0xfd7c08.handleOut, _0xfd7c08.selection) : (_0x13ee72 = _0xfd7c08, _0x1d81fb = _0x344355, _0x590703 = _0x240880, _0x7a9e58);
                  } else {
                    _0x13ee72 = [_0xfd7c08, _0x344355];
                    _0x1d81fb = _0x240880 !== _0x2bd7be ? [_0x240880, _0x7a9e58] : null;
                    _0x590703 = _0x5336f4 !== _0x2bd7be ? [_0x5336f4, _0x3f1ded] : null;
                  }
                }
                new _0x5023b0(_0x13ee72, this, "_point");
                new _0x5023b0(_0x1d81fb, this, "_handleIn");
                new _0x5023b0(_0x590703, this, "_handleOut");
                if (_0x1bc9ec) {
                  this.setSelection(_0x1bc9ec);
                }
              },
              _serialize: function (_0x32a88c, _0x34316f) {
                var _0x2ecee7 = this._point;
                var _0x572b59 = this._selection;
                _0x2ecee7 = _0x572b59 || this.hasHandles() ? [_0x2ecee7, this._handleIn, this._handleOut] : _0x2ecee7;
                if (_0x572b59) {
                  _0x2ecee7.push(_0x572b59);
                }
                return _0x28b48a.serialize(_0x2ecee7, _0x32a88c, true, _0x34316f);
              },
              _changed: function (_0x11e497) {
                var _0x1c9bcd;
                var _0x4d66ea;
                var _0x350145;
                var _0x28eda1 = this._path;
                if (_0x28eda1) {
                  _0x1c9bcd = _0x28eda1._curves;
                  _0x4d66ea = this._index;
                  if (_0x1c9bcd) {
                    if (!(_0x11e497 && _0x11e497 !== this._point && _0x11e497 !== this._handleIn || !(_0x350145 = _0x4d66ea > 0 ? _0x1c9bcd[_0x4d66ea - 1] : _0x28eda1._closed ? _0x1c9bcd[_0x1c9bcd.length - 1] : null))) {
                      _0x350145._changed();
                    }
                    if (!(_0x11e497 && _0x11e497 !== this._point && _0x11e497 !== this._handleOut || !(_0x350145 = _0x1c9bcd[_0x4d66ea]))) {
                      _0x350145._changed();
                    }
                  }
                  _0x28eda1._changed(41);
                }
              },
              getPoint: function () {
                return this._point;
              },
              setPoint: function () {
                this._point.set(_0xbc5c4a.read(arguments));
              },
              getHandleIn: function () {
                return this._handleIn;
              },
              setHandleIn: function () {
                this._handleIn.set(_0xbc5c4a.read(arguments));
              },
              getHandleOut: function () {
                return this._handleOut;
              },
              setHandleOut: function () {
                this._handleOut.set(_0xbc5c4a.read(arguments));
              },
              hasHandles: function () {
                return !this._handleIn.isZero() || !this._handleOut.isZero();
              },
              isSmooth: function () {
                var _0x5bff0d = this._handleIn;
                var _0x7291bc = this._handleOut;
                return !_0x5bff0d.isZero() && !_0x7291bc.isZero() && _0x5bff0d.isCollinear(_0x7291bc);
              },
              clearHandles: function () {
                this._handleIn._set(0, 0);
                this._handleOut._set(0, 0);
              },
              getSelection: function () {
                return this._selection;
              },
              setSelection: function (_0x25030b) {
                var _0x5c4383 = this._selection;
                var _0x234c8c = this._path;
                this._selection = _0x25030b = _0x25030b || 0;
                if (_0x234c8c && _0x25030b !== _0x5c4383) {
                  _0x234c8c._updateSelection(this, _0x5c4383, _0x25030b);
                  _0x234c8c._changed(257);
                }
              },
              _changeSelection: function (_0x3bb2b0, _0x1e2f4b) {
                var _0x4013fd = this._selection;
                this.setSelection(_0x1e2f4b ? _0x4013fd | _0x3bb2b0 : _0x4013fd & ~_0x3bb2b0);
              },
              isSelected: function () {
                return !!(this._selection & 7);
              },
              setSelected: function (_0x4a3433) {
                this._changeSelection(7, _0x4a3433);
              },
              getIndex: function () {
                if (this._index !== _0x2bd7be) {
                  return this._index;
                } else {
                  return null;
                }
              },
              getPath: function () {
                return this._path || null;
              },
              getCurve: function () {
                var _0x57297f = this._path;
                var _0x16b0e7 = this._index;
                if (_0x57297f) {
                  if (_0x16b0e7 > 0 && !_0x57297f._closed && _0x16b0e7 === _0x57297f._segments.length - 1) {
                    _0x16b0e7--;
                  }
                  return _0x57297f.getCurves()[_0x16b0e7] || null;
                } else {
                  return null;
                }
              },
              getLocation: function () {
                var _0x14a893 = this.getCurve();
                if (_0x14a893) {
                  return new _0x27f88f(_0x14a893, this === _0x14a893._segment1 ? 0 : 1);
                } else {
                  return null;
                }
              },
              getNext: function () {
                var _0x18ce48 = this._path && this._path._segments;
                return _0x18ce48 && (_0x18ce48[this._index + 1] || this._path._closed && _0x18ce48[0]) || null;
              },
              smooth: function (_0x103894, _0x5468e5, _0x2badec) {
                var _0x2d50c9 = _0x103894 || {};
                var _0x57dce1 = _0x2d50c9.type;
                var _0x276547 = _0x2d50c9.factor;
                var _0x37ea1f = this.getPrevious();
                var _0x160fe6 = this.getNext();
                var _0x2572ee = (_0x37ea1f || this)._point;
                var _0x56b60c = this._point;
                var _0x581e2a = (_0x160fe6 || this)._point;
                var _0x407304 = _0x2572ee.getDistance(_0x56b60c);
                _0x103894 = _0x56b60c.getDistance(_0x581e2a);
                if (_0x57dce1 && _0x57dce1 !== "catmull-rom") {
                  if (_0x57dce1 !== "geometric") {
                    throw new Error(".......");
                  }
                  if (_0x37ea1f && _0x160fe6) {
                    _0x2d50c9 = _0x2572ee.subtract(_0x581e2a);
                    _0x57dce1 = (_0x2193ad = _0x276547 === _0x2bd7be ? 0.4 : _0x276547) * _0x407304 / (_0x407304 + _0x103894);
                    if (!_0x5468e5) {
                      this.setHandleIn(_0x2d50c9.multiply(_0x57dce1));
                    }
                    if (!_0x2badec) {
                      this.setHandleOut(_0x2d50c9.multiply(_0x57dce1 - _0x2193ad));
                    }
                  }
                } else {
                  var _0x38d925;
                  var _0x48e4c1;
                  var _0x2193ad = _0x276547 === _0x2bd7be ? 0.5 : _0x276547;
                  _0x407304 = (_0x276547 = Math.pow(_0x407304, _0x2193ad)) * _0x276547;
                  _0x2193ad = (_0x103894 = Math.pow(_0x103894, _0x2193ad)) * _0x103894;
                  if (!_0x5468e5 && _0x37ea1f) {
                    _0x38d925 = _0x2193ad * 2 + _0x103894 * 3 * _0x276547 + _0x407304;
                    this.setHandleIn((_0x48e4c1 = _0x103894 * 3 * (_0x103894 + _0x276547)) != 0 ? new _0xbc5c4a((_0x2193ad * _0x2572ee._x + _0x38d925 * _0x56b60c._x - _0x407304 * _0x581e2a._x) / _0x48e4c1 - _0x56b60c._x, (_0x2193ad * _0x2572ee._y + _0x38d925 * _0x56b60c._y - _0x407304 * _0x581e2a._y) / _0x48e4c1 - _0x56b60c._y) : new _0xbc5c4a());
                  }
                  if (!_0x2badec && _0x160fe6) {
                    _0x38d925 = _0x407304 * 2 + _0x276547 * 3 * _0x103894 + _0x2193ad;
                    this.setHandleOut((_0x48e4c1 = _0x276547 * 3 * (_0x276547 + _0x103894)) != 0 ? new _0xbc5c4a((_0x407304 * _0x581e2a._x + _0x38d925 * _0x56b60c._x - _0x2193ad * _0x2572ee._x) / _0x48e4c1 - _0x56b60c._x, (_0x407304 * _0x581e2a._y + _0x38d925 * _0x56b60c._y - _0x2193ad * _0x2572ee._y) / _0x48e4c1 - _0x56b60c._y) : new _0xbc5c4a());
                  }
                }
              },
              getPrevious: function () {
                var _0x28ac86 = this._path && this._path._segments;
                return _0x28ac86 && (_0x28ac86[this._index - 1] || this._path._closed && _0x28ac86[_0x28ac86.length - 1]) || null;
              },
              isFirst: function () {
                return !this._index;
              },
              isLast: function () {
                var _0x5930d1 = this._path;
                return _0x5930d1 && this._index === _0x5930d1._segments.length - 1 || false;
              },
              reverse: function () {
                var _0x5ddbd2 = this._handleIn;
                var _0x4eef46 = this._handleOut;
                var _0x589709 = _0x5ddbd2.clone();
                _0x5ddbd2.set(_0x4eef46);
                _0x4eef46.set(_0x589709);
              },
              reversed: function () {
                return new _0x2657e4(this._point, this._handleOut, this._handleIn);
              },
              remove: function () {
                return !!this._path && !!this._path.removeSegment(this._index);
              },
              clone: function () {
                return new _0x2657e4(this._point, this._handleIn, this._handleOut);
              },
              equals: function (_0xabfa22) {
                return _0xabfa22 === this || _0xabfa22 && this._class === _0xabfa22._class && this._point.equals(_0xabfa22._point) && this._handleIn.equals(_0xabfa22._handleIn) && this._handleOut.equals(_0xabfa22._handleOut) || false;
              },
              toString: function () {
                var _0x158af0 = ["point: " + this._point];
                if (!this._handleIn.isZero()) {
                  _0x158af0.push("handleIn: " + this._handleIn);
                }
                if (!this._handleOut.isZero()) {
                  _0x158af0.push("handleOut: " + this._handleOut);
                }
                return "{ " + _0x158af0.join(", ") + " }";
              },
              transform: function (_0x11acf9) {
                this._transformCoordinates(_0x11acf9, new Array(6), true);
                this._changed();
              },
              interpolate: function (_0x3bf50e, _0x44589e, _0x22b059) {
                var _0x432ca3 = 1 - _0x22b059;
                var _0x3ea65e = _0x22b059;
                var _0x207f0e = _0x3bf50e._point;
                var _0x1e2711 = _0x44589e._point;
                var _0x41e987 = _0x3bf50e._handleIn;
                _0x22b059 = _0x44589e._handleIn;
                _0x44589e = _0x44589e._handleOut;
                _0x3bf50e = _0x3bf50e._handleOut;
                this._point._set(_0x432ca3 * _0x207f0e._x + _0x3ea65e * _0x1e2711._x, _0x432ca3 * _0x207f0e._y + _0x3ea65e * _0x1e2711._y, true);
                this._handleIn._set(_0x432ca3 * _0x41e987._x + _0x3ea65e * _0x22b059._x, _0x432ca3 * _0x41e987._y + _0x3ea65e * _0x22b059._y, true);
                this._handleOut._set(_0x432ca3 * _0x3bf50e._x + _0x3ea65e * _0x44589e._x, _0x432ca3 * _0x3bf50e._y + _0x3ea65e * _0x44589e._y, true);
                this._changed();
              },
              _transformCoordinates: function (_0x3cfccf, _0x54c6c5, _0x3ed989) {
                var _0x4d6a67 = this._point;
                var _0x4a84b5 = _0x3ed989 && this._handleIn.isZero() ? null : this._handleIn;
                var _0x2eb983 = _0x3ed989 && this._handleOut.isZero() ? null : this._handleOut;
                var _0x4ceeed = _0x4d6a67._x;
                var _0x4196c9 = _0x4d6a67._y;
                var _0x2487d8 = 2;
                _0x54c6c5[0] = _0x4ceeed;
                _0x54c6c5[1] = _0x4196c9;
                if (_0x4a84b5) {
                  _0x54c6c5[_0x2487d8++] = _0x4a84b5._x + _0x4ceeed;
                  _0x54c6c5[_0x2487d8++] = _0x4a84b5._y + _0x4196c9;
                }
                if (_0x2eb983) {
                  _0x54c6c5[_0x2487d8++] = _0x2eb983._x + _0x4ceeed;
                  _0x54c6c5[_0x2487d8++] = _0x2eb983._y + _0x4196c9;
                }
                if (_0x3cfccf) {
                  _0x3cfccf._transformCoordinates(_0x54c6c5, _0x54c6c5, _0x2487d8 / 2);
                  _0x4ceeed = _0x54c6c5[0];
                  _0x4196c9 = _0x54c6c5[1];
                  if (_0x3ed989) {
                    _0x4d6a67._x = _0x4ceeed;
                    _0x4d6a67._y = _0x4196c9;
                    _0x2487d8 = 2;
                    if (_0x4a84b5) {
                      _0x4a84b5._x = _0x54c6c5[_0x2487d8++] - _0x4ceeed;
                      _0x4a84b5._y = _0x54c6c5[_0x2487d8++] - _0x4196c9;
                    }
                    if (_0x2eb983) {
                      _0x2eb983._x = _0x54c6c5[_0x2487d8++] - _0x4ceeed;
                      _0x2eb983._y = _0x54c6c5[_0x2487d8++] - _0x4196c9;
                    }
                  } else {
                    if (!_0x4a84b5) {
                      _0x54c6c5[_0x2487d8++] = _0x4ceeed;
                      _0x54c6c5[_0x2487d8++] = _0x4196c9;
                    }
                    if (!_0x2eb983) {
                      _0x54c6c5[_0x2487d8++] = _0x4ceeed;
                      _0x54c6c5[_0x2487d8++] = _0x4196c9;
                    }
                  }
                }
                return _0x54c6c5;
              }
            });
            var _0x5023b0 = _0xbc5c4a.extend({
              initialize: function (_0x5a50dd, _0xaccf75, _0x583cb2) {
                var _0x59de11;
                var _0x34fc8a;
                var _0x5374e0;
                if (_0x5a50dd) {
                  if ((_0x59de11 = _0x5a50dd[0]) !== _0x2bd7be) {
                    _0x34fc8a = _0x5a50dd[1];
                  } else {
                    if ((_0x59de11 = (_0x5374e0 = _0x5a50dd).x) === _0x2bd7be) {
                      _0x59de11 = (_0x5374e0 = _0xbc5c4a.read(arguments)).x;
                    }
                    _0x34fc8a = _0x5374e0.y;
                    _0x5374e0 = _0x5374e0.selected;
                  }
                } else {
                  _0x59de11 = _0x34fc8a = 0;
                }
                this._x = _0x59de11;
                this._y = _0x34fc8a;
                (this._owner = _0xaccf75)[_0x583cb2] = this;
                if (_0x5374e0) {
                  this.setSelected(true);
                }
              },
              _set: function (_0x2bc3d5, _0x277707) {
                this._x = _0x2bc3d5;
                this._y = _0x277707;
                this._owner._changed(this);
                return this;
              },
              getX: function () {
                return this._x;
              },
              setX: function (_0x41aa5b) {
                this._x = _0x41aa5b;
                this._owner._changed(this);
              },
              getY: function () {
                return this._y;
              },
              setY: function (_0x5552b7) {
                this._y = _0x5552b7;
                this._owner._changed(this);
              },
              isZero: function () {
                var _0x12d61d = _0x3c029b.isZero;
                return _0x12d61d(this._x) && _0x12d61d(this._y);
              },
              isSelected: function () {
                return !!(this._owner._selection & this._getSelection());
              },
              setSelected: function (_0x5df667) {
                this._owner._changeSelection(this._getSelection(), _0x5df667);
              },
              _getSelection: function () {
                var _0x449366 = this._owner;
                if (this === _0x449366._point) {
                  return 1;
                } else if (this === _0x449366._handleIn) {
                  return 2;
                } else if (this === _0x449366._handleOut) {
                  return 4;
                } else {
                  return 0;
                }
              }
            });
            var _0x53ec04 = _0x28b48a.extend({
              _class: "Curve",
              beans: true,
              initialize: function (_0x58365b, _0x497465, _0x1eb082, _0x30109e, _0x176dcc, _0x35f5a8, _0x3f433c, _0x53acd2) {
                var _0x1cefd4;
                var _0x38db93;
                var _0x17857d;
                var _0x5a3730;
                var _0x44a2bb;
                var _0x4b7b00;
                var _0x24f791 = arguments.length;
                if (_0x24f791 === 3) {
                  this._path = _0x58365b;
                  _0x1cefd4 = _0x497465;
                  _0x38db93 = _0x1eb082;
                } else if (_0x24f791) {
                  if (_0x24f791 === 1) {
                    if ("segment1" in _0x58365b) {
                      _0x1cefd4 = new _0x2657e4(_0x58365b.segment1);
                      _0x38db93 = new _0x2657e4(_0x58365b.segment2);
                    } else if ("point1" in _0x58365b) {
                      _0x17857d = _0x58365b.point1;
                      _0x44a2bb = _0x58365b.handle1;
                      _0x4b7b00 = _0x58365b.handle2;
                      _0x5a3730 = _0x58365b.point2;
                    } else if (Array.isArray(_0x58365b)) {
                      _0x17857d = [_0x58365b[0], _0x58365b[1]];
                      _0x5a3730 = [_0x58365b[6], _0x58365b[7]];
                      _0x44a2bb = [_0x58365b[2] - _0x58365b[0], _0x58365b[3] - _0x58365b[1]];
                      _0x4b7b00 = [_0x58365b[4] - _0x58365b[6], _0x58365b[5] - _0x58365b[7]];
                    }
                  } else if (_0x24f791 === 2) {
                    _0x1cefd4 = new _0x2657e4(_0x58365b);
                    _0x38db93 = new _0x2657e4(_0x497465);
                  } else if (_0x24f791 === 4) {
                    _0x17857d = _0x58365b;
                    _0x44a2bb = _0x497465;
                    _0x4b7b00 = _0x1eb082;
                    _0x5a3730 = _0x30109e;
                  } else if (_0x24f791 === 8) {
                    _0x17857d = [_0x58365b, _0x497465];
                    _0x5a3730 = [_0x3f433c, _0x53acd2];
                    _0x44a2bb = [_0x1eb082 - _0x58365b, _0x30109e - _0x497465];
                    _0x4b7b00 = [_0x176dcc - _0x3f433c, _0x35f5a8 - _0x53acd2];
                  }
                } else {
                  _0x1cefd4 = new _0x2657e4();
                  _0x38db93 = new _0x2657e4();
                }
                this._segment1 = _0x1cefd4 || new _0x2657e4(_0x17857d, null, _0x44a2bb);
                this._segment2 = _0x38db93 || new _0x2657e4(_0x5a3730, _0x4b7b00, null);
              },
              _serialize: function (_0x145b9c, _0x4b5fee) {
                return _0x28b48a.serialize(this.hasHandles() ? [this.getPoint1(), this.getHandle1(), this.getHandle2(), this.getPoint2()] : [this.getPoint1(), this.getPoint2()], _0x145b9c, true, _0x4b5fee);
              },
              _changed: function () {
                this._length = this._bounds = _0x2bd7be;
              },
              clone: function () {
                return new _0x53ec04(this._segment1, this._segment2);
              },
              toString: function () {
                var _0x87aeb2 = ["point1: " + this._segment1._point];
                if (!this._segment1._handleOut.isZero()) {
                  _0x87aeb2.push("handle1: " + this._segment1._handleOut);
                }
                if (!this._segment2._handleIn.isZero()) {
                  _0x87aeb2.push("handle2: " + this._segment2._handleIn);
                }
                _0x87aeb2.push("point2: " + this._segment2._point);
                return "{ " + _0x87aeb2.join(", ") + " }";
              },
              classify: function () {
                return _0x53ec04.classify(this.getValues());
              },
              remove: function () {
                var _0x2f09a6;
                var _0x4f5313;
                var _0x45fd70 = false;
                if (this._path) {
                  _0x4f5313 = (_0x2f09a6 = this._segment2)._handleOut;
                  if (_0x45fd70 = _0x2f09a6.remove()) {
                    this._segment1._handleOut.set(_0x4f5313);
                  }
                }
                return _0x45fd70;
              },
              getPoint1: function () {
                return this._segment1._point;
              },
              setPoint1: function () {
                this._segment1._point.set(_0xbc5c4a.read(arguments));
              },
              getPoint2: function () {
                return this._segment2._point;
              },
              setPoint2: function () {
                this._segment2._point.set(_0xbc5c4a.read(arguments));
              },
              getHandle1: function () {
                return this._segment1._handleOut;
              },
              setHandle1: function () {
                this._segment1._handleOut.set(_0xbc5c4a.read(arguments));
              },
              getHandle2: function () {
                return this._segment2._handleIn;
              },
              setHandle2: function () {
                this._segment2._handleIn.set(_0xbc5c4a.read(arguments));
              },
              getSegment1: function () {
                return this._segment1;
              },
              getSegment2: function () {
                return this._segment2;
              },
              getPath: function () {
                return this._path;
              },
              getIndex: function () {
                return this._segment1._index;
              },
              getNext: function () {
                var _0x430064 = this._path && this._path._curves;
                return _0x430064 && (_0x430064[this._segment1._index + 1] || this._path._closed && _0x430064[0]) || null;
              },
              getPrevious: function () {
                var _0x4dc720 = this._path && this._path._curves;
                return _0x4dc720 && (_0x4dc720[this._segment1._index - 1] || this._path._closed && _0x4dc720[_0x4dc720.length - 1]) || null;
              },
              isFirst: function () {
                return !this._segment1._index;
              },
              isLast: function () {
                var _0x581020 = this._path;
                return _0x581020 && this._segment1._index === _0x581020._curves.length - 1 || false;
              },
              isSelected: function () {
                return this.getPoint1().isSelected() && this.getHandle1().isSelected() && this.getHandle2().isSelected() && this.getPoint2().isSelected();
              },
              setSelected: function (_0x5a1d7f) {
                this.getPoint1().setSelected(_0x5a1d7f);
                this.getHandle1().setSelected(_0x5a1d7f);
                this.getHandle2().setSelected(_0x5a1d7f);
                this.getPoint2().setSelected(_0x5a1d7f);
              },
              getValues: function (_0x1bded8) {
                return _0x53ec04.getValues(this._segment1, this._segment2, _0x1bded8);
              },
              getPoints: function () {
                for (var _0x2ff8f0 = this.getValues(), _0x3dc290 = [], _0x387572 = 0; _0x387572 < 8; _0x387572 += 2) {
                  _0x3dc290.push(new _0xbc5c4a(_0x2ff8f0[_0x387572], _0x2ff8f0[_0x387572 + 1]));
                }
                return _0x3dc290;
              }
            }, {
              getLength: function () {
                if (this._length == null) {
                  this._length = _0x53ec04.getLength(this.getValues(), 0, 1);
                }
                return this._length;
              },
              getArea: function () {
                return _0x53ec04.getArea(this.getValues());
              },
              getLine: function () {
                return new _0x170222(this._segment1._point, this._segment2._point);
              },
              getPart: function (_0x5a00be, _0x523e48) {
                return new _0x53ec04(_0x53ec04.getPart(this.getValues(), _0x5a00be, _0x523e48));
              },
              getPartLength: function (_0x27fc10, _0x3e5bf1) {
                return _0x53ec04.getLength(this.getValues(), _0x27fc10, _0x3e5bf1);
              },
              divideAt: function (_0x4c5f38) {
                return this.divideAtTime(_0x4c5f38 && _0x4c5f38.curve === this ? _0x4c5f38.time : this.getTimeAt(_0x4c5f38));
              },
              divideAtTime: function (_0x53e62d, _0x42257e) {
                var _0x22be85;
                var _0x49aba7;
                var _0x2d4930;
                var _0x1fe806;
                var _0x225082;
                var _0x346480;
                var _0x365024 = null;
                if (_0x53e62d >= 1e-8 && _0x53e62d <= 0.99999999) {
                  _0x22be85 = (_0x346480 = _0x53ec04.subdivide(this.getValues(), _0x53e62d))[0];
                  _0x49aba7 = _0x346480[1];
                  _0x2d4930 = _0x42257e || this.hasHandles();
                  _0x1fe806 = this._segment1;
                  _0x225082 = this._segment2;
                  _0x53e62d = this._path;
                  if (_0x2d4930) {
                    _0x1fe806._handleOut._set(_0x22be85[2] - _0x22be85[0], _0x22be85[3] - _0x22be85[1]);
                    _0x225082._handleIn._set(_0x49aba7[4] - _0x49aba7[6], _0x49aba7[5] - _0x49aba7[7]);
                  }
                  _0x346480 = _0x22be85[6];
                  _0x42257e = _0x22be85[7];
                  _0x42257e = new _0x2657e4(new _0xbc5c4a(_0x346480, _0x42257e), _0x2d4930 && new _0xbc5c4a(_0x22be85[4] - _0x346480, _0x22be85[5] - _0x42257e), _0x2d4930 && new _0xbc5c4a(_0x49aba7[2] - _0x346480, _0x49aba7[3] - _0x42257e));
                  _0x365024 = _0x53e62d ? (_0x53e62d.insert(_0x1fe806._index + 1, _0x42257e), this.getNext()) : (this._segment2 = _0x42257e, this._changed(), new _0x53ec04(_0x42257e, _0x225082));
                }
                return _0x365024;
              },
              splitAt: function (_0x1c95c4) {
                var _0x5116e8 = this._path;
                if (_0x5116e8) {
                  return _0x5116e8.splitAt(_0x1c95c4);
                } else {
                  return null;
                }
              },
              splitAtTime: function (_0x33fdc6) {
                return this.splitAt(this.getLocationAtTime(_0x33fdc6));
              },
              divide: function (_0x2e2bab, _0x32118c) {
                return this.divideAtTime(_0x2e2bab === _0x2bd7be ? 0.5 : _0x32118c ? _0x2e2bab : this.getTimeAt(_0x2e2bab));
              },
              split: function (_0x5c5f51, _0x1e0861) {
                return this.splitAtTime(_0x5c5f51 === _0x2bd7be ? 0.5 : _0x1e0861 ? _0x5c5f51 : this.getTimeAt(_0x5c5f51));
              },
              reversed: function () {
                return new _0x53ec04(this._segment2.reversed(), this._segment1.reversed());
              },
              clearHandles: function () {
                this._segment1._handleOut._set(0, 0);
                this._segment2._handleIn._set(0, 0);
              },
              statics: {
                getValues: function (_0x980520, _0x5b449b, _0x1c96d0, _0x1d2109) {
                  var _0x31fe5f = _0x980520._point;
                  var _0x25c3a1 = _0x980520._handleOut;
                  var _0x250677 = _0x5b449b._handleIn;
                  var _0x2efa7e = _0x5b449b._point;
                  _0x980520 = _0x31fe5f.x;
                  _0x5b449b = _0x31fe5f.y;
                  _0x31fe5f = _0x2efa7e.x;
                  _0x2efa7e = _0x2efa7e.y;
                  _0x2efa7e = _0x1d2109 ? [_0x980520, _0x5b449b, _0x980520, _0x5b449b, _0x31fe5f, _0x2efa7e, _0x31fe5f, _0x2efa7e] : [_0x980520, _0x5b449b, _0x980520 + _0x25c3a1._x, _0x5b449b + _0x25c3a1._y, _0x31fe5f + _0x250677._x, _0x2efa7e + _0x250677._y, _0x31fe5f, _0x2efa7e];
                  if (_0x1c96d0) {
                    _0x1c96d0._transformCoordinates(_0x2efa7e, _0x2efa7e, 4);
                  }
                  return _0x2efa7e;
                },
                subdivide: function (_0x263104, _0x1942f0) {
                  var _0x1eadb0 = _0x263104[0];
                  var _0x22b7a5 = _0x263104[1];
                  var _0x5db5b4 = _0x263104[2];
                  var _0x45c985 = _0x263104[3];
                  var _0x45bd35 = _0x263104[4];
                  var _0x2a8a93 = _0x263104[5];
                  var _0x25be74 = _0x263104[6];
                  var _0x56137b = _0x263104[7];
                  var _0x1b71e0 = 1 - (_0x1942f0 = _0x1942f0 === _0x2bd7be ? 0.5 : _0x1942f0);
                  var _0xf4a42e = _0x1b71e0 * _0x1eadb0 + _0x1942f0 * _0x5db5b4;
                  var _0x67c86f = _0x1b71e0 * _0x22b7a5 + _0x1942f0 * _0x45c985;
                  var _0x25fe41 = _0x1b71e0 * _0x5db5b4 + _0x1942f0 * _0x45bd35;
                  var _0x40b85e = _0x1b71e0 * _0x45c985 + _0x1942f0 * _0x2a8a93;
                  _0x5db5b4 = _0x1b71e0 * _0x2a8a93 + _0x1942f0 * _0x56137b;
                  _0x45c985 = _0x1b71e0 * _0xf4a42e + _0x1942f0 * _0x25fe41;
                  _0x2a8a93 = _0x1b71e0 * _0x25fe41 + _0x1942f0 * (_0x263104 = _0x1b71e0 * _0x45bd35 + _0x1942f0 * _0x25be74);
                  _0x25fe41 = _0x1b71e0 * _0x40b85e + _0x1942f0 * _0x5db5b4;
                  return [[_0x1eadb0, _0x22b7a5, _0xf4a42e, _0x67c86f, _0x45c985, _0x45bd35 = _0x1b71e0 * _0x67c86f + _0x1942f0 * _0x40b85e, _0x40b85e = _0x1b71e0 * _0x45c985 + _0x1942f0 * _0x2a8a93, _0x1942f0 = _0x1b71e0 * _0x45bd35 + _0x1942f0 * _0x25fe41], [_0x40b85e, _0x1942f0, _0x2a8a93, _0x25fe41, _0x263104, _0x5db5b4, _0x25be74, _0x56137b]];
                },
                getMonoCurves: function (_0x455c5c, _0x29cce5) {
                  var _0x561940;
                  var _0xf1e550;
                  var _0x1f1236 = [];
                  var _0x2d9211 = _0x455c5c[0 + (_0x444fd1 = _0x29cce5 ? 0 : 1)];
                  var _0x496a21 = _0x455c5c[2 + _0x444fd1];
                  _0x29cce5 = _0x455c5c[4 + _0x444fd1];
                  var _0x444fd1 = _0x455c5c[6 + _0x444fd1];
                  if (_0x496a21 <= _0x2d9211 == _0x29cce5 <= _0x496a21 && _0x29cce5 <= _0x496a21 == _0x444fd1 <= _0x29cce5 || _0x53ec04.isStraight(_0x455c5c) || !(_0xf1e550 = _0x3c029b.solveQuadratic((_0x496a21 - _0x29cce5) * 3 - _0x2d9211 + _0x444fd1, (_0x2d9211 + _0x29cce5) * 2 - _0x496a21 * 4, _0x496a21 - _0x2d9211, _0x561940 = [], 1e-8, 0.99999999))) {
                    _0x1f1236.push(_0x455c5c);
                  } else {
                    _0x561940.sort();
                    _0x496a21 = _0x561940[0];
                    _0x2d9211 = _0x53ec04.subdivide(_0x455c5c, _0x496a21);
                    _0x1f1236.push(_0x2d9211[0]);
                    if (_0xf1e550 > 1) {
                      _0x496a21 = (_0x561940[1] - _0x496a21) / (1 - _0x496a21);
                      _0x2d9211 = _0x53ec04.subdivide(_0x2d9211[1], _0x496a21);
                      _0x1f1236.push(_0x2d9211[0]);
                    }
                    _0x1f1236.push(_0x2d9211[1]);
                  }
                  return _0x1f1236;
                },
                solveCubic: function (_0x25b517, _0x3321ea, _0x5b32b0, _0x20b607, _0x28cdec, _0x5335ad) {
                  var _0x55c1b9 = _0x25b517[_0x3321ea];
                  var _0x7efaf3 = _0x25b517[_0x3321ea + 2];
                  var _0x39645b = _0x25b517[_0x3321ea + 4];
                  _0x25b517 = _0x25b517[_0x3321ea + 6];
                  _0x3321ea = 0;
                  if (_0x55c1b9 < _0x5b32b0 && _0x25b517 < _0x5b32b0 && _0x7efaf3 < _0x5b32b0 && _0x39645b < _0x5b32b0 || _0x5b32b0 < _0x55c1b9 && _0x5b32b0 < _0x25b517 && _0x5b32b0 < _0x7efaf3 && _0x5b32b0 < _0x39645b) {
                    return _0x3321ea;
                  } else {
                    return _0x3c029b.solveCubic(_0x25b517 - _0x55c1b9 - (_0x25b517 = (_0x7efaf3 - _0x55c1b9) * 3) - (_0x7efaf3 = (_0x39645b - _0x7efaf3) * 3 - _0x25b517), _0x7efaf3, _0x25b517, _0x55c1b9 - _0x5b32b0, _0x20b607, _0x28cdec, _0x5335ad);
                  }
                },
                getTimeOf: function (_0x42ed97, _0x496b8e) {
                  var _0xa1ea6e = new _0xbc5c4a(_0x42ed97[0], _0x42ed97[1]);
                  var _0xe26c5e = new _0xbc5c4a(_0x42ed97[6], _0x42ed97[7]);
                  if ((_0x496b8e.isClose(_0xa1ea6e, 1e-12) ? 0 : _0x496b8e.isClose(_0xe26c5e, 1e-12) ? 1 : null) === null) {
                    for (var _0xc98b92 = [_0x496b8e.x, _0x496b8e.y], _0x53dfd7 = [], _0x1e66e1 = 0; _0x1e66e1 < 2; _0x1e66e1++) {
                      for (var _0x5e2258 = _0x53ec04.solveCubic(_0x42ed97, _0x1e66e1, _0xc98b92[_0x1e66e1], _0x53dfd7, 0, 1), _0x1e94e1 = 0; _0x1e94e1 < _0x5e2258; _0x1e94e1++) {
                        var _0x1219ec = _0x53dfd7[_0x1e94e1];
                        if (_0x496b8e.isClose(_0x53ec04.getPoint(_0x42ed97, _0x1219ec), 1e-7)) {
                          return _0x1219ec;
                        }
                      }
                    }
                  }
                  if (_0x496b8e.isClose(_0xa1ea6e, 1e-7)) {
                    return 0;
                  } else if (_0x496b8e.isClose(_0xe26c5e, 1e-7)) {
                    return 1;
                  } else {
                    return null;
                  }
                },
                getNearestTime: function (_0x273d46, _0x252ca3) {
                  if (_0x53ec04.isStraight(_0x273d46)) {
                    var _0x35c90a = _0x273d46[0];
                    var _0x5b8da0 = _0x273d46[1];
                    var _0x2923ba = _0x273d46[6] - _0x35c90a;
                    var _0x1d4931 = _0x273d46[7] - _0x5b8da0;
                    var _0x3ca02c = _0x2923ba * _0x2923ba + _0x1d4931 * _0x1d4931;
                    if (_0x3ca02c == 0 || (_0x3ca02c = ((_0x252ca3.x - _0x35c90a) * _0x2923ba + (_0x252ca3.y - _0x5b8da0) * _0x1d4931) / _0x3ca02c) < 1e-12) {
                      return 0;
                    } else if (_0x3ca02c > 0.999999999999) {
                      return 1;
                    } else {
                      return _0x53ec04.getTimeOf(_0x273d46, new _0xbc5c4a(_0x35c90a + _0x3ca02c * _0x2923ba, _0x5b8da0 + _0x3ca02c * _0x1d4931));
                    }
                  }
                  var _0x2e3304 = Infinity;
                  var _0x22c904 = 0;
                  function _0x1672a9(_0x32bc0e) {
                    if (_0x32bc0e >= 0 && _0x32bc0e <= 1) {
                      var _0x2351aa = _0x252ca3.getDistance(_0x53ec04.getPoint(_0x273d46, _0x32bc0e), true);
                      if (_0x2351aa < _0x2e3304) {
                        _0x2e3304 = _0x2351aa;
                        _0x22c904 = _0x32bc0e;
                        return 1;
                      } else {
                        return undefined;
                      }
                    }
                  }
                  for (var _0x7f2496 = 0; _0x7f2496 <= 100; _0x7f2496++) {
                    _0x1672a9(_0x7f2496 / 100);
                  }
                  for (var _0x223425 = 0.005; _0x223425 > 1e-8;) {
                    if (!(_0x1672a9(_0x22c904 - _0x223425) || _0x1672a9(_0x22c904 + _0x223425))) {
                      _0x223425 /= 2;
                    }
                  }
                  return _0x22c904;
                },
                getPart: function (_0x3f9ec9, _0x52d243, _0x6215b1) {
                  var _0x29c250;
                  var _0x25d0a7 = _0x6215b1 < _0x52d243;
                  if (_0x25d0a7) {
                    _0x29c250 = _0x52d243;
                    _0x52d243 = _0x6215b1;
                    _0x6215b1 = _0x29c250;
                  }
                  if (_0x52d243 > 0) {
                    _0x3f9ec9 = _0x53ec04.subdivide(_0x3f9ec9, _0x52d243)[1];
                  }
                  if (_0x6215b1 < 1) {
                    _0x3f9ec9 = _0x53ec04.subdivide(_0x3f9ec9, (_0x6215b1 - _0x52d243) / (1 - _0x52d243))[0];
                  }
                  if (_0x25d0a7) {
                    return [_0x3f9ec9[6], _0x3f9ec9[7], _0x3f9ec9[4], _0x3f9ec9[5], _0x3f9ec9[2], _0x3f9ec9[3], _0x3f9ec9[0], _0x3f9ec9[1]];
                  } else {
                    return _0x3f9ec9;
                  }
                },
                isFlatEnough: function (_0x2f3f6b, _0x3b6168) {
                  var _0x5db255 = _0x2f3f6b[0];
                  var _0x21af06 = _0x2f3f6b[1];
                  var _0x1992b6 = _0x2f3f6b[2];
                  var _0x22b73c = _0x2f3f6b[3];
                  var _0x108d95 = _0x2f3f6b[4];
                  var _0x587632 = _0x2f3f6b[5];
                  var _0x3b3d23 = _0x2f3f6b[6];
                  _0x1992b6 = _0x1992b6 * 3 - _0x5db255 * 2 - _0x3b3d23;
                  _0x22b73c = _0x22b73c * 3 - _0x21af06 * 2 - (_0x2f3f6b = _0x2f3f6b[7]);
                  _0x5db255 = _0x108d95 * 3 - _0x3b3d23 * 2 - _0x5db255;
                  _0x21af06 = _0x587632 * 3 - _0x2f3f6b * 2 - _0x21af06;
                  return Math.max(_0x1992b6 * _0x1992b6, _0x5db255 * _0x5db255) + Math.max(_0x22b73c * _0x22b73c, _0x21af06 * _0x21af06) <= _0x3b6168 * 16 * _0x3b6168;
                },
                getArea: function (_0x550d7b) {
                  var _0x2291d2 = _0x550d7b[0];
                  var _0x460671 = _0x550d7b[1];
                  var _0xa1a1b9 = _0x550d7b[2];
                  var _0x5d895a = _0x550d7b[3];
                  var _0x3fb360 = _0x550d7b[4];
                  var _0x28810e = _0x550d7b[5];
                  var _0x2a0455 = _0x550d7b[6];
                  return (((_0x550d7b = _0x550d7b[7]) - _0x460671) * (_0xa1a1b9 + _0x3fb360) - (_0x2a0455 - _0x2291d2) * (_0x5d895a + _0x28810e) + _0x5d895a * (_0x2291d2 - _0x3fb360) - _0xa1a1b9 * (_0x460671 - _0x28810e) + _0x550d7b * (_0x3fb360 + _0x2291d2 / 3) - _0x2a0455 * (_0x28810e + _0x460671 / 3)) * 3 / 20;
                },
                getBounds: function (_0x22bce5) {
                  for (var _0x604fd4 = _0x22bce5.slice(0, 2), _0x16834b = _0x604fd4.slice(), _0x239f72 = [0, 0], _0x483f86 = 0; _0x483f86 < 2; _0x483f86++) {
                    _0x53ec04._addBounds(_0x22bce5[_0x483f86], _0x22bce5[_0x483f86 + 2], _0x22bce5[_0x483f86 + 4], _0x22bce5[_0x483f86 + 6], _0x483f86, 0, _0x604fd4, _0x16834b, _0x239f72);
                  }
                  return new _0x5384ce(_0x604fd4[0], _0x604fd4[1], _0x16834b[0] - _0x604fd4[0], _0x16834b[1] - _0x604fd4[1]);
                },
                _addBounds: function (_0x3e8729, _0x5e57b1, _0x34b89d, _0x5984af, _0x2942c4, _0x30cb88, _0x306ac2, _0x9bf6bd, _0x194003) {
                  function _0x1284bc(_0x2c9fb7, _0x2ecf87) {
                    var _0x5072c3 = _0x2c9fb7 - _0x2ecf87;
                    _0x2ecf87 = _0x2c9fb7 + _0x2ecf87;
                    if (_0x5072c3 < _0x306ac2[_0x2942c4]) {
                      _0x306ac2[_0x2942c4] = _0x5072c3;
                    }
                    if (_0x2ecf87 > _0x9bf6bd[_0x2942c4]) {
                      _0x9bf6bd[_0x2942c4] = _0x2ecf87;
                    }
                  }
                  var _0x288283 = _0x306ac2[_0x2942c4] + (_0x30cb88 /= 2);
                  var _0x3da7a8 = _0x9bf6bd[_0x2942c4] - _0x30cb88;
                  if (_0x3e8729 < _0x288283 || _0x5e57b1 < _0x288283 || _0x34b89d < _0x288283 || _0x5984af < _0x288283 || _0x3da7a8 < _0x3e8729 || _0x3da7a8 < _0x5e57b1 || _0x3da7a8 < _0x34b89d || _0x3da7a8 < _0x5984af) {
                    if (_0x5e57b1 < _0x3e8729 != _0x5e57b1 < _0x5984af && _0x34b89d < _0x3e8729 != _0x34b89d < _0x5984af) {
                      _0x1284bc(_0x3e8729, 0);
                      _0x1284bc(_0x5984af, 0);
                    } else {
                      var _0x4fdda4 = _0x3c029b.solveQuadratic((_0x5e57b1 - _0x34b89d) * 3 - _0x3e8729 + _0x5984af, (_0x3e8729 + _0x34b89d) * 2 - _0x5e57b1 * 4, _0x5e57b1 - _0x3e8729, _0x194003);
                      _0x1284bc(_0x5984af, 0);
                      for (var _0x3d7681 = 0; _0x3d7681 < _0x4fdda4; _0x3d7681++) {
                        var _0xf73d6e = _0x194003[_0x3d7681];
                        var _0x1ade36 = 1 - _0xf73d6e;
                        if (_0xf73d6e >= 1e-8 && _0xf73d6e <= 0.99999999) {
                          _0x1284bc(_0x1ade36 * _0x1ade36 * _0x1ade36 * _0x3e8729 + _0x1ade36 * 3 * _0x1ade36 * _0xf73d6e * _0x5e57b1 + _0x1ade36 * 3 * _0xf73d6e * _0xf73d6e * _0x34b89d + _0xf73d6e * _0xf73d6e * _0xf73d6e * _0x5984af, _0x30cb88);
                        }
                      }
                    }
                  }
                }
              }
            }, _0x28b48a.each(["getBounds", "getStrokeBounds", "getHandleBounds"], function (_0x2fdfbd) {
              this[_0x2fdfbd] = function () {
                if (!this._bounds) {
                  this._bounds = {};
                }
                return (this._bounds[_0x2fdfbd] || (this._bounds[_0x2fdfbd] = _0x5615aa[_0x2fdfbd]([this._segment1, this._segment2], false, this._path))).clone();
              };
            }, {}), _0x28b48a.each({
              isStraight: function (_0xe66a9c, _0x451f5a, _0x2c9ed3, _0x1c9037) {
                if (_0x451f5a.isZero() && _0x2c9ed3.isZero()) {
                  return true;
                }
                var _0x326a1f = _0x1c9037.subtract(_0xe66a9c);
                if (_0x326a1f.isZero()) {
                  return false;
                }
                if (_0x326a1f.isCollinear(_0x451f5a) && _0x326a1f.isCollinear(_0x2c9ed3)) {
                  var _0x172c66 = new _0x170222(_0xe66a9c, _0x1c9037);
                  if (_0x172c66.getDistance(_0xe66a9c.add(_0x451f5a)) < 1e-7 && _0x172c66.getDistance(_0x1c9037.add(_0x2c9ed3)) < 1e-7) {
                    _0x1c9037 = _0x326a1f.dot(_0x326a1f);
                    _0x451f5a = _0x326a1f.dot(_0x451f5a) / _0x1c9037;
                    _0x1c9037 = _0x326a1f.dot(_0x2c9ed3) / _0x1c9037;
                    return _0x451f5a >= 0 && _0x451f5a <= 1 && _0x1c9037 <= 0 && _0x1c9037 >= -1;
                  }
                }
                return false;
              },
              isLinear: function (_0x7fba80, _0x462a2a, _0x29c293, _0x401633) {
                _0x7fba80 = _0x401633.subtract(_0x7fba80).divide(3);
                return _0x462a2a.equals(_0x7fba80) && _0x29c293.negate().equals(_0x7fba80);
              }
            }, function (_0x546628, _0x1891c7) {
              this[_0x1891c7] = function (_0x46334e) {
                var _0x4b3ea3 = this._segment1;
                var _0x241c9a = this._segment2;
                return _0x546628(_0x4b3ea3._point, _0x4b3ea3._handleOut, _0x241c9a._handleIn, _0x241c9a._point, _0x46334e);
              };
              this.statics[_0x1891c7] = function (_0x1e7616, _0x5abb48) {
                var _0x2bc864 = _0x1e7616[0];
                var _0x387fdb = _0x1e7616[1];
                var _0x24a0c7 = _0x1e7616[6];
                var _0x82fd21 = _0x1e7616[7];
                return _0x546628(new _0xbc5c4a(_0x2bc864, _0x387fdb), new _0xbc5c4a(_0x1e7616[2] - _0x2bc864, _0x1e7616[3] - _0x387fdb), new _0xbc5c4a(_0x1e7616[4] - _0x24a0c7, _0x1e7616[5] - _0x82fd21), new _0xbc5c4a(_0x24a0c7, _0x82fd21), _0x5abb48);
              };
            }, {
              statics: {},
              hasHandles: function () {
                return !this._segment1._handleOut.isZero() || !this._segment2._handleIn.isZero();
              },
              hasLength: function (_0x236b26) {
                return (!this.getPoint1().equals(this.getPoint2()) || this.hasHandles()) && this.getLength() > (_0x236b26 || 0);
              },
              isCollinear: function (_0x1a682a) {
                return _0x1a682a && this.isStraight() && _0x1a682a.isStraight() && this.getLine().isCollinear(_0x1a682a.getLine());
              },
              isHorizontal: function () {
                return this.isStraight() && Math.abs(this.getTangentAtTime(0.5).y) < 1e-8;
              },
              isVertical: function () {
                return this.isStraight() && Math.abs(this.getTangentAtTime(0.5).x) < 1e-8;
              }
            }), {
              beans: false,
              getLocationAt: function (_0x5d00e0, _0x285309) {
                return this.getLocationAtTime(_0x285309 ? _0x5d00e0 : this.getTimeAt(_0x5d00e0));
              },
              getLocationAtTime: function (_0x2d7a6a) {
                if (_0x2d7a6a != null && _0x2d7a6a >= 0 && _0x2d7a6a <= 1) {
                  return new _0x27f88f(this, _0x2d7a6a);
                } else {
                  return null;
                }
              },
              getTimeAt: function (_0x36aac1, _0x5afc20) {
                return _0x53ec04.getTimeAt(this.getValues(), _0x36aac1, _0x5afc20);
              },
              getParameterAt: "#getTimeAt",
              getTimesWithTangent: function () {
                var _0x1eb8b1 = _0xbc5c4a.read(arguments);
                if (_0x1eb8b1.isZero()) {
                  return [];
                } else {
                  return _0x53ec04.getTimesWithTangent(this.getValues(), _0x1eb8b1);
                }
              },
              getOffsetAtTime: function (_0x409bf9) {
                return this.getPartLength(0, _0x409bf9);
              },
              getLocationOf: function () {
                return this.getLocationAtTime(this.getTimeOf(_0xbc5c4a.read(arguments)));
              },
              getOffsetOf: function () {
                var _0x1ed92b = this.getLocationOf.apply(this, arguments);
                if (_0x1ed92b) {
                  return _0x1ed92b.getOffset();
                } else {
                  return null;
                }
              },
              getTimeOf: function () {
                return _0x53ec04.getTimeOf(this.getValues(), _0xbc5c4a.read(arguments));
              },
              getParameterOf: "#getTimeOf",
              getNearestLocation: function () {
                var _0x3e59ca = _0xbc5c4a.read(arguments);
                var _0x3c5af1 = this.getValues();
                var _0x57f60b = _0x53ec04.getNearestTime(_0x3c5af1, _0x3e59ca);
                _0x3c5af1 = _0x53ec04.getPoint(_0x3c5af1, _0x57f60b);
                return new _0x27f88f(this, _0x57f60b, _0x3c5af1, null, _0x3e59ca.getDistance(_0x3c5af1));
              },
              getNearestPoint: function () {
                var _0x1993b4 = this.getNearestLocation.apply(this, arguments);
                return _0x1993b4 && _0x1993b4.getPoint();
              }
            }, new function () {
              var _0x49066f = ["getPoint", "getTangent", "getNormal", "getWeightedTangent", "getWeightedNormal", "getCurvature"];
              return _0x28b48a.each(_0x49066f, function (_0x26c61c) {
                this[_0x26c61c + "At"] = function (_0x2c3a14, _0x5242e7) {
                  var _0x3061d4 = this.getValues();
                  return _0x53ec04[_0x26c61c](_0x3061d4, _0x5242e7 ? _0x2c3a14 : _0x53ec04.getTimeAt(_0x3061d4, _0x2c3a14));
                };
                this[_0x26c61c + "AtTime"] = function (_0x4c9b65) {
                  return _0x53ec04[_0x26c61c](this.getValues(), _0x4c9b65);
                };
              }, {
                statics: {
                  _evaluateMethods: _0x49066f
                }
              });
            }(), new function () {
              function _0x597ef3(_0x3ff4fe) {
                var _0x12a770 = _0x3ff4fe[0];
                var _0x5efa93 = _0x3ff4fe[1];
                var _0x232d8a = _0x3ff4fe[2];
                var _0x3bc62f = _0x3ff4fe[3];
                var _0x4b0be1 = _0x3ff4fe[4];
                var _0xc23268 = _0x3ff4fe[5];
                var _0x672846 = _0x3ff4fe[6];
                _0x3ff4fe = _0x3ff4fe[7];
                var _0x48402c = (_0x232d8a - _0x4b0be1) * 9 + (_0x672846 - _0x12a770) * 3;
                var _0x482539 = (_0x12a770 + _0x4b0be1) * 6 - _0x232d8a * 12;
                var _0x553a37 = (_0x232d8a - _0x12a770) * 3;
                var _0x4bafb3 = (_0x3bc62f - _0xc23268) * 9 + (_0x3ff4fe - _0x5efa93) * 3;
                var _0x58bd56 = (_0x5efa93 + _0xc23268) * 6 - _0x3bc62f * 12;
                var _0x3fa0ba = (_0x3bc62f - _0x5efa93) * 3;
                return function (_0x4fd2af) {
                  var _0x4d5ce1 = (_0x48402c * _0x4fd2af + _0x482539) * _0x4fd2af + _0x553a37;
                  _0x4fd2af = (_0x4bafb3 * _0x4fd2af + _0x58bd56) * _0x4fd2af + _0x3fa0ba;
                  return Math.sqrt(_0x4d5ce1 * _0x4d5ce1 + _0x4fd2af * _0x4fd2af);
                };
              }
              function _0x2b9335(_0x3b8ab5, _0x141847) {
                return Math.max(2, Math.min(16, Math.ceil(Math.abs(_0x141847 - _0x3b8ab5) * 32)));
              }
              function _0x11a691(_0x224f65, _0x16ac5a, _0x500646, _0x4c5dfb) {
                if (_0x16ac5a == null || _0x16ac5a < 0 || _0x16ac5a > 1) {
                  return null;
                }
                var _0x3b7316 = _0x224f65[0];
                var _0x1ebe38 = _0x224f65[1];
                var _0x25b183 = _0x224f65[2];
                var _0x51c92b = _0x224f65[3];
                var _0x27a1b0 = _0x224f65[4];
                var _0x1df6a5 = _0x224f65[5];
                var _0x136e30 = _0x224f65[6];
                var _0x1a6329 = _0x224f65[7];
                if ((_0x298dfe = _0x3c029b.isZero)(_0x25b183 - _0x3b7316) && _0x298dfe(_0x51c92b - _0x1ebe38)) {
                  _0x25b183 = _0x3b7316;
                  _0x51c92b = _0x1ebe38;
                }
                if (_0x298dfe(_0x27a1b0 - _0x136e30) && _0x298dfe(_0x1df6a5 - _0x1a6329)) {
                  _0x27a1b0 = _0x136e30;
                  _0x1df6a5 = _0x1a6329;
                }
                var _0x304439;
                var _0x15c1d4;
                var _0x513932 = (_0x25b183 - _0x3b7316) * 3;
                var _0x4bacd3 = (_0x27a1b0 - _0x25b183) * 3 - _0x513932;
                var _0x7570f4 = _0x136e30 - _0x3b7316 - _0x513932 - _0x4bacd3;
                var _0x96fd64 = (_0x51c92b - _0x1ebe38) * 3;
                var _0x298dfe = _0x1a6329 - _0x1ebe38 - _0x96fd64 - (_0x224f65 = (_0x1df6a5 - _0x51c92b) * 3 - _0x96fd64);
                if (_0x500646 === 0) {
                  _0x304439 = _0x16ac5a === 0 ? _0x3b7316 : _0x16ac5a === 1 ? _0x136e30 : ((_0x7570f4 * _0x16ac5a + _0x4bacd3) * _0x16ac5a + _0x513932) * _0x16ac5a + _0x3b7316;
                  _0x15c1d4 = _0x16ac5a === 0 ? _0x1ebe38 : _0x16ac5a === 1 ? _0x1a6329 : ((_0x298dfe * _0x16ac5a + _0x224f65) * _0x16ac5a + _0x96fd64) * _0x16ac5a + _0x1ebe38;
                } else {
                  _0x15c1d4 = _0x16ac5a < 1e-8 ? (_0x304439 = _0x513932, _0x96fd64) : _0x16ac5a > 0.99999999 ? (_0x304439 = (_0x136e30 - _0x27a1b0) * 3, (_0x1a6329 - _0x1df6a5) * 3) : (_0x304439 = (_0x7570f4 * 3 * _0x16ac5a + _0x4bacd3 * 2) * _0x16ac5a + _0x513932, (_0x298dfe * 3 * _0x16ac5a + _0x224f65 * 2) * _0x16ac5a + _0x96fd64);
                  if (_0x4c5dfb) {
                    if (_0x304439 === 0 && _0x15c1d4 === 0 && (_0x16ac5a < 1e-8 || _0x16ac5a > 0.99999999)) {
                      _0x304439 = _0x27a1b0 - _0x25b183;
                      _0x15c1d4 = _0x1df6a5 - _0x51c92b;
                    }
                    if (_0x51c92b = Math.sqrt(_0x304439 * _0x304439 + _0x15c1d4 * _0x15c1d4)) {
                      _0x304439 /= _0x51c92b;
                      _0x15c1d4 /= _0x51c92b;
                    }
                  }
                  if (_0x500646 === 3) {
                    _0x27a1b0 = _0x7570f4 * 6 * _0x16ac5a + _0x4bacd3 * 2;
                    _0x1df6a5 = _0x298dfe * 6 * _0x16ac5a + _0x224f65 * 2;
                    _0x304439 = (_0x224f65 = Math.pow(_0x304439 * _0x304439 + _0x15c1d4 * _0x15c1d4, 1.5)) !== 0 ? (_0x304439 * _0x1df6a5 - _0x15c1d4 * _0x27a1b0) / _0x224f65 : 0;
                    _0x15c1d4 = 0;
                  }
                }
                if (_0x500646 === 2) {
                  return new _0xbc5c4a(_0x15c1d4, -_0x304439);
                } else {
                  return new _0xbc5c4a(_0x304439, _0x15c1d4);
                }
              }
              return {
                statics: {
                  classify: function (_0x295d06) {
                    var _0x2bf0c3 = _0x295d06[0];
                    var _0xe081f5 = _0x295d06[1];
                    var _0x3dfbd9 = _0x295d06[2];
                    var _0x4e49cf = _0x295d06[3];
                    var _0x4c6179 = _0x295d06[4];
                    var _0x18475a = _0x295d06[5];
                    var _0x4f79b5 = _0x295d06[6];
                    _0x295d06 = _0x3dfbd9 * (_0xe081f5 - (_0x368eb1 = _0x295d06[7])) + _0x4e49cf * (_0x4f79b5 - _0x2bf0c3) + _0x2bf0c3 * _0x368eb1 - _0xe081f5 * _0x4f79b5;
                    _0x4f79b5 = (_0x4e49cf = (_0x3dfbd9 = (_0x4c6179 * (_0x4e49cf - _0xe081f5) + _0x18475a * (_0x2bf0c3 - _0x3dfbd9) + _0x3dfbd9 * _0xe081f5 - _0x4e49cf * _0x2bf0c3) * 3) - _0x295d06) - _0x295d06 + (_0x2bf0c3 * (_0x368eb1 - _0x18475a) + _0xe081f5 * (_0x4c6179 - _0x4f79b5) + _0x4f79b5 * _0x18475a - _0x368eb1 * _0x4c6179);
                    var _0x368eb1 = (_0x18475a = Math.sqrt(_0x4f79b5 * _0x4f79b5 + _0x4e49cf * _0x4e49cf + _0x3dfbd9 * _0x3dfbd9)) !== 0 ? 1 / _0x18475a : 0;
                    _0x18475a = "serpentine";
                    function _0x1a9dd2(_0x356564, _0x2505ff, _0x5d85e8) {
                      var _0x29ff53 = _0x2505ff !== _0x2bd7be;
                      var _0x3ce5af = _0x29ff53 && _0x2505ff > 0 && _0x2505ff < 1;
                      var _0x456805 = _0x29ff53 && _0x5d85e8 > 0 && _0x5d85e8 < 1;
                      if (!(!_0x29ff53 || (_0x3ce5af || _0x456805) && (_0x356564 !== "loop" || _0x3ce5af && _0x456805))) {
                        _0x3ce5af = _0x456805 = !(_0x356564 = "arch");
                      }
                      return {
                        type: _0x356564,
                        roots: _0x3ce5af || _0x456805 ? _0x3ce5af && _0x456805 ? _0x2505ff < _0x5d85e8 ? [_0x2505ff, _0x5d85e8] : [_0x5d85e8, _0x2505ff] : [_0x3ce5af ? _0x2505ff : _0x5d85e8] : null
                      };
                    }
                    _0x4e49cf *= _0x368eb1;
                    _0x3dfbd9 *= _0x368eb1;
                    if ((_0x4c6179 = _0x3c029b.isZero)(_0x4f79b5 *= _0x368eb1)) {
                      if (_0x4c6179(_0x4e49cf)) {
                        return _0x1a9dd2(_0x4c6179(_0x3dfbd9) ? "line" : "quadratic");
                      } else {
                        return _0x1a9dd2(_0x18475a, _0x3dfbd9 / (_0x4e49cf * 3));
                      }
                    } else if (_0x4c6179(_0x3dfbd9 = _0x4e49cf * 3 * _0x4e49cf - _0x4f79b5 * 4 * _0x3dfbd9)) {
                      return _0x1a9dd2("cusp", _0x4e49cf / (_0x4f79b5 * 2));
                    } else {
                      return _0x1a9dd2(_0x3dfbd9 > 0 ? _0x18475a : "loop", (_0x4e49cf + (_0x4c6179 = _0x3dfbd9 > 0 ? Math.sqrt(_0x3dfbd9 / 3) : Math.sqrt(-_0x3dfbd9))) / (_0x4f79b5 *= 2), (_0x4e49cf - _0x4c6179) / _0x4f79b5);
                    }
                  },
                  getLength: function (_0x460da3, _0x459742, _0x15ed0a, _0x55664c) {
                    if (_0x459742 === _0x2bd7be) {
                      _0x459742 = 0;
                    }
                    if (_0x15ed0a === _0x2bd7be) {
                      _0x15ed0a = 1;
                    }
                    if (_0x53ec04.isStraight(_0x460da3)) {
                      var _0x342230 = _0x460da3;
                      if (_0x15ed0a < 1) {
                        _0x342230 = _0x53ec04.subdivide(_0x342230, _0x15ed0a)[0];
                        _0x459742 /= _0x15ed0a;
                      }
                      var _0x53f9c1 = (_0x342230 = _0x459742 > 0 ? _0x53ec04.subdivide(_0x342230, _0x459742)[1] : _0x342230)[6] - _0x342230[0];
                      _0x342230 = _0x342230[7] - _0x342230[1];
                      return Math.sqrt(_0x53f9c1 * _0x53f9c1 + _0x342230 * _0x342230);
                    }
                    return _0x3c029b.integrate(_0x55664c || _0x597ef3(_0x460da3), _0x459742, _0x15ed0a, _0x2b9335(_0x459742, _0x15ed0a));
                  },
                  getTimeAt: function (_0x34a184, _0x2fa1aa, _0x1c125a) {
                    if (_0x1c125a === _0x2bd7be) {
                      _0x1c125a = _0x2fa1aa < 0 ? 1 : 0;
                    }
                    if (_0x2fa1aa === 0) {
                      return _0x1c125a;
                    }
                    var _0x1e73ce = Math.abs;
                    var _0x1f9307 = _0x2fa1aa > 0;
                    var _0x2b6d74 = _0x1f9307 ? _0x1c125a : 0;
                    var _0x3677a6 = _0x1f9307 ? 1 : _0x1c125a;
                    var _0x352092 = _0x597ef3(_0x34a184);
                    var _0x47b156 = _0x53ec04.getLength(_0x34a184, _0x2b6d74, _0x3677a6, _0x352092);
                    _0x34a184 = _0x1e73ce(_0x2fa1aa) - _0x47b156;
                    if (_0x1e73ce(_0x34a184) < 1e-12) {
                      if (_0x1f9307) {
                        return _0x3677a6;
                      } else {
                        return _0x2b6d74;
                      }
                    }
                    if (_0x34a184 > 1e-12) {
                      return null;
                    }
                    var _0x2ba9ac = 0;
                    return _0x3c029b.findRoot(function (_0x46983b) {
                      _0x2ba9ac += _0x3c029b.integrate(_0x352092, _0x1c125a, _0x46983b, _0x2b9335(_0x1c125a, _0x46983b));
                      _0x1c125a = _0x46983b;
                      return _0x2ba9ac - _0x2fa1aa;
                    }, _0x352092, _0x1c125a + _0x2fa1aa / _0x47b156, _0x2b6d74, _0x3677a6, 32, 1e-12);
                  },
                  getPoint: function (_0xf6b7e8, _0x353fad) {
                    return _0x11a691(_0xf6b7e8, _0x353fad, 0, false);
                  },
                  getTangent: function (_0x3846df, _0x358ec5) {
                    return _0x11a691(_0x3846df, _0x358ec5, 1, true);
                  },
                  getWeightedTangent: function (_0xa1872c, _0x120b85) {
                    return _0x11a691(_0xa1872c, _0x120b85, 1, false);
                  },
                  getNormal: function (_0x4c8aaf, _0x5440a0) {
                    return _0x11a691(_0x4c8aaf, _0x5440a0, 2, true);
                  },
                  getWeightedNormal: function (_0x2f68b1, _0x34405f) {
                    return _0x11a691(_0x2f68b1, _0x34405f, 2, false);
                  },
                  getCurvature: function (_0x50ecfd, _0x133a9e) {
                    return _0x11a691(_0x50ecfd, _0x133a9e, 3, false).x;
                  },
                  getPeaks: function (_0x2a3da5) {
                    var _0x50936a = _0x2a3da5[0];
                    var _0x10cf40 = _0x2a3da5[1];
                    var _0x432931 = _0x2a3da5[2];
                    var _0x246ad6 = _0x2a3da5[3];
                    var _0x1ab9e9 = _0x2a3da5[4];
                    var _0x39b0a1 = _0x2a3da5[5];
                    var _0x3c2dcc = _0x432931 * 3 - _0x50936a - _0x1ab9e9 * 3 + _0x2a3da5[6];
                    _0x1ab9e9 = _0x50936a * 3 - _0x432931 * 6 + _0x1ab9e9 * 3;
                    _0x432931 = _0x50936a * -3 + _0x432931 * 3;
                    _0x2a3da5 = _0x246ad6 * 3 - _0x10cf40 - _0x39b0a1 * 3 + _0x2a3da5[7];
                    _0x39b0a1 = _0x10cf40 * 3 - _0x246ad6 * 6 + _0x39b0a1 * 3;
                    _0x10cf40 = _0x10cf40 * -3 + _0x246ad6 * 3;
                    _0x246ad6 = [];
                    _0x3c029b.solveCubic((_0x3c2dcc * _0x3c2dcc + _0x2a3da5 * _0x2a3da5) * 9, (_0x3c2dcc * _0x1ab9e9 + _0x39b0a1 * _0x2a3da5) * 9, (_0x1ab9e9 * _0x1ab9e9 + _0x39b0a1 * _0x39b0a1) * 2 + (_0x432931 * _0x3c2dcc + _0x10cf40 * _0x2a3da5) * 3, _0x432931 * _0x1ab9e9 + _0x39b0a1 * _0x10cf40, _0x246ad6, 1e-8, 0.99999999);
                    return _0x246ad6.sort();
                  }
                }
              };
            }(), new function () {
              function _0xfe05e8(_0x52b641, _0x383de4, _0x22d077, _0x14cc3b, _0x3d5599, _0x1d941f, _0x3911b8) {
                var _0x27a57b = !_0x3911b8 && _0x22d077.getPrevious() === _0x3d5599;
                var _0x550940 = !_0x3911b8 && _0x22d077 !== _0x3d5599 && _0x22d077.getNext() === _0x3d5599;
                if (_0x14cc3b !== null && (_0x27a57b ? 1e-8 : 0) <= _0x14cc3b && _0x14cc3b <= (_0x550940 ? 0.99999999 : 1) && _0x1d941f !== null && (_0x550940 ? 1e-8 : 0) <= _0x1d941f && _0x1d941f <= (_0x27a57b ? 0.99999999 : 1)) {
                  _0x14cc3b = new _0x27f88f(_0x22d077, _0x14cc3b, null, _0x3911b8);
                  _0x3911b8 = new _0x27f88f(_0x3d5599, _0x1d941f, null, _0x3911b8);
                  (_0x14cc3b._intersection = _0x3911b8)._intersection = _0x14cc3b;
                  if (!(_0x383de4 && !_0x383de4(_0x14cc3b))) {
                    _0x27f88f.insert(_0x52b641, _0x14cc3b, true);
                  }
                }
              }
              function _0x8bc915(_0x35cada, _0x37a4b8, _0x5e0606, _0x9746bb, _0x4a1798, _0x4d3d57, _0x58e597, _0x5818ec, _0x3e21ca, _0x199e0b, _0x5a51c1, _0x229125, _0x5a191d) {
                if (++_0x3e21ca >= 4096 || ++_0x5818ec >= 40) {
                  return _0x3e21ca;
                }
                var _0xf99525;
                var _0x243d36;
                var _0x3c57ca;
                var _0xd8944d = _0x37a4b8[0];
                var _0xd0c5d5 = _0x37a4b8[1];
                var _0x3f6482 = _0x37a4b8[6];
                var _0x2267dd = _0x37a4b8[7];
                var _0x4a9a94 = _0x170222.getSignedDistance;
                var _0x42a820 = _0x4a9a94(_0xd8944d, _0xd0c5d5, _0x3f6482, _0x2267dd, _0x37a4b8[2], _0x37a4b8[3]);
                var _0x3a13d8 = _0x4a9a94(_0xd8944d, _0xd0c5d5, _0x3f6482, _0x2267dd, _0x37a4b8[4], _0x37a4b8[5]);
                var _0x4ec0cd = (_0x3c57ca = _0x42a820 * _0x3a13d8 > 0 ? 0.75 : 4 / 9) * Math.min(0, _0x42a820, _0x3a13d8);
                var _0x166be7 = _0x3c57ca * Math.max(0, _0x42a820, _0x3a13d8);
                var _0x617fda = _0x4a9a94(_0xd8944d, _0xd0c5d5, _0x3f6482, _0x2267dd, _0x35cada[0], _0x35cada[1]);
                var _0x59f4db = _0x4a9a94(_0xd8944d, _0xd0c5d5, _0x3f6482, _0x2267dd, _0x35cada[2], _0x35cada[3]);
                _0x3f6482 = function (_0x4f2fa5, _0x2b2de6, _0x42c0cf, _0x52c26f) {
                  var _0x36d093 = [0, _0x4f2fa5];
                  var _0x36ee0b = [1 / 3, _0x2b2de6];
                  var _0x416f03 = [2 / 3, _0x42c0cf];
                  var _0x26b66c = [1, _0x52c26f];
                  _0x26b66c = (_0x2b2de6 = _0x2b2de6 - (_0x4f2fa5 * 2 + _0x52c26f) / 3) * (_0x4f2fa5 = _0x42c0cf - (_0x4f2fa5 + _0x52c26f * 2) / 3) < 0 ? [[_0x36d093, _0x36ee0b, _0x26b66c], [_0x36d093, _0x416f03, _0x26b66c]] : [(_0x52c26f = _0x2b2de6 / _0x4f2fa5) >= 2 ? [_0x36d093, _0x36ee0b, _0x26b66c] : _0x52c26f <= 0.5 ? [_0x36d093, _0x416f03, _0x26b66c] : [_0x36d093, _0x36ee0b, _0x416f03, _0x26b66c], [_0x36d093, _0x26b66c]];
                  if ((_0x2b2de6 || _0x4f2fa5) < 0) {
                    return _0x26b66c.reverse();
                  } else {
                    return _0x26b66c;
                  }
                }(_0x617fda, _0x59f4db, _0x3c57ca = _0x4a9a94(_0xd8944d, _0xd0c5d5, _0x3f6482, _0x2267dd, _0x35cada[4], _0x35cada[5]), _0xd0c5d5 = _0x4a9a94(_0xd8944d, _0xd0c5d5, _0x3f6482, _0x2267dd, _0x35cada[6], _0x35cada[7]));
                _0x2267dd = _0x3f6482[0];
                _0x3f6482 = _0x3f6482[1];
                if (_0x42a820 === 0 && _0x3a13d8 === 0 && _0x617fda === 0 && _0x59f4db === 0 && _0x3c57ca === 0 && _0xd0c5d5 === 0 || (_0xf99525 = _0x2ce9ca(_0x2267dd, _0x3f6482, _0x4ec0cd, _0x166be7)) == null || (_0x243d36 = _0x2ce9ca(_0x2267dd.reverse(), _0x3f6482.reverse(), _0x4ec0cd, _0x166be7)) == null) {
                  return _0x3e21ca;
                }
                var _0x37c343;
                var _0x3a722e;
                var _0x14c4f7;
                _0x166be7 = _0x199e0b + (_0x5a51c1 - _0x199e0b) * _0xf99525;
                _0x5a51c1 = _0x199e0b + (_0x5a51c1 - _0x199e0b) * _0x243d36;
                if (Math.max(_0x5a191d - _0x229125, _0x5a51c1 - _0x166be7) < 1e-9) {
                  _0x37c343 = (_0x166be7 + _0x5a51c1) / 2;
                  _0x14c4f7 = (_0x229125 + _0x5a191d) / 2;
                  _0xfe05e8(_0x4a1798, _0x4d3d57, _0x58e597 ? _0x9746bb : _0x5e0606, _0x58e597 ? _0x14c4f7 : _0x37c343, _0x58e597 ? _0x5e0606 : _0x9746bb, _0x58e597 ? _0x37c343 : _0x14c4f7);
                } else {
                  _0x35cada = _0x53ec04.getPart(_0x35cada, _0xf99525, _0x243d36);
                  _0x199e0b = _0x5a191d - _0x229125;
                  _0x3e21ca = _0x243d36 - _0xf99525 > 0.8 ? _0x199e0b < _0x5a51c1 - _0x166be7 ? (_0x37c343 = (_0x166be7 + _0x5a51c1) / 2, _0x3e21ca = _0x8bc915(_0x37a4b8, (_0x3a722e = _0x53ec04.subdivide(_0x35cada, 0.5))[0], _0x9746bb, _0x5e0606, _0x4a1798, _0x4d3d57, !_0x58e597, _0x5818ec, _0x3e21ca, _0x229125, _0x5a191d, _0x166be7, _0x37c343), _0x8bc915(_0x37a4b8, _0x3a722e[1], _0x9746bb, _0x5e0606, _0x4a1798, _0x4d3d57, !_0x58e597, _0x5818ec, _0x3e21ca, _0x229125, _0x5a191d, _0x37c343, _0x5a51c1)) : (_0x14c4f7 = (_0x229125 + _0x5a191d) / 2, _0x3e21ca = _0x8bc915((_0x3a722e = _0x53ec04.subdivide(_0x37a4b8, 0.5))[0], _0x35cada, _0x9746bb, _0x5e0606, _0x4a1798, _0x4d3d57, !_0x58e597, _0x5818ec, _0x3e21ca, _0x229125, _0x14c4f7, _0x166be7, _0x5a51c1), _0x8bc915(_0x3a722e[1], _0x35cada, _0x9746bb, _0x5e0606, _0x4a1798, _0x4d3d57, !_0x58e597, _0x5818ec, _0x3e21ca, _0x14c4f7, _0x5a191d, _0x166be7, _0x5a51c1)) : _0x199e0b == 0 || _0x199e0b >= 1e-9 ? _0x8bc915(_0x37a4b8, _0x35cada, _0x9746bb, _0x5e0606, _0x4a1798, _0x4d3d57, !_0x58e597, _0x5818ec, _0x3e21ca, _0x229125, _0x5a191d, _0x166be7, _0x5a51c1) : _0x8bc915(_0x35cada, _0x37a4b8, _0x5e0606, _0x9746bb, _0x4a1798, _0x4d3d57, _0x58e597, _0x5818ec, _0x3e21ca, _0x166be7, _0x5a51c1, _0x229125, _0x5a191d);
                }
                return _0x3e21ca;
              }
              function _0x2ce9ca(_0x368c4f, _0x1a29ea, _0x40bc65, _0x4c9fb0) {
                if (_0x368c4f[0][1] < _0x40bc65) {
                  return _0x1ba827(_0x368c4f, true, _0x40bc65);
                } else if (_0x1a29ea[0][1] > _0x4c9fb0) {
                  return _0x1ba827(_0x1a29ea, false, _0x4c9fb0);
                } else {
                  return _0x368c4f[0][0];
                }
              }
              function _0x1ba827(_0x313063, _0x26ecc6, _0x277b92) {
                for (var _0x175374 = _0x313063[0][0], _0x187d56 = _0x313063[0][1], _0x2c95c0 = 1, _0x5b7c58 = _0x313063.length; _0x2c95c0 < _0x5b7c58; _0x2c95c0++) {
                  var _0x18e45d = _0x313063[_0x2c95c0][0];
                  var _0x22f664 = _0x313063[_0x2c95c0][1];
                  if (_0x26ecc6 ? _0x277b92 <= _0x22f664 : _0x22f664 <= _0x277b92) {
                    if (_0x22f664 === _0x277b92) {
                      return _0x18e45d;
                    } else {
                      return _0x175374 + (_0x277b92 - _0x187d56) * (_0x18e45d - _0x175374) / (_0x22f664 - _0x187d56);
                    }
                  }
                  _0x175374 = _0x18e45d;
                  _0x187d56 = _0x22f664;
                }
                return null;
              }
              function _0x521a6c(_0x4f6cd8, _0x5229db, _0x30d96c, _0x46ce44, _0x51c0e7) {
                var _0x540603 = _0x3c029b.isZero;
                if (_0x540603(_0x46ce44) && _0x540603(_0x51c0e7)) {
                  if ((_0x540603 = _0x53ec04.getTimeOf(_0x4f6cd8, new _0xbc5c4a(_0x5229db, _0x30d96c))) === null) {
                    return [];
                  } else {
                    return [_0x540603];
                  }
                }
                _0x46ce44 = Math.atan2(-_0x51c0e7, _0x46ce44);
                for (var _0x414109 = Math.sin(_0x46ce44), _0x3bbe0d = Math.cos(_0x46ce44), _0x2e69ef = [], _0x47b1eb = (_0x46ce44 = [], 0); _0x47b1eb < 8; _0x47b1eb += 2) {
                  var _0x581304 = _0x4f6cd8[_0x47b1eb] - _0x5229db;
                  var _0x510c85 = _0x4f6cd8[_0x47b1eb + 1] - _0x30d96c;
                  _0x2e69ef.push(_0x581304 * _0x3bbe0d - _0x510c85 * _0x414109, _0x581304 * _0x414109 + _0x510c85 * _0x3bbe0d);
                }
                _0x53ec04.solveCubic(_0x2e69ef, 1, 0, _0x46ce44, 0, 1);
                return _0x46ce44;
              }
              function _0x4ffe75(_0x382551, _0x1947cb, _0x49e8da, _0x487a1e, _0x56e4e7, _0x2d2b6a, _0x175c0e) {
                for (var _0x4952b7 = _0x1947cb[0], _0x41937d = _0x1947cb[1], _0x886dc5 = _0x521a6c(_0x382551, _0x4952b7, _0x41937d, _0x1947cb[6] - _0x4952b7, _0x1947cb[7] - _0x41937d), _0x20b39e = 0, _0x3dd305 = _0x886dc5.length; _0x20b39e < _0x3dd305; _0x20b39e++) {
                  var _0x5f1b75 = _0x886dc5[_0x20b39e];
                  var _0x4ce60d = _0x53ec04.getPoint(_0x382551, _0x5f1b75);
                  if ((_0x4ce60d = _0x53ec04.getTimeOf(_0x1947cb, _0x4ce60d)) !== null) {
                    _0xfe05e8(_0x56e4e7, _0x2d2b6a, _0x175c0e ? _0x487a1e : _0x49e8da, _0x175c0e ? _0x4ce60d : _0x5f1b75, _0x175c0e ? _0x49e8da : _0x487a1e, _0x175c0e ? _0x5f1b75 : _0x4ce60d);
                  }
                }
              }
              function _0x91143a(_0x2c69ed, _0x4d0a39, _0x1b9bfe, _0x20712a, _0x309f6c, _0x3e697b) {
                var _0xd87d56 = _0x170222.intersect(_0x2c69ed[0], _0x2c69ed[1], _0x2c69ed[6], _0x2c69ed[7], _0x4d0a39[0], _0x4d0a39[1], _0x4d0a39[6], _0x4d0a39[7]);
                if (_0xd87d56) {
                  _0xfe05e8(_0x309f6c, _0x3e697b, _0x1b9bfe, _0x53ec04.getTimeOf(_0x2c69ed, _0xd87d56), _0x20712a, _0x53ec04.getTimeOf(_0x4d0a39, _0xd87d56));
                }
              }
              function _0x137d99(_0x570e55, _0x4eb64c, _0x23e984, _0x4f31e5, _0x262867, _0xf4e0ce) {
                var _0x1d2e64 = Math.min;
                if ((_0x41ac1d = Math.max)(_0x570e55[0], _0x570e55[2], _0x570e55[4], _0x570e55[6]) + 1e-12 > _0x1d2e64(_0x4eb64c[0], _0x4eb64c[2], _0x4eb64c[4], _0x4eb64c[6]) && _0x1d2e64(_0x570e55[0], _0x570e55[2], _0x570e55[4], _0x570e55[6]) - 1e-12 < _0x41ac1d(_0x4eb64c[0], _0x4eb64c[2], _0x4eb64c[4], _0x4eb64c[6]) && _0x41ac1d(_0x570e55[1], _0x570e55[3], _0x570e55[5], _0x570e55[7]) + 1e-12 > _0x1d2e64(_0x4eb64c[1], _0x4eb64c[3], _0x4eb64c[5], _0x4eb64c[7]) && _0x1d2e64(_0x570e55[1], _0x570e55[3], _0x570e55[5], _0x570e55[7]) - 1e-12 < _0x41ac1d(_0x4eb64c[1], _0x4eb64c[3], _0x4eb64c[5], _0x4eb64c[7])) {
                  var _0x8761ee = _0x35ed30(_0x570e55, _0x4eb64c);
                  if (_0x8761ee) {
                    for (var _0x1c891f = 0; _0x1c891f < 2; _0x1c891f++) {
                      var _0x364141 = _0x8761ee[_0x1c891f];
                      _0xfe05e8(_0x262867, _0xf4e0ce, _0x23e984, _0x364141[0], _0x4f31e5, _0x364141[1], true);
                    }
                  } else {
                    var _0x5533e4 = _0x53ec04.isStraight(_0x570e55);
                    var _0x325381 = _0x53ec04.isStraight(_0x4eb64c);
                    var _0x477f9f = _0x5533e4 && _0x325381;
                    _0x1d2e64 = _0x5533e4 && !_0x325381;
                    var _0x41ac1d = _0x262867.length;
                    (_0x477f9f ? _0x91143a : _0x5533e4 || _0x325381 ? _0x4ffe75 : _0x8bc915)(_0x1d2e64 ? _0x4eb64c : _0x570e55, _0x1d2e64 ? _0x570e55 : _0x4eb64c, _0x1d2e64 ? _0x4f31e5 : _0x23e984, _0x1d2e64 ? _0x23e984 : _0x4f31e5, _0x262867, _0xf4e0ce, _0x1d2e64, 0, 0, 0, 1, 0, 1);
                    if (!_0x477f9f || _0x262867.length === _0x41ac1d) {
                      for (_0x1c891f = 0; _0x1c891f < 4; _0x1c891f++) {
                        var _0xf58482 = _0x1c891f >> 1;
                        var _0x546bd0 = _0x1c891f & 1;
                        var _0x5730ec = _0x546bd0 * 6;
                        var _0xacd7a3 = new _0xbc5c4a(_0x570e55[_0xacd7a3 = _0xf58482 * 6], _0x570e55[1 + _0xacd7a3]);
                        _0x5730ec = new _0xbc5c4a(_0x4eb64c[_0x5730ec], _0x4eb64c[1 + _0x5730ec]);
                        if (_0xacd7a3.isClose(_0x5730ec, 1e-12)) {
                          _0xfe05e8(_0x262867, _0xf4e0ce, _0x23e984, _0xf58482, _0x4f31e5, _0x546bd0);
                        }
                      }
                    }
                  }
                }
                return _0x262867;
              }
              function _0x848be4(_0x20b876, _0x8b92e9, _0x383058, _0x2c0193) {
                if ((_0x20b876 = _0x53ec04.classify(_0x20b876)).type === "loop") {
                  _0xfe05e8(_0x383058, _0x2c0193, _0x8b92e9, (_0x20b876 = _0x20b876.roots)[0], _0x8b92e9, _0x20b876[1]);
                }
                return _0x383058;
              }
              function _0x35ed30(_0x48ebf3, _0x4cc4d0) {
                function _0x3624e9(_0x3ba7f3) {
                  var _0x13d367 = _0x3ba7f3[6] - _0x3ba7f3[0];
                  return _0x13d367 * _0x13d367 + (_0x3ba7f3 = _0x3ba7f3[7] - _0x3ba7f3[1]) * _0x3ba7f3;
                }
                var _0x8a971a;
                var _0x28ef40 = Math.abs;
                var _0x2c3130 = _0x170222.getDistance;
                var _0x9b1efc = 1e-7;
                var _0x472d53 = _0x53ec04.isStraight(_0x48ebf3);
                var _0x52134c = _0x53ec04.isStraight(_0x4cc4d0);
                var _0x44de4d = _0x472d53 && _0x52134c;
                var _0x44631d = (_0x8a971a = _0x3624e9(_0x48ebf3) < _0x3624e9(_0x4cc4d0)) ? _0x4cc4d0 : _0x48ebf3;
                var _0x225e77 = _0x8a971a ? _0x48ebf3 : _0x4cc4d0;
                var _0x512816 = _0x44631d[0];
                var _0x13312d = _0x44631d[1];
                var _0x28f5a4 = _0x44631d[6] - _0x512816;
                if (_0x2c3130(_0x512816, _0x13312d, _0x28f5a4, _0x8a971a = _0x44631d[7] - _0x13312d, _0x225e77[0], _0x225e77[1], true) < _0x9b1efc && _0x2c3130(_0x512816, _0x13312d, _0x28f5a4, _0x8a971a, _0x225e77[6], _0x225e77[7], true) < _0x9b1efc) {
                  if (!_0x44de4d && _0x2c3130(_0x512816, _0x13312d, _0x28f5a4, _0x8a971a, _0x44631d[2], _0x44631d[3], true) < _0x9b1efc && _0x2c3130(_0x512816, _0x13312d, _0x28f5a4, _0x8a971a, _0x44631d[4], _0x44631d[5], true) < _0x9b1efc && _0x2c3130(_0x512816, _0x13312d, _0x28f5a4, _0x8a971a, _0x225e77[2], _0x225e77[3], true) < _0x9b1efc && _0x2c3130(_0x512816, _0x13312d, _0x28f5a4, _0x8a971a, _0x225e77[4], _0x225e77[5], true) < _0x9b1efc) {
                    _0x472d53 = _0x52134c = _0x44de4d = true;
                  }
                } else if (_0x44de4d) {
                  return null;
                }
                if (_0x472d53 ^ _0x52134c) {
                  return null;
                }
                for (var _0x528ec4 = [_0x48ebf3, _0x4cc4d0], _0x50fdad = [], _0x161d83 = 0; _0x161d83 < 4 && _0x50fdad.length < 2; _0x161d83++) {
                  var _0x500a24 = _0x161d83 & 1;
                  var _0x55ff1e = _0x500a24 ^ 1;
                  var _0x2534fb = _0x161d83 >> 1;
                  if ((_0x55ff1e = _0x53ec04.getTimeOf(_0x528ec4[_0x500a24], new _0xbc5c4a(_0x528ec4[_0x55ff1e][_0x2534fb ? 6 : 0], _0x528ec4[_0x55ff1e][_0x2534fb ? 7 : 1]))) != null) {
                    _0x2534fb = _0x500a24 ? [_0x2534fb, _0x55ff1e] : [_0x55ff1e, _0x2534fb];
                    if (!_0x50fdad.length || _0x28ef40(_0x2534fb[0] - _0x50fdad[0][0]) > 1e-8 && _0x28ef40(_0x2534fb[1] - _0x50fdad[0][1]) > 1e-8) {
                      _0x50fdad.push(_0x2534fb);
                    }
                  }
                  if (_0x161d83 > 2 && !_0x50fdad.length) {
                    break;
                  }
                }
                if (_0x50fdad.length !== 2) {
                  _0x50fdad = null;
                } else if (!_0x44de4d) {
                  _0x48ebf3 = _0x53ec04.getPart(_0x48ebf3, _0x50fdad[0][0], _0x50fdad[1][0]);
                  if (_0x28ef40((_0x4cc4d0 = _0x53ec04.getPart(_0x4cc4d0, _0x50fdad[0][1], _0x50fdad[1][1]))[2] - _0x48ebf3[2]) > _0x9b1efc || _0x28ef40(_0x4cc4d0[3] - _0x48ebf3[3]) > _0x9b1efc || _0x28ef40(_0x4cc4d0[4] - _0x48ebf3[4]) > _0x9b1efc || _0x28ef40(_0x4cc4d0[5] - _0x48ebf3[5]) > _0x9b1efc) {
                    _0x50fdad = null;
                  }
                }
                return _0x50fdad;
              }
              return {
                getIntersections: function (_0x681e91) {
                  var _0x3d9b78 = this.getValues();
                  var _0x27de85 = _0x681e91 && _0x681e91 !== this && _0x681e91.getValues();
                  if (_0x27de85) {
                    return _0x137d99(_0x3d9b78, _0x27de85, this, _0x681e91, []);
                  } else {
                    return _0x848be4(_0x3d9b78, this, []);
                  }
                },
                statics: {
                  getOverlaps: _0x35ed30,
                  getIntersections: function (_0x1b43c5, _0x1bb0a3, _0x113b44, _0x1f9ded, _0x25486e, _0x45c51e) {
                    for (var _0x3bf5a5 = !_0x1bb0a3, _0x1b9d56 = _0x1b43c5.length, _0x51a62c = (_0x1bb0a3 = _0x3bf5a5 ? _0x1b43c5 : _0x1bb0a3).length, _0x5a1871 = new Array(_0x1b9d56), _0x158643 = _0x3bf5a5 ? _0x5a1871 : new Array(_0x51a62c), _0x32af8d = [], _0x1079ce = 0; _0x1079ce < _0x1b9d56; _0x1079ce++) {
                      _0x5a1871[_0x1079ce] = _0x1b43c5[_0x1079ce].getValues(_0x1f9ded);
                    }
                    if (!_0x3bf5a5) {
                      for (_0x1079ce = 0; _0x1079ce < _0x51a62c; _0x1079ce++) {
                        _0x158643[_0x1079ce] = _0x1bb0a3[_0x1079ce].getValues(_0x25486e);
                      }
                    }
                    for (var _0x10bf84 = _0x402ec8.findCurveBoundsCollisions(_0x5a1871, _0x158643, 1e-7), _0x32a3c6 = 0; _0x32a3c6 < _0x1b9d56; _0x32a3c6++) {
                      var _0x14c2d4 = _0x1b43c5[_0x32a3c6];
                      var _0x54aa21 = _0x5a1871[_0x32a3c6];
                      if (_0x3bf5a5) {
                        _0x848be4(_0x54aa21, _0x14c2d4, _0x32af8d, _0x113b44);
                      }
                      var _0x560440 = _0x10bf84[_0x32a3c6];
                      if (_0x560440) {
                        for (var _0x4d86a7 = 0; _0x4d86a7 < _0x560440.length; _0x4d86a7++) {
                          if (_0x45c51e && _0x32af8d.length) {
                            return _0x32af8d;
                          }
                          var _0x39efe5;
                          var _0x5717c4 = _0x560440[_0x4d86a7];
                          if (!_0x3bf5a5 || _0x32a3c6 < _0x5717c4) {
                            _0x39efe5 = _0x1bb0a3[_0x5717c4];
                            _0x137d99(_0x54aa21, _0x158643[_0x5717c4], _0x14c2d4, _0x39efe5, _0x32af8d, _0x113b44);
                          }
                        }
                      }
                    }
                    return _0x32af8d;
                  },
                  getCurveLineIntersections: _0x521a6c,
                  getTimesWithTangent: function (_0x34ebbf, _0x447625) {
                    var _0x17fe54;
                    var _0x551532 = _0x34ebbf[0];
                    var _0x66b043 = _0x34ebbf[1];
                    var _0x5d813c = _0x34ebbf[2];
                    var _0x35f6d4 = _0x34ebbf[3];
                    var _0x21f420 = _0x34ebbf[4];
                    var _0x432bb1 = _0x34ebbf[5];
                    var _0x5086a6 = _0x34ebbf[6];
                    var _0xba5c97 = _0x34ebbf[7];
                    _0x447625 = (_0x34ebbf = _0x447625.normalize()).x;
                    _0x5086a6 = _0x5086a6 * 3 - _0x21f420 * 9 + _0x5d813c * 9 - _0x551532 * 3;
                    _0xba5c97 = _0xba5c97 * 3 - _0x432bb1 * 9 + _0x35f6d4 * 9 - _0x66b043 * 3;
                    _0x21f420 = _0x21f420 * 6 - _0x5d813c * 12 + _0x551532 * 6;
                    _0x432bb1 = _0x432bb1 * 6 - _0x35f6d4 * 12 + _0x66b043 * 6;
                    _0x5d813c = _0x5d813c * 3 - _0x551532 * 3;
                    _0x551532 = _0x35f6d4 * 3 - _0x66b043 * 3;
                    _0x35f6d4 = _0x5086a6 * 2 * (_0x34ebbf = _0x34ebbf.y) - _0xba5c97 * 2 * _0x447625;
                    _0x66b043 = [];
                    if (Math.abs(_0x35f6d4) < _0x3c029b.CURVETIME_EPSILON) {
                      if (!((_0x35f6d4 = _0x5086a6 * _0x432bb1 - _0xba5c97 * _0x21f420) == 0)) {
                        if ((_0x17fe54 = -(_0x5086a6 * _0x551532 - _0xba5c97 * _0x5d813c) / _0x35f6d4) >= 0 && _0x17fe54 <= 1) {
                          _0x66b043.push(_0x17fe54);
                        }
                      }
                    } else {
                      _0x17fe54 = _0x21f420 * _0x34ebbf - _0x432bb1 * _0x447625;
                      if ((_0x551532 = (_0x21f420 * _0x21f420 - _0x5086a6 * 4 * _0x5d813c) * _0x34ebbf * _0x34ebbf + (_0x21f420 * -2 * _0x432bb1 + _0xba5c97 * 4 * _0x5d813c + _0x5086a6 * 4 * _0x551532) * _0x447625 * _0x34ebbf + (_0x432bb1 * _0x432bb1 - _0xba5c97 * 4 * _0x551532) * _0x447625 * _0x447625) >= 0 && _0x35f6d4 != 0) {
                        _0x551532 = (-_0x17fe54 + (_0x447625 = Math.sqrt(_0x551532))) / _0x35f6d4;
                        if ((_0x35f6d4 = -(_0x17fe54 + _0x447625) / _0x35f6d4) >= 0 && _0x35f6d4 <= 1) {
                          _0x66b043.push(_0x35f6d4);
                        }
                        if (_0x551532 >= 0 && _0x551532 <= 1) {
                          _0x66b043.push(_0x551532);
                        }
                      }
                    }
                    return _0x66b043;
                  }
                }
              };
            }());
            var _0x27f88f = _0x28b48a.extend({
              _class: "CurveLocation",
              initialize: function (_0x4e9c65, _0x10ae2a, _0x20d151, _0xc4b4c5, _0x478e7b) {
                var _0x443f03;
                if (_0x10ae2a >= 0.99999999 && (_0x443f03 = _0x4e9c65.getNext())) {
                  _0x10ae2a = 0;
                  _0x4e9c65 = _0x443f03;
                }
                this._setCurve(_0x4e9c65);
                this._time = _0x10ae2a;
                this._point = _0x20d151 || _0x4e9c65.getPointAtTime(_0x10ae2a);
                this._overlap = _0xc4b4c5;
                this._distance = _0x478e7b;
                this._intersection = this._next = this._previous = null;
              },
              _setPath: function (_0x58124b) {
                this._path = _0x58124b;
                this._version = _0x58124b ? _0x58124b._version : 0;
              },
              _setCurve: function (_0x2d556f) {
                this._setPath(_0x2d556f._path);
                this._curve = _0x2d556f;
                this._segment = null;
                this._segment1 = _0x2d556f._segment1;
                this._segment2 = _0x2d556f._segment2;
              },
              _setSegment: function (_0x3a1a24) {
                var _0x119648 = _0x3a1a24.getCurve();
                if (_0x119648) {
                  this._setCurve(_0x119648);
                } else {
                  this._setPath(_0x3a1a24._path);
                  this._segment1 = _0x3a1a24;
                  this._segment2 = null;
                }
                this._segment = _0x3a1a24;
                this._time = _0x3a1a24 === this._segment1 ? 0 : 1;
                this._point = _0x3a1a24._point.clone();
              },
              getSegment: function () {
                var _0x4f6e48;
                var _0x305cc4;
                var _0x218568 = this._segment;
                if (!_0x218568) {
                  _0x4f6e48 = this.getCurve();
                  if ((_0x305cc4 = this.getTime()) === 0) {
                    _0x218568 = _0x4f6e48._segment1;
                  } else if (_0x305cc4 === 1) {
                    _0x218568 = _0x4f6e48._segment2;
                  } else if (_0x305cc4 != null) {
                    _0x218568 = _0x4f6e48.getPartLength(0, _0x305cc4) < _0x4f6e48.getPartLength(_0x305cc4, 1) ? _0x4f6e48._segment1 : _0x4f6e48._segment2;
                  }
                  this._segment = _0x218568;
                }
                return _0x218568;
              },
              getCurve: function () {
                var _0x1f82b6 = this._path;
                var _0x59dc97 = this;
                function _0x15c563(_0x501600) {
                  if ((_0x501600 = _0x501600 && _0x501600.getCurve()) && (_0x59dc97._time = _0x501600.getTimeOf(_0x59dc97._point)) != null) {
                    _0x59dc97._setCurve(_0x501600);
                    return _0x501600;
                  }
                }
                if (_0x1f82b6 && _0x1f82b6._version !== this._version) {
                  this._time = this._offset = this._curveOffset = this._curve = null;
                }
                return this._curve || _0x15c563(this._segment) || _0x15c563(this._segment1) || _0x15c563(this._segment2.getPrevious());
              },
              getPath: function () {
                var _0x34f5c8 = this.getCurve();
                return _0x34f5c8 && _0x34f5c8._path;
              },
              getIndex: function () {
                var _0x5bf681 = this.getCurve();
                return _0x5bf681 && _0x5bf681.getIndex();
              },
              getTime: function () {
                var _0x4a9f01 = this.getCurve();
                var _0x4e9386 = this._time;
                if (_0x4a9f01 && _0x4e9386 == null) {
                  return this._time = _0x4a9f01.getTimeOf(this._point);
                } else {
                  return _0x4e9386;
                }
              },
              getParameter: "#getTime",
              getPoint: function () {
                return this._point;
              },
              getOffset: function () {
                if ((_0x6d59bc = this._offset) == null) {
                  var _0x6d59bc = 0;
                  var _0x150034 = this.getPath();
                  var _0x2a9744 = this.getIndex();
                  if (_0x150034 && _0x2a9744 != null) {
                    for (var _0x35a2ca = _0x150034.getCurves(), _0x1c5188 = 0; _0x1c5188 < _0x2a9744; _0x1c5188++) {
                      _0x6d59bc += _0x35a2ca[_0x1c5188].getLength();
                    }
                  }
                  this._offset = _0x6d59bc += this.getCurveOffset();
                }
                return _0x6d59bc;
              },
              getCurveOffset: function () {
                var _0x3d25d4;
                var _0x6a9d16;
                var _0x12ab88 = this._curveOffset;
                if (_0x12ab88 == null) {
                  _0x3d25d4 = this.getCurve();
                  _0x6a9d16 = this.getTime();
                  this._curveOffset = _0x12ab88 = _0x6a9d16 != null && _0x3d25d4 && _0x3d25d4.getPartLength(0, _0x6a9d16);
                }
                return _0x12ab88;
              },
              getIntersection: function () {
                return this._intersection;
              },
              getDistance: function () {
                return this._distance;
              },
              divide: function () {
                var _0x408ab6;
                if (_0x408ab6 = (_0x408ab6 = this.getCurve()) && _0x408ab6.divideAtTime(this.getTime())) {
                  this._setSegment(_0x408ab6._segment1);
                }
                return _0x408ab6;
              },
              split: function () {
                var _0x29f160;
                var _0xf14cbc = (_0x29f160 = this.getCurve())._path;
                if (_0x29f160 = _0x29f160 && _0x29f160.splitAtTime(this.getTime())) {
                  this._setSegment(_0xf14cbc.getLastSegment());
                }
                return _0x29f160;
              },
              equals: function (_0x4af43a, _0xb6dcd8) {
                var _0x2c5c16;
                var _0x30de3a;
                var _0x18d28f;
                var _0x4c9ec2;
                var _0x5b983e = this === _0x4af43a;
                if (!_0x5b983e && _0x4af43a instanceof _0x27f88f) {
                  _0x18d28f = this.getCurve();
                  _0x4c9ec2 = _0x4af43a.getCurve();
                  if ((_0x2c5c16 = _0x18d28f._path) === _0x4c9ec2._path) {
                    _0x18d28f = (_0x30de3a = Math.abs)(this.getOffset() - _0x4af43a.getOffset());
                    _0x4c9ec2 = !_0xb6dcd8 && this._intersection;
                    _0x4af43a = !_0xb6dcd8 && _0x4af43a._intersection;
                    _0x5b983e = (_0x18d28f < 1e-7 || _0x2c5c16 && _0x30de3a(_0x2c5c16.getLength() - _0x18d28f) < 1e-7) && (!_0x4c9ec2 && !_0x4af43a || _0x4c9ec2 && _0x4af43a && _0x4c9ec2.equals(_0x4af43a, true));
                  }
                }
                return _0x5b983e;
              },
              toString: function () {
                var _0x5f30d9 = [];
                var _0x4f8a2b = this.getPoint();
                var _0x3ef231 = _0x5735bc.instance;
                if (_0x4f8a2b) {
                  _0x5f30d9.push("point: " + _0x4f8a2b);
                }
                if ((_0x4f8a2b = this.getIndex()) != null) {
                  _0x5f30d9.push("index: " + _0x4f8a2b);
                }
                if ((_0x4f8a2b = this.getTime()) != null) {
                  _0x5f30d9.push("time: " + _0x3ef231.number(_0x4f8a2b));
                }
                if (this._distance != null) {
                  _0x5f30d9.push("distance: " + _0x3ef231.number(this._distance));
                }
                return "{ " + _0x5f30d9.join(", ") + " }";
              },
              isTouching: function () {
                if ((_0x12059d = this._intersection) && this.getTangent().isCollinear(_0x12059d.getTangent())) {
                  var _0x515987 = this.getCurve();
                  var _0x12059d = _0x12059d.getCurve();
                  return !(_0x515987.isStraight() && _0x12059d.isStraight() && _0x515987.getLine().intersect(_0x12059d.getLine()));
                }
                return false;
              },
              isCrossing: function () {
                var _0x252f36 = this._intersection;
                if (!_0x252f36) {
                  return false;
                }
                var _0x5983a1 = this.getTime();
                var _0x35d069 = _0x252f36.getTime();
                var _0x20c482 = 0.99999999;
                var _0x4b75e4 = _0x5983a1 >= 1e-8 && _0x5983a1 <= _0x20c482;
                var _0x114ace = _0x35d069 >= 1e-8 && _0x35d069 <= _0x20c482;
                if (_0x4b75e4 && _0x114ace) {
                  return !this.isTouching();
                }
                var _0x1db3ec = this.getCurve();
                var _0x1496b3 = _0x1db3ec && _0x5983a1 < 1e-8 ? _0x1db3ec.getPrevious() : _0x1db3ec;
                var _0x1cb0ba = _0x252f36.getCurve();
                var _0x4b7a99 = _0x1cb0ba && _0x35d069 < 1e-8 ? _0x1cb0ba.getPrevious() : _0x1cb0ba;
                if (_0x20c482 < _0x5983a1) {
                  _0x1db3ec = _0x1db3ec.getNext();
                }
                if (_0x20c482 < _0x35d069) {
                  _0x1cb0ba = _0x1cb0ba.getNext();
                }
                if (!(_0x1496b3 && _0x1db3ec && _0x4b7a99 && _0x1cb0ba)) {
                  return false;
                }
                var _0x124ca1 = [];
                function _0x3fa562(_0x21e8a4, _0x402104) {
                  var _0x137203 = _0x21e8a4.getValues();
                  _0x21e8a4 = (_0x399741 = _0x53ec04.classify(_0x137203).roots || _0x53ec04.getPeaks(_0x137203)).length;
                  var _0x399741 = _0x53ec04.getLength(_0x137203, _0x402104 && _0x21e8a4 ? _0x399741[_0x21e8a4 - 1] : 0, !_0x402104 && _0x21e8a4 ? _0x399741[0] : 1);
                  _0x124ca1.push(_0x21e8a4 ? _0x399741 : _0x399741 / 32);
                }
                function _0x5c5a22(_0x287090, _0x9786d8, _0x5def52) {
                  if (_0x9786d8 < _0x5def52) {
                    return _0x9786d8 < _0x287090 && _0x287090 < _0x5def52;
                  } else {
                    return _0x9786d8 < _0x287090 || _0x287090 < _0x5def52;
                  }
                }
                if (!_0x4b75e4) {
                  _0x3fa562(_0x1496b3, true);
                  _0x3fa562(_0x1db3ec, false);
                }
                if (!_0x114ace) {
                  _0x3fa562(_0x4b7a99, true);
                  _0x3fa562(_0x1cb0ba, false);
                }
                _0x252f36 = this.getPoint();
                _0x20c482 = Math.min.apply(Math, _0x124ca1);
                _0x1db3ec = _0x4b75e4 ? _0x1db3ec.getTangentAtTime(_0x5983a1) : _0x1db3ec.getPointAt(_0x20c482).subtract(_0x252f36);
                _0x1496b3 = _0x4b75e4 ? _0x1db3ec.negate() : _0x1496b3.getPointAt(-_0x20c482).subtract(_0x252f36);
                _0x1cb0ba = _0x114ace ? _0x1cb0ba.getTangentAtTime(_0x35d069) : _0x1cb0ba.getPointAt(_0x20c482).subtract(_0x252f36);
                _0x252f36 = _0x114ace ? _0x1cb0ba.negate() : _0x4b7a99.getPointAt(-_0x20c482).subtract(_0x252f36);
                _0x1496b3 = _0x1496b3.getAngle();
                _0x1db3ec = _0x1db3ec.getAngle();
                _0x252f36 = _0x252f36.getAngle();
                _0x1cb0ba = _0x1cb0ba.getAngle();
                return !!(_0x4b75e4 ? _0x5c5a22(_0x1496b3, _0x252f36, _0x1cb0ba) ^ _0x5c5a22(_0x1db3ec, _0x252f36, _0x1cb0ba) && _0x5c5a22(_0x1496b3, _0x1cb0ba, _0x252f36) ^ _0x5c5a22(_0x1db3ec, _0x1cb0ba, _0x252f36) : _0x5c5a22(_0x252f36, _0x1496b3, _0x1db3ec) ^ _0x5c5a22(_0x1cb0ba, _0x1496b3, _0x1db3ec) && _0x5c5a22(_0x252f36, _0x1db3ec, _0x1496b3) ^ _0x5c5a22(_0x1cb0ba, _0x1db3ec, _0x1496b3));
              },
              hasOverlap: function () {
                return !!this._overlap;
              }
            }, _0x28b48a.each(_0x53ec04._evaluateMethods, function (_0x10518f) {
              var _0x432c16 = _0x10518f + "At";
              this[_0x10518f] = function () {
                var _0x23dd2d = this.getCurve();
                var _0x2f54ed = this.getTime();
                return _0x2f54ed != null && _0x23dd2d && _0x23dd2d[_0x432c16](_0x2f54ed, true);
              };
            }, {
              preserve: true
            }), new function () {
              function _0x4df7de(_0x2da2a2, _0x40f37c, _0x162dbb) {
                var _0x111fc6 = _0x2da2a2.length;
                var _0x16d0fb = 0;
                var _0x57ab8b = _0x111fc6 - 1;
                function _0x5f4bc9(_0x2d84ff, _0x2351c9) {
                  for (var _0x3b6158 = _0x2d84ff + _0x2351c9; _0x3b6158 >= -1 && _0x3b6158 <= _0x111fc6; _0x3b6158 += _0x2351c9) {
                    var _0x59c85f = _0x2da2a2[(_0x3b6158 % _0x111fc6 + _0x111fc6) % _0x111fc6];
                    if (!_0x40f37c.getPoint().isClose(_0x59c85f.getPoint(), 1e-7)) {
                      break;
                    }
                    if (_0x40f37c.equals(_0x59c85f)) {
                      return _0x59c85f;
                    }
                  }
                  return null;
                }
                for (; _0x16d0fb <= _0x57ab8b;) {
                  var _0x1a06ba;
                  var _0x4530e9 = _0x16d0fb + _0x57ab8b >>> 1;
                  var _0x489336 = _0x2da2a2[_0x4530e9];
                  if (_0x162dbb && (_0x1a06ba = _0x40f37c.equals(_0x489336) ? _0x489336 : _0x5f4bc9(_0x4530e9, -1) || _0x5f4bc9(_0x4530e9, 1))) {
                    if (_0x40f37c._overlap) {
                      _0x1a06ba._overlap = _0x1a06ba._intersection._overlap = true;
                    }
                    return _0x1a06ba;
                  }
                  var _0x3052f7 = _0x40f37c.getPath();
                  var _0x1c39f4 = _0x489336.getPath();
                  if ((_0x3052f7 !== _0x1c39f4 ? _0x3052f7._id - _0x1c39f4._id : _0x40f37c.getIndex() + _0x40f37c.getTime() - (_0x489336.getIndex() + _0x489336.getTime())) < 0) {
                    _0x57ab8b = _0x4530e9 - 1;
                  } else {
                    _0x16d0fb = 1 + _0x4530e9;
                  }
                }
                _0x2da2a2.splice(_0x16d0fb, 0, _0x40f37c);
                return _0x40f37c;
              }
              return {
                statics: {
                  insert: _0x4df7de,
                  expand: function (_0xc573da) {
                    for (var _0x342d21 = _0xc573da.slice(), _0x603dc5 = _0xc573da.length - 1; _0x603dc5 >= 0; _0x603dc5--) {
                      _0x4df7de(_0x342d21, _0xc573da[_0x603dc5]._intersection, false);
                    }
                    return _0x342d21;
                  }
                }
              };
            }());
            var _0xfff515 = _0x1f30bb.extend({
              _class: "PathItem",
              _selectBounds: false,
              _canScaleStroke: true,
              beans: true,
              initialize: function () {},
              statics: {
                create: function (_0x2cdcb9) {
                  var _0x35cd4b;
                  var _0x44dbf1;
                  var _0x441070;
                  if (_0x28b48a.isPlainObject(_0x2cdcb9)) {
                    _0x44dbf1 = _0x2cdcb9.segments;
                    _0x35cd4b = _0x2cdcb9.pathData;
                  } else if (Array.isArray(_0x2cdcb9)) {
                    _0x44dbf1 = _0x2cdcb9;
                  } else if (typeof _0x2cdcb9 == "string") {
                    _0x35cd4b = _0x2cdcb9;
                  }
                  if (_0x44dbf1) {
                    _0x441070 = (_0x441070 = _0x44dbf1[0]) && Array.isArray(_0x441070[0]);
                  } else if (_0x35cd4b) {
                    _0x441070 = (_0x35cd4b.match(/m/gi) || []).length > 1 || /z\s*\S+/i.test(_0x35cd4b);
                  }
                  return new (_0x441070 ? _0x5efee7 : _0x5615aa)(_0x2cdcb9);
                }
              },
              _asPathItem: function () {
                return this;
              },
              isClockwise: function () {
                return this.getArea() >= 0;
              },
              setClockwise: function (_0x543a88) {
                if (this.isClockwise() != (_0x543a88 = !!_0x543a88)) {
                  this.reverse();
                }
              },
              setPathData: function (_0x2612d4) {
                var _0x289f0f;
                var _0x4db347;
                var _0x190caa = _0x2612d4 && _0x2612d4.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/gi);
                var _0x315a55 = false;
                var _0x146cde = new _0xbc5c4a();
                var _0x36fd0d = new _0xbc5c4a();
                function _0xba35d4(_0x30d34c, _0x56770a) {
                  _0x30d34c = +_0x303eff[_0x30d34c];
                  if (_0x315a55) {
                    _0x30d34c += _0x146cde[_0x56770a];
                  }
                  return _0x30d34c;
                }
                function _0x469497(_0x205e32) {
                  return new _0xbc5c4a(_0xba35d4(_0x205e32, "x"), _0xba35d4(_0x205e32 + 1, "y"));
                }
                this.clear();
                for (var _0x57287c = 0, _0x15a45e = _0x190caa && _0x190caa.length; _0x57287c < _0x15a45e; _0x57287c++) {
                  var _0x303eff;
                  var _0x227228 = _0x190caa[_0x57287c];
                  var _0x286828 = _0x227228[0];
                  var _0xf25326 = _0x286828.toLowerCase();
                  var _0x378599 = (_0x303eff = _0x227228.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g)) && _0x303eff.length;
                  _0x315a55 = _0x286828 === _0xf25326;
                  if (!(_0x289f0f !== "z" || /[mz]/.test(_0xf25326))) {
                    this.moveTo(_0x146cde);
                  }
                  switch (_0xf25326) {
                    case "m":
                    case "l":
                      for (var _0x2369f1 = _0xf25326 === "m", _0x15d7dd = 0; _0x15d7dd < _0x378599; _0x15d7dd += 2) {
                        this[_0x2369f1 ? "moveTo" : "lineTo"](_0x146cde = _0x469497(_0x15d7dd));
                        if (_0x2369f1) {
                          _0x36fd0d = _0x146cde;
                          _0x2369f1 = false;
                        }
                      }
                      _0x4db347 = _0x146cde;
                      break;
                    case "h":
                    case "v":
                      var _0x226403 = _0xf25326 === "h" ? "x" : "y";
                      _0x146cde = _0x146cde.clone();
                      _0x15d7dd = 0;
                      for (; _0x15d7dd < _0x378599; _0x15d7dd++) {
                        _0x146cde[_0x226403] = _0xba35d4(_0x15d7dd, _0x226403);
                        this.lineTo(_0x146cde);
                      }
                      _0x4db347 = _0x146cde;
                      break;
                    case "c":
                      for (_0x15d7dd = 0; _0x15d7dd < _0x378599; _0x15d7dd += 6) {
                        this.cubicCurveTo(_0x469497(_0x15d7dd), _0x4db347 = _0x469497(_0x15d7dd + 2), _0x146cde = _0x469497(_0x15d7dd + 4));
                      }
                      break;
                    case "s":
                      for (_0x15d7dd = 0; _0x15d7dd < _0x378599; _0x15d7dd += 4) {
                        this.cubicCurveTo(/[cs]/.test(_0x289f0f) ? _0x146cde.multiply(2).subtract(_0x4db347) : _0x146cde, _0x4db347 = _0x469497(_0x15d7dd), _0x146cde = _0x469497(_0x15d7dd + 2));
                        _0x289f0f = _0xf25326;
                      }
                      break;
                    case "q":
                      for (_0x15d7dd = 0; _0x15d7dd < _0x378599; _0x15d7dd += 4) {
                        this.quadraticCurveTo(_0x4db347 = _0x469497(_0x15d7dd), _0x146cde = _0x469497(_0x15d7dd + 2));
                      }
                      break;
                    case "t":
                      for (_0x15d7dd = 0; _0x15d7dd < _0x378599; _0x15d7dd += 2) {
                        this.quadraticCurveTo(_0x4db347 = /[qt]/.test(_0x289f0f) ? _0x146cde.multiply(2).subtract(_0x4db347) : _0x146cde, _0x146cde = _0x469497(_0x15d7dd));
                        _0x289f0f = _0xf25326;
                      }
                      break;
                    case "a":
                      for (_0x15d7dd = 0; _0x15d7dd < _0x378599; _0x15d7dd += 7) {
                        this.arcTo(_0x146cde = _0x469497(_0x15d7dd + 5), new _0x236987(+_0x303eff[_0x15d7dd], +_0x303eff[_0x15d7dd + 1]), +_0x303eff[_0x15d7dd + 2], +_0x303eff[_0x15d7dd + 4], +_0x303eff[_0x15d7dd + 3]);
                      }
                      break;
                    case "z":
                      this.closePath(1e-12);
                      _0x146cde = _0x36fd0d;
                  }
                  _0x289f0f = _0xf25326;
                }
              },
              _canComposite: function () {
                return !(this.hasFill() && this.hasStroke());
              },
              _contains: function (_0x239750) {
                return (_0x239750 = _0x239750.isInside(this.getBounds({
                  internal: true,
                  handle: true
                })) ? this._getWinding(_0x239750) : {}).onPath || !!(true ? _0x239750.windingL & 1 || _0x239750.windingR & 1 : _0x239750.winding);
              },
              getIntersections: function (_0x1ee9e0, _0xafc682, _0x16cea2, _0x58e35e) {
                var _0x236329 = this === _0x1ee9e0 || !_0x1ee9e0;
                var _0x243028 = this._matrix._orNullIfIdentity();
                _0x16cea2 = _0x236329 ? _0x243028 : (_0x16cea2 || _0x1ee9e0._matrix)._orNullIfIdentity();
                if (_0x236329 || this.getBounds(_0x243028).intersects(_0x1ee9e0.getBounds(_0x16cea2), 1e-12)) {
                  return _0x53ec04.getIntersections(this.getCurves(), !_0x236329 && _0x1ee9e0.getCurves(), _0xafc682, _0x243028, _0x16cea2, _0x58e35e);
                } else {
                  return [];
                }
              },
              getCrossings: function (_0x55d1d6) {
                return this.getIntersections(_0x55d1d6, function (_0x315180) {
                  return _0x315180.isCrossing();
                });
              },
              getNearestLocation: function () {
                for (var _0x25b7bf = _0xbc5c4a.read(arguments), _0x27e178 = this.getCurves(), _0x12189e = Infinity, _0x1fb0f9 = null, _0x321e6d = 0, _0x5c2289 = _0x27e178.length; _0x321e6d < _0x5c2289; _0x321e6d++) {
                  var _0x1f6d48 = _0x27e178[_0x321e6d].getNearestLocation(_0x25b7bf);
                  if (_0x1f6d48._distance < _0x12189e) {
                    _0x12189e = _0x1f6d48._distance;
                    _0x1fb0f9 = _0x1f6d48;
                  }
                }
                return _0x1fb0f9;
              },
              getNearestPoint: function () {
                var _0x44c480 = this.getNearestLocation.apply(this, arguments);
                return _0x44c480 && _0x44c480.getPoint();
              },
              interpolate: function (_0x24f3f0, _0x58c0b8, _0x14a3a3) {
                var _0x9ad7d1 = !this._children;
                var _0x38502f = _0x9ad7d1 ? "_segments" : "_children";
                var _0x2e7145 = _0x24f3f0[_0x38502f];
                var _0x49ac91 = _0x58c0b8[_0x38502f];
                var _0x53b1f1 = this[_0x38502f];
                if (!_0x2e7145 || !_0x49ac91 || _0x2e7145.length !== _0x49ac91.length) {
                  throw new Error(".......");
                }
                _0x58c0b8 = _0x53b1f1.length;
                var _0x20eca2 = _0x49ac91.length;
                if (_0x58c0b8 < _0x20eca2) {
                  for (var _0x456a64 = _0x9ad7d1 ? _0x2657e4 : _0x5615aa, _0x3135f1 = _0x58c0b8; _0x3135f1 < _0x20eca2; _0x3135f1++) {
                    this.add(new _0x456a64());
                  }
                } else if (_0x20eca2 < _0x58c0b8) {
                  this[_0x9ad7d1 ? "removeSegments" : "removeChildren"](_0x20eca2, _0x58c0b8);
                }
                for (_0x3135f1 = 0; _0x3135f1 < _0x20eca2; _0x3135f1++) {
                  _0x53b1f1[_0x3135f1].interpolate(_0x2e7145[_0x3135f1], _0x49ac91[_0x3135f1], _0x14a3a3);
                }
                if (_0x9ad7d1) {
                  this.setClosed(_0x24f3f0._closed);
                  this._changed(9);
                }
              },
              compare: function (_0x85468e) {
                var _0x4c8f99 = false;
                if (_0x85468e) {
                  var _0x15b941 = this._children || [this];
                  var _0x4bc05f = _0x85468e._children ? _0x85468e._children.slice() : [_0x85468e];
                  var _0x31618f = _0x15b941.length;
                  _0x85468e = _0x4bc05f.length;
                  var _0x1cfbb2 = [];
                  var _0x3dc954 = 0;
                  _0x4c8f99 = true;
                  for (var _0x2ed083 = _0x402ec8.findItemBoundsCollisions(_0x15b941, _0x4bc05f, _0x3c029b.GEOMETRIC_EPSILON), _0x9e6ad6 = _0x31618f - 1; _0x9e6ad6 >= 0 && _0x4c8f99; _0x9e6ad6--) {
                    var _0x56bedd = _0x15b941[_0x9e6ad6];
                    _0x4c8f99 = false;
                    var _0x3cb1a6 = _0x2ed083[_0x9e6ad6];
                    if (_0x3cb1a6) {
                      for (var _0x33bf49 = _0x3cb1a6.length - 1; _0x33bf49 >= 0 && !_0x4c8f99; _0x33bf49--) {
                        if (_0x56bedd.compare(_0x4bc05f[_0x3cb1a6[_0x33bf49]])) {
                          if (!_0x1cfbb2[_0x3cb1a6[_0x33bf49]]) {
                            _0x1cfbb2[_0x3cb1a6[_0x33bf49]] = true;
                            _0x3dc954++;
                          }
                          _0x4c8f99 = true;
                        }
                      }
                    }
                  }
                  _0x4c8f99 = _0x4c8f99 && _0x3dc954 === _0x85468e;
                }
                return _0x4c8f99;
              }
            });
            var _0x5615aa = _0xfff515.extend({
              _class: "Path",
              _serializeFields: {
                segments: [],
                closed: false
              },
              initialize: function (_0x22b6a6) {
                this._closed = false;
                this._segments = [];
                this._version = 0;
                var _0x43fd7d = arguments;
                if ((_0x43fd7d = Array.isArray(_0x22b6a6) ? typeof _0x22b6a6[0] == "object" ? _0x22b6a6 : _0x43fd7d : !_0x22b6a6 || _0x22b6a6.size !== _0x2bd7be || _0x22b6a6.x === _0x2bd7be && _0x22b6a6.point === _0x2bd7be ? null : _0x43fd7d) && _0x43fd7d.length > 0) {
                  this.setSegments(_0x43fd7d);
                } else {
                  this._curves = _0x2bd7be;
                  this._segmentSelection = 0;
                  if (!(_0x43fd7d || typeof _0x22b6a6 != "string")) {
                    this.setPathData(_0x22b6a6);
                    _0x22b6a6 = null;
                  }
                }
                this._initialize(!_0x43fd7d && _0x22b6a6);
              },
              _equals: function (_0x4f9f04) {
                return this._closed === _0x4f9f04._closed && _0x28b48a.equals(this._segments, _0x4f9f04._segments);
              },
              copyContent: function (_0x5bfa77) {
                this.setSegments(_0x5bfa77._segments);
                this._closed = _0x5bfa77._closed;
              },
              _changed: function _0x59b19b(_0x340023) {
                _0x59b19b.base.call(this, _0x340023);
                if (_0x340023 & 8) {
                  this._length = this._area = _0x2bd7be;
                  if (_0x340023 & 32) {
                    this._version++;
                  } else if (this._curves) {
                    for (var _0x2b9996 = 0, _0x332a9b = this._curves.length; _0x2b9996 < _0x332a9b; _0x2b9996++) {
                      this._curves[_0x2b9996]._changed();
                    }
                  }
                } else if (_0x340023 & 64) {
                  this._bounds = _0x2bd7be;
                }
              },
              getStyle: function () {
                var _0x51c563 = this._parent;
                return (_0x51c563 instanceof _0x5efee7 ? _0x51c563 : this)._style;
              },
              getSegments: function () {
                return this._segments;
              },
              setSegments: function (_0x1314c5) {
                var _0x478407;
                var _0x2741ff = this.isFullySelected();
                var _0x148aa5 = _0x1314c5 && _0x1314c5.length;
                this._segments.length = 0;
                this._segmentSelection = 0;
                this._curves = _0x2bd7be;
                if (_0x148aa5) {
                  if (typeof (_0x478407 = _0x1314c5[_0x148aa5 - 1]) == "boolean") {
                    this.setClosed(_0x478407);
                    _0x148aa5--;
                  }
                  this._add(_0x2657e4.readList(_0x1314c5, 0, {}, _0x148aa5));
                }
                if (_0x2741ff) {
                  this.setFullySelected(true);
                }
              },
              getFirstSegment: function () {
                return this._segments[0];
              },
              getLastSegment: function () {
                return this._segments[this._segments.length - 1];
              },
              getCurves: function () {
                var _0x4dc629 = this._curves;
                var _0x59efe7 = this._segments;
                if (!_0x4dc629) {
                  for (var _0x214e49 = this._countCurves(), _0x578523 = (_0x4dc629 = this._curves = new Array(_0x214e49), 0); _0x578523 < _0x214e49; _0x578523++) {
                    _0x4dc629[_0x578523] = new _0x53ec04(this, _0x59efe7[_0x578523], _0x59efe7[_0x578523 + 1] || _0x59efe7[0]);
                  }
                }
                return _0x4dc629;
              },
              getFirstCurve: function () {
                return this.getCurves()[0];
              },
              getLastCurve: function () {
                var _0x5cbca8 = this.getCurves();
                return _0x5cbca8[_0x5cbca8.length - 1];
              },
              isClosed: function () {
                return this._closed;
              },
              setClosed: function (_0x4441ed) {
                var _0x257d4e;
                if (this._closed != (_0x4441ed = !!_0x4441ed)) {
                  this._closed = _0x4441ed;
                  if (this._curves) {
                    _0x257d4e = this._curves.length = this._countCurves();
                    if (_0x4441ed) {
                      this._curves[_0x257d4e - 1] = new _0x53ec04(this, this._segments[_0x257d4e - 1], this._segments[0]);
                    }
                  }
                  this._changed(41);
                }
              }
            }, {
              beans: true,
              getPathData: function (_0x8928aa, _0x17a13c) {
                var _0x3f9521;
                var _0x21a352;
                var _0x47cb57;
                var _0x574df9;
                var _0x1bd042;
                var _0x7f4f20;
                var _0x3ba8dd;
                var _0x5dbc08;
                var _0xd6dec5 = this._segments;
                var _0x5ce38d = _0xd6dec5.length;
                var _0x20fdb3 = new _0x5735bc(_0x17a13c);
                var _0x4eca39 = new Array(6);
                var _0x123c34 = true;
                var _0x563a00 = [];
                function _0x3f90f9(_0x30d4ad, _0x3c3f44) {
                  _0x30d4ad._transformCoordinates(_0x8928aa, _0x4eca39);
                  _0x3f9521 = _0x4eca39[0];
                  _0x21a352 = _0x4eca39[1];
                  if (_0x123c34) {
                    _0x563a00.push("M" + _0x20fdb3.pair(_0x3f9521, _0x21a352));
                    _0x123c34 = false;
                  } else {
                    _0x1bd042 = _0x4eca39[2];
                    _0x7f4f20 = _0x4eca39[3];
                    if (_0x1bd042 === _0x3f9521 && _0x7f4f20 === _0x21a352 && _0x3ba8dd === _0x47cb57 && _0x5dbc08 === _0x574df9) {
                      if (!_0x3c3f44) {
                        _0x30d4ad = _0x3f9521 - _0x47cb57;
                        _0x3c3f44 = _0x21a352 - _0x574df9;
                        _0x563a00.push(_0x30d4ad == 0 ? "v" + _0x20fdb3.number(_0x3c3f44) : _0x3c3f44 == 0 ? "h" + _0x20fdb3.number(_0x30d4ad) : "l" + _0x20fdb3.pair(_0x30d4ad, _0x3c3f44));
                      }
                    } else {
                      _0x563a00.push("c" + _0x20fdb3.pair(_0x3ba8dd - _0x47cb57, _0x5dbc08 - _0x574df9) + " " + _0x20fdb3.pair(_0x1bd042 - _0x47cb57, _0x7f4f20 - _0x574df9) + " " + _0x20fdb3.pair(_0x3f9521 - _0x47cb57, _0x21a352 - _0x574df9));
                    }
                  }
                  _0x47cb57 = _0x3f9521;
                  _0x574df9 = _0x21a352;
                  _0x3ba8dd = _0x4eca39[4];
                  _0x5dbc08 = _0x4eca39[5];
                }
                if (!_0x5ce38d) {
                  return "";
                }
                for (var _0x360f5b = 0; _0x360f5b < _0x5ce38d; _0x360f5b++) {
                  _0x3f90f9(_0xd6dec5[_0x360f5b]);
                }
                if (this._closed && _0x5ce38d > 0) {
                  _0x3f90f9(_0xd6dec5[0], true);
                  _0x563a00.push("z");
                }
                return _0x563a00.join("");
              },
              isEmpty: function () {
                return !this._segments.length;
              },
              _transformContent: function (_0x118a23) {
                for (var _0x303486 = this._segments, _0x39573b = new Array(6), _0x1c4220 = 0, _0x10c991 = _0x303486.length; _0x1c4220 < _0x10c991; _0x1c4220++) {
                  _0x303486[_0x1c4220]._transformCoordinates(_0x118a23, _0x39573b, true);
                }
                return true;
              },
              _add: function (_0xa51afa, _0x479bfe) {
                for (var _0x467083 = this._segments, _0x4fd3f4 = this._curves, _0x5e5997 = _0xa51afa.length, _0x1df73b = (_0x479bfe = (_0x26460e = _0x479bfe == null) ? _0x467083.length : _0x479bfe, 0); _0x1df73b < _0x5e5997; _0x1df73b++) {
                  var _0x50ade0 = _0xa51afa[_0x1df73b];
                  (_0x50ade0 = _0x50ade0._path ? _0xa51afa[_0x1df73b] = _0x50ade0.clone() : _0x50ade0)._path = this;
                  _0x50ade0._index = _0x479bfe + _0x1df73b;
                  if (_0x50ade0._selection) {
                    this._updateSelection(_0x50ade0, 0, _0x50ade0._selection);
                  }
                }
                if (_0x26460e) {
                  _0x28b48a.push(_0x467083, _0xa51afa);
                } else {
                  _0x467083.splice.apply(_0x467083, [_0x479bfe, 0].concat(_0xa51afa));
                  _0x1df73b = _0x479bfe + _0x5e5997;
                  for (var _0x20fec4 = _0x467083.length; _0x1df73b < _0x20fec4; _0x1df73b++) {
                    _0x467083[_0x1df73b]._index = _0x1df73b;
                  }
                }
                if (_0x4fd3f4) {
                  var _0x2f7126 = this._countCurves();
                  var _0x39dfbf = _0x479bfe > 0 && _0x479bfe + _0x5e5997 - 1 === _0x2f7126 ? _0x479bfe - 1 : _0x479bfe;
                  var _0x26460e = _0x39dfbf;
                  var _0x23c041 = Math.min(_0x39dfbf + _0x5e5997, _0x2f7126);
                  if (_0xa51afa._curves) {
                    _0x4fd3f4.splice.apply(_0x4fd3f4, [_0x39dfbf, 0].concat(_0xa51afa._curves));
                    _0x26460e += _0xa51afa._curves.length;
                  }
                  _0x1df73b = _0x26460e;
                  for (; _0x1df73b < _0x23c041; _0x1df73b++) {
                    _0x4fd3f4.splice(_0x1df73b, 0, new _0x53ec04(this, null, null));
                  }
                  this._adjustCurves(_0x39dfbf, _0x23c041);
                }
                this._changed(41);
                return _0xa51afa;
              },
              _adjustCurves: function (_0x51e76b, _0x2d1526) {
                for (var _0x278b33, _0x467ac1 = this._segments, _0xe40f90 = this._curves, _0x4d346d = _0x51e76b; _0x4d346d < _0x2d1526; _0x4d346d++) {
                  (_0x278b33 = _0xe40f90[_0x4d346d])._path = this;
                  _0x278b33._segment1 = _0x467ac1[_0x4d346d];
                  _0x278b33._segment2 = _0x467ac1[_0x4d346d + 1] || _0x467ac1[0];
                  _0x278b33._changed();
                }
                if (_0x278b33 = _0xe40f90[this._closed && !_0x51e76b ? _0x467ac1.length - 1 : _0x51e76b - 1]) {
                  _0x278b33._segment2 = _0x467ac1[_0x51e76b] || _0x467ac1[0];
                  _0x278b33._changed();
                }
                if (_0x278b33 = _0xe40f90[_0x2d1526]) {
                  _0x278b33._segment1 = _0x467ac1[_0x2d1526];
                  _0x278b33._changed();
                }
              },
              _countCurves: function () {
                var _0x2fca65 = this._segments.length;
                if (!this._closed && _0x2fca65 > 0) {
                  return _0x2fca65 - 1;
                } else {
                  return _0x2fca65;
                }
              },
              add: function (_0xaebd01) {
                var _0x485435 = arguments;
                if (_0x485435.length > 1 && typeof _0xaebd01 != "number") {
                  return this._add(_0x2657e4.readList(_0x485435));
                } else {
                  return this._add([_0x2657e4.read(_0x485435)])[0];
                }
              },
              insert: function (_0x5e44b8, _0x49a835) {
                var _0x3df5ae = arguments;
                if (_0x3df5ae.length > 2 && typeof _0x49a835 != "number") {
                  return this._add(_0x2657e4.readList(_0x3df5ae, 1), _0x5e44b8);
                } else {
                  return this._add([_0x2657e4.read(_0x3df5ae, 1)], _0x5e44b8)[0];
                }
              },
              addSegment: function () {
                return this._add([_0x2657e4.read(arguments)])[0];
              },
              insertSegment: function (_0x3e1b78) {
                return this._add([_0x2657e4.read(arguments, 1)], _0x3e1b78)[0];
              },
              addSegments: function (_0xd4230) {
                return this._add(_0x2657e4.readList(_0xd4230));
              },
              insertSegments: function (_0x2341ee, _0x31f718) {
                return this._add(_0x2657e4.readList(_0x31f718), _0x2341ee);
              },
              removeSegment: function (_0x41e198) {
                return this.removeSegments(_0x41e198, _0x41e198 + 1)[0] || null;
              },
              removeSegments: function (_0x387c65, _0xc84d4f, _0x4c80b1) {
                _0x387c65 = _0x387c65 || 0;
                _0xc84d4f = _0x28b48a.pick(_0xc84d4f, this._segments.length);
                var _0x2a48b8 = this._segments;
                var _0x7947b8 = this._curves;
                var _0x1a37c3 = _0x2a48b8.length;
                var _0x313983 = _0x2a48b8.splice(_0x387c65, _0xc84d4f - _0x387c65);
                var _0xf11dc5 = _0x313983.length;
                if (!_0xf11dc5) {
                  return _0x313983;
                }
                for (var _0x354b01 = 0; _0x354b01 < _0xf11dc5; _0x354b01++) {
                  var _0x1e7482 = _0x313983[_0x354b01];
                  if (_0x1e7482._selection) {
                    this._updateSelection(_0x1e7482, _0x1e7482._selection, 0);
                  }
                  _0x1e7482._index = _0x1e7482._path = null;
                }
                _0x354b01 = _0x387c65;
                for (var _0x38cb93 = _0x2a48b8.length; _0x354b01 < _0x38cb93; _0x354b01++) {
                  _0x2a48b8[_0x354b01]._index = _0x354b01;
                }
                if (_0x7947b8) {
                  _0x387c65 = _0x387c65 > 0 && _0xc84d4f === _0x1a37c3 + (this._closed ? 1 : 0) ? _0x387c65 - 1 : _0x387c65;
                  _0x354b01 = (_0x7947b8 = _0x7947b8.splice(_0x387c65, _0xf11dc5)).length - 1;
                  for (; _0x354b01 >= 0; _0x354b01--) {
                    _0x7947b8[_0x354b01]._path = null;
                  }
                  if (_0x4c80b1) {
                    _0x313983._curves = _0x7947b8.slice(1);
                  }
                  this._adjustCurves(_0x387c65, _0x387c65);
                }
                this._changed(41);
                return _0x313983;
              },
              clear: "#removeSegments",
              hasHandles: function () {
                for (var _0x7241be = this._segments, _0x5002e4 = 0, _0x229ffb = _0x7241be.length; _0x5002e4 < _0x229ffb; _0x5002e4++) {
                  if (_0x7241be[_0x5002e4].hasHandles()) {
                    return true;
                  }
                }
                return false;
              },
              clearHandles: function () {
                for (var _0x3716ea = this._segments, _0x4041a4 = 0, _0x5b8ec0 = _0x3716ea.length; _0x4041a4 < _0x5b8ec0; _0x4041a4++) {
                  _0x3716ea[_0x4041a4].clearHandles();
                }
              },
              getLength: function () {
                if (this._length == null) {
                  for (var _0x27bba4 = this.getCurves(), _0x41b59f = 0, _0x2d6d9f = 0, _0x51e79c = _0x27bba4.length; _0x2d6d9f < _0x51e79c; _0x2d6d9f++) {
                    _0x41b59f += _0x27bba4[_0x2d6d9f].getLength();
                  }
                  this._length = _0x41b59f;
                }
                return this._length;
              },
              getArea: function () {
                if ((_0x54926b = this._area) == null) {
                  for (var _0x599eae = this._segments, _0x2ff89e = this._closed, _0x54926b = 0, _0xcb50a2 = 0, _0x4d1ace = _0x599eae.length; _0xcb50a2 < _0x4d1ace; _0xcb50a2++) {
                    var _0x417da7 = _0xcb50a2 + 1 === _0x4d1ace;
                    _0x54926b += _0x53ec04.getArea(_0x53ec04.getValues(_0x599eae[_0xcb50a2], _0x599eae[_0x417da7 ? 0 : _0xcb50a2 + 1], null, _0x417da7 && !_0x2ff89e));
                  }
                  this._area = _0x54926b;
                }
                return _0x54926b;
              },
              isFullySelected: function () {
                var _0x493277 = this._segments.length;
                return this.isSelected() && _0x493277 > 0 && this._segmentSelection === _0x493277 * 7;
              },
              setFullySelected: function (_0x1824e4) {
                if (_0x1824e4) {
                  this._selectSegments(true);
                }
                this.setSelected(_0x1824e4);
              },
              setSelection: function _0xd6c3a6(_0x22496d) {
                if (!(_0x22496d & 1)) {
                  this._selectSegments(false);
                }
                _0xd6c3a6.base.call(this, _0x22496d);
              },
              _selectSegments: function (_0x5d5006) {
                var _0x582f9f = this._segments;
                var _0x37684e = _0x582f9f.length;
                var _0x1cc634 = _0x5d5006 ? 7 : 0;
                this._segmentSelection = _0x1cc634 * _0x37684e;
                for (var _0x716b93 = 0; _0x716b93 < _0x37684e; _0x716b93++) {
                  _0x582f9f[_0x716b93]._selection = _0x1cc634;
                }
              },
              _updateSelection: function (_0x3718cd, _0x6ccdeb, _0x5c9d61) {
                _0x3718cd._selection = _0x5c9d61;
                if ((this._segmentSelection += _0x5c9d61 - _0x6ccdeb) > 0) {
                  this.setSelected(true);
                }
              },
              divideAt: function (_0x5f475d) {
                var _0x32c86e;
                if ((_0x5f475d = this.getLocationAt(_0x5f475d)) && (_0x32c86e = _0x5f475d.getCurve().divideAt(_0x5f475d.getCurveOffset()))) {
                  return _0x32c86e._segment1;
                } else {
                  return null;
                }
              },
              splitAt: function (_0x4079f8) {
                var _0x47b27b = this.getLocationAt(_0x4079f8);
                var _0x3ec881 = _0x47b27b && _0x47b27b.index;
                if ((_0x4079f8 = _0x47b27b && _0x47b27b.time) > 0.99999999) {
                  _0x3ec881++;
                  _0x4079f8 = 0;
                }
                _0x47b27b = this.getCurves();
                if (_0x3ec881 >= 0 && _0x3ec881 < _0x47b27b.length) {
                  if (_0x4079f8 >= 1e-8) {
                    _0x47b27b[_0x3ec881++].divideAtTime(_0x4079f8);
                  }
                  var _0x2ca78c;
                  _0x3ec881 = this.removeSegments(_0x3ec881, this._segments.length, true);
                  if (this._closed) {
                    this.setClosed(false);
                    _0x2ca78c = this;
                  } else {
                    (_0x2ca78c = new _0x5615aa(_0x1f30bb.NO_INSERT)).insertAbove(this);
                    _0x2ca78c.copyAttributes(this);
                  }
                  _0x2ca78c._add(_0x3ec881, 0);
                  this.addSegment(_0x3ec881[0]);
                  return _0x2ca78c;
                }
                return null;
              },
              split: function (_0x3fd076, _0x1b4c65) {
                if ((_0x1b4c65 = _0x1b4c65 === _0x2bd7be ? _0x3fd076 : (_0x3fd076 = this.getCurves()[_0x3fd076]) && _0x3fd076.getLocationAtTime(_0x1b4c65)) != null) {
                  return this.splitAt(_0x1b4c65);
                } else {
                  return null;
                }
              },
              join: function (_0x1c39a5, _0x2d8451) {
                var _0x2e9b4c = _0x2d8451 || 0;
                if (_0x1c39a5 && _0x1c39a5 !== this) {
                  var _0x30c1dc = _0x1c39a5._segments;
                  var _0x318274 = this.getLastSegment();
                  var _0x4add02 = _0x1c39a5.getLastSegment();
                  if (!_0x4add02) {
                    return this;
                  }
                  if (_0x318274 && _0x318274._point.isClose(_0x4add02._point, _0x2e9b4c)) {
                    _0x1c39a5.reverse();
                  }
                  _0x2d8451 = _0x1c39a5.getFirstSegment();
                  if (_0x318274 && _0x318274._point.isClose(_0x2d8451._point, _0x2e9b4c)) {
                    _0x318274.setHandleOut(_0x2d8451._handleOut);
                    this._add(_0x30c1dc.slice(1));
                  } else {
                    if ((_0x318274 = this.getFirstSegment()) && _0x318274._point.isClose(_0x2d8451._point, _0x2e9b4c)) {
                      _0x1c39a5.reverse();
                    }
                    _0x4add02 = _0x1c39a5.getLastSegment();
                    if (_0x318274 && _0x318274._point.isClose(_0x4add02._point, _0x2e9b4c)) {
                      _0x318274.setHandleIn(_0x4add02._handleIn);
                      this._add(_0x30c1dc.slice(0, _0x30c1dc.length - 1), 0);
                    } else {
                      this._add(_0x30c1dc.slice());
                    }
                  }
                  if (_0x1c39a5._closed) {
                    this._add([_0x30c1dc[0]]);
                  }
                  _0x1c39a5.remove();
                }
                if ((_0x30c1dc = this.getFirstSegment()) !== (_0x1c39a5 = this.getLastSegment()) && _0x30c1dc._point.isClose(_0x1c39a5._point, _0x2e9b4c)) {
                  _0x30c1dc.setHandleIn(_0x1c39a5._handleIn);
                  _0x1c39a5.remove();
                  this.setClosed(true);
                }
                return this;
              },
              reduce: function (_0x535820) {
                for (var _0x5b5036 = this.getCurves(), _0x4c3638 = _0x535820 && _0x535820.simplify, _0x1baa24 = _0x4c3638 ? 1e-7 : 0, _0xdd9281 = _0x5b5036.length - 1; _0xdd9281 >= 0; _0xdd9281--) {
                  var _0x5d5029 = _0x5b5036[_0xdd9281];
                  if (!_0x5d5029.hasHandles() && (!_0x5d5029.hasLength(_0x1baa24) || _0x4c3638 && _0x5d5029.isCollinear(_0x5d5029.getNext()))) {
                    _0x5d5029.remove();
                  }
                }
                return this;
              },
              reverse: function () {
                this._segments.reverse();
                for (var _0x3e7898 = 0, _0x185403 = this._segments.length; _0x3e7898 < _0x185403; _0x3e7898++) {
                  var _0x2ab0d9 = this._segments[_0x3e7898];
                  var _0x254b8d = _0x2ab0d9._handleIn;
                  _0x2ab0d9._handleIn = _0x2ab0d9._handleOut;
                  _0x2ab0d9._handleOut = _0x254b8d;
                  _0x2ab0d9._index = _0x3e7898;
                }
                this._curves = null;
                this._changed(9);
              },
              flatten: function (_0x5b1f4d) {
                for (var _0x599c6e = new _0x5de3f7(this, _0x5b1f4d || 0.25, 256, true).parts, _0x558d46 = _0x599c6e.length, _0x1c101d = [], _0x177d5a = 0; _0x177d5a < _0x558d46; _0x177d5a++) {
                  _0x1c101d.push(new _0x2657e4(_0x599c6e[_0x177d5a].curve.slice(0, 2)));
                }
                if (!this._closed && _0x558d46 > 0) {
                  _0x1c101d.push(new _0x2657e4(_0x599c6e[_0x558d46 - 1].curve.slice(6)));
                }
                this.setSegments(_0x1c101d);
              },
              simplify: function (_0x3ba132) {
                if (_0x3ba132 = new _0xce849c(this).fit(_0x3ba132 || 2.5)) {
                  this.setSegments(_0x3ba132);
                }
                return !!_0x3ba132;
              },
              smooth: function (_0x4f3cf7) {
                var _0x2edfc2 = this;
                var _0x499c5e = _0x4f3cf7 || {};
                _0x4f3cf7 = _0x499c5e.type || "asymmetric";
                var _0x212284 = this._segments;
                var _0x281e32 = _0x212284.length;
                var _0x4bd4b4 = this._closed;
                function _0x3308e4(_0x3ad9ed, _0x362ace) {
                  var _0x2d4689 = _0x3ad9ed && _0x3ad9ed.index;
                  if (_0x2d4689 != null) {
                    var _0x4fc785 = _0x3ad9ed.path;
                    if (_0x4fc785 && _0x4fc785 !== _0x2edfc2) {
                      throw new Error(".......");
                    }
                    if (_0x362ace && _0x3ad9ed instanceof _0x53ec04) {
                      _0x2d4689++;
                    }
                  } else {
                    _0x2d4689 = typeof _0x3ad9ed == "number" ? _0x3ad9ed : _0x362ace;
                  }
                  return Math.min(_0x2d4689 < 0 && _0x4bd4b4 ? _0x2d4689 % _0x281e32 : _0x2d4689 < 0 ? _0x2d4689 + _0x281e32 : _0x2d4689, _0x281e32 - 1);
                }
                var _0x5cd91d = _0x4bd4b4 && _0x499c5e.from === _0x2bd7be && _0x499c5e.to === _0x2bd7be;
                var _0x1c583d = _0x3308e4(_0x499c5e.from, 0);
                var _0x39f2f1 = _0x3308e4(_0x499c5e.to, _0x281e32 - 1);
                if (_0x39f2f1 < _0x1c583d) {
                  if (_0x4bd4b4) {
                    _0x1c583d -= _0x281e32;
                  } else {
                    _0x1657c3 = _0x1c583d;
                    _0x1c583d = _0x39f2f1;
                    _0x39f2f1 = _0x1657c3;
                  }
                }
                if (/^(?:asymmetric|continuous)$/.test(_0x4f3cf7)) {
                  var _0x4dc088 = _0x4f3cf7 === "asymmetric";
                  var _0x1657c3 = Math.min;
                  var _0x451a75 = (_0x4f3cf7 = _0x39f2f1 - _0x1c583d + 1) - 1;
                  var _0x47effe = _0x4f3cf7 = _0x5cd91d ? _0x1657c3(_0x4f3cf7, 4) : 1;
                  _0x4f3cf7 = _0x4f3cf7;
                  var _0x11a302 = [];
                  if (!_0x4bd4b4) {
                    _0x47effe = _0x1657c3(1, _0x1c583d);
                    _0x4f3cf7 = _0x1657c3(1, _0x281e32 - _0x39f2f1 - 1);
                  }
                  if (!((_0x451a75 += _0x47effe + _0x4f3cf7) <= 1)) {
                    for (var _0x4e2f50 = 0, _0x2552d6 = _0x1c583d - _0x47effe; _0x4e2f50 <= _0x451a75; _0x4e2f50++, _0x2552d6++) {
                      _0x11a302[_0x4e2f50] = _0x212284[(_0x2552d6 < 0 ? _0x2552d6 + _0x281e32 : _0x2552d6) % _0x281e32]._point;
                    }
                    var _0x2b10d9 = _0x451a75 - 1;
                    var _0x24fc84 = [_0x30a861 = _0x11a302[0]._x + _0x11a302[1]._x * 2];
                    var _0x16977f = [_0x4768d1 = _0x11a302[0]._y + _0x11a302[1]._y * 2];
                    var _0x32b382 = [_0x11072d = 2];
                    var _0x3d471d = [];
                    var _0x39fd14 = [];
                    for (_0x4e2f50 = 1; _0x4e2f50 < _0x451a75; _0x4e2f50++) {
                      var _0x212fa6 = _0x4e2f50 < _0x2b10d9;
                      var _0x3b669b = _0x212fa6 ? 4 : _0x4dc088 ? 3 : 8;
                      var _0x11601c = _0x212fa6 ? 2 : _0x4dc088 ? 0 : 1;
                      var _0x3b9477 = (_0x212fa6 || _0x4dc088 ? 1 : 2) / _0x11072d;
                      var _0x11072d = _0x32b382[_0x4e2f50] = (_0x212fa6 ? 4 : _0x4dc088 ? 2 : 7) - _0x3b9477;
                      var _0x30a861 = _0x24fc84[_0x4e2f50] = _0x3b669b * _0x11a302[_0x4e2f50]._x + _0x11601c * _0x11a302[_0x4e2f50 + 1]._x - _0x3b9477 * _0x30a861;
                      var _0x4768d1 = _0x16977f[_0x4e2f50] = _0x3b669b * _0x11a302[_0x4e2f50]._y + _0x11601c * _0x11a302[_0x4e2f50 + 1]._y - _0x3b9477 * _0x4768d1;
                    }
                    _0x3d471d[_0x2b10d9] = _0x24fc84[_0x2b10d9] / _0x32b382[_0x2b10d9];
                    _0x39fd14[_0x2b10d9] = _0x16977f[_0x2b10d9] / _0x32b382[_0x2b10d9];
                    _0x4e2f50 = _0x451a75 - 2;
                    for (; _0x4e2f50 >= 0; _0x4e2f50--) {
                      _0x3d471d[_0x4e2f50] = (_0x24fc84[_0x4e2f50] - _0x3d471d[_0x4e2f50 + 1]) / _0x32b382[_0x4e2f50];
                      _0x39fd14[_0x4e2f50] = (_0x16977f[_0x4e2f50] - _0x39fd14[_0x4e2f50 + 1]) / _0x32b382[_0x4e2f50];
                    }
                    _0x3d471d[_0x451a75] = (_0x11a302[_0x451a75]._x * 3 - _0x3d471d[_0x2b10d9]) / 2;
                    _0x39fd14[_0x451a75] = (_0x11a302[_0x451a75]._y * 3 - _0x39fd14[_0x2b10d9]) / 2;
                    _0x4e2f50 = _0x47effe;
                    var _0x59fbad = _0x451a75 - _0x4f3cf7;
                    for (_0x2552d6 = _0x1c583d; _0x4e2f50 <= _0x59fbad; _0x4e2f50++, _0x2552d6++) {
                      var _0x368851 = _0x212284[_0x2552d6 < 0 ? _0x2552d6 + _0x281e32 : _0x2552d6];
                      var _0x423045 = _0x368851._point;
                      var _0x378480 = _0x3d471d[_0x4e2f50] - _0x423045._x;
                      _0x423045 = _0x39fd14[_0x4e2f50] - _0x423045._y;
                      if (_0x5cd91d || _0x4e2f50 < _0x59fbad) {
                        _0x368851.setHandleOut(_0x378480, _0x423045);
                      }
                      if (_0x5cd91d || _0x47effe < _0x4e2f50) {
                        _0x368851.setHandleIn(-_0x378480, -_0x423045);
                      }
                    }
                  }
                } else {
                  for (_0x4e2f50 = _0x1c583d; _0x4e2f50 <= _0x39f2f1; _0x4e2f50++) {
                    _0x212284[_0x4e2f50 < 0 ? _0x4e2f50 + _0x281e32 : _0x4e2f50].smooth(_0x499c5e, !_0x5cd91d && _0x4e2f50 === _0x1c583d, !_0x5cd91d && _0x4e2f50 === _0x39f2f1);
                  }
                }
              },
              toShape: function (_0x1019c2) {
                if (!this._closed) {
                  return null;
                }
                var _0x3e0531;
                var _0x2c6a5a;
                var _0x10cf72;
                var _0x526528;
                var _0x1dd770;
                var _0x53b495 = this._segments;
                function _0x19ba3e(_0x54e469, _0x3a3e4b) {
                  var _0x40ec09 = _0x53b495[_0x54e469];
                  var _0x4a9aa6 = _0x40ec09.getNext();
                  _0x3a3e4b = (_0x54e469 = _0x53b495[_0x3a3e4b]).getNext();
                  return _0x40ec09._handleOut.isZero() && _0x4a9aa6._handleIn.isZero() && _0x54e469._handleOut.isZero() && _0x3a3e4b._handleIn.isZero() && _0x4a9aa6._point.subtract(_0x40ec09._point).isCollinear(_0x3a3e4b._point.subtract(_0x54e469._point));
                }
                function _0x56e637(_0x47abdb) {
                  var _0x375280 = _0x53b495[_0x47abdb];
                  var _0x1d94d5 = _0x375280.getNext();
                  var _0x2a2824 = _0x375280._handleOut;
                  var _0x40f98e = _0x1d94d5._handleIn;
                  var _0x485d13 = 0.5522847498307936;
                  if (_0x2a2824.isOrthogonal(_0x40f98e)) {
                    _0x47abdb = _0x375280._point;
                    _0x375280 = _0x1d94d5._point;
                    return (_0x1d94d5 = new _0x170222(_0x47abdb, _0x2a2824, true).intersect(new _0x170222(_0x375280, _0x40f98e, true), true)) && _0x3c029b.isZero(_0x2a2824.getLength() / _0x1d94d5.subtract(_0x47abdb).getLength() - _0x485d13) && _0x3c029b.isZero(_0x40f98e.getLength() / _0x1d94d5.subtract(_0x375280).getLength() - _0x485d13);
                  }
                }
                function _0x572450(_0x550b5c, _0x1c7a06) {
                  return _0x53b495[_0x550b5c]._point.getDistance(_0x53b495[_0x1c7a06]._point);
                }
                if (!this.hasHandles() && _0x53b495.length === 4 && _0x19ba3e(0, 2) && _0x19ba3e(1, 3) && (_0x1dd770 = (_0x1d6969 = _0x53b495[_0x526528 = 1]).getPrevious(), _0x526528 = _0x1d6969.getNext(), _0x1dd770._handleOut.isZero() && _0x1d6969._handleIn.isZero() && _0x1d6969._handleOut.isZero() && _0x526528._handleIn.isZero() && _0x1d6969._point.subtract(_0x1dd770._point).isOrthogonal(_0x526528._point.subtract(_0x1d6969._point)))) {
                  _0x3e0531 = _0xa8e5b4.Rectangle;
                  _0x2c6a5a = new _0x236987(_0x572450(0, 3), _0x572450(0, 1));
                  _0x10cf72 = _0x53b495[1]._point.add(_0x53b495[2]._point).divide(2);
                } else if (_0x53b495.length === 8 && _0x56e637(0) && _0x56e637(2) && _0x56e637(4) && _0x56e637(6) && _0x19ba3e(1, 5) && _0x19ba3e(3, 7)) {
                  _0x3e0531 = _0xa8e5b4.Rectangle;
                  _0x3f4e0e = (_0x2c6a5a = new _0x236987(_0x572450(1, 6), _0x572450(0, 3))).subtract(new _0x236987(_0x572450(0, 7), _0x572450(1, 2))).divide(2);
                  _0x10cf72 = _0x53b495[3]._point.add(_0x53b495[4]._point).divide(2);
                } else if (_0x53b495.length === 4 && _0x56e637(0) && _0x56e637(1) && _0x56e637(2) && _0x56e637(3)) {
                  _0x3f4e0e = _0x3c029b.isZero(_0x572450(0, 2) - _0x572450(1, 3)) ? (_0x3e0531 = _0xa8e5b4.Circle, _0x572450(0, 2) / 2) : (_0x3e0531 = _0xa8e5b4.Ellipse, new _0x236987(_0x572450(2, 0) / 2, _0x572450(3, 1) / 2));
                  _0x10cf72 = _0x53b495[1]._point;
                }
                if (_0x3e0531) {
                  var _0x1d6969 = this.getPosition(true);
                  var _0x3f4e0e = new _0x3e0531({
                    center: _0x1d6969,
                    size: _0x2c6a5a,
                    radius: _0x3f4e0e,
                    insert: false
                  });
                  _0x3f4e0e.copyAttributes(this, true);
                  _0x3f4e0e._matrix.prepend(this._matrix);
                  _0x3f4e0e.rotate(_0x10cf72.subtract(_0x1d6969).getAngle() + 90);
                  if (!(_0x1019c2 !== _0x2bd7be && !_0x1019c2)) {
                    _0x3f4e0e.insertAbove(this);
                  }
                  return _0x3f4e0e;
                }
                return null;
              },
              toPath: "#clone",
              compare: function _0x4a79e6(_0x275b05) {
                if (!_0x275b05 || _0x275b05 instanceof _0x5efee7) {
                  return _0x4a79e6.base.call(this, _0x275b05);
                }
                var _0x865876 = this.getCurves();
                var _0x1992f4 = _0x275b05.getCurves();
                var _0x264ceb = _0x865876.length;
                var _0x31eef5 = _0x1992f4.length;
                if (!_0x264ceb || !_0x31eef5) {
                  return _0x264ceb == _0x31eef5;
                }
                for (var _0x5df9b8, _0x902727, _0xf8f145 = _0x865876[0].getValues(), _0x11d352 = [], _0x7ad35f = 0, _0x321aae = 0, _0x1c379d = 0; _0x1c379d < _0x31eef5; _0x1c379d++) {
                  var _0x352d84 = _0x1992f4[_0x1c379d].getValues();
                  _0x11d352.push(_0x352d84);
                  if (_0x529703 = _0x53ec04.getOverlaps(_0xf8f145, _0x352d84)) {
                    _0x5df9b8 = !_0x1c379d && _0x529703[0][0] > 0 ? _0x31eef5 - 1 : _0x1c379d;
                    _0x902727 = _0x529703[0][1];
                    break;
                  }
                }
                var _0x3d9a7f;
                var _0x1b634c = Math.abs;
                for (_0x352d84 = _0x11d352[_0x5df9b8]; _0xf8f145 && _0x352d84;) {
                  var _0x529703 = _0x53ec04.getOverlaps(_0xf8f145, _0x352d84);
                  if (_0x529703 && _0x1b634c(_0x529703[0][0] - _0x321aae) < 1e-8) {
                    if ((_0x321aae = _0x529703[1][0]) === 1) {
                      _0xf8f145 = ++_0x7ad35f < _0x264ceb ? _0x865876[_0x7ad35f].getValues() : null;
                      _0x321aae = 0;
                    }
                    var _0x5bd1c2 = _0x529703[0][1];
                    if (_0x1b634c(_0x5bd1c2 - _0x902727) < 1e-8) {
                      _0x3d9a7f = _0x3d9a7f || [_0x5df9b8, _0x5bd1c2];
                      if ((_0x902727 = _0x529703[1][1]) === 1) {
                        _0x352d84 = _0x11d352[_0x5df9b8 = ++_0x5df9b8 >= _0x31eef5 ? 0 : _0x5df9b8] || _0x1992f4[_0x5df9b8].getValues();
                        _0x902727 = 0;
                      }
                      if (!_0xf8f145) {
                        return _0x3d9a7f[0] === _0x5df9b8 && _0x3d9a7f[1] === _0x902727;
                      }
                      continue;
                    }
                  }
                  break;
                }
                return false;
              },
              _hitTestSelf: function (_0x53827d, _0x441071, _0x474d55, _0x5d7109) {
                var _0x5e24ae;
                var _0x3fab34;
                var _0x579b90;
                var _0x472b49;
                var _0x35daa9;
                var _0x2b6d27;
                var _0x5d51e0 = this;
                var _0x99e755 = this.getStyle();
                var _0x515f1d = this._segments;
                var _0x21329f = _0x515f1d.length;
                var _0x55f427 = this._closed;
                var _0x44ca3e = _0x441071._tolerancePadding;
                var _0x3665de = _0x44ca3e;
                var _0x6ae38f = _0x441071.stroke && _0x99e755.hasStroke();
                var _0x33f7df = _0x441071.fill && _0x99e755.hasFill();
                var _0x286fb9 = _0x441071.curves;
                var _0x330ccc = _0x6ae38f ? _0x99e755.getStrokeWidth() / 2 : _0x33f7df && _0x441071.tolerance > 0 || _0x286fb9 ? 0 : null;
                function _0x9e4c84(_0x3ea4da, _0x5cfc64) {
                  return _0x53827d.subtract(_0x3ea4da).divide(_0x5cfc64).length <= 1;
                }
                function _0x56ad25(_0x1e0eac, _0x189221, _0x1d4aa1) {
                  if (!_0x441071.selected || _0x189221.isSelected()) {
                    var _0x3d3456 = _0x1e0eac._point;
                    if (_0x9e4c84(_0x189221 = _0x189221 !== _0x3d3456 ? _0x189221.add(_0x3d3456) : _0x189221, _0x3665de)) {
                      return new _0xc7a363(_0x1d4aa1, _0x5d51e0, {
                        segment: _0x1e0eac,
                        point: _0x189221
                      });
                    }
                  }
                }
                function _0x233c62(_0x2931cf, _0x29a42a) {
                  return (_0x29a42a || _0x441071.segments) && _0x56ad25(_0x2931cf, _0x2931cf._point, "segment") || !_0x29a42a && _0x441071.handles && (_0x56ad25(_0x2931cf, _0x2931cf._handleIn, "handle-in") || _0x56ad25(_0x2931cf, _0x2931cf._handleOut, "handle-out"));
                }
                function _0x55d22d(_0x3f4ac4) {
                  _0x472b49.add(_0x3f4ac4);
                }
                function _0x748ed9(_0x233c17) {
                  var _0x2f414b = _0x55f427 || _0x233c17._index > 0 && _0x233c17._index < _0x21329f - 1;
                  if ((_0x2f414b ? _0x5e24ae : _0x3fab34) === "round") {
                    return _0x9e4c84(_0x233c17._point, _0x3665de);
                  } else {
                    _0x472b49 = new _0x5615aa({
                      internal: true,
                      closed: true
                    });
                    if (_0x2f414b) {
                      if (!_0x233c17.isSmooth()) {
                        _0x5615aa._addBevelJoin(_0x233c17, _0x5e24ae, _0x330ccc, _0x579b90, null, _0x5d7109, _0x55d22d, true);
                      }
                    } else if (_0x3fab34 === "square") {
                      _0x5615aa._addSquareCap(_0x233c17, _0x3fab34, _0x330ccc, null, _0x5d7109, _0x55d22d, true);
                    }
                    return !_0x472b49.isEmpty() && (_0x472b49.contains(_0x53827d) || (_0x233c17 = _0x472b49.getNearestLocation(_0x53827d)) && _0x9e4c84(_0x233c17.getPoint(), _0x44ca3e));
                  }
                }
                if (_0x330ccc !== null) {
                  if (_0x330ccc > 0) {
                    _0x5e24ae = _0x99e755.getStrokeJoin();
                    _0x3fab34 = _0x99e755.getStrokeCap();
                    _0x579b90 = _0x99e755.getMiterLimit();
                    _0x3665de = _0x3665de.add(_0x5615aa._getStrokePadding(_0x330ccc, _0x5d7109));
                  } else {
                    _0x5e24ae = _0x3fab34 = "round";
                  }
                }
                if (!_0x441071.ends || _0x441071.segments || _0x55f427) {
                  if (_0x441071.segments || _0x441071.handles) {
                    for (var _0x137f98 = 0; _0x137f98 < _0x21329f; _0x137f98++) {
                      if (_0x35daa9 = _0x233c62(_0x515f1d[_0x137f98])) {
                        return _0x35daa9;
                      }
                    }
                  }
                } else if (_0x35daa9 = _0x233c62(_0x515f1d[0], true) || _0x233c62(_0x515f1d[_0x21329f - 1], true)) {
                  return _0x35daa9;
                }
                if (_0x330ccc !== null && ((_0x2b6d27 = this.getNearestLocation(_0x53827d)) && ((_0x99e755 = _0x2b6d27.getTime()) === 0 || _0x99e755 === 1 && _0x21329f > 1 ? _0x748ed9(_0x2b6d27.getSegment()) || (_0x2b6d27 = null) : _0x9e4c84(_0x2b6d27.getPoint(), _0x3665de) || (_0x2b6d27 = null)), !_0x2b6d27 && _0x5e24ae === "miter" && _0x21329f > 1)) {
                  for (_0x137f98 = 0; _0x137f98 < _0x21329f; _0x137f98++) {
                    var _0x27bcd3 = _0x515f1d[_0x137f98];
                    if (_0x53827d.getDistance(_0x27bcd3._point) <= _0x579b90 * _0x330ccc && _0x748ed9(_0x27bcd3)) {
                      _0x2b6d27 = _0x27bcd3.getLocation();
                      break;
                    }
                  }
                }
                if (!_0x2b6d27 && _0x33f7df && this._contains(_0x53827d) || _0x2b6d27 && !_0x6ae38f && !_0x286fb9) {
                  return new _0xc7a363("fill", this);
                } else if (_0x2b6d27) {
                  return new _0xc7a363(_0x6ae38f ? "stroke" : "curve", this, {
                    location: _0x2b6d27,
                    point: _0x2b6d27.getPoint()
                  });
                } else {
                  return null;
                }
              }
            }, _0x28b48a.each(_0x53ec04._evaluateMethods, function (_0xa2f50b) {
              this[_0xa2f50b + "At"] = function (_0x1102f0) {
                return (_0x1102f0 = this.getLocationAt(_0x1102f0)) && _0x1102f0[_0xa2f50b]();
              };
            }, {
              beans: false,
              getLocationOf: function () {
                for (var _0x4124e9 = _0xbc5c4a.read(arguments), _0x281374 = this.getCurves(), _0x480c5f = 0, _0x2788e1 = _0x281374.length; _0x480c5f < _0x2788e1; _0x480c5f++) {
                  var _0x3391d5 = _0x281374[_0x480c5f].getLocationOf(_0x4124e9);
                  if (_0x3391d5) {
                    return _0x3391d5;
                  }
                }
                return null;
              },
              getOffsetOf: function () {
                var _0x54dbf7 = this.getLocationOf.apply(this, arguments);
                if (_0x54dbf7) {
                  return _0x54dbf7.getOffset();
                } else {
                  return null;
                }
              },
              getLocationAt: function (_0x5bac1c) {
                if (typeof _0x5bac1c == "number") {
                  for (var _0x15232b = this.getCurves(), _0x44160e = 0, _0x444793 = 0, _0x3e272f = _0x15232b.length; _0x444793 < _0x3e272f; _0x444793++) {
                    var _0x435f5a = _0x44160e;
                    var _0x412fc5 = _0x15232b[_0x444793];
                    if (_0x5bac1c < (_0x44160e += _0x412fc5.getLength())) {
                      return _0x412fc5.getLocationAt(_0x5bac1c - _0x435f5a);
                    }
                  }
                  if (_0x15232b.length > 0 && _0x5bac1c <= this.getLength()) {
                    return new _0x27f88f(_0x15232b[_0x15232b.length - 1], 1);
                  }
                } else if (_0x5bac1c && _0x5bac1c.getPath && _0x5bac1c.getPath() === this) {
                  return _0x5bac1c;
                }
                return null;
              },
              getOffsetsWithTangent: function () {
                var _0x189982 = _0xbc5c4a.read(arguments);
                if (_0x189982.isZero()) {
                  return [];
                }
                for (var _0x5e2808 = [], _0x182fac = 0, _0x2e6bdf = this.getCurves(), _0x1cbc75 = 0, _0x2e12e8 = _0x2e6bdf.length; _0x1cbc75 < _0x2e12e8; _0x1cbc75++) {
                  for (var _0x2bc485 = _0x2e6bdf[_0x1cbc75], _0x8c205e = _0x2bc485.getTimesWithTangent(_0x189982), _0x39bf4e = 0, _0x35685a = _0x8c205e.length; _0x39bf4e < _0x35685a; _0x39bf4e++) {
                    var _0x57baf8 = _0x182fac + _0x2bc485.getOffsetAtTime(_0x8c205e[_0x39bf4e]);
                    if (_0x5e2808.indexOf(_0x57baf8) < 0) {
                      _0x5e2808.push(_0x57baf8);
                    }
                  }
                  _0x182fac += _0x2bc485.length;
                }
                return _0x5e2808;
              }
            }), new function () {
              function _0x380c88(_0x4ed997, _0x4c0067, _0x1eab3b) {
                var _0x514b1a;
                var _0xacc6bf;
                var _0x17b8c7;
                var _0x37780d;
                var _0xa0adfb;
                var _0x430279;
                var _0x5a2e74;
                var _0x412c8d;
                var _0x3fb77f = _0x4c0067._segments;
                var _0x4bf998 = _0x3fb77f.length;
                var _0x21bcd6 = new Array(6);
                var _0xdb9404 = true;
                function _0x5dda68(_0x368e18) {
                  var _0x4aa5a2;
                  var _0x79eb19;
                  _0xacc6bf = _0x1eab3b ? (_0x368e18._transformCoordinates(_0x1eab3b, _0x21bcd6), _0x514b1a = _0x21bcd6[0], _0x21bcd6[1]) : (_0x4aa5a2 = _0x368e18._point, _0x514b1a = _0x4aa5a2._x, _0x4aa5a2._y);
                  if (_0xdb9404) {
                    _0x4ed997.moveTo(_0x514b1a, _0xacc6bf);
                    _0xdb9404 = false;
                  } else {
                    _0x430279 = _0x1eab3b ? (_0xa0adfb = _0x21bcd6[2], _0x21bcd6[3]) : (_0x79eb19 = _0x368e18._handleIn, _0xa0adfb = _0x514b1a + _0x79eb19._x, _0xacc6bf + _0x79eb19._y);
                    if (_0xa0adfb === _0x514b1a && _0x430279 === _0xacc6bf && _0x5a2e74 === _0x17b8c7 && _0x412c8d === _0x37780d) {
                      _0x4ed997.lineTo(_0x514b1a, _0xacc6bf);
                    } else {
                      _0x4ed997.bezierCurveTo(_0x5a2e74, _0x412c8d, _0xa0adfb, _0x430279, _0x514b1a, _0xacc6bf);
                    }
                  }
                  _0x17b8c7 = _0x514b1a;
                  _0x37780d = _0xacc6bf;
                  _0x412c8d = _0x1eab3b ? (_0x5a2e74 = _0x21bcd6[4], _0x21bcd6[5]) : (_0x79eb19 = _0x368e18._handleOut, _0x5a2e74 = _0x17b8c7 + _0x79eb19._x, _0x37780d + _0x79eb19._y);
                }
                for (var _0x5477c7 = 0; _0x5477c7 < _0x4bf998; _0x5477c7++) {
                  _0x5dda68(_0x3fb77f[_0x5477c7]);
                }
                if (_0x4c0067._closed && _0x4bf998 > 0) {
                  _0x5dda68(_0x3fb77f[0]);
                }
              }
              return {
                _draw: function (_0x1d5090, _0x3795eb, _0x258834, _0x20a2c6) {
                  var _0x2ffe4b = _0x3795eb.dontStart;
                  var _0x5a00e2 = _0x3795eb.dontFinish || _0x3795eb.clip;
                  var _0x228acf = this.getStyle();
                  var _0x2fd9cb = _0x228acf.hasFill();
                  var _0x3983ca = _0x228acf.hasStroke();
                  var _0x3cbc50 = _0x228acf.getDashArray();
                  var _0x253466 = !_0x36d317.support.nativeDash && _0x3983ca && _0x3cbc50 && _0x3cbc50.length;
                  function _0x331225(_0x32afb4) {
                    return _0x3cbc50[(_0x32afb4 % _0x253466 + _0x253466) % _0x253466];
                  }
                  if (!_0x2ffe4b) {
                    _0x1d5090.beginPath();
                  }
                  if (_0x2fd9cb || _0x3983ca && !_0x253466 || _0x5a00e2) {
                    _0x380c88(_0x1d5090, this, _0x20a2c6);
                    if (this._closed) {
                      _0x1d5090.closePath();
                    }
                  }
                  if (!_0x5a00e2 && (_0x2fd9cb || _0x3983ca) && (this._setStyles(_0x1d5090, _0x3795eb, _0x258834), _0x2fd9cb && (_0x1d5090.fill("evenodd"), _0x1d5090.shadowColor = "rgba(0,0,0,0)"), _0x3983ca)) {
                    if (_0x253466) {
                      if (!_0x2ffe4b) {
                        _0x1d5090.beginPath();
                      }
                      for (var _0x4e43ef, _0x41c0f7 = new _0x5de3f7(this, 0.25, 32, false, _0x20a2c6), _0x1002f0 = _0x41c0f7.length, _0x25fbeb = -_0x228acf.getDashOffset(), _0x266e1b = 0; _0x25fbeb > 0;) {
                        _0x25fbeb -= _0x331225(_0x266e1b--) + _0x331225(_0x266e1b--);
                      }
                      for (; _0x25fbeb < _0x1002f0;) {
                        _0x4e43ef = _0x25fbeb + _0x331225(_0x266e1b++);
                        if (_0x25fbeb > 0 || _0x4e43ef > 0) {
                          _0x41c0f7.drawPart(_0x1d5090, Math.max(_0x25fbeb, 0), Math.max(_0x4e43ef, 0));
                        }
                        _0x25fbeb = _0x4e43ef + _0x331225(_0x266e1b++);
                      }
                    }
                    _0x1d5090.stroke();
                  }
                },
                _drawSelected: function (_0x4fb351, _0x3b7f1c) {
                  _0x4fb351.beginPath();
                  _0x380c88(_0x4fb351, this, _0x3b7f1c);
                  _0x4fb351.stroke();
                  (function (_0x5491ef, _0x1822cf, _0x10fcc6, _0x2436e3) {
                    if (!(_0x2436e3 <= 0)) {
                      for (var _0x52f4b2, _0x3c9f89, _0xc044ba = _0x2436e3 / 2, _0x515b5a = _0x2436e3 - 2, _0x4b23b4 = _0xc044ba - 1, _0x4b19dc = new Array(6), _0x3932fb = 0, _0x4d7218 = _0x1822cf.length; _0x3932fb < _0x4d7218; _0x3932fb++) {
                        var _0x29d39e = _0x1822cf[_0x3932fb];
                        var _0x2d994d = _0x29d39e._selection;
                        _0x29d39e._transformCoordinates(_0x10fcc6, _0x4b19dc);
                        _0x52f4b2 = _0x4b19dc[0];
                        _0x3c9f89 = _0x4b19dc[1];
                        if (_0x2d994d & 2) {
                          _0x4bbf49(2);
                        }
                        if (_0x2d994d & 4) {
                          _0x4bbf49(4);
                        }
                        _0x5491ef.fillRect(_0x52f4b2 - _0xc044ba, _0x3c9f89 - _0xc044ba, _0x2436e3, _0x2436e3);
                        if (_0x515b5a > 0 && !(_0x2d994d & 1)) {
                          _0x2d994d = _0x5491ef.fillStyle;
                          _0x5491ef.fillStyle = "#ffffff";
                          _0x5491ef.fillRect(_0x52f4b2 - _0x4b23b4, _0x3c9f89 - _0x4b23b4, _0x515b5a, _0x515b5a);
                          _0x5491ef.fillStyle = _0x2d994d;
                        }
                      }
                    }
                    function _0x4bbf49(_0x5082cd) {
                      var _0x42421d = _0x4b19dc[_0x5082cd];
                      _0x5082cd = _0x4b19dc[_0x5082cd + 1];
                      if (!(_0x52f4b2 == _0x42421d && _0x3c9f89 == _0x5082cd)) {
                        _0x5491ef.beginPath();
                        _0x5491ef.moveTo(_0x52f4b2, _0x3c9f89);
                        _0x5491ef.lineTo(_0x42421d, _0x5082cd);
                        _0x5491ef.stroke();
                        _0x5491ef.beginPath();
                        _0x5491ef.arc(_0x42421d, _0x5082cd, _0xc044ba, 0, Math.PI * 2, true);
                        _0x5491ef.fill();
                      }
                    }
                  })(_0x4fb351, this._segments, _0x3b7f1c, _0x36d317.settings.handleSize);
                }
              };
            }(), new function () {
              function _0x5cef68(_0xf1f9f9) {
                if (!(_0xf1f9f9 = _0xf1f9f9._segments).length) {
                  throw new Error(".......");
                }
                return _0xf1f9f9[_0xf1f9f9.length - 1];
              }
              return {
                moveTo: function () {
                  var _0x13a77b = this._segments;
                  if (_0x13a77b.length === 1) {
                    this.removeSegment(0);
                  }
                  if (!_0x13a77b.length) {
                    this._add([new _0x2657e4(_0xbc5c4a.read(arguments))]);
                  }
                },
                moveBy: function () {
                  throw new Error(".......");
                },
                lineTo: function () {
                  this._add([new _0x2657e4(_0xbc5c4a.read(arguments))]);
                },
                cubicCurveTo: function () {
                  var _0x5cb763 = arguments;
                  var _0x28387f = _0xbc5c4a.read(_0x5cb763);
                  var _0x5995cb = _0xbc5c4a.read(_0x5cb763);
                  var _0x35ae63 = _0xbc5c4a.read(_0x5cb763);
                  (_0x5cb763 = _0x5cef68(this)).setHandleOut(_0x28387f.subtract(_0x5cb763._point));
                  this._add([new _0x2657e4(_0x35ae63, _0x5995cb.subtract(_0x35ae63))]);
                },
                quadraticCurveTo: function () {
                  var _0x18a848 = arguments;
                  var _0x55ffd7 = _0xbc5c4a.read(_0x18a848);
                  var _0x2baccf = _0xbc5c4a.read(_0x18a848);
                  _0x18a848 = _0x5cef68(this)._point;
                  this.cubicCurveTo(_0x55ffd7.add(_0x18a848.subtract(_0x55ffd7).multiply(1 / 3)), _0x55ffd7.add(_0x2baccf.subtract(_0x55ffd7).multiply(1 / 3)), _0x2baccf);
                },
                curveTo: function () {
                  var _0x275420 = arguments;
                  var _0x20a12c = _0xbc5c4a.read(_0x275420);
                  var _0xe1d55f = _0xbc5c4a.read(_0x275420);
                  var _0xcf9ed6 = _0x28b48a.pick(_0x28b48a.read(_0x275420), 0.5);
                  var _0x49a6f5 = 1 - _0xcf9ed6;
                  _0x275420 = _0x5cef68(this)._point;
                  if ((_0x49a6f5 = _0x20a12c.subtract(_0x275420.multiply(_0x49a6f5 * _0x49a6f5)).subtract(_0xe1d55f.multiply(_0xcf9ed6 * _0xcf9ed6)).divide(_0xcf9ed6 * 2 * _0x49a6f5)).isNaN()) {
                    throw new Error(".......");
                  }
                  this.quadraticCurveTo(_0x49a6f5, _0xe1d55f);
                },
                arcTo: function () {
                  var _0x5bb080;
                  var _0x14f578 = arguments;
                  var _0x4ea936 = Math.abs;
                  var _0x250a24 = Math.sqrt;
                  var _0x2a565b = _0x5cef68(this);
                  var _0x11ee04 = _0x2a565b._point;
                  var _0x4d33b5 = _0xbc5c4a.read(_0x14f578);
                  var _0x422d10 = _0x28b48a.peek(_0x14f578);
                  if (typeof (_0x573ccc = _0x28b48a.pick(_0x422d10, true)) == "boolean") {
                    var _0x5582fe = (_0x151f9d = _0x11ee04.add(_0x4d33b5).divide(2)).add(_0x151f9d.subtract(_0x11ee04).rotate(_0x573ccc ? -90 : 90));
                  } else if (_0x28b48a.remain(_0x14f578) <= 2) {
                    _0x5582fe = _0x4d33b5;
                    _0x4d33b5 = _0xbc5c4a.read(_0x14f578);
                  } else if (!_0x11ee04.equals(_0x4d33b5)) {
                    var _0x2b4b58 = _0x236987.read(_0x14f578);
                    if ((_0x4abdf8 = _0x3c029b.isZero)(_0x2b4b58.width) || _0x4abdf8(_0x2b4b58.height)) {
                      return this.lineTo(_0x4d33b5);
                    }
                    var _0x4abdf8;
                    var _0x156f03 = _0x28b48a.read(_0x14f578);
                    var _0x573ccc = !!_0x28b48a.read(_0x14f578);
                    var _0x30a786 = !!_0x28b48a.read(_0x14f578);
                    var _0x151f9d = _0x11ee04.add(_0x4d33b5).divide(2);
                    var _0x5b0081 = (_0x23b34e = _0x11ee04.subtract(_0x151f9d).rotate(-_0x156f03)).x;
                    var _0x37f1ac = _0x23b34e.y;
                    var _0x41b1a8 = (_0x1e8268 = _0x4ea936(_0x2b4b58.width)) * _0x1e8268;
                    if ((_0x2b4b58 = _0x250a24((_0x4abdf8 = _0x5b0081 * _0x5b0081) / _0x41b1a8 + (_0x14f578 = _0x37f1ac * _0x37f1ac) / (_0x422d10 = (_0x3b88c7 = _0x4ea936(_0x2b4b58.height)) * _0x3b88c7))) > 1) {
                      _0x41b1a8 = (_0x1e8268 *= _0x2b4b58) * _0x1e8268;
                      _0x422d10 = (_0x3b88c7 *= _0x2b4b58) * _0x3b88c7;
                    }
                    if ((_0x2b4b58 = _0x4ea936(_0x2b4b58 = (_0x41b1a8 * _0x422d10 - _0x41b1a8 * _0x14f578 - _0x422d10 * _0x4abdf8) / (_0x41b1a8 * _0x14f578 + _0x422d10 * _0x4abdf8)) < 1e-12 ? 0 : _0x2b4b58) < 0) {
                      throw new Error(".......");
                    }
                    _0x3ef0b8 = new _0xbc5c4a(_0x1e8268 * _0x37f1ac / _0x3b88c7, -_0x3b88c7 * _0x5b0081 / _0x1e8268).multiply((_0x30a786 === _0x573ccc ? -1 : 1) * _0x250a24(_0x2b4b58)).rotate(_0x156f03).add(_0x151f9d);
                    _0x156f03 = (_0x147cce = (_0x5bb080 = new _0x1a5a7c().translate(_0x3ef0b8).rotate(_0x156f03).scale(_0x1e8268, _0x3b88c7))._inverseTransform(_0x11ee04)).getDirectedAngle(_0x5bb080._inverseTransform(_0x4d33b5));
                    if (!_0x573ccc && _0x156f03 > 0) {
                      _0x156f03 -= 360;
                    } else if (_0x573ccc && _0x156f03 < 0) {
                      _0x156f03 += 360;
                    }
                  }
                  if (_0x5582fe) {
                    var _0x3ef0b8;
                    var _0x1e8268 = new _0x170222(_0x11ee04.add(_0x5582fe).divide(2), _0x5582fe.subtract(_0x11ee04).rotate(90), true);
                    var _0x3b88c7 = new _0x170222(_0x5582fe.add(_0x4d33b5).divide(2), _0x4d33b5.subtract(_0x5582fe).rotate(90), true);
                    _0x5582fe = (_0x573ccc = new _0x170222(_0x11ee04, _0x4d33b5)).getSide(_0x5582fe);
                    if (!(_0x3ef0b8 = _0x1e8268.intersect(_0x3b88c7, true))) {
                      if (!_0x5582fe) {
                        return this.lineTo(_0x4d33b5);
                      }
                      throw new Error(".......");
                    }
                    var _0x147cce;
                    _0x156f03 = (_0x147cce = _0x11ee04.subtract(_0x3ef0b8)).getDirectedAngle(_0x4d33b5.subtract(_0x3ef0b8));
                    if ((_0x573ccc = _0x573ccc.getSide(_0x3ef0b8, true)) === 0) {
                      _0x156f03 = _0x5582fe * _0x4ea936(_0x156f03);
                    } else if (_0x5582fe === _0x573ccc) {
                      _0x156f03 += _0x156f03 < 0 ? 360 : -360;
                    }
                  }
                  if (_0x156f03) {
                    for (var _0x33eabb = (_0x4ea936 = _0x4ea936(_0x156f03)) >= 360 ? 4 : Math.ceil((_0x4ea936 - 1e-7) / 90), _0x5b1815 = _0x156f03 / _0x33eabb, _0x2441de = (_0x156f03 = _0x5b1815 * Math.PI / 360, 4 / 3 * Math.sin(_0x156f03) / (1 + Math.cos(_0x156f03))), _0x51ec40 = [], _0x24da7d = 0; _0x24da7d <= _0x33eabb; _0x24da7d++) {
                      var _0x2840f0;
                      var _0x23b34e = _0x4d33b5;
                      var _0xedf77f = null;
                      if (_0x24da7d < _0x33eabb) {
                        _0xedf77f = _0x147cce.rotate(90).multiply(_0x2441de);
                        if (_0x5bb080) {
                          _0x23b34e = _0x5bb080._transformPoint(_0x147cce);
                          _0xedf77f = _0x5bb080._transformPoint(_0x147cce.add(_0xedf77f)).subtract(_0x23b34e);
                        } else {
                          _0x23b34e = _0x3ef0b8.add(_0x147cce);
                        }
                      }
                      if (_0x24da7d) {
                        _0x2840f0 = _0x147cce.rotate(-90).multiply(_0x2441de);
                        if (_0x5bb080) {
                          _0x2840f0 = _0x5bb080._transformPoint(_0x147cce.add(_0x2840f0)).subtract(_0x23b34e);
                        }
                        _0x51ec40.push(new _0x2657e4(_0x23b34e, _0x2840f0, _0xedf77f));
                      } else {
                        _0x2a565b.setHandleOut(_0xedf77f);
                      }
                      _0x147cce = _0x147cce.rotate(_0x5b1815);
                    }
                    this._add(_0x51ec40);
                  }
                },
                lineBy: function () {
                  var _0x360764 = _0xbc5c4a.read(arguments);
                  var _0x59d3fb = _0x5cef68(this)._point;
                  this.lineTo(_0x59d3fb.add(_0x360764));
                },
                curveBy: function () {
                  var _0x19c24b = arguments;
                  var _0xced2bb = _0xbc5c4a.read(_0x19c24b);
                  var _0x5bf732 = _0xbc5c4a.read(_0x19c24b);
                  var _0x22bb25 = _0x28b48a.read(_0x19c24b);
                  _0x19c24b = _0x5cef68(this)._point;
                  this.curveTo(_0x19c24b.add(_0xced2bb), _0x19c24b.add(_0x5bf732), _0x22bb25);
                },
                cubicCurveBy: function () {
                  var _0x2e50dc = arguments;
                  var _0x33d79d = _0xbc5c4a.read(_0x2e50dc);
                  var _0x50eea3 = _0xbc5c4a.read(_0x2e50dc);
                  var _0x5ca524 = _0xbc5c4a.read(_0x2e50dc);
                  _0x2e50dc = _0x5cef68(this)._point;
                  this.cubicCurveTo(_0x2e50dc.add(_0x33d79d), _0x2e50dc.add(_0x50eea3), _0x2e50dc.add(_0x5ca524));
                },
                quadraticCurveBy: function () {
                  var _0x564b02 = arguments;
                  var _0x175ad0 = _0xbc5c4a.read(_0x564b02);
                  var _0x3b95d8 = _0xbc5c4a.read(_0x564b02);
                  _0x564b02 = _0x5cef68(this)._point;
                  this.quadraticCurveTo(_0x564b02.add(_0x175ad0), _0x564b02.add(_0x3b95d8));
                },
                arcBy: function () {
                  var _0x3b37f3 = arguments;
                  var _0x3f84cc = _0x5cef68(this)._point;
                  var _0x4b2272 = _0x3f84cc.add(_0xbc5c4a.read(_0x3b37f3));
                  var _0x44ce55 = _0x28b48a.pick(_0x28b48a.peek(_0x3b37f3), true);
                  if (typeof _0x44ce55 == "boolean") {
                    this.arcTo(_0x4b2272, _0x44ce55);
                  } else {
                    this.arcTo(_0x4b2272, _0x3f84cc.add(_0xbc5c4a.read(_0x3b37f3)));
                  }
                },
                closePath: function (_0x50fd25) {
                  this.setClosed(true);
                  this.join(this, _0x50fd25);
                }
              };
            }(), {
              _getBounds: function (_0x35727c, _0x16e6e2) {
                var _0x4073c7 = _0x16e6e2.handle ? "getHandleBounds" : _0x16e6e2.stroke ? "getStrokeBounds" : "getBounds";
                return _0x5615aa[_0x4073c7](this._segments, this._closed, this, _0x35727c, _0x16e6e2);
              },
              statics: {
                getBounds: function (_0x18866b, _0x4f506f, _0x54d668, _0x5c1405, _0x13ff56, _0x1beefa) {
                  var _0x5699ff = _0x18866b[0];
                  if (!_0x5699ff) {
                    return new _0x5384ce();
                  }
                  var _0x171632 = new Array(6);
                  var _0x130391 = _0x5699ff._transformCoordinates(_0x5c1405, new Array(6));
                  var _0x2a6534 = _0x130391.slice(0, 2);
                  var _0x888c3 = _0x2a6534.slice();
                  var _0x1ad7bb = new Array(2);
                  function _0x36c554(_0x300ac7) {
                    _0x300ac7._transformCoordinates(_0x5c1405, _0x171632);
                    for (var _0x250e66 = 0; _0x250e66 < 2; _0x250e66++) {
                      _0x53ec04._addBounds(_0x130391[_0x250e66], _0x130391[_0x250e66 + 4], _0x171632[_0x250e66 + 2], _0x171632[_0x250e66], _0x250e66, _0x1beefa ? _0x1beefa[_0x250e66] : 0, _0x2a6534, _0x888c3, _0x1ad7bb);
                    }
                    _0x300ac7 = _0x130391;
                    _0x130391 = _0x171632;
                    _0x171632 = _0x300ac7;
                  }
                  for (var _0x5f814a = 1, _0xa2f3f8 = _0x18866b.length; _0x5f814a < _0xa2f3f8; _0x5f814a++) {
                    _0x36c554(_0x18866b[_0x5f814a]);
                  }
                  if (_0x4f506f) {
                    _0x36c554(_0x5699ff);
                  }
                  return new _0x5384ce(_0x2a6534[0], _0x2a6534[1], _0x888c3[0] - _0x2a6534[0], _0x888c3[1] - _0x2a6534[1]);
                },
                getStrokeBounds: function (_0x2494f2, _0x190acb, _0xa1d492, _0x36bb5a, _0x1773eb) {
                  var _0x5723f2 = _0xa1d492.getStyle();
                  var _0x357f93 = _0x5723f2.hasStroke();
                  var _0x366511 = _0x5723f2.getStrokeWidth();
                  var _0x24298a = _0x357f93 && _0xa1d492._getStrokeMatrix(_0x36bb5a, _0x1773eb);
                  var _0x428061 = _0x357f93 && _0x5615aa._getStrokePadding(_0x366511, _0x24298a);
                  var _0x34636e = _0x5615aa.getBounds(_0x2494f2, _0x190acb, _0xa1d492, _0x36bb5a, _0x1773eb, _0x428061);
                  if (!_0x357f93) {
                    return _0x34636e;
                  }
                  var _0x541492 = _0x366511 / 2;
                  var _0x513aa4 = _0x5723f2.getStrokeJoin();
                  _0x366511 = _0x5723f2.getStrokeCap();
                  var _0x21ebd3 = _0x5723f2.getMiterLimit();
                  var _0x17820c = new _0x5384ce(new _0x236987(_0x428061));
                  function _0x270591(_0x17cdb5) {
                    _0x34636e = _0x34636e.include(_0x17cdb5);
                  }
                  function _0x4ec832(_0x35fb21) {
                    _0x34636e = _0x34636e.unite(_0x17820c.setCenter(_0x35fb21._point.transform(_0x36bb5a)));
                  }
                  function _0x4a3df1(_0x3bc2f0, _0x5461f9) {
                    if (_0x5461f9 === "round" || _0x3bc2f0.isSmooth()) {
                      _0x4ec832(_0x3bc2f0);
                    } else {
                      _0x5615aa._addBevelJoin(_0x3bc2f0, _0x5461f9, _0x541492, _0x21ebd3, _0x36bb5a, _0x24298a, _0x270591);
                    }
                  }
                  function _0x3b46fe(_0xa84984, _0x484c14) {
                    if (_0x484c14 === "round") {
                      _0x4ec832(_0xa84984);
                    } else {
                      _0x5615aa._addSquareCap(_0xa84984, _0x484c14, _0x541492, _0x36bb5a, _0x24298a, _0x270591);
                    }
                  }
                  var _0x416c7e = _0x2494f2.length - (_0x190acb ? 0 : 1);
                  if (_0x416c7e > 0) {
                    for (var _0x36aa86 = 1; _0x36aa86 < _0x416c7e; _0x36aa86++) {
                      _0x4a3df1(_0x2494f2[_0x36aa86], _0x513aa4);
                    }
                    if (_0x190acb) {
                      _0x4a3df1(_0x2494f2[0], _0x513aa4);
                    } else {
                      _0x3b46fe(_0x2494f2[0], _0x366511);
                      _0x3b46fe(_0x2494f2[_0x2494f2.length - 1], _0x366511);
                    }
                  }
                  return _0x34636e;
                },
                _getStrokePadding: function (_0x257473, _0x264b08) {
                  if (!_0x264b08) {
                    return [_0x257473, _0x257473];
                  }
                  var _0x5ad57e = new _0xbc5c4a(_0x257473, 0).transform(_0x264b08);
                  var _0x1c4161 = new _0xbc5c4a(0, _0x257473).transform(_0x264b08);
                  var _0x59c492 = _0x5ad57e.getAngleInRadians();
                  var _0x367133 = _0x5ad57e.getLength();
                  _0x257473 = _0x1c4161.getLength();
                  _0x264b08 = Math.sin(_0x59c492);
                  _0x5ad57e = Math.cos(_0x59c492);
                  _0x1c4161 = Math.tan(_0x59c492);
                  _0x59c492 = Math.atan2(_0x257473 * _0x1c4161, _0x367133);
                  _0x1c4161 = Math.atan2(_0x257473, _0x1c4161 * _0x367133);
                  return [Math.abs(_0x367133 * Math.cos(_0x59c492) * _0x5ad57e + _0x257473 * Math.sin(_0x59c492) * _0x264b08), Math.abs(_0x257473 * Math.sin(_0x1c4161) * _0x5ad57e + _0x367133 * Math.cos(_0x1c4161) * _0x264b08)];
                },
                _addBevelJoin: function (_0x5b5fa6, _0x2220d2, _0x14e9cd, _0x548f57, _0x422205, _0x1bfa04, _0x1b94fc, _0x4c9b92) {
                  _0x5b5fa6 = (_0x47b85a = _0x5b5fa6.getCurve()).getPrevious();
                  _0x422205 = _0x47b85a.getPoint1().transform(_0x422205);
                  _0x5b5fa6 = _0x5b5fa6.getNormalAtTime(1).multiply(_0x14e9cd).transform(_0x1bfa04);
                  var _0x47b85a = _0x47b85a.getNormalAtTime(0).multiply(_0x14e9cd).transform(_0x1bfa04);
                  if ((_0x1bfa04 = _0x5b5fa6.getDirectedAngle(_0x47b85a)) < 0 || _0x1bfa04 >= 180) {
                    _0x5b5fa6 = _0x5b5fa6.negate();
                    _0x47b85a = _0x47b85a.negate();
                  }
                  if (_0x4c9b92) {
                    _0x1b94fc(_0x422205);
                  }
                  _0x1b94fc(_0x422205.add(_0x5b5fa6));
                  if (!(_0x2220d2 !== "miter")) {
                    if ((_0x5b5fa6 = new _0x170222(_0x422205.add(_0x5b5fa6), new _0xbc5c4a(-_0x5b5fa6.y, _0x5b5fa6.x), true).intersect(new _0x170222(_0x422205.add(_0x47b85a), new _0xbc5c4a(-_0x47b85a.y, _0x47b85a.x), true), true)) && _0x422205.getDistance(_0x5b5fa6) <= _0x548f57 * _0x14e9cd) {
                      _0x1b94fc(_0x5b5fa6);
                    }
                  }
                  _0x1b94fc(_0x422205.add(_0x47b85a));
                },
                _addSquareCap: function (_0x1b4232, _0x1212bf, _0x2d09e2, _0x1f389e, _0x4f45e3, _0x1ddfbe, _0x5921c4) {
                  _0x1f389e = _0x1b4232._point.transform(_0x1f389e);
                  _0x4f45e3 = (_0x1b4232 = _0x1b4232.getLocation()).getNormal().multiply(_0x1b4232.getTime() === 0 ? _0x2d09e2 : -_0x2d09e2).transform(_0x4f45e3);
                  if (_0x1212bf === "square") {
                    if (_0x5921c4) {
                      _0x1ddfbe(_0x1f389e.subtract(_0x4f45e3));
                      _0x1ddfbe(_0x1f389e.add(_0x4f45e3));
                    }
                    _0x1f389e = _0x1f389e.add(_0x4f45e3.rotate(-90));
                  }
                  _0x1ddfbe(_0x1f389e.add(_0x4f45e3));
                  _0x1ddfbe(_0x1f389e.subtract(_0x4f45e3));
                },
                getHandleBounds: function (_0x438daa, _0x59c497, _0x484cd2, _0xf2f13c, _0x2a66a7) {
                  var _0x242667;
                  var _0xe281a2;
                  var _0x3c812c;
                  var _0x330dd7 = _0x484cd2.getStyle();
                  if (_0x2a66a7.stroke && _0x330dd7.hasStroke()) {
                    _0x3c812c = _0x484cd2._getStrokeMatrix(_0xf2f13c, _0x2a66a7);
                    _0x2a66a7 = _0x484cd2 = _0x330dd7.getStrokeWidth() / 2;
                    if (_0x330dd7.getStrokeJoin() === "miter") {
                      _0x2a66a7 = _0x484cd2 * _0x330dd7.getMiterLimit();
                    }
                    if (_0x330dd7.getStrokeCap() === "square") {
                      _0x2a66a7 = Math.max(_0x2a66a7, _0x484cd2 * Math.SQRT2);
                    }
                    _0x242667 = _0x5615aa._getStrokePadding(_0x484cd2, _0x3c812c);
                    _0xe281a2 = _0x5615aa._getStrokePadding(_0x2a66a7, _0x3c812c);
                  }
                  for (var _0x42746e = new Array(6), _0x120e4a = Infinity, _0x16a1a9 = -_0x120e4a, _0x56b6b7 = _0x120e4a, _0xf6d944 = _0x16a1a9, _0x2edaf8 = 0, _0x1bf3a1 = _0x438daa.length; _0x2edaf8 < _0x1bf3a1; _0x2edaf8++) {
                    _0x438daa[_0x2edaf8]._transformCoordinates(_0xf2f13c, _0x42746e);
                    for (var _0x4763bf = 0; _0x4763bf < 6; _0x4763bf += 2) {
                      var _0x56060f;
                      var _0x219874 = (_0x56060f = _0x4763bf ? _0x242667 : _0xe281a2) ? _0x56060f[0] : 0;
                      var _0x5758de = _0x56060f ? _0x56060f[1] : 0;
                      var _0x2cdf89 = _0x42746e[_0x4763bf];
                      var _0x87f77a = _0x42746e[_0x4763bf + 1];
                      if ((_0x56060f = _0x2cdf89 - _0x219874) < _0x120e4a) {
                        _0x120e4a = _0x56060f;
                      }
                      if (_0x16a1a9 < (_0x2cdf89 = _0x2cdf89 + _0x219874)) {
                        _0x16a1a9 = _0x2cdf89;
                      }
                      if ((_0x219874 = _0x87f77a - _0x5758de) < _0x56b6b7) {
                        _0x56b6b7 = _0x219874;
                      }
                      if (_0xf6d944 < (_0x5758de = _0x87f77a + _0x5758de)) {
                        _0xf6d944 = _0x5758de;
                      }
                    }
                  }
                  return new _0x5384ce(_0x120e4a, _0x56b6b7, _0x16a1a9 - _0x120e4a, _0xf6d944 - _0x56b6b7);
                }
              }
            });
            _0x5615aa.inject({
              statics: new function () {
                var _0x3f20c4 = 0.5522847498307936;
                var _0x2e9cb9 = [new _0x2657e4([-1, 0], [0, _0x3f20c4], [0, -_0x3f20c4]), new _0x2657e4([0, -1], [-_0x3f20c4, 0], [_0x3f20c4, 0]), new _0x2657e4([1, 0], [0, -_0x3f20c4], [0, _0x3f20c4]), new _0x2657e4([0, 1], [_0x3f20c4, 0], [-_0x3f20c4, 0])];
                function _0x7c2186(_0x5e7fb5, _0x4c0366, _0x5b5eed) {
                  var _0x5433a9 = _0x28b48a.getNamed(_0x5b5eed);
                  (_0x5b5eed = new _0x5615aa(_0x5433a9 && _0x5433a9.insert == 0 && _0x1f30bb.NO_INSERT))._add(_0x5e7fb5);
                  _0x5b5eed._closed = _0x4c0366;
                  return _0x5b5eed.set(_0x5433a9, {
                    insert: true
                  });
                }
                function _0x672c97(_0x317892, _0x4c8155, _0x4c0ffe) {
                  for (var _0x1425e9 = new Array(4), _0x3aa1bb = 0; _0x3aa1bb < 4; _0x3aa1bb++) {
                    var _0x37ec09 = _0x2e9cb9[_0x3aa1bb];
                    _0x1425e9[_0x3aa1bb] = new _0x2657e4(_0x37ec09._point.multiply(_0x4c8155).add(_0x317892), _0x37ec09._handleIn.multiply(_0x4c8155), _0x37ec09._handleOut.multiply(_0x4c8155));
                  }
                  return _0x7c2186(_0x1425e9, true, _0x4c0ffe);
                }
                return {
                  Line: function () {
                    var _0x376409 = arguments;
                    return _0x7c2186([new _0x2657e4(_0xbc5c4a.readNamed(_0x376409, "from")), new _0x2657e4(_0xbc5c4a.readNamed(_0x376409, "to"))], false, _0x376409);
                  },
                  Circle: function () {
                    var _0x14eaf7 = arguments;
                    var _0x42c021 = _0xbc5c4a.readNamed(_0x14eaf7, "center");
                    var _0x3b6367 = _0x28b48a.readNamed(_0x14eaf7, "radius");
                    return _0x672c97(_0x42c021, new _0x236987(_0x3b6367), _0x14eaf7);
                  },
                  Rectangle: function () {
                    var _0x947475;
                    var _0x4c011a;
                    var _0x53373e = arguments;
                    var _0x2f2087 = _0x5384ce.readNamed(_0x53373e, "rectangle");
                    var _0x3bfd31 = _0x236987.readNamed(_0x53373e, "radius", 0, {
                      readNull: true
                    });
                    var _0x482de1 = _0x2f2087.getBottomLeft(true);
                    var _0x4c63ae = _0x2f2087.getTopLeft(true);
                    var _0x399082 = _0x2f2087.getTopRight(true);
                    var _0x3ecd42 = _0x2f2087.getBottomRight(true);
                    return _0x7c2186(!_0x3bfd31 || _0x3bfd31.isZero() ? [new _0x2657e4(_0x482de1), new _0x2657e4(_0x4c63ae), new _0x2657e4(_0x399082), new _0x2657e4(_0x3ecd42)] : (_0x947475 = (_0x3bfd31 = _0x236987.min(_0x3bfd31, _0x2f2087.getSize(true).divide(2))).width, _0x4c011a = _0x3bfd31.height, _0x2f2087 = _0x947475 * _0x3f20c4, _0x3bfd31 = _0x4c011a * _0x3f20c4, [new _0x2657e4(_0x482de1.add(_0x947475, 0), null, [-_0x2f2087, 0]), new _0x2657e4(_0x482de1.subtract(0, _0x4c011a), [0, _0x3bfd31]), new _0x2657e4(_0x4c63ae.add(0, _0x4c011a), null, [0, -_0x3bfd31]), new _0x2657e4(_0x4c63ae.add(_0x947475, 0), [-_0x2f2087, 0], null), new _0x2657e4(_0x399082.subtract(_0x947475, 0), null, [_0x2f2087, 0]), new _0x2657e4(_0x399082.add(0, _0x4c011a), [0, -_0x3bfd31], null), new _0x2657e4(_0x3ecd42.subtract(0, _0x4c011a), null, [0, _0x3bfd31]), new _0x2657e4(_0x3ecd42.subtract(_0x947475, 0), [_0x2f2087, 0])]), true, _0x53373e);
                  },
                  RoundRectangle: "#Rectangle",
                  Ellipse: function () {
                    var _0x4b5c1d = arguments;
                    var _0x875efb = _0xa8e5b4._readEllipse(_0x4b5c1d);
                    return _0x672c97(_0x875efb.center, _0x875efb.radius, _0x4b5c1d);
                  },
                  Oval: "#Ellipse",
                  Arc: function () {
                    var _0x53f6c0 = arguments;
                    var _0x4d31f3 = _0xbc5c4a.readNamed(_0x53f6c0, "from");
                    var _0x41dc01 = _0xbc5c4a.readNamed(_0x53f6c0, "through");
                    var _0x2a7b83 = _0xbc5c4a.readNamed(_0x53f6c0, "to");
                    var _0x1d5f03 = _0x28b48a.getNamed(_0x53f6c0);
                    (_0x53f6c0 = new _0x5615aa(_0x1d5f03 && _0x1d5f03.insert == 0 && _0x1f30bb.NO_INSERT)).moveTo(_0x4d31f3);
                    _0x53f6c0.arcTo(_0x41dc01, _0x2a7b83);
                    return _0x53f6c0.set(_0x1d5f03);
                  },
                  RegularPolygon: function () {
                    for (var _0x141d34 = arguments, _0x4d92d5 = _0xbc5c4a.readNamed(_0x141d34, "center"), _0x25bd14 = _0x28b48a.readNamed(_0x141d34, "sides"), _0x334e4f = _0x28b48a.readNamed(_0x141d34, "radius"), _0x60d957 = 360 / _0x25bd14, _0x582b3f = _0x25bd14 % 3 == 0, _0x307aa1 = new _0xbc5c4a(0, _0x582b3f ? -_0x334e4f : _0x334e4f), _0x45e7ff = _0x582b3f ? -1 : 0.5, _0x1c7ece = new Array(_0x25bd14), _0x52f30e = 0; _0x52f30e < _0x25bd14; _0x52f30e++) {
                      _0x1c7ece[_0x52f30e] = new _0x2657e4(_0x4d92d5.add(_0x307aa1.rotate((_0x52f30e + _0x45e7ff) * _0x60d957)));
                    }
                    return _0x7c2186(_0x1c7ece, true, _0x141d34);
                  },
                  Star: function () {
                    for (var _0x7cf839 = arguments, _0x13045f = _0xbc5c4a.readNamed(_0x7cf839, "center"), _0x39eb51 = _0x28b48a.readNamed(_0x7cf839, "points") * 2, _0xc531c7 = _0x28b48a.readNamed(_0x7cf839, "radius1"), _0x5a0edb = _0x28b48a.readNamed(_0x7cf839, "radius2"), _0x178a46 = 360 / _0x39eb51, _0x38301b = new _0xbc5c4a(0, -1), _0x4b4f23 = new Array(_0x39eb51), _0xc5dbf8 = 0; _0xc5dbf8 < _0x39eb51; _0xc5dbf8++) {
                      _0x4b4f23[_0xc5dbf8] = new _0x2657e4(_0x13045f.add(_0x38301b.rotate(_0x178a46 * _0xc5dbf8).multiply(_0xc5dbf8 % 2 ? _0x5a0edb : _0xc531c7)));
                    }
                    return _0x7c2186(_0x4b4f23, true, _0x7cf839);
                  }
                };
              }()
            });
            var _0x5efee7 = _0xfff515.extend({
              _class: "CompoundPath",
              _serializeFields: {
                children: []
              },
              beans: true,
              initialize: function (_0xa6c600) {
                this._children = [];
                this._namedChildren = {};
                if (!this._initialize(_0xa6c600)) {
                  if (typeof _0xa6c600 == "string") {
                    this.setPathData(_0xa6c600);
                  } else {
                    this.addChildren(Array.isArray(_0xa6c600) ? _0xa6c600 : arguments);
                  }
                }
              },
              insertChildren: function _0x4c426f(_0xf90a1c, _0x360ec9) {
                var _0x29ad9e = _0x360ec9;
                var _0x2395af = _0x29ad9e[0];
                if (_0x2395af && typeof _0x2395af[0] == "number") {
                  _0x29ad9e = [_0x29ad9e];
                }
                for (var _0x4ea7c9 = _0x360ec9.length - 1; _0x4ea7c9 >= 0; _0x4ea7c9--) {
                  var _0x20ab4a = _0x29ad9e[_0x4ea7c9];
                  if (!(_0x29ad9e !== _0x360ec9 || _0x20ab4a instanceof _0x5615aa)) {
                    _0x29ad9e = _0x28b48a.slice(_0x29ad9e);
                  }
                  if (Array.isArray(_0x20ab4a)) {
                    _0x29ad9e[_0x4ea7c9] = new _0x5615aa({
                      segments: _0x20ab4a,
                      insert: false
                    });
                  } else if (_0x20ab4a instanceof _0x5efee7) {
                    _0x29ad9e.splice.apply(_0x29ad9e, [_0x4ea7c9, 1].concat(_0x20ab4a.removeChildren()));
                    _0x20ab4a.remove();
                  }
                }
                return _0x4c426f.base.call(this, _0xf90a1c, _0x29ad9e);
              },
              reduce: function _0x4da10a(_0x552aca) {
                for (var _0xbfe8b3, _0x56dc36 = this._children, _0x50d5a4 = _0x56dc36.length - 1; _0x50d5a4 >= 0; _0x50d5a4--) {
                  if ((_0xbfe8b3 = _0x56dc36[_0x50d5a4].reduce(_0x552aca)).isEmpty()) {
                    _0xbfe8b3.remove();
                  }
                }
                if (_0x56dc36.length) {
                  return _0x4da10a.base.call(this);
                } else {
                  (_0xbfe8b3 = new _0x5615aa(_0x1f30bb.NO_INSERT)).copyAttributes(this);
                  _0xbfe8b3.insertAbove(this);
                  this.remove();
                  return _0xbfe8b3;
                }
              },
              isClosed: function () {
                for (var _0x5dbeca = this._children, _0x1ac9f1 = 0, _0x410ed2 = _0x5dbeca.length; _0x1ac9f1 < _0x410ed2; _0x1ac9f1++) {
                  if (!_0x5dbeca[_0x1ac9f1]._closed) {
                    return false;
                  }
                }
                return true;
              },
              setClosed: function (_0x575d23) {
                for (var _0x4462f8 = this._children, _0xaa990c = 0, _0xd1b67f = _0x4462f8.length; _0xaa990c < _0xd1b67f; _0xaa990c++) {
                  _0x4462f8[_0xaa990c].setClosed(_0x575d23);
                }
              },
              getFirstSegment: function () {
                var _0x585f8b = this.getFirstChild();
                return _0x585f8b && _0x585f8b.getFirstSegment();
              },
              getLastSegment: function () {
                var _0x1dc4bc = this.getLastChild();
                return _0x1dc4bc && _0x1dc4bc.getLastSegment();
              },
              getCurves: function () {
                for (var _0x1a4565 = this._children, _0x1daa1f = [], _0x799f22 = 0, _0x21cce6 = _0x1a4565.length; _0x799f22 < _0x21cce6; _0x799f22++) {
                  _0x28b48a.push(_0x1daa1f, _0x1a4565[_0x799f22].getCurves());
                }
                return _0x1daa1f;
              },
              getFirstCurve: function () {
                var _0x419500 = this.getFirstChild();
                return _0x419500 && _0x419500.getFirstCurve();
              },
              getLastCurve: function () {
                var _0x5c7b0f = this.getLastChild();
                return _0x5c7b0f && _0x5c7b0f.getLastCurve();
              },
              getArea: function () {
                for (var _0x4a70ec = this._children, _0x275b76 = 0, _0x335e3b = 0, _0x333c04 = _0x4a70ec.length; _0x335e3b < _0x333c04; _0x335e3b++) {
                  _0x275b76 += _0x4a70ec[_0x335e3b].getArea();
                }
                return _0x275b76;
              },
              getLength: function () {
                for (var _0x275680 = this._children, _0x26de9b = 0, _0x41cd5a = 0, _0x3d96b7 = _0x275680.length; _0x41cd5a < _0x3d96b7; _0x41cd5a++) {
                  _0x26de9b += _0x275680[_0x41cd5a].getLength();
                }
                return _0x26de9b;
              },
              getPathData: function (_0x344013, _0x17f3c9) {
                for (var _0x50ab13 = this._children, _0x557a8d = [], _0x50acab = 0, _0xaf5f26 = _0x50ab13.length; _0x50acab < _0xaf5f26; _0x50acab++) {
                  var _0xda6db9 = _0x50ab13[_0x50acab];
                  var _0x4c1c20 = _0xda6db9._matrix;
                  _0x557a8d.push(_0xda6db9.getPathData(_0x344013 && !_0x4c1c20.isIdentity() ? _0x344013.appended(_0x4c1c20) : _0x344013, _0x17f3c9));
                }
                return _0x557a8d.join("");
              },
              _hitTestChildren: function _0x2afc45(_0x4f6277, _0x502036, _0x2d45ab) {
                return _0x2afc45.base.call(this, _0x4f6277, _0x502036.class === _0x5615aa || _0x502036.type === "path" ? _0x502036 : _0x28b48a.set({}, _0x502036, {
                  fill: false
                }), _0x2d45ab);
              },
              _draw: function (_0x25a781, _0x3a6e14, _0x37aac4, _0x242ab8) {
                var _0x24b93d = this._children;
                if (_0x24b93d.length) {
                  _0x3a6e14 = _0x3a6e14.extend({
                    dontStart: true,
                    dontFinish: true
                  });
                  _0x25a781.beginPath();
                  for (var _0x18fcc0 = 0, _0x4f8f75 = _0x24b93d.length; _0x18fcc0 < _0x4f8f75; _0x18fcc0++) {
                    _0x24b93d[_0x18fcc0].draw(_0x25a781, _0x3a6e14, _0x242ab8);
                  }
                  if (!_0x3a6e14.clip) {
                    this._setStyles(_0x25a781, _0x3a6e14, _0x37aac4);
                    if ((_0x37aac4 = this._style).hasFill()) {
                      _0x25a781.fill("evenodd");
                      _0x25a781.shadowColor = "rgba(0,0,0,0)";
                    }
                    if (_0x37aac4.hasStroke()) {
                      _0x25a781.stroke();
                    }
                  }
                }
              },
              _drawSelected: function (_0x527986, _0x373e92, _0x5bf90a) {
                for (var _0x53b4ba = this._children, _0x47842d = 0, _0x2af8b2 = _0x53b4ba.length; _0x47842d < _0x2af8b2; _0x47842d++) {
                  var _0x1eeeee = _0x53b4ba[_0x47842d];
                  var _0x20a4c4 = _0x1eeeee._matrix;
                  if (!_0x5bf90a[_0x1eeeee._id]) {
                    _0x1eeeee._drawSelected(_0x527986, _0x20a4c4.isIdentity() ? _0x373e92 : _0x373e92.appended(_0x20a4c4));
                  }
                }
              }
            }, new function () {
              function _0x165555(_0x57884e, _0x1352f5) {
                _0x57884e = _0x57884e._children;
                if (_0x1352f5 && !_0x57884e.length) {
                  throw new Error(".......");
                }
                return _0x57884e[_0x57884e.length - 1];
              }
              return _0x28b48a.each(["lineTo", "cubicCurveTo", "quadraticCurveTo", "curveTo", "arcTo", "lineBy", "cubicCurveBy", "quadraticCurveBy", "curveBy", "arcBy"], function (_0x3b8a0e) {
                this[_0x3b8a0e] = function () {
                  var _0x4b73f9 = _0x165555(this, true);
                  _0x4b73f9[_0x3b8a0e].apply(_0x4b73f9, arguments);
                };
              }, {
                moveTo: function () {
                  var _0x57cf07 = _0x165555(this);
                  var _0x5c43ac = _0x57cf07 && _0x57cf07.isEmpty() ? _0x57cf07 : new _0x5615aa(_0x1f30bb.NO_INSERT);
                  if (_0x5c43ac !== _0x57cf07) {
                    this.addChild(_0x5c43ac);
                  }
                  _0x5c43ac.moveTo.apply(_0x5c43ac, arguments);
                },
                moveBy: function () {
                  var _0x26914b = (_0x2ae64e = _0x165555(this, true)) && _0x2ae64e.getLastSegment();
                  var _0x2ae64e = _0xbc5c4a.read(arguments);
                  this.moveTo(_0x26914b ? _0x2ae64e.add(_0x26914b._point) : _0x2ae64e);
                },
                closePath: function (_0x3c220e) {
                  _0x165555(this, true).closePath(_0x3c220e);
                }
              });
            }(), _0x28b48a.each(["reverse", "flatten", "simplify", "smooth"], function (_0x2dcbdf) {
              this[_0x2dcbdf] = function (_0x443288) {
                for (var _0xdc0d4d, _0x5bb00a = this._children, _0x5daafd = 0, _0x457cbd = _0x5bb00a.length; _0x5daafd < _0x457cbd; _0x5daafd++) {
                  _0xdc0d4d = _0x5bb00a[_0x5daafd][_0x2dcbdf](_0x443288) || _0xdc0d4d;
                }
                return _0xdc0d4d;
              };
            }, {}));
            _0xfff515.inject(new function () {
              var _0x2c0c78 = Math.min;
              var _0x55e4f1 = Math.max;
              var _0x59f003 = Math.abs;
              var _0x55d692 = {
                unite: {
                  1: true,
                  2: true
                },
                intersect: {
                  2: true
                },
                subtract: {
                  1: true
                },
                exclude: {
                  1: true,
                  "-1": true
                }
              };
              function _0x4ce0a3(_0x2b000e) {
                return _0x2b000e._children || [_0x2b000e];
              }
              function _0x209618(_0x459536, _0x4556c7) {
                var _0x348ffa = _0x459536.clone(false).reduce({
                  simplify: true
                }).transform(null, true, true);
                if (_0x4556c7) {
                  for (var _0x2ee133 = _0x4ce0a3(_0x348ffa), _0x11568a = 0, _0x498b5a = _0x2ee133.length; _0x11568a < _0x498b5a; _0x11568a++) {
                    if (!((_0x459536 = _0x2ee133[_0x11568a])._closed || _0x459536.isEmpty())) {
                      _0x459536.closePath(1e-12);
                      _0x459536.getFirstSegment().setHandleIn(0, 0);
                      _0x459536.getLastSegment().setHandleOut(0, 0);
                    }
                  }
                  _0x348ffa = _0x348ffa.resolveCrossings().reorient(false, true);
                }
                return _0x348ffa;
              }
              function _0x4b8bdc(_0x39b085, _0x42a620, _0x472a7e, _0x43ee7b, _0x496f7f) {
                var _0x2f486b = new _0x5efee7(_0x1f30bb.NO_INSERT);
                _0x2f486b.addChildren(_0x39b085, true);
                _0x2f486b = _0x2f486b.reduce({
                  simplify: _0x42a620
                });
                if (!(_0x496f7f && _0x496f7f.insert == 0)) {
                  _0x2f486b.insertAbove(_0x43ee7b && _0x472a7e.isSibling(_0x43ee7b) && _0x472a7e.getIndex() < _0x43ee7b.getIndex() ? _0x43ee7b : _0x472a7e);
                }
                _0x2f486b.copyAttributes(_0x472a7e, true);
                return _0x2f486b;
              }
              function _0x5e518f(_0xd26fa0) {
                return _0xd26fa0.hasOverlap() || _0xd26fa0.isCrossing();
              }
              function _0x335d17(_0x418354, _0x2a5c24, _0x159717, _0x4848e0) {
                if (_0x4848e0 && (_0x4848e0.trace == 0 || _0x4848e0.stroke) && /^(subtract|intersect)$/.test(_0x159717)) {
                  return _0x3409bb(_0x418354, _0x2a5c24, _0x159717);
                }
                var _0x1ed531 = _0x209618(_0x418354, true);
                var _0x18389b = _0x2a5c24 && _0x418354 !== _0x2a5c24 && _0x209618(_0x2a5c24, true);
                var _0x591e17 = _0x55d692[_0x159717];
                _0x591e17[_0x159717] = true;
                if (_0x18389b && (_0x591e17.subtract || _0x591e17.exclude) ^ _0x18389b.isClockwise() ^ _0x1ed531.isClockwise()) {
                  _0x18389b.reverse();
                }
                var _0x1eac22;
                var _0x1d3aa6 = _0x126021(_0x27f88f.expand(_0x1ed531.getIntersections(_0x18389b, _0x5e518f)));
                var _0x260d5c = _0x4ce0a3(_0x1ed531);
                _0x159717 = _0x18389b && _0x4ce0a3(_0x18389b);
                var _0xa2e10e = [];
                var _0xd7ed9f = [];
                function _0x307b0f(_0x4b9bd9) {
                  for (var _0x3d2434 = 0, _0x210d40 = _0x4b9bd9.length; _0x3d2434 < _0x210d40; _0x3d2434++) {
                    var _0x3d686e = _0x4b9bd9[_0x3d2434];
                    _0x28b48a.push(_0xa2e10e, _0x3d686e._segments);
                    _0x28b48a.push(_0xd7ed9f, _0x3d686e.getCurves());
                    _0x3d686e._overlapsOnly = true;
                  }
                }
                function _0x3fa72e(_0x416602) {
                  for (var _0x5e177f = [], _0x2d75df = 0, _0x37f4a3 = _0x416602 && _0x416602.length; _0x2d75df < _0x37f4a3; _0x2d75df++) {
                    _0x5e177f.push(_0xd7ed9f[_0x416602[_0x2d75df]]);
                  }
                  return _0x5e177f;
                }
                if (_0x1d3aa6.length) {
                  _0x307b0f(_0x260d5c);
                  if (_0x159717) {
                    _0x307b0f(_0x159717);
                  }
                  for (var _0x2872c8 = new Array(_0xd7ed9f.length), _0x5b2e57 = 0, _0x5b7bed = _0xd7ed9f.length; _0x5b2e57 < _0x5b7bed; _0x5b2e57++) {
                    _0x2872c8[_0x5b2e57] = _0xd7ed9f[_0x5b2e57].getValues();
                  }
                  var _0x47c4e9 = _0x402ec8.findCurveBoundsCollisions(_0x2872c8, _0x2872c8, 0, true);
                  var _0x341e21 = {};
                  for (_0x5b2e57 = 0; _0x5b2e57 < _0xd7ed9f.length; _0x5b2e57++) {
                    var _0x5ce482 = _0xd7ed9f[_0x5b2e57];
                    var _0x94f711 = _0x5ce482._path._id;
                    (_0x341e21[_0x94f711] = _0x341e21[_0x94f711] || {})[_0x5ce482.getIndex()] = {
                      hor: _0x3fa72e(_0x47c4e9[_0x5b2e57].hor),
                      ver: _0x3fa72e(_0x47c4e9[_0x5b2e57].ver)
                    };
                  }
                  _0x5b2e57 = 0;
                  _0x5b7bed = _0x1d3aa6.length;
                  for (; _0x5b2e57 < _0x5b7bed; _0x5b2e57++) {
                    _0x1160c0(_0x1d3aa6[_0x5b2e57]._segment, _0x1ed531, _0x18389b, _0x341e21, _0x591e17);
                  }
                  _0x5b2e57 = 0;
                  _0x5b7bed = _0xa2e10e.length;
                  for (; _0x5b2e57 < _0x5b7bed; _0x5b2e57++) {
                    var _0x4cc40e = _0xa2e10e[_0x5b2e57];
                    var _0x48ed16 = _0x4cc40e._intersection;
                    if (!_0x4cc40e._winding) {
                      _0x1160c0(_0x4cc40e, _0x1ed531, _0x18389b, _0x341e21, _0x591e17);
                    }
                    if (!(_0x48ed16 && _0x48ed16._overlap)) {
                      _0x4cc40e._path._overlapsOnly = false;
                    }
                  }
                  _0x1eac22 = _0x2e2c92(_0xa2e10e, _0x591e17);
                } else {
                  _0x1eac22 = _0x19c479(_0x159717 ? _0x260d5c.concat(_0x159717) : _0x260d5c.slice(), function (_0x2f47eb) {
                    return !!_0x591e17[_0x2f47eb];
                  });
                }
                return _0x4b8bdc(_0x1eac22, true, _0x418354, _0x2a5c24, _0x4848e0);
              }
              function _0x3409bb(_0x56405d, _0x856539, _0x274ed0) {
                var _0x1f6acd = _0x209618(_0x56405d);
                var _0x42c144 = _0x209618(_0x856539);
                var _0x56b166 = _0x1f6acd.getIntersections(_0x42c144, _0x5e518f);
                var _0x14dcf8 = _0x274ed0 === "subtract";
                var _0x3e1c7d = _0x274ed0 === "divide";
                var _0x40872e = {};
                var _0x4e349e = [];
                function _0x3d17e8(_0x1bd5bb) {
                  return !_0x40872e[_0x1bd5bb._id] && (_0x3e1c7d || _0x42c144.contains(_0x1bd5bb.getPointAt(_0x1bd5bb.getLength() / 2)) ^ _0x14dcf8) && (_0x4e349e.unshift(_0x1bd5bb), _0x40872e[_0x1bd5bb._id] = true);
                }
                for (var _0x46899a = _0x56b166.length - 1; _0x46899a >= 0; _0x46899a--) {
                  var _0x51f1b2 = _0x56b166[_0x46899a].split();
                  if (_0x51f1b2) {
                    if (_0x3d17e8(_0x51f1b2)) {
                      _0x51f1b2.getFirstSegment().setHandleIn(0, 0);
                    }
                    _0x1f6acd.getLastSegment().setHandleOut(0, 0);
                  }
                }
                _0x3d17e8(_0x1f6acd);
                return _0x4b8bdc(_0x4e349e, false, _0x56405d, _0x856539);
              }
              function _0x2f235e(_0x49608a, _0x29a102) {
                for (var _0x60b13d = _0x49608a; _0x60b13d;) {
                  if (_0x60b13d === _0x29a102) {
                    return;
                  }
                  _0x60b13d = _0x60b13d._previous;
                }
                for (; _0x49608a._next && _0x49608a._next !== _0x29a102;) {
                  _0x49608a = _0x49608a._next;
                }
                if (!_0x49608a._next) {
                  for (; _0x29a102._previous;) {
                    _0x29a102 = _0x29a102._previous;
                  }
                  (_0x49608a._next = _0x29a102)._previous = _0x49608a;
                }
              }
              function _0x11686a(_0x1cdc67) {
                for (var _0x2d954a = _0x1cdc67.length - 1; _0x2d954a >= 0; _0x2d954a--) {
                  _0x1cdc67[_0x2d954a].clearHandles();
                }
              }
              function _0x19c479(_0x361462, _0x435b78, _0x12ed26) {
                var _0x4ab93f = _0x361462 && _0x361462.length;
                if (_0x4ab93f) {
                  var _0x3715d9 = _0x28b48a.each(_0x361462, function (_0x4c8621, _0x459f22) {
                    this[_0x4c8621._id] = {
                      container: null,
                      winding: _0x4c8621.isClockwise() ? 1 : -1,
                      index: _0x459f22
                    };
                  }, {});
                  var _0x1ad996 = _0x361462.slice().sort(function (_0x414975, _0x384797) {
                    return _0x59f003(_0x384797.getArea()) - _0x59f003(_0x414975.getArea());
                  });
                  var _0x5e0c84 = _0x1ad996[0];
                  var _0x15cde0 = _0x402ec8.findItemBoundsCollisions(_0x1ad996, null, _0x3c029b.GEOMETRIC_EPSILON);
                  if (_0x12ed26 == null) {
                    _0x12ed26 = _0x5e0c84.isClockwise();
                  }
                  for (var _0x199b00 = 0; _0x199b00 < _0x4ab93f; _0x199b00++) {
                    var _0x58a039;
                    var _0x3ee14f = _0x1ad996[_0x199b00];
                    var _0xf4a5e9 = _0x3715d9[_0x3ee14f._id];
                    var _0x2ee26a = 0;
                    var _0x1ff40d = _0x15cde0[_0x199b00];
                    if (_0x1ff40d) {
                      for (var _0x1b6a7c = null, _0x575477 = _0x1ff40d.length - 1; _0x575477 >= 0; _0x575477--) {
                        if (_0x1ff40d[_0x575477] < _0x199b00) {
                          _0x1b6a7c = _0x1b6a7c || _0x3ee14f.getInteriorPoint();
                          var _0x1650d1 = _0x1ad996[_0x1ff40d[_0x575477]];
                          if (_0x1650d1.contains(_0x1b6a7c)) {
                            var _0x342566 = _0x3715d9[_0x1650d1._id];
                            _0x2ee26a = _0x342566.winding;
                            _0xf4a5e9.winding += _0x2ee26a;
                            _0xf4a5e9.container = _0x342566.exclude ? _0x342566.container : _0x1650d1;
                            break;
                          }
                        }
                      }
                    }
                    if (_0x435b78(_0xf4a5e9.winding) === _0x435b78(_0x2ee26a)) {
                      _0xf4a5e9.exclude = true;
                      _0x361462[_0xf4a5e9.index] = null;
                    } else {
                      _0x58a039 = _0xf4a5e9.container;
                      _0x3ee14f.setClockwise(_0x58a039 ? !_0x58a039.isClockwise() : _0x12ed26);
                    }
                  }
                }
                return _0x361462;
              }
              function _0x126021(_0x18f1a4, _0x9dc81b, _0x2d1a6d) {
                var _0x8fed0a;
                var _0x9b0799;
                var _0x5ca644;
                var _0x590c27 = _0x9dc81b && [];
                var _0x161f22 = false;
                var _0x3322cf = _0x2d1a6d || [];
                var _0x2d2b61 = _0x2d1a6d && {};
                function _0x521264(_0x5cbc40) {
                  return _0x5cbc40._path._id + "." + _0x5cbc40._segment1._index;
                }
                for (var _0x446602 = (_0x2d1a6d && _0x2d1a6d.length) - 1; _0x446602 >= 0; _0x446602--) {
                  if ((_0x387f39 = _0x2d1a6d[_0x446602])._path) {
                    _0x2d2b61[_0x521264(_0x387f39)] = true;
                  }
                }
                for (_0x446602 = _0x18f1a4.length - 1; _0x446602 >= 0; _0x446602--) {
                  var _0x387f39;
                  var _0x1e8b95 = (_0x1fe53e = _0x18f1a4[_0x446602])._time;
                  var _0x5c179e = _0x1e8b95;
                  var _0x37247e = _0x9dc81b && !_0x9dc81b(_0x1fe53e);
                  if (_0x387f39 = _0x1fe53e._curve) {
                    if (_0x387f39 !== _0x9b0799) {
                      _0x161f22 = !_0x387f39.hasHandles() || _0x2d2b61 && _0x2d2b61[_0x521264(_0x387f39)];
                      _0x8fed0a = [];
                      _0x5ca644 = null;
                      _0x9b0799 = _0x387f39;
                    } else if (_0x5ca644 >= 1e-8) {
                      _0x1e8b95 /= _0x5ca644;
                    }
                  }
                  if (_0x37247e) {
                    if (_0x8fed0a) {
                      _0x8fed0a.push(_0x1fe53e);
                    }
                  } else {
                    if (_0x9dc81b) {
                      _0x590c27.unshift(_0x1fe53e);
                    }
                    _0x5ca644 = _0x5c179e;
                    if (_0x1e8b95 < 1e-8) {
                      _0x5a7c4a = _0x387f39._segment1;
                    } else if (_0x1e8b95 > 0.99999999) {
                      _0x5a7c4a = _0x387f39._segment2;
                    } else {
                      _0x5c179e = _0x387f39.divideAtTime(_0x1e8b95, true);
                      if (_0x161f22) {
                        _0x3322cf.push(_0x387f39, _0x5c179e);
                      }
                      for (var _0x5a7c4a = _0x5c179e._segment1, _0x329dbb = _0x8fed0a.length - 1; _0x329dbb >= 0; _0x329dbb--) {
                        var _0x576035 = _0x8fed0a[_0x329dbb];
                        _0x576035._time = (_0x576035._time - _0x1e8b95) / (1 - _0x1e8b95);
                      }
                    }
                    _0x1fe53e._setSegment(_0x5a7c4a);
                    var _0x74253e = _0x5a7c4a._intersection;
                    var _0x1fe53e = _0x1fe53e._intersection;
                    if (_0x74253e) {
                      _0x2f235e(_0x74253e, _0x1fe53e);
                      for (var _0x10f12d = _0x74253e; _0x10f12d;) {
                        _0x2f235e(_0x10f12d._intersection, _0x74253e);
                        _0x10f12d = _0x10f12d._next;
                      }
                    } else {
                      _0x5a7c4a._intersection = _0x1fe53e;
                    }
                  }
                }
                if (!_0x2d1a6d) {
                  _0x11686a(_0x3322cf);
                }
                return _0x590c27 || _0x18f1a4;
              }
              function _0x16aa8d(_0x4d6905, _0x260cae, _0x1ead36, _0x3d2ed2, _0x2d3a58) {
                var _0xed2495;
                var _0x5a0695 = Array.isArray(_0x260cae) ? _0x260cae : _0x260cae[_0x1ead36 ? "hor" : "ver"];
                var _0x5819f6 = _0x1ead36 ? 1 : 0;
                var _0x423ed2 = _0x5819f6 ^ 1;
                var _0x5bf813 = [_0x4d6905.x, _0x4d6905.y];
                var _0x32dbcc = _0x5bf813[_0x5819f6];
                var _0x4a290a = _0x5bf813[_0x423ed2];
                var _0x2ef7d6 = 0.000001;
                var _0x1c289d = _0x32dbcc - 1e-9;
                var _0x2a1378 = _0x32dbcc + 1e-9;
                var _0x6ad047 = 0;
                var _0x2bc766 = 0;
                var _0x2b3b66 = 0;
                var _0x121d66 = 0;
                var _0x4130ed = false;
                var _0x24c476 = false;
                var _0x5e14fd = 1;
                var _0x525819 = [];
                function _0x10c788(_0x40e967) {
                  var _0x5b1e00 = _0x40e967[_0x423ed2 + 0];
                  var _0x252fe9 = _0x40e967[_0x423ed2 + 2];
                  var _0x6fc035 = _0x40e967[_0x423ed2 + 4];
                  var _0x508671 = _0x40e967[_0x423ed2 + 6];
                  if (_0x4a290a <= _0x55e4f1(_0x5b1e00, _0x252fe9, _0x6fc035, _0x508671) && _0x4a290a >= _0x2c0c78(_0x5b1e00, _0x252fe9, _0x6fc035, _0x508671)) {
                    _0x5b1e00 = _0x40e967[_0x5819f6 + 0];
                    _0x252fe9 = _0x40e967[_0x5819f6 + 2];
                    _0x6fc035 = _0x40e967[_0x5819f6 + 4];
                    _0x508671 = _0x40e967[_0x5819f6 + 6];
                    for (var _0x2e4bb8, _0x379b87 = _0x1c289d > _0x55e4f1(_0x5b1e00, _0x252fe9, _0x6fc035, _0x508671) || _0x2a1378 < _0x2c0c78(_0x5b1e00, _0x252fe9, _0x6fc035, _0x508671) ? [_0x40e967] : _0x53ec04.getMonoCurves(_0x40e967, _0x1ead36), _0x302acb = 0, _0x168383 = _0x379b87.length; _0x302acb < _0x168383; _0x302acb++) {
                      if (_0x2e4bb8 = function (_0x10ac17) {
                        var _0x59b2bd = _0x10ac17[_0x423ed2 + 0];
                        var _0x2c6520 = _0x10ac17[_0x423ed2 + 6];
                        if (!(_0x4a290a < _0x2c0c78(_0x59b2bd, _0x2c6520) || _0x4a290a > _0x55e4f1(_0x59b2bd, _0x2c6520))) {
                          var _0x12c918 = _0x10ac17[_0x5819f6 + 0];
                          var _0xc5f013 = _0x10ac17[_0x5819f6 + 2];
                          var _0x33daa5 = _0x10ac17[_0x5819f6 + 4];
                          var _0xdaae3d = _0x10ac17[_0x5819f6 + 6];
                          if (_0x59b2bd !== _0x2c6520) {
                            var _0x30bebf = _0x4a290a === _0x59b2bd ? 0 : _0x4a290a !== _0x2c6520 && !(_0x1c289d > _0x55e4f1(_0x12c918, _0xc5f013, _0x33daa5, _0xdaae3d) || _0x2a1378 < _0x2c0c78(_0x12c918, _0xc5f013, _0x33daa5, _0xdaae3d)) && _0x53ec04.solveCubic(_0x10ac17, _0x423ed2, _0x4a290a, _0x525819, 0, 1) > 0 ? _0x525819[0] : 1;
                            var _0x76cccd = _0x30bebf === 0 ? _0x12c918 : _0x30bebf === 1 ? _0xdaae3d : _0x53ec04.getPoint(_0x10ac17, _0x30bebf)[_0x1ead36 ? "y" : "x"];
                            _0xc5f013 = _0x2c6520 < _0x59b2bd ? 1 : -1;
                            _0x33daa5 = _0x40790c[_0x423ed2] > _0x40790c[_0x423ed2 + 6] ? 1 : -1;
                            _0x2c6520 = _0x40790c[_0x5819f6 + 6];
                            if (_0x4a290a !== _0x59b2bd) {
                              if (_0x76cccd < _0x1c289d) {
                                _0x2b3b66 += _0xc5f013;
                              } else if (_0x2a1378 < _0x76cccd) {
                                _0x121d66 += _0xc5f013;
                              } else {
                                _0x4130ed = true;
                              }
                              if (_0x32dbcc - _0x2ef7d6 < _0x76cccd && _0x76cccd < _0x32dbcc + _0x2ef7d6) {
                                _0x5e14fd /= 2;
                              }
                            } else {
                              if (_0xc5f013 != _0x33daa5) {
                                if (_0x12c918 < _0x1c289d) {
                                  _0x2b3b66 += _0xc5f013;
                                } else if (_0x2a1378 < _0x12c918) {
                                  _0x121d66 += _0xc5f013;
                                }
                              } else if (_0x12c918 != _0x2c6520) {
                                if (_0x2c6520 < _0x2a1378 && _0x2a1378 < _0x76cccd) {
                                  _0x121d66 += _0xc5f013;
                                  _0x4130ed = true;
                                } else if (_0x1c289d < _0x2c6520 && _0x76cccd < _0x1c289d) {
                                  _0x2b3b66 += _0xc5f013;
                                  _0x4130ed = true;
                                }
                              }
                              _0x5e14fd /= 4;
                            }
                            _0x40790c = _0x10ac17;
                            return !_0x2d3a58 && _0x1c289d < _0x76cccd && _0x76cccd < _0x2a1378 && _0x53ec04.getTangent(_0x10ac17, _0x30bebf)[_0x1ead36 ? "x" : "y"] === 0 && _0x16aa8d(_0x4d6905, _0x260cae, !_0x1ead36, _0x3d2ed2, true);
                          }
                          if (_0x12c918 < _0x2a1378 && _0x1c289d < _0xdaae3d || _0xdaae3d < _0x2a1378 && _0x1c289d < _0x12c918) {
                            _0x4130ed = true;
                          }
                        }
                      }(_0x379b87[_0x302acb])) {
                        return _0x2e4bb8;
                      }
                    }
                  }
                }
                for (var _0x2a7444 = 0, _0x5a52e0 = _0x5a0695.length; _0x2a7444 < _0x5a52e0; _0x2a7444++) {
                  var _0x56e573 = _0x5a0695[_0x2a7444];
                  var _0x11666b = _0x56e573._path;
                  var _0x4eae7c = _0x56e573.getValues();
                  if (!(_0x2a7444 && _0x5a0695[_0x2a7444 - 1]._path === _0x11666b || (_0x40790c = null, _0x11666b._closed || (_0xed2495 = _0x53ec04.getValues(_0x11666b.getLastCurve().getSegment2(), _0x56e573.getSegment1(), null, !_0x3d2ed2))[_0x423ed2] !== _0xed2495[_0x423ed2 + 6] && (_0x40790c = _0xed2495), _0x40790c))) {
                    for (var _0x40790c = _0x4eae7c, _0x44226c = _0x11666b.getLastCurve(); _0x44226c && _0x44226c !== _0x56e573;) {
                      var _0x129644 = _0x44226c.getValues();
                      if (_0x129644[_0x423ed2] !== _0x129644[_0x423ed2 + 6]) {
                        _0x40790c = _0x129644;
                        break;
                      }
                      _0x44226c = _0x44226c.getPrevious();
                    }
                  }
                  if (_0x4eae7c = _0x10c788(_0x4eae7c)) {
                    return _0x4eae7c;
                  }
                  if (_0x2a7444 + 1 === _0x5a52e0 || _0x5a0695[_0x2a7444 + 1]._path !== _0x11666b) {
                    if (_0xed2495 && (_0x4eae7c = _0x10c788(_0xed2495))) {
                      return _0x4eae7c;
                    }
                    _0x6ad047 += _0x2b3b66 = !_0x4130ed || _0x2b3b66 || _0x121d66 ? _0x2b3b66 : _0x121d66 = _0x11666b.isClockwise(_0x3d2ed2) ^ _0x1ead36 ? 1 : -1;
                    _0x2bc766 += _0x121d66;
                    _0x2b3b66 = _0x121d66 = 0;
                    _0x4130ed = _0x4130ed && !(_0x24c476 = true);
                    _0xed2495 = null;
                  }
                }
                _0x6ad047 = _0x59f003(_0x6ad047);
                _0x2bc766 = _0x59f003(_0x2bc766);
                return {
                  winding: _0x55e4f1(_0x6ad047, _0x2bc766),
                  windingL: _0x6ad047,
                  windingR: _0x2bc766,
                  quality: _0x5e14fd,
                  onPath: _0x24c476
                };
              }
              function _0x1160c0(_0x3c0664, _0x15221, _0x5bb1cb, _0x36f52b, _0x25e465) {
                var _0x4d9152 = [];
                var _0x2766cb = _0x3c0664;
                var _0x5d31e4 = 0;
                do {} while (((_0x3e7052 = _0x3c0664.getCurve()) && (_0x3f8826 = _0x3e7052.getLength(), _0x4d9152.push({
                  segment: _0x3c0664,
                  curve: _0x3e7052,
                  length: _0x3f8826
                }), _0x5d31e4 += _0x3f8826), (_0x3c0664 = _0x3c0664.getNext()) && !_0x3c0664._intersection && _0x3c0664 !== _0x2766cb));
                for (var _0x46f095 = [0.5, 0.25, 0.75], _0x37a7e4 = {
                    winding: 0,
                    quality: -1
                  }, _0x12a749 = 0; _0x12a749 < _0x46f095.length && _0x37a7e4.quality < 0.5; _0x12a749++) {
                  for (var _0x3f8826 = _0x5d31e4 * _0x46f095[_0x12a749], _0x57c09 = 0, _0x2e9de6 = _0x4d9152.length; _0x57c09 < _0x2e9de6; _0x57c09++) {
                    var _0x3f68d2 = (_0x35110d = _0x4d9152[_0x57c09]).length;
                    if (_0x3f8826 <= _0x3f68d2) {
                      var _0x3e7052;
                      var _0x132f7c = (_0x3e7052 = _0x35110d.curve)._path;
                      var _0x290f7a = (_0x3ebbdc = _0x132f7c._parent) instanceof _0x5efee7 ? _0x3ebbdc : _0x132f7c;
                      var _0x11700d = _0x3c029b.clamp(_0x3e7052.getTimeAt(_0x3f8826), 0.001, 0.999);
                      var _0x215fa5 = _0x3e7052.getPointAtTime(_0x11700d);
                      var _0x35110d = _0x59f003(_0x3e7052.getTangentAtTime(_0x11700d).y) < Math.SQRT1_2;
                      var _0x3ebbdc = null;
                      if (_0x25e465.subtract && _0x5bb1cb && (_0x11700d = (_0x290f7a === _0x15221 ? _0x5bb1cb : _0x15221)._getWinding(_0x215fa5, _0x35110d, true), _0x290f7a === _0x15221 && _0x11700d.winding || _0x290f7a === _0x5bb1cb && !_0x11700d.winding)) {
                        if (_0x11700d.quality < 1) {
                          continue;
                        }
                        _0x3ebbdc = {
                          winding: 0,
                          quality: 1
                        };
                      }
                      if ((_0x3ebbdc = _0x3ebbdc || _0x16aa8d(_0x215fa5, _0x36f52b[_0x132f7c._id][_0x3e7052.getIndex()], _0x35110d, true)).quality > _0x37a7e4.quality) {
                        _0x37a7e4 = _0x3ebbdc;
                      }
                      break;
                    }
                    _0x3f8826 -= _0x3f68d2;
                  }
                }
                for (_0x57c09 = _0x4d9152.length - 1; _0x57c09 >= 0; _0x57c09--) {
                  _0x4d9152[_0x57c09].segment._winding = _0x37a7e4;
                }
              }
              function _0x2e2c92(_0x1f8757, _0x5bae00) {
                var _0x5d8089;
                var _0x419dca = [];
                function _0x2a10df(_0x5622bc) {
                  return !(!_0x5622bc || _0x5622bc._visited || _0x5bae00 && (!_0x5bae00[(_0x5622bc = _0x5622bc._winding || {}).winding] || _0x5bae00.unite && _0x5622bc.winding === 2 && _0x5622bc.windingL && _0x5622bc.windingR));
                }
                function _0x437627(_0x538afd) {
                  if (_0x538afd) {
                    for (var _0x5be958 = 0, _0x157f65 = _0x5d8089.length; _0x5be958 < _0x157f65; _0x5be958++) {
                      if (_0x538afd === _0x5d8089[_0x5be958]) {
                        return true;
                      }
                    }
                  }
                  return false;
                }
                function _0xcbd8a3(_0x6ae09a) {
                  for (var _0x1174e5 = _0x6ae09a._segments, _0x216990 = 0, _0x422d47 = _0x1174e5.length; _0x216990 < _0x422d47; _0x216990++) {
                    _0x1174e5[_0x216990]._visited = true;
                  }
                }
                _0x1f8757.sort(function (_0xb5924a, _0x353f74) {
                  var _0x34089c = _0xb5924a._intersection;
                  var _0x483a23 = _0x353f74._intersection;
                  var _0x17fe8d = !(!_0x34089c || !_0x34089c._overlap);
                  var _0xb05fef = !(!_0x483a23 || !_0x483a23._overlap);
                  var _0x2b714a = _0xb5924a._path;
                  var _0x28fb17 = _0x353f74._path;
                  if (_0x17fe8d ^ _0xb05fef) {
                    if (_0x17fe8d) {
                      return 1;
                    } else {
                      return -1;
                    }
                  } else if (!_0x34089c ^ !_0x483a23) {
                    if (_0x34089c) {
                      return 1;
                    } else {
                      return -1;
                    }
                  } else if (_0x2b714a !== _0x28fb17) {
                    return _0x2b714a._id - _0x28fb17._id;
                  } else {
                    return _0xb5924a._index - _0x353f74._index;
                  }
                });
                for (var _0x3d129a = 0, _0x5527d5 = _0x1f8757.length; _0x3d129a < _0x5527d5; _0x3d129a++) {
                  var _0x3f11e5;
                  var _0x185d8f;
                  var _0x3f7c26;
                  var _0x27ae6a;
                  var _0x48595b;
                  var _0x1f17e9 = _0x1f8757[_0x3d129a];
                  var _0x136047 = _0x2a10df(_0x1f17e9);
                  var _0x538bf6 = null;
                  var _0x5322f0 = false;
                  var _0x9def74 = true;
                  var _0x335651 = [];
                  for (_0x136047 && _0x1f17e9._path._overlapsOnly && (_0x27ae6a = _0x1f17e9._path, _0x48595b = _0x1f17e9._intersection._segment._path, _0x27ae6a.compare(_0x48595b) && (_0x27ae6a.getArea() && _0x419dca.push(_0x27ae6a.clone(false)), _0xcbd8a3(_0x27ae6a), _0xcbd8a3(_0x48595b), _0x136047 = false)); _0x136047;) {
                    var _0x1569ca = !_0x538bf6;
                    var _0x5bab41 = function (_0x24a1ad, _0x46a634) {
                      var _0xd72c71 = _0x24a1ad._intersection;
                      var _0x4b403f = _0xd72c71;
                      var _0x1a85cc = [];
                      function _0x2ed72e(_0x17923e, _0x416385) {
                        for (; _0x17923e && _0x17923e !== _0x416385;) {
                          var _0xba6603;
                          var _0x43fc7f = _0x17923e._segment;
                          var _0x854a57 = _0x43fc7f && _0x43fc7f._path;
                          if (_0x854a57) {
                            _0x854a57 = (_0xba6603 = _0x43fc7f.getNext() || _0x854a57.getFirstSegment())._intersection;
                            if (_0x43fc7f !== _0x24a1ad && (_0x437627(_0x43fc7f) || _0x437627(_0xba6603) || _0xba6603 && _0x2a10df(_0x43fc7f) && (_0x2a10df(_0xba6603) || _0x854a57 && _0x2a10df(_0x854a57._segment)))) {
                              _0x1a85cc.push(_0x43fc7f);
                            }
                            if (_0x46a634) {
                              _0x5d8089.push(_0x43fc7f);
                            }
                          }
                          _0x17923e = _0x17923e._next;
                        }
                      }
                      if (_0x46a634) {
                        _0x5d8089 = [_0x24a1ad];
                      }
                      if (_0xd72c71) {
                        for (_0x2ed72e(_0xd72c71); _0xd72c71 && _0xd72c71._previous;) {
                          _0xd72c71 = _0xd72c71._previous;
                        }
                        _0x2ed72e(_0xd72c71, _0x4b403f);
                      }
                      return _0x1a85cc;
                    }(_0x1f17e9, _0x1569ca);
                    var _0x1e3480 = _0x5bab41.shift();
                    var _0x388165 = !(_0x5322f0 = !_0x1569ca && (_0x437627(_0x1f17e9) || _0x437627(_0x1e3480))) && _0x1e3480;
                    if (_0x1569ca) {
                      _0x538bf6 = new _0x5615aa(_0x1f30bb.NO_INSERT);
                      _0x3f11e5 = null;
                    }
                    if (_0x5322f0) {
                      if (_0x1f17e9.isFirst() || _0x1f17e9.isLast()) {
                        _0x9def74 = _0x1f17e9._path._closed;
                      }
                      _0x1f17e9._visited = true;
                      break;
                    }
                    if (_0x388165 && _0x3f11e5) {
                      _0x335651.push(_0x3f11e5);
                      _0x3f11e5 = null;
                    }
                    if (!_0x3f11e5) {
                      if (_0x388165) {
                        _0x5bab41.push(_0x1f17e9);
                      }
                      _0x3f11e5 = {
                        start: _0x538bf6._segments.length,
                        crossings: _0x5bab41,
                        visited: _0x185d8f = [],
                        handleIn: _0x3f7c26
                      };
                    }
                    if (!_0x2a10df(_0x1f17e9 = _0x388165 ? _0x1e3480 : _0x1f17e9)) {
                      _0x538bf6.removeSegments(_0x3f11e5.start);
                      for (var _0x527e68 = 0, _0xc14976 = _0x185d8f.length; _0x527e68 < _0xc14976; _0x527e68++) {
                        _0x185d8f[_0x527e68]._visited = false;
                      }
                      for (_0x185d8f.length = 0; (_0x1f17e9 = _0x3f11e5 && _0x3f11e5.crossings.shift()) && _0x1f17e9._path || (_0x1f17e9 = null, (_0x3f11e5 = _0x335651.pop()) && (_0x185d8f = _0x3f11e5.visited, _0x3f7c26 = _0x3f11e5.handleIn)), _0x3f11e5 && !_0x2a10df(_0x1f17e9););
                      if (!_0x1f17e9) {
                        break;
                      }
                    }
                    _0x1e3480 = _0x1f17e9.getNext();
                    _0x538bf6.add(new _0x2657e4(_0x1f17e9._point, _0x3f7c26, _0x1e3480 && _0x1f17e9._handleOut));
                    _0x1f17e9._visited = true;
                    _0x185d8f.push(_0x1f17e9);
                    _0x1f17e9 = _0x1e3480 || _0x1f17e9._path.getFirstSegment();
                    _0x3f7c26 = _0x1e3480 && _0x1e3480._handleIn;
                  }
                  if (_0x5322f0) {
                    if (_0x9def74) {
                      _0x538bf6.getFirstSegment().setHandleIn(_0x3f7c26);
                      _0x538bf6.setClosed(_0x9def74);
                    }
                    if (_0x538bf6.getArea() !== 0) {
                      _0x419dca.push(_0x538bf6);
                    }
                  }
                }
                return _0x419dca;
              }
              return {
                _getWinding: function (_0x42fec5, _0x241e94, _0x5d7fa9) {
                  return _0x16aa8d(_0x42fec5, this.getCurves(), _0x241e94, _0x5d7fa9);
                },
                unite: function (_0x7bfa4a, _0xd0e9d9) {
                  return _0x335d17(this, _0x7bfa4a, "unite", _0xd0e9d9);
                },
                intersect: function (_0x334fed, _0x5bd431) {
                  return _0x335d17(this, _0x334fed, "intersect", _0x5bd431);
                },
                subtract: function (_0x14b135, _0x48295c) {
                  return _0x335d17(this, _0x14b135, "subtract", _0x48295c);
                },
                exclude: function (_0x559c79, _0x55fe9c) {
                  return _0x335d17(this, _0x559c79, "exclude", _0x55fe9c);
                },
                divide: function (_0x28b2c3, _0x2464c9) {
                  if (_0x2464c9 && (_0x2464c9.trace == 0 || _0x2464c9.stroke)) {
                    return _0x3409bb(this, _0x28b2c3, "divide");
                  } else {
                    return _0x4b8bdc([this.subtract(_0x28b2c3, _0x2464c9), this.intersect(_0x28b2c3, _0x2464c9)], true, this, _0x28b2c3, _0x2464c9);
                  }
                },
                resolveCrossings: function () {
                  var _0x1a2c46 = this._children;
                  var _0x3021ee = _0x1a2c46 || [this];
                  function _0x40238d(_0x19a56b, _0x45bf99) {
                    return (_0x19a56b = _0x19a56b && _0x19a56b._intersection) && _0x19a56b._overlap && _0x19a56b._path === _0x45bf99;
                  }
                  var _0x1c16bb;
                  var _0x485805 = false;
                  var _0x7373db = false;
                  var _0x3b1567 = this.getIntersections(null, function (_0x237110) {
                    if (_0x237110.hasOverlap()) {
                      return _0x485805 = true;
                    } else {
                      return _0x237110.isCrossing() && (_0x7373db = true);
                    }
                  });
                  var _0x27a913 = _0x485805 && _0x7373db && [];
                  _0x3b1567 = _0x27f88f.expand(_0x3b1567);
                  if (_0x485805) {
                    for (var _0x2d968f = _0x126021(_0x3b1567, function (_0x2c20ae) {
                        return _0x2c20ae.hasOverlap();
                      }, _0x27a913), _0xbf9600 = _0x2d968f.length - 1; _0xbf9600 >= 0; _0xbf9600--) {
                      var _0x3547f5 = (_0x494cf5 = _0x2d968f[_0xbf9600])._path;
                      var _0x3482b9 = _0x494cf5._segment;
                      var _0x5a37ab = _0x3482b9.getPrevious();
                      var _0x494cf5 = _0x3482b9.getNext();
                      if (_0x40238d(_0x5a37ab, _0x3547f5) && _0x40238d(_0x494cf5, _0x3547f5)) {
                        _0x3482b9.remove();
                        _0x5a37ab._handleOut._set(0, 0);
                        _0x494cf5._handleIn._set(0, 0);
                        if (!(_0x5a37ab === _0x3482b9 || _0x5a37ab.getCurve().hasLength())) {
                          _0x494cf5._handleIn.set(_0x5a37ab._handleIn);
                          _0x5a37ab.remove();
                        }
                      }
                    }
                  }
                  if (_0x7373db) {
                    _0x126021(_0x3b1567, _0x485805 && function (_0x13c1ae) {
                      var _0x940b93 = _0x13c1ae.getCurve();
                      var _0xc61848 = _0x13c1ae.getSegment();
                      _0x13c1ae = (_0x11d7c7 = _0x13c1ae._intersection)._curve;
                      var _0x11d7c7 = _0x11d7c7._segment;
                      if (_0x940b93 && _0x13c1ae && _0x940b93._path && _0x13c1ae._path) {
                        return true;
                      }
                      if (_0xc61848) {
                        _0xc61848._intersection = null;
                      }
                      if (_0x11d7c7) {
                        _0x11d7c7._intersection = null;
                      }
                    }, _0x27a913);
                    if (_0x27a913) {
                      _0x11686a(_0x27a913);
                    }
                    _0x3021ee = _0x2e2c92(_0x28b48a.each(_0x3021ee, function (_0x190547) {
                      _0x28b48a.push(this, _0x190547._segments);
                    }, []));
                  }
                  if ((_0x27a913 = _0x3021ee.length) > 1 && _0x1a2c46) {
                    if (_0x3021ee !== _0x1a2c46) {
                      this.setChildren(_0x3021ee);
                    }
                    _0x1c16bb = this;
                  } else if (!(_0x27a913 !== 1 || _0x1a2c46)) {
                    if (_0x3021ee[0] !== this) {
                      this.setSegments(_0x3021ee[0].removeSegments());
                    }
                    _0x1c16bb = this;
                  }
                  if (!_0x1c16bb) {
                    (_0x1c16bb = new _0x5efee7(_0x1f30bb.NO_INSERT)).addChildren(_0x3021ee);
                    (_0x1c16bb = _0x1c16bb.reduce()).copyAttributes(this);
                    this.replaceWith(_0x1c16bb);
                  }
                  return _0x1c16bb;
                },
                reorient: function (_0x3cd65d, _0x38d12b) {
                  var _0x35bc01 = this._children;
                  if (_0x35bc01 && _0x35bc01.length) {
                    this.setChildren(_0x19c479(this.removeChildren(), function (_0x47ea5b) {
                      return !!(_0x3cd65d ? _0x47ea5b : _0x47ea5b & 1);
                    }, _0x38d12b));
                  } else if (_0x38d12b !== _0x2bd7be) {
                    this.setClockwise(_0x38d12b);
                  }
                  return this;
                },
                getInteriorPoint: function () {
                  var _0x504be9 = this.getBounds().getCenter(true);
                  if (!this.contains(_0x504be9)) {
                    for (var _0x2ee937 = this.getCurves(), _0x2efb61 = _0x504be9.y, _0x3b0cef = [], _0x1fddb2 = [], _0x62a164 = 0, _0x4d9982 = _0x2ee937.length; _0x62a164 < _0x4d9982; _0x62a164++) {
                      var _0x59aa0d = _0x2ee937[_0x62a164].getValues();
                      var _0x3fe24c = _0x59aa0d[1];
                      var _0x397808 = _0x59aa0d[3];
                      var _0x183711 = _0x59aa0d[5];
                      var _0x71da39 = _0x59aa0d[7];
                      if (_0x2efb61 >= _0x2c0c78(_0x3fe24c, _0x397808, _0x183711, _0x71da39) && _0x2efb61 <= _0x55e4f1(_0x3fe24c, _0x397808, _0x183711, _0x71da39)) {
                        for (var _0x41530c = _0x53ec04.getMonoCurves(_0x59aa0d), _0x376cdb = 0, _0x3c0765 = _0x41530c.length; _0x376cdb < _0x3c0765; _0x376cdb++) {
                          var _0x5eae4c = _0x41530c[_0x376cdb];
                          var _0x228561 = _0x5eae4c[1];
                          var _0x385261 = _0x5eae4c[7];
                          if (_0x228561 !== _0x385261 && (_0x228561 <= _0x2efb61 && _0x2efb61 <= _0x385261 || _0x385261 <= _0x2efb61 && _0x2efb61 <= _0x228561)) {
                            _0x5eae4c = _0x2efb61 === _0x228561 ? _0x5eae4c[0] : _0x2efb61 === _0x385261 ? _0x5eae4c[6] : _0x53ec04.solveCubic(_0x5eae4c, 1, _0x2efb61, _0x1fddb2, 0, 1) === 1 ? _0x53ec04.getPoint(_0x5eae4c, _0x1fddb2[0]).x : (_0x5eae4c[0] + _0x5eae4c[6]) / 2;
                            _0x3b0cef.push(_0x5eae4c);
                          }
                        }
                      }
                    }
                    if (_0x3b0cef.length > 1) {
                      _0x3b0cef.sort(function (_0x3a5c83, _0x32ff87) {
                        return _0x3a5c83 - _0x32ff87;
                      });
                      _0x504be9.x = (_0x3b0cef[0] + _0x3b0cef[1]) / 2;
                    }
                  }
                  return _0x504be9;
                }
              };
            }());
            var _0x5de3f7 = _0x28b48a.extend({
              _class: "PathFlattener",
              initialize: function (_0x4fa018, _0x995968, _0x481c46, _0x59540e, _0xbcab7b) {
                var _0x17bf5e;
                var _0x38468 = [];
                var _0x54f84b = [];
                var _0x359bf7 = 0;
                var _0x4fd57f = 1 / (_0x481c46 || 32);
                var _0x4f8cb1 = _0x4fa018._segments;
                var _0x15c548 = _0x4f8cb1[0];
                function _0x356630(_0x155c1a, _0x1e4568) {
                  _0x1e4568 = _0x53ec04.getValues(_0x155c1a, _0x1e4568, _0xbcab7b);
                  _0x38468.push(_0x1e4568);
                  (function _0x143fe2(_0x32ce64, _0x2e8b50, _0x4d4915, _0x25546c) {
                    var _0x972811;
                    var _0x2c8ca3;
                    if (!(_0x4fd57f < _0x25546c - _0x4d4915) || _0x59540e && _0x53ec04.isStraight(_0x32ce64) || _0x53ec04.isFlatEnough(_0x32ce64, _0x995968 || 0.25)) {
                      _0x972811 = _0x32ce64[6] - _0x32ce64[0];
                      _0x2c8ca3 = _0x32ce64[7] - _0x32ce64[1];
                      if ((_0x2c8ca3 = Math.sqrt(_0x972811 * _0x972811 + _0x2c8ca3 * _0x2c8ca3)) > 0) {
                        _0x359bf7 += _0x2c8ca3;
                        _0x54f84b.push({
                          offset: _0x359bf7,
                          curve: _0x32ce64,
                          index: _0x2e8b50,
                          time: _0x25546c
                        });
                      }
                    } else {
                      _0x2c8ca3 = _0x53ec04.subdivide(_0x32ce64, 0.5);
                      _0x32ce64 = (_0x4d4915 + _0x25546c) / 2;
                      _0x143fe2(_0x2c8ca3[0], _0x2e8b50, _0x4d4915, _0x32ce64);
                      _0x143fe2(_0x2c8ca3[1], _0x2e8b50, _0x32ce64, _0x25546c);
                    }
                  })(_0x1e4568, _0x155c1a._index, 0, 1);
                }
                for (var _0x8e2328 = 1, _0xf6bc19 = _0x4f8cb1.length; _0x8e2328 < _0xf6bc19; _0x8e2328++) {
                  _0x356630(_0x15c548, _0x17bf5e = _0x4f8cb1[_0x8e2328]);
                  _0x15c548 = _0x17bf5e;
                }
                if (_0x4fa018._closed) {
                  _0x356630(_0x17bf5e || _0x15c548, _0x4f8cb1[0]);
                }
                this.curves = _0x38468;
                this.parts = _0x54f84b;
                this.length = _0x359bf7;
                this.index = 0;
              },
              _get: function (_0x5bd8ed) {
                for (var _0x3816db, _0x359972 = this.parts, _0x3d4b09 = _0x359972.length, _0x4d65af = this.index; (_0x3816db = _0x4d65af) && !(_0x359972[--_0x4d65af].offset < _0x5bd8ed););
                for (; _0x3816db < _0x3d4b09; _0x3816db++) {
                  var _0x528bae = _0x359972[_0x3816db];
                  if (_0x528bae.offset >= _0x5bd8ed) {
                    var _0x1574e2 = (_0x1411c4 = _0x359972[(this.index = _0x3816db) - 1]) && _0x1411c4.index === _0x528bae.index ? _0x1411c4.time : 0;
                    var _0x1411c4 = _0x1411c4 ? _0x1411c4.offset : 0;
                    return {
                      index: _0x528bae.index,
                      time: _0x1574e2 + (_0x528bae.time - _0x1574e2) * (_0x5bd8ed - _0x1411c4) / (_0x528bae.offset - _0x1411c4)
                    };
                  }
                }
                return {
                  index: _0x359972[_0x3d4b09 - 1].index,
                  time: 1
                };
              },
              drawPart: function (_0x526735, _0x3fb774, _0x91a4c8) {
                for (var _0x52c7e9 = this._get(_0x3fb774), _0x40213d = this._get(_0x91a4c8), _0x2bc46e = _0x52c7e9.index, _0x3325fa = _0x40213d.index; _0x2bc46e <= _0x3325fa; _0x2bc46e++) {
                  var _0x1643c1 = _0x53ec04.getPart(this.curves[_0x2bc46e], _0x2bc46e === _0x52c7e9.index ? _0x52c7e9.time : 0, _0x2bc46e === _0x40213d.index ? _0x40213d.time : 1);
                  if (_0x2bc46e === _0x52c7e9.index) {
                    _0x526735.moveTo(_0x1643c1[0], _0x1643c1[1]);
                  }
                  _0x526735.bezierCurveTo.apply(_0x526735, _0x1643c1.slice(2));
                }
              }
            }, _0x28b48a.each(_0x53ec04._evaluateMethods, function (_0x3d54c2) {
              this[_0x3d54c2 + "At"] = function (_0x4fb24b) {
                _0x4fb24b = this._get(_0x4fb24b);
                return _0x53ec04[_0x3d54c2](this.curves[_0x4fb24b.index], _0x4fb24b.time);
              };
            }, {}));
            var _0xce849c = _0x28b48a.extend({
              initialize: function (_0x18c195) {
                for (var _0x59782d, _0x4243da = this.points = [], _0x2d2620 = _0x18c195._segments, _0x38128f = (_0x18c195 = _0x18c195._closed, 0), _0x5e40fb = _0x2d2620.length; _0x38128f < _0x5e40fb; _0x38128f++) {
                  var _0x242bc9 = _0x2d2620[_0x38128f].point;
                  if (!(_0x59782d && _0x59782d.equals(_0x242bc9))) {
                    _0x4243da.push(_0x59782d = _0x242bc9.clone());
                  }
                }
                if (_0x18c195) {
                  _0x4243da.unshift(_0x4243da[_0x4243da.length - 1]);
                  _0x4243da.push(_0x4243da[1]);
                }
                this.closed = _0x18c195;
              },
              fit: function (_0xfe7c06) {
                var _0x4d0531 = this.points;
                var _0x453106 = _0x4d0531.length;
                var _0x5880e7 = null;
                if (_0x453106 > 0) {
                  _0x5880e7 = [new _0x2657e4(_0x4d0531[0])];
                  if (_0x453106 > 1) {
                    this.fitCubic(_0x5880e7, _0xfe7c06, 0, _0x453106 - 1, _0x4d0531[1].subtract(_0x4d0531[0]), _0x4d0531[_0x453106 - 2].subtract(_0x4d0531[_0x453106 - 1]));
                    if (this.closed) {
                      _0x5880e7.shift();
                      _0x5880e7.pop();
                    }
                  }
                }
                return _0x5880e7;
              },
              fitCubic: function (_0x331404, _0x31b1c6, _0x2cdbbe, _0xe4a693, _0x455ccc, _0x53e2ef) {
                var _0x5dcdf3 = this.points;
                if (_0xe4a693 - _0x2cdbbe != 1) {
                  for (var _0xcdec22, _0x568a61 = this.chordLengthParameterize(_0x2cdbbe, _0xe4a693), _0x47c9ce = Math.max(_0x31b1c6, _0x31b1c6 * _0x31b1c6), _0x1ce82a = true, _0x34fccb = 0; _0x34fccb <= 4; _0x34fccb++) {
                    var _0x1c82ae = this.generateBezier(_0x2cdbbe, _0xe4a693, _0x568a61, _0x455ccc, _0x53e2ef);
                    var _0xb622fa = this.findMaxError(_0x2cdbbe, _0xe4a693, _0x1c82ae, _0x568a61);
                    if (_0xb622fa.error < _0x31b1c6 && _0x1ce82a) {
                      this.addCurve(_0x331404, _0x1c82ae);
                      return;
                    }
                    _0xcdec22 = _0xb622fa.index;
                    if (_0xb622fa.error >= _0x47c9ce) {
                      break;
                    }
                    _0x1ce82a = this.reparameterize(_0x2cdbbe, _0xe4a693, _0x568a61, _0x1c82ae);
                    _0x47c9ce = _0xb622fa.error;
                  }
                  var _0x3badf1 = _0x5dcdf3[_0xcdec22 - 1].subtract(_0x5dcdf3[_0xcdec22 + 1]);
                  this.fitCubic(_0x331404, _0x31b1c6, _0x2cdbbe, _0xcdec22, _0x455ccc, _0x3badf1);
                  this.fitCubic(_0x331404, _0x31b1c6, _0xcdec22, _0xe4a693, _0x3badf1.negate(), _0x53e2ef);
                } else {
                  var _0x5b8cd5 = _0x5dcdf3[_0x2cdbbe];
                  _0x3badf1 = _0x5dcdf3[_0xe4a693];
                  _0x5dcdf3 = _0x5b8cd5.getDistance(_0x3badf1) / 3;
                  this.addCurve(_0x331404, [_0x5b8cd5, _0x5b8cd5.add(_0x455ccc.normalize(_0x5dcdf3)), _0x3badf1.add(_0x53e2ef.normalize(_0x5dcdf3)), _0x3badf1]);
                }
              },
              addCurve: function (_0x5b1798, _0x23f991) {
                _0x5b1798[_0x5b1798.length - 1].setHandleOut(_0x23f991[1].subtract(_0x23f991[0]));
                _0x5b1798.push(new _0x2657e4(_0x23f991[3], _0x23f991[2].subtract(_0x23f991[3])));
              },
              generateBezier: function (_0x4b95d9, _0x4da68f, _0x534a28, _0x4ebf77, _0x4df11e) {
                for (var _0x234486 = Math.abs, _0x1ee966 = this.points, _0x2bc197 = _0x1ee966[_0x4b95d9], _0xd53f30 = _0x1ee966[_0x4da68f], _0x5d6dd5 = [[0, 0], [0, 0]], _0x79401e = [0, 0], _0x5bac92 = 0, _0x1f28a4 = _0x4da68f - _0x4b95d9 + 1; _0x5bac92 < _0x1f28a4; _0x5bac92++) {
                  var _0x182393 = (_0x5d8e18 = 1 - (_0x1482f7 = _0x534a28[_0x5bac92])) * _0x5d8e18 * _0x5d8e18;
                  var _0x2a5f1d = (_0xf381ff = _0x1482f7 * 3 * _0x5d8e18) * _0x5d8e18;
                  var _0x5aebff = _0xf381ff * _0x1482f7;
                  var _0x5d8e18 = _0x1482f7 * _0x1482f7 * _0x1482f7;
                  var _0xf381ff = _0x4ebf77.normalize(_0x2a5f1d);
                  var _0x1482f7 = _0x4df11e.normalize(_0x5aebff);
                  _0x5d8e18 = _0x1ee966[_0x4b95d9 + _0x5bac92].subtract(_0x2bc197.multiply(_0x182393 + _0x2a5f1d)).subtract(_0xd53f30.multiply(_0x5aebff + _0x5d8e18));
                  _0x5d6dd5[0][0] += _0xf381ff.dot(_0xf381ff);
                  _0x5d6dd5[0][1] += _0xf381ff.dot(_0x1482f7);
                  _0x5d6dd5[1][0] = _0x5d6dd5[0][1];
                  _0x5d6dd5[1][1] += _0x1482f7.dot(_0x1482f7);
                  _0x79401e[0] += _0xf381ff.dot(_0x5d8e18);
                  _0x79401e[1] += _0x1482f7.dot(_0x5d8e18);
                }
                var _0xbeffb9;
                var _0x1baf6d;
                if (_0x234486(_0x4da68f = _0x5d6dd5[0][0] * _0x5d6dd5[1][1] - _0x5d6dd5[1][0] * _0x5d6dd5[0][1]) > 1e-12) {
                  _0x1baf6d = _0x5d6dd5[0][0] * _0x79401e[1] - _0x5d6dd5[1][0] * _0x79401e[0];
                  _0xbeffb9 = (_0x79401e[0] * _0x5d6dd5[1][1] - _0x79401e[1] * _0x5d6dd5[0][1]) / _0x4da68f;
                  _0x1baf6d /= _0x4da68f;
                } else {
                  _0x4da68f = _0x5d6dd5[0][0] + _0x5d6dd5[0][1];
                  _0x945bac = _0x5d6dd5[1][0] + _0x5d6dd5[1][1];
                  _0xbeffb9 = _0x1baf6d = _0x234486(_0x4da68f) > 1e-12 ? _0x79401e[0] / _0x4da68f : _0x234486(_0x945bac) > 1e-12 ? _0x79401e[1] / _0x945bac : 0;
                }
                var _0x33038b;
                var _0x228cd9;
                var _0x945bac = (_0x234486 = _0xd53f30.getDistance(_0x2bc197)) * 1e-12;
                if (_0xbeffb9 < _0x945bac || _0x1baf6d < _0x945bac) {
                  _0xbeffb9 = _0x1baf6d = _0x234486 / 3;
                } else {
                  _0x945bac = _0xd53f30.subtract(_0x2bc197);
                  _0x33038b = _0x4ebf77.normalize(_0xbeffb9);
                  _0x228cd9 = _0x4df11e.normalize(_0x1baf6d);
                  if (_0x33038b.dot(_0x945bac) - _0x228cd9.dot(_0x945bac) > _0x234486 * _0x234486) {
                    _0xbeffb9 = _0x1baf6d = _0x234486 / 3;
                    _0x33038b = _0x228cd9 = null;
                  }
                }
                return [_0x2bc197, _0x2bc197.add(_0x33038b || _0x4ebf77.normalize(_0xbeffb9)), _0xd53f30.add(_0x228cd9 || _0x4df11e.normalize(_0x1baf6d)), _0xd53f30];
              },
              reparameterize: function (_0x36173f, _0x5763d2, _0x4f5030, _0x2aa731) {
                for (var _0x15d893 = _0x36173f; _0x15d893 <= _0x5763d2; _0x15d893++) {
                  _0x4f5030[_0x15d893 - _0x36173f] = this.findRoot(_0x2aa731, this.points[_0x15d893], _0x4f5030[_0x15d893 - _0x36173f]);
                }
                _0x15d893 = 1;
                for (var _0x3bb250 = _0x4f5030.length; _0x15d893 < _0x3bb250; _0x15d893++) {
                  if (_0x4f5030[_0x15d893] <= _0x4f5030[_0x15d893 - 1]) {
                    return false;
                  }
                }
                return true;
              },
              findRoot: function (_0x4dc3dc, _0x33155f, _0x102248) {
                for (var _0x4364b7 = [], _0x5b9698 = [], _0x5bd6c9 = 0; _0x5bd6c9 <= 2; _0x5bd6c9++) {
                  _0x4364b7[_0x5bd6c9] = _0x4dc3dc[_0x5bd6c9 + 1].subtract(_0x4dc3dc[_0x5bd6c9]).multiply(3);
                }
                for (_0x5bd6c9 = 0; _0x5bd6c9 <= 1; _0x5bd6c9++) {
                  _0x5b9698[_0x5bd6c9] = _0x4364b7[_0x5bd6c9 + 1].subtract(_0x4364b7[_0x5bd6c9]).multiply(2);
                }
                var _0x4f8776 = this.evaluate(3, _0x4dc3dc, _0x102248);
                var _0x29cc95 = this.evaluate(2, _0x4364b7, _0x102248);
                var _0x2988a9 = this.evaluate(1, _0x5b9698, _0x102248);
                _0x33155f = _0x4f8776.subtract(_0x33155f);
                _0x2988a9 = _0x29cc95.dot(_0x29cc95) + _0x33155f.dot(_0x2988a9);
                if (_0x3c029b.isMachineZero(_0x2988a9)) {
                  return _0x102248;
                } else {
                  return _0x102248 - _0x33155f.dot(_0x29cc95) / _0x2988a9;
                }
              },
              evaluate: function (_0x27add0, _0x2fa0b5, _0x30d909) {
                for (var _0x2fb32f = _0x2fa0b5.slice(), _0x5e5821 = 1; _0x5e5821 <= _0x27add0; _0x5e5821++) {
                  for (var _0x8e1816 = 0; _0x8e1816 <= _0x27add0 - _0x5e5821; _0x8e1816++) {
                    _0x2fb32f[_0x8e1816] = _0x2fb32f[_0x8e1816].multiply(1 - _0x30d909).add(_0x2fb32f[_0x8e1816 + 1].multiply(_0x30d909));
                  }
                }
                return _0x2fb32f[0];
              },
              chordLengthParameterize: function (_0x55e82d, _0x2ecc39) {
                for (var _0x39f0e0 = [0], _0x53ffca = _0x55e82d + 1; _0x53ffca <= _0x2ecc39; _0x53ffca++) {
                  _0x39f0e0[_0x53ffca - _0x55e82d] = _0x39f0e0[_0x53ffca - _0x55e82d - 1] + this.points[_0x53ffca].getDistance(this.points[_0x53ffca - 1]);
                }
                _0x53ffca = 1;
                for (var _0x1c7a9c = _0x2ecc39 - _0x55e82d; _0x53ffca <= _0x1c7a9c; _0x53ffca++) {
                  _0x39f0e0[_0x53ffca] /= _0x39f0e0[_0x1c7a9c];
                }
                return _0x39f0e0;
              },
              findMaxError: function (_0xf2597e, _0x54994c, _0x55b06b, _0x3867bf) {
                for (var _0x3cb53e = Math.floor((_0x54994c - _0xf2597e + 1) / 2), _0x5311db = 0, _0x324038 = _0xf2597e + 1; _0x324038 < _0x54994c; _0x324038++) {
                  var _0x469f3c;
                  if (_0x5311db <= (_0x469f3c = (_0x469f3c = this.evaluate(3, _0x55b06b, _0x3867bf[_0x324038 - _0xf2597e]).subtract(this.points[_0x324038])).x * _0x469f3c.x + _0x469f3c.y * _0x469f3c.y)) {
                    _0x5311db = _0x469f3c;
                    _0x3cb53e = _0x324038;
                  }
                }
                return {
                  error: _0x5311db,
                  index: _0x3cb53e
                };
              }
            });
            var _0x244276 = _0x1f30bb.extend({
              _class: "TextItem",
              _applyMatrix: false,
              _canApplyMatrix: false,
              _serializeFields: {
                content: null
              },
              _boundsOptions: {
                stroke: false,
                handle: false
              },
              initialize: function (_0x5f14ca) {
                this._content = "";
                this._lines = [];
                var _0x2ba01d = _0x5f14ca && _0x28b48a.isPlainObject(_0x5f14ca) && _0x5f14ca.x === _0x2bd7be && _0x5f14ca.y === _0x2bd7be;
                this._initialize(_0x2ba01d && _0x5f14ca, !_0x2ba01d && _0xbc5c4a.read(arguments));
              },
              _equals: function (_0x1e8814) {
                return this._content === _0x1e8814._content;
              },
              copyContent: function (_0x794475) {
                this.setContent(_0x794475._content);
              },
              getContent: function () {
                return this._content;
              },
              setContent: function (_0x1d7403) {
                this._content = "" + _0x1d7403;
                this._lines = this._content.split(/\r\n|\n|\r/gm);
                this._changed(521);
              },
              isEmpty: function () {
                return !this._content;
              },
              getCharacterStyle: "#getStyle",
              setCharacterStyle: "#setStyle",
              getParagraphStyle: "#getStyle",
              setParagraphStyle: "#setStyle"
            });
            var _0x34fe3b = _0x244276.extend({
              _class: "PointText",
              initialize: function () {
                _0x244276.apply(this, arguments);
              },
              getPoint: function () {
                var _0x5b791b = this._matrix.getTranslation();
                return new _0x3d6d6d(_0x5b791b.x, _0x5b791b.y, this, "setPoint");
              },
              setPoint: function () {
                var _0x94ac9d = _0xbc5c4a.read(arguments);
                this.translate(_0x94ac9d.subtract(this._matrix.getTranslation()));
              },
              _draw: function (_0x1a36e6, _0x5f49b2, _0x2233a7) {
                if (this._content) {
                  this._setStyles(_0x1a36e6, _0x5f49b2, _0x2233a7);
                  var _0x2f95db = this._lines;
                  var _0x497b8f = (_0x2233a7 = this._style).hasFill();
                  var _0x58d6e7 = _0x2233a7.hasStroke();
                  var _0x5c7516 = _0x2233a7.getLeading();
                  var _0x5acc5c = _0x1a36e6.shadowColor;
                  _0x1a36e6.font = _0x2233a7.getFontStyle();
                  _0x1a36e6.textAlign = _0x2233a7.getJustification();
                  for (var _0x14efa3 = 0, _0x12ed92 = _0x2f95db.length; _0x14efa3 < _0x12ed92; _0x14efa3++) {
                    _0x1a36e6.shadowColor = _0x5acc5c;
                    var _0x39b65e = _0x2f95db[_0x14efa3];
                    if (_0x497b8f) {
                      _0x1a36e6.fillText(_0x39b65e, 0, 0);
                      _0x1a36e6.shadowColor = "rgba(0,0,0,0)";
                    }
                    if (_0x58d6e7) {
                      _0x1a36e6.strokeText(_0x39b65e, 0, 0);
                    }
                    _0x1a36e6.translate(0, _0x5c7516);
                  }
                }
              },
              _getBounds: function (_0x492e91, _0xf60ac9) {
                var _0x171bd4 = this._style;
                var _0x847306 = (_0x1e0b79 = this._lines).length;
                var _0x1f51bb = _0x171bd4.getJustification();
                var _0x2b27d0 = _0x171bd4.getLeading();
                _0x171bd4 = this.getView().getTextWidth(_0x171bd4.getFontStyle(), _0x1e0b79);
                var _0x1e0b79 = 0;
                if (_0x1f51bb !== "left") {
                  _0x1e0b79 -= _0x171bd4 / (_0x1f51bb === "center" ? 2 : 1);
                }
                _0x2b27d0 = new _0x5384ce(_0x1e0b79, _0x847306 ? _0x2b27d0 * -0.75 : 0, _0x171bd4, _0x847306 * _0x2b27d0);
                if (_0x492e91) {
                  return _0x492e91._transformBounds(_0x2b27d0, _0x2b27d0);
                } else {
                  return _0x2b27d0;
                }
              }
            });
            var _0x42fac4 = _0x28b48a.extend(new function () {
              var _0x33d2c0;
              var _0x4ac014 = {
                gray: ["gray"],
                rgb: ["red", "green", "blue"],
                hsb: ["hue", "saturation", "brightness"],
                hsl: ["hue", "saturation", "lightness"],
                gradient: ["gradient", "origin", "destination", "highlight"]
              };
              var _0x5d6edc = {};
              var _0x42551d = {
                transparent: [0, 0, 0, 0]
              };
              var _0x1ee7c5 = [[0, 3, 1], [2, 0, 1], [1, 0, 3], [1, 2, 0], [3, 1, 0], [0, 1, 2]];
              var _0x3a50e5 = {
                "rgb-hsb": function (_0x22a126, _0x4c035c, _0x3ef399) {
                  var _0x4ef76f = Math.max(_0x22a126, _0x4c035c, _0x3ef399);
                  var _0x2f75be = _0x4ef76f - Math.min(_0x22a126, _0x4c035c, _0x3ef399);
                  return [_0x2f75be == 0 ? 0 : (_0x4ef76f == _0x22a126 ? (_0x4c035c - _0x3ef399) / _0x2f75be + (_0x4c035c < _0x3ef399 ? 6 : 0) : _0x4ef76f == _0x4c035c ? (_0x3ef399 - _0x22a126) / _0x2f75be + 2 : (_0x22a126 - _0x4c035c) / _0x2f75be + 4) * 60, _0x4ef76f === 0 ? 0 : _0x2f75be / _0x4ef76f, _0x4ef76f];
                },
                "hsb-rgb": function (_0x303a24, _0x374f35, _0x3bd6ad) {
                  _0x303a24 = (_0x303a24 / 60 % 6 + 6) % 6;
                  var _0x1d7cd2 = Math.floor(_0x303a24);
                  return [(_0x303a24 = [_0x3bd6ad, _0x3bd6ad * (1 - _0x374f35), _0x3bd6ad * (1 - _0x374f35 * (_0x303a24 = _0x303a24 - _0x1d7cd2)), _0x3bd6ad * (1 - _0x374f35 * (1 - _0x303a24))])[(_0x1d7cd2 = _0x1ee7c5[_0x1d7cd2])[0]], _0x303a24[_0x1d7cd2[1]], _0x303a24[_0x1d7cd2[2]]];
                },
                "rgb-hsl": function (_0x3c86ec, _0x333b5d, _0x2523a1) {
                  var _0x181321 = Math.max(_0x3c86ec, _0x333b5d, _0x2523a1);
                  var _0x34da6a = Math.min(_0x3c86ec, _0x333b5d, _0x2523a1);
                  var _0x58497a = _0x181321 - _0x34da6a;
                  var _0xee7ab7 = _0x58497a == 0;
                  var _0xef83de = (_0x181321 + _0x34da6a) / 2;
                  return [_0xee7ab7 ? 0 : (_0x181321 == _0x3c86ec ? (_0x333b5d - _0x2523a1) / _0x58497a + (_0x333b5d < _0x2523a1 ? 6 : 0) : _0x181321 == _0x333b5d ? (_0x2523a1 - _0x3c86ec) / _0x58497a + 2 : (_0x3c86ec - _0x333b5d) / _0x58497a + 4) * 60, _0xee7ab7 ? 0 : _0xef83de < 0.5 ? _0x58497a / (_0x181321 + _0x34da6a) : _0x58497a / (2 - _0x181321 - _0x34da6a), _0xef83de];
                },
                "hsl-rgb": function (_0x185691, _0xfba5fd, _0x2b044e) {
                  if (_0xfba5fd === 0) {
                    return [_0x2b044e, _0x2b044e, _0x2b044e];
                  }
                  for (var _0x11fc5d = [(_0x185691 = (_0x185691 / 360 % 1 + 1) % 1) + 1 / 3, _0x185691, _0x185691 - 1 / 3], _0x24b8e8 = _0x2b044e < 0.5 ? _0x2b044e * (1 + _0xfba5fd) : _0x2b044e + _0xfba5fd - _0x2b044e * _0xfba5fd, _0x59de23 = _0x2b044e * 2 - _0x24b8e8, _0x3d405a = [], _0x38d390 = 0; _0x38d390 < 3; _0x38d390++) {
                    var _0xc35598 = _0x11fc5d[_0x38d390];
                    if (_0xc35598 < 0) {
                      _0xc35598 += 1;
                    }
                    if (_0xc35598 > 1) {
                      --_0xc35598;
                    }
                    _0x3d405a[_0x38d390] = _0xc35598 * 6 < 1 ? _0x59de23 + (_0x24b8e8 - _0x59de23) * 6 * _0xc35598 : _0xc35598 * 2 < 1 ? _0x24b8e8 : _0xc35598 * 3 < 2 ? _0x59de23 + (_0x24b8e8 - _0x59de23) * (2 / 3 - _0xc35598) * 6 : _0x59de23;
                  }
                  return _0x3d405a;
                },
                "rgb-gray": function (_0xa0c828, _0x231886, _0x66d308) {
                  return [_0xa0c828 * 0.2989 + _0x231886 * 0.587 + _0x66d308 * 0.114];
                },
                "gray-rgb": function (_0x28fab2) {
                  return [_0x28fab2, _0x28fab2, _0x28fab2];
                },
                "gray-hsb": function (_0x1c83d2) {
                  return [0, 0, _0x1c83d2];
                },
                "gray-hsl": function (_0xd26b1d) {
                  return [0, 0, _0xd26b1d];
                },
                "gradient-rgb": function () {
                  return [];
                },
                "rgb-gradient": function () {
                  return [];
                }
              };
              return _0x28b48a.each(_0x4ac014, function (_0x2f7443, _0x6a6c1d) {
                _0x5d6edc[_0x6a6c1d] = [];
                _0x28b48a.each(_0x2f7443, function (_0x2a74c2, _0x2248d4) {
                  var _0x534226 = _0x28b48a.capitalize(_0x2a74c2);
                  var _0x1ee884 = /^(hue|saturation)$/.test(_0x2a74c2);
                  var _0x2ea029 = _0x5d6edc[_0x6a6c1d][_0x2248d4] = _0x6a6c1d === "gradient" ? _0x2a74c2 === "gradient" ? function (_0x543456) {
                    var _0xe904ef = this._components[0];
                    if (_0xe904ef !== (_0x543456 = _0x29bf91.read(Array.isArray(_0x543456) ? _0x543456 : arguments, 0, {
                      readNull: true
                    }))) {
                      if (_0xe904ef) {
                        _0xe904ef._removeOwner(this);
                      }
                      if (_0x543456) {
                        _0x543456._addOwner(this);
                      }
                    }
                    return _0x543456;
                  } : function () {
                    return _0xbc5c4a.read(arguments, 0, {
                      readNull: _0x2a74c2 === "highlight",
                      clone: true
                    });
                  } : function (_0xb10eba) {
                    if (_0xb10eba == null || isNaN(_0xb10eba)) {
                      return 0;
                    } else {
                      return +_0xb10eba;
                    }
                  };
                  this["get" + _0x534226] = function () {
                    return (this._type === _0x6a6c1d || _0x1ee884 && /^hs[bl]$/.test(this._type) ? this._components : this._convert(_0x6a6c1d))[_0x2248d4];
                  };
                  this["set" + _0x534226] = function (_0x37463c) {
                    if (!(this._type === _0x6a6c1d || _0x1ee884 && /^hs[bl]$/.test(this._type))) {
                      this._components = this._convert(_0x6a6c1d);
                      this._properties = _0x4ac014[_0x6a6c1d];
                      this._type = _0x6a6c1d;
                    }
                    this._components[_0x2248d4] = _0x2ea029.call(this, _0x37463c);
                    this._changed();
                  };
                }, this);
              }, {
                _class: "Color",
                _readIndex: true,
                initialize: function _0x3582e7(_0x2c2b1) {
                  var _0x3b746b;
                  var _0x1293b4;
                  var _0x4ba00e = arguments;
                  var _0x2eefd5 = this.__read;
                  var _0x3d3b0a = 0;
                  var _0x111f00 = (_0x2c2b1 = Array.isArray(_0x2c2b1) ? (_0x4ba00e = _0x2c2b1)[0] : _0x2c2b1) != null && typeof _0x2c2b1;
                  if (_0x111f00 === "string" && _0x2c2b1 in _0x4ac014) {
                    _0x18d74c = _0x2c2b1;
                    _0x2c2b1 = _0x4ba00e[1];
                    if (Array.isArray(_0x2c2b1)) {
                      _0x3b746b = _0x2c2b1;
                      _0x8f7b5d = _0x4ba00e[2];
                    } else {
                      if (_0x2eefd5) {
                        _0x3d3b0a = 1;
                      }
                      _0x4ba00e = _0x28b48a.slice(_0x4ba00e, 1);
                      _0x111f00 = typeof _0x2c2b1;
                    }
                  }
                  if (!_0x3b746b) {
                    if (_0x1293b4 = _0x111f00 === "number" ? _0x4ba00e : _0x111f00 === "object" && _0x2c2b1.length != null ? _0x2c2b1 : null) {
                      var _0x18d74c = _0x18d74c || (_0x1293b4.length >= 3 ? "rgb" : "gray");
                      var _0x4fd84e = _0x4ac014[_0x18d74c].length;
                      var _0x8f7b5d = _0x1293b4[_0x4fd84e];
                      if (_0x2eefd5) {
                        _0x3d3b0a += _0x1293b4 === arguments ? _0x4fd84e + (_0x8f7b5d != null ? 1 : 0) : 1;
                      }
                      if (_0x1293b4.length > _0x4fd84e) {
                        _0x1293b4 = _0x28b48a.slice(_0x1293b4, 0, _0x4fd84e);
                      }
                    } else if (_0x111f00 === "string") {
                      _0x4fd84e = function (_0x16f37c) {
                        var _0x26b2a4 = _0x16f37c.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})([\da-f]{2})?$/i) || _0x16f37c.match(/^#([\da-f])([\da-f])([\da-f])([\da-f])?$/i);
                        var _0x3455f6 = "rgb";
                        if (_0x26b2a4) {
                          for (var _0x418e70 = _0x26b2a4[4] ? 4 : 3, _0x4cd32b = new Array(_0x418e70), _0x238a42 = 0; _0x238a42 < _0x418e70; _0x238a42++) {
                            var _0x5994c9 = _0x26b2a4[_0x238a42 + 1];
                            _0x4cd32b[_0x238a42] = parseInt(_0x5994c9.length == 1 ? _0x5994c9 + _0x5994c9 : _0x5994c9, 16) / 255;
                          }
                        } else if (_0x26b2a4 = _0x16f37c.match(/^(rgb|hsl)a?\((.*)\)$/)) {
                          _0x3455f6 = _0x26b2a4[1];
                          _0x4cd32b = _0x26b2a4[2].trim().split(/[,\s]+/g);
                          for (var _0x198cb5 = _0x3455f6 === "hsl", _0x292671 = (_0x238a42 = 0, Math.min(_0x4cd32b.length, 4)); _0x238a42 < _0x292671; _0x238a42++) {
                            var _0x102dee;
                            var _0x36b735 = _0x4cd32b[_0x238a42];
                            _0x5994c9 = parseFloat(_0x36b735);
                            if (_0x198cb5) {
                              if (_0x238a42 === 0) {
                                _0x102dee = _0x36b735.match(/([a-z]*)$/)[1];
                                _0x5994c9 *= {
                                  turn: 360,
                                  rad: 180 / Math.PI,
                                  grad: 0.9
                                }[_0x102dee] || 1;
                              } else if (_0x238a42 < 3) {
                                _0x5994c9 /= 100;
                              }
                            } else if (_0x238a42 < 3) {
                              _0x5994c9 /= /%$/.test(_0x36b735) ? 100 : 255;
                            }
                            _0x4cd32b[_0x238a42] = _0x5994c9;
                          }
                        } else {
                          var _0x3a6c61;
                          var _0x2ddd0a = _0x42551d[_0x16f37c];
                          _0x4cd32b = (_0x2ddd0a = _0x2ddd0a || (_0x21c198 ? (_0x33d2c0 || ((_0x33d2c0 = _0xc9a63f.getContext(1, 1)).globalCompositeOperation = "copy"), _0x33d2c0.fillStyle = "rgba(0,0,0,0)", _0x33d2c0.fillStyle = _0x16f37c, _0x33d2c0.fillRect(0, 0, 1, 1), _0x3a6c61 = _0x33d2c0.getImageData(0, 0, 1, 1).data, _0x42551d[_0x16f37c] = [_0x3a6c61[0] / 255, _0x3a6c61[1] / 255, _0x3a6c61[2] / 255]) : [0, 0, 0])).slice();
                        }
                        return [_0x3455f6, _0x4cd32b];
                      }(_0x2c2b1);
                      _0x18d74c = _0x4fd84e[0];
                      if ((_0x3b746b = _0x4fd84e[1]).length === 4) {
                        _0x8f7b5d = _0x3b746b[3];
                        _0x3b746b.length--;
                      }
                    } else if (_0x111f00 === "object") {
                      if (_0x2c2b1.constructor === _0x3582e7) {
                        _0x18d74c = _0x2c2b1._type;
                        _0x3b746b = _0x2c2b1._components.slice();
                        _0x8f7b5d = _0x2c2b1._alpha;
                        if (_0x18d74c === "gradient") {
                          for (var _0x28d2a0 = 1, _0x4b9b4b = _0x3b746b.length; _0x28d2a0 < _0x4b9b4b; _0x28d2a0++) {
                            var _0x47e683 = _0x3b746b[_0x28d2a0];
                            if (_0x47e683) {
                              _0x3b746b[_0x28d2a0] = _0x47e683.clone();
                            }
                          }
                        }
                      } else if (_0x2c2b1.constructor === _0x29bf91) {
                        _0x18d74c = "gradient";
                        _0x1293b4 = _0x4ba00e;
                      } else {
                        var _0x45baa6 = _0x4ac014[_0x18d74c = "hue" in _0x2c2b1 ? "lightness" in _0x2c2b1 ? "hsl" : "hsb" : "gradient" in _0x2c2b1 || "stops" in _0x2c2b1 || "radial" in _0x2c2b1 ? "gradient" : "gray" in _0x2c2b1 ? "gray" : "rgb"];
                        var _0x12129f = _0x5d6edc[_0x18d74c];
                        this._components = _0x3b746b = [];
                        _0x28d2a0 = 0;
                        _0x4b9b4b = _0x45baa6.length;
                        for (; _0x28d2a0 < _0x4b9b4b; _0x28d2a0++) {
                          if ((_0x73d6c2 = _0x2c2b1[_0x45baa6[_0x28d2a0]]) == null && !_0x28d2a0 && _0x18d74c === "gradient" && "stops" in _0x2c2b1) {
                            _0x73d6c2 = {
                              stops: _0x2c2b1.stops,
                              radial: _0x2c2b1.radial
                            };
                          }
                          if ((_0x73d6c2 = _0x12129f[_0x28d2a0].call(this, _0x73d6c2)) != null) {
                            _0x3b746b[_0x28d2a0] = _0x73d6c2;
                          }
                        }
                        _0x8f7b5d = _0x2c2b1.alpha;
                      }
                    }
                    if (_0x2eefd5 && _0x18d74c) {
                      _0x3d3b0a = 1;
                    }
                  }
                  this._type = _0x18d74c || "rgb";
                  if (!_0x3b746b) {
                    this._components = _0x3b746b = [];
                    var _0x73d6c2;
                    _0x28d2a0 = 0;
                    _0x4b9b4b = (_0x12129f = _0x5d6edc[this._type]).length;
                    for (; _0x28d2a0 < _0x4b9b4b; _0x28d2a0++) {
                      if ((_0x73d6c2 = _0x12129f[_0x28d2a0].call(this, _0x1293b4 && _0x1293b4[_0x28d2a0])) != null) {
                        _0x3b746b[_0x28d2a0] = _0x73d6c2;
                      }
                    }
                  }
                  this._components = _0x3b746b;
                  this._properties = _0x4ac014[this._type];
                  this._alpha = _0x8f7b5d;
                  if (_0x2eefd5) {
                    this.__read = _0x3d3b0a;
                  }
                  return this;
                },
                set: "#initialize",
                _serialize: function (_0x3187e6, _0x290e39) {
                  var _0x44023e = this.getComponents();
                  return _0x28b48a.serialize(/^(gray|rgb)$/.test(this._type) ? _0x44023e : [this._type].concat(_0x44023e), _0x3187e6, true, _0x290e39);
                },
                _changed: function () {
                  this._canvasStyle = null;
                  if (this._owner) {
                    if (this._setter) {
                      this._owner[this._setter](this);
                    } else {
                      this._owner._changed(129);
                    }
                  }
                },
                _convert: function (_0x234d6c) {
                  var _0x70416b;
                  if (this._type === _0x234d6c) {
                    return this._components.slice();
                  } else if (_0x70416b = _0x3a50e5[this._type + "-" + _0x234d6c]) {
                    return _0x70416b.apply(this, this._components);
                  } else {
                    return _0x3a50e5["rgb-" + _0x234d6c].apply(this, _0x3a50e5[this._type + "-rgb"].apply(this, this._components));
                  }
                },
                convert: function (_0x2ffd4c) {
                  return new _0x42fac4(_0x2ffd4c, this._convert(_0x2ffd4c), this._alpha);
                },
                getType: function () {
                  return this._type;
                },
                setType: function (_0x162572) {
                  this._components = this._convert(_0x162572);
                  this._properties = _0x4ac014[_0x162572];
                  this._type = _0x162572;
                },
                getComponents: function () {
                  var _0xe5be50 = this._components.slice();
                  if (this._alpha != null) {
                    _0xe5be50.push(this._alpha);
                  }
                  return _0xe5be50;
                },
                getAlpha: function () {
                  if (this._alpha != null) {
                    return this._alpha;
                  } else {
                    return 1;
                  }
                },
                setAlpha: function (_0x495e3a) {
                  this._alpha = _0x495e3a == null ? null : Math.min(Math.max(_0x495e3a, 0), 1);
                  this._changed();
                },
                hasAlpha: function () {
                  return this._alpha != null;
                },
                equals: function (_0x40f351) {
                  var _0xaa3eac = _0x28b48a.isPlainValue(_0x40f351, true) ? _0x42fac4.read(arguments) : _0x40f351;
                  return _0xaa3eac === this || _0xaa3eac && this._class === _0xaa3eac._class && this._type === _0xaa3eac._type && this.getAlpha() === _0xaa3eac.getAlpha() && _0x28b48a.equals(this._components, _0xaa3eac._components) || false;
                },
                toString: function () {
                  for (var _0x519374 = this._properties, _0x1c9ac6 = [], _0x24da0b = this._type === "gradient", _0x3b48e9 = _0x5735bc.instance, _0xb18088 = 0, _0x4bf6dc = _0x519374.length; _0xb18088 < _0x4bf6dc; _0xb18088++) {
                    var _0x1d297d = this._components[_0xb18088];
                    if (_0x1d297d != null) {
                      _0x1c9ac6.push(_0x519374[_0xb18088] + ": " + (_0x24da0b ? _0x1d297d : _0x3b48e9.number(_0x1d297d)));
                    }
                  }
                  if (this._alpha != null) {
                    _0x1c9ac6.push("alpha: " + _0x3b48e9.number(this._alpha));
                  }
                  return "{ " + _0x1c9ac6.join(", ") + " }";
                },
                toCSS: function (_0x240396) {
                  var _0x319432 = this._convert("rgb");
                  var _0x269a11 = _0x240396 || this._alpha == null ? 1 : this._alpha;
                  function _0x17d8ff(_0x7252cd) {
                    return Math.round((_0x7252cd < 0 ? 0 : _0x7252cd > 1 ? 1 : _0x7252cd) * 255);
                  }
                  _0x319432 = [_0x17d8ff(_0x319432[0]), _0x17d8ff(_0x319432[1]), _0x17d8ff(_0x319432[2])];
                  if (_0x269a11 < 1) {
                    _0x319432.push(_0x269a11 < 0 ? 0 : _0x269a11);
                  }
                  if (_0x240396) {
                    return "#" + ((1 << 24) + (_0x319432[0] << 16) + (_0x319432[1] << 8) + _0x319432[2]).toString(16).slice(1);
                  } else {
                    return (_0x319432.length == 4 ? "rgba(" : "rgb(") + _0x319432.join(",") + ")";
                  }
                },
                toCanvasStyle: function (_0x17b19b, _0x1ec5af) {
                  if (this._canvasStyle) {
                    return this._canvasStyle;
                  }
                  if (this._type !== "gradient") {
                    return this._canvasStyle = this.toCSS();
                  }
                  var _0x4ab863;
                  var _0x535c59 = (_0x2da0ff = this._components)[0];
                  var _0x1c66e9 = _0x535c59._stops;
                  var _0x293c9a = _0x2da0ff[1];
                  var _0x1d2240 = _0x2da0ff[2];
                  var _0x2da0ff = _0x2da0ff[3];
                  if (_0x1ec5af = _0x1ec5af && _0x1ec5af.inverted()) {
                    _0x293c9a = _0x1ec5af._transformPoint(_0x293c9a);
                    _0x1d2240 = _0x1ec5af._transformPoint(_0x1d2240);
                    _0x2da0ff = _0x2da0ff && _0x1ec5af._transformPoint(_0x2da0ff);
                  }
                  _0x4ab863 = _0x535c59._radial ? (_0x1ec5af = _0x1d2240.getDistance(_0x293c9a), !_0x2da0ff || (_0x535c59 = _0x2da0ff.subtract(_0x293c9a)).getLength() > _0x1ec5af && (_0x2da0ff = _0x293c9a.add(_0x535c59.normalize(_0x1ec5af - 0.1))), _0x17b19b.createRadialGradient((_0x2da0ff = _0x2da0ff || _0x293c9a).x, _0x2da0ff.y, 0, _0x293c9a.x, _0x293c9a.y, _0x1ec5af)) : _0x17b19b.createLinearGradient(_0x293c9a.x, _0x293c9a.y, _0x1d2240.x, _0x1d2240.y);
                  for (var _0x4c4874 = 0, _0x44544e = _0x1c66e9.length; _0x4c4874 < _0x44544e; _0x4c4874++) {
                    var _0x4cf0cd = _0x1c66e9[_0x4c4874];
                    var _0x243213 = _0x4cf0cd._offset;
                    _0x4ab863.addColorStop(_0x243213 == null ? _0x4c4874 / (_0x44544e - 1) : _0x243213, _0x4cf0cd._color.toCanvasStyle());
                  }
                  return this._canvasStyle = _0x4ab863;
                },
                transform: function (_0x161561) {
                  if (this._type === "gradient") {
                    for (var _0x2dcd65 = this._components, _0x396f78 = 1, _0x2c4013 = _0x2dcd65.length; _0x396f78 < _0x2c4013; _0x396f78++) {
                      var _0xb1e716 = _0x2dcd65[_0x396f78];
                      _0x161561._transformPoint(_0xb1e716, _0xb1e716, true);
                    }
                    this._changed();
                  }
                },
                statics: {
                  _types: _0x4ac014,
                  random: function () {
                    var _0x4da7ea = Math.random;
                    return new _0x42fac4(_0x4da7ea(), _0x4da7ea(), _0x4da7ea());
                  },
                  _setOwner: function (_0xd19437, _0x2980ec, _0x4a3e1e) {
                    if (_0xd19437 && !(_0xd19437 = _0xd19437._owner && _0x2980ec && _0xd19437._owner !== _0x2980ec ? _0xd19437.clone() : _0xd19437)._owner ^ !_0x2980ec) {
                      _0xd19437._owner = _0x2980ec || null;
                      _0xd19437._setter = _0x4a3e1e || null;
                    }
                    return _0xd19437;
                  }
                }
              });
            }(), new function () {
              return _0x28b48a.each({
                add: function (_0x594b26, _0x5d00d2) {
                  return _0x594b26 + _0x5d00d2;
                },
                subtract: function (_0x52b321, _0x5e0c3b) {
                  return _0x52b321 - _0x5e0c3b;
                },
                multiply: function (_0x13bf38, _0xa13b5b) {
                  return _0x13bf38 * _0xa13b5b;
                },
                divide: function (_0x6535c8, _0x2b2a63) {
                  return _0x6535c8 / _0x2b2a63;
                }
              }, function (_0xb0785a, _0x23bc0b) {
                this[_0x23bc0b] = function (_0x4817dd) {
                  _0x4817dd = _0x42fac4.read(arguments);
                  for (var _0x4b09b2 = this._type, _0x3757e8 = this._components, _0x208376 = _0x4817dd._convert(_0x4b09b2), _0x37f672 = 0, _0x4b4050 = _0x3757e8.length; _0x37f672 < _0x4b4050; _0x37f672++) {
                    _0x208376[_0x37f672] = _0xb0785a(_0x3757e8[_0x37f672], _0x208376[_0x37f672]);
                  }
                  return new _0x42fac4(_0x4b09b2, _0x208376, this._alpha != null ? _0xb0785a(this._alpha, _0x4817dd.getAlpha()) : null);
                };
              }, {});
            }());
            var _0x29bf91 = _0x28b48a.extend({
              _class: "Gradient",
              initialize: function (_0x1f8715, _0x259976) {
                this._id = _0x2231b4.get();
                if (_0x1f8715 && _0x28b48a.isPlainObject(_0x1f8715)) {
                  this.set(_0x1f8715);
                  _0x1f8715 = _0x259976 = null;
                }
                if (this._stops == null) {
                  this.setStops(_0x1f8715 || ["white", "black"]);
                }
                if (this._radial == null) {
                  this.setRadial(typeof _0x259976 == "string" && _0x259976 === "radial" || _0x259976 || false);
                }
              },
              _serialize: function (_0x569dc2, _0x435830) {
                return _0x435830.add(this, function () {
                  return _0x28b48a.serialize([this._stops, this._radial], _0x569dc2, true, _0x435830);
                });
              },
              _changed: function () {
                for (var _0x35e5f0 = 0, _0x46cd75 = this._owners && this._owners.length; _0x35e5f0 < _0x46cd75; _0x35e5f0++) {
                  this._owners[_0x35e5f0]._changed();
                }
              },
              _addOwner: function (_0x2e74a5) {
                if (!this._owners) {
                  this._owners = [];
                }
                this._owners.push(_0x2e74a5);
              },
              _removeOwner: function (_0x13d50a) {
                if ((_0x13d50a = this._owners ? this._owners.indexOf(_0x13d50a) : -1) != -1) {
                  this._owners.splice(_0x13d50a, 1);
                  if (!this._owners.length) {
                    this._owners = _0x2bd7be;
                  }
                }
              },
              clone: function () {
                for (var _0x2bf40d = [], _0x17f208 = 0, _0x1c44a4 = this._stops.length; _0x17f208 < _0x1c44a4; _0x17f208++) {
                  _0x2bf40d[_0x17f208] = this._stops[_0x17f208].clone();
                }
                return new _0x29bf91(_0x2bf40d, this._radial);
              },
              getStops: function () {
                return this._stops;
              },
              setStops: function (_0x19f005) {
                if (_0x19f005.length < 2) {
                  throw new Error(".......");
                }
                var _0x2f9716 = this._stops;
                if (_0x2f9716) {
                  for (var _0x5dc727 = 0, _0x2290bc = _0x2f9716.length; _0x5dc727 < _0x2290bc; _0x5dc727++) {
                    _0x2f9716[_0x5dc727]._owner = _0x2bd7be;
                  }
                }
                _0x5dc727 = 0;
                _0x2290bc = (_0x2f9716 = this._stops = _0x561d94.readList(_0x19f005, 0, {
                  clone: true
                })).length;
                for (; _0x5dc727 < _0x2290bc; _0x5dc727++) {
                  _0x2f9716[_0x5dc727]._owner = this;
                }
                this._changed();
              },
              getRadial: function () {
                return this._radial;
              },
              setRadial: function (_0x5d342f) {
                this._radial = _0x5d342f;
                this._changed();
              },
              equals: function (_0x2751e3) {
                if (_0x2751e3 === this) {
                  return true;
                }
                if (_0x2751e3 && this._class === _0x2751e3._class) {
                  var _0x2c7c6c = this._stops;
                  var _0x4927fe = _0x2751e3._stops;
                  var _0x2d3e4f = _0x2c7c6c.length;
                  if (_0x2d3e4f === _0x4927fe.length) {
                    for (var _0x2de402 = 0; _0x2de402 < _0x2d3e4f; _0x2de402++) {
                      if (!_0x2c7c6c[_0x2de402].equals(_0x4927fe[_0x2de402])) {
                        return false;
                      }
                    }
                    return true;
                  }
                }
                return false;
              }
            });
            var _0x561d94 = _0x28b48a.extend({
              _class: "GradientStop",
              initialize: function (_0x4192ff, _0x772954) {
                var _0x214571 = _0x4192ff;
                var _0x258a13 = _0x772954;
                if (typeof _0x4192ff == "object" && _0x772954 === _0x2bd7be) {
                  if (Array.isArray(_0x4192ff) && typeof _0x4192ff[0] != "number") {
                    _0x214571 = _0x4192ff[0];
                    _0x258a13 = _0x4192ff[1];
                  } else if ("color" in _0x4192ff || "offset" in _0x4192ff || "rampPoint" in _0x4192ff) {
                    _0x214571 = _0x4192ff.color;
                    _0x258a13 = _0x4192ff.offset || _0x4192ff.rampPoint || 0;
                  }
                }
                this.setColor(_0x214571);
                this.setOffset(_0x258a13);
              },
              clone: function () {
                return new _0x561d94(this._color.clone(), this._offset);
              },
              _serialize: function (_0x1456c7, _0x24d1c0) {
                var _0x437657 = this._color;
                var _0x1bc91b = this._offset;
                return _0x28b48a.serialize(_0x1bc91b == null ? [_0x437657] : [_0x437657, _0x1bc91b], _0x1456c7, true, _0x24d1c0);
              },
              _changed: function () {
                if (this._owner) {
                  this._owner._changed(129);
                }
              },
              getOffset: function () {
                return this._offset;
              },
              setOffset: function (_0x259d68) {
                this._offset = _0x259d68;
                this._changed();
              },
              getRampPoint: "#getOffset",
              setRampPoint: "#setOffset",
              getColor: function () {
                return this._color;
              },
              setColor: function () {
                _0x42fac4._setOwner(this._color, null);
                this._color = _0x42fac4._setOwner(_0x42fac4.read(arguments, 0), this, "setColor");
                this._changed();
              },
              equals: function (_0x24113f) {
                return _0x24113f === this || _0x24113f && this._class === _0x24113f._class && this._color.equals(_0x24113f._color) && this._offset == _0x24113f._offset || false;
              }
            });
            var _0x567b1a = _0x28b48a.extend(new function () {
              var _0x56e744 = {
                fillColor: null,
                fillRule: "evenodd",
                strokeColor: null,
                strokeWidth: 1,
                strokeCap: "butt",
                strokeJoin: "miter",
                strokeScaling: true,
                miterLimit: 10,
                dashOffset: 0,
                dashArray: [],
                shadowColor: null,
                shadowBlur: 0,
                shadowOffset: new _0xbc5c4a(),
                selectedColor: null
              };
              var _0x5ab06f = _0x28b48a.set({}, _0x56e744, {
                fontFamily: "sans-serif",
                fontWeight: "normal",
                fontSize: 12,
                leading: null,
                justification: "left"
              });
              var _0x282a38 = _0x28b48a.set({}, _0x5ab06f, {
                fillColor: new _0x42fac4()
              });
              var _0x25912c = {
                strokeWidth: 193,
                strokeCap: 193,
                strokeJoin: 193,
                strokeScaling: 201,
                miterLimit: 193,
                fontFamily: 9,
                fontWeight: 9,
                fontSize: 9,
                font: 9,
                leading: 9,
                justification: 9
              };
              var _0x35ab76 = {
                beans: true
              };
              var _0x555e14 = {
                _class: "Style",
                beans: true,
                initialize: function (_0x4aa23d, _0x3f94f0, _0x3a0555) {
                  this._values = {};
                  this._owner = _0x3f94f0;
                  this._project = _0x3f94f0 && _0x3f94f0._project || _0x3a0555 || _0x36d317.project;
                  this._defaults = !_0x3f94f0 || _0x3f94f0 instanceof _0x46c1f5 ? _0x5ab06f : _0x3f94f0 instanceof _0x244276 ? _0x282a38 : _0x56e744;
                  if (_0x4aa23d) {
                    this.set(_0x4aa23d);
                  }
                }
              };
              _0x28b48a.each(_0x5ab06f, function (_0x322838, _0x2d86e8) {
                var _0x3e7e50 = /Color$/.test(_0x2d86e8);
                var _0x2419a7 = _0x2d86e8 === "shadowOffset";
                var _0x151492 = _0x28b48a.capitalize(_0x2d86e8);
                var _0x13977a = _0x25912c[_0x2d86e8];
                var _0x4454da = "set" + _0x151492;
                var _0x114452 = "get" + _0x151492;
                _0x555e14[_0x4454da] = function (_0x2ba043) {
                  var _0xe6c9f6;
                  var _0x2e6e52 = this._owner;
                  var _0x1ea16f = _0x2e6e52 && _0x2e6e52._children;
                  var _0xed8f39 = _0x1ea16f && _0x1ea16f.length > 0 && !(_0x2e6e52 instanceof _0x5efee7);
                  if (_0xed8f39) {
                    for (var _0x1d148a = 0, _0x39f711 = _0x1ea16f.length; _0x1d148a < _0x39f711; _0x1d148a++) {
                      _0x1ea16f[_0x1d148a]._style[_0x4454da](_0x2ba043);
                    }
                  }
                  if (!(_0x2d86e8 !== "selectedColor" && _0xed8f39 || !(_0x2d86e8 in this._defaults))) {
                    if ((_0xe6c9f6 = this._values[_0x2d86e8]) !== _0x2ba043) {
                      if (_0x3e7e50) {
                        if (_0xe6c9f6) {
                          _0x42fac4._setOwner(_0xe6c9f6, null);
                          _0xe6c9f6._canvasStyle = null;
                        }
                        if (_0x2ba043 && _0x2ba043.constructor === _0x42fac4) {
                          _0x2ba043 = _0x42fac4._setOwner(_0x2ba043, _0x2e6e52, _0xed8f39 && _0x4454da);
                        }
                      }
                      this._values[_0x2d86e8] = _0x2ba043;
                      if (_0x2e6e52) {
                        _0x2e6e52._changed(_0x13977a || 129);
                      }
                    }
                  }
                };
                _0x555e14[_0x114452] = function (_0x5fdf4f) {
                  var _0x596abb;
                  var _0x14fef2 = this._owner;
                  var _0x622542 = _0x14fef2 && _0x14fef2._children;
                  var _0x17553e = _0x622542 && _0x622542.length > 0 && !(_0x14fef2 instanceof _0x5efee7);
                  if (_0x17553e && !_0x5fdf4f) {
                    for (var _0x1ca4bd = 0, _0x28f279 = _0x622542.length; _0x1ca4bd < _0x28f279; _0x1ca4bd++) {
                      var _0x5e511c = _0x622542[_0x1ca4bd]._style[_0x114452]();
                      if (_0x1ca4bd) {
                        if (!_0x28b48a.equals(_0x596abb, _0x5e511c)) {
                          return _0x2bd7be;
                        }
                      } else {
                        _0x596abb = _0x5e511c;
                      }
                    }
                  } else if (_0x2d86e8 in this._defaults) {
                    if ((_0x596abb = this._values[_0x2d86e8]) === _0x2bd7be) {
                      if ((_0x596abb = this._defaults[_0x2d86e8]) && _0x596abb.clone) {
                        _0x596abb = _0x596abb.clone();
                      }
                    } else if (!(!(_0x5fdf4f = _0x3e7e50 ? _0x42fac4 : _0x2419a7 ? _0xbc5c4a : null) || _0x596abb && _0x596abb.constructor === _0x5fdf4f)) {
                      this._values[_0x2d86e8] = _0x596abb = _0x5fdf4f.read([_0x596abb], 0, {
                        readNull: true,
                        clone: true
                      });
                    }
                  }
                  if (_0x596abb && _0x3e7e50) {
                    return _0x42fac4._setOwner(_0x596abb, _0x14fef2, _0x17553e && _0x4454da);
                  } else {
                    return _0x596abb;
                  }
                };
                _0x35ab76[_0x114452] = function (_0x14e833) {
                  return this._style[_0x114452](_0x14e833);
                };
                _0x35ab76[_0x4454da] = function (_0x598a5c) {
                  this._style[_0x4454da](_0x598a5c);
                };
              });
              _0x28b48a.each({
                Font: "FontFamily",
                WindingRule: "FillRule"
              }, function (_0x24f1ba, _0x5c95dd) {
                var _0x306f0e = "get" + _0x5c95dd;
                _0x5c95dd = "set" + _0x5c95dd;
                _0x555e14[_0x306f0e] = _0x35ab76[_0x306f0e] = "#get" + _0x24f1ba;
                _0x555e14[_0x5c95dd] = _0x35ab76[_0x5c95dd] = "#set" + _0x24f1ba;
              });
              _0x1f30bb.inject(_0x35ab76);
              return _0x555e14;
            }(), {
              set: function (_0x3341f7) {
                var _0x1d45e7;
                var _0x31ac57 = _0x3341f7 instanceof _0x567b1a;
                var _0x152bb8 = _0x31ac57 ? _0x3341f7._values : _0x3341f7;
                if (_0x152bb8) {
                  for (var _0x3ae6c5 in _0x152bb8) {
                    if (_0x3ae6c5 in this._defaults) {
                      _0x1d45e7 = _0x152bb8[_0x3ae6c5];
                      this[_0x3ae6c5] = _0x1d45e7 && _0x31ac57 && _0x1d45e7.clone ? _0x1d45e7.clone() : _0x1d45e7;
                    }
                  }
                }
              },
              equals: function (_0x279cce) {
                function _0x1ce936(_0x121346, _0x7a1273, _0xb1004a) {
                  var _0xcd487c;
                  var _0x166823 = _0x121346._values;
                  var _0x53fc9a = _0x7a1273._values;
                  var _0x3bc078 = _0x7a1273._defaults;
                  for (_0xcd487c in _0x166823) {
                    var _0x34649d = _0x166823[_0xcd487c];
                    var _0x2c2e25 = _0x53fc9a[_0xcd487c];
                    if (!(_0xb1004a && _0xcd487c in _0x53fc9a || _0x28b48a.equals(_0x34649d, _0x2c2e25 === _0x2bd7be ? _0x3bc078[_0xcd487c] : _0x2c2e25))) {
                      return false;
                    }
                  }
                  return true;
                }
                return _0x279cce === this || _0x279cce && this._class === _0x279cce._class && _0x1ce936(this, _0x279cce) && _0x1ce936(_0x279cce, this, true) || false;
              },
              _dispose: function () {
                var _0x1483fb = this.getFillColor();
                if (_0x1483fb) {
                  _0x1483fb._canvasStyle = null;
                }
                if (_0x1483fb = this.getStrokeColor()) {
                  _0x1483fb._canvasStyle = null;
                }
                if (_0x1483fb = this.getShadowColor()) {
                  _0x1483fb._canvasStyle = null;
                }
              },
              hasFill: function () {
                var _0x2e7ffa = this.getFillColor();
                return !!_0x2e7ffa && _0x2e7ffa.alpha > 0;
              },
              hasStroke: function () {
                var _0x9f41be = this.getStrokeColor();
                return !!_0x9f41be && _0x9f41be.alpha > 0 && this.getStrokeWidth() > 0;
              },
              hasShadow: function () {
                var _0x55e6c5 = this.getShadowColor();
                return !!_0x55e6c5 && _0x55e6c5.alpha > 0 && (this.getShadowBlur() > 0 || !this.getShadowOffset().isZero());
              },
              getView: function () {
                return this._project._view;
              },
              getFontStyle: function () {
                var _0x4dcb = this.getFontSize();
                return this.getFontWeight() + " " + _0x4dcb + (/[a-z]/i.test(_0x4dcb + "") ? " " : "px ") + this.getFontFamily();
              },
              getFont: "#getFontFamily",
              setFont: "#setFontFamily",
              getLeading: function _0xeebad8() {
                var _0x4f412f = _0xeebad8.base.call(this);
                var _0x2145f8 = this.getFontSize();
                if (/pt|em|%|px/.test(_0x2145f8)) {
                  _0x2145f8 = this.getView().getPixelSize(_0x2145f8);
                }
                if (_0x4f412f != null) {
                  return _0x4f412f;
                } else {
                  return _0x2145f8 * 1.2;
                }
              }
            });
            var _0x3c5bb5 = new function () {
              function _0x2a5778(_0x141240, _0x1108b4, _0x294c16, _0x462de5) {
                for (var _0x39658e = ["", "webkit", "moz", "Moz", "ms", "o"], _0xb732a4 = _0x1108b4[0].toUpperCase() + _0x1108b4.substring(1), _0x4784c8 = 0; _0x4784c8 < 6; _0x4784c8++) {
                  var _0x221922;
                  if ((_0x221922 = (_0x221922 = _0x39658e[_0x4784c8]) ? _0x221922 + _0xb732a4 : _0x1108b4) in _0x141240) {
                    if (!_0x294c16) {
                      return _0x141240[_0x221922];
                    }
                    _0x141240[_0x221922] = _0x462de5;
                    break;
                  }
                }
              }
              return {
                getStyles: function (_0x327e50) {
                  var _0x2a8600;
                  return (_0x2a8600 = (_0x2a8600 = _0x327e50 && _0x327e50.nodeType !== 9 ? _0x327e50.ownerDocument : _0x327e50) && _0x2a8600.defaultView) && _0x2a8600.getComputedStyle(_0x327e50, "");
                },
                getBounds: function (_0x45e2bb, _0xdfe1c9) {
                  var _0x1fbce5;
                  var _0x2def9f = _0x45e2bb.ownerDocument;
                  var _0x405fec = _0x2def9f.body;
                  var _0x3ccf5e = _0x2def9f.documentElement;
                  try {
                    _0x1fbce5 = _0x45e2bb.getBoundingClientRect();
                  } catch (_0x186847) {
                    _0x1fbce5 = {
                      left: 0,
                      top: 0,
                      width: 0,
                      height: 0
                    };
                  }
                  var _0x2be824 = _0x1fbce5.left - (_0x3ccf5e.clientLeft || _0x405fec.clientLeft || 0);
                  _0x45e2bb = _0x1fbce5.top - (_0x3ccf5e.clientTop || _0x405fec.clientTop || 0);
                  if (!_0xdfe1c9) {
                    _0x2be824 += (_0x2def9f = _0x2def9f.defaultView).pageXOffset || _0x3ccf5e.scrollLeft || _0x405fec.scrollLeft;
                    _0x45e2bb += _0x2def9f.pageYOffset || _0x3ccf5e.scrollTop || _0x405fec.scrollTop;
                  }
                  return new _0x5384ce(_0x2be824, _0x45e2bb, _0x1fbce5.width, _0x1fbce5.height);
                },
                getViewportBounds: function (_0x3d1cb0) {
                  _0x3d1cb0 = (_0xbf94c5 = _0x3d1cb0.ownerDocument).defaultView;
                  var _0xbf94c5 = _0xbf94c5.documentElement;
                  return new _0x5384ce(0, 0, _0x3d1cb0.innerWidth || _0xbf94c5.clientWidth, _0x3d1cb0.innerHeight || _0xbf94c5.clientHeight);
                },
                getOffset: function (_0x339a95, _0x41797d) {
                  return _0x3c5bb5.getBounds(_0x339a95, _0x41797d).getPoint();
                },
                getSize: function (_0x821152) {
                  return _0x3c5bb5.getBounds(_0x821152, true).getSize();
                },
                isInvisible: function (_0x392ab0) {
                  return _0x3c5bb5.getSize(_0x392ab0).equals(new _0x236987(0, 0));
                },
                isInView: function (_0x552458) {
                  return !_0x3c5bb5.isInvisible(_0x552458) && _0x3c5bb5.getViewportBounds(_0x552458).intersects(_0x3c5bb5.getBounds(_0x552458, true));
                },
                isInserted: function (_0x20bf7a) {
                  return _0x13c74c.body.contains(_0x20bf7a);
                },
                getPrefixed: function (_0x4937f5, _0x11ab1d) {
                  return _0x4937f5 && _0x2a5778(_0x4937f5, _0x11ab1d);
                },
                setPrefixed: function (_0x501ad2, _0x37415d, _0x4f1103) {
                  if (typeof _0x37415d == "object") {
                    for (var _0x73257 in _0x37415d) {
                      _0x2a5778(_0x501ad2, _0x73257, true, _0x37415d[_0x73257]);
                    }
                  } else {
                    _0x2a5778(_0x501ad2, _0x37415d, true, _0x4f1103);
                  }
                }
              };
            }();
            var _0x19df6d = {
              add: function (_0xeb6733, _0xb86379) {
                if (_0xeb6733) {
                  for (var _0xc04065 in _0xb86379) {
                    for (var _0x102101 = _0xb86379[_0xc04065], _0x4c6bf7 = _0xc04065.split(/[\s,]+/g), _0x282b25 = 0, _0x49ca3c = _0x4c6bf7.length; _0x282b25 < _0x49ca3c; _0x282b25++) {
                      var _0x17627a = _0x4c6bf7[_0x282b25];
                      _0xeb6733.addEventListener(_0x17627a, _0x102101, _0xeb6733 === _0x13c74c && (_0x17627a === "touchstart" || _0x17627a === "touchmove") && {
                        passive: false
                      });
                    }
                  }
                }
              },
              remove: function (_0x5624d7, _0x322874) {
                if (_0x5624d7) {
                  for (var _0x5c2516 in _0x322874) {
                    for (var _0xf40fec = _0x322874[_0x5c2516], _0x2defae = _0x5c2516.split(/[\s,]+/g), _0x2c5c73 = 0, _0x26bc6f = _0x2defae.length; _0x2c5c73 < _0x26bc6f; _0x2c5c73++) {
                      _0x5624d7.removeEventListener(_0x2defae[_0x2c5c73], _0xf40fec, false);
                    }
                  }
                }
              },
              getPoint: function (_0x39c7b1) {
                _0x39c7b1 = _0x39c7b1.targetTouches ? (_0x39c7b1.targetTouches.length ? _0x39c7b1.targetTouches : _0x39c7b1.changedTouches)[0] : _0x39c7b1;
                return new _0xbc5c4a(_0x39c7b1.pageX || _0x39c7b1.clientX + _0x13c74c.documentElement.scrollLeft, _0x39c7b1.pageY || _0x39c7b1.clientY + _0x13c74c.documentElement.scrollTop);
              },
              getTarget: function (_0x58f6e3) {
                return _0x58f6e3.target || _0x58f6e3.srcElement;
              },
              getRelatedTarget: function (_0xd199fc) {
                return _0xd199fc.relatedTarget || _0xd199fc.toElement;
              },
              getOffset: function (_0x169bc4, _0x56736e) {
                return _0x19df6d.getPoint(_0x169bc4).subtract(_0x3c5bb5.getOffset(_0x56736e || _0x19df6d.getTarget(_0x169bc4)));
              }
            };
            _0x19df6d.requestAnimationFrame = new function () {
              var _0x280810;
              var _0x921178 = _0x3c5bb5.getPrefixed(_0x21c198, "requestAnimationFrame");
              var _0x153114 = false;
              var _0x2d548e = [];
              function _0x1a92d8() {
                var _0x1dc540 = _0x2d548e;
                _0x2d548e = [];
                for (var _0xe0b022 = 0, _0x4e4dfa = _0x1dc540.length; _0xe0b022 < _0x4e4dfa; _0xe0b022++) {
                  _0x1dc540[_0xe0b022]();
                }
                if (_0x153114 = _0x921178 && _0x2d548e.length) {
                  _0x921178(_0x1a92d8);
                }
              }
              return function (_0x14b413) {
                _0x2d548e.push(_0x14b413);
                if (_0x921178) {
                  if (!_0x153114) {
                    _0x921178(_0x1a92d8);
                    _0x153114 = true;
                  }
                } else {
                  _0x280810 = _0x280810 || // TOLOOK
                  setInterval(_0x1a92d8, 1000 / 60);
                }
              };
            }();
            var _0x840a73;
            var _0x21d821;
            var _0xe8482b;
            var _0x4c1433;
            var _0x11d463;
            var _0xf8f5cc;
            var _0x372c45;
            var _0x5d3cad = _0x28b48a.extend(_0x139988, {
              _class: "View",
              initialize: function _0x3933e1(_0x146589, _0x93da5d) {
                function _0xd52b79(_0x1b445e) {
                  return _0x93da5d[_0x1b445e] || parseInt(_0x93da5d.getAttribute(_0x1b445e), 10);
                }
                function _0x3936fa() {
                  var _0xac432a = _0x3c5bb5.getSize(_0x93da5d);
                  if (_0xac432a.isNaN() || _0xac432a.isZero()) {
                    return new _0x236987(_0xd52b79("width"), _0xd52b79("height"));
                  } else {
                    return _0xac432a;
                  }
                }
                var _0x5b9f25;
                var _0x1da5df;
                var _0x24748e;
                var _0xa769ad;
                var _0x26ed7a;
                if (_0x21c198 && _0x93da5d) {
                  this._id = _0x93da5d.getAttribute("id");
                  if (this._id == null) {
                    _0x93da5d.setAttribute("id", this._id = "paper-view-" + _0x3933e1._id++);
                  }
                  _0x19df6d.add(_0x93da5d, this._viewEvents);
                  _0x3c5bb5.setPrefixed(_0x93da5d.style, {
                    userDrag: _0x26ed7a = "none",
                    userSelect: _0x26ed7a,
                    touchCallout: _0x26ed7a,
                    contentZooming: _0x26ed7a,
                    tapHighlightColor: "rgba(0,0,0,0)"
                  });
                  if (_0xfce993.hasAttribute(_0x93da5d, "resize")) {
                    _0x19df6d.add(_0x21c198, (_0x1da5df = this)._windowEvents = {
                      resize: function () {
                        _0x1da5df.setViewSize(_0x3936fa());
                      }
                    });
                  }
                  _0x5b9f25 = _0x3936fa();
                  if (_0xfce993.hasAttribute(_0x93da5d, "stats") && typeof Stats != "undefined") {
                    this._stats = new Stats();
                    _0xa769ad = (_0x24748e = this._stats.domElement).style;
                    _0x26ed7a = _0x3c5bb5.getOffset(_0x93da5d);
                    _0xa769ad.position = "absolute";
                    _0xa769ad.left = _0x26ed7a.x + "px";
                    _0xa769ad.top = _0x26ed7a.y + "px";
                    _0x13c74c.body.appendChild(_0x24748e);
                  }
                } else {
                  _0x5b9f25 = new _0x236987(_0x93da5d);
                  _0x93da5d = null;
                }
                this._project = _0x146589;
                this._scope = _0x146589._scope;
                this._element = _0x93da5d;
                if (!this._pixelRatio) {
                  this._pixelRatio = _0x21c198 && 1 || 1;
                }
                this._setElementSize(_0x5b9f25.width, _0x5b9f25.height);
                this._viewSize = _0x5b9f25;
                _0x3933e1._views.push(this);
                ((_0x3933e1._viewsById[this._id] = this)._matrix = new _0x1a5a7c())._owner = this;
                if (!_0x3933e1._focused) {
                  _0x3933e1._focused = this;
                }
                this._frameItems = {};
                this._frameItemCount = 0;
                this._itemEvents = {
                  native: {},
                  virtual: {}
                };
                this._autoUpdate = !_0x36d317.agent.node;
                this._needsUpdate = false;
              },
              remove: function () {
                if (!this._project) {
                  return false;
                }
                if (_0x5d3cad._focused === this) {
                  _0x5d3cad._focused = null;
                }
                _0x5d3cad._views.splice(_0x5d3cad._views.indexOf(this), 1);
                delete _0x5d3cad._viewsById[this._id];
                var _0x346428 = this._project;
                if (_0x346428._view === this) {
                  _0x346428._view = null;
                }
                _0x19df6d.remove(this._element, this._viewEvents);
                _0x19df6d.remove(_0x21c198, this._windowEvents);
                this._element = this._project = null;
                this.off("frame");
                this._animate = false;
                this._frameItems = {};
                return true;
              },
              _events: _0x28b48a.each(_0x1f30bb._itemHandlers.concat(["onResize", "onKeyDown", "onKeyUp"]), function (_0x303cb6) {
                this[_0x303cb6] = {};
              }, {
                onFrame: {
                  install: function () {
                    this.play();
                  },
                  uninstall: function () {
                    this.pause();
                  }
                }
              }),
              _animate: false,
              _time: 0,
              _count: 0,
              getAutoUpdate: function () {
                return this._autoUpdate;
              },
              setAutoUpdate: function (_0x240231) {
                if (this._autoUpdate = _0x240231) {
                  this.requestUpdate();
                }
              },
              update: function () {},
              draw: function () {
                this.update();
              },
              requestUpdate: function () {
                var _0x24fd64;
                if (!this._requested) {
                  _0x24fd64 = this;
                  _0x19df6d.requestAnimationFrame(function () {
                    var _0x481dbf;
                    _0x24fd64._requested = false;
                    if (_0x24fd64._animate) {
                      _0x24fd64.requestUpdate();
                      _0x481dbf = _0x24fd64._element;
                      if (!(_0x3c5bb5.getPrefixed(_0x13c74c, "hidden") && _0xfce993.getAttribute(_0x481dbf, "keepalive") !== "true" || !_0x3c5bb5.isInView(_0x481dbf))) {
                        _0x24fd64._handleFrame();
                      }
                    }
                    if (_0x24fd64._autoUpdate) {
                      _0x24fd64.update();
                    }
                  });
                  this._requested = true;
                }
              },
              play: function () {
                this._animate = true;
                this.requestUpdate();
              },
              pause: function () {
                this._animate = false;
              },
              _handleFrame: function () {
                _0x36d317 = this._scope;
                var _0x544367 = Date.now() / 1000;
                var _0x21d47f = this._last ? _0x544367 - this._last : 0;
                this._last = _0x544367;
                this.emit("frame", new _0x28b48a({
                  delta: _0x21d47f,
                  time: this._time += _0x21d47f,
                  count: this._count++
                }));
                if (this._stats) {
                  this._stats.update();
                }
              },
              _animateItem: function (_0x598363, _0x40d7e) {
                var _0x41b370 = this._frameItems;
                if (_0x40d7e) {
                  _0x41b370[_0x598363._id] = {
                    item: _0x598363,
                    time: 0,
                    count: 0
                  };
                  if (++this._frameItemCount == 1) {
                    this.on("frame", this._handleFrameItems);
                  }
                } else {
                  delete _0x41b370[_0x598363._id];
                  if (--this._frameItemCount == 0) {
                    this.off("frame", this._handleFrameItems);
                  }
                }
              },
              _handleFrameItems: function (_0x8047ff) {
                for (var _0x3435c9 in this._frameItems) {
                  (_0x3435c9 = this._frameItems[_0x3435c9]).item.emit("frame", new _0x28b48a(_0x8047ff, {
                    time: _0x3435c9.time += _0x8047ff.delta,
                    count: _0x3435c9.count++
                  }));
                }
              },
              _changed: function () {
                this._project._changed(4097);
                this._bounds = this._decomposed = _0x2bd7be;
              },
              getElement: function () {
                return this._element;
              },
              getPixelRatio: function () {
                return this._pixelRatio;
              },
              getResolution: function () {
                return this._pixelRatio * 72;
              },
              getViewSize: function () {
                var _0x5c5357 = this._viewSize;
                return new _0x29ac77(_0x5c5357.width, _0x5c5357.height, this, "setViewSize");
              },
              setViewSize: function () {
                var _0x35f9ab = _0x236987.read(arguments);
                var _0x51852f = _0x35f9ab.subtract(this._viewSize);
                if (!_0x51852f.isZero()) {
                  this._setElementSize(_0x35f9ab.width, _0x35f9ab.height);
                  this._viewSize.set(_0x35f9ab);
                  this._changed();
                  this.emit("resize", {
                    size: _0x35f9ab,
                    delta: _0x51852f
                  });
                  if (this._autoUpdate) {
                    this.update();
                  }
                }
              },
              _setElementSize: function (_0x11c3f4, _0x1d9fa7) {
                var _0x4a966b = this._element;
                if (_0x4a966b) {
                  if (_0x4a966b.width !== _0x11c3f4) {
                    _0x4a966b.width = _0x11c3f4;
                  }
                  if (_0x4a966b.height !== _0x1d9fa7) {
                    _0x4a966b.height = _0x1d9fa7;
                  }
                }
              },
              getBounds: function () {
                if (!this._bounds) {
                  this._bounds = this._matrix.inverted()._transformBounds(new _0x5384ce(new _0xbc5c4a(), this._viewSize));
                }
                return this._bounds;
              },
              getSize: function () {
                return this.getBounds().getSize();
              },
              isVisible: function () {
                return _0x3c5bb5.isInView(this._element);
              },
              isInserted: function () {
                return _0x3c5bb5.isInserted(this._element);
              },
              getPixelSize: function (_0x3120dd) {
                var _0x3e91a4;
                var _0x1ec9e5;
                var _0x45a359 = this._element;
                if (_0x45a359) {
                  _0x1ec9e5 = _0x45a359.parentNode;
                  (_0x45a359 = _0x13c74c.createElement("div")).style.fontSize = _0x3120dd;
                  _0x1ec9e5.appendChild(_0x45a359);
                  _0x3e91a4 = parseFloat(_0x3c5bb5.getStyles(_0x45a359).fontSize);
                  _0x1ec9e5.removeChild(_0x45a359);
                } else {
                  _0x3e91a4 = parseFloat(_0x3e91a4);
                }
                return _0x3e91a4;
              },
              getTextWidth: function (_0x42f2b5, _0x27d092) {
                return 0;
              }
            }, _0x28b48a.each(["rotate", "scale", "shear", "skew"], function (_0x423e7a) {
              var _0x23bc41 = _0x423e7a === "rotate";
              this[_0x423e7a] = function () {
                var _0x10ec4d = arguments;
                var _0x19a31c = (_0x23bc41 ? _0x28b48a : _0xbc5c4a).read(_0x10ec4d);
                _0x10ec4d = _0xbc5c4a.read(_0x10ec4d, 0, {
                  readNull: true
                });
                return this.transform(new _0x1a5a7c()[_0x423e7a](_0x19a31c, _0x10ec4d || this.getCenter(true)));
              };
            }, {
              _decompose: function () {
                return this._decomposed || (this._decomposed = this._matrix.decompose());
              },
              translate: function () {
                var _0x264728 = new _0x1a5a7c();
                return this.transform(_0x264728.translate.apply(_0x264728, arguments));
              },
              getCenter: function () {
                return this.getBounds().getCenter();
              },
              setCenter: function () {
                var _0x4fcd94 = _0xbc5c4a.read(arguments);
                this.translate(this.getCenter().subtract(_0x4fcd94));
              },
              getZoom: function () {
                var _0x578630 = this._decompose().scaling;
                return (_0x578630.x + _0x578630.y) / 2;
              },
              setZoom: function (_0x31ebba) {
                this.transform(new _0x1a5a7c().scale(_0x31ebba / this.getZoom(), this.getCenter()));
              },
              getRotation: function () {
                return this._decompose().rotation;
              },
              setRotation: function (_0x1093d8) {
                var _0x4e8e6e = this.getRotation();
                if (_0x4e8e6e != null && _0x1093d8 != null) {
                  this.rotate(_0x1093d8 - _0x4e8e6e);
                }
              },
              getScaling: function () {
                var _0x4e60fd = this._decompose().scaling;
                return new _0x3d6d6d(_0x4e60fd.x, _0x4e60fd.y, this, "setScaling");
              },
              setScaling: function () {
                var _0x390879 = this.getScaling();
                var _0x551cf4 = _0xbc5c4a.read(arguments, 0, {
                  clone: true,
                  readNull: true
                });
                if (_0x390879 && _0x551cf4) {
                  this.scale(_0x551cf4.x / _0x390879.x, _0x551cf4.y / _0x390879.y);
                }
              },
              getMatrix: function () {
                return this._matrix;
              },
              setMatrix: function () {
                var _0x45d984 = this._matrix;
                _0x45d984.set.apply(_0x45d984, arguments);
              },
              transform: function (_0x8f6a7e) {
                this._matrix.append(_0x8f6a7e);
              },
              scrollBy: function () {
                this.translate(_0xbc5c4a.read(arguments).negate());
              }
            }), {
              projectToView: function () {
                return this._matrix._transformPoint(_0xbc5c4a.read(arguments));
              },
              viewToProject: function () {
                return this._matrix._inverseTransform(_0xbc5c4a.read(arguments));
              },
              getEventPoint: function (_0x4785fc) {
                return this.viewToProject(_0x19df6d.getOffset(_0x4785fc, this._element));
              }
            }, {
              statics: {
                _views: [],
                _viewsById: {},
                _id: 0,
                create: function (_0x477f62, _0x2eb567) {
                  if (_0x13c74c && typeof _0x2eb567 == "string") {
                    _0x2eb567 = _0x13c74c.getElementById(_0x2eb567);
                  }
                  return new (_0x21c198 ? _0x4ed65b : _0x5d3cad)(_0x477f62, _0x2eb567);
                }
              }
            }, new function () {
              if (_0x21c198) {
                var _0x4c458b;
                var _0x296247;
                var _0x4fc24;
                var _0x3a9ca8;
                var _0x3686fc;
                var _0x2ab410 = false;
                var _0x233de1 = false;
                if ((_0x1ce5d3 = _0x21c198.navigator).pointerEnabled || _0x1ce5d3.msPointerEnabled) {
                  _0x4fc24 = "pointerdown MSPointerDown";
                  _0x3a9ca8 = "pointermove MSPointerMove";
                  _0x3686fc = "pointerup pointercancel MSPointerUp MSPointerCancel";
                } else {
                  _0x4fc24 = "touchstart";
                  _0x3a9ca8 = "touchmove";
                  _0x3686fc = "touchend touchcancel";
                  if (!("ontouchstart" in _0x21c198 && _0x1ce5d3.userAgent.match(/mobile|tablet|ip(ad|hone|od)|android|silk/i))) {
                    _0x4fc24 += " mousedown";
                    _0x3a9ca8 += " mousemove";
                    _0x3686fc += " mouseup";
                  }
                }
                var _0x3daf23 = {};
                var _0x1ce5d3 = {
                  mouseout: function (_0x20e356) {
                    var _0x510589;
                    var _0x529126;
                    var _0x3c0e75;
                    var _0x219efa = _0x5d3cad._focused;
                    var _0x3c8dde = _0x19df6d.getRelatedTarget(_0x20e356);
                    if (!(!_0x219efa || _0x3c8dde && _0x3c8dde.nodeName !== "HTML")) {
                      _0x529126 = (_0x510589 = _0x19df6d.getOffset(_0x20e356, _0x219efa._element)).x;
                      _0x3c8dde = (_0x3c0e75 = Math.abs)(_0x529126);
                      _0x510589.x = _0x3c0e75(_0x3c0e75 = _0x3c8dde - (1 << 25)) < _0x3c8dde ? _0x3c0e75 * (_0x529126 < 0 ? -1 : 1) : _0x529126;
                      _0x341ba4(_0x219efa, _0x20e356, _0x219efa.viewToProject(_0x510589));
                    }
                  },
                  scroll: _0x340b39
                };
                _0x3daf23[_0x4fc24] = function (_0x3e9919) {
                  var _0x573c6c = _0x5d3cad._focused = _0x1895d2(_0x3e9919);
                  if (!_0x2ab410) {
                    _0x2ab410 = true;
                    _0x573c6c._handleMouseEvent("mousedown", _0x3e9919);
                  }
                };
                _0x1ce5d3[_0x3a9ca8] = function (_0x3b2265) {
                  var _0x1f0a41;
                  var _0x49a24d = _0x5d3cad._focused;
                  if (!_0x233de1) {
                    if (_0x1f0a41 = _0x1895d2(_0x3b2265)) {
                      if (_0x49a24d !== _0x1f0a41) {
                        if (_0x49a24d) {
                          _0x341ba4(_0x49a24d, _0x3b2265);
                        }
                        _0x4c458b = _0x4c458b || _0x49a24d;
                        _0x49a24d = _0x5d3cad._focused = _0x296247 = _0x1f0a41;
                      }
                    } else if (_0x296247 && _0x296247 === _0x49a24d) {
                      if (_0x4c458b && !_0x4c458b.isInserted()) {
                        _0x4c458b = null;
                      }
                      _0x49a24d = _0x5d3cad._focused = _0x4c458b;
                      _0x4c458b = null;
                      _0x340b39();
                    }
                  }
                  if (_0x49a24d) {
                    _0x341ba4(_0x49a24d, _0x3b2265);
                  }
                };
                _0x1ce5d3[_0x4fc24] = function () {
                  _0x233de1 = true;
                };
                _0x1ce5d3[_0x3686fc] = function (_0x25aba4) {
                  var _0x21340a = _0x5d3cad._focused;
                  if (_0x21340a && _0x2ab410) {
                    _0x21340a._handleMouseEvent("mouseup", _0x25aba4);
                  }
                  _0x233de1 = _0x2ab410 = false;
                };
                _0x19df6d.add(_0x13c74c, _0x1ce5d3);
                _0x19df6d.add(_0x21c198, {
                  load: _0x340b39
                });
                var _0x59a23b;
                var _0x173c0b;
                var _0x21f940;
                var _0x19051e;
                var _0x4beec1;
                var _0x3f007c;
                var _0x45d73d;
                var _0x5be09a;
                var _0x1fa3a1 = false;
                var _0x10474c = false;
                var _0x3830a1 = {
                  doubleclick: "click",
                  mousedrag: "mousemove"
                };
                var _0x560093 = false;
                var _0x38d06a = {
                  mousedown: {
                    mousedown: 1,
                    mousedrag: 1,
                    click: 1,
                    doubleclick: 1
                  },
                  mouseup: {
                    mouseup: 1,
                    mousedrag: 1,
                    click: 1,
                    doubleclick: 1
                  },
                  mousemove: {
                    mousedrag: 1,
                    mousemove: 1,
                    mouseenter: 1,
                    mouseleave: 1
                  }
                };
                return {
                  _viewEvents: _0x3daf23,
                  _handleMouseEvent: function (_0x3c87b1, _0x23f330, _0x57f9d3) {
                    var _0x5eedfd = this._itemEvents;
                    var _0x9815ba = _0x5eedfd.native[_0x3c87b1];
                    var _0x2e6d7c = _0x3c87b1 === "mousemove";
                    var _0x172471 = this._scope.tool;
                    var _0x2ca575 = this;
                    function _0x217e96(_0x53ab26) {
                      return _0x5eedfd.virtual[_0x53ab26] || _0x2ca575.responds(_0x53ab26) || _0x172471 && _0x172471.responds(_0x53ab26);
                    }
                    if (_0x2e6d7c && _0x2ab410 && _0x217e96("mousedrag")) {
                      _0x3c87b1 = "mousedrag";
                    }
                    _0x57f9d3 = _0x57f9d3 || this.getEventPoint(_0x23f330);
                    var _0x396bc7;
                    var _0xe585f0 = this.getBounds().contains(_0x57f9d3);
                    var _0x2e3118 = (_0x396bc7 = _0x9815ba && _0xe585f0 && _0x2ca575._project.hitTest(_0x57f9d3, {
                      tolerance: 0,
                      fill: true,
                      stroke: true
                    })) && _0x396bc7.item || null;
                    var _0x591629 = false;
                    (_0x396bc7 = {})[_0x3c87b1.substr(5)] = true;
                    if (_0x9815ba && _0x2e3118 !== _0x19051e) {
                      if (_0x19051e) {
                        _0x1b1a80(_0x19051e, null, "mouseleave", _0x23f330, _0x57f9d3);
                      }
                      if (_0x2e3118) {
                        _0x1b1a80(_0x2e3118, null, "mouseenter", _0x23f330, _0x57f9d3);
                      }
                      _0x19051e = _0x2e3118;
                    }
                    if (_0x560093 ^ _0xe585f0) {
                      _0x1b1a80(this, null, _0xe585f0 ? "mouseenter" : "mouseleave", _0x23f330, _0x57f9d3);
                      _0x591629 = true;
                    }
                    if (!(!_0xe585f0 && !_0x396bc7.drag || _0x57f9d3.equals(_0x173c0b))) {
                      _0x4950df(this, _0x2e3118, _0x2e6d7c ? _0x3c87b1 : "mousemove", _0x23f330, _0x57f9d3, _0x173c0b);
                      _0x591629 = true;
                    }
                    _0x560093 = _0xe585f0;
                    if (_0x396bc7.down && _0xe585f0 || _0x396bc7.up && _0x59a23b) {
                      _0x4950df(this, _0x2e3118, _0x3c87b1, _0x23f330, _0x57f9d3, _0x59a23b);
                      if (_0x396bc7.down) {
                        _0x5be09a = _0x2e3118 === _0x3f007c && Date.now() - _0x45d73d < 300;
                        _0x21f940 = _0x3f007c = _0x2e3118;
                        if (!_0x10474c && _0x2e3118) {
                          for (var _0x27f40c = _0x2e3118; _0x27f40c && !_0x27f40c.responds("mousedrag");) {
                            _0x27f40c = _0x27f40c._parent;
                          }
                          if (_0x27f40c) {
                            _0x4beec1 = _0x2e3118;
                          }
                        }
                        _0x59a23b = _0x57f9d3;
                      } else if (_0x396bc7.up) {
                        if (!(_0x10474c || _0x2e3118 !== _0x21f940)) {
                          _0x45d73d = Date.now();
                          _0x4950df(this, _0x2e3118, _0x5be09a ? "doubleclick" : "click", _0x23f330, _0x57f9d3, _0x59a23b);
                          _0x5be09a = false;
                        }
                        _0x21f940 = _0x4beec1 = null;
                      }
                      _0x591629 = !(_0x560093 = false);
                    }
                    _0x173c0b = _0x57f9d3;
                    if (_0x591629 && _0x172471) {
                      _0x1fa3a1 = _0x172471._handleMouseEvent(_0x3c87b1, _0x23f330, _0x57f9d3, _0x396bc7) || _0x1fa3a1;
                    }
                    if (_0x23f330.cancelable !== false && (_0x1fa3a1 && !_0x396bc7.move || _0x396bc7.down && _0x217e96("mouseup"))) {
                      _0x23f330.preventDefault();
                    }
                  },
                  _handleKeyEvent: function (_0x3310f6, _0x46cfe2, _0x5ca350, _0x5b862b) {
                    var _0x5250c3;
                    var _0x482694 = this._scope;
                    var _0x2e15b8 = _0x482694.tool;
                    function _0x58ea2c(_0x3270ee) {
                      if (_0x3270ee.responds(_0x3310f6)) {
                        _0x36d317 = _0x482694;
                        _0x3270ee.emit(_0x3310f6, _0x5250c3 = _0x5250c3 || new _0x36cea5(_0x3310f6, _0x46cfe2, _0x5ca350, _0x5b862b));
                      }
                    }
                    if (this.isVisible()) {
                      _0x58ea2c(this);
                      if (_0x2e15b8 && _0x2e15b8.responds(_0x3310f6)) {
                        _0x58ea2c(_0x2e15b8);
                      }
                    }
                  },
                  _countItemEvent: function (_0x1ee168, _0x4d7f40) {
                    var _0x19132d;
                    var _0xcb441d = (_0x5cd0f2 = this._itemEvents).native;
                    var _0x5cd0f2 = _0x5cd0f2.virtual;
                    for (_0x19132d in _0x38d06a) {
                      _0xcb441d[_0x19132d] = (_0xcb441d[_0x19132d] || 0) + (_0x38d06a[_0x19132d][_0x1ee168] || 0) * _0x4d7f40;
                    }
                    _0x5cd0f2[_0x1ee168] = (_0x5cd0f2[_0x1ee168] || 0) + _0x4d7f40;
                  },
                  statics: {
                    updateFocus: _0x340b39,
                    _resetState: function () {
                      _0x2ab410 = _0x233de1 = _0x1fa3a1 = _0x560093 = false;
                      _0x4c458b = _0x296247 = _0x59a23b = _0x173c0b = _0x21f940 = _0x19051e = _0x4beec1 = _0x3f007c = _0x45d73d = _0x5be09a = null;
                    }
                  }
                };
              }
              function _0x1895d2(_0x26bc34) {
                return (_0x26bc34 = _0x19df6d.getTarget(_0x26bc34)).getAttribute && _0x5d3cad._viewsById[_0x26bc34.getAttribute("id")];
              }
              function _0x340b39() {
                var _0x37579d = _0x5d3cad._focused;
                if (!_0x37579d || !_0x37579d.isVisible()) {
                  for (var _0x31079f = 0, _0x4fbb5c = _0x5d3cad._views.length; _0x31079f < _0x4fbb5c; _0x31079f++) {
                    if ((_0x37579d = _0x5d3cad._views[_0x31079f]).isVisible()) {
                      _0x5d3cad._focused = _0x296247 = _0x37579d;
                      break;
                    }
                  }
                }
              }
              function _0x341ba4(_0x1069ec, _0x16ecad, _0x27ceb8) {
                _0x1069ec._handleMouseEvent("mousemove", _0x16ecad, _0x27ceb8);
              }
              function _0x1b1a80(_0x339169, _0x4f2769, _0x53cdf8, _0x40272b, _0x1847ee, _0x1301ce, _0x4b3f81) {
                for (var _0x1aa496, _0x521ffa = false; _0x339169 && _0x339169 !== _0x4b3f81 && !function _0x3c7574(_0x39759b, _0x2c6388) {
                  if (_0x39759b.responds(_0x2c6388)) {
                    _0x1aa496 = _0x1aa496 || new _0x3438e2(_0x2c6388, _0x40272b, _0x1847ee, _0x4f2769 || _0x39759b, _0x1301ce ? _0x1847ee.subtract(_0x1301ce) : null);
                    if (_0x39759b.emit(_0x2c6388, _0x1aa496) && (_0x1fa3a1 = true, _0x1aa496.prevented && (_0x10474c = true), _0x1aa496.stopped)) {
                      return _0x521ffa = true;
                    }
                  } else if (_0x2c6388 = _0x3830a1[_0x2c6388]) {
                    return _0x3c7574(_0x39759b, _0x2c6388);
                  }
                }(_0x339169, _0x53cdf8);) {
                  _0x339169 = _0x339169._parent;
                }
                return _0x521ffa;
              }
              function _0x4950df(_0x85808b, _0x460462, _0x36626d, _0x4496a1, _0x20dbc3, _0x59a824) {
                _0x85808b._project.removeOn(_0x36626d);
                _0x10474c = _0x1fa3a1 = false;
                return _0x4beec1 && _0x1b1a80(_0x4beec1, null, _0x36626d, _0x4496a1, _0x20dbc3, _0x59a824) || _0x460462 && _0x460462 !== _0x4beec1 && !_0x460462.isDescendant(_0x4beec1) && _0x1b1a80(_0x460462, null, _0x36626d === "mousedrag" ? "mousemove" : _0x36626d, _0x4496a1, _0x20dbc3, _0x59a824, _0x4beec1) || _0x1b1a80(_0x85808b, _0x4beec1 || _0x460462 || _0x85808b, _0x36626d, _0x4496a1, _0x20dbc3, _0x59a824);
              }
            }());
            var _0x4ed65b = _0x5d3cad.extend({
              _class: "CanvasView",
              initialize: function (_0x2cecb0, _0x480fff) {
                if (!(_0x480fff instanceof _0x21c198.HTMLCanvasElement)) {
                  var _0x4205d1 = _0x236987.read(arguments, 1);
                  if (_0x4205d1.isZero()) {
                    throw new Error(".......");
                  }
                  _0x480fff = _0xc9a63f.getCanvas(_0x4205d1);
                }
                var _0x35c8a8 = this._context = _0x480fff.getContext("2d");
                _0x35c8a8.save();
                this._pixelRatio = 1;
                if (!/^off|false$/.test(_0xfce993.getAttribute(_0x480fff, "hidpi"))) {
                  _0x4205d1 = 2;
                  _0x35c8a8 = _0x3c5bb5.getPrefixed(_0x35c8a8, "backingStorePixelRatio") || 1;
                  this._pixelRatio = _0x4205d1 / _0x35c8a8;
                }
                _0x5d3cad.call(this, _0x2cecb0, _0x480fff);
                this._needsUpdate = true;
              },
              remove: function _0x3d4ff4() {
                this._context.restore();
                return _0x3d4ff4.base.call(this);
              },
              _setElementSize: function _0x46b62d(_0x5d51b8, _0x465f14) {
                var _0x5d89ab;
                var _0x3aa14a;
                var _0x499ed0 = this._pixelRatio;
                _0x46b62d.base.call(this, _0x5d51b8 * _0x499ed0, _0x465f14 * _0x499ed0);
                if (_0x499ed0 !== 1) {
                  _0x3aa14a = this._element;
                  _0x5d89ab = this._context;
                  if (!_0xfce993.hasAttribute(_0x3aa14a, "resize")) {
                    (_0x3aa14a = _0x3aa14a.style).width = _0x5d51b8 + "px";
                    _0x3aa14a.height = _0x465f14 + "px";
                  }
                  _0x5d89ab.restore();
                  _0x5d89ab.save();
                  _0x5d89ab.scale(_0x499ed0, _0x499ed0);
                }
              },
              getContext: function () {
                return this._context;
              },
              getPixelSize: function _0x38b74c(_0x4cc992) {
                var _0x9fd16c;
                var _0x448c02;
                var _0x593fc0 = _0x36d317.agent;
                if (_0x593fc0 && _0x593fc0.firefox) {
                  _0x9fd16c = _0x38b74c.base.call(this, _0x4cc992);
                } else {
                  _0x593fc0 = (_0x448c02 = this._context).font;
                  _0x448c02.font = _0x4cc992 + " serif";
                  _0x9fd16c = parseFloat(_0x448c02.font);
                  _0x448c02.font = _0x593fc0;
                }
                return _0x9fd16c;
              },
              getTextWidth: function (_0x5a2c5e, _0x5151b9) {
                var _0x1f53eb = this._context;
                var _0xe7b545 = _0x1f53eb.font;
                var _0x116586 = 0;
                _0x1f53eb.font = _0x5a2c5e;
                for (var _0x1d0a60 = 0, _0x40051b = _0x5151b9.length; _0x1d0a60 < _0x40051b; _0x1d0a60++) {
                  _0x116586 = Math.max(_0x116586, _0x1f53eb.measureText(_0x5151b9[_0x1d0a60]).width);
                }
                _0x1f53eb.font = _0xe7b545;
                return _0x116586;
              },
              update: function () {
                if (!this._needsUpdate) {
                  return false;
                }
                var _0x57566c = this._project;
                var _0x41ed0b = this._context;
                var _0x5a513e = this._viewSize;
                _0x41ed0b.clearRect(0, 0, _0x5a513e.width + 1, _0x5a513e.height + 1);
                if (_0x57566c) {
                  _0x57566c.draw(_0x41ed0b, this._matrix, this._pixelRatio);
                }
                return !(this._needsUpdate = false);
              }
            });
            var _0x59e435 = _0x28b48a.extend({
              _class: "Event",
              initialize: function (_0x327ad5) {
                this.event = _0x327ad5;
                this.type = _0x327ad5 && _0x327ad5.type;
              },
              prevented: false,
              stopped: false,
              preventDefault: function () {
                this.prevented = true;
                this.event.preventDefault();
              },
              stopPropagation: function () {
                this.stopped = true;
                this.event.stopPropagation();
              },
              stop: function () {
                this.stopPropagation();
                this.preventDefault();
              },
              getTimeStamp: function () {
                return this.event.timeStamp;
              },
              getModifiers: function () {
                return _0x344e5e.modifiers;
              }
            });
            var _0x36cea5 = _0x59e435.extend({
              _class: "KeyEvent",
              initialize: function (_0x3d1bcf, _0x5a6e4b, _0xc89890, _0x2b75be) {
                this.type = _0x3d1bcf;
                this.event = _0x5a6e4b;
                this.key = _0xc89890;
                this.character = _0x2b75be;
              },
              toString: function () {
                return "{ type: '" + this.type + "', key: '" + this.key + "', character: '" + this.character + "', modifiers: " + this.getModifiers() + " }";
              }
            });
            var _0x344e5e = new function () {
              var _0x46a2b3;
              var _0x507fe0;
              var _0xe6931c = {
                "\t": "tab",
                " ": "space",
                "\b": "backspace",
                "": "delete",
                Spacebar: "space",
                Del: "delete",
                Win: "meta",
                Esc: "escape"
              };
              var _0x5e8211 = {
                tab: "\t",
                space: " ",
                enter: "\r"
              };
              var _0x574898 = {};
              var _0x38ee2e = {};
              var _0x32b252 = new _0x28b48a({
                shift: false,
                control: false,
                alt: false,
                meta: false,
                capsLock: false,
                space: false
              }).inject({
                option: {
                  get: function () {
                    return this.alt;
                  }
                },
                changet: {
                  get: function () {
                    var _0x27f8b2 = _0x36d317 && _0x36d317.agent;
                    if (_0x27f8b2 && _0x27f8b2.mac) {
                      return this.meta;
                    } else {
                      return this.control;
                    }
                  }
                }
              });
              function _0x38e522(_0x1e5e85) {
                var _0x402e46 = _0x1e5e85.key || _0x1e5e85.keyIdentifier;
                _0x402e46 = /^U\+/.test(_0x402e46) ? String.fromCharCode(parseInt(_0x402e46.substr(2), 16)) : /^Arrow[A-Z]/.test(_0x402e46) ? _0x402e46.substr(5) : _0x402e46 === "Unidentified" || _0x402e46 === _0x2bd7be ? String.fromCharCode(_0x1e5e85.keyCode) : _0x402e46;
                return _0xe6931c[_0x402e46] || (_0x402e46.length > 1 ? _0x28b48a.hyphenate(_0x402e46) : _0x402e46.toLowerCase());
              }
              function _0x44d245(_0x153cbc, _0x1d77ff, _0x4ed90c, _0x1ef5da) {
                var _0x4d0705;
                var _0x3fa0ac = _0x5d3cad._focused;
                if (_0x574898[_0x1d77ff] = _0x153cbc) {
                  _0x38ee2e[_0x1d77ff] = _0x4ed90c;
                } else {
                  delete _0x38ee2e[_0x1d77ff];
                }
                if (_0x1d77ff.length > 1 && (_0x4d0705 = _0x28b48a.camelize(_0x1d77ff)) in _0x32b252) {
                  _0x32b252[_0x4d0705] = _0x153cbc;
                  var _0x1226c2 = _0x36d317 && _0x36d317.agent;
                  if (_0x4d0705 === "meta" && _0x1226c2 && _0x1226c2.mac) {
                    if (_0x153cbc) {
                      _0x46a2b3 = {};
                    } else {
                      for (var _0x33aae1 in _0x46a2b3) {
                        if (_0x33aae1 in _0x38ee2e) {
                          _0x44d245(false, _0x33aae1, _0x46a2b3[_0x33aae1], _0x1ef5da);
                        }
                      }
                      _0x46a2b3 = null;
                    }
                  }
                } else if (_0x153cbc && _0x46a2b3) {
                  _0x46a2b3[_0x1d77ff] = _0x4ed90c;
                }
                if (_0x3fa0ac) {
                  _0x3fa0ac._handleKeyEvent(_0x153cbc ? "keydown" : "keyup", _0x1ef5da, _0x1d77ff, _0x4ed90c);
                }
              }
              _0x19df6d.add(_0x13c74c, {
                keydown: function (_0x5bf488) {
                  var _0xc75d09 = _0x38e522(_0x5bf488);
                  var _0x15d18b = _0x36d317 && _0x36d317.agent;
                  if (_0xc75d09.length > 1 || _0x15d18b && _0x15d18b.chrome && (_0x5bf488.altKey || _0x15d18b.mac && _0x5bf488.metaKey || !_0x15d18b.mac && _0x5bf488.ctrlKey)) {
                    _0x44d245(true, _0xc75d09, _0x5e8211[_0xc75d09] || (_0xc75d09.length > 1 ? "" : _0xc75d09), _0x5bf488);
                  } else {
                    _0x507fe0 = _0xc75d09;
                  }
                },
                keypress: function (_0x20606c) {
                  var _0x3a75f4;
                  var _0x185537;
                  if (_0x507fe0) {
                    _0x3a75f4 = _0x38e522(_0x20606c);
                    _0x185537 = (_0x185537 = _0x20606c.charCode) >= 32 ? String.fromCharCode(_0x185537) : _0x3a75f4.length > 1 ? "" : _0x3a75f4;
                    _0x44d245(true, _0x3a75f4 = _0x3a75f4 !== _0x507fe0 ? _0x185537.toLowerCase() : _0x3a75f4, _0x185537, _0x20606c);
                    _0x507fe0 = null;
                  }
                },
                keyup: function (_0x3405d1) {
                  var _0x8f62cd = _0x38e522(_0x3405d1);
                  if (_0x8f62cd in _0x38ee2e) {
                    _0x44d245(false, _0x8f62cd, _0x38ee2e[_0x8f62cd], _0x3405d1);
                  }
                }
              });
              _0x19df6d.add(_0x21c198, {
                blur: function (_0x254c8d) {
                  for (var _0x56ae82 in _0x38ee2e) {
                    _0x44d245(false, _0x56ae82, _0x38ee2e[_0x56ae82], _0x254c8d);
                  }
                }
              });
              return {
                modifiers: _0x32b252,
                isDown: function (_0x2a9998) {
                  return !!_0x574898[_0x2a9998];
                }
              };
            }();
            var _0x3438e2 = _0x59e435.extend({
              _class: "MouseEvent",
              initialize: function (_0x5c61e7, _0x3f5aea, _0x3e0691, _0x4901a1, _0x112e30) {
                this.type = _0x5c61e7;
                this.event = _0x3f5aea;
                this.point = _0x3e0691;
                this.target = _0x4901a1;
                this.delta = _0x112e30;
              },
              toString: function () {
                return "{ type: '" + this.type + "', point: " + this.point + ", target: " + this.target + (this.delta ? ", delta: " + this.delta : "") + ", modifiers: " + this.getModifiers() + " }";
              }
            });
            var _0x3dd38e = _0x59e435.extend({
              _class: "ToolEvent",
              _item: null,
              initialize: function (_0x237d54, _0x40a22c, _0x1cd7c3) {
                this.tool = _0x237d54;
                this.type = _0x40a22c;
                this.event = _0x1cd7c3;
              },
              _choosePoint: function (_0x2932ec, _0x527ac3) {
                return _0x2932ec || (_0x527ac3 ? _0x527ac3.clone() : null);
              },
              getPoint: function () {
                return this._choosePoint(this._point, this.tool._point);
              },
              setPoint: function (_0x5846af) {
                this._point = _0x5846af;
              },
              getLastPoint: function () {
                return this._choosePoint(this._lastPoint, this.tool._lastPoint);
              },
              setLastPoint: function (_0x5bb814) {
                this._lastPoint = _0x5bb814;
              },
              getDownPoint: function () {
                return this._choosePoint(this._downPoint, this.tool._downPoint);
              },
              setDownPoint: function (_0xa3ef3e) {
                this._downPoint = _0xa3ef3e;
              },
              getMiddlePoint: function () {
                if (!this._middlePoint && this.tool._lastPoint) {
                  return this.tool._point.add(this.tool._lastPoint).divide(2);
                } else {
                  return this._middlePoint;
                }
              },
              setMiddlePoint: function (_0xc495e8) {
                this._middlePoint = _0xc495e8;
              },
              getDelta: function () {
                if (!this._delta && this.tool._lastPoint) {
                  return this.tool._point.subtract(this.tool._lastPoint);
                } else {
                  return this._delta;
                }
              },
              setDelta: function (_0x3811be) {
                this._delta = _0x3811be;
              },
              getCount: function () {
                return this.tool[/^mouse(down|up)$/.test(this.type) ? "_downCount" : "_moveCount"];
              },
              setCount: function (_0x53e055) {
                this.tool[/^mouse(down|up)$/.test(this.type) ? "downCount" : "count"] = _0x53e055;
              },
              getItem: function () {
                if (!this._item) {
                  var _0x51246b = this.tool._scope.project.hitTest(this.getPoint());
                  if (_0x51246b) {
                    for (var _0xb8225f = _0x51246b.item, _0x10df27 = _0xb8225f._parent; /^(Group|CompoundPath)$/.test(_0x10df27._class);) {
                      _0x10df27 = (_0xb8225f = _0x10df27)._parent;
                    }
                    this._item = _0xb8225f;
                  }
                }
                return this._item;
              },
              setItem: function (_0x46f150) {
                this._item = _0x46f150;
              },
              toString: function () {
                return "{ type: " + this.type + ", point: " + this.getPoint() + ", count: " + this.getCount() + ", modifiers: " + this.getModifiers() + " }";
              }
            });
            var _0x382789 = _0xfdb836.extend({
              _class: "Tool",
              _list: "tools",
              _reference: "tool",
              _events: ["onMouseDown", "onMouseUp", "onMouseDrag", "onMouseMove", "onActivate", "onDeactivate", "onEditOptions", "onKeyDown", "onKeyUp"],
              initialize: function (_0x1d59de) {
                _0xfdb836.call(this);
                this._moveCount = -1;
                this._downCount = -1;
                this.set(_0x1d59de);
              },
              getMinDistance: function () {
                return this._minDistance;
              },
              setMinDistance: function (_0x45f48e) {
                if ((this._minDistance = _0x45f48e) != null && this._maxDistance != null && _0x45f48e > this._maxDistance) {
                  this._maxDistance = _0x45f48e;
                }
              },
              getMaxDistance: function () {
                return this._maxDistance;
              },
              setMaxDistance: function (_0x305b7d) {
                this._maxDistance = _0x305b7d;
                if (this._minDistance != null && _0x305b7d != null && _0x305b7d < this._minDistance) {
                  this._minDistance = _0x305b7d;
                }
              },
              getFixedDistance: function () {
                if (this._minDistance == this._maxDistance) {
                  return this._minDistance;
                } else {
                  return null;
                }
              },
              setFixedDistance: function (_0x2ee7a9) {
                this._minDistance = this._maxDistance = _0x2ee7a9;
              },
              _handleMouseEvent: function (_0x20b019, _0x4c833b, _0x265623, _0x53d839) {
                _0x36d317 = this._scope;
                if (_0x53d839.drag && !this.responds(_0x20b019)) {
                  _0x20b019 = "mousemove";
                }
                var _0x13af7d = _0x53d839.move || _0x53d839.drag;
                var _0x3adc55 = this.responds(_0x20b019);
                var _0x1e1c49 = this.minDistance;
                var _0x538631 = this.maxDistance;
                var _0x9ad1a6 = false;
                var _0x976ea0 = this;
                function _0x3d29b8(_0x572097, _0x9ad268) {
                  var _0x45b728 = _0x265623;
                  var _0x32b6f4 = _0x13af7d ? _0x976ea0._point : _0x976ea0._downPoint || _0x45b728;
                  if (_0x13af7d) {
                    if (_0x976ea0._moveCount >= 0 && _0x45b728.equals(_0x32b6f4)) {
                      return;
                    }
                    if (_0x32b6f4 && (_0x572097 != null || _0x9ad268 != null)) {
                      var _0x9f0ddf = _0x45b728.subtract(_0x32b6f4);
                      var _0x382b6f = _0x9f0ddf.getLength();
                      if (_0x382b6f < (_0x572097 || 0)) {
                        return;
                      }
                      if (_0x9ad268) {
                        _0x45b728 = _0x32b6f4.add(_0x9f0ddf.normalize(Math.min(_0x382b6f, _0x9ad268)));
                      }
                    }
                    _0x976ea0._moveCount++;
                  }
                  _0x976ea0._point = _0x45b728;
                  _0x976ea0._lastPoint = _0x32b6f4 || _0x45b728;
                  if (_0x53d839.down) {
                    _0x976ea0._moveCount = -1;
                    _0x976ea0._downPoint = _0x45b728;
                    _0x976ea0._downCount++;
                  }
                  return 1;
                }
                function _0x24b293() {
                  if (_0x3adc55) {
                    _0x9ad1a6 = _0x976ea0.emit(_0x20b019, new _0x3dd38e(_0x976ea0, _0x20b019, _0x4c833b)) || _0x9ad1a6;
                  }
                }
                if (_0x53d839.down) {
                  _0x3d29b8();
                  _0x24b293();
                } else if (_0x53d839.up) {
                  _0x3d29b8(null, _0x538631);
                  _0x24b293();
                } else if (_0x3adc55) {
                  for (; _0x3d29b8(_0x1e1c49, _0x538631);) {
                    _0x24b293();
                  }
                }
                return _0x9ad1a6;
              }
            });
            var _0x24d063 = _0x28b48a.extend(_0x139988, {
              _class: "Tween",
              statics: {
                easings: new _0x28b48a({
                  linear: function (_0x5a435f) {
                    return _0x5a435f;
                  },
                  easeInQuad: function (_0x263ed2) {
                    return _0x263ed2 * _0x263ed2;
                  },
                  easeOutQuad: function (_0x436138) {
                    return _0x436138 * (2 - _0x436138);
                  },
                  easeInOutQuad: function (_0x2156c9) {
                    if (_0x2156c9 < 0.5) {
                      return _0x2156c9 * 2 * _0x2156c9;
                    } else {
                      return (2 - _0x2156c9) * 2 * _0x2156c9 - 1;
                    }
                  },
                  easeInCubic: function (_0x27a38e) {
                    return _0x27a38e * _0x27a38e * _0x27a38e;
                  },
                  easeOutCubic: function (_0x4bbc71) {
                    return --_0x4bbc71 * _0x4bbc71 * _0x4bbc71 + 1;
                  },
                  easeInOutCubic: function (_0x2247db) {
                    if (_0x2247db < 0.5) {
                      return _0x2247db * 4 * _0x2247db * _0x2247db;
                    } else {
                      return (_0x2247db - 1) * (_0x2247db * 2 - 2) * (_0x2247db * 2 - 2) + 1;
                    }
                  },
                  easeInQuart: function (_0xce569b) {
                    return _0xce569b * _0xce569b * _0xce569b * _0xce569b;
                  },
                  easeOutQuart: function (_0x4f9733) {
                    return 1 - --_0x4f9733 * _0x4f9733 * _0x4f9733 * _0x4f9733;
                  },
                  easeInOutQuart: function (_0x503a40) {
                    if (_0x503a40 < 0.5) {
                      return _0x503a40 * 8 * _0x503a40 * _0x503a40 * _0x503a40;
                    } else {
                      return 1 - --_0x503a40 * 8 * _0x503a40 * _0x503a40 * _0x503a40;
                    }
                  },
                  easeInQuint: function (_0x4f0bc1) {
                    return _0x4f0bc1 * _0x4f0bc1 * _0x4f0bc1 * _0x4f0bc1 * _0x4f0bc1;
                  },
                  easeOutQuint: function (_0x1913f0) {
                    return 1 + --_0x1913f0 * _0x1913f0 * _0x1913f0 * _0x1913f0 * _0x1913f0;
                  },
                  easeInOutQuint: function (_0x5e3297) {
                    if (_0x5e3297 < 0.5) {
                      return _0x5e3297 * 16 * _0x5e3297 * _0x5e3297 * _0x5e3297 * _0x5e3297;
                    } else {
                      return 1 + --_0x5e3297 * 16 * _0x5e3297 * _0x5e3297 * _0x5e3297 * _0x5e3297;
                    }
                  }
                })
              },
              initialize: function _0xda84ff(_0x517c5a, _0x4ff389, _0x577723, _0x375bc8, _0xe675df, _0x5ee8bf) {
                this.object = _0x517c5a;
                var _0x2dd78e = typeof _0xe675df;
                _0x517c5a = _0x2dd78e == "function";
                this.type = _0x517c5a ? _0x2dd78e : _0x2dd78e == "string" ? _0xe675df : "linear";
                this.easing = _0x517c5a ? _0xe675df : _0xda84ff.easings[this.type];
                this.duration = _0x375bc8;
                this.running = false;
                this._then = null;
                this._startTime = null;
                _0x375bc8 = _0x4ff389 || _0x577723;
                this._keys = _0x375bc8 ? Object.keys(_0x375bc8) : [];
                this._parsedKeys = this._parseKeys(this._keys);
                this._from = _0x375bc8 && this._getState(_0x4ff389);
                this._to = _0x375bc8 && this._getState(_0x577723);
                if (_0x5ee8bf !== false) {
                  this.start();
                }
              },
              then: function (_0x57bec0) {
                this._then = _0x57bec0;
                return this;
              },
              start: function () {
                this._startTime = null;
                this.running = true;
                return this;
              },
              stop: function () {
                this.running = false;
                return this;
              },
              update: function (_0x4c7eca) {
                if (this.running) {
                  function _0x7229e(_0x330e26) {
                    if (typeof _0x330e26 == "function") {
                      return _0x330e26(_0x2fc737, _0x4c7eca);
                    } else {
                      return _0x330e26;
                    }
                  }
                  if (_0x4c7eca >= 1) {
                    _0x4c7eca = 1;
                    this.running = false;
                  }
                  for (var _0x2fc737 = this.easing(_0x4c7eca), _0x456115 = this._keys, _0x2f2f2e = 0, _0x5fe2c = _0x456115 && _0x456115.length; _0x2f2f2e < _0x5fe2c; _0x2f2f2e++) {
                    var _0x4f4cf9 = _0x456115[_0x2f2f2e];
                    var _0x2d3ed5 = _0x7229e(this._from[_0x4f4cf9]);
                    var _0x427b01 = _0x7229e(this._to[_0x4f4cf9]);
                    _0x2d3ed5 = _0x2d3ed5 && _0x427b01 && _0x2d3ed5.__add && _0x427b01.__add ? _0x427b01.__subtract(_0x2d3ed5).__multiply(_0x2fc737).__add(_0x2d3ed5) : (_0x427b01 - _0x2d3ed5) * _0x2fc737 + _0x2d3ed5;
                    this._setProperty(this._parsedKeys[_0x4f4cf9], _0x2d3ed5);
                  }
                  if (this.responds("update")) {
                    this.emit("update", new _0x28b48a({
                      progress: _0x4c7eca,
                      factor: _0x2fc737
                    }));
                  }
                  if (!this.running && this._then) {
                    this._then(this.object);
                  }
                }
                return this;
              },
              _events: {
                onUpdate: {}
              },
              _handleFrame: function (_0x4455af) {
                var _0x205d92 = this._startTime;
                var _0x4757ef = _0x205d92 ? (_0x4455af - _0x205d92) / this.duration : 0;
                if (!_0x205d92) {
                  this._startTime = _0x4455af;
                }
                this.update(_0x4757ef);
              },
              _getState: function (_0x454973) {
                for (var _0x3ec956 = this._keys, _0x127c6d = {}, _0x68cd27 = 0, _0x3255cf = _0x3ec956.length; _0x68cd27 < _0x3255cf; _0x68cd27++) {
                  var _0x3d9da9;
                  var _0x2427ec = _0x3ec956[_0x68cd27];
                  var _0x30254b = this._parsedKeys[_0x2427ec];
                  var _0x10448c = this._getProperty(_0x30254b);
                  if (_0x454973) {
                    _0x3d9da9 = this._resolveValue(_0x10448c, _0x454973[_0x2427ec]);
                    this._setProperty(_0x30254b, _0x3d9da9);
                    _0x3d9da9 = (_0x3d9da9 = this._getProperty(_0x30254b)) && _0x3d9da9.clone ? _0x3d9da9.clone() : _0x3d9da9;
                    this._setProperty(_0x30254b, _0x10448c);
                  } else {
                    _0x3d9da9 = _0x10448c && _0x10448c.clone ? _0x10448c.clone() : _0x10448c;
                  }
                  _0x127c6d[_0x2427ec] = _0x3d9da9;
                }
                return _0x127c6d;
              },
              _resolveValue: function (_0xd30b54, _0x19fcb6) {
                if (_0x19fcb6) {
                  if (Array.isArray(_0x19fcb6) && _0x19fcb6.length === 2) {
                    var _0x14ed93 = _0x19fcb6[0];
                    if (_0x14ed93 && _0x14ed93.match && _0x14ed93.match(/^[+\-\*\/]=/)) {
                      return this._calculate(_0xd30b54, _0x14ed93[0], _0x19fcb6[1]);
                    } else {
                      return _0x19fcb6;
                    }
                  }
                  if (typeof _0x19fcb6 == "string" && (_0x14ed93 = _0x19fcb6.match(/^[+\-*/]=(.*)/))) {
                    _0x14ed93 = JSON.parse(_0x14ed93[1].replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g, "\"$2\": "));
                    return this._calculate(_0xd30b54, _0x19fcb6[0], _0x14ed93);
                  }
                }
                return _0x19fcb6;
              },
              _calculate: function (_0x274f07, _0x265abd, _0x596cf5) {
                return _0x36d317.PaperScript.calculateBinary(_0x274f07, _0x265abd, _0x596cf5);
              },
              _parseKeys: function (_0x55aea1) {
                for (var _0x7fd165 = {}, _0x1325d7 = 0, _0x1d025c = _0x55aea1.length; _0x1325d7 < _0x1d025c; _0x1325d7++) {
                  var _0x2a4045 = _0x55aea1[_0x1325d7];
                  var _0x213740 = _0x2a4045.replace(/\.([^.]*)/g, "/$1").replace(/\[['"]?([^'"\]]*)['"]?\]/g, "/$1");
                  _0x7fd165[_0x2a4045] = _0x213740.split("/");
                }
                return _0x7fd165;
              },
              _getProperty: function (_0x8a6028, _0x2e48a5) {
                for (var _0x1fff45 = this.object, _0x191491 = 0, _0x2ecdd0 = _0x8a6028.length - (_0x2e48a5 || 0); _0x191491 < _0x2ecdd0 && _0x1fff45; _0x191491++) {
                  _0x1fff45 = _0x1fff45[_0x8a6028[_0x191491]];
                }
                return _0x1fff45;
              },
              _setProperty: function (_0x4c0f1a, _0x475c19) {
                var _0x4c482f = this._getProperty(_0x4c0f1a, 1);
                if (_0x4c482f) {
                  _0x4c482f[_0x4c0f1a[_0x4c0f1a.length - 1]] = _0x475c19;
                }
              }
            });
            function _0xa75163(_0x232af3) {
              var _0x25a64e = new _0x536850.XMLHttpRequest();
              _0x25a64e.open((_0x232af3.method || "get").toUpperCase(), _0x232af3.url, _0x28b48a.pick(_0x232af3.async, true));
              if (_0x232af3.mimeType) {
                _0x25a64e.overrideMimeType(_0x232af3.mimeType);
              }
              _0x25a64e.onload = function () {
                var _0x5afb15 = _0x25a64e.status;
                if (_0x5afb15 === 0 || _0x5afb15 === 200) {
                  if (_0x232af3.onLoad) {
                    _0x232af3.onLoad.call(_0x25a64e, _0x25a64e.responseText);
                  }
                } else {
                  _0x25a64e.onerror();
                }
              };
              _0x25a64e.onerror = function () {
                var _0x4d0eec = _0x25a64e.status;
                var _0x2a6d4c = "Could not load \"" + _0x232af3.url + "\" (Status: " + _0x4d0eec + ")";
                if (!_0x232af3.onError) {
                  throw new Error(_0x2a6d4c);
                }
                _0x232af3.onError(_0x2a6d4c, _0x4d0eec);
              };
              return _0x25a64e.send(null);
            }
            var _0xc9a63f = _0x28b48a.exports.CanvasProvider = {
              canvases: [],
              getCanvas: function (_0x478850, _0x374761) {
                if (!_0x21c198) {
                  return null;
                }
                var _0x5a3a06;
                var _0x199c3d = true;
                if (typeof _0x478850 == "object") {
                  _0x374761 = _0x478850.height;
                  _0x478850 = _0x478850.width;
                }
                if (this.canvases.length) {
                  _0x5a3a06 = this.canvases.pop();
                } else {
                  _0x5a3a06 = _0x13c74c.createElement("canvas");
                  _0x199c3d = false;
                }
                var _0x533d13 = _0x5a3a06.getContext("d2".split("").reverse().join(""));
                if (!_0x533d13) {
                  throw new Error(".......");
                }
                if (_0x5a3a06.width === _0x478850 && _0x5a3a06.height === _0x374761) {
                  if (_0x199c3d) {
                    _0x533d13.clearRect(0, 0, _0x478850 + 1, _0x374761 + 1);
                  }
                } else {
                  _0x5a3a06.width = _0x478850;
                  _0x5a3a06.height = _0x374761;
                }
                _0x533d13.save();
                return _0x5a3a06;
              },
              getContext: function (_0x5adf31, _0x30a242) {
                if (_0x30a242 = this.getCanvas(_0x5adf31, _0x30a242)) {
                  return _0x30a242.getContext("2d");
                } else {
                  return null;
                }
              },
              release: function (_0x5c1ee9) {
                if ((_0x5c1ee9 = _0x5c1ee9 && _0x5c1ee9.canvas ? _0x5c1ee9.canvas : _0x5c1ee9) && _0x5c1ee9.getContext) {
                  _0x5c1ee9.getContext("2d").restore();
                  this.canvases.push(_0x5c1ee9);
                }
              }
            };
            var _0x482b6b = new function () {
              var _0x1094b9;
              var _0x82bbbd;
              var _0x1c19fb;
              var _0x16b528;
              var _0x258c34;
              var _0x2d8601;
              var _0xa5c2aa;
              var _0x1a5af0;
              var _0x5b1792;
              var _0x416316;
              var _0x2699ad;
              var _0x1f2792 = Math.min;
              var _0x3f2a31 = Math.max;
              var _0x37381f = Math.abs;
              function _0x14161f(_0x115383, _0x150693, _0x1c6be0) {
                return _0x115383 * 0.2989 + _0x150693 * 0.587 + _0x1c6be0 * 0.114;
              }
              function _0x311d60(_0x3247fc, _0x2eaacf, _0x246027, _0x11746c) {
                var _0x6bda65;
                var _0x470779 = _0x11746c - _0x14161f(_0x3247fc, _0x2eaacf, _0x246027);
                _0x11746c = _0x14161f(_0x5b1792 = _0x3247fc + _0x470779, _0x416316 = _0x2eaacf + _0x470779, _0x2699ad = _0x246027 + _0x470779);
                _0x246027 = _0x1f2792(_0x5b1792, _0x416316, _0x2699ad);
                _0x470779 = _0x3f2a31(_0x5b1792, _0x416316, _0x2699ad);
                if (_0x246027 < 0) {
                  _0x5b1792 = _0x11746c + (_0x5b1792 - _0x11746c) * _0x11746c / (_0x6bda65 = _0x11746c - _0x246027);
                  _0x416316 = _0x11746c + (_0x416316 - _0x11746c) * _0x11746c / _0x6bda65;
                  _0x2699ad = _0x11746c + (_0x2699ad - _0x11746c) * _0x11746c / _0x6bda65;
                }
                if (_0x470779 > 255) {
                  _0x5b1792 = _0x11746c + (_0x5b1792 - _0x11746c) * (_0x6bda65 = 255 - _0x11746c) / (_0x470779 -= _0x11746c);
                  _0x416316 = _0x11746c + (_0x416316 - _0x11746c) * _0x6bda65 / _0x470779;
                  _0x2699ad = _0x11746c + (_0x2699ad - _0x11746c) * _0x6bda65 / _0x470779;
                }
              }
              function _0x3becf6(_0x3d4695, _0xdcf31b, _0x3f84ec) {
                return _0x3f2a31(_0x3d4695, _0xdcf31b, _0x3f84ec) - _0x1f2792(_0x3d4695, _0xdcf31b, _0x3f84ec);
              }
              function _0x27ce72(_0x429355, _0x5fefc1, _0xbcf5fd, _0x5a83a0) {
                var _0x3b162a = [_0x429355, _0x5fefc1, _0xbcf5fd];
                var _0x244579 = _0x3f2a31(_0x429355, _0x5fefc1, _0xbcf5fd);
                _0xbcf5fd = _0x1f2792(_0x429355, _0x5fefc1, _0xbcf5fd);
                _0x5fefc1 = _0x1f2792(_0xbcf5fd = _0xbcf5fd === _0x429355 ? 0 : _0xbcf5fd === _0x5fefc1 ? 1 : 2, _0x244579 = _0x244579 === _0x429355 ? 0 : _0x244579 === _0x5fefc1 ? 1 : 2) === 0 ? _0x3f2a31(_0xbcf5fd, _0x244579) === 1 ? 2 : 1 : 0;
                if (_0x3b162a[_0x244579] > _0x3b162a[_0xbcf5fd]) {
                  _0x3b162a[_0x5fefc1] = (_0x3b162a[_0x5fefc1] - _0x3b162a[_0xbcf5fd]) * _0x5a83a0 / (_0x3b162a[_0x244579] - _0x3b162a[_0xbcf5fd]);
                  _0x3b162a[_0x244579] = _0x5a83a0;
                } else {
                  _0x3b162a[_0x5fefc1] = _0x3b162a[_0x244579] = 0;
                }
                _0x3b162a[_0xbcf5fd] = 0;
                _0x5b1792 = _0x3b162a[0];
                _0x416316 = _0x3b162a[1];
                _0x2699ad = _0x3b162a[2];
              }
              var _0x5dca71 = {
                multiply: function () {
                  _0x5b1792 = _0x258c34 * _0x1094b9 / 255;
                  _0x416316 = _0x2d8601 * _0x82bbbd / 255;
                  _0x2699ad = _0xa5c2aa * _0x1c19fb / 255;
                },
                screen: function () {
                  _0x5b1792 = _0x258c34 + _0x1094b9 - _0x258c34 * _0x1094b9 / 255;
                  _0x416316 = _0x2d8601 + _0x82bbbd - _0x2d8601 * _0x82bbbd / 255;
                  _0x2699ad = _0xa5c2aa + _0x1c19fb - _0xa5c2aa * _0x1c19fb / 255;
                },
                overlay: function () {
                  _0x5b1792 = _0x258c34 < 128 ? _0x258c34 * 2 * _0x1094b9 / 255 : 255 - (255 - _0x258c34) * 2 * (255 - _0x1094b9) / 255;
                  _0x416316 = _0x2d8601 < 128 ? _0x2d8601 * 2 * _0x82bbbd / 255 : 255 - (255 - _0x2d8601) * 2 * (255 - _0x82bbbd) / 255;
                  _0x2699ad = _0xa5c2aa < 128 ? _0xa5c2aa * 2 * _0x1c19fb / 255 : 255 - (255 - _0xa5c2aa) * 2 * (255 - _0x1c19fb) / 255;
                },
                "soft-light": function () {
                  var _0x16c868 = _0x1094b9 * _0x258c34 / 255;
                  _0x5b1792 = _0x16c868 + _0x258c34 * (255 - (255 - _0x258c34) * (255 - _0x1094b9) / 255 - _0x16c868) / 255;
                  _0x416316 = (_0x16c868 = _0x82bbbd * _0x2d8601 / 255) + _0x2d8601 * (255 - (255 - _0x2d8601) * (255 - _0x82bbbd) / 255 - _0x16c868) / 255;
                  _0x2699ad = (_0x16c868 = _0x1c19fb * _0xa5c2aa / 255) + _0xa5c2aa * (255 - (255 - _0xa5c2aa) * (255 - _0x1c19fb) / 255 - _0x16c868) / 255;
                },
                "hard-light": function () {
                  _0x5b1792 = _0x1094b9 < 128 ? _0x1094b9 * 2 * _0x258c34 / 255 : 255 - (255 - _0x1094b9) * 2 * (255 - _0x258c34) / 255;
                  _0x416316 = _0x82bbbd < 128 ? _0x82bbbd * 2 * _0x2d8601 / 255 : 255 - (255 - _0x82bbbd) * 2 * (255 - _0x2d8601) / 255;
                  _0x2699ad = _0x1c19fb < 128 ? _0x1c19fb * 2 * _0xa5c2aa / 255 : 255 - (255 - _0x1c19fb) * 2 * (255 - _0xa5c2aa) / 255;
                },
                "color-dodge": function () {
                  _0x5b1792 = _0x258c34 === 0 ? 0 : _0x1094b9 === 255 ? 255 : _0x1f2792(255, _0x258c34 * 255 / (255 - _0x1094b9));
                  _0x416316 = _0x2d8601 === 0 ? 0 : _0x82bbbd === 255 ? 255 : _0x1f2792(255, _0x2d8601 * 255 / (255 - _0x82bbbd));
                  _0x2699ad = _0xa5c2aa === 0 ? 0 : _0x1c19fb === 255 ? 255 : _0x1f2792(255, _0xa5c2aa * 255 / (255 - _0x1c19fb));
                },
                "color-burn": function () {
                  _0x5b1792 = _0x258c34 === 255 ? 255 : _0x1094b9 === 0 ? 0 : _0x3f2a31(0, 255 - (255 - _0x258c34) * 255 / _0x1094b9);
                  _0x416316 = _0x2d8601 === 255 ? 255 : _0x82bbbd === 0 ? 0 : _0x3f2a31(0, 255 - (255 - _0x2d8601) * 255 / _0x82bbbd);
                  _0x2699ad = _0xa5c2aa === 255 ? 255 : _0x1c19fb === 0 ? 0 : _0x3f2a31(0, 255 - (255 - _0xa5c2aa) * 255 / _0x1c19fb);
                },
                darken: function () {
                  _0x5b1792 = _0x258c34 < _0x1094b9 ? _0x258c34 : _0x1094b9;
                  _0x416316 = _0x2d8601 < _0x82bbbd ? _0x2d8601 : _0x82bbbd;
                  _0x2699ad = _0xa5c2aa < _0x1c19fb ? _0xa5c2aa : _0x1c19fb;
                },
                lighten: function () {
                  _0x5b1792 = _0x1094b9 < _0x258c34 ? _0x258c34 : _0x1094b9;
                  _0x416316 = _0x82bbbd < _0x2d8601 ? _0x2d8601 : _0x82bbbd;
                  _0x2699ad = _0x1c19fb < _0xa5c2aa ? _0xa5c2aa : _0x1c19fb;
                },
                difference: function () {
                  if ((_0x5b1792 = _0x258c34 - _0x1094b9) < 0) {
                    _0x5b1792 = -_0x5b1792;
                  }
                  if ((_0x416316 = _0x2d8601 - _0x82bbbd) < 0) {
                    _0x416316 = -_0x416316;
                  }
                  if ((_0x2699ad = _0xa5c2aa - _0x1c19fb) < 0) {
                    _0x2699ad = -_0x2699ad;
                  }
                },
                exclusion: function () {
                  _0x5b1792 = _0x258c34 + _0x1094b9 * (255 - _0x258c34 - _0x258c34) / 255;
                  _0x416316 = _0x2d8601 + _0x82bbbd * (255 - _0x2d8601 - _0x2d8601) / 255;
                  _0x2699ad = _0xa5c2aa + _0x1c19fb * (255 - _0xa5c2aa - _0xa5c2aa) / 255;
                },
                hue: function () {
                  _0x27ce72(_0x1094b9, _0x82bbbd, _0x1c19fb, _0x3becf6(_0x258c34, _0x2d8601, _0xa5c2aa));
                  _0x311d60(_0x5b1792, _0x416316, _0x2699ad, _0x14161f(_0x258c34, _0x2d8601, _0xa5c2aa));
                },
                saturation: function () {
                  _0x27ce72(_0x258c34, _0x2d8601, _0xa5c2aa, _0x3becf6(_0x1094b9, _0x82bbbd, _0x1c19fb));
                  _0x311d60(_0x5b1792, _0x416316, _0x2699ad, _0x14161f(_0x258c34, _0x2d8601, _0xa5c2aa));
                },
                luminosity: function () {
                  _0x311d60(_0x258c34, _0x2d8601, _0xa5c2aa, _0x14161f(_0x1094b9, _0x82bbbd, _0x1c19fb));
                },
                color: function () {
                  _0x311d60(_0x1094b9, _0x82bbbd, _0x1c19fb, _0x14161f(_0x258c34, _0x2d8601, _0xa5c2aa));
                },
                add: function () {
                  _0x5b1792 = _0x1f2792(_0x258c34 + _0x1094b9, 255);
                  _0x416316 = _0x1f2792(_0x2d8601 + _0x82bbbd, 255);
                  _0x2699ad = _0x1f2792(_0xa5c2aa + _0x1c19fb, 255);
                },
                subtract: function () {
                  _0x5b1792 = _0x3f2a31(_0x258c34 - _0x1094b9, 0);
                  _0x416316 = _0x3f2a31(_0x2d8601 - _0x82bbbd, 0);
                  _0x2699ad = _0x3f2a31(_0xa5c2aa - _0x1c19fb, 0);
                },
                average: function () {
                  _0x5b1792 = (_0x258c34 + _0x1094b9) / 2;
                  _0x416316 = (_0x2d8601 + _0x82bbbd) / 2;
                  _0x2699ad = (_0xa5c2aa + _0x1c19fb) / 2;
                },
                negation: function () {
                  _0x5b1792 = 255 - _0x37381f(255 - _0x1094b9 - _0x258c34);
                  _0x416316 = 255 - _0x37381f(255 - _0x82bbbd - _0x2d8601);
                  _0x2699ad = 255 - _0x37381f(255 - _0x1c19fb - _0xa5c2aa);
                }
              };
              var _0x1a6af5 = this.nativeModes = _0x28b48a.each(["source-over", "source-in", "source-out", "source-atop", "destination-over", "destination-in", "destination-out", "destination-atop", "lighter", "darker", "copy", "xor"], function (_0x52b99d) {
                this[_0x52b99d] = true;
              }, {});
              var _0x193e80 = _0xc9a63f.getContext(1, 1);
              if (_0x193e80) {
                _0x28b48a.each(_0x5dca71, function (_0x22ee37, _0x4d1b72) {
                  var _0x3ee56a = _0x4d1b72 === "darken";
                  var _0x57d280 = false;
                  _0x193e80.save();
                  try {
                    _0x193e80.fillStyle = _0x3ee56a ? "#300" : "#a00";
                    _0x193e80.fillRect(0, 0, 1, 1);
                    _0x193e80.globalCompositeOperation = _0x4d1b72;
                    if (_0x193e80.globalCompositeOperation === _0x4d1b72) {
                      _0x193e80.fillStyle = _0x3ee56a ? "#a00" : "#300";
                      _0x193e80.fillRect(0, 0, 1, 1);
                      _0x57d280 = _0x193e80.getImageData(0, 0, 1, 1).data[0] !== _0x3ee56a ? 170 : 51;
                    }
                  } catch (_0x1c8b72) {}
                  _0x193e80.restore();
                  _0x1a6af5[_0x4d1b72] = _0x57d280;
                });
                _0xc9a63f.release(_0x193e80);
              }
              this.process = function (_0x2330f6, _0xf5a7f7, _0x2029f9, _0x1fa136, _0x12ecc6) {
                var _0x3ddb83 = _0xf5a7f7.canvas;
                var _0x5c942b = _0x2330f6 === "normal";
                if (_0x5c942b || _0x1a6af5[_0x2330f6]) {
                  _0x2029f9.save();
                  _0x2029f9.setTransform(1, 0, 0, 1, 0, 0);
                  _0x2029f9.globalAlpha = _0x1fa136;
                  if (!_0x5c942b) {
                    _0x2029f9.globalCompositeOperation = _0x2330f6;
                  }
                  _0x2029f9.drawImage(_0x3ddb83, _0x12ecc6.x, _0x12ecc6.y);
                  _0x2029f9.restore();
                } else {
                  var _0x121ab2 = _0x5dca71[_0x2330f6];
                  if (_0x121ab2) {
                    for (var _0x297e67 = (_0x2330f6 = _0x2029f9.getImageData(_0x12ecc6.x, _0x12ecc6.y, _0x3ddb83.width, _0x3ddb83.height)).data, _0x5ab13a = _0xf5a7f7.getImageData(0, 0, _0x3ddb83.width, _0x3ddb83.height).data, _0xf42f23 = 0, _0x2115ce = _0x297e67.length; _0xf42f23 < _0x2115ce; _0xf42f23 += 4) {
                      _0x1094b9 = _0x5ab13a[_0xf42f23];
                      _0x258c34 = _0x297e67[_0xf42f23];
                      _0x82bbbd = _0x5ab13a[_0xf42f23 + 1];
                      _0x2d8601 = _0x297e67[_0xf42f23 + 1];
                      _0x1c19fb = _0x5ab13a[_0xf42f23 + 2];
                      _0xa5c2aa = _0x297e67[_0xf42f23 + 2];
                      _0x16b528 = _0x5ab13a[_0xf42f23 + 3];
                      _0x1a5af0 = _0x297e67[_0xf42f23 + 3];
                      _0x121ab2();
                      var _0xf47ffd = _0x16b528 * _0x1fa136 / 255;
                      var _0x3de67f = 1 - _0xf47ffd;
                      _0x297e67[_0xf42f23] = _0xf47ffd * _0x5b1792 + _0x3de67f * _0x258c34;
                      _0x297e67[_0xf42f23 + 1] = _0xf47ffd * _0x416316 + _0x3de67f * _0x2d8601;
                      _0x297e67[_0xf42f23 + 2] = _0xf47ffd * _0x2699ad + _0x3de67f * _0xa5c2aa;
                      _0x297e67[_0xf42f23 + 3] = _0x16b528 * _0x1fa136 + _0x3de67f * _0x1a5af0;
                    }
                    _0x2029f9.putImageData(_0x2330f6, _0x12ecc6.x, _0x12ecc6.y);
                  }
                }
              };
            }();
            var _0x36be01 = new function () {
              var _0x2232c7 = "http://www.w3.org/2000/svg";
              var _0x530952 = "http://www.w3.org/2000/xmlns";
              var _0x52ef45 = "http://www.w3.org/1999/xlink";
              var _0x3b6fc7 = {
                href: _0x52ef45,
                xlink: _0x530952,
                xmlns: _0x530952 + "/",
                "xmlns:xlink": _0x530952 + "/"
              };
              function _0x555315(_0x13f350, _0x11c5f4, _0x3e3684) {
                for (var _0x26493f in _0x11c5f4) {
                  var _0x2df2a4 = _0x11c5f4[_0x26493f];
                  var _0x58445d = _0x3b6fc7[_0x26493f];
                  if (typeof _0x2df2a4 == "number" && _0x3e3684) {
                    _0x2df2a4 = _0x3e3684.number(_0x2df2a4);
                  }
                  if (_0x58445d) {
                    _0x13f350.setAttributeNS(_0x58445d, _0x26493f, _0x2df2a4);
                  } else {
                    _0x13f350.setAttribute(_0x26493f, _0x2df2a4);
                  }
                }
                return _0x13f350;
              }
              return {
                svg: _0x2232c7,
                xmlns: _0x530952,
                xlink: _0x52ef45,
                create: function (_0x31b844, _0x20a12f, _0x1f2e0a) {
                  return _0x555315(_0x13c74c.createElementNS(_0x2232c7, _0x31b844), _0x20a12f, _0x1f2e0a);
                },
                get: function (_0x25035b, _0x20ce38) {
                  var _0x3911f2 = _0x3b6fc7[_0x20ce38];
                  if ((_0x20ce38 = _0x3911f2 ? _0x25035b.getAttributeNS(_0x3911f2, _0x20ce38) : _0x25035b.getAttribute(_0x20ce38)) === "null") {
                    return null;
                  } else {
                    return _0x20ce38;
                  }
                },
                set: _0x555315
              };
            }();
            var _0x444e30 = _0x28b48a.each({
              fillColor: ["fill", "color"],
              fillRule: ["fill-rule", "string"],
              strokeColor: ["stroke", "color"],
              strokeWidth: ["stroke-width", "number"],
              strokeCap: ["stroke-linecap", "string"],
              strokeJoin: ["stroke-linejoin", "string"],
              strokeScaling: ["vector-effect", "lookup", {
                true: "none",
                false: "non-scaling-stroke"
              }, function (_0x50b5e6, _0x5503d4) {
                return !_0x5503d4 && (_0x50b5e6 instanceof _0xfff515 || _0x50b5e6 instanceof _0xa8e5b4 || _0x50b5e6 instanceof _0x244276);
              }],
              miterLimit: ["stroke-miterlimit", "number"],
              dashArray: ["stroke-dasharray", "array"],
              dashOffset: ["stroke-dashoffset", "number"],
              fontFamily: ["font-family", "string"],
              fontWeight: ["font-weight", "string"],
              fontSize: ["font-size", "number"],
              justification: ["text-anchor", "lookup", {
                left: "start",
                center: "middle",
                right: "end"
              }],
              opacity: ["opacity", "number"],
              blendMode: ["mix-blend-mode", "style"]
            }, function (_0x32cf9c, _0x3dc265) {
              var _0x35fe96 = _0x28b48a.capitalize(_0x3dc265);
              var _0x39342e = _0x32cf9c[2];
              this[_0x3dc265] = {
                type: _0x32cf9c[1],
                property: _0x3dc265,
                attribute: _0x32cf9c[0],
                toSVG: _0x39342e,
                fromSVG: _0x39342e && _0x28b48a.each(_0x39342e, function (_0x147a35, _0xdcfb2e) {
                  this[_0x147a35] = _0xdcfb2e;
                }, {}),
                exportFilter: _0x32cf9c[3],
                get: "get" + _0x35fe96,
                set: "set" + _0x35fe96
              };
            }, {});
            function _0x463570(_0xc6a2e0, _0x4560a2, _0x3667ed) {
              var _0x20e78c;
              var _0x36505f;
              var _0x27303b = new _0x28b48a();
              var _0x5345b7 = _0xc6a2e0.getTranslation();
              if (_0x4560a2) {
                if (_0xc6a2e0.isInvertible()) {
                  _0x20e78c = (_0xc6a2e0 = _0xc6a2e0._shiftless())._inverseTransform(_0x5345b7);
                  _0x5345b7 = null;
                } else {
                  _0x20e78c = new _0xbc5c4a();
                }
                _0x27303b[_0x3667ed ? "cx" : "x"] = _0x20e78c.x;
                _0x27303b[_0x3667ed ? "cy" : "y"] = _0x20e78c.y;
              }
              if (!_0xc6a2e0.isIdentity()) {
                if (_0x36505f = _0xc6a2e0.decompose()) {
                  _0x4560a2 = [];
                  _0x3667ed = _0x36505f.rotation;
                  _0x20e78c = _0x36505f.scaling;
                  _0x36505f = _0x36505f.skewing;
                  if (_0x5345b7 && !_0x5345b7.isZero()) {
                    _0x4560a2.push("translate(" + _0x840a73.point(_0x5345b7) + ")");
                  }
                  if (_0x3667ed) {
                    _0x4560a2.push("rotate(" + _0x840a73.number(_0x3667ed) + ")");
                  }
                  if (!(_0x3c029b.isZero(_0x20e78c.x - 1) && _0x3c029b.isZero(_0x20e78c.y - 1))) {
                    _0x4560a2.push("scale(" + _0x840a73.point(_0x20e78c) + ")");
                  }
                  if (_0x36505f.x) {
                    _0x4560a2.push("skewX(" + _0x840a73.number(_0x36505f.x) + ")");
                  }
                  if (_0x36505f.y) {
                    _0x4560a2.push("skewY(" + _0x840a73.number(_0x36505f.y) + ")");
                  }
                  _0x27303b.transform = _0x4560a2.join(" ");
                } else {
                  _0x27303b.transform = "matrix(" + _0xc6a2e0.getValues().join(",") + ")";
                }
              }
              return _0x27303b;
            }
            function _0x36c04e(_0x4f1c29, _0x4e7388) {
              for (var _0x467df0 = _0x463570(_0x4f1c29._matrix), _0x4f6e07 = _0x4f1c29._children, _0x36bf7e = _0x36be01.create("g", _0x467df0, _0x840a73), _0x463769 = 0, _0x55f3ab = _0x4f6e07.length; _0x463769 < _0x55f3ab; _0x463769++) {
                var _0x23c781;
                var _0x13d269 = _0x4f6e07[_0x463769];
                var _0x53f844 = _0x63b91b(_0x13d269, _0x4e7388);
                if (_0x53f844) {
                  if (_0x13d269.isClipMask()) {
                    (_0x23c781 = _0x36be01.create("clipPath")).appendChild(_0x53f844);
                    _0x3fbbe6(_0x13d269, _0x23c781, "clip");
                    _0x36be01.set(_0x36bf7e, {
                      "clip-path": "url(#" + _0x23c781.id + ")"
                    });
                  } else {
                    _0x36bf7e.appendChild(_0x53f844);
                  }
                }
              }
              return _0x36bf7e;
            }
            function _0x25b32c(_0x38f4c2) {
              var _0x96cfc5;
              var _0x42df21 = _0x38f4c2._type;
              var _0x2808ef = _0x38f4c2._radius;
              var _0x5aef97 = _0x463570(_0x38f4c2._matrix, true, _0x42df21 !== "rectangle");
              if (_0x42df21 === "rectangle") {
                _0x42df21 = "rect";
                _0x38f4c2 = (_0x96cfc5 = _0x38f4c2._size).width;
                _0x96cfc5 = _0x96cfc5.height;
                _0x5aef97.x -= _0x38f4c2 / 2;
                _0x5aef97.y -= _0x96cfc5 / 2;
                _0x5aef97.width = _0x38f4c2;
                _0x5aef97.height = _0x96cfc5;
                if (_0x2808ef.isZero()) {
                  _0x2808ef = null;
                }
              }
              if (_0x2808ef) {
                if (_0x42df21 === "circle") {
                  _0x5aef97.r = _0x2808ef;
                } else {
                  _0x5aef97.rx = _0x2808ef.width;
                  _0x5aef97.ry = _0x2808ef.height;
                }
              }
              return _0x36be01.create(_0x42df21, _0x5aef97, _0x840a73);
            }
            function _0x2d51f9(_0x2d69c6, _0x574150) {
              _0x21d821 = _0x21d821 || {
                ids: {},
                svgs: {}
              };
              return _0x2d69c6 && _0x21d821.svgs[_0x574150 + "-" + (_0x2d69c6._id || _0x2d69c6.__id || (_0x2d69c6.__id = _0x2231b4.get("svg")))];
            }
            function _0x3fbbe6(_0x17f568, _0x31d99a, _0x44fea9) {
              if (!_0x21d821) {
                _0x2d51f9();
              }
              var _0x544285 = _0x21d821.ids[_0x44fea9] = (_0x21d821.ids[_0x44fea9] || 0) + 1;
              _0x31d99a.id = _0x44fea9 + "-" + _0x544285;
              _0x21d821.svgs[_0x44fea9 + "-" + (_0x17f568._id || _0x17f568.__id)] = _0x31d99a;
            }
            function _0x8c5c3a(_0x274db8, _0x9d1ff7) {
              var _0x29e200 = _0x274db8;
              var _0x3b4a71 = null;
              if (_0x21d821) {
                _0x29e200 = _0x274db8.nodeName.toLowerCase() === "svg" && _0x274db8;
                for (var _0x53ae34 in _0x21d821.svgs) {
                  if (!_0x3b4a71) {
                    if (!_0x29e200) {
                      (_0x29e200 = _0x36be01.create("svg")).appendChild(_0x274db8);
                    }
                    _0x3b4a71 = _0x29e200.insertBefore(_0x36be01.create("defs"), _0x29e200.firstChild);
                  }
                  _0x3b4a71.appendChild(_0x21d821.svgs[_0x53ae34]);
                }
                _0x21d821 = null;
              }
              if (_0x9d1ff7.asString) {
                return new _0x536850.XMLSerializer().serializeToString(_0x29e200);
              } else {
                return _0x29e200;
              }
            }
            function _0x63b91b(_0x22288, _0x4d4af4, _0x1e66ee) {
              var _0x31320c = _0xe8482b[_0x22288._class];
              var _0x131ce8 = _0x31320c && _0x31320c(_0x22288, _0x4d4af4);
              if (_0x131ce8) {
                if (_0x31320c = _0x4d4af4.onExport) {
                  _0x131ce8 = _0x31320c(_0x22288, _0x131ce8, _0x4d4af4) || _0x131ce8;
                }
                if ((_0x4d4af4 = JSON.stringify(_0x22288._data)) && _0x4d4af4 !== "{}" && _0x4d4af4 !== "null") {
                  _0x131ce8.setAttribute("data-paper-data", _0x4d4af4);
                }
              }
              return _0x131ce8 && function (_0x4303fd, _0x2369f0, _0x201e9f) {
                var _0x457cae = {};
                var _0xa6ed68 = !_0x201e9f && _0x4303fd.getParent();
                var _0xdfd553 = [];
                if (_0x4303fd._name != null) {
                  _0x457cae.id = _0x4303fd._name;
                }
                _0x28b48a.each(_0x444e30, function (_0xcc8e85) {
                  var _0x55b981 = _0xcc8e85.get;
                  var _0xc8e584 = _0xcc8e85.type;
                  var _0x240fa4 = _0x4303fd[_0x55b981]();
                  if (!(_0xcc8e85.exportFilter ? !_0xcc8e85.exportFilter(_0x4303fd, _0x240fa4) : _0xa6ed68 && _0x28b48a.equals(_0xa6ed68[_0x55b981](), _0x240fa4))) {
                    if (!(_0xc8e584 !== "color" || _0x240fa4 == null)) {
                      if ((_0x55b981 = _0x240fa4.getAlpha()) < 1) {
                        _0x457cae[_0xcc8e85.attribute + "-opacity"] = _0x55b981;
                      }
                    }
                    if (_0xc8e584 === "style") {
                      _0xdfd553.push(_0xcc8e85.attribute + ": " + _0x240fa4);
                    } else {
                      _0x457cae[_0xcc8e85.attribute] = _0x240fa4 == null ? "none" : _0xc8e584 === "color" ? _0x240fa4.gradient ? function (_0x14c9c9) {
                        if (!(_0x7c4e25 = _0x2d51f9(_0x14c9c9, "color"))) {
                          var _0xde640f;
                          var _0x130ea2;
                          var _0x4d4e79 = _0x14c9c9.getGradient();
                          var _0x4e0b85 = _0x4d4e79._radial;
                          var _0x26000a = _0x14c9c9.getOrigin();
                          var _0x34b7c9 = _0x14c9c9.getDestination();
                          if (_0x4e0b85) {
                            _0xde640f = {
                              cx: _0x26000a.x,
                              cy: _0x26000a.y,
                              r: _0x26000a.getDistance(_0x34b7c9)
                            };
                            if (_0x130ea2 = _0x14c9c9.getHighlight()) {
                              _0xde640f.fx = _0x130ea2.x;
                              _0xde640f.fy = _0x130ea2.y;
                            }
                          } else {
                            _0xde640f = {
                              x1: _0x26000a.x,
                              y1: _0x26000a.y,
                              x2: _0x34b7c9.x,
                              y2: _0x34b7c9.y
                            };
                          }
                          _0xde640f.gradientUnits = "userSpaceOnUse";
                          for (var _0x7c4e25 = _0x36be01.create((_0x4e0b85 ? "radial" : "linear") + "Gradient", _0xde640f, _0x840a73), _0x5f33db = _0x4d4e79._stops, _0x54afc1 = 0, _0x2be49f = _0x5f33db.length; _0x54afc1 < _0x2be49f; _0x54afc1++) {
                            var _0x2b4c2b;
                            var _0x22eb1e = (_0x2b4c2b = _0x5f33db[_0x54afc1])._color;
                            var _0xe1101 = _0x22eb1e.getAlpha();
                            _0xde640f = {
                              offset: (_0x2b4c2b = _0x2b4c2b._offset) == null ? _0x54afc1 / (_0x2be49f - 1) : _0x2b4c2b
                            };
                            if (_0x22eb1e) {
                              _0xde640f["stop-color"] = _0x22eb1e.toCSS(true);
                            }
                            if (_0xe1101 < 1) {
                              _0xde640f["stop-opacity"] = _0xe1101;
                            }
                            _0x7c4e25.appendChild(_0x36be01.create("stop", _0xde640f, _0x840a73));
                          }
                          _0x3fbbe6(_0x14c9c9, _0x7c4e25, "color");
                        }
                        return "url(#" + _0x7c4e25.id + ")";
                      }(_0x240fa4) : _0x240fa4.toCSS(true) : _0xc8e584 === "array" ? _0x240fa4.join(",") : _0xc8e584 === "lookup" ? _0xcc8e85.toSVG[_0x240fa4] : _0x240fa4;
                    }
                  }
                });
                if (_0xdfd553.length) {
                  _0x457cae.style = _0xdfd553.join(";");
                }
                if (_0x457cae.opacity === 1) {
                  delete _0x457cae.opacity;
                }
                if (!_0x4303fd._visible) {
                  _0x457cae.visibility = "hidden";
                }
                return _0x36be01.set(_0x2369f0, _0x457cae, _0x840a73);
              }(_0x22288, _0x131ce8, _0x1e66ee);
            }
            function _0x37f539(_0x504d85) {
              _0x840a73 = new _0x5735bc((_0x504d85 = _0x504d85 || {}).precision);
              return _0x504d85;
            }
            function _0x5e3b14(_0x53fa90, _0x54c52e, _0xc519ad, _0x472002, _0x3e65fb, _0x2b2a69) {
              _0xc519ad = (_0x2b2a69 = _0x36be01.get(_0x53fa90, _0x54c52e) || _0x2b2a69) == null ? _0x472002 ? null : _0xc519ad ? "" : 0 : _0xc519ad ? _0x2b2a69 : parseFloat(_0x2b2a69);
              if (/%\s*$/.test(_0x2b2a69)) {
                return _0xc519ad / 100 * (_0x3e65fb ? 1 : _0x4c1433[/x|^width/.test(_0x54c52e) ? "width" : "height"]);
              } else {
                return _0xc519ad;
              }
            }
            function _0x3a7244(_0x4466e7, _0x1e592b, _0x153d5c, _0x23daa6, _0x3e6a6a, _0x223b09, _0x35044f) {
              _0x1e592b = _0x5e3b14(_0x4466e7, _0x1e592b || "x", false, _0x23daa6, _0x3e6a6a, _0x223b09);
              _0x153d5c = _0x5e3b14(_0x4466e7, _0x153d5c || "y", false, _0x23daa6, _0x3e6a6a, _0x35044f);
              if (!_0x23daa6 || _0x1e592b != null && _0x153d5c != null) {
                return new _0xbc5c4a(_0x1e592b, _0x153d5c);
              } else {
                return null;
              }
            }
            function _0x38ec32(_0x2cb336, _0x234522, _0x107779, _0x390011, _0x251968) {
              _0x234522 = _0x5e3b14(_0x2cb336, _0x234522 || "width", false, _0x390011, _0x251968);
              _0x107779 = _0x5e3b14(_0x2cb336, _0x107779 || "height", false, _0x390011, _0x251968);
              if (!_0x390011 || _0x234522 != null && _0x107779 != null) {
                return new _0x236987(_0x234522, _0x107779);
              } else {
                return null;
              }
            }
            function _0x1e53d6(_0x30ce6a, _0x19a936, _0x3c334d) {
              if (_0x30ce6a === "none") {
                return null;
              } else if (_0x19a936 === "number") {
                return parseFloat(_0x30ce6a);
              } else if (_0x19a936 === "array") {
                if (_0x30ce6a) {
                  return _0x30ce6a.split(/[\s,]+/g).map(parseFloat);
                } else {
                  return [];
                }
              } else if (_0x19a936 === "color") {
                return _0x23b9db(_0x30ce6a) || _0x30ce6a;
              } else if (_0x19a936 === "lookup") {
                return _0x3c334d[_0x30ce6a];
              } else {
                return _0x30ce6a;
              }
            }
            function _0x440018(_0x53c899, _0x35d976, _0x3a89fe, _0x751d19) {
              var _0x303caa = _0x53c899.childNodes;
              var _0x240837 = _0x35d976 === "clippath";
              var _0x486d76 = _0x35d976 === "defs";
              var _0x4b9358 = new _0x46c1f5();
              var _0x457a94 = _0x4b9358._project;
              _0x35d976 = _0x457a94._currentStyle;
              var _0x326218 = [];
              if (!(_0x240837 || _0x486d76)) {
                _0x4b9358 = _0x449db3(_0x4b9358, _0x53c899, _0x751d19);
                _0x457a94._currentStyle = _0x4b9358._style.clone();
              }
              if (_0x751d19) {
                for (var _0x93faad = _0x53c899.querySelectorAll("defs"), _0x3989ba = 0, _0x2555ff = _0x93faad.length; _0x3989ba < _0x2555ff; _0x3989ba++) {
                  _0x35fea8(_0x93faad[_0x3989ba], _0x3a89fe, false);
                }
              }
              _0x3989ba = 0;
              _0x2555ff = _0x303caa.length;
              for (; _0x3989ba < _0x2555ff; _0x3989ba++) {
                var _0x23b0ce;
                var _0x37314d = _0x303caa[_0x3989ba];
                if (!(_0x37314d.nodeType !== 1 || /^defs$/i.test(_0x37314d.nodeName) || !(_0x23b0ce = _0x35fea8(_0x37314d, _0x3a89fe, false)) || _0x23b0ce instanceof _0x365352)) {
                  _0x326218.push(_0x23b0ce);
                }
              }
              _0x4b9358.addChildren(_0x326218);
              if (_0x240837) {
                _0x4b9358 = _0x449db3(_0x4b9358.reduce(), _0x53c899, _0x751d19);
              }
              _0x457a94._currentStyle = _0x35d976;
              if (_0x240837 || _0x486d76) {
                _0x4b9358.remove();
                _0x4b9358 = null;
              }
              return _0x4b9358;
            }
            function _0x15a638(_0x1c8628, _0x337838) {
              for (var _0x45f645 = _0x1c8628.getAttribute("points").match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g), _0x989713 = [], _0x3196e5 = 0, _0x374428 = _0x45f645.length; _0x3196e5 < _0x374428; _0x3196e5 += 2) {
                _0x989713.push(new _0xbc5c4a(parseFloat(_0x45f645[_0x3196e5]), parseFloat(_0x45f645[_0x3196e5 + 1])));
              }
              _0x1c8628 = new _0x5615aa(_0x989713);
              if (_0x337838 === "polygon") {
                _0x1c8628.closePath();
              }
              return _0x1c8628;
            }
            function _0x50ecd0(_0x8ab1be, _0x2679fd) {
              var _0x59d948;
              _0x2679fd = _0x2679fd === "radialgradient";
              if (_0x52b9de = (_0x5e3b14(_0x8ab1be, "href", true) || "").substring(1)) {
                if ((_0x59d948 = _0x11d463[_0x52b9de].getGradient())._radial ^ _0x2679fd) {
                  (_0x59d948 = _0x59d948.clone())._radial = _0x2679fd;
                }
              } else {
                for (var _0x424619 = _0x8ab1be.childNodes, _0x45faac = [], _0x5583ce = 0, _0x50ac96 = _0x424619.length; _0x5583ce < _0x50ac96; _0x5583ce++) {
                  var _0x333819 = _0x424619[_0x5583ce];
                  if (_0x333819.nodeType === 1) {
                    _0x45faac.push(_0x449db3(new _0x561d94(), _0x333819));
                  }
                }
                _0x59d948 = new _0x29bf91(_0x45faac, _0x2679fd);
              }
              var _0x479625;
              var _0x38a81f;
              var _0x1444bb;
              var _0x52b9de = _0x5e3b14(_0x8ab1be, "gradientUnits", true) !== "userSpaceOnUse";
              if (_0x2679fd) {
                _0x38a81f = (_0x479625 = _0x3a7244(_0x8ab1be, "cx", "cy", false, _0x52b9de, "50%", "50%")).add(_0x5e3b14(_0x8ab1be, "r", false, false, _0x52b9de, "50%"), 0);
                _0x1444bb = _0x3a7244(_0x8ab1be, "xf".split("").reverse().join(""), "fy", true, _0x52b9de);
              } else {
                _0x479625 = _0x3a7244(_0x8ab1be, "x1", "y1", false, _0x52b9de, "0%", "0%");
                _0x38a81f = _0x3a7244(_0x8ab1be, "x2", "y2", false, _0x52b9de, "100%", "0%");
              }
              _0x449db3(new _0x42fac4(_0x59d948, _0x479625, _0x38a81f, _0x1444bb), _0x8ab1be)._scaleToBounds = _0x52b9de;
              return null;
            }
            function _0x2443db(_0x406343, _0x55c414, _0x361f43, _0x144681) {
              if (_0x406343.transform) {
                for (var _0xd8fe86 = (_0x144681.getAttribute(_0x361f43) || "").split(/\)\s*/g), _0x29d11b = new _0x1a5a7c(), _0x2913f2 = 0, _0x4ad282 = _0xd8fe86.length; _0x2913f2 < _0x4ad282; _0x2913f2++) {
                  if (!(_0x1e42af = _0xd8fe86[_0x2913f2])) {
                    break;
                  }
                  for (var _0x465fe3 = _0x1e42af.split(/\(\s*/), _0x1e42af = _0x465fe3[0], _0x2dd21b = _0x465fe3[1].split(/[\s,]+/g), _0x2e7049 = 0, _0x1a5266 = _0x2dd21b.length; _0x2e7049 < _0x1a5266; _0x2e7049++) {
                    _0x2dd21b[_0x2e7049] = parseFloat(_0x2dd21b[_0x2e7049]);
                  }
                  switch (_0x1e42af) {
                    case "matrix":
                      _0x29d11b.append(new _0x1a5a7c(_0x2dd21b[0], _0x2dd21b[1], _0x2dd21b[2], _0x2dd21b[3], _0x2dd21b[4], _0x2dd21b[5]));
                      break;
                    case "rotate":
                      _0x29d11b.rotate(_0x2dd21b[0], _0x2dd21b[1] || 0, _0x2dd21b[2] || 0);
                      break;
                    case "translate":
                      _0x29d11b.translate(_0x2dd21b[0], _0x2dd21b[1] || 0);
                      break;
                    case "scale":
                      _0x29d11b.scale(_0x2dd21b);
                      break;
                    case "skewX":
                      _0x29d11b.skew(_0x2dd21b[0], 0);
                      break;
                    case "skewY":
                      _0x29d11b.skew(0, _0x2dd21b[0]);
                  }
                }
                _0x406343.transform(_0x29d11b);
              }
            }
            function _0x44bc6f(_0x4d50c1, _0x3c8229, _0x5d882f) {
              if (_0x5d882f = _0x4d50c1[_0x5d882f = _0x5d882f === "fill-opacity" ? "getFillColor" : "getStrokeColor"] && _0x4d50c1[_0x5d882f]()) {
                _0x5d882f.setAlpha(parseFloat(_0x3c8229));
              }
            }
            function _0x2e6e91(_0x3bfb8, _0x2f2f6e, _0x24a7c5) {
              var _0x6bdfbe;
              if (!(_0x6bdfbe = (_0x6bdfbe = _0x3bfb8.attributes[_0x2f2f6e]) && _0x6bdfbe.value) && _0x3bfb8.style) {
                _0x2f2f6e = _0x28b48a.camelize(_0x2f2f6e);
                if (!((_0x6bdfbe = _0x3bfb8.style[_0x2f2f6e]) || _0x24a7c5.node[_0x2f2f6e] === _0x24a7c5.parent[_0x2f2f6e])) {
                  _0x6bdfbe = _0x24a7c5.node[_0x2f2f6e];
                }
              }
              if (_0x6bdfbe) {
                if (_0x6bdfbe === "none") {
                  return null;
                } else {
                  return _0x6bdfbe;
                }
              } else {
                return _0x2bd7be;
              }
            }
            function _0x449db3(_0x1af6be, _0xe2d332, _0x59766e) {
              var _0x1a7d94 = _0xe2d332.parentNode;
              var _0x5ec2f6 = {
                node: _0x3c5bb5.getStyles(_0xe2d332) || {},
                parent: !_0x59766e && !/^defs$/i.test(_0x1a7d94.tagName) && _0x3c5bb5.getStyles(_0x1a7d94) || {}
              };
              _0x28b48a.each(_0x372c45, function (_0x4747e3, _0x274060) {
                var _0x4df347 = _0x2e6e91(_0xe2d332, _0x274060, _0x5ec2f6);
                _0x1af6be = _0x4df347 !== _0x2bd7be && _0x4747e3(_0x1af6be, _0x4df347, _0x274060, _0xe2d332, _0x5ec2f6) || _0x1af6be;
              });
              return _0x1af6be;
            }
            function _0x23b9db(_0x4adcf7) {
              if ((_0x4adcf7 = (_0x4adcf7 = (_0x4adcf7 = _0x4adcf7 && _0x4adcf7.match(/\((?:["'#]*)([^"')]+)/)) && _0x4adcf7[1]) && _0x11d463[_0x21c198 ? _0x4adcf7.replace(_0x21c198.location.href.split("#")[0] + "#", "") : _0x4adcf7]) && _0x4adcf7._scaleToBounds) {
                (_0x4adcf7 = _0x4adcf7.clone())._scaleToBounds = true;
              }
              return _0x4adcf7;
            }
            function _0x35fea8(_0x5db165, _0x171f1d, _0x447ca7) {
              var _0x116e55;
              var _0x21ad9d;
              var _0x516137;
              var _0x273525 = (_0x1d6dc6 = _0x5db165.nodeName.toLowerCase()) !== "#document";
              var _0x462dcd = _0x13c74c.body;
              if (_0x447ca7 && _0x273525) {
                _0x4c1433 = _0x36d317.getView().getSize();
                _0x4c1433 = _0x38ec32(_0x5db165, null, null, true) || _0x4c1433;
                _0x116e55 = _0x36be01.create("svg", {
                  style: "stroke-width: 1px; stroke-miterlimit: 10"
                });
                _0x21ad9d = _0x5db165.parentNode;
                _0x516137 = _0x5db165.nextSibling;
                _0x116e55.appendChild(_0x5db165);
                _0x462dcd.appendChild(_0x116e55);
              }
              var _0x1d0a25 = _0x36d317.settings;
              var _0x42fde7 = _0x1d0a25.applyMatrix;
              var _0x12becd = _0x1d0a25.insertItems;
              _0x1d0a25.applyMatrix = false;
              _0x1d0a25.insertItems = false;
              var _0x12d02d = _0xf8f5cc[_0x1d6dc6];
              var _0x1d6dc6 = _0x12d02d && _0x12d02d(_0x5db165, _0x1d6dc6, _0x171f1d, _0x447ca7) || null;
              _0x1d0a25.insertItems = _0x12becd;
              _0x1d0a25.applyMatrix = _0x42fde7;
              if (_0x1d6dc6) {
                if (!(!_0x273525 || _0x1d6dc6 instanceof _0x46c1f5)) {
                  _0x1d6dc6 = _0x449db3(_0x1d6dc6, _0x5db165, _0x447ca7);
                }
                _0x1d0a25 = _0x171f1d.onImport;
                _0x273525 = _0x273525 && _0x5db165.getAttribute("data-paper-data");
                if (_0x1d0a25) {
                  _0x1d6dc6 = _0x1d0a25(_0x5db165, _0x1d6dc6, _0x171f1d) || _0x1d6dc6;
                }
                if (_0x171f1d.expandShapes && _0x1d6dc6 instanceof _0xa8e5b4) {
                  _0x1d6dc6.remove();
                  _0x1d6dc6 = _0x1d6dc6.toPath();
                }
                if (_0x273525) {
                  _0x1d6dc6._data = JSON.parse(_0x273525);
                }
              }
              if (_0x116e55) {
                _0x462dcd.removeChild(_0x116e55);
                if (_0x21ad9d) {
                  if (_0x516137) {
                    _0x21ad9d.insertBefore(_0x5db165, _0x516137);
                  } else {
                    _0x21ad9d.appendChild(_0x5db165);
                  }
                }
              }
              if (_0x447ca7) {
                _0x11d463 = {};
                if (_0x1d6dc6 && _0x28b48a.pick(_0x171f1d.applyMatrix, _0x42fde7)) {
                  _0x1d6dc6.matrix.apply(true, true);
                }
              }
              return _0x1d6dc6;
            }
            function _0x2c5df2(_0x589881, _0x20361a, _0xa1f388) {
              if (!_0x589881) {
                return null;
              }
              _0x20361a = typeof _0x20361a == "function" ? {
                onLoad: _0x20361a
              } : _0x20361a || {};
              var _0x28287b = _0x36d317;
              var _0xf3c98 = null;
              function _0x5564c4(_0x39c610) {
                try {
                  var _0x18f182 = typeof _0x39c610 == "object" ? _0x39c610 : new _0x536850.DOMParser().parseFromString(_0x39c610.trim(), "image/svg+xml");
                  if (!_0x18f182.nodeName) {
                    _0x18f182 = null;
                    throw new Error(".......");
                  }
                  _0x36d317 = _0x28287b;
                  _0xf3c98 = _0x35fea8(_0x18f182, _0x20361a, true);
                  if (!(_0x20361a && _0x20361a.insert === false)) {
                    _0xa1f388._insertItem(_0x2bd7be, _0xf3c98);
                  }
                  var _0x25ade7 = _0x20361a.onLoad;
                  if (_0x25ade7) {
                    _0x25ade7(_0xf3c98, _0x39c610);
                  }
                } catch (_0x47252b) {
                  _0x22167e(_0x47252b);
                }
              }
              function _0x22167e(_0x47e218, _0x28406a) {
                var _0x2e32e8 = _0x20361a.onError;
                if (!_0x2e32e8) {
                  throw new Error(_0x47e218);
                }
                _0x2e32e8(_0x47e218, _0x28406a);
              }
              if (typeof _0x589881 != "string" || /^[\s\S]*</.test(_0x589881)) {
                if (typeof File != "undefined" && _0x589881 instanceof File) {
                  var _0x1e8ab7 = new FileReader();
                  _0x1e8ab7.onload = function () {
                    _0x5564c4(_0x1e8ab7.result);
                  };
                  _0x1e8ab7.onerror = function () {
                    _0x22167e(_0x1e8ab7.error);
                  };
                  return _0x1e8ab7.readAsText(_0x589881);
                }
                _0x5564c4(_0x589881);
              } else {
                var _0x58be66 = _0x13c74c.getElementById(_0x589881);
                if (_0x58be66) {
                  _0x5564c4(_0x58be66);
                } else {
                  _0xa75163({
                    url: _0x589881,
                    async: true,
                    onLoad: _0x5564c4,
                    onError: _0x22167e
                  });
                }
              }
              return _0xf3c98;
            }
            _0xe8482b = {
              Group: _0x36c04e,
              Layer: _0x36c04e,
              Raster: function (_0x47413a, _0x5b241f) {
                var _0x552f28 = _0x463570(_0x47413a._matrix, true);
                var _0x5bff48 = _0x47413a.getSize();
                var _0x1ce952 = _0x47413a.getImage();
                _0x552f28.x -= _0x5bff48.width / 2;
                _0x552f28.y -= _0x5bff48.height / 2;
                _0x552f28.width = _0x5bff48.width;
                _0x552f28.height = _0x5bff48.height;
                _0x552f28.href = _0x5b241f.embedImages == 0 && _0x1ce952 && _0x1ce952.src || _0x47413a.toDataURL("image/png", 0.7);
                return _0x36be01.create("image", _0x552f28, _0x840a73);
              },
              Path: function (_0x268861, _0xb0e73b) {
                var _0x2a5a76 = _0xb0e73b.matchShapes;
                if (_0x2a5a76) {
                  var _0x4aca95 = _0x268861.toShape(false);
                  if (_0x4aca95) {
                    return _0x25b32c(_0x4aca95);
                  }
                }
                var _0x4af228 = _0x268861._segments;
                var _0xca2a93 = _0x4af228.length;
                var _0x1e46bc = _0x463570(_0x268861._matrix);
                if (_0x2a5a76 && _0xca2a93 >= 2 && !_0x268861.hasHandles()) {
                  if (_0xca2a93 > 2) {
                    for (var _0x316270 = _0x268861._closed ? "polygon" : "polyline", _0xaa4747 = [], _0x53e6d6 = 0; _0x53e6d6 < _0xca2a93; _0x53e6d6++) {
                      _0xaa4747.push(_0x840a73.point(_0x4af228[_0x53e6d6]._point));
                    }
                    _0x1e46bc.points = _0xaa4747.join(" ");
                  } else {
                    _0x316270 = "line";
                    _0x4aca95 = _0x4af228[0]._point;
                    _0x2a5a76 = _0x4af228[1]._point;
                    _0x1e46bc.set({
                      x1: _0x4aca95.x,
                      y1: _0x4aca95.y,
                      x2: _0x2a5a76.x,
                      y2: _0x2a5a76.y
                    });
                  }
                } else {
                  _0x316270 = "path";
                  _0x1e46bc.d = _0x268861.getPathData(null, _0xb0e73b.precision);
                }
                return _0x36be01.create(_0x316270, _0x1e46bc, _0x840a73);
              },
              Shape: _0x25b32c,
              CompoundPath: function (_0x996913, _0xcbdd7d) {
                var _0x119704 = _0x463570(_0x996913._matrix);
                if (_0xcbdd7d = _0x996913.getPathData(null, _0xcbdd7d.precision)) {
                  _0x119704.d = _0xcbdd7d;
                }
                return _0x36be01.create("path", _0x119704, _0x840a73);
              },
              SymbolItem: function (_0xb9dec0, _0x23e913) {
                var _0x18131b = _0x463570(_0xb9dec0._matrix, true);
                var _0x1eab49 = _0xb9dec0._definition;
                var _0x2fa68b = _0x2d51f9(_0x1eab49, "symbol");
                var _0x527820 = _0x1eab49._item;
                _0xb9dec0 = _0x527820.getStrokeBounds();
                if (!_0x2fa68b) {
                  (_0x2fa68b = _0x36be01.create("symbol", {
                    viewBox: _0x840a73.rectangle(_0xb9dec0)
                  })).appendChild(_0x63b91b(_0x527820, _0x23e913));
                  _0x3fbbe6(_0x1eab49, _0x2fa68b, "symbol");
                }
                _0x18131b.href = "#" + _0x2fa68b.id;
                _0x18131b.x += _0xb9dec0.x;
                _0x18131b.y += _0xb9dec0.y;
                _0x18131b.width = _0xb9dec0.width;
                _0x18131b.height = _0xb9dec0.height;
                _0x18131b.overflow = "visible";
                return _0x36be01.create("use", _0x18131b, _0x840a73);
              },
              PointText: function (_0x1a9917) {
                var _0x54fb52 = _0x36be01.create("text", _0x463570(_0x1a9917._matrix, true), _0x840a73);
                _0x54fb52.textContent = _0x1a9917._content;
                return _0x54fb52;
              }
            };
            _0x1f30bb.inject({
              exportSVG: function (_0x280d2d) {
                return _0x8c5c3a(_0x63b91b(this, _0x280d2d = _0x37f539(_0x280d2d), true), _0x280d2d);
              }
            });
            _0x25cf80.inject({
              exportSVG: function (_0x4119a7) {
                _0x4119a7 = _0x37f539(_0x4119a7);
                var _0x262db4 = this._children;
                var _0x5ae59e = this.getView();
                var _0x5c3d54 = _0x28b48a.pick(_0x4119a7.bounds, "view");
                var _0x4774c4 = (_0x4774c4 = _0x4119a7.matrix || _0x5c3d54 === "view" && _0x5ae59e._matrix) && _0x1a5a7c.read([_0x4774c4]);
                _0x5ae59e = _0x5c3d54 === "view" ? new _0x5384ce([0, 0], _0x5ae59e.getViewSize()) : _0x5c3d54 === "content" ? _0x1f30bb._getBounds(_0x262db4, _0x4774c4, {
                  stroke: true
                }).rect : _0x5384ce.read([_0x5c3d54], 0, {
                  readNull: true
                });
                _0x5c3d54 = {
                  version: "1.1",
                  xmlns: _0x36be01.svg,
                  "xmlns:xlink": _0x36be01.xlink
                };
                if (_0x5ae59e) {
                  _0x5c3d54.width = _0x5ae59e.width;
                  _0x5c3d54.height = _0x5ae59e.height;
                  if (_0x5ae59e.x || _0x5ae59e.x === 0 || _0x5ae59e.y || _0x5ae59e.y === 0) {
                    _0x5c3d54.viewBox = _0x840a73.rectangle(_0x5ae59e);
                  }
                }
                var _0x2aca40 = _0x5c3d54 = _0x36be01.create("svg", _0x5c3d54, _0x840a73);
                if (_0x4774c4 && !_0x4774c4.isIdentity()) {
                  _0x2aca40 = _0x5c3d54.appendChild(_0x36be01.create("g", _0x463570(_0x4774c4), _0x840a73));
                }
                for (var _0x2188db = 0, _0x4378e8 = _0x262db4.length; _0x2188db < _0x4378e8; _0x2188db++) {
                  _0x2aca40.appendChild(_0x63b91b(_0x262db4[_0x2188db], _0x4119a7, true));
                }
                return _0x8c5c3a(_0x5c3d54, _0x4119a7);
              }
            });
            _0x11d463 = {};
            _0xf8f5cc = {
              "#document": function (_0x63db99, _0x4ed5a0, _0x1d3d7c, _0x4baa1e) {
                for (var _0x20589d = _0x63db99.childNodes, _0x12bc4f = 0, _0x4eace2 = _0x20589d.length; _0x12bc4f < _0x4eace2; _0x12bc4f++) {
                  var _0x4b03b8 = _0x20589d[_0x12bc4f];
                  if (_0x4b03b8.nodeType === 1) {
                    return _0x35fea8(_0x4b03b8, _0x1d3d7c, _0x4baa1e);
                  }
                }
              },
              g: _0x440018,
              svg: _0x440018,
              clippath: _0x440018,
              polygon: _0x15a638,
              polyline: _0x15a638,
              path: function (_0x1f127b) {
                return _0xfff515.create(_0x1f127b.getAttribute("d"));
              },
              lineargradient: _0x50ecd0,
              radialgradient: _0x50ecd0,
              image: function (_0x939e6a) {
                var _0x50a16b = new _0x10b4fc(_0x5e3b14(_0x939e6a, "href", true));
                _0x50a16b.on("load", function () {
                  var _0x222cd8 = _0x38ec32(_0x939e6a);
                  this.setSize(_0x222cd8);
                  _0x222cd8 = _0x3a7244(_0x939e6a).add(_0x222cd8.divide(2));
                  this._matrix.append(new _0x1a5a7c().translate(_0x222cd8));
                });
                return _0x50a16b;
              },
              symbol: function (_0x16277e, _0x17ff48, _0x41cc38, _0x490dc8) {
                return new _0x365352(_0x440018(_0x16277e, _0x17ff48, _0x41cc38, _0x490dc8), true);
              },
              defs: _0x440018,
              use: function (_0x172a48) {
                var _0x50b9dc = (_0x5e3b14(_0x172a48, "href", true) || "").substring(1);
                _0x50b9dc = _0x11d463[_0x50b9dc];
                _0x172a48 = _0x3a7244(_0x172a48);
                if (_0x50b9dc) {
                  if (_0x50b9dc instanceof _0x365352) {
                    return _0x50b9dc.place(_0x172a48);
                  } else {
                    return _0x50b9dc.clone().translate(_0x172a48);
                  }
                } else {
                  return null;
                }
              },
              circle: function (_0x2a2908) {
                return new _0xa8e5b4.Circle(_0x3a7244(_0x2a2908, "cx", "cy"), _0x5e3b14(_0x2a2908, "r"));
              },
              ellipse: function (_0x59bcaa) {
                return new _0xa8e5b4.Ellipse({
                  center: _0x3a7244(_0x59bcaa, "cx", "cy"),
                  radius: _0x38ec32(_0x59bcaa, "rx", "ry")
                });
              },
              rect: function (_0x548d55) {
                return new _0xa8e5b4.Rectangle(new _0x5384ce(_0x3a7244(_0x548d55), _0x38ec32(_0x548d55)), _0x38ec32(_0x548d55, "rx", "ry"));
              },
              line: function (_0x3dee45) {
                return new _0x5615aa.Line(_0x3a7244(_0x3dee45, "x1", "y1"), _0x3a7244(_0x3dee45, "x2", "y2"));
              },
              text: function (_0x15d529) {
                var _0x57d69a = new _0x34fe3b(_0x3a7244(_0x15d529).add(_0x3a7244(_0x15d529, "dx", "dy")));
                _0x57d69a.setContent(_0x15d529.textContent.trim() || "");
                return _0x57d69a;
              },
              switch: _0x440018
            };
            _0x372c45 = _0x28b48a.set(_0x28b48a.each(_0x444e30, function (_0x36cb17) {
              this[_0x36cb17.attribute] = function (_0x4d03ed, _0x4469b3) {
                if (_0x4d03ed[_0x36cb17.set]) {
                  _0x4d03ed[_0x36cb17.set](_0x1e53d6(_0x4469b3, _0x36cb17.type, _0x36cb17.fromSVG));
                  if (!(_0x36cb17.type !== "color")) {
                    if ((_0x4469b3 = _0x4d03ed[_0x36cb17.get]()) && _0x4469b3._scaleToBounds) {
                      _0x4d03ed = _0x4d03ed.getBounds();
                      _0x4469b3.transform(new _0x1a5a7c().translate(_0x4d03ed.getPoint()).scale(_0x4d03ed.getSize()));
                    }
                  }
                }
              };
            }, {}), {
              id: function (_0x2f2485, _0x335488) {
                if ((_0x11d463[_0x335488] = _0x2f2485).setName) {
                  _0x2f2485.setName(_0x335488);
                }
              },
              "clip-path": function (_0x33acd4, _0x18b467) {
                if (_0x18b467 = _0x23b9db(_0x18b467)) {
                  (_0x18b467 = _0x18b467.clone()).setClipMask(true);
                  if (!(_0x33acd4 instanceof _0x46c1f5)) {
                    return new _0x46c1f5(_0x18b467, _0x33acd4);
                  }
                  _0x33acd4.insertChild(0, _0x18b467);
                }
              },
              gradientTransform: _0x2443db,
              transform: _0x2443db,
              "fill-opacity": _0x44bc6f,
              "stroke-opacity": _0x44bc6f,
              visibility: function (_0x3b23ed, _0x565935) {
                if (_0x3b23ed.setVisible) {
                  _0x3b23ed.setVisible(_0x565935 === "visible");
                }
              },
              display: function (_0xf6df0a, _0x4b5e10) {
                if (_0xf6df0a.setVisible) {
                  _0xf6df0a.setVisible(_0x4b5e10 !== null);
                }
              },
              "stop-color": function (_0x18a0d7, _0x3995a4) {
                if (_0x18a0d7.setColor) {
                  _0x18a0d7.setColor(_0x3995a4);
                }
              },
              "stop-opacity": function (_0x5620a5, _0x2c762a) {
                if (_0x5620a5._color) {
                  _0x5620a5._color.setAlpha(parseFloat(_0x2c762a));
                }
              },
              offset: function (_0xaac910, _0x25106a) {
                var _0x4de170;
                if (_0xaac910.setOffset) {
                  _0x4de170 = _0x25106a.match(/(.*)%$/);
                  _0xaac910.setOffset(_0x4de170 ? _0x4de170[1] / 100 : parseFloat(_0x25106a));
                }
              },
              viewBox: function (_0x175840, _0x4f25a5, _0x9067c3, _0x2742c9, _0x595159) {
                var _0x2b2a02;
                var _0x2ead57;
                var _0x6781c3 = new _0x5384ce(_0x1e53d6(_0x4f25a5, "array"));
                _0x4f25a5 = _0x38ec32(_0x2742c9, null, null, true);
                if (_0x175840 instanceof _0x46c1f5) {
                  _0x2ead57 = _0x4f25a5 ? _0x4f25a5.divide(_0x6781c3.getSize()) : 1;
                  _0x2b2a02 = new _0x1a5a7c().scale(_0x2ead57).translate(_0x6781c3.getPoint().negate());
                  _0x2ead57 = _0x175840;
                } else if (_0x175840 instanceof _0x365352) {
                  if (_0x4f25a5) {
                    _0x6781c3.setSize(_0x4f25a5);
                  }
                  _0x2ead57 = _0x175840._item;
                }
                if (_0x2ead57) {
                  if (_0x2e6e91(_0x2742c9, "overflow", _0x595159) !== "visible") {
                    (_0x6781c3 = new _0xa8e5b4.Rectangle(_0x6781c3)).setClipMask(true);
                    _0x2ead57.addChild(_0x6781c3);
                  }
                  if (_0x2b2a02) {
                    _0x2ead57.transform(_0x2b2a02);
                  }
                }
              }
            });
            _0x1f30bb.inject({
              importSVG: function (_0x21318b, _0x34b72d) {
                return _0x2c5df2(_0x21318b, _0x34b72d, this);
              }
            });
            _0x25cf80.inject({
              importSVG: function (_0x4040af, _0x1ee77b) {
                this.activate();
                return _0x2c5df2(_0x4040af, _0x1ee77b, this);
              }
            });
            _0x28b48a.exports.PaperScript = function () {
              var _0x382f4a;
              var _0x1f80e6;
              var _0x1dc974 = this;
              var _0x195b2b = _0x1dc974.acorn;
              if (!_0x195b2b) {
                try {
                  _0x195b2b = _0x80d65b(1234);
                } catch (_0x28df75) {}
              }
              function _0x3859fb(_0x545a9b, _0x3a5ba8) {
                return (_0x1dc974.acorn || _0x195b2b).parse(_0x545a9b, _0x3a5ba8);
              }
              if (!_0x195b2b) {
                _0x195b2b = _0x382f4a = _0x3fb968 = {};
                _0x1f80e6 = function (_0x2b1fc6) {
                  'got it';
  
                  var _0x256c65;
                  var _0x478a20;
                  var _0x112381;
                  var _0x114dd3;
                  _0x2b1fc6.version = "0.5.0";
                  _0x2b1fc6.parse = function (_0x440d82, _0x43f866) {
                    _0x478a20 = String(_0x440d82);
                    _0x112381 = _0x478a20.length;
                    _0x22cc8c(_0x43f866);
                    _0x525851();
                    return function (_0x6f8b1e) {
                      _0x3a7a04 = _0x44fc58 = _0x566220;
                      if (_0x256c65.locations) {
                        _0x560e36 = new _0x1290cd();
                      }
                      _0x18496b = _0x50d7bb = null;
                      _0x3b8c98 = [];
                      _0x3a38c4();
                      var _0x2f7e84 = _0x6f8b1e || _0x4687ab();
                      var _0x4e399b = true;
                      for (_0x6f8b1e || (_0x2f7e84.body = []); _0x5c5cff !== _0x53daa7;) {
                        var _0x46e1eb = _0x3e4d61();
                        _0x2f7e84.body.push(_0x46e1eb);
                        if (_0x4e399b && _0x430102(_0x46e1eb)) {
                          _0x54c4a3(true);
                        }
                        _0x4e399b = false;
                      }
                      return _0x4a5719(_0x2f7e84, "Program");
                    }(_0x256c65.program);
                  };
                  var _0x16f3df = _0x2b1fc6.defaultOptions = {
                    ecmaVersion: 5,
                    strictSemicolons: false,
                    allowTrailingCommas: true,
                    forbidReserved: false,
                    allowReturnOutsideFunction: false,
                    locations: false,
                    onComment: null,
                    ranges: false,
                    program: null,
                    sourceFile: null,
                    directSourceFile: null
                  };
                  function _0x22cc8c(_0x23dd5f) {
                    _0x256c65 = _0x23dd5f || {};
                    for (var _0x52c2a6 in _0x16f3df) {
                      if (!Object.prototype.hasOwnProperty.call(_0x256c65, _0x52c2a6)) {
                        _0x256c65[_0x52c2a6] = _0x16f3df[_0x52c2a6];
                      }
                    }
                    _0x114dd3 = _0x256c65.sourceFile || null;
                  }
                  var _0x566220;
                  var _0x3d0028;
                  var _0x311571;
                  var _0x549c9e;
                  var _0x524fe5;
                  var _0x5c5cff;
                  var _0x17c4f1;
                  var _0x49fd7a;
                  var _0x242314;
                  var _0x180085;
                  var _0x3a7a04;
                  var _0x44fc58;
                  var _0x560e36;
                  var _0x18496b;
                  var _0x3b8c98;
                  var _0x50d7bb;
                  var _0xdfda08 = _0x2b1fc6.getLineInfo = function (_0x4bb568, _0x5ce153) {
                    var _0x4fbfd8 = 1;
                    var _0x1dfc41 = 0;
                    for (;;) {
                      _0x20073b.lastIndex = _0x1dfc41;
                      var _0x18f97c = _0x20073b.exec(_0x4bb568);
                      if (!(_0x18f97c && _0x18f97c.index < _0x5ce153)) {
                        break;
                      }
                      ++_0x4fbfd8;
                      _0x1dfc41 = _0x18f97c.index + _0x18f97c[0].length;
                    }
                    return {
                      line: _0x4fbfd8,
                      column: _0x5ce153 - _0x1dfc41
                    };
                  };
                  function _0x16180d(_0x181db2, _0x3abe6e) {
                    var _0x3b1113 = _0xdfda08(_0x478a20, _0x181db2);
                    _0x3abe6e += " (" + _0x3b1113.line + ":" + _0x3b1113.column + ")";
                    (_0x3abe6e = new SyntaxError(_0x3abe6e)).pos = _0x181db2;
                    _0x3abe6e.loc = _0x3b1113;
                    _0x3abe6e.raisedAt = _0x566220;
                    throw _0x3abe6e;
                  }
                  _0x2b1fc6.tokenize = function (_0x46353c, _0x24943a) {
                    _0x478a20 = String(_0x46353c);
                    _0x112381 = _0x478a20.length;
                    _0x22cc8c(_0x24943a);
                    _0x525851();
                    var _0xb21093 = {};
                    function _0x350fa3(_0x4753c5) {
                      _0x44fc58 = _0x311571;
                      _0x3a38c4(_0x4753c5);
                      _0xb21093.start = _0x3d0028;
                      _0xb21093.end = _0x311571;
                      _0xb21093.startLoc = _0x549c9e;
                      _0xb21093.endLoc = _0x524fe5;
                      _0xb21093.type = _0x5c5cff;
                      _0xb21093.value = _0x17c4f1;
                      return _0xb21093;
                    }
                    _0x350fa3.jumpTo = function (_0x53c84b, _0x5e7903) {
                      var _0x203d4d;
                      _0x566220 = _0x53c84b;
                      if (_0x256c65.locations) {
                        _0x242314 = 1;
                        _0x180085 = _0x20073b.lastIndex = 0;
                        _0x242314 = 1;
                        _0x180085 = _0x20073b.lastIndex = 0;
                        for (; (_0x203d4d = _0x20073b.exec(_0x478a20)) && _0x203d4d.index < _0x53c84b;) {
                          ++_0x242314;
                          _0x180085 = _0x203d4d.index + _0x203d4d[0].length;
                        }
                      }
                      _0x49fd7a = _0x5e7903;
                      _0x155d18();
                    };
                    return _0x350fa3;
                  };
                  var _0x48754a;
                  var _0x25bedd = [];
                  var _0x1c5f36 = {
                    type: "num"
                  };
                  var _0x558beb = {
                    type: "regexp"
                  };
                  var _0x363cb6 = {
                    type: "string"
                  };
                  var _0x33c692 = {
                    type: "name"
                  };
                  var _0x53daa7 = {
                    type: "eof"
                  };
                  var _0x2c27a = {
                    keyword: "break"
                  };
                  var _0x555542 = {
                    keyword: "case",
                    beforeExpr: true
                  };
                  var _0x47de5c = {
                    keyword: "catch"
                  };
                  var _0x2b1009 = {
                    keyword: "continue"
                  };
                  // TOLOOK
                  var _0x4eb068 = {
                    keyword: "debugger"
                  };
                  var _0x2f0c06 = {
                    keyword: "default"
                  };
                  var _0x54b260 = {
                    keyword: "do",
                    isLoop: true
                  };
                  var _0x1f163d = {
                    keyword: "else",
                    beforeExpr: true
                  };
                  var _0x533695 = {
                    keyword: "finally"
                  };
                  var _0x9a6dfe = {
                    keyword: "for",
                    isLoop: true
                  };
                  var _0x1ad961 = {
                    keyword: "function"
                  };
                  var _0x2e7714 = {
                    keyword: "if"
                  };
                  var _0x23663f = {
                    keyword: "return",
                    beforeExpr: true
                  };
                  var _0x38dc12 = {
                    keyword: "switch"
                  };
                  var _0x8bbec6 = {
                    keyword: "throw",
                    beforeExpr: true
                  };
                  var _0x52b5e0 = {
                    keyword: "try"
                  };
                  var _0x2ce191 = {
                    keyword: "var"
                  };
                  var _0x21e1e4 = {
                    keyword: "while",
                    isLoop: true
                  };
                  var _0x39a567 = {
                    keyword: "with"
                  };
                  var _0x2427de = {
                    keyword: "new",
                    beforeExpr: true
                  };
                  var _0x505af8 = {
                    keyword: "this"
                  };
                  var _0x1bf89c = {
                    keyword: "null",
                    atomValue: null
                  };
                  var _0x4940bf = {
                    keyword: "true",
                    atomValue: true
                  };
                  var _0x1e0997 = {
                    keyword: "false",
                    atomValue: false
                  };
                  var _0x1f8abd = {
                    keyword: "in",
                    binop: 7,
                    beforeExpr: true
                  };
                  // TOLOOK
                  var _0x9d7e7a = {
                    break: _0x2c27a,
                    case: _0x555542,
                    catch: _0x47de5c,
                    continue: _0x2b1009,
                    debugger: _0x4eb068,
                    default: _0x2f0c06,
                    do: _0x54b260,
                    else: _0x1f163d,
                    finally: _0x533695,
                    for: _0x9a6dfe,
                    function: _0x1ad961,
                    if: _0x2e7714,
                    return: _0x23663f,
                    switch: _0x38dc12,
                    throw: _0x8bbec6,
                    try: _0x52b5e0,
                    var: _0x2ce191,
                    while: _0x21e1e4,
                    with: _0x39a567,
                    null: _0x1bf89c,
                    true: _0x4940bf,
                    false: _0x1e0997,
                    new: _0x2427de,
                    in: _0x1f8abd,
                    instanceof: {
                      keyword: "instanceof",
                      binop: 7,
                      beforeExpr: true
                    },
                    this: _0x505af8,
                    typeof: {
                      keyword: "typeof",
                      prefix: true,
                      beforeExpr: true
                    },
                    void: {
                      keyword: "void",
                      prefix: true,
                      beforeExpr: true
                    },
                    delete: {
                      keyword: "delete",
                      prefix: true,
                      beforeExpr: true
                    }
                  };
                  var _0x4993e2 = {
                    type: "[",
                    beforeExpr: true
                  };
                  var _0x246e18 = {
                    type: "]"
                  };
                  var _0x3823ce = {
                    type: "{",
                    beforeExpr: true
                  };
                  var _0x278f35 = {
                    type: "}"
                  };
                  var _0x270152 = {
                    type: "(",
                    beforeExpr: true
                  };
                  var _0x3fd6ac = {
                    type: ")"
                  };
                  var _0x54f23b = {
                    type: ",",
                    beforeExpr: true
                  };
                  var _0x1d2eb4 = {
                    type: ";",
                    beforeExpr: true
                  };
                  var _0x1c2150 = {
                    type: ":",
                    beforeExpr: true
                  };
                  var _0x301d84 = {
                    type: "."
                  };
                  var _0x19dfc2 = {
                    type: "?",
                    beforeExpr: true
                  };
                  var _0xde8d24 = {
                    binop: 10,
                    beforeExpr: true
                  };
                  var _0x1918b3 = {
                    isAssign: true,
                    beforeExpr: true
                  };
                  var _0x5e7707 = {
                    isAssign: true,
                    beforeExpr: true
                  };
                  var _0x536899 = {
                    postfix: true,
                    prefix: true,
                    isUpdate: true
                  };
                  var _0x11ccdc = {
                    prefix: true,
                    beforeExpr: true
                  };
                  var _0x2f6a49 = {
                    binop: 1,
                    beforeExpr: true
                  };
                  var _0x24d4a7 = {
                    binop: 2,
                    beforeExpr: true
                  };
                  var _0x50aa13 = {
                    binop: 3,
                    beforeExpr: true
                  };
                  var _0x43fb53 = {
                    binop: 4,
                    beforeExpr: true
                  };
                  var _0x221109 = {
                    binop: 5,
                    beforeExpr: true
                  };
                  var _0x174805 = {
                    binop: 6,
                    beforeExpr: true
                  };
                  var _0x34923b = {
                    binop: 7,
                    beforeExpr: true
                  };
                  var _0x8cfb3e = {
                    binop: 8,
                    beforeExpr: true
                  };
                  var _0x53f676 = {
                    binop: 9,
                    prefix: true,
                    beforeExpr: true
                  };
                  var _0x4e2792 = {
                    binop: 10,
                    beforeExpr: true
                  };
                  _0x2b1fc6.tokTypes = {
                    bracketL: _0x4993e2,
                    bracketR: _0x246e18,
                    braceL: _0x3823ce,
                    braceR: _0x278f35,
                    parenL: _0x270152,
                    parenR: _0x3fd6ac,
                    comma: _0x54f23b,
                    semi: _0x1d2eb4,
                    colon: _0x1c2150,
                    dot: _0x301d84,
                    question: _0x19dfc2,
                    slash: _0xde8d24,
                    eq: _0x1918b3,
                    name: _0x33c692,
                    eof: _0x53daa7,
                    num: _0x1c5f36,
                    regexp: _0x558beb,
                    string: _0x363cb6
                  };
                  for (_0x48754a in _0x9d7e7a) {
                    _0x2b1fc6.tokTypes["_" + _0x48754a] = _0x9d7e7a[_0x48754a];
                  }
                  function _0x129dc0(_0x159f3e) {
                    _0x159f3e = _0x159f3e.split(" ");
                    var _0x2a44c5 = "";
                    var _0x482bdb = [];
                    _0x158ec8: for (var _0x35302d = 0; _0x35302d < _0x159f3e.length; ++_0x35302d) {
                      for (var _0x16ec36 = 0; _0x16ec36 < _0x482bdb.length; ++_0x16ec36) {
                        if (_0x482bdb[_0x16ec36][0].length == _0x159f3e[_0x35302d].length) {
                          _0x482bdb[_0x16ec36].push(_0x159f3e[_0x35302d]);
                          continue _0x158ec8;
                        }
                      }
                      _0x482bdb.push([_0x159f3e[_0x35302d]]);
                    }
                    function _0x3d1a0d(_0x513aba) {
                      if (_0x513aba.length == 1) {
                        return _0x2a44c5 += "return str === " + JSON.stringify(_0x513aba[0]) + ";";
                      }
                      _0x2a44c5 += "switch(str){";
                      for (var _0x164bb1 = 0; _0x164bb1 < _0x513aba.length; ++_0x164bb1) {
                        _0x2a44c5 += "case " + JSON.stringify(_0x513aba[_0x164bb1]) + ":";
                      }
                      _0x2a44c5 += "return true}return false;";
                    }
                    if (_0x482bdb.length > 3) {
                      _0x482bdb.sort(function (_0x56fd71, _0x36d989) {
                        return _0x36d989.length - _0x56fd71.length;
                      });
                      _0x2a44c5 += "switch(str.length){";
                      _0x35302d = 0;
                      for (; _0x35302d < _0x482bdb.length; ++_0x35302d) {
                        var _0x291750 = _0x482bdb[_0x35302d];
                        _0x2a44c5 += "case " + _0x291750[0].length + ":";
                        _0x3d1a0d(_0x291750);
                      }
                      _0x2a44c5 += "}";
                    } else {
                      _0x3d1a0d(_0x159f3e);
                    }
                    return new Function("str", _0x2a44c5);
                  }
                  var _0x167300;
                  var _0x4b8159 = _0x129dc0("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile");
                  var _0x527029 = _0x129dc0("class enum extends super const export import");
                  var _0x262956 = _0x129dc0("implements interface let package private protected public static yield");
                  var _0x22bb66 = _0x129dc0("eval arguments");
                  var _0x3d394a = _0x129dc0("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this");
                  var _0x5f36e9 = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
                  var _0x6f01a6 = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
                  var _0x5d749e = new RegExp("[" + _0x6f01a6 + "]");
                  var _0x269dcc = new RegExp("[" + _0x6f01a6 + "̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]");
                  var _0x516863 = /[\n\r\u2028\u2029]/;
                  var _0x20073b = /\r\n|[\n\r\u2028\u2029]/g;
                  var _0x58ada3 = _0x2b1fc6.isIdentifierStart = function (_0x215cff) {
                    if (_0x215cff < 65) {
                      return _0x215cff === 36;
                    } else {
                      return _0x215cff < 91 || (_0x215cff < 97 ? _0x215cff === 95 : _0x215cff < 123 || _0x215cff >= 170 && _0x5d749e.test(String.fromCharCode(_0x215cff)));
                    }
                  };
                  var _0x4b6fa5 = _0x2b1fc6.isIdentifierChar = function (_0xac87b6) {
                    if (_0xac87b6 < 48) {
                      return _0xac87b6 === 36;
                    } else {
                      return _0xac87b6 < 58 || !(_0xac87b6 < 65) && (_0xac87b6 < 91 || (_0xac87b6 < 97 ? _0xac87b6 === 95 : _0xac87b6 < 123 || _0xac87b6 >= 170 && _0x269dcc.test(String.fromCharCode(_0xac87b6))));
                    }
                  };
                  function _0x1290cd() {
                    this.line = _0x242314;
                    this.column = _0x566220 - _0x180085;
                  }
                  function _0x525851() {
                    _0x242314 = 1;
                    _0x566220 = _0x180085 = 0;
                    _0x49fd7a = true;
                    _0x155d18();
                  }
                  function _0xd91d44(_0x5974ca, _0x5b29b4) {
                    _0x311571 = _0x566220;
                    if (_0x256c65.locations) {
                      _0x524fe5 = new _0x1290cd();
                    }
                    _0x5c5cff = _0x5974ca;
                    _0x155d18();
                    _0x17c4f1 = _0x5b29b4;
                    _0x49fd7a = _0x5974ca.beforeExpr;
                  }
                  function _0x4b0489() {
                    for (var _0x3ddd41 = _0x566220, _0x4f84f0 = _0x256c65.onComment && _0x256c65.locations && new _0x1290cd(), _0x458ae4 = _0x478a20.charCodeAt(_0x566220 += 2); _0x566220 < _0x112381 && _0x458ae4 !== 10 && _0x458ae4 !== 13 && _0x458ae4 !== 8232 && _0x458ae4 !== 8233;) {
                      ++_0x566220;
                      _0x458ae4 = _0x478a20.charCodeAt(_0x566220);
                    }
                    if (_0x256c65.onComment) {
                      _0x256c65.onComment(false, _0x478a20.slice(_0x3ddd41 + 2, _0x566220), _0x3ddd41, _0x566220, _0x4f84f0, _0x256c65.locations && new _0x1290cd());
                    }
                  }
                  function _0x155d18() {
                    for (; _0x566220 < _0x112381;) {
                      var _0x46439b;
                      var _0x272331 = _0x478a20.charCodeAt(_0x566220);
                      if (_0x272331 === 32) {
                        ++_0x566220;
                      } else if (_0x272331 === 13) {
                        ++_0x566220;
                        if ((_0x46439b = _0x478a20.charCodeAt(_0x566220)) === 10) {
                          ++_0x566220;
                        }
                        if (_0x256c65.locations) {
                          ++_0x242314;
                          _0x180085 = _0x566220;
                        }
                      } else if (_0x272331 === 10 || _0x272331 === 8232 || _0x272331 === 8233) {
                        ++_0x566220;
                        if (_0x256c65.locations) {
                          ++_0x242314;
                          _0x180085 = _0x566220;
                        }
                      } else if (_0x272331 > 8 && _0x272331 < 14) {
                        ++_0x566220;
                      } else if (_0x272331 === 47) {
                        if ((_0x46439b = _0x478a20.charCodeAt(_0x566220 + 1)) === 42) {
                          (function () {
                            var _0x33ed7b;
                            var _0x33597d = _0x256c65.onComment && _0x256c65.locations && new _0x1290cd();
                            var _0x20cfb9 = _0x566220;
                            var _0x4dcdf8 = _0x478a20.indexOf("*/", _0x566220 += 2);
                            if (_0x4dcdf8 === -1) {
                              _0x16180d(_0x566220 - 2, "Unterminated comment");
                            }
                            _0x566220 = _0x4dcdf8 + 2;
                            if (_0x256c65.locations) {
                              for (_0x20073b.lastIndex = _0x20cfb9; (_0x33ed7b = _0x20073b.exec(_0x478a20)) && _0x33ed7b.index < _0x566220;) {
                                ++_0x242314;
                                _0x180085 = _0x33ed7b.index + _0x33ed7b[0].length;
                              }
                            }
                            if (_0x256c65.onComment) {
                              _0x256c65.onComment(true, _0x478a20.slice(_0x20cfb9 + 2, _0x4dcdf8), _0x20cfb9, _0x566220, _0x33597d, _0x256c65.locations && new _0x1290cd());
                            }
                          })();
                        } else {
                          if (_0x46439b !== 47) {
                            break;
                          }
                          _0x4b0489();
                        }
                      } else if (_0x272331 === 160) {
                        ++_0x566220;
                      } else {
                        if (!(_0x272331 >= 5760 && _0x5f36e9.test(String.fromCharCode(_0x272331)))) {
                          break;
                        }
                        ++_0x566220;
                      }
                    }
                  }
                  function _0x3a38c4(_0x27b3c4) {
                    if (_0x27b3c4) {
                      _0x566220 = _0x3d0028 + 1;
                    } else {
                      _0x3d0028 = _0x566220;
                    }
                    if (_0x256c65.locations) {
                      _0x549c9e = new _0x1290cd();
                    }
                    if (_0x27b3c4) {
                      return _0x36789a();
                    }
                    if (_0x112381 <= _0x566220) {
                      return _0xd91d44(_0x53daa7);
                    }
                    var _0x511813 = _0x478a20.charCodeAt(_0x566220);
                    if (_0x58ada3(_0x511813) || _0x511813 === 92) {
                      return _0x321821();
                    }
                    _0x27b3c4 = function (_0x181a82) {
                      switch (_0x181a82) {
                        case 46:
                          if ((_0x192a22 = _0x478a20.charCodeAt(_0x566220 + 1)) >= 48 && _0x192a22 <= 57) {
                            return _0x5d696c(true);
                          } else {
                            ++_0x566220;
                            return _0xd91d44(_0x301d84);
                          }
                        case 40:
                          ++_0x566220;
                          return _0xd91d44(_0x270152);
                        case 41:
                          ++_0x566220;
                          return _0xd91d44(_0x3fd6ac);
                        case 59:
                          ++_0x566220;
                          return _0xd91d44(_0x1d2eb4);
                        case 44:
                          ++_0x566220;
                          return _0xd91d44(_0x54f23b);
                        case 91:
                          ++_0x566220;
                          return _0xd91d44(_0x4993e2);
                        case 93:
                          ++_0x566220;
                          return _0xd91d44(_0x246e18);
                        case 123:
                          ++_0x566220;
                          return _0xd91d44(_0x3823ce);
                        case 125:
                          ++_0x566220;
                          return _0xd91d44(_0x278f35);
                        case 58:
                          ++_0x566220;
                          return _0xd91d44(_0x1c2150);
                        case 63:
                          ++_0x566220;
                          return _0xd91d44(_0x19dfc2);
                        case 48:
                          var _0xedee8d = _0x478a20.charCodeAt(_0x566220 + 1);
                          if (_0xedee8d === 120 || _0xedee8d === 88) {
                            return function () {
                              _0x566220 += 2;
                              var _0xb46811 = _0x10ec20(16);
                              if (_0xb46811 == null) {
                                _0x16180d(_0x3d0028 + 2, "Expected hexadecimal number");
                              }
                              if (_0x58ada3(_0x478a20.charCodeAt(_0x566220))) {
                                _0x16180d(_0x566220, "Identifier directly after number");
                              }
                              return _0xd91d44(_0x1c5f36, _0xb46811);
                            }();
                          }
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                          return _0x5d696c(false);
                        case 34:
                        case 39:
                          return function (_0x305afa) {
                            _0x566220++;
                            for (var _0x59f735 = "";;) {
                              if (_0x112381 <= _0x566220) {
                                _0x16180d(_0x3d0028, "Unterminated string constant");
                              }
                              var _0x41145c = _0x478a20.charCodeAt(_0x566220);
                              if (_0x41145c === _0x305afa) {
                                ++_0x566220;
                                return _0xd91d44(_0x363cb6, _0x59f735);
                              }
                              if (_0x41145c === 92) {
                                _0x41145c = _0x478a20.charCodeAt(++_0x566220);
                                var _0x48deb2 = /^[0-7]+/.exec(_0x478a20.slice(_0x566220, _0x566220 + 3));
                                for (_0x48deb2 = _0x48deb2 && _0x48deb2[0]; _0x48deb2 && parseInt(_0x48deb2, 8) > 255;) {
                                  _0x48deb2 = _0x48deb2.slice(0, -1);
                                }
                                ++_0x566220;
                                if (_0x48deb2 = _0x48deb2 === "0" ? null : _0x48deb2) {
                                  if (_0x50d7bb) {
                                    _0x16180d(_0x566220 - 2, "Octal literal in strict mode");
                                  }
                                  _0x59f735 += String.fromCharCode(parseInt(_0x48deb2, 8));
                                  _0x566220 += _0x48deb2.length - 1;
                                } else {
                                  switch (_0x41145c) {
                                    case 110:
                                      _0x59f735 += "\n";
                                      break;
                                    case 114:
                                      _0x59f735 += "\r";
                                      break;
                                    case 120:
                                      _0x59f735 += String.fromCharCode(_0x5acf8a(2));
                                      break;
                                    case 117:
                                      _0x59f735 += String.fromCharCode(_0x5acf8a(4));
                                      break;
                                    case 85:
                                      _0x59f735 += String.fromCharCode(_0x5acf8a(8));
                                      break;
                                    case 116:
                                      _0x59f735 += "\t";
                                      break;
                                    case 98:
                                      _0x59f735 += "\b";
                                      break;
                                    case 118:
                                      _0x59f735 += "";
                                      break;
                                    case 102:
                                      _0x59f735 += "\f";
                                      break;
                                    case 48:
                                      _0x59f735 += "\0";
                                      break;
                                    case 13:
                                      if (_0x478a20.charCodeAt(_0x566220) === 10) {
                                        ++_0x566220;
                                      }
                                    case 10:
                                      if (_0x256c65.locations) {
                                        _0x180085 = _0x566220;
                                        ++_0x242314;
                                      }
                                      break;
                                    default:
                                      _0x59f735 += String.fromCharCode(_0x41145c);
                                  }
                                }
                              } else {
                                if (!(_0x41145c !== 13 && _0x41145c !== 10 && _0x41145c !== 8232 && _0x41145c !== 8233)) {
                                  _0x16180d(_0x3d0028, "Unterminated string constant");
                                }
                                _0x59f735 += String.fromCharCode(_0x41145c);
                                ++_0x566220;
                              }
                            }
                          }(_0x181a82);
                        case 47:
                          _0x48cef3 = _0x478a20.charCodeAt(_0x566220 + 1);
                          if (_0x49fd7a) {
                            ++_0x566220;
                            return _0x36789a();
                          } else if (_0x48cef3 === 61) {
                            return _0x5e4492(_0x5e7707, 2);
                          } else {
                            return _0x5e4492(_0xde8d24, 1);
                          }
                        case 37:
                        case 42:
                          if (_0x478a20.charCodeAt(_0x566220 + 1) === 61) {
                            return _0x5e4492(_0x5e7707, 2);
                          } else {
                            return _0x5e4492(_0x4e2792, 1);
                          }
                        case 124:
                        case 38:
                          _0xedee8d = _0x181a82;
                          if ((_0x48cef3 = _0x478a20.charCodeAt(_0x566220 + 1)) === _0xedee8d) {
                            return _0x5e4492(_0xedee8d === 124 ? _0x2f6a49 : _0x24d4a7, 2);
                          } else if (_0x48cef3 === 61) {
                            return _0x5e4492(_0x5e7707, 2);
                          } else {
                            return _0x5e4492(_0xedee8d === 124 ? _0x50aa13 : _0x221109, 1);
                          }
                        case 94:
                          if (_0x478a20.charCodeAt(_0x566220 + 1) === 61) {
                            return _0x5e4492(_0x5e7707, 2);
                          } else {
                            return _0x5e4492(_0x43fb53, 1);
                          }
                        case 43:
                        case 45:
                          _0x392a40 = _0x181a82;
                          if ((_0x187a25 = _0x478a20.charCodeAt(_0x566220 + 1)) === _0x392a40) {
                            if (_0x187a25 == 45 && _0x478a20.charCodeAt(_0x566220 + 2) == 62 && _0x516863.test(_0x478a20.slice(_0x44fc58, _0x566220))) {
                              _0x566220 += 3;
                              _0x4b0489();
                              _0x155d18();
                              return _0x3a38c4();
                            } else {
                              return _0x5e4492(_0x536899, 2);
                            }
                          } else if (_0x187a25 === 61) {
                            return _0x5e4492(_0x5e7707, 2);
                          } else {
                            return _0x5e4492(_0x53f676, 1);
                          }
                        case 60:
                        case 62:
                          _0x392a40 = _0x181a82;
                          _0x5b5a7c = 1;
                          if ((_0x187a25 = _0x478a20.charCodeAt(_0x566220 + 1)) === _0x392a40) {
                            _0x5b5a7c = _0x392a40 === 62 && _0x478a20.charCodeAt(_0x566220 + 2) === 62 ? 3 : 2;
                            if (_0x478a20.charCodeAt(_0x566220 + _0x5b5a7c) === 61) {
                              return _0x5e4492(_0x5e7707, _0x5b5a7c + 1);
                            } else {
                              return _0x5e4492(_0x8cfb3e, _0x5b5a7c);
                            }
                          } else if (_0x187a25 == 33 && _0x392a40 == 60 && _0x478a20.charCodeAt(_0x566220 + 2) == 45 && _0x478a20.charCodeAt(_0x566220 + 3) == 45) {
                            _0x566220 += 4;
                            _0x4b0489();
                            _0x155d18();
                            return _0x3a38c4();
                          } else {
                            if (_0x187a25 === 61) {
                              _0x5b5a7c = _0x478a20.charCodeAt(_0x566220 + 2) === 61 ? 3 : 2;
                            }
                            return _0x5e4492(_0x34923b, _0x5b5a7c);
                          }
                        case 61:
                        case 33:
                          _0x5b5a7c = _0x181a82;
                          if (_0x478a20.charCodeAt(_0x566220 + 1) === 61) {
                            return _0x5e4492(_0x174805, _0x478a20.charCodeAt(_0x566220 + 2) === 61 ? 3 : 2);
                          } else {
                            return _0x5e4492(_0x5b5a7c === 61 ? _0x1918b3 : _0x11ccdc, 1);
                          }
                        case 126:
                          return _0x5e4492(_0x11ccdc, 1);
                      }
                      var _0x5b5a7c;
                      var _0x392a40;
                      var _0x187a25;
                      var _0x48cef3;
                      var _0x192a22;
                      return false;
                    }(_0x511813);
                    if (_0x27b3c4 === false) {
                      if ((_0x511813 = String.fromCharCode(_0x511813)) === "\\" || _0x5d749e.test(_0x511813)) {
                        return _0x321821();
                      }
                      _0x16180d(_0x566220, "Unexpected character '" + _0x511813 + "'");
                    }
                    return _0x27b3c4;
                  }
                  function _0x5e4492(_0x47fe89, _0x3f5ae9) {
                    var _0x21808c = _0x478a20.slice(_0x566220, _0x566220 + _0x3f5ae9);
                    _0x566220 += _0x3f5ae9;
                    _0xd91d44(_0x47fe89, _0x21808c);
                  }
                  function _0x36789a() {
                    var _0x7d0614;
                    var _0x1f0fee;
                    var _0x5e0522 = _0x566220;
                    for (;;) {
                      if (_0x112381 <= _0x566220) {
                        _0x16180d(_0x5e0522, "Unterminated regular expression");
                      }
                      var _0x32e65e = _0x478a20.charAt(_0x566220);
                      if (_0x516863.test(_0x32e65e)) {
                        _0x16180d(_0x5e0522, "Unterminated regular expression");
                      }
                      if (_0x7d0614) {
                        _0x7d0614 = false;
                      } else {
                        if (_0x32e65e === "[") {
                          _0x1f0fee = true;
                        } else if (_0x32e65e === "]" && _0x1f0fee) {
                          _0x1f0fee = false;
                        } else if (_0x32e65e === "/" && !_0x1f0fee) {
                          break;
                        }
                        _0x7d0614 = _0x32e65e === "\\";
                      }
                      ++_0x566220;
                    }
                    var _0x3f6e37 = _0x478a20.slice(_0x5e0522, _0x566220);
                    ++_0x566220;
                    var _0x1b9438 = _0x1f1cfc();
                    if (_0x1b9438 && !/^[gmsiy]*$/.test(_0x1b9438)) {
                      _0x16180d(_0x5e0522, "Invalid regexp flag");
                    }
                    try {
                      var _0x3fa9bc = new RegExp(_0x3f6e37, _0x1b9438);
                    } catch (_0x141169) {
                      if (_0x141169 instanceof SyntaxError) {
                        _0x16180d(_0x5e0522, _0x141169.message);
                      }
                      _0x16180d(_0x141169);
                    }
                    return _0xd91d44(_0x558beb, _0x3fa9bc);
                  }
                  function _0x10ec20(_0xeae2c2, _0xe5b1ce) {
                    for (var _0x3d9e7e = _0x566220, _0x35d95b = 0, _0x3ab7c4 = 0, _0x13168c = _0xe5b1ce == null ? Infinity : _0xe5b1ce; _0x3ab7c4 < _0x13168c; ++_0x3ab7c4) {
                      var _0x1bf1e4;
                      if (_0xeae2c2 <= (_0x1bf1e4 = (_0x1bf1e4 = _0x478a20.charCodeAt(_0x566220)) >= 97 ? _0x1bf1e4 - 97 + 10 : _0x1bf1e4 >= 65 ? _0x1bf1e4 - 65 + 10 : _0x1bf1e4 >= 48 && _0x1bf1e4 <= 57 ? _0x1bf1e4 - 48 : Infinity)) {
                        break;
                      }
                      ++_0x566220;
                      _0x35d95b = _0x35d95b * _0xeae2c2 + _0x1bf1e4;
                    }
                    if (_0x566220 === _0x3d9e7e || _0xe5b1ce != null && _0x566220 - _0x3d9e7e !== _0xe5b1ce) {
                      return null;
                    } else {
                      return _0x35d95b;
                    }
                  }
                  function _0x5d696c(_0x509849) {
                    var _0x333d33 = _0x566220;
                    var _0x4be306 = false;
                    var _0x28f717 = _0x478a20.charCodeAt(_0x566220) === 48;
                    if (!(_0x509849 || _0x10ec20(10) !== null)) {
                      _0x16180d(_0x333d33, "Invalid number");
                    }
                    if (_0x478a20.charCodeAt(_0x566220) === 46) {
                      ++_0x566220;
                      _0x10ec20(10);
                      _0x4be306 = true;
                    }
                    if (!((_0x509849 = _0x478a20.charCodeAt(_0x566220)) !== 69 && _0x509849 !== 101)) {
                      if (!((_0x509849 = _0x478a20.charCodeAt(++_0x566220)) !== 43 && _0x509849 !== 45)) {
                        ++_0x566220;
                      }
                      if (_0x10ec20(10) === null) {
                        _0x16180d(_0x333d33, "Invalid number");
                      }
                      _0x4be306 = true;
                    }
                    if (_0x58ada3(_0x478a20.charCodeAt(_0x566220))) {
                      _0x16180d(_0x566220, "Identifier directly after number");
                    }
                    var _0x563b43;
                    _0x509849 = _0x478a20.slice(_0x333d33, _0x566220);
                    if (_0x4be306) {
                      _0x563b43 = parseFloat(_0x509849);
                    } else if (_0x28f717 && _0x509849.length !== 1) {
                      if (/[89]/.test(_0x509849) || _0x50d7bb) {
                        _0x16180d(_0x333d33, "Invalid number");
                      } else {
                        _0x563b43 = parseInt(_0x509849, 8);
                      }
                    } else {
                      _0x563b43 = parseInt(_0x509849, 10);
                    }
                    return _0xd91d44(_0x1c5f36, _0x563b43);
                  }
                  function _0x5acf8a(_0x332382) {
                    if ((_0x332382 = _0x10ec20(16, _0x332382)) === null) {
                      _0x16180d(_0x3d0028, "Bad character escape sequence");
                    }
                    return _0x332382;
                  }
                  function _0x1f1cfc() {
                    var _0x1f5355;
                    var _0x4197de = !(_0x167300 = false);
                    var _0x20ba99 = _0x566220;
                    for (;;) {
                      var _0x375d69 = _0x478a20.charCodeAt(_0x566220);
                      if (_0x4b6fa5(_0x375d69)) {
                        if (_0x167300) {
                          _0x1f5355 += _0x478a20.charAt(_0x566220);
                        }
                        ++_0x566220;
                      } else {
                        if (_0x375d69 !== 92) {
                          break;
                        }
                        if (!_0x167300) {
                          _0x1f5355 = _0x478a20.slice(_0x20ba99, _0x566220);
                        }
                        _0x167300 = true;
                        if (_0x478a20.charCodeAt(++_0x566220) != 117) {
                          _0x16180d(_0x566220, "Expecting Unicode escape sequence \\uXXXX");
                        }
                        ++_0x566220;
                        var _0x3c1d8e = _0x5acf8a(4);
                        if (!(_0x375d69 = String.fromCharCode(_0x3c1d8e))) {
                          _0x16180d(_0x566220 - 1, "Invalid Unicode escape");
                        }
                        if (!(_0x4197de ? _0x58ada3 : _0x4b6fa5)(_0x3c1d8e)) {
                          _0x16180d(_0x566220 - 4, "Invalid Unicode escape");
                        }
                        _0x1f5355 += _0x375d69;
                      }
                      _0x4197de = false;
                    }
                    if (_0x167300) {
                      return _0x1f5355;
                    } else {
                      return _0x478a20.slice(_0x20ba99, _0x566220);
                    }
                  }
                  function _0x321821() {
                    var _0x54e3af = _0x1f1cfc();
                    var _0x4fb7af = _0x33c692;
                    return _0xd91d44(_0x4fb7af = !_0x167300 && _0x3d394a(_0x54e3af) ? _0x9d7e7a[_0x54e3af] : _0x4fb7af, _0x54e3af);
                  }
                  function _0x543a5e() {
                    _0x3a7a04 = _0x3d0028;
                    _0x44fc58 = _0x311571;
                    _0x560e36 = _0x524fe5;
                    _0x3a38c4();
                  }
                  function _0x54c4a3(_0x429d0c) {
                    _0x50d7bb = _0x429d0c;
                    _0x566220 = _0x3d0028;
                    if (_0x256c65.locations) {
                      for (; _0x566220 < _0x180085;) {
                        _0x180085 = _0x478a20.lastIndexOf("\n", _0x180085 - 2) + 1;
                        --_0x242314;
                      }
                    }
                    _0x155d18();
                    _0x3a38c4();
                  }
                  function _0x434adb() {
                    this.type = null;
                    this.start = _0x3d0028;
                    this.end = null;
                  }
                  function _0x2db932() {
                    this.start = _0x549c9e;
                    if ((this.end = null) !== _0x114dd3) {
                      this.source = _0x114dd3;
                    }
                  }
                  function _0x4687ab() {
                    var _0x567aae = new _0x434adb();
                    if (_0x256c65.locations) {
                      _0x567aae.loc = new _0x2db932();
                    }
                    if (_0x256c65.directSourceFile) {
                      _0x567aae.sourceFile = _0x256c65.directSourceFile;
                    }
                    if (_0x256c65.ranges) {
                      _0x567aae.range = [_0x3d0028, 0];
                    }
                    return _0x567aae;
                  }
                  function _0x38ab12(_0x1d4b11) {
                    var _0x23973b = new _0x434adb();
                    _0x23973b.start = _0x1d4b11.start;
                    if (_0x256c65.locations) {
                      _0x23973b.loc = new _0x2db932();
                      _0x23973b.loc.start = _0x1d4b11.loc.start;
                    }
                    if (_0x256c65.ranges) {
                      _0x23973b.range = [_0x1d4b11.range[0], 0];
                    }
                    return _0x23973b;
                  }
                  function _0x4a5719(_0x174d35, _0x593a5f) {
                    _0x174d35.type = _0x593a5f;
                    _0x174d35.end = _0x44fc58;
                    if (_0x256c65.locations) {
                      _0x174d35.loc.end = _0x560e36;
                    }
                    if (_0x256c65.ranges) {
                      _0x174d35.range[1] = _0x44fc58;
                    }
                    return _0x174d35;
                  }
                  function _0x430102(_0x5448be) {
                    return _0x256c65.ecmaVersion >= 5 && _0x5448be.type === "ExpressionStatement" && _0x5448be.expression.type === "Literal" && _0x5448be.expression.value === "got it";
                  }
                  function _0x303e28(_0x15976e) {
                    return _0x5c5cff === _0x15976e && (_0x543a5e(), 1);
                  }
                  function _0x293524() {
                    return !_0x256c65.strictSemicolons && (_0x5c5cff === _0x53daa7 || _0x5c5cff === _0x278f35 || _0x516863.test(_0x478a20.slice(_0x44fc58, _0x3d0028)));
                  }
                  function _0x1dcbd4() {
                    if (!(_0x303e28(_0x1d2eb4) || _0x293524())) {
                      _0x57639d();
                    }
                  }
                  function _0x64fdab(_0x188fcc) {
                    (_0x5c5cff === _0x188fcc ? _0x543a5e : _0x57639d)();
                  }
                  function _0x57639d() {
                    _0x16180d(_0x3d0028, "Unexpected token");
                  }
                  function _0x16e543(_0x4822d5) {
                    if (_0x4822d5.type !== "Identifier" && _0x4822d5.type !== "MemberExpression") {
                      _0x16180d(_0x4822d5.start, "Assigning to rvalue");
                    }
                    if (_0x50d7bb && _0x4822d5.type === "Identifier" && _0x22bb66(_0x4822d5.name)) {
                      _0x16180d(_0x4822d5.start, "Assigning to " + _0x4822d5.name + " in strict mode");
                    }
                  }
                  var _0x38b1aa = {
                    kind: "loop"
                  };
                  var _0x4087ba = {
                    kind: "switch"
                  };
                  function _0x3e4d61() {
                    if (_0x5c5cff === _0xde8d24 || _0x5c5cff === _0x5e7707 && _0x17c4f1 == "/=") {
                      _0x3a38c4(true);
                    }
                    var _0x17f5e4;
                    var _0x2300cf;
                    var _0xbbbe42;
                    var _0xd8bcad = _0x5c5cff;
                    var _0x172655 = _0x4687ab();
                    switch (_0xd8bcad) {
                      case _0x2c27a:
                      case _0x2b1009:
                        _0x543a5e();
                        var _0x517fd6 = _0xd8bcad === _0x2c27a;
                        if (_0x303e28(_0x1d2eb4) || _0x293524()) {
                          _0x172655.label = null;
                        } else if (_0x5c5cff !== _0x33c692) {
                          _0x57639d();
                        } else {
                          _0x172655.label = _0x5d89da();
                          _0x1dcbd4();
                        }
                        for (var _0x610798 = 0; _0x610798 < _0x3b8c98.length; ++_0x610798) {
                          var _0x3387ee = _0x3b8c98[_0x610798];
                          if (_0x172655.label == null || _0x3387ee.name === _0x172655.label.name) {
                            if (_0x3387ee.kind != null && (_0x517fd6 || _0x3387ee.kind === "loop")) {
                              break;
                            }
                            if (_0x172655.label && _0x517fd6) {
                              break;
                            }
                          }
                        }
                        if (_0x610798 === _0x3b8c98.length) {
                          _0x16180d(_0x172655.start, "Unsyntactic " + _0xd8bcad.keyword);
                        }
                        return _0x4a5719(_0x172655, _0x517fd6 ? "BreakStatement" : "ContinueStatement");
                      case _0x4eb068:
                        _0x543a5e();
                        _0x1dcbd4();
                        return _0x4a5719(_0x172655, "DebuggerStatement");
                      case _0x54b260:
                        _0x543a5e();
                        _0x3b8c98.push(_0x38b1aa);
                        _0x172655.body = _0x3e4d61();
                        _0x3b8c98.pop();
                        _0x64fdab(_0x21e1e4);
                        _0x172655.test = _0x30abae();
                        _0x1dcbd4();
                        return _0x4a5719(_0x172655, "DoWhileStatement");
                      case _0x9a6dfe:
                        _0x543a5e();
                        _0x3b8c98.push(_0x38b1aa);
                        _0x64fdab(_0x270152);
                        if (_0x5c5cff === _0x1d2eb4) {
                          return _0x40e2dc(_0x172655, null);
                        }
                        if (_0x5c5cff === _0x2ce191) {
                          var _0x31cd6b = _0x4687ab();
                          _0x543a5e();
                          _0x1d00a1(_0x31cd6b, true);
                          _0x4a5719(_0x31cd6b, "VariableDeclaration");
                          if (_0x31cd6b.declarations.length === 1 && _0x303e28(_0x1f8abd)) {
                            return _0x27853f(_0x172655, _0x31cd6b);
                          } else {
                            return _0x40e2dc(_0x172655, _0x31cd6b);
                          }
                        }
                        _0x31cd6b = _0x4c77cd(false, true);
                        if (_0x303e28(_0x1f8abd)) {
                          _0x16e543(_0x31cd6b);
                          return _0x27853f(_0x172655, _0x31cd6b);
                        } else {
                          return _0x40e2dc(_0x172655, _0x31cd6b);
                        }
                      case _0x1ad961:
                        _0x543a5e();
                        return _0x22bbee(_0x172655, true);
                      case _0x2e7714:
                        _0x543a5e();
                        _0x172655.test = _0x30abae();
                        _0x172655.consequent = _0x3e4d61();
                        _0x172655.alternate = _0x303e28(_0x1f163d) ? _0x3e4d61() : null;
                        return _0x4a5719(_0x172655, "IfStatement");
                      case _0x23663f:
                        if (!(_0x18496b || _0x256c65.allowReturnOutsideFunction)) {
                          _0x16180d(_0x3d0028, "'return' outside of function");
                        }
                        _0x543a5e();
                        if (_0x303e28(_0x1d2eb4) || _0x293524()) {
                          _0x172655.argument = null;
                        } else {
                          _0x172655.argument = _0x4c77cd();
                          _0x1dcbd4();
                        }
                        return _0x4a5719(_0x172655, "ReturnStatement");
                      case _0x38dc12:
                        _0x543a5e();
                        _0x172655.discriminant = _0x30abae();
                        _0x172655.cases = [];
                        _0x64fdab(_0x3823ce);
                        _0x3b8c98.push(_0x4087ba);
                        for (; _0x5c5cff != _0x278f35;) {
                          if (_0x5c5cff === _0x555542 || _0x5c5cff === _0x2f0c06) {
                            _0xbbbe42 = _0x5c5cff === _0x555542;
                            if (_0x17f5e4) {
                              _0x4a5719(_0x17f5e4, "SwitchCase");
                            }
                            _0x172655.cases.push(_0x17f5e4 = _0x4687ab());
                            _0x17f5e4.consequent = [];
                            _0x543a5e();
                            if (_0xbbbe42) {
                              _0x17f5e4.test = _0x4c77cd();
                            } else {
                              if (_0x2300cf) {
                                _0x16180d(_0x3a7a04, "Multiple default clauses");
                              }
                              _0x2300cf = true;
                              _0x17f5e4.test = null;
                            }
                            _0x64fdab(_0x1c2150);
                          } else {
                            if (!_0x17f5e4) {
                              _0x57639d();
                            }
                            _0x17f5e4.consequent.push(_0x3e4d61());
                          }
                        }
                        if (_0x17f5e4) {
                          _0x4a5719(_0x17f5e4, "SwitchCase");
                        }
                        _0x543a5e();
                        _0x3b8c98.pop();
                        return _0x4a5719(_0x172655, "SwitchStatement");
                      case _0x8bbec6:
                        _0x543a5e();
                        if (_0x516863.test(_0x478a20.slice(_0x44fc58, _0x3d0028))) {
                          _0x16180d(_0x44fc58, "Illegal newline after throw");
                        }
                        _0x172655.argument = _0x4c77cd();
                        _0x1dcbd4();
                        return _0x4a5719(_0x172655, "ThrowStatement");
                      case _0x52b5e0:
                        _0x543a5e();
                        _0x172655.block = _0x12b68d();
                        _0x172655.handler = null;
                        if (_0x5c5cff === _0x47de5c) {
                          _0x5f5533 = _0x4687ab();
                          _0x543a5e();
                          _0x64fdab(_0x270152);
                          _0x5f5533.param = _0x5d89da();
                          if (_0x50d7bb && _0x22bb66(_0x5f5533.param.name)) {
                            _0x16180d(_0x5f5533.param.start, "Binding " + _0x5f5533.param.name + " in strict mode");
                          }
                          _0x64fdab(_0x3fd6ac);
                          _0x5f5533.guard = null;
                          _0x5f5533.body = _0x12b68d();
                          _0x172655.handler = _0x4a5719(_0x5f5533, "CatchClause");
                        }
                        _0x172655.guardedHandlers = _0x25bedd;
                        _0x172655.finalizer = _0x303e28(_0x533695) ? _0x12b68d() : null;
                        if (!(_0x172655.handler || _0x172655.finalizer)) {
                          _0x16180d(_0x172655.start, "Missing catch or finally clause");
                        }
                        return _0x4a5719(_0x172655, "TryStatement");
                      case _0x2ce191:
                        _0x543a5e();
                        _0x1d00a1(_0x172655);
                        _0x1dcbd4();
                        return _0x4a5719(_0x172655, "VariableDeclaration");
                      case _0x21e1e4:
                        _0x543a5e();
                        _0x172655.test = _0x30abae();
                        _0x3b8c98.push(_0x38b1aa);
                        _0x172655.body = _0x3e4d61();
                        _0x3b8c98.pop();
                        return _0x4a5719(_0x172655, "WhileStatement");
                      case _0x39a567:
                        if (_0x50d7bb) {
                          _0x16180d(_0x3d0028, "'with' in strict mode");
                        }
                        _0x543a5e();
                        _0x172655.object = _0x30abae();
                        _0x172655.body = _0x3e4d61();
                        return _0x4a5719(_0x172655, "WithStatement");
                      case _0x3823ce:
                        return _0x12b68d();
                      case _0x1d2eb4:
                        _0x543a5e();
                        return _0x4a5719(_0x172655, "EmptyStatement");
                      default:
                        var _0x227144 = _0x17c4f1;
                        var _0xa2340e = _0x4c77cd();
                        if (_0xd8bcad === _0x33c692 && _0xa2340e.type === "Identifier" && _0x303e28(_0x1c2150)) {
                          for (_0x610798 = 0; _0x610798 < _0x3b8c98.length; ++_0x610798) {
                            if (_0x3b8c98[_0x610798].name === _0x227144) {
                              _0x16180d(_0xa2340e.start, "Label '" + _0x227144 + "' is already declared");
                            }
                          }
                          var _0x5f5533 = _0x5c5cff.isLoop ? "loop" : _0x5c5cff === _0x38dc12 ? "switch" : null;
                          _0x3b8c98.push({
                            name: _0x227144,
                            kind: _0x5f5533
                          });
                          _0x172655.body = _0x3e4d61();
                          _0x3b8c98.pop();
                          _0x172655.label = _0xa2340e;
                          return _0x4a5719(_0x172655, "LabeledStatement");
                        }
                        _0x172655.expression = _0xa2340e;
                        _0x1dcbd4();
                        return _0x4a5719(_0x172655, "ExpressionStatement");
                    }
                  }
                  function _0x30abae() {
                    _0x64fdab(_0x270152);
                    var _0x5891f0 = _0x4c77cd();
                    _0x64fdab(_0x3fd6ac);
                    return _0x5891f0;
                  }
                  function _0x12b68d(_0x3fa8f2) {
                    var _0xe0b671;
                    var _0x58fbfb = _0x4687ab();
                    var _0x3aed5c = true;
                    var _0x446867 = false;
                    _0x58fbfb.body = [];
                    _0x64fdab(_0x3823ce);
                    for (; !_0x303e28(_0x278f35);) {
                      var _0x2afd76 = _0x3e4d61();
                      _0x58fbfb.body.push(_0x2afd76);
                      if (_0x3aed5c && _0x3fa8f2 && _0x430102(_0x2afd76)) {
                        _0xe0b671 = _0x446867;
                        _0x54c4a3(_0x446867 = true);
                      }
                      _0x3aed5c = false;
                    }
                    if (_0x446867 && !_0xe0b671) {
                      _0x54c4a3(false);
                    }
                    return _0x4a5719(_0x58fbfb, "BlockStatement");
                  }
                  function _0x40e2dc(_0x17f106, _0x54c712) {
                    _0x17f106.init = _0x54c712;
                    _0x64fdab(_0x1d2eb4);
                    _0x17f106.test = _0x5c5cff === _0x1d2eb4 ? null : _0x4c77cd();
                    _0x64fdab(_0x1d2eb4);
                    _0x17f106.update = _0x5c5cff === _0x3fd6ac ? null : _0x4c77cd();
                    _0x64fdab(_0x3fd6ac);
                    _0x17f106.body = _0x3e4d61();
                    _0x3b8c98.pop();
                    return _0x4a5719(_0x17f106, "ForStatement");
                  }
                  function _0x27853f(_0x3ac54b, _0x4f9b7c) {
                    _0x3ac54b.left = _0x4f9b7c;
                    _0x3ac54b.right = _0x4c77cd();
                    _0x64fdab(_0x3fd6ac);
                    _0x3ac54b.body = _0x3e4d61();
                    _0x3b8c98.pop();
                    return _0x4a5719(_0x3ac54b, "ForInStatement");
                  }
                  function _0x1d00a1(_0x59dd11, _0x3f6aa5) {
                    _0x59dd11.declarations = [];
                    _0x59dd11.kind = "var";
                    for (;;) {
                      var _0x123d00 = _0x4687ab();
                      _0x123d00.id = _0x5d89da();
                      if (_0x50d7bb && _0x22bb66(_0x123d00.id.name)) {
                        _0x16180d(_0x123d00.id.start, "Binding " + _0x123d00.id.name + " in strict mode");
                      }
                      _0x123d00.init = _0x303e28(_0x1918b3) ? _0x4c77cd(true, _0x3f6aa5) : null;
                      _0x59dd11.declarations.push(_0x4a5719(_0x123d00, "VariableDeclarator"));
                      if (!_0x303e28(_0x54f23b)) {
                        break;
                      }
                    }
                    return _0x59dd11;
                  }
                  function _0x4c77cd(_0x183080, _0x57ac43) {
                    var _0x5e0621 = _0x508b54(_0x57ac43);
                    if (_0x183080 || _0x5c5cff !== _0x54f23b) {
                      return _0x5e0621;
                    }
                    var _0x3606a5 = _0x38ab12(_0x5e0621);
                    for (_0x3606a5.expressions = [_0x5e0621]; _0x303e28(_0x54f23b);) {
                      _0x3606a5.expressions.push(_0x508b54(_0x57ac43));
                    }
                    return _0x4a5719(_0x3606a5, "SequenceExpression");
                  }
                  function _0x508b54(_0xefe0c9) {
                    var _0xddfc5e = function (_0x212eb6) {
                      var _0x9c2e5d = function (_0xc00ce9) {
                        return function _0x4f08e0(_0x44de3f, _0x109be6, _0x2231b6) {
                          var _0x6fb92b = _0x5c5cff.binop;
                          if (_0x6fb92b != null && (!_0x2231b6 || _0x5c5cff !== _0x1f8abd) && _0x109be6 < _0x6fb92b) {
                            var _0x19a208 = _0x38ab12(_0x44de3f);
                            _0x19a208.left = _0x44de3f;
                            _0x19a208.operator = _0x17c4f1;
                            var _0x3ff53a = _0x5c5cff;
                            _0x543a5e();
                            _0x19a208.right = _0x4f08e0(_0x4df2b2(), _0x6fb92b, _0x2231b6);
                            return _0x4f08e0(_0x3ff53a = _0x4a5719(_0x19a208, _0x3ff53a === _0x2f6a49 || _0x3ff53a === _0x24d4a7 ? "LogicalExpression" : "BinaryExpression"), _0x109be6, _0x2231b6);
                          }
                          return _0x44de3f;
                        }(_0x4df2b2(), -1, _0xc00ce9);
                      }(_0x212eb6);
                      if (_0x303e28(_0x19dfc2)) {
                        var _0x5aa4fb = _0x38ab12(_0x9c2e5d);
                        _0x5aa4fb.test = _0x9c2e5d;
                        _0x5aa4fb.consequent = _0x4c77cd(true);
                        _0x64fdab(_0x1c2150);
                        _0x5aa4fb.alternate = _0x4c77cd(true, _0x212eb6);
                        return _0x4a5719(_0x5aa4fb, "ConditionalExpression");
                      }
                      return _0x9c2e5d;
                    }(_0xefe0c9);
                    if (_0x5c5cff.isAssign) {
                      var _0x188b14 = _0x38ab12(_0xddfc5e);
                      _0x188b14.operator = _0x17c4f1;
                      _0x188b14.left = _0xddfc5e;
                      _0x543a5e();
                      _0x188b14.right = _0x508b54(_0xefe0c9);
                      _0x16e543(_0xddfc5e);
                      return _0x4a5719(_0x188b14, "AssignmentExpression");
                    }
                    return _0xddfc5e;
                  }
                  function _0x4df2b2() {
                    if (_0x5c5cff.prefix) {
                      var _0x5ee7b2 = _0x4687ab();
                      var _0x431ec4 = _0x5c5cff.isUpdate;
                      _0x5ee7b2.operator = _0x17c4f1;
                      _0x5ee7b2.prefix = true;
                      _0x49fd7a = true;
                      _0x543a5e();
                      _0x5ee7b2.argument = _0x4df2b2();
                      if (_0x431ec4) {
                        _0x16e543(_0x5ee7b2.argument);
                      } else if (_0x50d7bb && _0x5ee7b2.operator === "delete" && _0x5ee7b2.argument.type === "Identifier") {
                        _0x16180d(_0x5ee7b2.start, "Deleting local variable in strict mode");
                      }
                      return _0x4a5719(_0x5ee7b2, _0x431ec4 ? "UpdateExpression" : "UnaryExpression");
                    }
                    for (var _0x4aae2c = _0x173473(_0x1284ec()); _0x5c5cff.postfix && !_0x293524();) {
                      (_0x5ee7b2 = _0x38ab12(_0x4aae2c)).operator = _0x17c4f1;
                      _0x5ee7b2.prefix = false;
                      _0x16e543(_0x5ee7b2.argument = _0x4aae2c);
                      _0x543a5e();
                      _0x4aae2c = _0x4a5719(_0x5ee7b2, "UpdateExpression");
                    }
                    return _0x4aae2c;
                  }
                  function _0x173473(_0xea3b69, _0x1abe42) {
                    var _0x46bbe0;
                    if (_0x303e28(_0x301d84)) {
                      (_0x46bbe0 = _0x38ab12(_0xea3b69)).object = _0xea3b69;
                      _0x46bbe0.property = _0x5d89da(true);
                      _0x46bbe0.computed = false;
                      return _0x173473(_0x4a5719(_0x46bbe0, "MemberExpression"), _0x1abe42);
                    } else if (_0x303e28(_0x4993e2)) {
                      (_0x46bbe0 = _0x38ab12(_0xea3b69)).object = _0xea3b69;
                      _0x46bbe0.property = _0x4c77cd();
                      _0x46bbe0.computed = true;
                      _0x64fdab(_0x246e18);
                      return _0x173473(_0x4a5719(_0x46bbe0, "MemberExpression"), _0x1abe42);
                    } else if (_0x1abe42 || !_0x303e28(_0x270152)) {
                      return _0xea3b69;
                    } else {
                      (_0x46bbe0 = _0x38ab12(_0xea3b69)).callee = _0xea3b69;
                      _0x46bbe0.arguments = _0xf07ad3(_0x3fd6ac, false);
                      return _0x173473(_0x4a5719(_0x46bbe0, "CallExpression"), _0x1abe42);
                    }
                  }
                  function _0x1284ec() {
                    switch (_0x5c5cff) {
                      case _0x505af8:
                        var _0x24eb87 = _0x4687ab();
                        _0x543a5e();
                        return _0x4a5719(_0x24eb87, "ThisExpression");
                      case _0x33c692:
                        return _0x5d89da();
                      case _0x1c5f36:
                      case _0x363cb6:
                      case _0x558beb:
                        (_0x24eb87 = _0x4687ab()).value = _0x17c4f1;
                        _0x24eb87.raw = _0x478a20.slice(_0x3d0028, _0x311571);
                        _0x543a5e();
                        return _0x4a5719(_0x24eb87, "Literal");
                      case _0x1bf89c:
                      case _0x4940bf:
                      case _0x1e0997:
                        (_0x24eb87 = _0x4687ab()).value = _0x5c5cff.atomValue;
                        _0x24eb87.raw = _0x5c5cff.keyword;
                        _0x543a5e();
                        return _0x4a5719(_0x24eb87, "Literal");
                      case _0x270152:
                        var _0x19fedd = _0x549c9e;
                        var _0x2962b8 = _0x3d0028;
                        _0x543a5e();
                        var _0xdef003 = _0x4c77cd();
                        _0xdef003.start = _0x2962b8;
                        _0xdef003.end = _0x311571;
                        if (_0x256c65.locations) {
                          _0xdef003.loc.start = _0x19fedd;
                          _0xdef003.loc.end = _0x524fe5;
                        }
                        if (_0x256c65.ranges) {
                          _0xdef003.range = [_0x2962b8, _0x311571];
                        }
                        _0x64fdab(_0x3fd6ac);
                        return _0xdef003;
                      case _0x4993e2:
                        _0x24eb87 = _0x4687ab();
                        _0x543a5e();
                        _0x24eb87.elements = _0xf07ad3(_0x246e18, true, true);
                        return _0x4a5719(_0x24eb87, "ArrayExpression");
                      case _0x3823ce:
                        return function () {
                          var _0x5e3b4a = _0x4687ab();
                          var _0x336367 = true;
                          var _0x15e6ac = false;
                          _0x5e3b4a.properties = [];
                          _0x543a5e();
                          for (; !_0x303e28(_0x278f35);) {
                            if (_0x336367) {
                              _0x336367 = false;
                            } else {
                              _0x64fdab(_0x54f23b);
                              if (_0x256c65.allowTrailingCommas && _0x303e28(_0x278f35)) {
                                break;
                              }
                            }
                            var _0x21ce53;
                            var _0x3b8856 = {
                              key: _0x4289f4()
                            };
                            var _0xf8cac3 = false;
                            if (_0x303e28(_0x1c2150)) {
                              _0x3b8856.value = _0x4c77cd(true);
                              _0x21ce53 = _0x3b8856.kind = "init";
                            } else if (_0x256c65.ecmaVersion >= 5 && _0x3b8856.key.type === "Identifier" && (_0x3b8856.key.name === "get" || _0x3b8856.key.name === "set")) {
                              _0xf8cac3 = _0x15e6ac = true;
                              _0x21ce53 = _0x3b8856.kind = _0x3b8856.key.name;
                              _0x3b8856.key = _0x4289f4();
                              if (_0x5c5cff !== _0x270152) {
                                _0x57639d();
                              }
                              _0x3b8856.value = _0x22bbee(_0x4687ab(), false);
                            } else {
                              _0x57639d();
                            }
                            if (_0x3b8856.key.type === "Identifier" && (_0x50d7bb || _0x15e6ac)) {
                              for (var _0x5589de = 0; _0x5589de < _0x5e3b4a.properties.length; ++_0x5589de) {
                                var _0x54d348;
                                var _0x27b2b8 = _0x5e3b4a.properties[_0x5589de];
                                if (!(_0x27b2b8.key.name !== _0x3b8856.key.name)) {
                                  if (_0x54d348 = !((_0x54d348 = _0x21ce53 == _0x27b2b8.kind || _0xf8cac3 && _0x27b2b8.kind === "init" || _0x21ce53 === "init" && (_0x27b2b8.kind === "get" || _0x27b2b8.kind === "set")) && !_0x50d7bb && _0x21ce53 === "init" && _0x27b2b8.kind === "init") && _0x54d348) {
                                    _0x16180d(_0x3b8856.key.start, "Redefinition of property");
                                  }
                                }
                              }
                            }
                            _0x5e3b4a.properties.push(_0x3b8856);
                          }
                          return _0x4a5719(_0x5e3b4a, "ObjectExpression");
                        }();
                      case _0x1ad961:
                        _0x24eb87 = _0x4687ab();
                        _0x543a5e();
                        return _0x22bbee(_0x24eb87, false);
                      case _0x2427de:
                        return function () {
                          var _0x236876 = _0x4687ab();
                          _0x543a5e();
                          _0x236876.callee = _0x173473(_0x1284ec(), true);
                          if (_0x303e28(_0x270152)) {
                            _0x236876.arguments = _0xf07ad3(_0x3fd6ac, false);
                          } else {
                            _0x236876.arguments = _0x25bedd;
                          }
                          return _0x4a5719(_0x236876, "NewExpression");
                        }();
                      default:
                        _0x57639d();
                    }
                  }
                  function _0x4289f4() {
                    if (_0x5c5cff === _0x1c5f36 || _0x5c5cff === _0x363cb6) {
                      return _0x1284ec();
                    } else {
                      return _0x5d89da(true);
                    }
                  }
                  function _0x22bbee(_0x518cea, _0x1d7da6) {
                    if (_0x5c5cff === _0x33c692) {
                      _0x518cea.id = _0x5d89da();
                    } else if (_0x1d7da6) {
                      _0x57639d();
                    } else {
                      _0x518cea.id = null;
                    }
                    _0x518cea.params = [];
                    var _0x4ec543 = true;
                    for (_0x64fdab(_0x270152); !_0x303e28(_0x3fd6ac);) {
                      if (_0x4ec543) {
                        _0x4ec543 = false;
                      } else {
                        _0x64fdab(_0x54f23b);
                      }
                      _0x518cea.params.push(_0x5d89da());
                    }
                    var _0xf5b5a2 = _0x18496b;
                    var _0x12c389 = _0x3b8c98;
                    _0x18496b = true;
                    _0x3b8c98 = [];
                    _0x518cea.body = _0x12b68d(true);
                    _0x18496b = _0xf5b5a2;
                    _0x3b8c98 = _0x12c389;
                    if (_0x50d7bb || _0x518cea.body.body.length && _0x430102(_0x518cea.body.body[0])) {
                      for (var _0x281524 = _0x518cea.id ? -1 : 0; _0x281524 < _0x518cea.params.length; ++_0x281524) {
                        var _0x2f70be = _0x281524 < 0 ? _0x518cea.id : _0x518cea.params[_0x281524];
                        if (_0x262956(_0x2f70be.name) || _0x22bb66(_0x2f70be.name)) {
                          _0x16180d(_0x2f70be.start, "Defining '" + _0x2f70be.name + "' in strict mode");
                        }
                        if (_0x281524 >= 0) {
                          for (var _0x2ed590 = 0; _0x2ed590 < _0x281524; ++_0x2ed590) {
                            if (_0x2f70be.name === _0x518cea.params[_0x2ed590].name) {
                              _0x16180d(_0x2f70be.start, "Argument name clash in strict mode");
                            }
                          }
                        }
                      }
                    }
                    return _0x4a5719(_0x518cea, _0x1d7da6 ? "FunctionDeclaration" : "FunctionExpression");
                  }
                  function _0xf07ad3(_0x54b638, _0x273ed7, _0x43d3af) {
                    for (var _0x212173 = [], _0x101a57 = true; !_0x303e28(_0x54b638);) {
                      if (_0x101a57) {
                        _0x101a57 = false;
                      } else {
                        _0x64fdab(_0x54f23b);
                        if (_0x273ed7 && _0x256c65.allowTrailingCommas && _0x303e28(_0x54b638)) {
                          break;
                        }
                      }
                      if (_0x43d3af && _0x5c5cff === _0x54f23b) {
                        _0x212173.push(null);
                      } else {
                        _0x212173.push(_0x4c77cd(true));
                      }
                    }
                    return _0x212173;
                  }
                  function _0x5d89da(_0x49bdb9) {
                    var _0x1517df = _0x4687ab();
                    if (_0x49bdb9 && _0x256c65.forbidReserved == "everywhere") {
                      _0x49bdb9 = false;
                    }
                    if (_0x5c5cff === _0x33c692) {
                      if (!_0x49bdb9 && (_0x256c65.forbidReserved && (_0x256c65.ecmaVersion === 3 ? _0x4b8159 : _0x527029)(_0x17c4f1) || _0x50d7bb && _0x262956(_0x17c4f1)) && _0x478a20.slice(_0x3d0028, _0x311571).indexOf("\\") == -1) {
                        _0x16180d(_0x3d0028, "The keyword '" + _0x17c4f1 + "' is reserved");
                      }
                      _0x1517df.name = _0x17c4f1;
                    } else if (_0x49bdb9 && _0x5c5cff.keyword) {
                      _0x1517df.name = _0x5c5cff.keyword;
                    } else {
                      _0x57639d();
                    }
                    _0x49fd7a = false;
                    _0x543a5e();
                    return _0x4a5719(_0x1517df, "Identifier");
                  }
                };
                if (typeof _0x382f4a == "object" && typeof _0x3fb968 == "object") {
                  _0x1f80e6(_0x382f4a);
                } else {
                  _0x1e0dff = [_0x382f4a];
                  if (!((_0x1a1307 = typeof (_0x2ff683 = _0x1f80e6) == "function" ? _0x2ff683.apply(_0x382f4a, _0x1e0dff) : _0x2ff683) === _0x2bd7be)) {
                    _0x3fb968.exports = _0x1a1307;
                  }
                }
                if (!_0x195b2b.version) {
                  _0x195b2b = null;
                }
              }
              var _0x1648a8 = {
                "+": "__add",
                "-": "__subtract",
                "*": "__multiply",
                "/": "__divide",
                "%": "__modulo",
                "==": "__equals",
                "!=": "__equals"
              };
              var _0x577b09 = {
                "-": "__negate",
                "+": "__self"
              };
              var _0x3fb968 = _0x28b48a.each(["add", "subtract", "multiply", "divide", "modulo", "equals", "negate"], function (_0x20d830) {
                this["__" + _0x20d830] = "#" + _0x20d830;
              }, {
                __self: function () {
                  return this;
                }
              });
              function _0x53ea58(_0x53587f, _0x3f4763, _0x347d80) {
                var _0x3fac4f = _0x1648a8[_0x3f4763];
                if (_0x53587f && _0x53587f[_0x3fac4f]) {
                  _0x3fac4f = _0x53587f[_0x3fac4f](_0x347d80);
                  if (_0x3f4763 === "!=") {
                    return !_0x3fac4f;
                  } else {
                    return _0x3fac4f;
                  }
                }
                switch (_0x3f4763) {
                  case "+":
                    return _0x53587f + _0x347d80;
                  case "-":
                    return _0x53587f - _0x347d80;
                  case "*":
                    return _0x53587f * _0x347d80;
                  case "/":
                    return _0x53587f / _0x347d80;
                  case "%":
                    return _0x53587f % _0x347d80;
                  case "==":
                    return _0x53587f == _0x347d80;
                  case "!=":
                    return _0x53587f != _0x347d80;
                }
              }
              function _0x4953d3(_0x25eea3, _0x465b5c) {
                var _0x268122 = _0x577b09[_0x25eea3];
                if (_0x465b5c && _0x465b5c[_0x268122]) {
                  return _0x465b5c[_0x268122]();
                }
                switch (_0x25eea3) {
                  case "+":
                    return +_0x465b5c;
                  case "-":
                    return -_0x465b5c;
                }
              }
              function _0x42bd9a(_0xccf2e, _0x430e3c) {
                if (!_0xccf2e) {
                  return "";
                }
                var _0x1450b5 = [];
                function _0x5a43dd(_0xaf8640) {
                  for (var _0x3d445e = 0, _0x5c01f5 = _0x1450b5.length; _0x3d445e < _0x5c01f5; _0x3d445e++) {
                    var _0x58fde9 = _0x1450b5[_0x3d445e];
                    if (_0x58fde9[0] >= _0xaf8640) {
                      break;
                    }
                    _0xaf8640 += _0x58fde9[1];
                  }
                  return _0xaf8640;
                }
                function _0xb9c0c5(_0x53215c) {
                  return _0xccf2e.substring(_0x5a43dd(_0x53215c.range[0]), _0x5a43dd(_0x53215c.range[1]));
                }
                function _0x7a256e(_0x35bf3f, _0x81ebd6) {
                  for (var _0x3e4eba = _0x5a43dd(_0x35bf3f.range[0]), _0x15e702 = (_0x35bf3f = _0x5a43dd(_0x35bf3f.range[1]), 0), _0x3eebb7 = _0x1450b5.length - 1; _0x3eebb7 >= 0; _0x3eebb7--) {
                    if (_0x3e4eba > _0x1450b5[_0x3eebb7][0]) {
                      _0x15e702 = _0x3eebb7 + 1;
                      break;
                    }
                  }
                  _0x1450b5.splice(_0x15e702, 0, [_0x3e4eba, _0x81ebd6.length - _0x35bf3f + _0x3e4eba]);
                  _0xccf2e = _0xccf2e.substring(0, _0x3e4eba) + _0x81ebd6 + _0xccf2e.substring(_0x35bf3f);
                }
                var _0x2f4358;
                var _0xd6a5cf = (_0x430e3c = _0x430e3c || {}).url || "";
                var _0x4fdfc9 = _0x430e3c.sourceMaps;
                var _0xbdac5d = _0x430e3c.paperFeatures || {};
                var _0x5ce747 = _0x430e3c.source || _0xccf2e;
                var _0x37f3dd = _0x430e3c.offset || 0;
                var _0x4f8787 = _0x36d317.agent;
                var _0x53b410 = _0x4f8787.versionNumber;
                var _0x437578 = false;
                _0x430e3c = /\r\n|\n|\r/gm;
                if (_0x4fdfc9 && (_0x4f8787.chrome && _0x53b410 >= 30 || _0x4f8787.webkit && _0x53b410 >= 537.76 || _0x4f8787.firefox && _0x53b410 >= 23 || _0x4f8787.node)) {
                  if (_0x4f8787.node) {
                    _0x37f3dd -= 2;
                  } else if (_0x21c198 && _0xd6a5cf && !_0x21c198.location.href.indexOf(_0xd6a5cf)) {
                    _0x37f3dd = (_0x2f4358 = _0x13c74c.getElementsByTagName("html")[0].innerHTML).substr(0, _0x2f4358.indexOf(_0xccf2e) + 1).match(_0x430e3c).length + 1;
                  }
                  (_0x2f4358 = ["AA" + function (_0x2ed537) {
                    var _0x3d4f8e = "";
                    for (_0x2ed537 = (Math.abs(_0x2ed537) << 1) + (_0x2ed537 < 0 ? 1 : 0); _0x2ed537 || !_0x3d4f8e;) {
                      var _0x44843e = _0x2ed537 & 31;
                      if (_0x2ed537 >>= 5) {
                        _0x44843e |= 32;
                      }
                      _0x3d4f8e += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[_0x44843e];
                    }
                    return _0x3d4f8e;
                  }((_0x437578 = _0x37f3dd > 0 && !(_0x4f8787.chrome && _0x53b410 >= 36 || _0x4f8787.safari && _0x53b410 >= 600 || _0x4f8787.firefox && _0x53b410 >= 40 || _0x4f8787.node)) ? 0 : _0x37f3dd) + "A"]).length = (_0xccf2e.match(_0x430e3c) || []).length + 1 + (_0x437578 ? _0x37f3dd : 0);
                  _0x2f4358 = {
                    version: 3,
                    file: _0xd6a5cf,
                    names: [],
                    mappings: _0x2f4358.join(";AACA"),
                    sourceRoot: "",
                    sources: [_0xd6a5cf],
                    sourcesContent: [_0x5ce747]
                  };
                }
                if (!(_0xbdac5d.operatorOverloading === false && _0xbdac5d.moduleExports === false)) {
                  (function _0x4906bd(_0x2ada5d, _0x2277eb, _0x109b2d) {
                    if (_0x2ada5d) {
                      for (var _0x34c64e in _0x2ada5d) {
                        if (_0x34c64e !== "range" && _0x34c64e !== "loc") {
                          var _0x258354 = _0x2ada5d[_0x34c64e];
                          if (Array.isArray(_0x258354)) {
                            for (var _0x20049f = 0, _0x49474b = _0x258354.length; _0x20049f < _0x49474b; _0x20049f++) {
                              _0x4906bd(_0x258354[_0x20049f], _0x2ada5d, _0x109b2d);
                            }
                          } else if (_0x258354 && typeof _0x258354 == "object") {
                            _0x4906bd(_0x258354, _0x2ada5d, _0x109b2d);
                          }
                        }
                      }
                      if (_0x109b2d.operatorOverloading !== false) {
                        (function (_0x21d170, _0x16e1ff) {
                          switch (_0x21d170.type) {
                            case "UnaryExpression":
                              if (_0x21d170.operator in _0x577b09 && _0x21d170.argument.type !== "Literal") {
                                _0x4a6cb = _0xb9c0c5(_0x21d170.argument);
                                _0x7a256e(_0x21d170, "$__(\"" + _0x21d170.operator + "\", " + _0x4a6cb + ")");
                              }
                              break;
                            case "BinaryExpression":
                              if (_0x21d170.operator in _0x1648a8 && _0x21d170.left.type !== "Literal") {
                                _0x270943 = _0xb9c0c5(_0x21d170.left);
                                _0x332750 = _0xb9c0c5(_0x21d170.right);
                                _0x24b334 = _0x21d170.left;
                                _0x247823 = _0x21d170.right;
                                _0x24b334 = _0xccf2e.substring(_0x5a43dd(_0x24b334.range[1]), _0x5a43dd(_0x247823.range[0]));
                                _0x247823 = _0x21d170.operator;
                                _0x7a256e(_0x21d170, "__$__(" + _0x270943 + "," + _0x24b334.replace(new RegExp("\\" + _0x247823), "\"" + _0x247823 + "\"") + ", " + _0x332750 + ")");
                              }
                              break;
                            case "UpdateExpression":
                            case "AssignmentExpression":
                              var _0x4a6cb;
                              var _0x270943;
                              var _0x332750;
                              var _0x79f8aa;
                              if (!((_0x24b334 = _0x16e1ff && _0x16e1ff.type) === "ForStatement" || _0x24b334 === "BinaryExpression" && /^[=!<>]/.test(_0x16e1ff.operator) || _0x24b334 === "MemberExpression" && _0x16e1ff.computed)) {
                                if (_0x21d170.type === "UpdateExpression") {
                                  _0x247823 = (_0x4a6cb = _0xb9c0c5(_0x21d170.argument)) + " = " + (_0x79f8aa = "__$__(" + _0x4a6cb + ", \"" + _0x21d170.operator[0] + "\", 1)");
                                  if (_0x21d170.prefix) {
                                    _0x247823 = "(" + _0x247823 + ")";
                                  } else if (!(_0x24b334 !== "AssignmentExpression" && _0x24b334 !== "VariableDeclarator" && _0x24b334 !== "BinaryExpression")) {
                                    _0x247823 = _0x4a6cb + "; " + (_0x247823 = _0xb9c0c5(_0x16e1ff.left || _0x16e1ff.id) === _0x4a6cb ? _0x79f8aa : _0x247823);
                                  }
                                  _0x7a256e(_0x21d170, _0x247823);
                                } else if (/^.=$/.test(_0x21d170.operator) && _0x21d170.left.type !== "Literal") {
                                  _0x270943 = _0xb9c0c5(_0x21d170.left);
                                  _0x332750 = _0xb9c0c5(_0x21d170.right);
                                  _0x79f8aa = _0x270943 + " = __$__(" + _0x270943 + ", \"" + _0x21d170.operator[0] + "\", " + _0x332750 + ")";
                                  _0x7a256e(_0x21d170, /^\(.*\)$/.test(_0xb9c0c5(_0x21d170)) ? "(" + _0x79f8aa + ")" : _0x79f8aa);
                                }
                              }
                          }
                          var _0x24b334;
                          var _0x247823;
                        })(_0x2ada5d, _0x2277eb);
                      }
                      if (_0x109b2d.moduleExports !== false) {
                        (function (_0x4dfa96) {
                          switch (_0x4dfa96.type) {
                            case "ExportDefaultDeclaration":
                              _0x7a256e({
                                range: [_0x4dfa96.start, _0x4dfa96.declaration.start]
                              }, "module.exports = ");
                              break;
                            case "ExportNamedDeclaration":
                              var _0x1b7638;
                              var _0x17dc18 = _0x4dfa96.declaration;
                              var _0x3cdb02 = _0x4dfa96.specifiers;
                              if (_0x17dc18) {
                                if (_0x1b7638 = _0x17dc18.declarations) {
                                  _0x1b7638.forEach(function (_0x38b6c4) {
                                    _0x7a256e(_0x38b6c4, "module.exports." + _0xb9c0c5(_0x38b6c4));
                                  });
                                  _0x7a256e({
                                    range: [_0x4dfa96.start, _0x17dc18.start + _0x17dc18.kind.length]
                                  }, "");
                                }
                              } else if (!!_0x3cdb02) {
                                if (_0x3cdb02 = _0x3cdb02.map(function (_0x2446b9) {
                                  return "module.exports." + (_0x2446b9 = _0xb9c0c5(_0x2446b9)) + " = " + _0x2446b9 + "; ";
                                }).join("")) {
                                  _0x7a256e(_0x4dfa96, _0x3cdb02);
                                }
                              }
                          }
                        })(_0x2ada5d);
                      }
                    }
                  })(_0x3859fb(_0xccf2e, {
                    ranges: true,
                    preserveParens: true,
                    sourceType: "module"
                  }), null, _0xbdac5d);
                }
                if (_0x2f4358) {
                  if (_0x437578) {
                    _0xccf2e = new Array(_0x37f3dd + 1).join("\n") + _0xccf2e;
                  }
                  if (/^(inline|both)$/.test(_0x4fdfc9)) {
                    _0xccf2e += "\n//# sourceMappingURL=data:application/json;base64," + _0x536850.btoa(unescape(encodeURIComponent(JSON.stringify(_0x2f4358))));
                  }
                  _0xccf2e += "\n//# sourceURL=" + (_0xd6a5cf || "paperscript");
                }
                return {
                  url: _0xd6a5cf,
                  source: _0x5ce747,
                  code: _0xccf2e,
                  map: _0x2f4358
                };
              }
              function _0x303f73(_0x25fc3e, _0x2e8fa2, _0xe7d78) {
                var _0x34e516;
                var _0x23018f = (_0x36d317 = _0x2e8fa2).getView();
                var _0x2be68e = /\btool\.\w+|\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\b/.test(_0x25fc3e) && !/\bnew\s+Tool\b/.test(_0x25fc3e) ? new _0x382789() : null;
                var _0x3b1881 = _0x2be68e ? _0x2be68e._events : [];
                var _0x54dbe4 = ["onFrame", "onResize"].concat(_0x3b1881);
                var _0x3378d0 = [];
                var _0x40b8a0 = [];
                var _0x508f61 = typeof _0x25fc3e == "object" ? _0x25fc3e : _0x42bd9a(_0x25fc3e, _0xe7d78);
                function _0x26c212(_0x14f2e8, _0x5b3783) {
                  for (var _0xb1272d in _0x14f2e8) {
                    if (!(!_0x5b3783 && /^_/.test(_0xb1272d) || !new RegExp("([\\b\\s\\W]|^)" + _0xb1272d.replace(/\$/g, "\\$") + "\\b").test(_0x25fc3e))) {
                      _0x3378d0.push(_0xb1272d);
                      _0x40b8a0.push(_0x14f2e8[_0xb1272d]);
                    }
                  }
                }
                _0x25fc3e = _0x508f61.code;
                _0x26c212({
                  __$__: _0x53ea58,
                  $__: _0x4953d3,
                  paper: _0x2e8fa2,
                  tool: _0x2be68e
                }, true);
                _0x26c212(_0x2e8fa2);
                _0x25fc3e = "var module = { exports: {} }; " + _0x25fc3e;
                var _0x9ba5e0 = _0x28b48a.each(_0x54dbe4, function (_0x1b83e3) {
                  if (new RegExp("\\s+" + _0x1b83e3 + "\\b").test(_0x25fc3e)) {
                    _0x3378d0.push(_0x1b83e3);
                    this.push("module.exports." + _0x1b83e3 + " = " + _0x1b83e3 + ";");
                  }
                }, []).join("\n");
                if (_0x9ba5e0) {
                  _0x25fc3e += "\n" + _0x9ba5e0;
                }
                _0x25fc3e += "\nreturn module.exports;";
                _0xe7d78 = _0x36d317.agent;
                if (_0x13c74c && (_0xe7d78.chrome || _0xe7d78.firefox && _0xe7d78.versionNumber < 40)) {
                  _0x508f61 = _0x13c74c.createElement("script");
                  _0x54dbe4 = _0x13c74c.head || _0x13c74c.getElementsByTagName("head")[0];
                  if (_0xe7d78.firefox) {
                    _0x25fc3e = "\n" + _0x25fc3e;
                  }
                  _0x508f61.appendChild(_0x13c74c.createTextNode("document.__paperscript__ = function(" + _0x3378d0 + ") {" + _0x25fc3e + "\n}"));
                  _0x54dbe4.appendChild(_0x508f61);
                  _0x34e516 = _0x13c74c.__paperscript__;
                  delete _0x13c74c.__paperscript__;
                  _0x54dbe4.removeChild(_0x508f61);
                } else {
                  _0x34e516 = Function(_0x3378d0, _0x25fc3e);
                }
                var _0x221f62 = (_0x9ba5e0 = _0x34e516 && _0x34e516.apply(_0x2e8fa2, _0x40b8a0)) || {};
                _0x28b48a.each(_0x3b1881, function (_0x372fb6) {
                  var _0x2c3127 = _0x221f62[_0x372fb6];
                  if (_0x2c3127) {
                    _0x2be68e[_0x372fb6] = _0x2c3127;
                  }
                });
                if (_0x23018f) {
                  if (_0x221f62.onResize) {
                    _0x23018f.setOnResize(_0x221f62.onResize);
                  }
                  _0x23018f.emit("resize", {
                    size: _0x23018f.size,
                    delta: new _0xbc5c4a()
                  });
                  if (_0x221f62.onFrame) {
                    _0x23018f.setOnFrame(_0x221f62.onFrame);
                  }
                  _0x23018f.requestUpdate();
                }
                return _0x9ba5e0;
              }
              function _0x2cd2d0(_0x50b25c) {
                if (/^text\/(?:x-|)paperscript$/.test(_0x50b25c.type) && _0xfce993.getAttribute(_0x50b25c, "ignore") !== "true") {
                  var _0x3cc3e1 = _0xfce993.getAttribute(_0x50b25c, "canvas");
                  var _0x37949f = _0x13c74c.getElementById(_0x3cc3e1);
                  var _0x516f97 = _0x50b25c.src || _0x50b25c.getAttribute("data-src");
                  var _0x1c3c9f = _0xfce993.hasAttribute(_0x50b25c, "async");
                  var _0x44f85f = "data-paper-scope";
                  if (!_0x37949f) {
                    throw new Error(".......");
                  }
                  var _0x2039b5 = _0xfce993.get(_0x37949f.getAttribute(_0x44f85f)) || new _0xfce993().setup(_0x37949f);
                  _0x37949f.setAttribute(_0x44f85f, _0x2039b5._id);
                  if (_0x516f97) {
                    _0xa75163({
                      url: _0x516f97,
                      async: _0x1c3c9f,
                      mimeType: "text/plain",
                      onLoad: function (_0x360f94) {
                        _0x303f73(_0x360f94, _0x2039b5, _0x516f97);
                      }
                    });
                  } else {
                    _0x303f73(_0x50b25c.innerHTML, _0x2039b5, _0x50b25c.baseURI);
                  }
                  _0x50b25c.setAttribute("data-paper-ignore", "true");
                  return _0x2039b5;
                }
              }
              function _0x1d96d1() {
                _0x28b48a.each(_0x13c74c && _0x13c74c.getElementsByTagName("script"), _0x2cd2d0);
              }
              _0xbc5c4a.inject(_0x3fb968);
              _0x236987.inject(_0x3fb968);
              _0x42fac4.inject(_0x3fb968);
              if (_0x21c198) {
                if (_0x13c74c.readyState === "complete") {
                  // TOLOOK
                  setTimeout(_0x1d96d1);
                } else {
                  _0x19df6d.add(_0x21c198, {
                    load: _0x1d96d1
                  });
                }
              }
              return {
                compile: _0x42bd9a,
                execute: _0x303f73,
                load: function (_0x69c660) {
                  if (_0x69c660) {
                    return _0x2cd2d0(_0x69c660);
                  } else {
                    return _0x1d96d1();
                  }
                },
                parse: _0x3859fb,
                calculateBinary: _0x53ea58,
                calculateUnary: _0x4953d3
              };
            }.call(this);
            var _0x36d317 = new (_0xfce993.inject(_0x28b48a.exports, {
              Base: _0x28b48a,
              Numerical: _0x3c029b,
              Key: _0x344e5e,
              DomEvent: _0x19df6d,
              DomElement: _0x3c5bb5,
              document: _0x13c74c,
              window: _0x21c198,
              Symbol: _0x365352,
              PlacedSymbol: _0x34220f
            }))();
            if (_0x36d317.agent.node) {
              _0x80d65b(858)(_0x36d317);
            }
            if (!((_0x1a1307 = typeof (_0x2ff683 = _0x36d317) == "function" ? _0x2ff683.call(_0x32b466, _0x80d65b, _0x32b466, _0x3803b8) : _0x2ff683) === _0x2bd7be)) {
              _0x3803b8.exports = _0x1a1307;
            }
            return _0x36d317;
          }).call(this, typeof self == "object" ? self : null);
        },
        2321: (_0x2095e7, _0xd88795, _0x3b2d4b) => {
          'got it';
  
          Object.defineProperty(_0xd88795, "__esModule", {
            value: true
          });
          _0xd88795.Vector = _0xd88795.Matrix = undefined;
          var _0x6f020e = _0x1ee66e(_0x3b2d4b(8993));
          _0x3b2d4b = _0x1ee66e(_0x3b2d4b(715));
          function _0x1ee66e(_0x48bb4f) {
            if (_0x48bb4f && _0x48bb4f.__esModule) {
              return _0x48bb4f;
            } else {
              return {
                default: _0x48bb4f
              };
            }
          }
          _0xd88795.Matrix = _0x6f020e.default;
          _0xd88795.Vector = _0x3b2d4b.default;
        },
        8993: (_0x8b8195, _0x7502f7) => {
          'got it';
  
          function _0x26eb27(_0x402514) {
            this.m = [(_0x402514 = _0x402514 || [1, 0, 0, 1, 0, 0])[0], _0x402514[1], _0x402514[2], _0x402514[3], _0x402514[4], _0x402514[5]];
          }
          Object.defineProperty(_0x7502f7, "__esModule", {
            value: true
          });
          _0x26eb27.prototype.unit = function () {
            this.m = [1, 0, 0, 1, 0, 0];
            return this;
          };
          _0x26eb27.prototype.multiply = function (_0x2e817d) {
            var _0x1785c1 = this.m;
            var _0x543c14 = undefined;
            _0x543c14 = _0x2e817d instanceof _0x26eb27 ? _0x2e817d.m : _0x2e817d;
            var _0x408a4e = _0x1785c1[0] * _0x543c14[0] + _0x1785c1[2] * _0x543c14[1];
            var _0x1f003c = _0x1785c1[1] * _0x543c14[0] + _0x1785c1[3] * _0x543c14[1];
            var _0x58d100 = _0x1785c1[0] * _0x543c14[2] + _0x1785c1[2] * _0x543c14[3];
            var _0xd7b0ba = _0x1785c1[1] * _0x543c14[2] + _0x1785c1[3] * _0x543c14[3];
            _0x2e817d = _0x1785c1[0] * _0x543c14[4] + _0x1785c1[2] * _0x543c14[5] + _0x1785c1[4];
            _0x543c14 = _0x1785c1[1] * _0x543c14[4] + _0x1785c1[3] * _0x543c14[5] + _0x1785c1[5];
            _0x1785c1[0] = _0x408a4e;
            _0x1785c1[1] = _0x1f003c;
            _0x1785c1[2] = _0x58d100;
            _0x1785c1[3] = _0xd7b0ba;
            _0x1785c1[4] = _0x2e817d;
            _0x1785c1[5] = _0x543c14;
            return this;
          };
          _0x26eb27.prototype.inverse = function () {
            var _0x13c234 = new _0x26eb27(this.m);
            var _0x28e8d1 = _0x13c234.m;
            var _0x50df38 = 1 / (_0x28e8d1[0] * _0x28e8d1[3] - _0x28e8d1[1] * _0x28e8d1[2]);
            var _0x1d4b55 = _0x28e8d1[3] * _0x50df38;
            var _0x42a7f6 = -_0x28e8d1[1] * _0x50df38;
            var _0x94c3e3 = -_0x28e8d1[2] * _0x50df38;
            var _0x43bb96 = _0x28e8d1[0] * _0x50df38;
            var _0x15bebb = _0x50df38 * (_0x28e8d1[2] * _0x28e8d1[5] - _0x28e8d1[3] * _0x28e8d1[4]);
            _0x50df38 *= _0x28e8d1[1] * _0x28e8d1[4] - _0x28e8d1[0] * _0x28e8d1[5];
            _0x28e8d1[0] = _0x1d4b55;
            _0x28e8d1[1] = _0x42a7f6;
            _0x28e8d1[2] = _0x94c3e3;
            _0x28e8d1[3] = _0x43bb96;
            _0x28e8d1[4] = _0x15bebb;
            _0x28e8d1[5] = _0x50df38;
            return _0x13c234;
          };
          _0x26eb27.prototype.translate = function (_0x254570, _0x30bfc1) {
            return this.multiply([1, 0, 0, 1, _0x254570, _0x30bfc1]);
          };
          _0x26eb27.prototype.rotate = function (_0x1e975b) {
            var _0x7319d = _0x1e975b * Math.PI / 180;
            _0x1e975b = Math.cos(_0x7319d);
            _0x7319d = Math.sin(_0x7319d);
            return this.multiply([_0x1e975b, _0x7319d, -_0x7319d, _0x1e975b, 0, 0]);
          };
          _0x26eb27.prototype.skew = function (_0xdec55b, _0x4b52cb) {
            _0x4b52cb |= 0;
            _0xdec55b = _0xdec55b * Math.PI / 180;
            _0x4b52cb = _0x4b52cb * Math.PI / 180;
            _0xdec55b = Math.tan(_0xdec55b);
            _0x4b52cb = Math.tan(_0x4b52cb);
            return this.multiply([1, _0x4b52cb, _0xdec55b, 1, 0, 0]);
          };
          _0x26eb27.prototype.scale = function (_0x10cc38, _0x3f47d5) {
            return this.multiply([_0x10cc38, 0, 0, _0x3f47d5, 0, 0]);
          };
          _0x26eb27.prototype.transformPoint = function (_0x3f1b69, _0x4d034d) {
            var _0x31947f = _0x3f1b69;
            var _0x260458 = _0x4d034d;
            return [_0x3f1b69 = _0x31947f * this.m[0] + _0x260458 * this.m[2] + this.m[4], _0x4d034d = _0x31947f * this.m[1] + _0x260458 * this.m[3] + this.m[5]];
          };
          _0x26eb27.prototype.transformVector = function (_0x19462e, _0x3950df) {
            var _0xf095ba = _0x19462e;
            var _0x33ecf9 = _0x3950df;
            return [_0x19462e = _0xf095ba * this.m[0] + _0x33ecf9 * this.m[2], _0x3950df = _0xf095ba * this.m[1] + _0x33ecf9 * this.m[3]];
          };
          _0x7502f7.default = _0x26eb27;
        },
        715: (_0x46ad27, _0x5e3c90, _0x2de251) => {
          'got it';
  
          Object.defineProperty(_0x5e3c90, "__esModule", {
            value: true
          });
          var _0x55f4ce = _0x392366(_0x2de251(2424));
          var _0x50cd05 = _0x392366(_0x2de251(9663));
          function _0x392366(_0x42edbb) {
            if (_0x42edbb && _0x42edbb.__esModule) {
              return _0x42edbb;
            } else {
              return {
                default: _0x42edbb
              };
            }
          }
          function _0xa43225(_0x29dbe4) {
            var _0x365518 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];
            (0, _0x50cd05.default)(this, _0xa43225);
            var _0x28ffcd = (_0x435925 = (0, _0x55f4ce.default)(_0x29dbe4, 3))[0];
            var _0x385a58 = _0x435925[1];
            var _0x1b83af = _0x435925[2];
            var _0x435925 = (_0x29dbe4 = (0, _0x55f4ce.default)(_0x365518, 3))[0];
            _0x365518 = _0x29dbe4[1];
            _0x1b83af = _0x1b83af || 0;
            _0x29dbe4 = (_0x29dbe4 = _0x29dbe4[2]) || 0;
            this.x = _0x28ffcd - _0x435925;
            this.y = _0x385a58 - _0x365518;
            this.z = _0x1b83af - _0x29dbe4;
          }
          (0, _0x392366(_0x2de251(2600)).default)(_0xa43225, [{
            key: "unit",
            value: function () {
              var _0x2fd703 = this.length;
              return new _0xa43225([this.x / _0x2fd703, this.y / _0x2fd703, this.z / _0x2fd703]);
            }
          }, {
            key: "dot",
            value: function (_0x3c0d2d) {
              return this.x * _0x3c0d2d.x + this.y * _0x3c0d2d.y + this.z * _0x3c0d2d.z;
            }
          }, {
            key: "cross",
            value: function (_0x519ee5) {
              var _0x4b66ea = this.x;
              var _0x4a7e24 = this.y;
              var _0x398a35 = this.z;
              var _0x1ae2ee = _0x519ee5.x;
              var _0x316c70 = _0x519ee5.y;
              return new _0xa43225([_0x4a7e24 * (_0x519ee5 = _0x519ee5.z) - _0x398a35 * _0x316c70, _0x398a35 * _0x1ae2ee - _0x4b66ea * _0x519ee5, _0x4b66ea * _0x316c70 - _0x1ae2ee * _0x4a7e24]);
            }
          }, {
            key: "length",
            get: function () {
              var _0x3eefa1 = this.x;
              var _0x460480 = this.y;
              var _0x5ad973 = this.z;
              return Math.sqrt(_0x3eefa1 * _0x3eefa1 + _0x460480 * _0x460480 + _0x5ad973 * _0x5ad973);
            }
          }]);
          _0x2de251 = _0xa43225;
          _0x5e3c90.default = _0x2de251;
        },
        1820: (_0x18ccf7, _0x5b5d69) => {
          'got it';
  
          Object.defineProperty(_0x5b5d69, "__esModule", {
            value: true
          });
          _0x5b5d69.default = function (_0x513de2, _0x4c8816, _0x2adc66, _0x54fbfe, _0x33257d, _0x30f090, _0x4da5a0, _0x4afec9, _0x320eb2) {
            var _0x530a8f = Math.sin(_0x320eb2 * _0x47ad82 / 360);
            var _0x2b9b7e = Math.cos(_0x320eb2 * _0x47ad82 / 360);
            var _0xfdddc9 = _0x2b9b7e * (_0x513de2 - _0x2adc66) / 2 + _0x530a8f * (_0x4c8816 - _0x54fbfe) / 2;
            _0x320eb2 = -_0x530a8f * (_0x513de2 - _0x2adc66) / 2 + _0x2b9b7e * (_0x4c8816 - _0x54fbfe) / 2;
            if (_0xfdddc9 == 0 && _0x320eb2 == 0) {
              return [];
            }
            if (_0x4da5a0 === 0 || _0x4afec9 === 0) {
              return [];
            }
            _0x4da5a0 = Math.abs(_0x4da5a0);
            _0x4afec9 = Math.abs(_0x4afec9);
            if ((_0x320eb2 = _0xfdddc9 * _0xfdddc9 / (_0x4da5a0 * _0x4da5a0) + _0x320eb2 * _0x320eb2 / (_0x4afec9 * _0x4afec9)) > 1) {
              _0x4da5a0 *= Math.sqrt(_0x320eb2);
              _0x4afec9 *= Math.sqrt(_0x320eb2);
            }
            var _0x3fb6f1 = function (_0x408949, _0x26c42b, _0x1cb56b, _0xc23b8e, _0xdee5df, _0x2739ef, _0x119aac, _0x66af50, _0x3d35d2, _0x57b8f8) {
              var _0x7a46e7 = _0x57b8f8 * (_0x408949 - _0x1cb56b) / 2 + _0x3d35d2 * (_0x26c42b - _0xc23b8e) / 2;
              var _0x15fa14 = -_0x3d35d2 * (_0x408949 - _0x1cb56b) / 2 + _0x57b8f8 * (_0x26c42b - _0xc23b8e) / 2;
              var _0x3452f6 = _0x119aac * _0x119aac;
              var _0x973c77 = _0x66af50 * _0x66af50;
              var _0x132327 = _0x7a46e7 * _0x7a46e7;
              var _0x125acc = _0x15fa14 * _0x15fa14;
              var _0x1fa3e1 = _0x3452f6 * _0x973c77 - _0x3452f6 * _0x125acc - _0x973c77 * _0x132327;
              if (_0x1fa3e1 < 0) {
                _0x1fa3e1 = 0;
              }
              _0x1fa3e1 /= _0x3452f6 * _0x125acc + _0x973c77 * _0x132327;
              _0x1cb56b = _0x57b8f8 * (_0xdee5df = (_0x1fa3e1 = Math.sqrt(_0x1fa3e1) * (_0xdee5df === _0x2739ef ? -1 : 1)) * _0x119aac / _0x66af50 * _0x15fa14) - _0x3d35d2 * (_0x1fa3e1 = _0x1fa3e1 * -_0x66af50 / _0x119aac * _0x7a46e7) + (_0x408949 + _0x1cb56b) / 2;
              _0x57b8f8 = _0x3d35d2 * _0xdee5df + _0x57b8f8 * _0x1fa3e1 + (_0x26c42b + _0xc23b8e) / 2;
              _0x26c42b = (_0x7a46e7 - _0xdee5df) / _0x119aac;
              _0xc23b8e = (_0x15fa14 - _0x1fa3e1) / _0x66af50;
              _0x119aac = (-_0x7a46e7 - _0xdee5df) / _0x119aac;
              _0x1fa3e1 = (-_0x15fa14 - _0x1fa3e1) / _0x66af50;
              _0x66af50 = _0x1722b8(1, 0, _0x26c42b, _0xc23b8e);
              _0x1fa3e1 = _0x1722b8(_0x26c42b, _0xc23b8e, _0x119aac, _0x1fa3e1);
              if (_0x2739ef === 0 && _0x1fa3e1 > 0) {
                _0x1fa3e1 -= _0x47ad82;
              }
              if (_0x2739ef === 1 && _0x1fa3e1 < 0) {
                _0x1fa3e1 += _0x47ad82;
              }
              return [_0x1cb56b, _0x57b8f8, _0x66af50, _0x1fa3e1];
            }(_0x513de2, _0x4c8816, _0x2adc66, _0x54fbfe, _0x33257d, _0x30f090, _0x4da5a0, _0x4afec9, _0x530a8f, _0x2b9b7e);
            var _0x1078ea = [];
            var _0x372297 = _0x3fb6f1[2];
            var _0x3f81c9 = _0x3fb6f1[3];
            var _0x46e02d = Math.max(Math.ceil(Math.abs(_0x3f81c9) / (_0x47ad82 / 4)), 1);
            _0x3f81c9 /= _0x46e02d;
            for (var _0x5319d0 = 0; _0x5319d0 < _0x46e02d; _0x5319d0++) {
              _0x1078ea.push(function (_0x532cb5, _0xcb7455) {
                var _0x201cb2 = 4 / 3 * Math.tan(_0xcb7455 / 4);
                var _0x297665 = Math.cos(_0x532cb5);
                var _0x1f1c06 = Math.sin(_0x532cb5);
                var _0x298161 = Math.cos(_0x532cb5 + _0xcb7455);
                return [_0x297665, _0x1f1c06, _0x297665 - _0x1f1c06 * _0x201cb2, _0x1f1c06 + _0x297665 * _0x201cb2, _0x298161 + (_0xcb7455 = Math.sin(_0x532cb5 + _0xcb7455)) * _0x201cb2, _0xcb7455 - _0x298161 * _0x201cb2, _0x298161, _0xcb7455];
              }(_0x372297, _0x3f81c9));
              _0x372297 += _0x3f81c9;
            }
            return _0x1078ea.map(function (_0x2b40b8) {
              for (var _0x3ef4a5 = 0; _0x3ef4a5 < _0x2b40b8.length; _0x3ef4a5 += 2) {
                var _0x40b918 = _0x2b40b8[_0x3ef4a5 + 0];
                var _0x217fea = _0x2b40b8[_0x3ef4a5 + 1];
                var _0x28ff2c = _0x530a8f * (_0x40b918 *= _0x4da5a0) + _0x2b9b7e * (_0x217fea *= _0x4afec9);
                _0x2b40b8[_0x3ef4a5 + 0] = _0x2b9b7e * _0x40b918 - _0x530a8f * _0x217fea + _0x3fb6f1[0];
                _0x2b40b8[_0x3ef4a5 + 1] = _0x28ff2c + _0x3fb6f1[1];
              }
              return _0x2b40b8;
            });
          };
          var _0x47ad82 = Math.PI * 2;
          function _0x1722b8(_0x5eb04e, _0x16ce77, _0x343227, _0x1e6504) {
            var _0xc2d950 = _0x5eb04e * _0x343227 + _0x16ce77 * _0x1e6504;
            if ((_0xc2d950 = _0xc2d950 > 1 ? 1 : _0xc2d950) < -1) {
              _0xc2d950 = -1;
            }
            return (_0x5eb04e * _0x1e6504 - _0x16ce77 * _0x343227 < 0 ? -1 : 1) * Math.acos(_0xc2d950);
          }
        },
        9011: (_0x264cf8, _0x3597fd) => {
          'got it';
  
          Object.defineProperty(_0x3597fd, "__esModule", {
            value: true
          });
          _0x3597fd.default = function (_0x3c26a7) {
            var _0xaaac0 = 0;
            var _0xf09d1e = 0;
            var _0x1bb50e = 0;
            var _0x1da8e1 = 0;
            return _0x3c26a7.map(function (_0x486ca0) {
              var _0x4e3003 = (_0x486ca0 = _0x486ca0.slice())[0];
              var _0x2a9d05 = _0x4e3003.toUpperCase();
              if (_0x4e3003 != _0x2a9d05) {
                _0x486ca0[0] = _0x2a9d05;
                switch (_0x4e3003) {
                  case "a":
                    _0x486ca0[6] += _0x1bb50e;
                    _0x486ca0[7] += _0x1da8e1;
                    break;
                  case "v":
                    _0x486ca0[1] += _0x1da8e1;
                    break;
                  case "h":
                    _0x486ca0[1] += _0x1bb50e;
                    break;
                  default:
                    for (var _0x213ada = 1; _0x213ada < _0x486ca0.length;) {
                      _0x486ca0[_0x213ada++] += _0x1bb50e;
                      _0x486ca0[_0x213ada++] += _0x1da8e1;
                    }
                }
              }
              switch (_0x2a9d05) {
                case "Z":
                  _0x1bb50e = _0xaaac0;
                  _0x1da8e1 = _0xf09d1e;
                  break;
                case "H":
                  _0x1bb50e = _0x486ca0[1];
                  break;
                case "V":
                  _0x1da8e1 = _0x486ca0[1];
                  break;
                case "M":
                  _0x1bb50e = _0xaaac0 = _0x486ca0[1];
                  _0x1da8e1 = _0xf09d1e = _0x486ca0[2];
                  break;
                default:
                  _0x1bb50e = _0x486ca0[_0x486ca0.length - 2];
                  _0x1da8e1 = _0x486ca0[_0x486ca0.length - 1];
              }
              return _0x486ca0;
            });
          };
        },
        9944: (_0x341ce2, _0xf0a80a, _0x4874b4) => {
          'got it';
  
          var _0x223b39 = _0xc2a6c8(_0x4874b4(5315));
          var _0x2315d3 = _0xc2a6c8(_0x4874b4(2424));
          var _0x2f918a = _0xc2a6c8(_0x4874b4(542));
          var _0x5933f7 = _0xc2a6c8(_0x4874b4(2945));
          var _0x228d2d = _0xc2a6c8(_0x4874b4(9663));
          var _0x320ef6 = _0xc2a6c8(_0x4874b4(2600));
          var _0x526e47 = _0xc2a6c8(_0x4874b4(3516));
          var _0x26cb6c = _0x4874b4(2321);
          var _0x57af3b = _0x4874b4(817);
          var _0x24824b = _0xc2a6c8(_0x4874b4(3653));
          var _0x1b0ad6 = _0xc2a6c8(_0x4874b4(9011));
          var _0x43f7a8 = _0xc2a6c8(_0x4874b4(2061));
          var _0x1175e1 = _0xc2a6c8(_0x4874b4(4049));
          function _0xc2a6c8(_0x157987) {
            if (_0x157987 && _0x157987.__esModule) {
              return _0x157987;
            } else {
              return {
                default: _0x157987
              };
            }
          }
          var _0x406ac8 = (0, _0x526e47.default)("initialPath");
          var _0x36c427 = (0, _0x526e47.default)("path");
          var _0xc0c47d = (0, _0x526e47.default)("bounds");
          var _0x245fcc = (0, _0x526e47.default)("savedPaths");
          var _0xc30ba = (0, _0x526e47.default)("renderProps");
          var _0x21c2f8 = (0, _0x526e47.default)("beginPath");
          (0, _0x320ef6.default)(_0x355833, [{
            key: "save",
            value: function () {
              this[_0x245fcc].push({
                path: this[_0x36c427],
                bounds: this[_0xc0c47d],
                renderProps: (0, _0x5933f7.default)({}, this[_0xc30ba])
              });
              return this;
            }
          }, {
            key: "restore",
            value: function () {
              var _0x767a28;
              var _0x9bae35;
              var _0x22ecf6;
              if (this[_0x245fcc].length) {
                _0x767a28 = (_0x22ecf6 = this[_0x245fcc].pop()).path;
                _0x9bae35 = _0x22ecf6.bounds;
                _0x22ecf6 = _0x22ecf6.renderProps;
                this[_0x36c427] = _0x767a28;
                this[_0xc0c47d] = _0x9bae35;
                this[_0xc30ba] = _0x22ecf6;
              }
              return this;
            }
          }, {
            key: "isPointInPath",
            value: function (_0xabca77, _0x333c88) {
              return (0, _0x57af3b.isPointInPath)(this, _0xabca77, _0x333c88);
            }
          }, {
            key: "isPointInStroke",
            value: function (_0x363d0d, _0x132b2d, _0x37c989) {
              var _0x32b4f3 = _0x37c989.lineWidth;
              var _0x39805a = _0x37c989.lineCap;
              _0x37c989 = _0x37c989.lineJoin;
              if (_0x57af3b.isPointInStroke) {
                return (0, _0x57af3b.isPointInStroke)(this, _0x363d0d, _0x132b2d, {
                  lineWidth: _0x32b4f3 === undefined ? 1 : _0x32b4f3,
                  lineCap: _0x39805a === undefined ? "butt" : _0x39805a,
                  lineJoin: _0x37c989 === undefined ? "miter" : _0x37c989
                });
              }
            }
          }, {
            key: "getPointAtLength",
            value: function (_0x34b4bf) {
              return (0, _0x57af3b.getPointAtLength)(this.d, _0x34b4bf);
            }
          }, {
            key: "getTotalLength",
            value: function () {
              return (0, _0x57af3b.getTotalLength)(this.d);
            }
          }, {
            key: "transform",
            value: function () {
              for (var _0x3fc63b = arguments.length, _0x3547ab = Array(_0x3fc63b), _0x32f427 = 0; _0x32f427 < _0x3fc63b; _0x32f427++) {
                _0x3547ab[_0x32f427] = arguments[_0x32f427];
              }
              this[_0xc0c47d] = null;
              var _0x590548 = new _0x26cb6c.Matrix(_0x3547ab);
              var _0x3021b0 = this[_0x36c427];
              this[_0x36c427] = _0x3021b0.map(function (_0x425347) {
                for (var _0x36a0b3 = (0, _0x2f918a.default)(_0x425347), _0x49164f = (_0x425347 = _0x36a0b3[0], _0x36a0b3.slice(1)), _0x2c53a1 = [_0x425347], _0x556a92 = 0; _0x556a92 < _0x49164f.length; _0x556a92 += 2) {
                  var _0x18d4c5 = _0x49164f[_0x556a92];
                  var _0x2893ed = _0x49164f[_0x556a92 + 1];
                  _0x18d4c5 = _0x590548.transformPoint(_0x18d4c5, _0x2893ed);
                  _0x18d4c5 = (_0x2893ed = (0, _0x2315d3.default)(_0x18d4c5, 2))[0];
                  _0x2893ed = _0x2893ed[1];
                  _0x2c53a1.push(_0x18d4c5, _0x2893ed);
                }
                return _0x2c53a1;
              });
              return this;
            }
          }, {
            key: "translate",
            value: function (_0x3300d4, _0x4961ea) {
              _0x4961ea = new _0x26cb6c.Matrix().translate(_0x3300d4, _0x4961ea);
              return this.transform.apply(this, (0, _0x223b39.default)(_0x4961ea.m));
            }
          }, {
            key: "rotate",
            value: function (_0x5256d3) {
              _0x5256d3 = new _0x26cb6c.Matrix().rotate(_0x5256d3);
              return this.transform.apply(this, (0, _0x223b39.default)(_0x5256d3.m));
            }
          }, {
            key: "scale",
            value: function (_0x4d0f29, _0x204437) {
              if (_0x204437 == null) {
                _0x204437 = _0x4d0f29;
              }
              _0x204437 = new _0x26cb6c.Matrix().scale(_0x4d0f29, _0x204437);
              return this.transform.apply(this, (0, _0x223b39.default)(_0x204437.m));
            }
          }, {
            key: "skew",
            value: function (_0x5dc5ba, _0x48817f) {
              _0x48817f = new _0x26cb6c.Matrix().skew(_0x5dc5ba, _0x48817f);
              return this.transform.apply(this, (0, _0x223b39.default)(_0x48817f.m));
            }
          }, {
            key: "trim",
            value: function () {
              var _0x384f83 = (_0x1c5114 = (0, _0x2315d3.default)(this.bounds, 2))[0];
              var _0x1c5114 = _0x1c5114[1];
              this.translate(-_0x384f83, -_0x1c5114);
              return this;
            }
          }, {
            key: "beginPath",
            value: function () {
              this[_0x21c2f8] = true;
              return this;
            }
          }, {
            key: "to",
            value: function (_0x32e816) {
              var _0x19da23 = this[_0x36c427];
              var _0x369e82 = this[_0xc30ba];
              if (_0x19da23.length) {
                if (this[_0x21c2f8]) {
                  _0x32e816.beginPath();
                }
                _0x19da23.forEach(function (_0x481820) {
                  _0x481820 = (_0x57acdc = (0, _0x2f918a.default)(_0x481820))[0];
                  var _0x57acdc = _0x57acdc.slice(1);
                  (_0x481820 === "M" ? _0x32e816.moveTo : _0x32e816.bezierCurveTo).apply(_0x32e816, (0, _0x223b39.default)(_0x57acdc));
                });
                if (this.isClosed) {
                  _0x32e816.closePath();
                }
              }
              (0, _0x5933f7.default)(_0x32e816, _0x369e82);
              return {
                stroke: function () {
                  _0x32e816.stroke();
                  return this;
                },
                fill: function () {
                  _0x32e816.fill();
                  return this;
                }
              };
            }
          }, {
            key: "strokeStyle",
            value: function (_0x1accd1) {
              this[_0xc30ba].strokeStyle = _0x1accd1;
              return this;
            }
          }, {
            key: "fillStyle",
            value: function (_0x500b41) {
              this[_0xc30ba].fillStyle = _0x500b41;
              return this;
            }
          }, {
            key: "lineWidth",
            value: function (_0x4dc579) {
              this[_0xc30ba].lineWidth = _0x4dc579;
              return this;
            }
          }, {
            key: "lineCap",
            value: function (_0x3adb69) {
              this[_0xc30ba].lineCap = _0x3adb69;
              return this;
            }
          }, {
            key: "lineJoin",
            value: function (_0x4bfde5) {
              this[_0xc30ba].lineJoin = _0x4bfde5;
              return this;
            }
          }, {
            key: "bounds",
            get: function () {
              if (!this[_0xc0c47d]) {
                var _0xee8c5b = this[_0x36c427];
                this[_0xc0c47d] = [0, 0, 0, 0];
                if (_0xee8c5b.length) {
                  for (var _0x50bb53 = [Infinity, Infinity, -Infinity, -Infinity], _0x3c804e = 0, _0x5af233 = _0xee8c5b.length; _0x3c804e < _0x5af233; _0x3c804e++) {
                    for (var _0x1fbdd9 = _0xee8c5b[_0x3c804e].slice(1), _0x1475b5 = 0; _0x1475b5 < _0x1fbdd9.length; _0x1475b5 += 2) {
                      if (_0x1fbdd9[_0x1475b5 + 0] < _0x50bb53[0]) {
                        _0x50bb53[0] = _0x1fbdd9[_0x1475b5 + 0];
                      }
                      if (_0x1fbdd9[_0x1475b5 + 1] < _0x50bb53[1]) {
                        _0x50bb53[1] = _0x1fbdd9[_0x1475b5 + 1];
                      }
                      if (_0x1fbdd9[_0x1475b5 + 0] > _0x50bb53[2]) {
                        _0x50bb53[2] = _0x1fbdd9[_0x1475b5 + 0];
                      }
                      if (_0x1fbdd9[_0x1475b5 + 1] > _0x50bb53[3]) {
                        _0x50bb53[3] = _0x1fbdd9[_0x1475b5 + 1];
                      }
                    }
                  }
                  this[_0xc0c47d] = _0x50bb53;
                }
              }
              return this[_0xc0c47d];
            }
          }, {
            key: "size",
            get: function () {
              var _0x5864c8 = this.bounds;
              return [_0x5864c8[2] - _0x5864c8[0], _0x5864c8[3] - _0x5864c8[1]];
            }
          }, {
            key: "center",
            get: function () {
              var _0x4f3e5b = (0, _0x2315d3.default)(this.bounds, 4);
              var _0x1e0fdd = _0x4f3e5b[0];
              var _0x315259 = _0x4f3e5b[1];
              return [(_0x1e0fdd + _0x4f3e5b[2]) / 2, (_0x315259 + _0x4f3e5b[3]) / 2];
            }
          }, {
            key: "d",
            get: function () {
              var _0x8eed05 = this[_0x36c427].map(function (_0x4da8e8) {
                return (_0x4da8e8 = (0, _0x2f918a.default)(_0x4da8e8))[0] + _0x4da8e8.slice(1).join();
              }).join("");
              if (this.isClosed) {
                _0x8eed05 += "Z";
              }
              return _0x8eed05;
            }
          }, {
            key: "path",
            get: function () {
              return this[_0x36c427];
            }
          }, {
            key: "isClosed",
            get: function () {
              var _0x59d962 = this[_0x406ac8][this[_0x406ac8].length - 1];
              return _0x59d962 && _0x59d962[0] === "Z";
            }
          }]);
          _0x320ef6 = _0x355833;
          function _0x355833(_0x1e5b36) {
            (0, _0x228d2d.default)(this, _0x355833);
            if (!(0, _0x1175e1.default)(_0x1e5b36)) {
              throw new Error(".......");
            }
            this[_0x406ac8] = (0, _0x1b0ad6.default)((0, _0x24824b.default)(_0x1e5b36));
            this[_0x36c427] = (0, _0x43f7a8.default)(this[_0x406ac8]);
            this[_0xc0c47d] = null;
            this[_0x245fcc] = [];
            this[_0xc30ba] = {};
            this[_0x21c2f8] = false;
          }
          _0xf0a80a.Z = _0x320ef6;
        },
        4049: (_0x5187ec, _0x4d4a67) => {
          'got it';
  
          Object.defineProperty(_0x4d4a67, "__esModule", {
            value: true
          });
          _0x4d4a67.default = function (_0x5909d5) {
            return typeof _0x5909d5 == "string" && (_0x5909d5 = _0x5909d5.trim(), !!(/^[mzlhvcsqta]\s*[-+.0-9][^mlhvzcsqta]+/i.test(_0x5909d5) && /[\dz]$/i.test(_0x5909d5) && _0x5909d5.length > 4));
          };
        },
        2061: (_0x3b62af, _0xf7abb4, _0x4594e0) => {
          'got it';
  
          Object.defineProperty(_0xf7abb4, "__esModule", {
            value: true
          });
          var _0x45a940 = _0x493e6e(_0x4594e0(2424));
          _0xf7abb4.default = function (_0x2ba160) {
            for (var _0x34ad83, _0x22b56c = [], _0x1c0709 = 0, _0x272625 = 0, _0x163b2b = 0, _0x138509 = 0, _0x4b8282 = null, _0x5d456a = null, _0x33cd29 = 0, _0x5da795 = 0, _0x4b30ec = 0, _0x2af4ca = _0x2ba160.length; _0x4b30ec < _0x2af4ca; _0x4b30ec++) {
              var _0x2f1f46 = _0x2ba160[_0x4b30ec];
              var _0x4ca100 = _0x2f1f46[0];
              switch (_0x4ca100) {
                case "M":
                  _0x163b2b = _0x2f1f46[1];
                  _0x138509 = _0x2f1f46[2];
                  break;
                case "A":
                  var _0xb824bb = (0, _0x21e9ff.default)(_0x33cd29, _0x5da795, _0x2f1f46[6], _0x2f1f46[7], _0x2f1f46[4], _0x2f1f46[5], _0x2f1f46[1], _0x2f1f46[2], _0x2f1f46[3]);
                  if (!_0xb824bb.length) {
                    continue;
                  }
                  _0xb824bb = _0xb824bb.map(function (_0x878d92) {
                    (_0x878d92 = (0, _0x45a940.default)(_0x878d92, 8))[0];
                    _0x878d92[1];
                    return {
                      x1: _0x878d92[2],
                      y1: _0x878d92[3],
                      x2: _0x878d92[4],
                      y2: _0x878d92[5],
                      x: _0x878d92[6],
                      y: _0x878d92[7]
                    };
                  });
                  for (var _0x333288, _0x380313 = 0; _0x380313 < _0xb824bb.length; _0x380313++) {
                    _0x2f1f46 = ["C", (_0x333288 = _0xb824bb[_0x380313]).x1, _0x333288.y1, _0x333288.x2, _0x333288.y2, _0x333288.x, _0x333288.y];
                    if (_0x380313 < _0xb824bb.length - 1) {
                      _0x22b56c.push(_0x2f1f46);
                    }
                  }
                  break;
                case "S":
                  var _0x581efd = _0x33cd29;
                  var _0x2c806c = _0x5da795;
                  if (!(_0x34ad83 != "C" && _0x34ad83 != "S")) {
                    _0x581efd += _0x581efd - _0x1c0709;
                    _0x2c806c += _0x2c806c - _0x272625;
                  }
                  _0x2f1f46 = ["C", _0x581efd, _0x2c806c, _0x2f1f46[1], _0x2f1f46[2], _0x2f1f46[3], _0x2f1f46[4]];
                  break;
                case "T":
                  _0x5d456a = _0x34ad83 == "Q" || _0x34ad83 == "T" ? (_0x4b8282 = _0x33cd29 * 2 - _0x4b8282, _0x5da795 * 2 - _0x5d456a) : (_0x4b8282 = _0x33cd29, _0x5da795);
                  _0x2f1f46 = _0x398188(_0x33cd29, _0x5da795, _0x4b8282, _0x5d456a, _0x2f1f46[1], _0x2f1f46[2]);
                  break;
                case "Q":
                  _0x4b8282 = _0x2f1f46[1];
                  _0x5d456a = _0x2f1f46[2];
                  _0x2f1f46 = _0x398188(_0x33cd29, _0x5da795, _0x2f1f46[1], _0x2f1f46[2], _0x2f1f46[3], _0x2f1f46[4]);
                  break;
                case "L":
                  _0x2f1f46 = _0x497b6a(_0x33cd29, _0x5da795, _0x2f1f46[1], _0x2f1f46[2]);
                  break;
                case "H":
                  _0x2f1f46 = _0x497b6a(_0x33cd29, _0x5da795, _0x2f1f46[1], _0x5da795);
                  break;
                case "V":
                  _0x2f1f46 = _0x497b6a(_0x33cd29, _0x5da795, _0x33cd29, _0x2f1f46[1]);
                  break;
                case "Z":
                  _0x2f1f46 = _0x497b6a(_0x33cd29, _0x5da795, _0x163b2b, _0x138509);
              }
              _0x34ad83 = _0x4ca100;
              _0x33cd29 = _0x2f1f46[_0x2f1f46.length - 2];
              _0x5da795 = _0x2f1f46[_0x2f1f46.length - 1];
              _0x272625 = _0x2f1f46.length > 4 ? (_0x1c0709 = _0x2f1f46[_0x2f1f46.length - 4], _0x2f1f46[_0x2f1f46.length - 3]) : (_0x1c0709 = _0x33cd29, _0x5da795);
              _0x22b56c.push(_0x2f1f46);
            }
            return _0x22b56c;
          };
          var _0x21e9ff = _0x493e6e(_0x4594e0(1820));
          function _0x493e6e(_0x4a8a33) {
            if (_0x4a8a33 && _0x4a8a33.__esModule) {
              return _0x4a8a33;
            } else {
              return {
                default: _0x4a8a33
              };
            }
          }
          function _0x497b6a(_0x20e771, _0x524235, _0xa4b79a, _0x126307) {
            return ["C", _0x20e771, _0x524235, _0xa4b79a, _0x126307, _0xa4b79a, _0x126307];
          }
          function _0x398188(_0x4c82c9, _0x1ae0b6, _0x30026e, _0x123ed4, _0x28301a, _0x18d4c3) {
            return ["C", _0x4c82c9 / 3 + 2 / 3 * _0x30026e, _0x1ae0b6 / 3 + 2 / 3 * _0x123ed4, _0x28301a / 3 + 2 / 3 * _0x30026e, _0x18d4c3 / 3 + 2 / 3 * _0x123ed4, _0x28301a, _0x18d4c3];
          }
        },
        3653: (_0x1eb6dc, _0x4c1a59) => {
          'got it';
  
          Object.defineProperty(_0x4c1a59, "__esModule", {
            value: true
          });
          _0x4c1a59.default = function (_0x1293e3) {
            var _0x489108 = [];
            _0x1293e3.replace(_0x408010, function (_0x409e77, _0x46f1e9, _0x5b5459) {
              var _0x198e8d = _0x46f1e9.toLowerCase();
              _0x5b5459 = function (_0x19265f) {
                if (_0x19265f = _0x19265f.match(_0x41300b)) {
                  return _0x19265f.map(Number);
                } else {
                  return [];
                }
              }(_0x5b5459);
              if (_0x198e8d == "m" && _0x5b5459.length > 2) {
                _0x489108.push([_0x46f1e9].concat(_0x5b5459.splice(0, 2)));
                _0x198e8d = "l";
                _0x46f1e9 = _0x46f1e9 == "m" ? "l" : "L";
              }
              for (;;) {
                if (_0x5b5459.length == _0x423adf[_0x198e8d]) {
                  _0x5b5459.unshift(_0x46f1e9);
                  return _0x489108.push(_0x5b5459);
                }
                if (_0x5b5459.length < _0x423adf[_0x198e8d]) {
                  throw new Error(".......");
                }
                _0x489108.push([_0x46f1e9].concat(_0x5b5459.splice(0, _0x423adf[_0x198e8d])));
              }
            });
            return _0x489108;
          };
          var _0x423adf = {
            a: 7,
            c: 6,
            h: 1,
            l: 2,
            m: 2,
            q: 4,
            s: 4,
            t: 2,
            v: 1,
            z: 0
          };
          var _0x408010 = /([astvzqmhlc])([^astvzqmhlc]*)/gi;
          var _0x41300b = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi;
        },
        817: (_0x233c11, _0x5ca3af) => {
          'got it';
  
          function _0x1b01cb(_0xedc56d) {
            var _0x2ffe36 = document.createElementNS("http://www.w3.org/2000/svg", "path");
            _0x2ffe36.setAttribute("d", _0xedc56d);
            return _0x2ffe36;
          }
          Object.defineProperty(_0x5ca3af, "__esModule", {
            value: true
          });
          _0x5ca3af.getPointAtLength = function (_0x177121, _0x25450f) {
            return [_0x25450f = (_0x177121 = _0x1b01cb(_0x177121).getPointAtLength(_0x25450f)).x, _0x177121 = _0x177121.y];
          };
          _0x5ca3af.getTotalLength = function (_0x30d4df, _0x1fdc0b) {
            return _0x1b01cb(_0x30d4df).getTotalLength(_0x1fdc0b);
          };
          _0x5ca3af.isPointInPath = function (_0x23dfed, _0x294148, _0x116474) {
            _0x23dfed = _0x23dfed.d;
            _0x1d0b3c = _0x1d0b3c || document.createElement("canvas").getContext("2d");
            _0x23dfed = new Path2D(_0x23dfed);
            return _0x1d0b3c.isPointInPath(_0x23dfed, _0x294148, _0x116474);
          };
          _0x5ca3af.isPointInStroke = function (_0x2d9d73, _0x12a91c, _0x4e2fc2, _0x3c82e9) {
            var _0x580ce3 = _0x2d9d73.d;
            _0x2d9d73 = (_0x2752be = _0x3c82e9.lineWidth) === undefined ? 1 : _0x2752be;
            var _0x2752be = (_0x2752be = _0x3c82e9.lineCap) === undefined ? "butt" : _0x2752be;
            _0x3c82e9 = (_0x3c82e9 = _0x3c82e9.lineJoin) === undefined ? "miter" : _0x3c82e9;
            if ((_0x1d0b3c = _0x1d0b3c || document.createElement("canvas").getContext("2d")).isPointInStroke) {
              _0x1d0b3c.save();
              _0x1d0b3c.lineWidth = _0x2d9d73;
              _0x1d0b3c.lineCap = _0x2752be;
              _0x1d0b3c.lineJoin = _0x3c82e9;
              _0x580ce3 = new Path2D(_0x580ce3);
              _0x4e2fc2 = _0x1d0b3c.isPointInStroke(_0x580ce3, _0x12a91c, _0x4e2fc2);
              _0x1d0b3c.restore();
              return _0x4e2fc2;
            }
          };
          var _0x1d0b3c = null;
        },
        858: () => {},
        4158: () => {}
      };
      var _0x5619f3 = {};
      function _0x11318b(_0x5a150c) {
        var _0x2cfa02 = 4;
        var _0x37e745 = _0x5619f3[_0x5a150c];
        _0x2cfa02 = "ogim";
        if (!(_0x37e745 !== undefined)) {
          _0x37e745 = _0x5619f3[_0x5a150c] = {
            exports: {}
          };
          _0x5c5e52[_0x5a150c].call(_0x37e745.exports, _0x37e745, _0x37e745.exports, _0x11318b);
        }
        return _0x37e745.exports;
      }
      _0x11318b.n = _0x5e5756 => {
        var _0x676682 = _0x5e5756 && _0x5e5756.__esModule ? () => _0x5e5756.default : () => _0x5e5756;
        _0x11318b.d(_0x676682, {
          a: _0x676682
        });
        return _0x676682;
      };
      _0x11318b.d = (_0x54c726, _0x29150f) => {
        for (var _0x5a22f5 in _0x29150f) {
          if (_0x11318b.o(_0x29150f, _0x5a22f5) && !_0x11318b.o(_0x54c726, _0x5a22f5)) {
            Object.defineProperty(_0x54c726, _0x5a22f5, {
              enumerable: true,
              get: _0x29150f[_0x5a22f5]
            });
          }
        }
      };
      _0x11318b.o = (_0x3696c0, _0x2ab6bf) => Object.prototype.hasOwnProperty.call(_0x3696c0, _0x2ab6bf);
      _0x11318b.r = _0x2ff771 => {
        if (typeof Symbol != "undefined" && Symbol.toStringTag) {
          Object.defineProperty(_0x2ff771, Symbol.toStringTag, {
            value: "Module"
          });
        }
        Object.defineProperty(_0x2ff771, "__esModule", {
          value: true
        });
      };
      var _0xa9bd96;
      var _0x4d43c0 = {};
      _0xa9bd96 = 8;
      (() => {
        'got it';
  
        _0x11318b.d(_0x4d43c0, {
          default: () => _0x24a4a6
        });
        var _0x461967 = {};
        function _0x43c5c1(_0x1e8481) {
          return (_0x43c5c1 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function (_0x2687f2) {
            return typeof _0x2687f2;
          } : function (_0x2747a5) {
            if (_0x2747a5 && typeof Symbol == "function" && _0x2747a5.constructor === Symbol && _0x2747a5 !== Symbol.prototype) {
              return "symbol";
            } else {
              return typeof _0x2747a5;
            }
          })(_0x1e8481);
        }
        function _0x5b4327(_0x344c10, _0x1faa30) {
          if (!(_0x344c10 instanceof _0x1faa30)) {
            throw new TypeError("......");
          }
        }
        function _0x163490(_0x5ee845, _0x311327) {
          for (var _0x245c62 = 0; _0x245c62 < _0x311327.length; _0x245c62++) {
            var _0x1c49e5 = _0x311327[_0x245c62];
            _0x1c49e5.enumerable = _0x1c49e5.enumerable || false;
            _0x1c49e5.configurable = true;
            if ("value" in _0x1c49e5) {
              _0x1c49e5.writable = true;
            }
            Object.defineProperty(_0x5ee845, _0x1c49e5.key, _0x1c49e5);
          }
        }
        function _0xae3fcb(_0x5cd2f3, _0x21f941, _0x57ec4d) {
          if (_0x21f941) {
            _0x163490(_0x5cd2f3.prototype, _0x21f941);
          }
          if (_0x57ec4d) {
            _0x163490(_0x5cd2f3, _0x57ec4d);
          }
          Object.defineProperty(_0x5cd2f3, "prototype", {
            writable: false
          });
          return _0x5cd2f3;
        }
        function _0x5064cc(_0x2692f2, _0xcf997d, _0x4b045b) {
          if (_0xcf997d in _0x2692f2) {
            Object.defineProperty(_0x2692f2, _0xcf997d, {
              value: _0x4b045b,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            _0x2692f2[_0xcf997d] = _0x4b045b;
          }
          return _0x2692f2;
        }
        function _0x2f0cc4(_0x5cd3f8, _0x5f2cfe, _0x56f09d, _0x1a5faf, _0x3391c3, _0x29babb, _0x1632ef) {
          try {
            var _0x35bc92 = _0x5cd3f8[_0x29babb](_0x1632ef);
            var _0x1f17b0 = _0x35bc92.value;
          } catch (_0x2cbee7) {
            _0x56f09d(_0x2cbee7);
            return;
          }
          if (_0x35bc92.done) {
            _0x5f2cfe(_0x1f17b0);
          } else {
            Promise.resolve(_0x1f17b0).then(_0x1a5faf, _0x3391c3);
          }
        }
        function _0x4a4b23(_0x5effb9) {
          return function () {
            var _0x364fe5 = this;
            var _0x51e532 = arguments;
            return new Promise(function (_0x1c7d9a, _0x1e265c) {
              var _0x4d7a1d = _0x5effb9.apply(_0x364fe5, _0x51e532);
              function _0x32a891(_0x3c47d6) {
                _0x2f0cc4(_0x4d7a1d, _0x1c7d9a, _0x1e265c, _0x32a891, _0x1a54bd, "next", _0x3c47d6);
              }
              function _0x1a54bd(_0x26b1ab) {
                _0x2f0cc4(_0x4d7a1d, _0x1c7d9a, _0x1e265c, _0x32a891, _0x1a54bd, "throw", _0x26b1ab);
              }
              _0x32a891(undefined);
            });
          };
        }
        _0x11318b.r(_0x461967);
        _0x11318b.d(_0x461967, {
          ACESFilmicToneMapping: () => _0xc3db81,
          AddEquation: () => _0x3e7cc4,
          AddOperation: () => _0xb45436,
          AdditiveAnimationBlendMode: () => _0x3b8c97,
          AdditiveBlending: () => _0x453d75,
          AlphaFormat: () => _0x1aff07,
          AlwaysDepth: () => _0x151214,
          AlwaysStencilFunc: () => _0x33ddf9,
          AmbientLight: () => _0x186da0,
          AmbientLightProbe: () => _0x4e1a1a,
          AnimationClip: () => _0xac731b,
          AnimationLoader: () => _0x1cb0d3,
          AnimationMixer: () => _0x356be4,
          AnimationObjectGroup: () => _0x4874cc,
          AnimationUtils: () => _0x1c7a6e,
          ArcCurve: () => _0x1bc0f7,
          ArrayCamera: () => _0x2c8659,
          ArrowHelper: () => _0x163a33,
          Audio: () => _0x38f928,
          AudioAnalyser: () => _0x4cf142,
          AudioContext: () => _0x59e1e3,
          AudioListener: () => _0x1fe98f,
          AudioLoader: () => _0x35e38c,
          AxesHelper: () => _0x451429,
          AxisHelper: () => function (_0x125494) {
            return new _0x451429(_0x125494);
          },
          BackSide: () => _0x460782,
          BasicDepthPacking: () => _0x55ce27,
          BasicShadowMap: () => _0x5d83bb,
          BinaryTextureLoader: () => function (_0x40816c) {
            return new _0x4123db(_0x40816c);
          },
          Bone: () => _0x425abb,
          BooleanKeyframeTrack: () => _0x1fa1e5,
          BoundingBoxHelper: () => function (_0x157262, _0x57e97a) {
            return new _0x2e2d8a(_0x157262, _0x57e97a);
          },
          Box2: () => _0x4e4f24,
          Box3: () => _0x227d92,
          Box3Helper: () => _0x22ce42,
          BoxBufferGeometry: () => _0xce9a1e,
          BoxGeometry: () => _0xce9a1e,
          BoxHelper: () => _0x2e2d8a,
          BufferAttribute: () => _0x570a7f,
          BufferGeometry: () => _0x3f374d,
          BufferGeometryLoader: () => _0x40014d,
          ByteType: () => _0x13ad8a,
          Cache: () => _0x20b6af,
          Camera: () => _0x324380,
          CameraHelper: () => _0x56c180,
          CanvasRenderer: () => function () {},
          CanvasTexture: () => _0x159cf5,
          CatmullRomCurve3: () => _0x1ed704,
          CineonToneMapping: () => _0x1cc381,
          CircleBufferGeometry: () => _0x336546,
          CircleGeometry: () => _0x336546,
          ClampToEdgeWrapping: () => _0x4f55c6,
          Clock: () => _0x24e012,
          Color: () => _0x1282c2,
          ColorKeyframeTrack: () => _0x188377,
          CompressedTexture: () => _0x4d21cf,
          CompressedTextureLoader: () => _0x14555b,
          ConeBufferGeometry: () => _0x458021,
          ConeGeometry: () => _0x458021,
          CubeCamera: () => _0x534d0b,
          CubeReflectionMapping: () => _0x2097dc,
          CubeRefractionMapping: () => _0x38a1fa,
          CubeTexture: () => _0x50e2c1,
          CubeTextureLoader: () => _0x73eeb7,
          CubeUVReflectionMapping: () => _0x41f85a,
          CubeUVRefractionMapping: () => _0x14f15e,
          CubicBezierCurve: () => _0x3601fc,
          CubicBezierCurve3: () => _0x77f5e6,
          CubicInterpolant: () => _0x3efaf9,
          CullFaceBack: () => _0x1aff1d,
          CullFaceFront: () => _0x4bef96,
          CullFaceFrontBack: () => _0x51ce5f,
          CullFaceNone: () => _0x3c4b50,
          Curve: () => _0x52649c,
          CurvePath: () => _0x44e76b,
          CustomBlending: () => _0x237153,
          CustomToneMapping: () => _0x4bf0d4,
          CylinderBufferGeometry: () => _0x292b7e,
          CylinderGeometry: () => _0x292b7e,
          Cylindrical: () => _0x1308f8,
          DataTexture: () => _0x415c15,
          DataTexture2DArray: () => _0x989990,
          DataTexture3D: () => _0xd55802,
          DataTextureLoader: () => _0x4123db,
          DataUtils: () => _0x4c931e,
          DecrementStencilOp: () => _0x4296ee,
          DecrementWrapStencilOp: () => _0x68a838,
          DefaultLoadingManager: () => _0x53ffaa,
          DepthFormat: () => _0x32a157,
          DepthStencilFormat: () => _0x5ea0ca,
          DepthTexture: () => _0x4e8160,
          DirectionalLight: () => _0x26c73e,
          DirectionalLightHelper: () => _0x48cb3c,
          DiscreteInterpolant: () => _0x36b6ea,
          DodecahedronBufferGeometry: () => _0x6a340,
          DodecahedronGeometry: () => _0x6a340,
          DoubleSide: () => _0x250b44,
          DstAlphaFactor: () => _0xfa45fa,
          DstColorFactor: () => _0x308053,
          DynamicBufferAttribute: () => function (_0x2e60ab, _0x12a101) {
            return new _0x570a7f(_0x2e60ab, _0x12a101).setUsage(_0x22fb6f);
          },
          DynamicCopyUsage: () => _0x371eea,
          DynamicDrawUsage: () => _0x22fb6f,
          DynamicReadUsage: () => _0x18bd8b,
          EdgesGeometry: () => _0x26805c,
          EdgesHelper: () => function (_0x56fbd3, _0x396d87) {
            return new _0x2fd8c1(new _0x26805c(_0x56fbd3.geometry), new _0x3c9a1c({
              color: _0x396d87 !== undefined ? _0x396d87 : 16777215
            }));
          },
          EllipseCurve: () => _0x28b4b3,
          EqualDepth: () => _0x15b47f,
          EqualStencilFunc: () => _0x2e6c46,
          EquirectangularReflectionMapping: () => _0x23c46a,
          EquirectangularRefractionMapping: () => _0x3eb421,
          Euler: () => _0x609aab,
          EventDispatcher: () => _0x3a55ab,
          ExtrudeBufferGeometry: () => _0x2168e0,
          ExtrudeGeometry: () => _0x2168e0,
          FaceColors: () => _0x13e92d,
          FileLoader: () => _0x2e611b,
          FlatShading: () => _0x2e28c7,
          Float16BufferAttribute: () => _0xbcf0c7,
          Float32Attribute: () => function (_0x333cb7, _0x459152) {
            return new _0x17b758(_0x333cb7, _0x459152);
          },
          Float32BufferAttribute: () => _0x17b758,
          Float64Attribute: () => function (_0x3d540f, _0x42054b) {
            return new _0x474199(_0x3d540f, _0x42054b);
          },
          Float64BufferAttribute: () => _0x474199,
          FloatType: () => _0x4c436e,
          Fog: () => _0x2f0e9d,
          FogExp2: () => _0x8a9faa,
          Font: () => function () {},
          FontLoader: () => function () {},
          FramebufferTexture: () => _0x74996,
          FrontSide: () => _0xe70805,
          Frustum: () => _0x1d3bc5,
          GLBufferAttribute: () => _0x5c4ef4,
          GLSL1: () => _0x463ab6,
          GLSL3: () => _0x53dd45,
          GreaterDepth: () => _0x1b4927,
          GreaterEqualDepth: () => _0x5eb9db,
          GreaterEqualStencilFunc: () => _0x515303,
          GreaterStencilFunc: () => _0x5b7c9d,
          GridHelper: () => _0x41bf5e,
          Group: () => _0x2245c9,
          HalfFloatType: () => _0x399f5d,
          HemisphereLight: () => _0x9dd963,
          HemisphereLightHelper: () => _0x4f1a7d,
          HemisphereLightProbe: () => _0x2d34d8,
          IcosahedronBufferGeometry: () => _0x20b5e9,
          IcosahedronGeometry: () => _0x20b5e9,
          ImageBitmapLoader: () => _0x394802,
          ImageLoader: () => _0x40234e,
          ImageUtils: () => _0x5e369a,
          ImmediateRenderObject: () => function () {},
          IncrementStencilOp: () => _0x7ad4eb,
          IncrementWrapStencilOp: () => _0x3a0ab7,
          InstancedBufferAttribute: () => _0x4da3fc,
          InstancedBufferGeometry: () => _0x5b7573,
          InstancedInterleavedBuffer: () => _0xab7a6a,
          InstancedMesh: () => _0x238c8f,
          Int16Attribute: () => function (_0x261755, _0x4e4e46) {
            return new _0x176362(_0x261755, _0x4e4e46);
          },
          Int16BufferAttribute: () => _0x176362,
          Int32Attribute: () => function (_0x1c2739, _0xd96137) {
            return new _0x4fac2f(_0x1c2739, _0xd96137);
          },
          Int32BufferAttribute: () => _0x4fac2f,
          Int8Attribute: () => function (_0x43da23, _0x770c79) {
            return new _0x17f91a(_0x43da23, _0x770c79);
          },
          Int8BufferAttribute: () => _0x17f91a,
          IntType: () => _0x4d4fb5,
          InterleavedBuffer: () => _0x3f5d1e,
          InterleavedBufferAttribute: () => _0x49f211,
          Interpolant: () => _0x3d5743,
          InterpolateDiscrete: () => _0x797fdb,
          InterpolateLinear: () => _0x4a85dd,
          InterpolateSmooth: () => _0x2fb845,
          InvertStencilOp: () => _0x4cfe9f,
          JSONLoader: () => function () {},
          KeepStencilOp: () => _0x85718,
          KeyframeTrack: () => _0x5c15b3,
          LOD: () => _0x4bfa65,
          LatheBufferGeometry: () => _0x1a50d7,
          LatheGeometry: () => _0x1a50d7,
          Layers: () => _0x10d507,
          LensFlare: () => function () {},
          LessDepth: () => _0x3835bb,
          LessEqualDepth: () => _0x45fa99,
          LessEqualStencilFunc: () => _0x2e8197,
          LessStencilFunc: () => _0x4a21c4,
          Light: () => _0x35e82a,
          LightProbe: () => _0x1a6fa1,
          Line: () => _0x266c5e,
          Line3: () => _0x3d84a8,
          LineBasicMaterial: () => _0x3c9a1c,
          LineCurve: () => _0xc56f4,
          LineCurve3: () => _0x3bbb90,
          LineDashedMaterial: () => _0x4cd9cc,
          LineLoop: () => _0x3a7022,
          LinePieces: () => _0x4dceb9,
          LineSegments: () => _0x2fd8c1,
          LineStrip: () => _0x53873d,
          LinearEncoding: () => _0xca2f2a,
          LinearFilter: () => _0x202e90,
          LinearInterpolant: () => _0x57b9af,
          LinearMipMapLinearFilter: () => _0x1bbbb3,
          LinearMipMapNearestFilter: () => _0x14d6bd,
          LinearMipmapLinearFilter: () => _0x3f90fb,
          LinearMipmapNearestFilter: () => _0x12c84a,
          LinearToneMapping: () => _0x52e684,
          Loader: () => _0x49b33b,
          LoaderUtils: () => _0x22c4d1,
          LoadingManager: () => _0x5c0696,
          LoopOnce: () => _0x191ce6,
          LoopPingPong: () => _0x100c0f,
          LoopRepeat: () => _0x21636b,
          LuminanceAlphaFormat: () => _0x1df6d9,
          LuminanceFormat: () => _0x5ab64f,
          MOUSE: () => _0x1a1897,
          Material: () => _0x2098dd,
          MaterialLoader: () => _0x1f5f31,
          Math: () => _0x4b7135,
          MathUtils: () => _0x4b7135,
          Matrix3: () => _0x30cf5e,
          Matrix4: () => _0x33b2c9,
          MaxEquation: () => _0x9c0bcc,
          Mesh: () => _0x9b7b04,
          MeshBasicMaterial: () => _0x4c4e20,
          MeshDepthMaterial: () => _0x3b5e8b,
          MeshDistanceMaterial: () => _0x1b6045,
          MeshFaceMaterial: () => function (_0x96568a) {
            return _0x96568a;
          },
          MeshLambertMaterial: () => _0x4af1bc,
          MeshMatcapMaterial: () => _0x17f8df,
          MeshNormalMaterial: () => _0x45ab6a,
          MeshPhongMaterial: () => _0x1ff2dc,
          MeshPhysicalMaterial: () => _0x20cdf9,
          MeshStandardMaterial: () => _0x3097df,
          MeshToonMaterial: () => _0x1f6f48,
          MinEquation: () => _0x2ea231,
          MirroredRepeatWrapping: () => _0x53382e,
          MixOperation: () => _0x26fe3d,
          MultiMaterial: () => function (_0x4546a1 = []) {
            _0x4546a1.isMultiMaterial = true;
            (_0x4546a1.materials = _0x4546a1).clone = function () {
              return _0x4546a1.slice();
            };
            return _0x4546a1;
          },
          MultiplyBlending: () => _0x46b709,
          MultiplyOperation: () => _0x2e0cd0,
          NearestFilter: () => _0x297826,
          NearestMipMapLinearFilter: () => _0x3295fc,
          NearestMipMapNearestFilter: () => _0x45d0a2,
          NearestMipmapLinearFilter: () => _0x99c93,
          NearestMipmapNearestFilter: () => _0x5d282a,
          NeverDepth: () => _0x2cb585,
          NeverStencilFunc: () => _0xb62770,
          NoBlending: () => _0x1bf8b5,
          NoColors: () => _0x717af5,
          NoToneMapping: () => _0x510390,
          NormalAnimationBlendMode: () => _0x335480,
          NormalBlending: () => _0x4538d2,
          NotEqualDepth: () => _0x462790,
          NotEqualStencilFunc: () => _0x3777cc,
          NumberKeyframeTrack: () => _0x14bd5d,
          Object3D: () => _0x3b73b1,
          ObjectLoader: () => _0x467434,
          ObjectSpaceNormalMap: () => _0x3f0274,
          OctahedronBufferGeometry: () => _0x439bba,
          OctahedronGeometry: () => _0x439bba,
          OneFactor: () => _0x365ab2,
          OneMinusDstAlphaFactor: () => _0xcc53a9,
          OneMinusDstColorFactor: () => _0x3a19c8,
          OneMinusSrcAlphaFactor: () => _0x5b604c,
          OneMinusSrcColorFactor: () => _0x2d8718,
          OrthographicCamera: () => _0x2a01ad,
          PCFShadowMap: () => _0x185486,
          PCFSoftShadowMap: () => _0x2c1da1,
          PMREMGenerator: () => _0x21f128,
          ParametricGeometry: () => function () {
            return new _0x3f374d();
          },
          Particle: () => function (_0x3f8bf8) {
            return new _0x5edc9a(_0x3f8bf8);
          },
          ParticleBasicMaterial: () => function (_0x940673) {
            return new _0x541061(_0x940673);
          },
          ParticleSystem: () => function (_0x399d87, _0x37cbb5) {
            return new _0x5ead64(_0x399d87, _0x37cbb5);
          },
          ParticleSystemMaterial: () => function (_0x553c11) {
            return new _0x541061(_0x553c11);
          },
          Path: () => _0x3472b0,
          PerspectiveCamera: () => _0x41f6fd,
          Plane: () => _0x2bef9b,
          PlaneBufferGeometry: () => _0x41807a,
          PlaneGeometry: () => _0x41807a,
          PlaneHelper: () => _0x493088,
          PointCloud: () => function (_0x170c1a, _0x18952c) {
            return new _0x5ead64(_0x170c1a, _0x18952c);
          },
          PointCloudMaterial: () => function (_0x5d9d91) {
            return new _0x541061(_0x5d9d91);
          },
          PointLight: () => _0x484caa,
          PointLightHelper: () => _0x16bc5b,
          Points: () => _0x5ead64,
          PointsMaterial: () => _0x541061,
          PolarGridHelper: () => _0x4ca0ef,
          PolyhedronBufferGeometry: () => _0xc297b7,
          PolyhedronGeometry: () => _0xc297b7,
          PositionalAudio: () => _0x2e8df3,
          PropertyBinding: () => _0x246d87,
          PropertyMixer: () => _0x16824e,
          QuadraticBezierCurve: () => _0x37c8d7,
          QuadraticBezierCurve3: () => _0x49a817,
          Quaternion: () => _0x53f372,
          QuaternionKeyframeTrack: () => _0x2319ad,
          QuaternionLinearInterpolant: () => _0x1dcdd4,
          REVISION: () => _0x57ec7c,
          RGBADepthPacking: () => _0x5c286f,
          RGBAFormat: () => _0x4f87e5,
          RGBAIntegerFormat: () => _0x4ff7a5,
          RGBA_ASTC_10x10_Format: () => _0x1cb3eb,
          RGBA_ASTC_10x5_Format: () => _0xa24dc,
          RGBA_ASTC_10x6_Format: () => _0x290448,
          RGBA_ASTC_10x8_Format: () => _0x3e4fc2,
          RGBA_ASTC_12x10_Format: () => _0xae4eed,
          RGBA_ASTC_12x12_Format: () => _0x1f55b4,
          RGBA_ASTC_4x4_Format: () => _0x451bde,
          RGBA_ASTC_5x4_Format: () => _0x4d0164,
          RGBA_ASTC_5x5_Format: () => _0x3eddd4,
          RGBA_ASTC_6x5_Format: () => _0x346895,
          RGBA_ASTC_6x6_Format: () => _0x4327c4,
          RGBA_ASTC_8x5_Format: () => _0x314527,
          RGBA_ASTC_8x6_Format: () => _0x5e5a83,
          RGBA_ASTC_8x8_Format: () => _0x29cc04,
          RGBA_BPTC_Format: () => _0x502bea,
          RGBA_ETC2_EAC_Format: () => _0x704911,
          RGBA_PVRTC_2BPPV1_Format: () => _0x28d14d,
          RGBA_PVRTC_4BPPV1_Format: () => _0x448d81,
          RGBA_S3TC_DXT1_Format: () => _0x5daab3,
          RGBA_S3TC_DXT3_Format: () => _0x5adc18,
          RGBA_S3TC_DXT5_Format: () => _0x326843,
          RGBFormat: () => _0x1e0c08,
          RGBIntegerFormat: () => _0x5b268d,
          RGB_ETC1_Format: () => _0x5be57b,
          RGB_ETC2_Format: () => _0x30604a,
          RGB_PVRTC_2BPPV1_Format: () => _0x29ff69,
          RGB_PVRTC_4BPPV1_Format: () => _0x4a092b,
          RGB_S3TC_DXT1_Format: () => _0x55be8d,
          RGFormat: () => _0x2d6162,
          RGIntegerFormat: () => _0x2953f9,
          RawShaderMaterial: () => _0x1cac03,
          Ray: () => _0x123ff1,
          Raycaster: () => _0x426fe0,
          RectAreaLight: () => _0x17478f,
          RedFormat: () => _0x6ff49f,
          RedIntegerFormat: () => _0x24a0c9,
          ReinhardToneMapping: () => _0x42f8a8,
          RepeatWrapping: () => _0xc7a5e0,
          ReplaceStencilOp: () => _0x26e577,
          ReverseSubtractEquation: () => _0x3b9cf9,
          RingBufferGeometry: () => _0x39022f,
          RingGeometry: () => _0x39022f,
          SRGB8_ALPHA8_ASTC_10x10_Format: () => _0x5db82b,
          SRGB8_ALPHA8_ASTC_10x5_Format: () => _0x3f579d,
          SRGB8_ALPHA8_ASTC_10x6_Format: () => _0x4c593e,
          SRGB8_ALPHA8_ASTC_10x8_Format: () => _0x364888,
          SRGB8_ALPHA8_ASTC_12x10_Format: () => _0x5e81bc,
          SRGB8_ALPHA8_ASTC_12x12_Format: () => _0x34b0d1,
          SRGB8_ALPHA8_ASTC_4x4_Format: () => _0x4764cd,
          SRGB8_ALPHA8_ASTC_5x4_Format: () => _0x39c5d2,
          SRGB8_ALPHA8_ASTC_5x5_Format: () => _0xa659c4,
          SRGB8_ALPHA8_ASTC_6x5_Format: () => _0x5e31bf,
          SRGB8_ALPHA8_ASTC_6x6_Format: () => _0x3337e4,
          SRGB8_ALPHA8_ASTC_8x5_Format: () => _0x1d5b7d,
          SRGB8_ALPHA8_ASTC_8x6_Format: () => _0x660743,
          SRGB8_ALPHA8_ASTC_8x8_Format: () => _0x124eee,
          Scene: () => _0x291ff9,
          SceneUtils: () => _0x553b7d,
          ShaderChunk: () => _0x53dfdc,
          ShaderLib: () => _0x3543c2,
          ShaderMaterial: () => _0x18cc6b,
          ShadowMaterial: () => _0x4c27da,
          Shape: () => _0xe5830f,
          ShapeBufferGeometry: () => _0x5a2b3b,
          ShapeGeometry: () => _0x5a2b3b,
          ShapePath: () => _0x3877cf,
          ShapeUtils: () => _0x513d24,
          ShortType: () => _0x143891,
          Skeleton: () => _0x571a0b,
          SkeletonHelper: () => _0x55d828,
          SkinnedMesh: () => _0x1d0bf6,
          SmoothShading: () => _0x2ff235,
          Sphere: () => _0x26f734,
          SphereBufferGeometry: () => _0x330d7e,
          SphereGeometry: () => _0x330d7e,
          Spherical: () => _0x40b38f,
          SphericalHarmonics3: () => _0xa5033,
          SplineCurve: () => _0x416de9,
          SpotLight: () => _0x4c87af,
          SpotLightHelper: () => _0x3ef4c4,
          Sprite: () => _0x5edc9a,
          SpriteMaterial: () => _0x4b5ffc,
          SrcAlphaFactor: () => _0x539d6e,
          SrcAlphaSaturateFactor: () => _0x495566,
          SrcColorFactor: () => _0x46c9b8,
          StaticCopyUsage: () => _0xfc1596,
          StaticDrawUsage: () => _0x4d2364,
          StaticReadUsage: () => _0x4843a5,
          StereoCamera: () => _0x57d891,
          StreamCopyUsage: () => _0x6ea94a,
          StreamDrawUsage: () => _0x16029e,
          StreamReadUsage: () => _0x5c4c05,
          StringKeyframeTrack: () => _0x47b732,
          SubtractEquation: () => _0x2dbbc4,
          SubtractiveBlending: () => _0x266139,
          TOUCH: () => _0x5eb3cf,
          TangentSpaceNormalMap: () => _0x360692,
          TetrahedronBufferGeometry: () => _0x2784ec,
          TetrahedronGeometry: () => _0x2784ec,
          TextGeometry: () => function () {
            return new _0x3f374d();
          },
          Texture: () => _0x3d39cb,
          TextureLoader: () => _0x1a00a6,
          TorusBufferGeometry: () => _0x18f6df,
          TorusGeometry: () => _0x18f6df,
          TorusKnotBufferGeometry: () => _0x38f3d7,
          TorusKnotGeometry: () => _0x38f3d7,
          Triangle: () => _0x54aa93,
          TriangleFanDrawMode: () => _0x498f85,
          TriangleStripDrawMode: () => _0x4f7674,
          TrianglesDrawMode: () => _0x78b248,
          TubeBufferGeometry: () => _0x3d5222,
          TubeGeometry: () => _0x3d5222,
          UVMapping: () => _0x658452,
          Uint16Attribute: () => function (_0x120b9f, _0x5d4924) {
            return new _0x564c79(_0x120b9f, _0x5d4924);
          },
          Uint16BufferAttribute: () => _0x564c79,
          Uint32Attribute: () => function (_0x259fe8, _0x1a5aaf) {
            return new _0x3026e9(_0x259fe8, _0x1a5aaf);
          },
          Uint32BufferAttribute: () => _0x3026e9,
          Uint8Attribute: () => function (_0x4f7fc0, _0x3a6e86) {
            return new _0x2ecd21(_0x4f7fc0, _0x3a6e86);
          },
          Uint8BufferAttribute: () => _0x2ecd21,
          Uint8ClampedAttribute: () => function (_0x37c792, _0x8f662d) {
            return new _0x472dcd(_0x37c792, _0x8f662d);
          },
          Uint8ClampedBufferAttribute: () => _0x472dcd,
          Uniform: () => _0x472c4a,
          UniformsLib: () => _0x2b5bcc,
          UniformsUtils: () => _0x491e76,
          UnsignedByteType: () => _0x3a53e9,
          UnsignedInt248Type: () => _0x32836b,
          UnsignedIntType: () => _0x1f1250,
          UnsignedShort4444Type: () => _0x47725a,
          UnsignedShort5551Type: () => _0x5f5cb5,
          UnsignedShort565Type: () => _0x2c144c,
          UnsignedShortType: () => _0x2339bc,
          VSMShadowMap: () => _0x31dc34,
          Vector2: () => _0x25f874,
          Vector3: () => _0x1d20ef,
          Vector4: () => _0x275701,
          VectorKeyframeTrack: () => _0x3604eb,
          Vertex: () => function (_0x14b570, _0x1cbc3c, _0x49dbc4) {
            return new _0x1d20ef(_0x14b570, _0x1cbc3c, _0x49dbc4);
          },
          VertexColors: () => _0x469131,
          VideoTexture: () => _0x4323f1,
          WebGL1Renderer: () => _0x2f6871,
          WebGLCubeRenderTarget: () => _0x3488b9,
          WebGLMultipleRenderTargets: () => _0x332a03,
          WebGLMultisampleRenderTarget: () => _0x588426,
          WebGLRenderTarget: () => _0x4eb744,
          WebGLRenderTargetCube: () => function (_0x45af44, _0x46ae22, _0x1e19ac) {
            return new _0x3488b9(_0x45af44, _0x1e19ac);
          },
          WebGLRenderer: () => _0x45974d,
          WebGLUtils: () => _0x37ac40,
          WireframeGeometry: () => _0x4bd317,
          WireframeHelper: () => function (_0x3aaf8d, _0x2b9a19) {
            return new _0x2fd8c1(new _0x4bd317(_0x3aaf8d.geometry), new _0x3c9a1c({
              color: _0x2b9a19 !== undefined ? _0x2b9a19 : 16777215
            }));
          },
          WrapAroundEnding: () => _0x408fc9,
          XHRLoader: () => function (_0x2b4d9f) {
            return new _0x2e611b(_0x2b4d9f);
          },
          ZeroCurvatureEnding: () => _0x1f25f8,
          ZeroFactor: () => _0x17fe61,
          ZeroSlopeEnding: () => _0x3c5781,
          ZeroStencilOp: () => _0x4a2159,
          sRGBEncoding: () => _0x320ef1
        });
        var _0x4133c6 = _0x11318b(7757);
        var _0x2af9e7 = _0x11318b.n(_0x4133c6);
        var _0x35fa32 = _0x11318b(5809);
        var _0x176f05 = _0x11318b.n(_0x35fa32);
        var _0x4cd0fa = _0x1f42d1;
        function _0x1f42d1(_0x13aa59, _0x4a2a58) {
          var _0x5d0f71 = _0x55027c();
          return (_0x1f42d1 = function (_0x1ac9f8, _0x379224) {
            return _0x5d0f71[_0x1ac9f8 -= 149];
          })(_0x13aa59, _0x4a2a58);
        }
        function _0x55027c() {
          var _0x3c76f0;
          var _0x4dfde4 = ["49340MtYtYz", "9765099ZDOSzk", "./3D/sucai1.png", "601585gkptOd", "70542OWptQh", "2472638idyFgm", "3768232unbCYm", "10KvREEo", "./3D/sucai1.png", "24XEqqNL", "./3D/sucai1.png", "24279SGljSL"];
          _0x3c76f0 = 5;
          return (_0x55027c = function () {
            return _0x4dfde4;
          })();
        }
        (function () {
          var _0x47e83f = _0x1f42d1;
          var _0x85924c = _0x55027c();
          for (;;) {
            try {
              if (-parseInt(_0x47e83f(149)) + parseInt(_0x47e83f(156)) / 2 * (parseInt(_0x47e83f(160)) / 3) + parseInt(_0x47e83f(158)) / 4 * (-parseInt(_0x47e83f(152)) / 5) + -parseInt(_0x47e83f(153)) / 6 + -parseInt(_0x47e83f(154)) / 7 + parseInt(_0x47e83f(155)) / 8 + parseInt(_0x47e83f(150)) / 9 == 460272) {
                break;
              }
              _0x85924c.push(_0x85924c.shift());
            } catch (_0x33c4ff) {
              _0x85924c.push(_0x85924c.shift());
            }
          }
        })();
        const _0x4d5890 = {
          icon: {
            leftBtn: _0x4cd0fa(159),
            rightBtn: "./3D/sucai1.png",
            maxBtn: _0x4cd0fa(151),
            closeBtn: _0x4cd0fa(157)
          },
          XTUtuList: [],
          token: ""
        };
        function _0x18ac31(_0x179a85, _0x3e87ba) {
          var _0x48ab72 = _0x1d1232;
          var _0x23bce1 = typeof Symbol !== _0x48ab72(256) && _0x179a85[Symbol[_0x48ab72(198)]] || _0x179a85[_0x48ab72(199)];
          if (!_0x23bce1) {
            if (Array[_0x48ab72(191)](_0x179a85) || (_0x23bce1 = function (_0x576a2f, _0x5b605f) {
              var _0x12fee0 = 13;
              var _0x473362 = _0x1d1232;
              _0x12fee0 = 14;
              if (_0x576a2f) {
                if (typeof _0x576a2f === _0x473362(211)) {
                  return _0x20faaf(_0x576a2f, _0x5b605f);
                }
                var _0x25db10 = 11;
                var _0x5805a9 = Object[_0x473362(246)].toString[_0x473362(274)](_0x576a2f)[_0x473362(178)](8, -1);
                _0x25db10 = 10;
                if ((_0x5805a9 = _0x5805a9 === _0x473362(174) && _0x576a2f[_0x473362(263)] ? _0x576a2f[_0x473362(263)].name : _0x5805a9) === _0x473362(281) || _0x5805a9 === _0x473362(252)) {
                  return Array[_0x473362(177)](_0x576a2f);
                } else if (_0x5805a9 === _0x473362(240) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/[_0x473362(207)](_0x5805a9)) {
                  return _0x20faaf(_0x576a2f, _0x5b605f);
                } else {
                  return undefined;
                }
              }
            }(_0x179a85)) || _0x3e87ba && _0x179a85 && typeof _0x179a85.length === _0x48ab72(269)) {
              if (_0x23bce1) {
                _0x179a85 = _0x23bce1;
              }
              var _0x227929 = 0;
              return {
                s: _0x3e87ba = function () {},
                n: function () {
                  if (_0x227929 >= _0x179a85.length) {
                    return {
                      done: true
                    };
                  } else {
                    return {
                      done: false,
                      value: _0x179a85[_0x227929++]
                    };
                  }
                },
                e: function (_0x278829) {
                  throw _0x278829;
                },
                f: _0x3e87ba
              };
            }
            throw new TypeError(_0x48ab72(189));
          }
          var _0x4f6da0;
          var _0x36cbe6 = true;
          var _0x2ff145 = false;
          return {
            s: function () {
              _0x23bce1 = _0x23bce1.call(_0x179a85);
            },
            n: function () {
              var _0x2d6acb = _0x48ab72;
              var _0x3c1a0b = _0x23bce1[_0x2d6acb(212)]();
              _0x36cbe6 = _0x3c1a0b[_0x2d6acb(264)];
              return _0x3c1a0b;
            },
            e: function (_0x17aa92) {
              _0x2ff145 = true;
              _0x4f6da0 = _0x17aa92;
            },
            f: function () {
              var _0x343eb4 = _0x48ab72;
              try {
                if (!(_0x36cbe6 || _0x23bce1[_0x343eb4(282)] == null)) {
                  _0x23bce1[_0x343eb4(282)]();
                }
              } finally {
                if (_0x2ff145) {
                  throw _0x4f6da0;
                }
              }
            }
          };
        }
        function _0x20faaf(_0xa366bf, _0x3680f3) {
          if (_0x3680f3 == null || _0x3680f3 > _0xa366bf[_0x1d1232(232)]) {
            _0x3680f3 = _0xa366bf.length;
          }
          for (var _0x5c2f79 = 0, _0xb5993a = new Array(_0x3680f3); _0x5c2f79 < _0x3680f3; _0x5c2f79++) {
            _0xb5993a[_0x5c2f79] = _0xa366bf[_0x5c2f79];
          }
          return _0xb5993a;
        }
        function _0x1d1232(_0xe04a0d, _0xfdad4f) {
          var _0x3a1ba1 = _0x12c1d3();
          return (_0x1d1232 = function (_0x55a676, _0x1c81cb) {
            return _0x3a1ba1[_0x55a676 -= 174];
          })(_0xe04a0d, _0xfdad4f);
        }
        (function () {
          var _0x1e813e = _0x1d1232;
          var _0xdb37d1 = _0x12c1d3();
          for (;;) {
            try {
              if (-parseInt(_0x1e813e(247)) + parseInt(_0x1e813e(192)) / 2 + -parseInt(_0x1e813e(286)) / 3 * (parseInt(_0x1e813e(197)) / 4) + -parseInt(_0x1e813e(270)) / 5 * (parseInt(_0x1e813e(242)) / 6) + -parseInt(_0x1e813e(277)) / 7 + -parseInt(_0x1e813e(194)) / 8 + parseInt(_0x1e813e(215)) / 9 == 332933) {
                break;
              }
              _0xdb37d1.push(_0xdb37d1.shift());
            } catch (_0x45fe8b) {
              _0xdb37d1.push(_0xdb37d1.shift());
            }
          }
        })();
        var _0x30ea24;
        _0xae3fcb(_0x4fc378, [{
          key: (_0x30ea24 = _0x1d1232)(193),
          value: function () {
            var _0x4952b3 = _0x30ea24;
            var _0x271f23 = (_0x311c4d = this[_0x4952b3(223)]()).swiperEl;
            var _0x107efd = _0x311c4d[_0x4952b3(180)];
            var _0x311c4d = _0x311c4d[_0x4952b3(245)];
            this[_0x4952b3(288)][_0x4952b3(206)](_0x271f23);
            this[_0x4952b3(180)] = _0x107efd;
            this.swiperEl = _0x271f23;
            this[_0x4952b3(245)] = _0x311c4d;
            this[_0x4952b3(210)](_0x311c4d);
            this[_0x4952b3(179)](_0x107efd);
            return this[_0x4952b3(187)](_0x271f23);
          }
        }, {
          key: _0x30ea24(260),
          value: function (_0x3132fd) {
            var _0x52b3f9 = _0x30ea24;
            if (this[_0x52b3f9(176)]) {
              this[_0x52b3f9(176)](_0x3132fd);
            }
          }
        }, {
          key: _0x30ea24(223),
          value: function () {
            var _0x4f1542 = _0x30ea24;
            var _0x2f3b10 = document.createElement(_0x4f1542(251));
            _0x2f3b10[_0x4f1542(243)][_0x4f1542(279)] = _0x4f1542(184);
            _0x2f3b10[_0x4f1542(243)][_0x4f1542(214)] = _0x4f1542(188);
            _0x2f3b10[_0x4f1542(200)] = this.swiperClass;
            var _0x584f5c = document[_0x4f1542(201)](_0x4f1542(251));
            _0x584f5c[_0x4f1542(243)][_0x4f1542(279)] = _0x4f1542(184);
            _0x584f5c[_0x4f1542(243)][_0x4f1542(214)] = _0x4f1542(188);
            var _0x26240a = document[_0x4f1542(201)](_0x4f1542(251));
            _0x26240a[_0x4f1542(200)] = "XTU-so-hp";
            _0x26240a[_0x4f1542(243)][_0x4f1542(261)] = _0x4f1542(257);
            _0x26240a[_0x4f1542(243)][_0x4f1542(185)] = "center";
            _0x26240a[_0x4f1542(243)].justifyContent = _0x4f1542(202);
            _0x26240a[_0x4f1542(243)][_0x4f1542(214)] = _0x4f1542(238);
            _0x26240a.style[_0x4f1542(218)] = 0;
            _0x26240a.style[_0x4f1542(203)] = "10px";
            _0x26240a[_0x4f1542(243)][_0x4f1542(266)] = 100;
            _0x26240a.style.height = "10px";
            _0x26240a[_0x4f1542(243)].width = "100%";
            _0x2f3b10.appendChild(_0x584f5c);
            return {
              swiperEl: _0x2f3b10,
              swiperWrap: _0x584f5c,
              dotWrap: _0x26240a
            };
          }
        }, {
          key: "rendeso",
          value: function (_0x1b2246) {
            var _0x43db7a;
            var _0x27b6cf = _0x30ea24;
            var _0xe638a2 = 1;
            var _0x3da726 = _0x18ac31(this[_0x27b6cf(209)]);
            try {
              for (_0x3da726.s(); !(_0x43db7a = _0x3da726.n())[_0x27b6cf(264)];) {
                _0x43db7a[_0x27b6cf(278)];
                var _0x5b9981 = document.createElement("div");
                _0x5b9981[_0x27b6cf(200)] = _0x27b6cf(220);
                _0x5b9981[_0x27b6cf(243)].borderRadius = "10px";
                _0x5b9981.style.width = "0";
                _0x5b9981[_0x27b6cf(243)][_0x27b6cf(231)] = _0x27b6cf(190);
                _0x5b9981[_0x27b6cf(243)][_0x27b6cf(175)] = "#999";
                _0x5b9981[_0x27b6cf(243)][_0x27b6cf(239)] = _0x27b6cf(181);
                if (_0xe638a2 == 1) {
                  _0x5b9981.style.background = _0x27b6cf(255);
                  _0x5b9981[_0x27b6cf(259)][_0x27b6cf(249)](_0x27b6cf(213));
                }
                _0x1b2246[_0x27b6cf(206)](_0x5b9981);
                _0xe638a2++;
              }
            } catch (_0x423048) {
              _0x3da726.e(_0x423048);
            } finally {
              _0x3da726.f();
            }
          }
        }, {
          key: _0x30ea24(179),
          value: function (_0x54515e) {
            var _0x44e70d;
            var _0x44ede4 = _0x30ea24;
            var _0x496dc2 = _0x18ac31(this.XTUtuList);
            try {
              for (_0x496dc2.s(); !(_0x44e70d = _0x496dc2.n())[_0x44ede4(264)];) {
                var _0x1b0082 = _0x44e70d[_0x44ede4(278)];
                var _0x2026b0 = document[_0x44ede4(201)]("div");
                _0x2026b0[_0x44ede4(243)][_0x44ede4(254)] = "left";
                _0x2026b0[_0x44ede4(243)][_0x44ede4(214)] = _0x44ede4(188);
                _0x2026b0[_0x44ede4(243)].width = _0x44ede4(284);
                _0x2026b0[_0x44ede4(243)][_0x44ede4(231)] = ""[_0x44ede4(262)](this.baseHeight, "px");
                _0x2026b0.style.overflow = _0x44ede4(184);
                var _0x2ba69e = document[_0x44ede4(201)](_0x44ede4(251));
                if (window.self !== window.top) {
                  _0x2ba69e.id = "XTU_an_"[_0x44ede4(262)](_0x1b0082[_0x44ede4(217)]);
                  _0x2ba69e[_0x44ede4(243)][_0x44ede4(244)] = ""[_0x44ede4(262)](this[_0x44ede4(280)], "px");
                  _0x2ba69e.style[_0x44ede4(231)] = ""[_0x44ede4(262)](this.baseHeight, "px");
                  _0x2ba69e[_0x44ede4(243)][_0x44ede4(214)] = _0x44ede4(238);
                  _0x2ba69e[_0x44ede4(243)][_0x44ede4(218)] = 0;
                  _0x2ba69e[_0x44ede4(243)].top = 0;
                  _0x2ba69e[_0x44ede4(243)][_0x44ede4(266)] = 3;
                  _0x2ba69e[_0x44ede4(243)].backgroundImage = _0x44ede4(237)[_0x44ede4(262)](_0x1b0082[_0x44ede4(276)], _0x44ede4(186));
                  _0x2ba69e.style[_0x44ede4(234)] = _0x44ede4(202);
                  _0x2ba69e.style.backgroundRepeat = "no-repeat";
                  _0x2ba69e[_0x44ede4(243)][_0x44ede4(241)] = _0x44ede4(205);
                  _0x2ba69e[_0x44ede4(243)][_0x44ede4(267)] = _0x44ede4(273);
                  _0x2026b0[_0x44ede4(206)](_0x2ba69e);
                  var _0x592b28 = document.createElement(_0x44ede4(287));
                  _0x592b28[_0x44ede4(244)] = this.baseWidth > 1000 ? this.baseWidth : 1000;
                  _0x592b28[_0x44ede4(231)] = this[_0x44ede4(227)] > 1000 ? this.baseHeight : 1000;
                  _0x592b28[_0x44ede4(243)][_0x44ede4(244)] = ""[_0x44ede4(262)](this.baseWidth, "px");
                  _0x592b28[_0x44ede4(243)].height = ""[_0x44ede4(262)](this[_0x44ede4(227)], "px");
                  _0x592b28.id = _0x44ede4(285)[_0x44ede4(262)](_0x1b0082[_0x44ede4(217)]);
                  _0x2026b0[_0x44ede4(206)](_0x592b28);
                  _0x54515e.appendChild(_0x2026b0);
                }
              }
            } catch (_0x106e0b) {
              _0x496dc2.e(_0x106e0b);
            } finally {
              _0x496dc2.f();
            }
          }
        }, {
          key: _0x30ea24(187),
          value: function (_0x2555c6) {
            var _0x508a73 = _0x30ea24;
            var _0x28619c = this;
            var _0x4465f0 = this;
            this[_0x508a73(228)] = new (_0x176f05())(document.querySelector("."[_0x508a73(262)](this.swiperClass)), {
              callback: function (_0x53de3e, _0x4b4df4) {
                var _0x57050b = _0x508a73;
                if (_0x4465f0[_0x57050b(260)]) {
                  _0x4465f0[_0x57050b(260)](_0x53de3e);
                }
                for (var _0xd5a443 = document[_0x57050b(272)]("."[_0x57050b(262)](_0x4465f0[_0x57050b(222)], _0x57050b(275))), _0x373176 = 0; _0x373176 < _0xd5a443[_0x57050b(232)]; _0x373176++) {
                  _0xd5a443[_0x373176][_0x57050b(259)][_0x57050b(195)](_0x57050b(213));
                  if (_0x373176 == _0x53de3e) {
                    _0xd5a443[_0x373176].style[_0x57050b(175)] = "#505050";
                    _0xd5a443[_0x373176][_0x57050b(259)][_0x57050b(283)]("action");
                  } else {
                    _0xd5a443[_0x373176][_0x57050b(243)][_0x57050b(175)] = _0x57050b(216);
                  }
                }
              }
            });
            var _0x2be322 = _0x20f0bb(_0x4d5890[_0x508a73(183)].leftBtn);
            _0x2be322.className = "XTU-z";
            var _0x2e0767 = this.mySwiper[_0x508a73(233)]();
            _0x2be322[_0x508a73(253)] = function () {
              var _0x1ea842 = _0x508a73;
              if (_0x28619c[_0x1ea842(228)][_0x1ea842(182)]() == 0) {
                _0x28619c[_0x1ea842(228)][_0x1ea842(271)](_0x2e0767 - 1);
              } else {
                _0x28619c[_0x1ea842(228)].prev();
              }
            };
            (_0x2be322 = _0x20f0bb(_0x4d5890[_0x508a73(183)][_0x508a73(289)])).className = "XTU-y";
            _0x2be322[_0x508a73(243)][_0x508a73(218)] = _0x508a73(208);
            _0x2be322[_0x508a73(243)][_0x508a73(230)] = _0x508a73(235);
            _0x2be322[_0x508a73(253)] = function () {
              var _0xd79872 = _0x508a73;
              if (_0x28619c.mySwiper[_0xd79872(182)]() == _0x2e0767 - 1) {
                _0x28619c[_0xd79872(228)][_0xd79872(271)](0);
              } else {
                _0x28619c[_0xd79872(228)][_0xd79872(212)]();
              }
            };
          }
        }]);
        var _0x4692ca = _0x4fc378;
        function _0x4fc378(_0x174f33, _0x5714f6) {
          var _0x580453 = _0x1d1232;
          var _0x2358ea = (_0x437089 = _0x5714f6[_0x580453(280)]) === undefined ? 0 : _0x437089;
          var _0x437089 = (_0xeeefcc = _0x5714f6.baseHeight) === undefined ? 0 : _0xeeefcc;
          var _0xeeefcc = (_0xeeefcc = _0x5714f6[_0x580453(288)]) === undefined ? null : _0xeeefcc;
          _0x5714f6 = _0x5714f6.onchange;
          _0x5b4327(this, _0x4fc378);
          this[_0x580453(288)] = _0xeeefcc;
          this.XTUtuList = _0x174f33;
          this[_0x580453(280)] = _0x2358ea;
          this[_0x580453(227)] = _0x437089;
          this._onchange = _0x5714f6;
          this[_0x580453(224)] = null;
          this[_0x580453(180)] = null;
          this[_0x580453(245)] = null;
          this[_0x580453(228)] = null;
          this[_0x580453(222)] = _0x580453(204);
        }
        function _0x12c1d3() {
          var _0x4dee22 = 14;
          var _0x516e59 = ["backgroundColor", "-15px", "number", "50PMaINn", "slide", "querySelectorAll", "#fff", "call", " .XTU-so", "img_url", "1752569ZFyGtf", "value", "overflow", "baseWidth", "Map", "return", "add", "100%", "XTU_lo_", "12oJHMRR", "canvas", "element", "rightBtn", "Object", "background", "_onchange", "from", "slice", "renderSwiperItem", "swiperWrap", "0 5px", "getPos", "icon", "hidden", "alignItems", "demo.html", "createSwiper", "relative", "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.", "5px", "isArray", "881140FUWfUI", "int", "2954096rIPNzv", "remove", "rgba(0,0,0,0)", "129728upsidX", "iterator", "@@iterator", "className", "createElement", "center", "bottom", "XTU-lu", "contain", "appendChild", "test", "auto", "XTUtuList", "rendeso", "string", "next", "action", "position", "10106829aqSPTo", "#999", "sku", "left", "80px", "XTU-so", "borderRadius", "swiperClass", "renderHtml", "swiperEl", "1000px", "45%", "baseHeight", "mySwiper", "marginTop", "right", "height", "length", "getNumSlides", "backgroundPosition", "-7px", "padding", "url(", "absolute", "margin", "Arguments", "backgroundSize", "106770UeAmNb", "style", "width", "dotWrap", "prototype", "303311PWsifU", "backgroundImage", "toggle", "top", "div", "Set", "onclick", "float", "#505050", "undefined", "flex", "img", "classList", "onchange", "display", "concat", "constructor", "done", "no-repeat", "zIndex"];
          _0x4dee22 = 16;
          return (_0x12c1d3 = function () {
            return _0x516e59;
          })();
        }
        function _0x20f0bb(_0x3436f2) {
          var _0x21bafd = _0x1d1232;
          var _0x32020b = document.createElement(_0x21bafd(251));
          _0x32020b[_0x21bafd(243)].position = _0x21bafd(238);
          _0x32020b.style[_0x21bafd(218)] = _0x21bafd(235);
          _0x32020b.style[_0x21bafd(244)] = _0x21bafd(219);
          _0x32020b[_0x21bafd(243)].height = "80px";
          _0x32020b[_0x21bafd(243)][_0x21bafd(250)] = _0x21bafd(226);
          _0x32020b[_0x21bafd(243)][_0x21bafd(266)] = "10";
          _0x32020b[_0x21bafd(243)][_0x21bafd(229)] = _0x21bafd(268);
          _0x32020b.style[_0x21bafd(267)] = _0x21bafd(196);
          _0x32020b[_0x21bafd(243)][_0x21bafd(221)] = _0x21bafd(225);
          _0x32020b.style[_0x21bafd(236)] = _0x21bafd(190);
          _0x32020b[_0x21bafd(243)][_0x21bafd(248)] = _0x21bafd(237)[_0x21bafd(262)](_0x3436f2, ")");
          _0x32020b[_0x21bafd(243)][_0x21bafd(234)] = "center";
          _0x32020b[_0x21bafd(243)].backgroundRepeat = _0x21bafd(265);
          _0x32020b[_0x21bafd(243)][_0x21bafd(241)] = "60% 60%";
          return _0x32020b;
        }
        var _0x3fcb2c = _0x11318b(3267);
        var _0x4331e5 = _0x11318b.n(_0x3fcb2c);
        _0x4133c6 = _0x11318b(9669);
        var _0x1f9890 = _0x11318b.n(_0x4133c6);
        function _0x4ebc37(_0x5d5bab, _0x5d64d6) {
          var _0x37099f = _0x30e2e1;
          var _0x51aabc = typeof Symbol !== _0x37099f(326) && _0x5d5bab[Symbol[_0x37099f(388)]] || _0x5d5bab["@@iterator"];
          if (!_0x51aabc) {
            if (Array[_0x37099f(362)](_0x5d5bab) || (_0x51aabc = function (_0x307954, _0x5d953f) {
              var _0x14bde6 = _0x30e2e1;
              if (_0x307954) {
                if (typeof _0x307954 === _0x14bde6(358)) {
                  return _0x20c4a5(_0x307954, _0x5d953f);
                }
                var _0x25f723;
                var _0x4e8a49 = Object.prototype.toString.call(_0x307954)[_0x14bde6(352)](8, -1);
                _0x25f723 = "phfo";
                if ((_0x4e8a49 = _0x4e8a49 === _0x14bde6(384) && _0x307954[_0x14bde6(372)] ? _0x307954[_0x14bde6(372)][_0x14bde6(380)] : _0x4e8a49) === "Map" || _0x4e8a49 === _0x14bde6(350)) {
                  return Array[_0x14bde6(392)](_0x307954);
                } else if (_0x4e8a49 === _0x14bde6(354) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/[_0x14bde6(338)](_0x4e8a49)) {
                  return _0x20c4a5(_0x307954, _0x5d953f);
                } else {
                  return undefined;
                }
              }
            }(_0x5d5bab)) || _0x5d64d6 && _0x5d5bab && typeof _0x5d5bab[_0x37099f(360)] == "number") {
              if (_0x51aabc) {
                _0x5d5bab = _0x51aabc;
              }
              var _0x15593e = 0;
              return {
                s: _0x5d64d6 = function () {},
                n: function () {
                  if (_0x15593e >= _0x5d5bab[_0x37099f(360)]) {
                    return {
                      done: true
                    };
                  } else {
                    return {
                      done: false,
                      value: _0x5d5bab[_0x15593e++]
                    };
                  }
                },
                e: function (_0x3e6132) {
                  throw _0x3e6132;
                },
                f: _0x5d64d6
              };
            }
            throw new TypeError(_0x37099f(370));
          }
          var _0x28bb80;
          var _0x45b593 = true;
          var _0x7e2687 = false;
          return {
            s: function () {
              _0x51aabc = _0x51aabc[_0x37099f(376)](_0x5d5bab);
            },
            n: function () {
              var _0x1085e5 = _0x37099f;
              var _0xacbeea = _0x51aabc.next();
              _0x45b593 = _0xacbeea[_0x1085e5(408)];
              return _0xacbeea;
            },
            e: function (_0x592368) {
              _0x7e2687 = true;
              _0x28bb80 = _0x592368;
            },
            f: function () {
              var _0x58f743 = _0x37099f;
              try {
                if (!(_0x45b593 || _0x51aabc.return == null)) {
                  _0x51aabc[_0x58f743(375)]();
                }
              } finally {
                if (_0x7e2687) {
                  throw _0x28bb80;
                }
              }
            }
          };
        }
        function _0x30e2e1(_0x20c9c8, _0x29c5e6) {
          var _0xca5218 = _0x1a5f2c();
          return (_0x30e2e1 = function (_0xa96753, _0x5dc701) {
            return _0xca5218[_0xa96753 -= 326];
          })(_0x20c9c8, _0x29c5e6);
        }
        function _0x20c4a5(_0x2b9ebd, _0x76a10e) {
          var _0x36d7d4 = _0x30e2e1;
          if (_0x76a10e == null || _0x76a10e > _0x2b9ebd[_0x36d7d4(360)]) {
            _0x76a10e = _0x2b9ebd[_0x36d7d4(360)];
          }
          for (var _0x13c378 = 0, _0x6c2312 = new Array(_0x76a10e); _0x13c378 < _0x76a10e; _0x13c378++) {
            _0x6c2312[_0x13c378] = _0x2b9ebd[_0x13c378];
          }
          return _0x6c2312;
        }
        function _0x1a5f2c() {
          var _0x44a89d = 11;
          var _0x3ddfc4 = ["BoundingRect", "isArray", "9031150eQCsXY", "data-points-y", "forEach", "end", "onloadend", "18UdoiKk", "toLowerCase", "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.", "result", "constructor", "wrapHeight", "split", "return", "call", "blob", "transform", "clip-path", "name", "stop", "185ZxMYsX", "setAttribute", "Object", "width", "prev", "apply", "iterator", "abs", "replace", "readAsDataURL", "from", "135380GjGmxo", "lastIndexOf", "___", "301894GYfhld", "Anonymous", "matrix(", "onload", "map", "getAttribute", "rect", "372337AFaxNh", "mark", "wrap", "random", "next", "done", "points", "?imageView2", "concat", "request", "clipPath", "getElementById", "14570094XXelIo", "toString", "substring", ":image/", "undefined", "originalSize", "189697gkqylM", "value", "sent", "data", "wrapWidth", "xlink:href", "data-rect", "getTime", "data-BoundingRect", "18xESedl", "test", "1037709sPGTIH", "Matrix3", "height", "abrupt", "svg", "path", "push", "getElementsByTagName", "48bGgbHE", "img_url", "href", "Set", "?imageMogr2", "slice", "data-points-x", "Arguments", ":application/octet-stream;", "image", "responseXML", "string", "indexOf", "length"];
          _0x44a89d = "dokm";
          return (_0x1a5f2c = function () {
            return _0x3ddfc4;
          })();
        }
        function _0x40c9f1(_0x1f6a09) {
          function _0x226c3e(_0x232436) {
            let _0x661197 = "";
            for (let _0x2903b9 = 0; _0x2903b9 < _0x232436.length; _0x2903b9++) {
              var _0x2d746a;
              let _0x2c33d6 = _0x232436.charCodeAt(_0x2903b9);
              _0x2d746a = 8;
              if (_0x2c33d6 >= 33 && _0x2c33d6 <= 126) {
                _0x2c33d6 -= 2;
                if (_0x2c33d6 < 33) {
                  _0x2c33d6 += 94;
                }
              }
              _0x661197 += String.fromCharCode(_0x2c33d6);
            }
            return _0x661197;
          }
          function _0x437622(_0x29cd79) {
            return _0x29cd79.split("").reverse().join("");
          }
          function _0x1361b2(_0x50e739, _0x9dda6b, _0x54b0f7) {
            let _0x3bc8e3 = "";
            let _0x1a81e4 = 0;
            for (let _0x2ac1da = 0; _0x2ac1da < _0x9dda6b.length; _0x2ac1da++) {
              _0x3bc8e3 += _0x50e739.slice(_0x1a81e4, _0x9dda6b[_0x2ac1da]);
              _0x3bc8e3 += _0x54b0f7;
              _0x1a81e4 = _0x9dda6b[_0x2ac1da];
            }
            _0x3bc8e3 += _0x50e739.slice(_0x1a81e4);
            return _0x3bc8e3;
          }
          function _0x19fab9(_0x398cdd, _0x54f83f) {
            let _0x4f8991 = "";
            for (let _0x3d4529 = 0; _0x3d4529 < _0x398cdd.length; _0x3d4529++) {
              if (_0x54f83f.indexOf(_0x398cdd[_0x3d4529]) === -1) {
                _0x4f8991 += _0x398cdd[_0x3d4529];
              }
            }
            return _0x4f8991;
          }
          var _0x3cfe58;
          let _0x239640 = _0x226c3e(_0x1f6a09);
          _0x3cfe58 = 12;
          let _0x1b9403 = _0x437622(_0x239640);
          let _0x33aebf = _0x19fab9(_0x1b9403, "#;");
          let _0x3d1782 = _0x1361b2(_0x33aebf, [11, 17, 19], "");
          return _0x3d1782;
        }
        function _0x11dd89() {
          var _0x427c00 = _0x30e2e1;
          var _0x20ceff = new Date()[_0x427c00(335)]();
          return Math[_0x427c00(389)]((1 + Math[_0x427c00(406)]()) * _0x20ceff | 0)[_0x427c00(416)](16);
        }
        (function () {
          var _0x58776f = _0x30e2e1;
          var _0x58d30c = _0x1a5f2c();
          for (;;) {
            try {
              if (+parseInt(_0x58776f(328)) + -parseInt(_0x58776f(396)) / 2 * (parseInt(_0x58776f(337)) / 3) + parseInt(_0x58776f(393)) / 4 * (parseInt(_0x58776f(382)) / 5) + parseInt(_0x58776f(368)) / 6 * (-parseInt(_0x58776f(403)) / 7) + -parseInt(_0x58776f(347)) / 8 * (-parseInt(_0x58776f(339)) / 9) + parseInt(_0x58776f(363)) / 10 + -parseInt(_0x58776f(415)) / 11 == 647074) {
                break;
              }
              _0x58d30c.push(_0x58d30c.shift());
            } catch (_0x48bb1c) {
              _0x58d30c.push(_0x58d30c.shift());
            }
          }
        })();
        var _0x2e4ff5 = "";
        function _0x2b4a7a() {
          var _0x27be77 = _0x30e2e1;
          return (_0x2b4a7a = _0x4a4b23(_0x2af9e7().mark(function _0x1b6638(_0x5cb100) {
            var _0x18e0c1;
            var _0x5e90c2;
            var _0x36532a;
            var _0x4afd7d;
            var _0x105f7d;
            var _0x44ab1c;
            var _0x2ed029;
            var _0x2a8609;
            var _0x47df9a;
            var _0x3ddb08;
            var _0x5d070e;
            var _0x5b9bfd;
            var _0x38bae7;
            var _0x3beab2;
            var _0x3daea4;
            var _0x3f9369;
            var _0x2c7967;
            var _0x99ad59 = _0x30e2e1;
            return _0x2af9e7()[_0x99ad59(405)](function (_0x5879cc) {
              for (var _0x5e2840 = _0x99ad59;;) {
                switch (_0x5879cc[_0x5e2840(386)] = _0x5879cc[_0x5e2840(407)]) {
                  case 0:
                    if (_0x5cb100) {
                      _0x5879cc.next = 2;
                      break;
                    }
                    return _0x5879cc[_0x5e2840(342)](_0x5e2840(375));
                  case 2:
                    _0x5879cc.next = 4;
                    return _0x1f9890().get(_0x5cb100);
                  case 4:
                    _0x3beab2 = _0x5879cc[_0x5e2840(330)];
                    _0x18e0c1 = _0x3beab2[_0x5e2840(412)][_0x5e2840(357)];
                    _0x5e90c2 = [];
                    _0x36532a = [];
                    _0x3beab2 = _0x18e0c1.getElementsByTagName(_0x5e2840(343))[0];
                    _0x4afd7d = Number(_0x3beab2.getAttribute("width"));
                    _0x105f7d = Number(_0x3beab2[_0x5e2840(401)](_0x5e2840(341)));
                    _0x3beab2 = _0x18e0c1[_0x5e2840(346)](_0x5e2840(356));
                    _0x44ab1c = _0x4ebc37(_0x3beab2);
                    try {
                      for (_0x44ab1c.s(); !(_0x2ed029 = _0x44ab1c.n()).done;) {
                        _0x2a8609 = _0x2ed029[_0x5e2840(329)];
                        _0x47df9a = _0x2a8609[_0x5e2840(401)]("xlink:href");
                        if (!((_0x3ddb08 = _0x2a8609[_0x5e2840(401)](_0x5e2840(349)))[_0x5e2840(359)](_0x5e2840(410)) != -1 && _0x3ddb08[_0x5e2840(359)](_0x5e2840(351)) != -1)) {
                          _0x2a8609.setAttribute("href", _0x3ddb08 + _0x2e4ff5);
                          _0x2a8609[_0x5e2840(383)](_0x5e2840(333), _0x47df9a + _0x2e4ff5);
                        }
                      }
                    } catch (_0x3c722b) {
                      _0x44ab1c.e(_0x3c722b);
                    } finally {
                      _0x44ab1c.f();
                    }
                    _0x5d070e = _0x18e0c1[_0x5e2840(346)]("g");
                    _0x5b9bfd = 0;
                    for (; _0x5b9bfd < _0x5d070e[_0x5e2840(360)]; _0x5b9bfd++) {
                      _0x38bae7 = _0x5d070e[_0x5b9bfd].getAttribute("id");
                      _0x5d070e[_0x5b9bfd][_0x5e2840(383)]("id", ""[_0x5e2840(411)](_0x11dd89(), "_")[_0x5e2840(411)](_0x38bae7));
                    }
                    _0x3beab2 = _0x18e0c1[_0x5e2840(346)]("use");
                    _0x3daea4 = _0x4ebc37(_0x3beab2);
                    try {
                      _0x2c7967 = function () {
                        var _0x2d1269;
                        var _0x8a335b;
                        var _0x346d1b;
                        var _0xeff62f;
                        var _0x3bd749;
                        var _0x3d5cc5;
                        var _0x40c551 = _0x5e2840;
                        var _0x110090 = _0x3f9369[_0x40c551(329)];
                        var _0x1c9c03 = {};
                        var _0x47dc2a = _0x110090[_0x40c551(401)](_0x40c551(333)).replace("#", "");
                        var _0x4827a8 = (_0x346d1b = _0x18e0c1[_0x40c551(414)](_0x47dc2a))[_0x40c551(401)]("href");
                        _0x1c9c03[_0x40c551(348)] = _0x4827a8;
                        _0x36532a[_0x40c551(345)](_0x418ec2(_0x4827a8));
                        _0x47dc2a = Number(_0x346d1b[_0x40c551(401)](_0x40c551(385)));
                        _0x4827a8 = Number(_0x346d1b[_0x40c551(401)](_0x40c551(341)));
                        _0x1c9c03[_0x40c551(327)] = ""[_0x40c551(411)](_0x47dc2a, ",").concat(_0x4827a8);
                        _0x1c9c03[_0x40c551(332)] = _0x4afd7d;
                        _0x1c9c03[_0x40c551(373)] = _0x105f7d;
                        if (_0x346d1b = _0x110090[_0x40c551(401)]("transform")) {
                          _0x8a335b = [1, 0, 0, 1, _0x47dc2a / 2, _0x4827a8 / 2];
                          _0x8a335b = [(_0x2d1269 = _0x2d1269 = (_0x2d1269 = _0x346d1b.substring(7, _0x346d1b[_0x40c551(360)] - 1)[_0x40c551(374)](","))[_0x40c551(400)](function (_0x480a58) {
                            return Number(_0x480a58);
                          }))[0] * _0x8a335b[0] + _0x2d1269[2] * _0x8a335b[1], _0x2d1269[1] * _0x8a335b[0] + _0x2d1269[3] * _0x8a335b[1], _0x2d1269[0] * _0x8a335b[2] + _0x2d1269[2] * _0x8a335b[3], _0x2d1269[1] * _0x8a335b[2] + _0x2d1269[3] * _0x8a335b[3], _0x2d1269[0] * _0x8a335b[4] + _0x2d1269[2] * _0x8a335b[5] + _0x2d1269[4], _0x2d1269[1] * _0x8a335b[4] + _0x2d1269[3] * _0x8a335b[5] + _0x2d1269[5]];
                          _0x110090[_0x40c551(383)](_0x40c551(378), _0x40c551(398)[_0x40c551(411)](_0x8a335b.join(), ")"));
                        } else {
                          _0x2d1269 = Number(_0x110090[_0x40c551(401)]("x")) || 0;
                          _0x8a335b = Number(_0x110090[_0x40c551(401)]("y")) || 0;
                          _0x110090[_0x40c551(383)]("x", _0x2d1269 + _0x47dc2a / 2);
                          _0x110090.setAttribute("y", _0x8a335b + _0x4827a8 / 2);
                        }
                        if (_0x4827a8 = _0x110090.parentNode.getAttribute(_0x40c551(379))) {
                          _0x4827a8 = _0x4827a8[_0x40c551(417)](5, _0x4827a8[_0x40c551(360)] - 1);
                          _0x3bd749 = _0x18e0c1[_0x40c551(414)](_0x4827a8)[_0x40c551(346)](_0x40c551(344))[0].getAttribute("d");
                          _0x1c9c03[_0x40c551(413)] = _0x3bd749;
                        }
                        _0x1c9c03.Matrix3 = _0x110090[_0x40c551(401)]("data-matrix3");
                        if (_0x1c9c03.Matrix3) {
                          _0x1c9c03[_0x40c551(340)] = _0x1c9c03[_0x40c551(340)].split(",")[_0x40c551(400)](function (_0x314664) {
                            return Number(_0x314664);
                          });
                          _0x1c9c03[_0x40c551(340)] = [_0x1c9c03[_0x40c551(340)][0], _0x1c9c03[_0x40c551(340)][3], _0x1c9c03[_0x40c551(340)][6], _0x1c9c03[_0x40c551(340)][1], _0x1c9c03.Matrix3[4], _0x1c9c03[_0x40c551(340)][7], _0x1c9c03[_0x40c551(340)][2], _0x1c9c03.Matrix3[5], _0x1c9c03.Matrix3[8]];
                        }
                        _0x1c9c03[_0x40c551(402)] = _0x110090[_0x40c551(401)](_0x40c551(334));
                        if (_0x1c9c03[_0x40c551(402)]) {
                          _0x1c9c03[_0x40c551(402)] = _0x1c9c03[_0x40c551(402)][_0x40c551(374)](",")[_0x40c551(400)](function (_0x367653) {
                            return Number(_0x367653);
                          });
                        }
                        _0x1c9c03[_0x40c551(361)] = _0x110090.getAttribute(_0x40c551(336));
                        if (_0x1c9c03.BoundingRect) {
                          _0x1c9c03.BoundingRect = _0x1c9c03[_0x40c551(361)][_0x40c551(374)](",").map(function (_0x403a73) {
                            return Number(_0x403a73);
                          });
                        }
                        if (_0x110090.getAttribute(_0x40c551(353))) {
                          _0x1c9c03[_0x40c551(409)] = (_0x4827a8 = _0x110090[(_0xeff62f = _0x40c551)(401)]("data-points-x").split(","), _0x3bd749 = _0x110090[_0xeff62f(401)](_0xeff62f(364))[_0xeff62f(374)](","), _0x3d5cc5 = [], [_0x4827a8, _0x3bd749].forEach(function (_0x290100, _0x42880b) {
                            _0x290100[_0xeff62f(365)](function (_0x4e75f1, _0x26a3b0) {
                              if (!_0x3d5cc5[_0x26a3b0]) {
                                _0x3d5cc5[_0x26a3b0] = {};
                              }
                              _0x3d5cc5[_0x26a3b0][_0x42880b == 0 ? "x" : "y"] = Number(_0x4e75f1);
                            });
                          }), _0x3d5cc5);
                        }
                        if (_0x110090[_0x40c551(401)]("id")) {
                          _0x1c9c03.id = _0x110090[_0x40c551(401)]("id") + _0x40c551(395) + _0x11dd89();
                          _0x110090[_0x40c551(383)]("id", _0x1c9c03.id);
                        }
                        _0x5e90c2[_0x40c551(345)](_0x1c9c03);
                      };
                      _0x3daea4.s();
                      for (; !(_0x3f9369 = _0x3daea4.n()).done;) {
                        _0x2c7967();
                      }
                    } catch (_0x58704f) {
                      _0x3daea4.e(_0x58704f);
                    } finally {
                      _0x3daea4.f();
                    }
                    return _0x5879cc[_0x5e2840(342)](_0x5e2840(375), {
                      layerInfo: _0x5e90c2,
                      docementSvg: _0x18e0c1,
                      wrapWidth: _0x4afd7d,
                      wrapHeight: _0x105f7d
                    });
                  case 20:
                  case _0x5e2840(366):
                    return _0x5879cc.stop();
                }
              }
            }, _0x1b6638);
          })))[_0x27be77(387)](this, arguments);
        }
        function _0x418ec2(_0x3521e5) {
          return new Promise((_0x33428c = _0x30e2e1, _0x168322 = _0x4a4b23(_0x2af9e7()[_0x33428c(404)](function _0x14a133(_0x23b1a3) {
            var _0x15d885;
            var _0x536c83 = _0x33428c;
            return _0x2af9e7()[_0x536c83(405)](function (_0x4b70ba) {
              for (var _0x4110d2 = _0x536c83;;) {
                switch (_0x4b70ba.prev = _0x4b70ba[_0x4110d2(407)]) {
                  case 0:
                    (_0x15d885 = new Image()).crossorigin = _0x4110d2(397);
                    _0x15d885[_0x4110d2(399)] = function () {
                      _0x23b1a3(_0x15d885);
                    };
                    _0x15d885.src = _0x3521e5;
                  case 4:
                  case _0x4110d2(366):
                    return _0x4b70ba[_0x4110d2(381)]();
                }
              }
            }, _0x14a133);
          })), function (_0x3844d3) {
            return _0x168322[_0x33428c(387)](this, arguments);
          }));
          var _0x33428c;
          var _0x168322;
        }
        function _0x31ab21(_0x45dfe2) {
          return new Promise((_0x411e14 = _0x4a4b23(_0x2af9e7().mark(function _0x5d47e0(_0xe3672e) {
            var _0x191ca7;
            var _0x3c6345;
            var _0x133e5d;
            var _0x5115de = _0x30e2e1;
            return _0x2af9e7()[_0x5115de(405)](function (_0x1677e9) {
              for (var _0xa79a74 = _0x5115de;;) {
                switch (_0x1677e9[_0xa79a74(386)] = _0x1677e9[_0xa79a74(407)]) {
                  case 0:
                    if (/^data:/[_0xa79a74(338)](_0x45dfe2)) {
                      _0xe3672e(_0x45dfe2);
                      return _0x1677e9[_0xa79a74(342)](_0xa79a74(375));
                    }
                    _0x1677e9[_0xa79a74(407)] = 3;
                    break;
                  case 3:
                    _0x191ca7 = _0x45dfe2[_0xa79a74(417)](_0x45dfe2[_0xa79a74(394)](".") + 1)[_0xa79a74(369)]();
                    _0x1677e9[_0xa79a74(407)] = 6;
                    return _0x1f9890().get(_0x45dfe2, {
                      responseType: _0xa79a74(377)
                    });
                  case 6:
                    _0x3c6345 = _0x1677e9.sent;
                    (_0x133e5d = new FileReader())[_0xa79a74(391)](_0x3c6345[_0xa79a74(331)]);
                    _0x133e5d[_0xa79a74(367)] = function () {
                      var _0x184331 = _0x133e5d[(_0x184331 = _0xa79a74)(371)][_0x184331(416)]()[_0x184331(390)](_0x184331(355), _0x184331(418)[_0x184331(411)](_0x191ca7, ";"));
                      _0xe3672e(_0x184331);
                    };
                  case 10:
                  case _0xa79a74(366):
                    return _0x1677e9[_0xa79a74(381)]();
                }
              }
            }, _0x5d47e0);
          })), function (_0x268ce7) {
            return _0x411e14.apply(this, arguments);
          }));
          var _0x411e14;
        }
        function _0x49054b(_0x1c7c7f, _0x388ccb) {
          if (_0x388ccb == null || _0x388ccb > _0x1c7c7f.length) {
            _0x388ccb = _0x1c7c7f.length;
          }
          for (var _0x3cf78c = 0, _0x37b731 = new Array(_0x388ccb); _0x3cf78c < _0x388ccb; _0x3cf78c++) {
            _0x37b731[_0x3cf78c] = _0x1c7c7f[_0x3cf78c];
          }
          return _0x37b731;
        }
        function _0x434a16(_0x3e2660, _0x172650) {
          if (_0x3e2660) {
            if (typeof _0x3e2660 == "string") {
              return _0x49054b(_0x3e2660, _0x172650);
            }
            var _0x5c835f = Object.prototype.toString.call(_0x3e2660).slice(8, -1);
            if ((_0x5c835f = _0x5c835f === "Object" && _0x3e2660.constructor ? _0x3e2660.constructor.name : _0x5c835f) === "Map" || _0x5c835f === "Set") {
              return Array.from(_0x3e2660);
            } else if (_0x5c835f === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(_0x5c835f)) {
              return _0x49054b(_0x3e2660, _0x172650);
            } else {
              return undefined;
            }
          }
        }
        function _0x31852f(_0x4baa37, _0x2adb26) {
          return function (_0x2ac65e) {
            if (Array.isArray(_0x2ac65e)) {
              return _0x2ac65e;
            }
          }(_0x4baa37) || function (_0x48a2a6, _0x3bb9db) {
            var _0x31ee44 = _0x48a2a6 == null ? null : typeof Symbol != "undefined" && _0x48a2a6[Symbol.iterator] || _0x48a2a6["@@iterator"];
            if (_0x31ee44 != null) {
              var _0x5b5907;
              var _0x16198e;
              var _0xbe79ec = [];
              var _0x3ce761 = true;
              var _0x45081b = false;
              try {
                for (_0x31ee44 = _0x31ee44.call(_0x48a2a6); !(_0x3ce761 = (_0x5b5907 = _0x31ee44.next()).done) && (_0xbe79ec.push(_0x5b5907.value), !_0x3bb9db || _0xbe79ec.length !== _0x3bb9db); _0x3ce761 = true);
              } catch (_0x7bfadb) {
                _0x45081b = true;
                _0x16198e = _0x7bfadb;
              } finally {
                try {
                  if (!(_0x3ce761 || _0x31ee44.return == null)) {
                    _0x31ee44.return();
                  }
                } finally {
                  if (_0x45081b) {
                    throw _0x16198e;
                  }
                }
              }
              return _0xbe79ec;
            }
          }(_0x4baa37, _0x2adb26) || _0x434a16(_0x4baa37, _0x2adb26) || function () {
            throw new TypeError(".....");
          }();
        }
        function _0xa3187a(_0x1ed34c) {
          return function (_0x50ef9b) {
            if (Array.isArray(_0x50ef9b)) {
              return _0x49054b(_0x50ef9b);
            }
          }(_0x1ed34c) || function (_0x4d5c9d) {
            if (typeof Symbol != "undefined" && _0x4d5c9d[Symbol.iterator] != null || _0x4d5c9d["@@iterator"] != null) {
              return Array.from(_0x4d5c9d);
            }
          }(_0x1ed34c) || _0x434a16(_0x1ed34c) || function () {
            throw new TypeError("......");
          }();
        }
        const _0x57ec7c = "136";
        const _0x1a1897 = {
          LEFT: 0,
          MIDDLE: 1,
          RIGHT: 2,
          ROTATE: 0,
          DOLLY: 1,
          PAN: 2
        };
        const _0x5eb3cf = {
          ROTATE: 0,
          PAN: 1,
          DOLLY_PAN: 2,
          DOLLY_ROTATE: 3
        };
        const _0x3c4b50 = 0;
        const _0x1aff1d = 1;
        const _0x4bef96 = 2;
        const _0x51ce5f = 3;
        const _0x5d83bb = 0;
        const _0x185486 = 1;
        const _0x2c1da1 = 2;
        const _0x31dc34 = 3;
        const _0xe70805 = 0;
        const _0x460782 = 1;
        const _0x250b44 = 2;
        const _0x2e28c7 = 1;
        const _0x2ff235 = 2;
        const _0x1bf8b5 = 0;
        const _0x4538d2 = 1;
        const _0x453d75 = 2;
        const _0x266139 = 3;
        const _0x46b709 = 4;
        const _0x237153 = 5;
        const _0x3e7cc4 = 100;
        const _0x2dbbc4 = 101;
        const _0x3b9cf9 = 102;
        const _0x2ea231 = 103;
        const _0x9c0bcc = 104;
        const _0x17fe61 = 200;
        const _0x365ab2 = 201;
        const _0x46c9b8 = 202;
        const _0x2d8718 = 203;
        const _0x539d6e = 204;
        const _0x5b604c = 205;
        const _0xfa45fa = 206;
        const _0xcc53a9 = 207;
        const _0x308053 = 208;
        const _0x3a19c8 = 209;
        const _0x495566 = 210;
        const _0x2cb585 = 0;
        const _0x151214 = 1;
        const _0x3835bb = 2;
        const _0x45fa99 = 3;
        const _0x15b47f = 4;
        const _0x5eb9db = 5;
        const _0x1b4927 = 6;
        const _0x462790 = 7;
        const _0x2e0cd0 = 0;
        const _0x26fe3d = 1;
        const _0xb45436 = 2;
        const _0x510390 = 0;
        const _0x52e684 = 1;
        const _0x42f8a8 = 2;
        const _0x1cc381 = 3;
        const _0xc3db81 = 4;
        const _0x4bf0d4 = 5;
        const _0x658452 = 300;
        const _0x2097dc = 301;
        const _0x38a1fa = 302;
        const _0x23c46a = 303;
        const _0x3eb421 = 304;
        const _0x41f85a = 306;
        const _0x14f15e = 307;
        const _0xc7a5e0 = 1000;
        const _0x4f55c6 = 1001;
        const _0x53382e = 1002;
        const _0x297826 = 1003;
        const _0x5d282a = 1004;
        const _0x45d0a2 = 1004;
        const _0x99c93 = 1005;
        const _0x3295fc = 1005;
        const _0x202e90 = 1006;
        const _0x12c84a = 1007;
        const _0x14d6bd = 1007;
        const _0x3f90fb = 1008;
        const _0x1bbbb3 = 1008;
        const _0x3a53e9 = 1009;
        const _0x13ad8a = 1010;
        const _0x143891 = 1011;
        const _0x2339bc = 1012;
        const _0x4d4fb5 = 1013;
        const _0x1f1250 = 1014;
        const _0x4c436e = 1015;
        const _0x399f5d = 1016;
        const _0x47725a = 1017;
        const _0x5f5cb5 = 1018;
        const _0x2c144c = 1019;
        const _0x32836b = 1020;
        const _0x1aff07 = 1021;
        const _0x1e0c08 = 1022;
        const _0x4f87e5 = 1023;
        const _0x5ab64f = 1024;
        const _0x1df6d9 = 1025;
        const _0x32a157 = 1026;
        const _0x5ea0ca = 1027;
        const _0x6ff49f = 1028;
        const _0x24a0c9 = 1029;
        const _0x2d6162 = 1030;
        const _0x2953f9 = 1031;
        const _0x5b268d = 1032;
        const _0x4ff7a5 = 1033;
        const _0x55be8d = 33776;
        const _0x5daab3 = 33777;
        const _0x5adc18 = 33778;
        const _0x326843 = 33779;
        const _0x4a092b = 35840;
        const _0x29ff69 = 35841;
        const _0x448d81 = 35842;
        const _0x28d14d = 35843;
        const _0x5be57b = 36196;
        const _0x30604a = 37492;
        const _0x704911 = 37496;
        const _0x451bde = 37808;
        const _0x4d0164 = 37809;
        const _0x3eddd4 = 37810;
        const _0x346895 = 37811;
        const _0x4327c4 = 37812;
        const _0x314527 = 37813;
        const _0x5e5a83 = 37814;
        const _0x29cc04 = 37815;
        const _0xa24dc = 37816;
        const _0x290448 = 37817;
        const _0x3e4fc2 = 37818;
        const _0x1cb3eb = 37819;
        const _0xae4eed = 37820;
        const _0x1f55b4 = 37821;
        const _0x502bea = 36492;
        const _0x4764cd = 37840;
        const _0x39c5d2 = 37841;
        const _0xa659c4 = 37842;
        const _0x5e31bf = 37843;
        const _0x3337e4 = 37844;
        const _0x1d5b7d = 37845;
        const _0x660743 = 37846;
        const _0x124eee = 37847;
        const _0x3f579d = 37848;
        const _0x4c593e = 37849;
        const _0x364888 = 37850;
        const _0x5db82b = 37851;
        const _0x5e81bc = 37852;
        const _0x34b0d1 = 37853;
        const _0x191ce6 = 2200;
        const _0x21636b = 2201;
        const _0x100c0f = 2202;
        const _0x797fdb = 2300;
        const _0x4a85dd = 2301;
        const _0x2fb845 = 2302;
        const _0x1f25f8 = 2400;
        const _0x3c5781 = 2401;
        const _0x408fc9 = 2402;
        const _0x335480 = 2500;
        const _0x3b8c97 = 2501;
        const _0x78b248 = 0;
        const _0x4f7674 = 1;
        const _0x498f85 = 2;
        const _0xca2f2a = 3000;
        const _0x320ef1 = 3001;
        const _0x55ce27 = 3200;
        const _0x5c286f = 3201;
        const _0x360692 = 0;
        const _0x3f0274 = 1;
        const _0x4a2159 = 0;
        const _0x85718 = 7680;
        const _0x26e577 = 7681;
        const _0x7ad4eb = 7682;
        const _0x4296ee = 7683;
        const _0x3a0ab7 = 34055;
        const _0x68a838 = 34056;
        const _0x4cfe9f = 5386;
        const _0xb62770 = 512;
        const _0x4a21c4 = 513;
        const _0x2e6c46 = 514;
        const _0x2e8197 = 515;
        const _0x5b7c9d = 516;
        const _0x3777cc = 517;
        const _0x515303 = 518;
        const _0x33ddf9 = 519;
        const _0x4d2364 = 35044;
        const _0x22fb6f = 35048;
        const _0x16029e = 35040;
        const _0x4843a5 = 35045;
        const _0x18bd8b = 35049;
        const _0x5c4c05 = 35041;
        const _0xfc1596 = 35046;
        const _0x371eea = 35050;
        const _0x6ea94a = 35042;
        const _0x463ab6 = "100";
        const _0x53dd45 = "300 es";
        class _0x3a55ab {
          addEventListener(_0x1cb9d4, _0x312c90) {
            if (this._listeners === undefined) {
              this._listeners = {};
            }
            const _0x4b9005 = this._listeners;
            if (_0x4b9005[_0x1cb9d4] === undefined) {
              _0x4b9005[_0x1cb9d4] = [];
            }
            if (_0x4b9005[_0x1cb9d4].indexOf(_0x312c90) === -1) {
              _0x4b9005[_0x1cb9d4].push(_0x312c90);
            }
          }
          hasEventListener(_0x482a6d, _0x4364fa) {
            if (this._listeners === undefined) {
              return false;
            }
            const _0x1be108 = this._listeners;
            return _0x1be108[_0x482a6d] !== undefined && _0x1be108[_0x482a6d].indexOf(_0x4364fa) !== -1;
          }
          removeEventListener(_0xf3a5e7, _0x3c710f) {
            if (this._listeners !== undefined) {
              var _0x3d10e9 = 13;
              const _0x2fed41 = this._listeners[_0xf3a5e7];
              _0x3d10e9 = "cmbm";
              if (!(_0x2fed41 === undefined)) {
                if ((_0x3c710f = _0x2fed41.indexOf(_0x3c710f)) !== -1) {
                  _0x2fed41.splice(_0x3c710f, 1);
                }
              }
            }
          }
          dispatchEvent(_0x3bf091) {
            if (this._listeners !== undefined) {
              const _0x15be5f = this._listeners[_0x3bf091.type];
              if (_0x15be5f !== undefined) {
                _0x3bf091.target = this;
                const _0x37d702 = _0x15be5f.slice(0);
                for (let _0x3053e9 = 0, _0x261ab7 = _0x37d702.length; _0x3053e9 < _0x261ab7; _0x3053e9++) {
                  _0x37d702[_0x3053e9].call(this, _0x3bf091);
                }
                _0x3bf091.target = null;
              }
            }
          }
        }
        const _0x14684c = [];
        for (let _0x11b9f3 = 0; _0x11b9f3 < 256; _0x11b9f3++) {
          _0x14684c[_0x11b9f3] = (_0x11b9f3 < 16 ? "0" : "") + _0x11b9f3.toString(16);
        }
        let _0x389ae0 = 1234567;
        const _0x21403c = Math.PI / 180;
        const _0x77398c = 180 / Math.PI;
        function _0x2b30b2() {
          var _0x5846f9 = Math.random() * 4294967295 | 0;
          var _0x1433c1 = Math.random() * 4294967295 | 0;
          var _0x510fcd = Math.random() * 4294967295 | 0;
          var _0x563ac6 = Math.random() * 4294967295 | 0;
          return (_0x14684c[_0x5846f9 & 255] + _0x14684c[_0x5846f9 >> 8 & 255] + _0x14684c[_0x5846f9 >> 16 & 255] + _0x14684c[_0x5846f9 >> 24 & 255] + "-" + _0x14684c[_0x1433c1 & 255] + _0x14684c[_0x1433c1 >> 8 & 255] + "-" + _0x14684c[_0x1433c1 >> 16 & 15 | 64] + _0x14684c[_0x1433c1 >> 24 & 255] + "-" + _0x14684c[_0x510fcd & 63 | 128] + _0x14684c[_0x510fcd >> 8 & 255] + "-" + _0x14684c[_0x510fcd >> 16 & 255] + _0x14684c[_0x510fcd >> 24 & 255] + _0x14684c[_0x563ac6 & 255] + _0x14684c[_0x563ac6 >> 8 & 255] + _0x14684c[_0x563ac6 >> 16 & 255] + _0x14684c[_0x563ac6 >> 24 & 255]).toUpperCase();
        }
        function _0x6865cb(_0x39d46a, _0x4cca5f, _0x36ee74) {
          return Math.max(_0x4cca5f, Math.min(_0x36ee74, _0x39d46a));
        }
        function _0x55f8fa(_0x3c9753, _0x274843) {
          return (_0x3c9753 % _0x274843 + _0x274843) % _0x274843;
        }
        function _0x4c5b27(_0x5690b6, _0xb1805b, _0x5e84ae) {
          return (1 - _0x5e84ae) * _0x5690b6 + _0x5e84ae * _0xb1805b;
        }
        function _0x5d7856(_0x49682b) {
          return (_0x49682b & _0x49682b - 1) == 0 && _0x49682b !== 0;
        }
        function _0x2f55b5(_0x1113ba) {
          return Math.pow(2, Math.ceil(Math.log(_0x1113ba) / Math.LN2));
        }
        function _0x30f7e0(_0x4841a0) {
          return Math.pow(2, Math.floor(Math.log(_0x4841a0) / Math.LN2));
        }
        var _0x4b7135 = Object.freeze({
          "__proto__": null,
          DEG2RAD: _0x21403c,
          RAD2DEG: _0x77398c,
          generateUUID: _0x2b30b2,
          clamp: _0x6865cb,
          euclideanModulo: _0x55f8fa,
          mapLinear: function (_0x2cd970, _0x3d7235, _0x31bfe2, _0x24724e, _0x2f8746) {
            return _0x24724e + (_0x2cd970 - _0x3d7235) * (_0x2f8746 - _0x24724e) / (_0x31bfe2 - _0x3d7235);
          },
          inverseLerp: function (_0x3992df, _0x5f4222, _0x22575f) {
            if (_0x3992df !== _0x5f4222) {
              return (_0x22575f - _0x3992df) / (_0x5f4222 - _0x3992df);
            } else {
              return 0;
            }
          },
          lerp: _0x4c5b27,
          damp: function (_0x1fe252, _0xe3a189, _0x2fcfb6, _0x445f6d) {
            return _0x4c5b27(_0x1fe252, _0xe3a189, 1 - Math.exp(-_0x2fcfb6 * _0x445f6d));
          },
          pingpong: function (_0xdc6e27, _0x3e13c5 = 1) {
            return _0x3e13c5 - Math.abs(_0x55f8fa(_0xdc6e27, _0x3e13c5 * 2) - _0x3e13c5);
          },
          smoothstep: function (_0x82e1ab, _0x280f8b, _0x40a7d9) {
            if (_0x82e1ab <= _0x280f8b) {
              return 0;
            } else if (_0x40a7d9 <= _0x82e1ab) {
              return 1;
            } else {
              return (_0x82e1ab = (_0x82e1ab - _0x280f8b) / (_0x40a7d9 - _0x280f8b)) * _0x82e1ab * (3 - _0x82e1ab * 2);
            }
          },
          smootherstep: function (_0x1e7b54, _0x1f9df5, _0x2a15c2) {
            if (_0x1e7b54 <= _0x1f9df5) {
              return 0;
            } else if (_0x2a15c2 <= _0x1e7b54) {
              return 1;
            } else {
              return (_0x1e7b54 = (_0x1e7b54 - _0x1f9df5) / (_0x2a15c2 - _0x1f9df5)) * _0x1e7b54 * _0x1e7b54 * (_0x1e7b54 * (_0x1e7b54 * 6 - 15) + 10);
            }
          },
          randInt: function (_0xb9e6e1, _0x4a2e91) {
            return _0xb9e6e1 + Math.floor(Math.random() * (_0x4a2e91 - _0xb9e6e1 + 1));
          },
          randFloat: function (_0x5be8cc, _0x710a31) {
            return _0x5be8cc + Math.random() * (_0x710a31 - _0x5be8cc);
          },
          randFloatSpread: function (_0x295b82) {
            return _0x295b82 * (0.5 - Math.random());
          },
          seededRandom: function (_0x17a5e8) {
            if (_0x17a5e8 !== undefined) {
              _0x389ae0 = _0x17a5e8 % 2147483647;
            }
            _0x389ae0 = _0x389ae0 * 16807 % 2147483647;
            return (_0x389ae0 - 1) / 2147483646;
          },
          degToRad: function (_0x184cb6) {
            return _0x184cb6 * _0x21403c;
          },
          radToDeg: function (_0x35d19a) {
            return _0x35d19a * _0x77398c;
          },
          isPowerOfTwo: _0x5d7856,
          ceilPowerOfTwo: _0x2f55b5,
          floorPowerOfTwo: _0x30f7e0,
          setQuaternionFromProperEuler: function (_0xc7a705, _0x54535c, _0x3942d3, _0x34923d, _0x338ef6) {
            const _0x4ca823 = Math.cos;
            const _0x34c85d = Math.sin;
            var _0x4a5ff4 = _0x4ca823(_0x3942d3 / 2);
            var _0x3e5315 = _0x34c85d(_0x3942d3 / 2);
            var _0x2a4175 = _0x4ca823((_0x54535c + _0x34923d) / 2);
            var _0x2598dd = _0x34c85d((_0x54535c + _0x34923d) / 2);
            var _0x58eaf7 = _0x4ca823((_0x54535c - _0x34923d) / 2);
            var _0x145a06 = _0x34c85d((_0x54535c - _0x34923d) / 2);
            var _0x4933f1 = _0x4ca823((_0x34923d - _0x54535c) / 2);
            var _0x357a6b = _0x34c85d((_0x34923d - _0x54535c) / 2);
            switch (_0x338ef6) {
              case "XYX":
                _0xc7a705.set(_0x4a5ff4 * _0x2598dd, _0x3e5315 * _0x58eaf7, _0x3e5315 * _0x145a06, _0x4a5ff4 * _0x2a4175);
                break;
              case "YZY":
                _0xc7a705.set(_0x3e5315 * _0x145a06, _0x4a5ff4 * _0x2598dd, _0x3e5315 * _0x58eaf7, _0x4a5ff4 * _0x2a4175);
                break;
              case "ZXZ":
                _0xc7a705.set(_0x3e5315 * _0x58eaf7, _0x3e5315 * _0x145a06, _0x4a5ff4 * _0x2598dd, _0x4a5ff4 * _0x2a4175);
                break;
              case "XZX":
                _0xc7a705.set(_0x4a5ff4 * _0x2598dd, _0x3e5315 * _0x357a6b, _0x3e5315 * _0x4933f1, _0x4a5ff4 * _0x2a4175);
                break;
              case "YXY":
                _0xc7a705.set(_0x3e5315 * _0x4933f1, _0x4a5ff4 * _0x2598dd, _0x3e5315 * _0x357a6b, _0x4a5ff4 * _0x2a4175);
                break;
              case "ZYZ":
                _0xc7a705.set(_0x3e5315 * _0x357a6b, _0x3e5315 * _0x4933f1, _0x4a5ff4 * _0x2598dd, _0x4a5ff4 * _0x2a4175);
            }
          }
        });
        class _0x25f874 {
          constructor(_0x4a32fa = 0, _0x277124 = 0) {
            this.x = _0x4a32fa;
            this.y = _0x277124;
          }
          get width() {
            return this.x;
          }
          set width(_0x315801) {
            this.x = _0x315801;
          }
          get height() {
            return this.y;
          }
          set height(_0x393c05) {
            this.y = _0x393c05;
          }
          set(_0x3f794, _0x4962d2) {
            this.x = _0x3f794;
            this.y = _0x4962d2;
            return this;
          }
          setScalar(_0x3170d1) {
            this.x = _0x3170d1;
            this.y = _0x3170d1;
            return this;
          }
          setX(_0x38e25e) {
            this.x = _0x38e25e;
            return this;
          }
          setY(_0x1d8501) {
            this.y = _0x1d8501;
            return this;
          }
          setComponent(_0xa6de4b, _0x5ddfcf) {
            switch (_0xa6de4b) {
              case 0:
                this.x = _0x5ddfcf;
                break;
              case 1:
                this.y = _0x5ddfcf;
                break;
              default:
                throw new Error("`````````````");
            }
            return this;
          }
          getComponent(_0x4adb5b) {
            switch (_0x4adb5b) {
              case 0:
                return this.x;
              case 1:
                return this.y;
              default:
                throw new Error("`````````````");
            }
          }
          clone() {
            return new this.constructor(this.x, this.y);
          }
          copy(_0x538e1b) {
            this.x = _0x538e1b.x;
            this.y = _0x538e1b.y;
            return this;
          }
          add(_0x3692d3, _0x1f09da) {
            if (_0x1f09da !== undefined) {
              return this.addVectors(_0x3692d3, _0x1f09da);
            } else {
              this.x += _0x3692d3.x;
              this.y += _0x3692d3.y;
              return this;
            }
          }
          addScalar(_0x51510f) {
            this.x += _0x51510f;
            this.y += _0x51510f;
            return this;
          }
          addVectors(_0x42d12c, _0x432d72) {
            this.x = _0x42d12c.x + _0x432d72.x;
            this.y = _0x42d12c.y + _0x432d72.y;
            return this;
          }
          addScaledVector(_0x132e30, _0x3c0ec6) {
            this.x += _0x132e30.x * _0x3c0ec6;
            this.y += _0x132e30.y * _0x3c0ec6;
            return this;
          }
          sub(_0xd7c146, _0x56e04e) {
            if (_0x56e04e !== undefined) {
              return this.subVectors(_0xd7c146, _0x56e04e);
            } else {
              this.x -= _0xd7c146.x;
              this.y -= _0xd7c146.y;
              return this;
            }
          }
          subScalar(_0x5c2fb7) {
            this.x -= _0x5c2fb7;
            this.y -= _0x5c2fb7;
            return this;
          }
          subVectors(_0x107b46, _0x190850) {
            this.x = _0x107b46.x - _0x190850.x;
            this.y = _0x107b46.y - _0x190850.y;
            return this;
          }
          multiply(_0x5af153) {
            this.x *= _0x5af153.x;
            this.y *= _0x5af153.y;
            return this;
          }
          multiplyScalar(_0x41cd06) {
            this.x *= _0x41cd06;
            this.y *= _0x41cd06;
            return this;
          }
          divide(_0x35a06e) {
            this.x /= _0x35a06e.x;
            this.y /= _0x35a06e.y;
            return this;
          }
          divideScalar(_0x381537) {
            return this.multiplyScalar(1 / _0x381537);
          }
          applyMatrix3(_0x101858) {
            var _0xd1ce60 = this.x;
            var _0x519c58 = this.y;
            _0x101858 = _0x101858.elements;
            this.x = _0x101858[0] * _0xd1ce60 + _0x101858[3] * _0x519c58 + _0x101858[6];
            this.y = _0x101858[1] * _0xd1ce60 + _0x101858[4] * _0x519c58 + _0x101858[7];
            return this;
          }
          min(_0x250413) {
            this.x = Math.min(this.x, _0x250413.x);
            this.y = Math.min(this.y, _0x250413.y);
            return this;
          }
          max(_0x592c32) {
            this.x = Math.max(this.x, _0x592c32.x);
            this.y = Math.max(this.y, _0x592c32.y);
            return this;
          }
          clamp(_0x11c765, _0x53d919) {
            this.x = Math.max(_0x11c765.x, Math.min(_0x53d919.x, this.x));
            this.y = Math.max(_0x11c765.y, Math.min(_0x53d919.y, this.y));
            return this;
          }
          clampScalar(_0x181337, _0x52599e) {
            this.x = Math.max(_0x181337, Math.min(_0x52599e, this.x));
            this.y = Math.max(_0x181337, Math.min(_0x52599e, this.y));
            return this;
          }
          clampLength(_0x2159e3, _0x39598b) {
            var _0x531f9d = this.length();
            return this.divideScalar(_0x531f9d || 1).multiplyScalar(Math.max(_0x2159e3, Math.min(_0x39598b, _0x531f9d)));
          }
          floor() {
            this.x = Math.floor(this.x);
            this.y = Math.floor(this.y);
            return this;
          }
          ceil() {
            this.x = Math.ceil(this.x);
            this.y = Math.ceil(this.y);
            return this;
          }
          round() {
            this.x = Math.round(this.x);
            this.y = Math.round(this.y);
            return this;
          }
          roundToZero() {
            this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
            this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
            return this;
          }
          negate() {
            this.x = -this.x;
            this.y = -this.y;
            return this;
          }
          dot(_0x26e346) {
            return this.x * _0x26e346.x + this.y * _0x26e346.y;
          }
          cross(_0x57bb31) {
            return this.x * _0x57bb31.y - this.y * _0x57bb31.x;
          }
          lengthSq() {
            return this.x * this.x + this.y * this.y;
          }
          length() {
            return Math.sqrt(this.x * this.x + this.y * this.y);
          }
          manhattanLength() {
            return Math.abs(this.x) + Math.abs(this.y);
          }
          normalize() {
            return this.divideScalar(this.length() || 1);
          }
          angle() {
            return Math.atan2(-this.y, -this.x) + Math.PI;
          }
          distanceTo(_0x55d569) {
            return Math.sqrt(this.distanceToSquared(_0x55d569));
          }
          distanceToSquared(_0x4a4661) {
            var _0x3f7bf8 = 10;
            var _0xb3081 = this.x - _0x4a4661.x;
            _0x3f7bf8 = 4;
            return _0xb3081 * _0xb3081 + (_0x4a4661 = this.y - _0x4a4661.y) * _0x4a4661;
          }
          manhattanDistanceTo(_0xdd5777) {
            return Math.abs(this.x - _0xdd5777.x) + Math.abs(this.y - _0xdd5777.y);
          }
          setLength(_0x2756cf) {
            return this.normalize().multiplyScalar(_0x2756cf);
          }
          lerp(_0x413750, _0x2cbb49) {
            this.x += (_0x413750.x - this.x) * _0x2cbb49;
            this.y += (_0x413750.y - this.y) * _0x2cbb49;
            return this;
          }
          lerpVectors(_0x36c782, _0x21fc4a, _0x36fae9) {
            this.x = _0x36c782.x + (_0x21fc4a.x - _0x36c782.x) * _0x36fae9;
            this.y = _0x36c782.y + (_0x21fc4a.y - _0x36c782.y) * _0x36fae9;
            return this;
          }
          equals(_0x1f7501) {
            return _0x1f7501.x === this.x && _0x1f7501.y === this.y;
          }
          fromArray(_0x5af0da, _0x202c94 = 0) {
            this.x = _0x5af0da[_0x202c94];
            this.y = _0x5af0da[_0x202c94 + 1];
            return this;
          }
          toArray(_0x12c0af = [], _0x1ca8ba = 0) {
            _0x12c0af[_0x1ca8ba] = this.x;
            _0x12c0af[_0x1ca8ba + 1] = this.y;
            return _0x12c0af;
          }
          fromBufferAttribute(_0x55a31f, _0x58f44c, _0x59612f) {
            this.x = _0x55a31f.getX(_0x58f44c);
            this.y = _0x55a31f.getY(_0x58f44c);
            return this;
          }
          rotateAround(_0x158576, _0xb984de) {
            var _0x475644 = Math.cos(_0xb984de);
            var _0x397ec4 = Math.sin(_0xb984de);
            var _0x395d74 = this.x - _0x158576.x;
            _0xb984de = this.y - _0x158576.y;
            this.x = _0x395d74 * _0x475644 - _0xb984de * _0x397ec4 + _0x158576.x;
            this.y = _0x395d74 * _0x397ec4 + _0xb984de * _0x475644 + _0x158576.y;
            return this;
          }
          random() {
            this.x = Math.random();
            this.y = Math.random();
            return this;
          }
          *[Symbol.iterator]() {
            yield this.x;
            yield this.y;
          }
        }
        _0x25f874.prototype.isVector2 = true;
        class _0x30cf5e {
          constructor() {
            this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];
          }
          set(_0x1b3502, _0x3b4bc1, _0x372dfd, _0x4b561b, _0x11aec2, _0x42c2e7, _0x536fd8, _0x18334b, _0x148f95) {
            const _0xd37aa6 = this.elements;
            _0xd37aa6[0] = _0x1b3502;
            _0xd37aa6[1] = _0x4b561b;
            _0xd37aa6[2] = _0x536fd8;
            _0xd37aa6[3] = _0x3b4bc1;
            _0xd37aa6[4] = _0x11aec2;
            _0xd37aa6[5] = _0x18334b;
            _0xd37aa6[6] = _0x372dfd;
            _0xd37aa6[7] = _0x42c2e7;
            _0xd37aa6[8] = _0x148f95;
            return this;
          }
          identity() {
            this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
            return this;
          }
          copy(_0x3969d1) {
            const _0x289895 = this.elements;
            _0x3969d1 = _0x3969d1.elements;
            _0x289895[0] = _0x3969d1[0];
            _0x289895[1] = _0x3969d1[1];
            _0x289895[2] = _0x3969d1[2];
            _0x289895[3] = _0x3969d1[3];
            _0x289895[4] = _0x3969d1[4];
            _0x289895[5] = _0x3969d1[5];
            _0x289895[6] = _0x3969d1[6];
            _0x289895[7] = _0x3969d1[7];
            _0x289895[8] = _0x3969d1[8];
            return this;
          }
          extractBasis(_0x4e7cc3, _0x39f1a3, _0x330533) {
            _0x4e7cc3.setFromMatrix3Column(this, 0);
            _0x39f1a3.setFromMatrix3Column(this, 1);
            _0x330533.setFromMatrix3Column(this, 2);
            return this;
          }
          setFromMatrix4(_0x278e3c) {
            _0x278e3c = _0x278e3c.elements;
            this.set(_0x278e3c[0], _0x278e3c[4], _0x278e3c[8], _0x278e3c[1], _0x278e3c[5], _0x278e3c[9], _0x278e3c[2], _0x278e3c[6], _0x278e3c[10]);
            return this;
          }
          multiply(_0xdb8742) {
            return this.multiplyMatrices(this, _0xdb8742);
          }
          premultiply(_0x1ed9d5) {
            return this.multiplyMatrices(_0x1ed9d5, this);
          }
          multiplyMatrices(_0x165c7d, _0x169565) {
            var _0x456507 = _0x165c7d.elements;
            var _0x2459d1 = _0x169565.elements;
            const _0xb6240d = this.elements;
            var _0x51a33e = _0x456507[0];
            var _0x22e130 = _0x456507[3];
            var _0x3fdd81 = _0x456507[6];
            var _0x18740e = _0x456507[1];
            var _0x52a99f = _0x456507[4];
            var _0x5777a7 = _0x456507[7];
            var _0x1b5f13 = _0x456507[2];
            var _0x275b24 = _0x456507[5];
            var _0x39eb39 = _0x456507[8];
            var _0x28a63e = _0x2459d1[0];
            var _0xb37757 = _0x2459d1[3];
            var _0x852127 = _0x2459d1[6];
            var _0x464cbb = _0x2459d1[1];
            var _0x2a24a9 = _0x2459d1[4];
            _0x165c7d = _0x2459d1[7];
            _0x169565 = _0x2459d1[2];
            _0x456507 = _0x2459d1[5];
            _0x2459d1 = _0x2459d1[8];
            _0xb6240d[0] = _0x51a33e * _0x28a63e + _0x22e130 * _0x464cbb + _0x3fdd81 * _0x169565;
            _0xb6240d[3] = _0x51a33e * _0xb37757 + _0x22e130 * _0x2a24a9 + _0x3fdd81 * _0x456507;
            _0xb6240d[6] = _0x51a33e * _0x852127 + _0x22e130 * _0x165c7d + _0x3fdd81 * _0x2459d1;
            _0xb6240d[1] = _0x18740e * _0x28a63e + _0x52a99f * _0x464cbb + _0x5777a7 * _0x169565;
            _0xb6240d[4] = _0x18740e * _0xb37757 + _0x52a99f * _0x2a24a9 + _0x5777a7 * _0x456507;
            _0xb6240d[7] = _0x18740e * _0x852127 + _0x52a99f * _0x165c7d + _0x5777a7 * _0x2459d1;
            _0xb6240d[2] = _0x1b5f13 * _0x28a63e + _0x275b24 * _0x464cbb + _0x39eb39 * _0x169565;
            _0xb6240d[5] = _0x1b5f13 * _0xb37757 + _0x275b24 * _0x2a24a9 + _0x39eb39 * _0x456507;
            _0xb6240d[8] = _0x1b5f13 * _0x852127 + _0x275b24 * _0x165c7d + _0x39eb39 * _0x2459d1;
            return this;
          }
          multiplyScalar(_0x2e7a76) {
            const _0x49c2de = this.elements;
            _0x49c2de[0] *= _0x2e7a76;
            _0x49c2de[3] *= _0x2e7a76;
            _0x49c2de[6] *= _0x2e7a76;
            _0x49c2de[1] *= _0x2e7a76;
            _0x49c2de[4] *= _0x2e7a76;
            _0x49c2de[7] *= _0x2e7a76;
            _0x49c2de[2] *= _0x2e7a76;
            _0x49c2de[5] *= _0x2e7a76;
            _0x49c2de[8] *= _0x2e7a76;
            return this;
          }
          determinant() {
            var _0x4c1ead;
            var _0x9d5234 = (_0x4c1ead = this.elements)[0];
            var _0x585d84 = _0x4c1ead[1];
            var _0x17972b = _0x4c1ead[2];
            var _0x4f1e2c = _0x4c1ead[3];
            var _0x436f46 = _0x4c1ead[4];
            var _0x25bf73 = _0x4c1ead[5];
            var _0x91cfe2 = _0x4c1ead[6];
            var _0x554c3d = _0x4c1ead[7];
            return _0x9d5234 * _0x436f46 * (_0x4c1ead = _0x4c1ead[8]) - _0x9d5234 * _0x25bf73 * _0x554c3d - _0x585d84 * _0x4f1e2c * _0x4c1ead + _0x585d84 * _0x25bf73 * _0x91cfe2 + _0x17972b * _0x4f1e2c * _0x554c3d - _0x17972b * _0x436f46 * _0x91cfe2;
          }
          invert() {
            const _0xe0b38b = this.elements;
            const _0x1c8817 = _0xe0b38b[0];
            const _0x46ac47 = _0xe0b38b[1];
            const _0x584d1a = _0xe0b38b[2];
            const _0x38e9fa = _0xe0b38b[3];
            const _0x254819 = _0xe0b38b[4];
            const _0x3d9526 = _0xe0b38b[5];
            const _0x380a47 = _0xe0b38b[6];
            const _0x4086c0 = _0xe0b38b[7];
            const _0x1a73fa = _0xe0b38b[8];
            const _0x29251a = _0x1a73fa * _0x254819 - _0x3d9526 * _0x4086c0;
            const _0x276e70 = _0x3d9526 * _0x380a47 - _0x1a73fa * _0x38e9fa;
            const _0x488aa0 = _0x4086c0 * _0x38e9fa - _0x254819 * _0x380a47;
            const _0x4c6060 = _0x1c8817 * _0x29251a + _0x46ac47 * _0x276e70 + _0x584d1a * _0x488aa0;
            if (_0x4c6060 == 0) {
              return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            var _0x4b0efd;
            var _0x2245aa = 1 / _0x4c6060;
            _0x4b0efd = 14;
            _0xe0b38b[0] = _0x29251a * _0x2245aa;
            _0xe0b38b[1] = (_0x584d1a * _0x4086c0 - _0x1a73fa * _0x46ac47) * _0x2245aa;
            _0xe0b38b[2] = (_0x3d9526 * _0x46ac47 - _0x584d1a * _0x254819) * _0x2245aa;
            _0xe0b38b[3] = _0x276e70 * _0x2245aa;
            _0xe0b38b[4] = (_0x1a73fa * _0x1c8817 - _0x584d1a * _0x380a47) * _0x2245aa;
            _0xe0b38b[5] = (_0x584d1a * _0x38e9fa - _0x3d9526 * _0x1c8817) * _0x2245aa;
            _0xe0b38b[6] = _0x488aa0 * _0x2245aa;
            _0xe0b38b[7] = (_0x46ac47 * _0x380a47 - _0x4086c0 * _0x1c8817) * _0x2245aa;
            _0xe0b38b[8] = (_0x254819 * _0x1c8817 - _0x46ac47 * _0x38e9fa) * _0x2245aa;
            return this;
          }
          transpose() {
            var _0x44a5d3 = 15;
            var _0x3f6d27;
            _0x44a5d3 = 4;
            var _0x5c8c8d = 8;
            const _0x5248d3 = this.elements;
            _0x5c8c8d = 2;
            _0x3f6d27 = _0x5248d3[1];
            _0x5248d3[1] = _0x5248d3[3];
            _0x5248d3[3] = _0x3f6d27;
            _0x3f6d27 = _0x5248d3[2];
            _0x5248d3[2] = _0x5248d3[6];
            _0x5248d3[6] = _0x3f6d27;
            _0x3f6d27 = _0x5248d3[5];
            _0x5248d3[5] = _0x5248d3[7];
            _0x5248d3[7] = _0x3f6d27;
            return this;
          }
          getNormalMatrix(_0x21ee76) {
            return this.setFromMatrix4(_0x21ee76).invert().transpose();
          }
          transposeIntoArray(_0x3bb378) {
            var _0x42e171 = this.elements;
            _0x3bb378[0] = _0x42e171[0];
            _0x3bb378[1] = _0x42e171[3];
            _0x3bb378[2] = _0x42e171[6];
            _0x3bb378[3] = _0x42e171[1];
            _0x3bb378[4] = _0x42e171[4];
            _0x3bb378[5] = _0x42e171[7];
            _0x3bb378[6] = _0x42e171[2];
            _0x3bb378[7] = _0x42e171[5];
            _0x3bb378[8] = _0x42e171[8];
            return this;
          }
          setUvTransform(_0x32d21f, _0x2382f6, _0x16b454, _0x460cf6, _0x33d0c8, _0x1e27d6, _0xbf0fdf) {
            var _0xae8a5d = Math.cos(_0x33d0c8);
            _0x33d0c8 = Math.sin(_0x33d0c8);
            this.set(_0x16b454 * _0xae8a5d, _0x16b454 * _0x33d0c8, -_0x16b454 * (_0xae8a5d * _0x1e27d6 + _0x33d0c8 * _0xbf0fdf) + _0x1e27d6 + _0x32d21f, -_0x460cf6 * _0x33d0c8, _0x460cf6 * _0xae8a5d, -_0x460cf6 * (-_0x33d0c8 * _0x1e27d6 + _0xae8a5d * _0xbf0fdf) + _0xbf0fdf + _0x2382f6, 0, 0, 1);
            return this;
          }
          scale(_0x42e7c8, _0x1fd550) {
            const _0x37db51 = this.elements;
            _0x37db51[0] *= _0x42e7c8;
            _0x37db51[3] *= _0x42e7c8;
            _0x37db51[6] *= _0x42e7c8;
            _0x37db51[1] *= _0x1fd550;
            _0x37db51[4] *= _0x1fd550;
            _0x37db51[7] *= _0x1fd550;
            return this;
          }
          rotate(_0x1bb20b) {
            var _0x28d8db = Math.cos(_0x1bb20b);
            var _0x4a6969 = Math.sin(_0x1bb20b);
            const _0x2ad215 = this.elements;
            var _0x36e159 = _0x2ad215[0];
            var _0x43ec73 = _0x2ad215[3];
            var _0x25e749 = _0x2ad215[6];
            var _0x49e5a5 = _0x2ad215[1];
            var _0x122185 = _0x2ad215[4];
            _0x1bb20b = _0x2ad215[7];
            _0x2ad215[0] = _0x28d8db * _0x36e159 + _0x4a6969 * _0x49e5a5;
            _0x2ad215[3] = _0x28d8db * _0x43ec73 + _0x4a6969 * _0x122185;
            _0x2ad215[6] = _0x28d8db * _0x25e749 + _0x4a6969 * _0x1bb20b;
            _0x2ad215[1] = -_0x4a6969 * _0x36e159 + _0x28d8db * _0x49e5a5;
            _0x2ad215[4] = -_0x4a6969 * _0x43ec73 + _0x28d8db * _0x122185;
            _0x2ad215[7] = -_0x4a6969 * _0x25e749 + _0x28d8db * _0x1bb20b;
            return this;
          }
          translate(_0x5439fe, _0x561e2e) {
            const _0x5c06fd = this.elements;
            _0x5c06fd[0] += _0x5439fe * _0x5c06fd[2];
            _0x5c06fd[3] += _0x5439fe * _0x5c06fd[5];
            _0x5c06fd[6] += _0x5439fe * _0x5c06fd[8];
            _0x5c06fd[1] += _0x561e2e * _0x5c06fd[2];
            _0x5c06fd[4] += _0x561e2e * _0x5c06fd[5];
            _0x5c06fd[7] += _0x561e2e * _0x5c06fd[8];
            return this;
          }
          equals(_0x5c36d7) {
            var _0x285081 = this.elements;
            var _0xb1b5d5 = _0x5c36d7.elements;
            for (let _0x313c90 = 0; _0x313c90 < 9; _0x313c90++) {
              if (_0x285081[_0x313c90] !== _0xb1b5d5[_0x313c90]) {
                return false;
              }
            }
            return true;
          }
          fromArray(_0x57ef12, _0x439762 = 0) {
            for (let _0x13b685 = 0; _0x13b685 < 9; _0x13b685++) {
              this.elements[_0x13b685] = _0x57ef12[_0x13b685 + _0x439762];
            }
            return this;
          }
          toArray(_0x2d9f49 = [], _0x53800d = 0) {
            var _0x156e20 = this.elements;
            _0x2d9f49[_0x53800d] = _0x156e20[0];
            _0x2d9f49[_0x53800d + 1] = _0x156e20[1];
            _0x2d9f49[_0x53800d + 2] = _0x156e20[2];
            _0x2d9f49[_0x53800d + 3] = _0x156e20[3];
            _0x2d9f49[_0x53800d + 4] = _0x156e20[4];
            _0x2d9f49[_0x53800d + 5] = _0x156e20[5];
            _0x2d9f49[_0x53800d + 6] = _0x156e20[6];
            _0x2d9f49[_0x53800d + 7] = _0x156e20[7];
            _0x2d9f49[_0x53800d + 8] = _0x156e20[8];
            return _0x2d9f49;
          }
          clone() {
            return new this.constructor().fromArray(this.elements);
          }
        }
        function _0x301bd1(_0x7aba3d) {
          if (_0x7aba3d.length === 0) {
            return -Infinity;
          }
          var _0x51778a = 4;
          let _0x3f0098 = _0x7aba3d[0];
          _0x51778a = 14;
          for (let _0x273818 = 1, _0x1b42e4 = _0x7aba3d.length; _0x273818 < _0x1b42e4; ++_0x273818) {
            if (_0x7aba3d[_0x273818] > _0x3f0098) {
              _0x3f0098 = _0x7aba3d[_0x273818];
            }
          }
          return _0x3f0098;
        }
        _0x30cf5e.prototype.isMatrix3 = true;
        var _0x26ca81 = 8;
        const _0x538c93 = {
          Int8Array: Int8Array,
          Uint8Array: Uint8Array,
          Uint8ClampedArray: Uint8ClampedArray,
          Int16Array: Int16Array,
          Uint16Array: Uint16Array,
          Int32Array: Int32Array,
          Uint32Array: Uint32Array,
          Float32Array: Float32Array,
          Float64Array: Float64Array
        };
        _0x26ca81 = "emen";
        function _0x25bc5a(_0x17a388, _0x3bb019) {
          return new _0x538c93[_0x17a388](_0x3bb019);
        }
        function _0xc7d73e(_0x4c5480) {
          return document.createElementNS("http://www.w3.org/1999/xhtml", _0x4c5480);
        }
        let _0x362992;
        class _0x5e369a {
          static getDataURL(_0x5f4f5) {
            if (/^data:/i.test(_0x5f4f5.src)) {
              return _0x5f4f5.src;
            }
            if (typeof HTMLCanvasElement == "undefined") {
              return _0x5f4f5.src;
            }
            let _0x1e3362;
            if (_0x5f4f5 instanceof HTMLCanvasElement) {
              _0x1e3362 = _0x5f4f5;
            } else {
              if (_0x362992 === undefined) {
                _0x362992 = _0xc7d73e("canvas");
              }
              _0x362992.width = _0x5f4f5.width;
              _0x362992.height = _0x5f4f5.height;
              var _0x12db27;
              const _0x10c8a5 = _0x362992.getContext("2d");
              _0x12db27 = 14;
              if (_0x5f4f5 instanceof ImageData) {
                _0x10c8a5.putImageData(_0x5f4f5, 0, 0);
              } else {
                _0x10c8a5.drawImage(_0x5f4f5, 0, 0, _0x5f4f5.width, _0x5f4f5.height);
              }
              _0x1e3362 = _0x362992;
            }
            if (_0x1e3362.width > 2048 || _0x1e3362.height > 2048) {
              return _0x1e3362.toDataURL("image/jpeg", 0.6);
            } else {
              return _0x1e3362.toDataURL("image/png", 0.7);
            }
          }
        }
        let _0x2020ef = 0;
        class _0x3d39cb extends _0x3a55ab {
          constructor(_0x11a355 = _0x3d39cb.DEFAULT_IMAGE, _0x3595e6 = _0x3d39cb.DEFAULT_MAPPING, _0x297226 = _0x4f55c6, _0x541d4d = _0x4f55c6, _0x1bb2c9 = _0x202e90, _0x3bcfd4 = _0x3f90fb, _0x51488b = _0x4f87e5, _0xcd107c = _0x3a53e9, _0x1d2db5 = 1, _0x12a8bf = _0xca2f2a) {
            super();
            Object.defineProperty(this, "id", {
              value: _0x2020ef++
            });
            this.uuid = _0x2b30b2();
            this.name = "";
            this.image = _0x11a355;
            this.mipmaps = [];
            this.mapping = _0x3595e6;
            this.wrapS = _0x297226;
            this.wrapT = _0x541d4d;
            this.magFilter = _0x1bb2c9;
            this.minFilter = _0x3bcfd4;
            this.anisotropy = _0x1d2db5;
            this.format = _0x51488b;
            this.internalFormat = null;
            this.type = _0xcd107c;
            this.offset = new _0x25f874(0, 0);
            this.repeat = new _0x25f874(1, 1);
            this.center = new _0x25f874(0, 0);
            this.rotation = 0;
            this.matrixAutoUpdate = true;
            this.matrix = new _0x30cf5e();
            this.generateMipmaps = true;
            this.premultiplyAlpha = false;
            this.flipY = true;
            this.unpackAlignment = 4;
            this.encoding = _0x12a8bf;
            this.userData = {};
            this.version = 0;
            this.onUpdate = null;
            this.isRenderTargetTexture = false;
          }
          updateMatrix() {
            this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
          }
          clone() {
            return new this.constructor().copy(this);
          }
          copy(_0xb4ce30) {
            this.name = _0xb4ce30.name;
            this.image = _0xb4ce30.image;
            this.mipmaps = _0xb4ce30.mipmaps.slice(0);
            this.mapping = _0xb4ce30.mapping;
            this.wrapS = _0xb4ce30.wrapS;
            this.wrapT = _0xb4ce30.wrapT;
            this.magFilter = _0xb4ce30.magFilter;
            this.minFilter = _0xb4ce30.minFilter;
            this.anisotropy = _0xb4ce30.anisotropy;
            this.format = _0xb4ce30.format;
            this.internalFormat = _0xb4ce30.internalFormat;
            this.type = _0xb4ce30.type;
            this.offset.copy(_0xb4ce30.offset);
            this.repeat.copy(_0xb4ce30.repeat);
            this.center.copy(_0xb4ce30.center);
            this.rotation = _0xb4ce30.rotation;
            this.matrixAutoUpdate = _0xb4ce30.matrixAutoUpdate;
            this.matrix.copy(_0xb4ce30.matrix);
            this.generateMipmaps = _0xb4ce30.generateMipmaps;
            this.premultiplyAlpha = _0xb4ce30.premultiplyAlpha;
            this.flipY = _0xb4ce30.flipY;
            this.unpackAlignment = _0xb4ce30.unpackAlignment;
            this.encoding = _0xb4ce30.encoding;
            this.userData = JSON.parse(JSON.stringify(_0xb4ce30.userData));
            return this;
          }
          toJSON(_0x247bb4) {
            var _0xd86cb9 = 11;
            var _0x2b9b8c = _0x247bb4 === undefined || typeof _0x247bb4 == "string";
            _0xd86cb9 = 5;
            if (!_0x2b9b8c && _0x247bb4.textures[this.uuid] !== undefined) {
              return _0x247bb4.textures[this.uuid];
            }
            const _0x5b0a6a = {
              metadata: {
                version: 4.5,
                type: "Texture",
                generator: "Texture.toJSON"
              },
              uuid: this.uuid,
              name: this.name,
              mapping: this.mapping,
              repeat: [this.repeat.x, this.repeat.y],
              offset: [this.offset.x, this.offset.y],
              center: [this.center.x, this.center.y],
              rotation: this.rotation,
              wrap: [this.wrapS, this.wrapT],
              format: this.format,
              type: this.type,
              encoding: this.encoding,
              minFilter: this.minFilter,
              magFilter: this.magFilter,
              anisotropy: this.anisotropy,
              flipY: this.flipY,
              premultiplyAlpha: this.premultiplyAlpha,
              unpackAlignment: this.unpackAlignment
            };
            if (this.image !== undefined) {
              var _0x29cd3c;
              const _0x7c67f7 = this.image;
              _0x29cd3c = "bcmh";
              if (_0x7c67f7.uuid === undefined) {
                _0x7c67f7.uuid = _0x2b30b2();
              }
              if (!_0x2b9b8c && _0x247bb4.images[_0x7c67f7.uuid] === undefined) {
                let _0x5ed022;
                if (Array.isArray(_0x7c67f7)) {
                  _0x5ed022 = [];
                  for (let _0x442b6a = 0, _0x4f6ad2 = _0x7c67f7.length; _0x442b6a < _0x4f6ad2; _0x442b6a++) {
                    if (_0x7c67f7[_0x442b6a].isDataTexture) {
                      _0x5ed022.push(_0x45f7dc(_0x7c67f7[_0x442b6a].image));
                    } else {
                      _0x5ed022.push(_0x45f7dc(_0x7c67f7[_0x442b6a]));
                    }
                  }
                } else {
                  _0x5ed022 = _0x45f7dc(_0x7c67f7);
                }
                _0x247bb4.images[_0x7c67f7.uuid] = {
                  uuid: _0x7c67f7.uuid,
                  url: _0x5ed022
                };
              }
              _0x5b0a6a.image = _0x7c67f7.uuid;
            }
            if (JSON.stringify(this.userData) !== "{}") {
              _0x5b0a6a.userData = this.userData;
            }
            if (!_0x2b9b8c) {
              _0x247bb4.textures[this.uuid] = _0x5b0a6a;
            }
            return _0x5b0a6a;
          }
          dispose() {
            this.dispatchEvent({
              type: "dispose"
            });
          }
          transformUv(_0x566f0b) {
            if (this.mapping !== _0x658452) {
              return _0x566f0b;
            }
            _0x566f0b.applyMatrix3(this.matrix);
            if (_0x566f0b.x < 0 || _0x566f0b.x > 1) {
              switch (this.wrapS) {
                case _0xc7a5e0:
                  _0x566f0b.x = _0x566f0b.x - Math.floor(_0x566f0b.x);
                  break;
                case _0x4f55c6:
                  _0x566f0b.x = _0x566f0b.x < 0 ? 0 : 1;
                  break;
                case _0x53382e:
                  if (Math.abs(Math.floor(_0x566f0b.x) % 2) === 1) {
                    _0x566f0b.x = Math.ceil(_0x566f0b.x) - _0x566f0b.x;
                  } else {
                    _0x566f0b.x = _0x566f0b.x - Math.floor(_0x566f0b.x);
                  }
              }
            }
            if (_0x566f0b.y < 0 || _0x566f0b.y > 1) {
              switch (this.wrapT) {
                case _0xc7a5e0:
                  _0x566f0b.y = _0x566f0b.y - Math.floor(_0x566f0b.y);
                  break;
                case _0x4f55c6:
                  _0x566f0b.y = _0x566f0b.y < 0 ? 0 : 1;
                  break;
                case _0x53382e:
                  if (Math.abs(Math.floor(_0x566f0b.y) % 2) === 1) {
                    _0x566f0b.y = Math.ceil(_0x566f0b.y) - _0x566f0b.y;
                  } else {
                    _0x566f0b.y = _0x566f0b.y - Math.floor(_0x566f0b.y);
                  }
              }
            }
            if (this.flipY) {
              _0x566f0b.y = 1 - _0x566f0b.y;
            }
            return _0x566f0b;
          }
          set needsUpdate(_0x22aff1) {
            if (_0x22aff1 === true) {
              this.version++;
            }
          }
        }
        function _0x45f7dc(_0x5b012a) {
          if (typeof HTMLImageElement != "undefined" && _0x5b012a instanceof HTMLImageElement || typeof HTMLCanvasElement != "undefined" && _0x5b012a instanceof HTMLCanvasElement || typeof ImageBitmap != "undefined" && _0x5b012a instanceof ImageBitmap) {
            return _0x5e369a.getDataURL(_0x5b012a);
          } else if (_0x5b012a.data) {
            return {
              data: Array.prototype.slice.call(_0x5b012a.data),
              width: _0x5b012a.width,
              height: _0x5b012a.height,
              type: _0x5b012a.data.constructor.name
            };
          } else {
            return {};
          }
        }
        _0x3d39cb.DEFAULT_IMAGE = undefined;
        _0x3d39cb.DEFAULT_MAPPING = _0x658452;
        _0x3d39cb.prototype.isTexture = true;
        class _0x275701 {
          constructor(_0x5ce606 = 0, _0x26cfd4 = 0, _0x4f01f1 = 0, _0x1abbb1 = 1) {
            this.x = _0x5ce606;
            this.y = _0x26cfd4;
            this.z = _0x4f01f1;
            this.w = _0x1abbb1;
          }
          get width() {
            return this.z;
          }
          set width(_0x3c985d) {
            this.z = _0x3c985d;
          }
          get height() {
            return this.w;
          }
          set height(_0x2989e4) {
            this.w = _0x2989e4;
          }
          set(_0x5e18a1, _0x56bf7d, _0x24e571, _0x46e1d0) {
            this.x = _0x5e18a1;
            this.y = _0x56bf7d;
            this.z = _0x24e571;
            this.w = _0x46e1d0;
            return this;
          }
          setScalar(_0x880220) {
            this.x = _0x880220;
            this.y = _0x880220;
            this.z = _0x880220;
            this.w = _0x880220;
            return this;
          }
          setX(_0x3c745a) {
            this.x = _0x3c745a;
            return this;
          }
          setY(_0x4ee562) {
            this.y = _0x4ee562;
            return this;
          }
          setZ(_0x36acfe) {
            this.z = _0x36acfe;
            return this;
          }
          setW(_0x4476eb) {
            this.w = _0x4476eb;
            return this;
          }
          setComponent(_0x44b094, _0x602b14) {
            switch (_0x44b094) {
              case 0:
                this.x = _0x602b14;
                break;
              case 1:
                this.y = _0x602b14;
                break;
              case 2:
                this.z = _0x602b14;
                break;
              case 3:
                this.w = _0x602b14;
                break;
              default:
                throw new Error("`````````````");
            }
            return this;
          }
          getComponent(_0x590114) {
            switch (_0x590114) {
              case 0:
                return this.x;
              case 1:
                return this.y;
              case 2:
                return this.z;
              case 3:
                return this.w;
              default:
                throw new Error("`````````````");
            }
          }
          clone() {
            return new this.constructor(this.x, this.y, this.z, this.w);
          }
          copy(_0x4f4f40) {
            this.x = _0x4f4f40.x;
            this.y = _0x4f4f40.y;
            this.z = _0x4f4f40.z;
            this.w = _0x4f4f40.w !== undefined ? _0x4f4f40.w : 1;
            return this;
          }
          add(_0x2651dc, _0x434e82) {
            if (_0x434e82 !== undefined) {
              return this.addVectors(_0x2651dc, _0x434e82);
            } else {
              this.x += _0x2651dc.x;
              this.y += _0x2651dc.y;
              this.z += _0x2651dc.z;
              this.w += _0x2651dc.w;
              return this;
            }
          }
          addScalar(_0x3a9365) {
            this.x += _0x3a9365;
            this.y += _0x3a9365;
            this.z += _0x3a9365;
            this.w += _0x3a9365;
            return this;
          }
          addVectors(_0x40f63b, _0x5cc708) {
            this.x = _0x40f63b.x + _0x5cc708.x;
            this.y = _0x40f63b.y + _0x5cc708.y;
            this.z = _0x40f63b.z + _0x5cc708.z;
            this.w = _0x40f63b.w + _0x5cc708.w;
            return this;
          }
          addScaledVector(_0x4b3e48, _0x23d129) {
            this.x += _0x4b3e48.x * _0x23d129;
            this.y += _0x4b3e48.y * _0x23d129;
            this.z += _0x4b3e48.z * _0x23d129;
            this.w += _0x4b3e48.w * _0x23d129;
            return this;
          }
          sub(_0x2a156a, _0x255306) {
            if (_0x255306 !== undefined) {
              return this.subVectors(_0x2a156a, _0x255306);
            } else {
              this.x -= _0x2a156a.x;
              this.y -= _0x2a156a.y;
              this.z -= _0x2a156a.z;
              this.w -= _0x2a156a.w;
              return this;
            }
          }
          subScalar(_0x1f57aa) {
            this.x -= _0x1f57aa;
            this.y -= _0x1f57aa;
            this.z -= _0x1f57aa;
            this.w -= _0x1f57aa;
            return this;
          }
          subVectors(_0x2ef1c2, _0x285cac) {
            this.x = _0x2ef1c2.x - _0x285cac.x;
            this.y = _0x2ef1c2.y - _0x285cac.y;
            this.z = _0x2ef1c2.z - _0x285cac.z;
            this.w = _0x2ef1c2.w - _0x285cac.w;
            return this;
          }
          multiply(_0x3e7301) {
            this.x *= _0x3e7301.x;
            this.y *= _0x3e7301.y;
            this.z *= _0x3e7301.z;
            this.w *= _0x3e7301.w;
            return this;
          }
          multiplyScalar(_0x346b90) {
            this.x *= _0x346b90;
            this.y *= _0x346b90;
            this.z *= _0x346b90;
            this.w *= _0x346b90;
            return this;
          }
          applyMatrix4(_0x1140e8) {
            var _0x1ec860 = this.x;
            var _0x17705f = this.y;
            var _0x29bcad = this.z;
            var _0x32ecdd = this.w;
            _0x1140e8 = _0x1140e8.elements;
            this.x = _0x1140e8[0] * _0x1ec860 + _0x1140e8[4] * _0x17705f + _0x1140e8[8] * _0x29bcad + _0x1140e8[12] * _0x32ecdd;
            this.y = _0x1140e8[1] * _0x1ec860 + _0x1140e8[5] * _0x17705f + _0x1140e8[9] * _0x29bcad + _0x1140e8[13] * _0x32ecdd;
            this.z = _0x1140e8[2] * _0x1ec860 + _0x1140e8[6] * _0x17705f + _0x1140e8[10] * _0x29bcad + _0x1140e8[14] * _0x32ecdd;
            this.w = _0x1140e8[3] * _0x1ec860 + _0x1140e8[7] * _0x17705f + _0x1140e8[11] * _0x29bcad + _0x1140e8[15] * _0x32ecdd;
            return this;
          }
          divideScalar(_0x905cb7) {
            return this.multiplyScalar(1 / _0x905cb7);
          }
          setAxisAngleFromQuaternion(_0x13e463) {
            this.w = Math.acos(_0x13e463.w) * 2;
            var _0x1fdaa8 = Math.sqrt(1 - _0x13e463.w * _0x13e463.w);
            if (_0x1fdaa8 < 0.0001) {
              this.x = 1;
              this.y = 0;
              this.z = 0;
            } else {
              this.x = _0x13e463.x / _0x1fdaa8;
              this.y = _0x13e463.y / _0x1fdaa8;
              this.z = _0x13e463.z / _0x1fdaa8;
            }
            return this;
          }
          setAxisAngleFromRotationMatrix(_0x518c85) {
            let _0x4c6591;
            let _0x2d0338;
            let _0x273b66;
            let _0x13e352;
            var _0x33baa5 = (_0x277275 = _0x518c85.elements)[0];
            var _0x40a22d = _0x277275[4];
            var _0x478ce8 = _0x277275[8];
            var _0x2bdf98 = _0x277275[1];
            var _0x5ca1b8 = _0x277275[5];
            var _0x23871b = _0x277275[9];
            var _0x1842ae = _0x277275[2];
            var _0x5cd7cb = _0x277275[6];
            var _0x58274d = _0x277275[10];
            if (Math.abs(_0x40a22d - _0x2bdf98) < 0.01 && Math.abs(_0x478ce8 - _0x1842ae) < 0.01 && Math.abs(_0x23871b - _0x5cd7cb) < 0.01) {
              if (Math.abs(_0x40a22d + _0x2bdf98) < 0.1 && Math.abs(_0x478ce8 + _0x1842ae) < 0.1 && Math.abs(_0x23871b + _0x5cd7cb) < 0.1 && Math.abs(_0x33baa5 + _0x5ca1b8 + _0x58274d - 3) < 0.1) {
                this.set(1, 0, 0, 0);
                return this;
              }
              _0x4c6591 = Math.PI;
              var _0x595ab2 = (_0x33baa5 + 1) / 2;
              var _0x139226 = (_0x5ca1b8 + 1) / 2;
              var _0x38a8ea = (_0x58274d + 1) / 2;
              var _0x346e92 = (_0x40a22d + _0x2bdf98) / 4;
              _0x518c85 = (_0x478ce8 + _0x1842ae) / 4;
              var _0x277275 = (_0x23871b + _0x5cd7cb) / 4;
              if (_0x139226 < _0x595ab2 && _0x38a8ea < _0x595ab2) {
                _0x13e352 = _0x595ab2 < 0.01 ? (_0x2d0338 = 0, _0x273b66 = 0.707106781) : (_0x2d0338 = Math.sqrt(_0x595ab2), _0x273b66 = _0x346e92 / _0x2d0338, _0x518c85 / _0x2d0338);
              } else if (_0x38a8ea < _0x139226) {
                _0x13e352 = _0x139226 < 0.01 ? (_0x2d0338 = 0.707106781, _0x273b66 = 0, 0.707106781) : (_0x273b66 = Math.sqrt(_0x139226), _0x2d0338 = _0x346e92 / _0x273b66, _0x277275 / _0x273b66);
              } else if (_0x38a8ea < 0.01) {
                _0x2d0338 = 0.707106781;
                _0x273b66 = 0.707106781;
                _0x13e352 = 0;
              } else {
                _0x13e352 = Math.sqrt(_0x38a8ea);
                _0x2d0338 = _0x518c85 / _0x13e352;
                _0x273b66 = _0x277275 / _0x13e352;
              }
              this.set(_0x2d0338, _0x273b66, _0x13e352, _0x4c6591);
              return this;
            }
            let _0x352149 = Math.sqrt((_0x5cd7cb - _0x23871b) * (_0x5cd7cb - _0x23871b) + (_0x478ce8 - _0x1842ae) * (_0x478ce8 - _0x1842ae) + (_0x2bdf98 - _0x40a22d) * (_0x2bdf98 - _0x40a22d));
            if (Math.abs(_0x352149) < 0.001) {
              _0x352149 = 1;
            }
            this.x = (_0x5cd7cb - _0x23871b) / _0x352149;
            this.y = (_0x478ce8 - _0x1842ae) / _0x352149;
            this.z = (_0x2bdf98 - _0x40a22d) / _0x352149;
            this.w = Math.acos((_0x33baa5 + _0x5ca1b8 + _0x58274d - 1) / 2);
            return this;
          }
          min(_0x391e39) {
            this.x = Math.min(this.x, _0x391e39.x);
            this.y = Math.min(this.y, _0x391e39.y);
            this.z = Math.min(this.z, _0x391e39.z);
            this.w = Math.min(this.w, _0x391e39.w);
            return this;
          }
          max(_0x379ac3) {
            this.x = Math.max(this.x, _0x379ac3.x);
            this.y = Math.max(this.y, _0x379ac3.y);
            this.z = Math.max(this.z, _0x379ac3.z);
            this.w = Math.max(this.w, _0x379ac3.w);
            return this;
          }
          clamp(_0x2dc6af, _0x5ab720) {
            this.x = Math.max(_0x2dc6af.x, Math.min(_0x5ab720.x, this.x));
            this.y = Math.max(_0x2dc6af.y, Math.min(_0x5ab720.y, this.y));
            this.z = Math.max(_0x2dc6af.z, Math.min(_0x5ab720.z, this.z));
            this.w = Math.max(_0x2dc6af.w, Math.min(_0x5ab720.w, this.w));
            return this;
          }
          ["ralacSpmalc".split("").reverse().join("")](_0x5cfd42, _0x30d541) {
            this.x = Math.max(_0x5cfd42, Math.min(_0x30d541, this.x));
            this.y = Math.max(_0x5cfd42, Math.min(_0x30d541, this.y));
            this.z = Math.max(_0x5cfd42, Math.min(_0x30d541, this.z));
            this.w = Math.max(_0x5cfd42, Math.min(_0x30d541, this.w));
            return this;
          }
          clampLength(_0x2fa2d5, _0x1976b9) {
            var _0x18ed46 = this.length();
            return this.divideScalar(_0x18ed46 || 1).multiplyScalar(Math.max(_0x2fa2d5, Math.min(_0x1976b9, _0x18ed46)));
          }
          floor() {
            this.x = Math.floor(this.x);
            this.y = Math.floor(this.y);
            this.z = Math.floor(this.z);
            this.w = Math.floor(this.w);
            return this;
          }
          ceil() {
            this.x = Math.ceil(this.x);
            this.y = Math.ceil(this.y);
            this.z = Math.ceil(this.z);
            this.w = Math.ceil(this.w);
            return this;
          }
          round() {
            this.x = Math.round(this.x);
            this.y = Math.round(this.y);
            this.z = Math.round(this.z);
            this.w = Math.round(this.w);
            return this;
          }
          roundToZero() {
            this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
            this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
            this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
            this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
            return this;
          }
          negate() {
            this.x = -this.x;
            this.y = -this.y;
            this.z = -this.z;
            this.w = -this.w;
            return this;
          }
          dot(_0x57f780) {
            return this.x * _0x57f780.x + this.y * _0x57f780.y + this.z * _0x57f780.z + this.w * _0x57f780.w;
          }
          lengthSq() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
          }
          length() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
          }
          manhattanLength() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
          }
          normalize() {
            return this.divideScalar(this.length() || 1);
          }
          setLength(_0x5ec053) {
            return this.normalize().multiplyScalar(_0x5ec053);
          }
          lerp(_0x3eeac1, _0x3b4b95) {
            this.x += (_0x3eeac1.x - this.x) * _0x3b4b95;
            this.y += (_0x3eeac1.y - this.y) * _0x3b4b95;
            this.z += (_0x3eeac1.z - this.z) * _0x3b4b95;
            this.w += (_0x3eeac1.w - this.w) * _0x3b4b95;
            return this;
          }
          lerpVectors(_0x3409a8, _0x33acd3, _0x4eaad1) {
            this.x = _0x3409a8.x + (_0x33acd3.x - _0x3409a8.x) * _0x4eaad1;
            this.y = _0x3409a8.y + (_0x33acd3.y - _0x3409a8.y) * _0x4eaad1;
            this.z = _0x3409a8.z + (_0x33acd3.z - _0x3409a8.z) * _0x4eaad1;
            this.w = _0x3409a8.w + (_0x33acd3.w - _0x3409a8.w) * _0x4eaad1;
            return this;
          }
          equals(_0xd24086) {
            return _0xd24086.x === this.x && _0xd24086.y === this.y && _0xd24086.z === this.z && _0xd24086.w === this.w;
          }
          fromArray(_0x2ead25, _0x5008c6 = 0) {
            this.x = _0x2ead25[_0x5008c6];
            this.y = _0x2ead25[_0x5008c6 + 1];
            this.z = _0x2ead25[_0x5008c6 + 2];
            this.w = _0x2ead25[_0x5008c6 + 3];
            return this;
          }
          toArray(_0x415c7f = [], _0x5d2f73 = 0) {
            _0x415c7f[_0x5d2f73] = this.x;
            _0x415c7f[_0x5d2f73 + 1] = this.y;
            _0x415c7f[_0x5d2f73 + 2] = this.z;
            _0x415c7f[_0x5d2f73 + 3] = this.w;
            return _0x415c7f;
          }
          fromBufferAttribute(_0x574a5a, _0x39d9d3, _0xab5578) {
            this.x = _0x574a5a.getX(_0x39d9d3);
            this.y = _0x574a5a.getY(_0x39d9d3);
            this.z = _0x574a5a.getZ(_0x39d9d3);
            this.w = _0x574a5a.getW(_0x39d9d3);
            return this;
          }
          random() {
            this.x = Math.random();
            this.y = Math.random();
            this.z = Math.random();
            this.w = Math.random();
            return this;
          }
          *[Symbol.iterator]() {
            yield this.x;
            yield this.y;
            yield this.z;
            yield this.w;
          }
        }
        _0x275701.prototype.isVector4 = true;
        class _0x4eb744 extends _0x3a55ab {
          constructor(_0x9d31e0, _0x54e816, _0x2ce145 = {}) {
            super();
            this.width = _0x9d31e0;
            this.height = _0x54e816;
            this.depth = 1;
            this.scissor = new _0x275701(0, 0, _0x9d31e0, _0x54e816);
            this.scissorTest = false;
            this.viewport = new _0x275701(0, 0, _0x9d31e0, _0x54e816);
            this.texture = new _0x3d39cb(undefined, _0x2ce145.mapping, _0x2ce145.wrapS, _0x2ce145.wrapT, _0x2ce145.magFilter, _0x2ce145.minFilter, _0x2ce145.format, _0x2ce145.type, _0x2ce145.anisotropy, _0x2ce145.encoding);
            this.texture.isRenderTargetTexture = true;
            this.texture.image = {
              width: _0x9d31e0,
              height: _0x54e816,
              depth: 1
            };
            this.texture.generateMipmaps = _0x2ce145.generateMipmaps !== undefined && _0x2ce145.generateMipmaps;
            this.texture.internalFormat = _0x2ce145.internalFormat !== undefined ? _0x2ce145.internalFormat : null;
            this.texture.minFilter = _0x2ce145.minFilter !== undefined ? _0x2ce145.minFilter : _0x202e90;
            this.depthBuffer = _0x2ce145.depthBuffer === undefined || _0x2ce145.depthBuffer;
            this.stencilBuffer = _0x2ce145.stencilBuffer !== undefined && _0x2ce145.stencilBuffer;
            this.depthTexture = _0x2ce145.depthTexture !== undefined ? _0x2ce145.depthTexture : null;
          }
          setTexture(_0x1d4c01) {
            _0x1d4c01.image = {
              width: this.width,
              height: this.height,
              depth: this.depth
            };
            this.texture = _0x1d4c01;
          }
          setSize(_0x4853f1, _0x58bc7f, _0x4f7898 = 1) {
            if (!(this.width === _0x4853f1 && this.height === _0x58bc7f && this.depth === _0x4f7898)) {
              this.width = _0x4853f1;
              this.height = _0x58bc7f;
              this.depth = _0x4f7898;
              this.texture.image.width = _0x4853f1;
              this.texture.image.height = _0x58bc7f;
              this.texture.image.depth = _0x4f7898;
              this.dispose();
            }
            this.viewport.set(0, 0, _0x4853f1, _0x58bc7f);
            this.scissor.set(0, 0, _0x4853f1, _0x58bc7f);
          }
          clone() {
            return new this.constructor().copy(this);
          }
          copy(_0x5e32bc) {
            this.width = _0x5e32bc.width;
            this.height = _0x5e32bc.height;
            this.depth = _0x5e32bc.depth;
            this.viewport.copy(_0x5e32bc.viewport);
            this.texture = _0x5e32bc.texture.clone();
            this.texture.image = {
              ...this.texture.image
            };
            this.depthBuffer = _0x5e32bc.depthBuffer;
            this.stencilBuffer = _0x5e32bc.stencilBuffer;
            this.depthTexture = _0x5e32bc.depthTexture;
            return this;
          }
          dispose() {
            this.dispatchEvent({
              type: "dispose"
            });
          }
        }
        _0x4eb744.prototype.isWebGLRenderTarget = true;
        class _0x332a03 extends _0x4eb744 {
          constructor(_0x4c14b2, _0xd0a68d, _0x17d2d6) {
            super(_0x4c14b2, _0xd0a68d);
            const _0x33b400 = this.texture;
            this.texture = [];
            for (let _0x161f3e = 0; _0x161f3e < _0x17d2d6; _0x161f3e++) {
              this.texture[_0x161f3e] = _0x33b400.clone();
            }
          }
          setSize(_0x1c8760, _0xad0348, _0x1ee483 = 1) {
            if (this.width !== _0x1c8760 || this.height !== _0xad0348 || this.depth !== _0x1ee483) {
              this.width = _0x1c8760;
              this.height = _0xad0348;
              this.depth = _0x1ee483;
              for (let _0x3082ce = 0, _0x13edac = this.texture.length; _0x3082ce < _0x13edac; _0x3082ce++) {
                this.texture[_0x3082ce].image.width = _0x1c8760;
                this.texture[_0x3082ce].image.height = _0xad0348;
                this.texture[_0x3082ce].image.depth = _0x1ee483;
              }
              this.dispose();
            }
            this.viewport.set(0, 0, _0x1c8760, _0xad0348);
            this.scissor.set(0, 0, _0x1c8760, _0xad0348);
            return this;
          }
          copy(_0x1448f5) {
            this.dispose();
            this.width = _0x1448f5.width;
            this.height = _0x1448f5.height;
            this.depth = _0x1448f5.depth;
            this.viewport.set(0, 0, this.width, this.height);
            this.scissor.set(0, 0, this.width, this.height);
            this.depthBuffer = _0x1448f5.depthBuffer;
            this.stencilBuffer = _0x1448f5.stencilBuffer;
            this.depthTexture = _0x1448f5.depthTexture;
            for (let _0x485ec8 = this.texture.length = 0, _0x211a9a = _0x1448f5.texture.length; _0x485ec8 < _0x211a9a; _0x485ec8++) {
              this.texture[_0x485ec8] = _0x1448f5.texture[_0x485ec8].clone();
            }
            return this;
          }
        }
        _0x332a03.prototype.isWebGLMultipleRenderTargets = true;
        class _0x588426 extends _0x4eb744 {
          constructor(_0x4eeafd, _0xbc3465, _0x1d1658 = {}) {
            super(_0x4eeafd, _0xbc3465, _0x1d1658);
            this.samples = 4;
            this.ignoreDepthForMultisampleCopy = _0x1d1658.ignoreDepth === undefined || _0x1d1658.ignoreDepth;
            this.useRenderToTexture = _0x1d1658.useRenderToTexture !== undefined && _0x1d1658.useRenderToTexture;
            this.useRenderbuffer = this.useRenderToTexture === false;
          }
          copy(_0x170662) {
            super.copy.call(this, _0x170662);
            this.samples = _0x170662.samples;
            this.useRenderToTexture = _0x170662.useRenderToTexture;
            this.useRenderbuffer = _0x170662.useRenderbuffer;
            return this;
          }
        }
        _0x588426.prototype.isWebGLMultisampleRenderTarget = true;
        class _0x53f372 {
          constructor(_0x5507ac = 0, _0x1bafba = 0, _0x2ad4b3 = 0, _0x210489 = 1) {
            this._x = _0x5507ac;
            this._y = _0x1bafba;
            this._z = _0x2ad4b3;
            this._w = _0x210489;
          }
          static slerp(_0x2ca434, _0x3e9f84, _0x2fbde3, _0x5a41a9) {
            return _0x2fbde3.slerpQuaternions(_0x2ca434, _0x3e9f84, _0x5a41a9);
          }
          static slerpFlat(_0x3439a0, _0x44996c, _0x24e666, _0x431778, _0xe5f16, _0x3f87eb, _0x333a44) {
            let _0x590df2 = _0x24e666[_0x431778 + 0];
            let _0x80fa1 = _0x24e666[_0x431778 + 1];
            let _0x3c4af0 = _0x24e666[_0x431778 + 2];
            let _0x6b1163 = _0x24e666[_0x431778 + 3];
            var _0x37a0fe = _0xe5f16[_0x3f87eb + 0];
            var _0x766416 = _0xe5f16[_0x3f87eb + 1];
            var _0x515867 = _0xe5f16[_0x3f87eb + 2];
            _0x24e666 = _0xe5f16[_0x3f87eb + 3];
            if (_0x333a44 === 0) {
              _0x3439a0[_0x44996c + 0] = _0x590df2;
              _0x3439a0[_0x44996c + 1] = _0x80fa1;
              _0x3439a0[_0x44996c + 2] = _0x3c4af0;
              _0x3439a0[_0x44996c + 3] = _0x6b1163;
              return;
            }
            if (_0x333a44 === 1) {
              _0x3439a0[_0x44996c + 0] = _0x37a0fe;
              _0x3439a0[_0x44996c + 1] = _0x766416;
              _0x3439a0[_0x44996c + 2] = _0x515867;
              _0x3439a0[_0x44996c + 3] = _0x24e666;
              return;
            }
            if (_0x6b1163 !== _0x24e666 || _0x590df2 !== _0x37a0fe || _0x80fa1 !== _0x766416 || _0x3c4af0 !== _0x515867) {
              let _0x191ea2 = 1 - _0x333a44;
              _0xe5f16 = (_0x431778 = _0x590df2 * _0x37a0fe + _0x80fa1 * _0x766416 + _0x3c4af0 * _0x515867 + _0x6b1163 * _0x24e666) >= 0 ? 1 : -1;
              if ((_0x3f87eb = 1 - _0x431778 * _0x431778) > Number.EPSILON) {
                _0x3f87eb = Math.sqrt(_0x3f87eb);
                _0x431778 = Math.atan2(_0x3f87eb, _0x431778 * _0xe5f16);
                _0x191ea2 = Math.sin(_0x191ea2 * _0x431778) / _0x3f87eb;
                _0x333a44 = Math.sin(_0x333a44 * _0x431778) / _0x3f87eb;
              }
              _0x590df2 = _0x590df2 * _0x191ea2 + _0x37a0fe * (_0xe5f16 *= _0x333a44);
              _0x80fa1 = _0x80fa1 * _0x191ea2 + _0x766416 * _0xe5f16;
              _0x3c4af0 = _0x3c4af0 * _0x191ea2 + _0x515867 * _0xe5f16;
              _0x6b1163 = _0x6b1163 * _0x191ea2 + _0x24e666 * _0xe5f16;
              if (_0x191ea2 === 1 - _0x333a44) {
                _0x590df2 *= _0x333a44 = 1 / Math.sqrt(_0x590df2 * _0x590df2 + _0x80fa1 * _0x80fa1 + _0x3c4af0 * _0x3c4af0 + _0x6b1163 * _0x6b1163);
                _0x80fa1 *= _0x333a44;
                _0x3c4af0 *= _0x333a44;
                _0x6b1163 *= _0x333a44;
              }
            }
            _0x3439a0[_0x44996c] = _0x590df2;
            _0x3439a0[_0x44996c + 1] = _0x80fa1;
            _0x3439a0[_0x44996c + 2] = _0x3c4af0;
            _0x3439a0[_0x44996c + 3] = _0x6b1163;
          }
          static multiplyQuaternionsFlat(_0x415d30, _0x337847, _0x26e35e, _0x208010, _0x46e2bc, _0x68ca3b) {
            var _0xdd9f10 = _0x26e35e[_0x208010];
            var _0x2bc382 = _0x26e35e[_0x208010 + 1];
            var _0x1dac15 = _0x26e35e[_0x208010 + 2];
            var _0x26882a = _0x26e35e[_0x208010 + 3];
            var _0x2a7cdc = _0x46e2bc[_0x68ca3b];
            _0x26e35e = _0x46e2bc[_0x68ca3b + 1];
            _0x208010 = _0x46e2bc[_0x68ca3b + 2];
            _0x68ca3b = _0x46e2bc[_0x68ca3b + 3];
            _0x415d30[_0x337847] = _0xdd9f10 * _0x68ca3b + _0x26882a * _0x2a7cdc + _0x2bc382 * _0x208010 - _0x1dac15 * _0x26e35e;
            _0x415d30[_0x337847 + 1] = _0x2bc382 * _0x68ca3b + _0x26882a * _0x26e35e + _0x1dac15 * _0x2a7cdc - _0xdd9f10 * _0x208010;
            _0x415d30[_0x337847 + 2] = _0x1dac15 * _0x68ca3b + _0x26882a * _0x208010 + _0xdd9f10 * _0x26e35e - _0x2bc382 * _0x2a7cdc;
            _0x415d30[_0x337847 + 3] = _0x26882a * _0x68ca3b - _0xdd9f10 * _0x2a7cdc - _0x2bc382 * _0x26e35e - _0x1dac15 * _0x208010;
            return _0x415d30;
          }
          get x() {
            return this._x;
          }
          set x(_0x5b7228) {
            this._x = _0x5b7228;
            this._onChangeCallback();
          }
          get y() {
            return this._y;
          }
          set y(_0x3144ab) {
            this._y = _0x3144ab;
            this._onChangeCallback();
          }
          get z() {
            return this._z;
          }
          set z(_0x32380b) {
            this._z = _0x32380b;
            this._onChangeCallback();
          }
          get w() {
            return this._w;
          }
          set w(_0xd8778e) {
            this._w = _0xd8778e;
            this._onChangeCallback();
          }
          set(_0x20421c, _0xd6518b, _0x4a3a74, _0xb59706) {
            this._x = _0x20421c;
            this._y = _0xd6518b;
            this._z = _0x4a3a74;
            this._w = _0xb59706;
            this._onChangeCallback();
            return this;
          }
          clone() {
            return new this.constructor(this._x, this._y, this._z, this._w);
          }
          copy(_0x21b182) {
            this._x = _0x21b182.x;
            this._y = _0x21b182.y;
            this._z = _0x21b182.z;
            this._w = _0x21b182.w;
            this._onChangeCallback();
            return this;
          }
          setFromEuler(_0x1d7bb5, _0x4ca228) {
            if (!_0x1d7bb5 || !_0x1d7bb5.isEuler) {
              throw new Error("`````````````");
            }
            var _0x132141 = _0x1d7bb5._x;
            var _0x5277dd = _0x1d7bb5._y;
            var _0x539f1d = _0x1d7bb5._z;
            _0x1d7bb5 = _0x1d7bb5._order;
            const _0x144084 = Math.cos;
            const _0x20edc9 = Math.sin;
            var _0x3870b1 = _0x144084(_0x132141 / 2);
            var _0x1d81d5 = _0x144084(_0x5277dd / 2);
            var _0x334245 = _0x144084(_0x539f1d / 2);
            var _0x545ecd = _0x20edc9(_0x132141 / 2);
            var _0x307438 = _0x20edc9(_0x5277dd / 2);
            var _0x1dbc9c = _0x20edc9(_0x539f1d / 2);
            switch (_0x1d7bb5) {
              case "XYZ":
                this._x = _0x545ecd * _0x1d81d5 * _0x334245 + _0x3870b1 * _0x307438 * _0x1dbc9c;
                this._y = _0x3870b1 * _0x307438 * _0x334245 - _0x545ecd * _0x1d81d5 * _0x1dbc9c;
                this._z = _0x3870b1 * _0x1d81d5 * _0x1dbc9c + _0x545ecd * _0x307438 * _0x334245;
                this._w = _0x3870b1 * _0x1d81d5 * _0x334245 - _0x545ecd * _0x307438 * _0x1dbc9c;
                break;
              case "YXZ":
                this._x = _0x545ecd * _0x1d81d5 * _0x334245 + _0x3870b1 * _0x307438 * _0x1dbc9c;
                this._y = _0x3870b1 * _0x307438 * _0x334245 - _0x545ecd * _0x1d81d5 * _0x1dbc9c;
                this._z = _0x3870b1 * _0x1d81d5 * _0x1dbc9c - _0x545ecd * _0x307438 * _0x334245;
                this._w = _0x3870b1 * _0x1d81d5 * _0x334245 + _0x545ecd * _0x307438 * _0x1dbc9c;
                break;
              case "ZXY":
                this._x = _0x545ecd * _0x1d81d5 * _0x334245 - _0x3870b1 * _0x307438 * _0x1dbc9c;
                this._y = _0x3870b1 * _0x307438 * _0x334245 + _0x545ecd * _0x1d81d5 * _0x1dbc9c;
                this._z = _0x3870b1 * _0x1d81d5 * _0x1dbc9c + _0x545ecd * _0x307438 * _0x334245;
                this._w = _0x3870b1 * _0x1d81d5 * _0x334245 - _0x545ecd * _0x307438 * _0x1dbc9c;
                break;
              case "ZYX":
                this._x = _0x545ecd * _0x1d81d5 * _0x334245 - _0x3870b1 * _0x307438 * _0x1dbc9c;
                this._y = _0x3870b1 * _0x307438 * _0x334245 + _0x545ecd * _0x1d81d5 * _0x1dbc9c;
                this._z = _0x3870b1 * _0x1d81d5 * _0x1dbc9c - _0x545ecd * _0x307438 * _0x334245;
                this._w = _0x3870b1 * _0x1d81d5 * _0x334245 + _0x545ecd * _0x307438 * _0x1dbc9c;
                break;
              case "YZX":
                this._x = _0x545ecd * _0x1d81d5 * _0x334245 + _0x3870b1 * _0x307438 * _0x1dbc9c;
                this._y = _0x3870b1 * _0x307438 * _0x334245 + _0x545ecd * _0x1d81d5 * _0x1dbc9c;
                this._z = _0x3870b1 * _0x1d81d5 * _0x1dbc9c - _0x545ecd * _0x307438 * _0x334245;
                this._w = _0x3870b1 * _0x1d81d5 * _0x334245 - _0x545ecd * _0x307438 * _0x1dbc9c;
                break;
              case "XZY":
                this._x = _0x545ecd * _0x1d81d5 * _0x334245 - _0x3870b1 * _0x307438 * _0x1dbc9c;
                this._y = _0x3870b1 * _0x307438 * _0x334245 - _0x545ecd * _0x1d81d5 * _0x1dbc9c;
                this._z = _0x3870b1 * _0x1d81d5 * _0x1dbc9c + _0x545ecd * _0x307438 * _0x334245;
                this._w = _0x3870b1 * _0x1d81d5 * _0x334245 + _0x545ecd * _0x307438 * _0x1dbc9c;
            }
            if (_0x4ca228 !== false) {
              this._onChangeCallback();
            }
            return this;
          }
          setFromAxisAngle(_0x1bfa3c, _0x40ef22) {
            var _0x292227 = 13;
            var _0xdb6eb1 = _0x40ef22 / 2;
            _0x292227 = 7;
            _0x40ef22 = Math.sin(_0xdb6eb1);
            this._x = _0x1bfa3c.x * _0x40ef22;
            this._y = _0x1bfa3c.y * _0x40ef22;
            this._z = _0x1bfa3c.z * _0x40ef22;
            this._w = Math.cos(_0xdb6eb1);
            this._onChangeCallback();
            return this;
          }
          setFromRotationMatrix(_0x38223e) {
            var _0x239e7b;
            var _0x2ade1b;
            var _0x3536f1 = (_0x2ade1b = _0x38223e.elements)[0];
            var _0x496aaf = _0x2ade1b[4];
            var _0x4e6c67 = _0x2ade1b[8];
            var _0xe74822 = _0x2ade1b[1];
            var _0x1e9272 = _0x2ade1b[5];
            var _0x1940b2 = _0x2ade1b[9];
            var _0x9dc3d6 = _0x2ade1b[2];
            var _0x322108 = _0x2ade1b[6];
            if ((_0x2ade1b = _0x3536f1 + _0x1e9272 + (_0x38223e = _0x2ade1b[10])) > 0) {
              _0x2ade1b = 0.5 / Math.sqrt(_0x2ade1b + 1);
              this._w = 0.25 / _0x2ade1b;
              this._x = (_0x322108 - _0x1940b2) * _0x2ade1b;
              this._y = (_0x4e6c67 - _0x9dc3d6) * _0x2ade1b;
              this._z = (_0xe74822 - _0x496aaf) * _0x2ade1b;
            } else if (_0x1e9272 < _0x3536f1 && _0x38223e < _0x3536f1) {
              _0x239e7b = Math.sqrt(1 + _0x3536f1 - _0x1e9272 - _0x38223e) * 2;
              this._w = (_0x322108 - _0x1940b2) / _0x239e7b;
              this._x = _0x239e7b * 0.25;
              this._y = (_0x496aaf + _0xe74822) / _0x239e7b;
              this._z = (_0x4e6c67 + _0x9dc3d6) / _0x239e7b;
            } else if (_0x38223e < _0x1e9272) {
              _0x239e7b = Math.sqrt(1 + _0x1e9272 - _0x3536f1 - _0x38223e) * 2;
              this._w = (_0x4e6c67 - _0x9dc3d6) / _0x239e7b;
              this._x = (_0x496aaf + _0xe74822) / _0x239e7b;
              this._y = _0x239e7b * 0.25;
              this._z = (_0x1940b2 + _0x322108) / _0x239e7b;
            } else {
              _0x1e9272 = Math.sqrt(1 + _0x38223e - _0x3536f1 - _0x1e9272) * 2;
              this._w = (_0xe74822 - _0x496aaf) / _0x1e9272;
              this._x = (_0x4e6c67 + _0x9dc3d6) / _0x1e9272;
              this._y = (_0x1940b2 + _0x322108) / _0x1e9272;
              this._z = _0x1e9272 * 0.25;
            }
            this._onChangeCallback();
            return this;
          }
          setFromUnitVectors(_0x18fd45, _0x8265d0) {
            let _0x10caef = _0x18fd45.dot(_0x8265d0) + 1;
            if (_0x10caef < Number.EPSILON) {
              _0x10caef = 0;
              if (Math.abs(_0x18fd45.x) > Math.abs(_0x18fd45.z)) {
                this._x = -_0x18fd45.y;
                this._y = _0x18fd45.x;
                this._z = 0;
              } else {
                this._x = 0;
                this._y = -_0x18fd45.z;
                this._z = _0x18fd45.y;
              }
            } else {
              this._x = _0x18fd45.y * _0x8265d0.z - _0x18fd45.z * _0x8265d0.y;
              this._y = _0x18fd45.z * _0x8265d0.x - _0x18fd45.x * _0x8265d0.z;
              this._z = _0x18fd45.x * _0x8265d0.y - _0x18fd45.y * _0x8265d0.x;
            }
            this._w = _0x10caef;
            return this.normalize();
          }
          angleTo(_0x440979) {
            return Math.acos(Math.abs(_0x6865cb(this.dot(_0x440979), -1, 1))) * 2;
          }
          rotateTowards(_0x6e8d14, _0x36685c) {
            var _0x3c82df;
            var _0x1e1bd3 = this.angleTo(_0x6e8d14);
            _0x3c82df = "inoj";
            if (!(_0x1e1bd3 === 0)) {
              _0x1e1bd3 = Math.min(1, _0x36685c / _0x1e1bd3);
              this.slerp(_0x6e8d14, _0x1e1bd3);
            }
            return this;
          }
          identity() {
            return this.set(0, 0, 0, 1);
          }
          invert() {
            return this.conjugate();
          }
          conjugate() {
            this._x *= -1;
            this._y *= -1;
            this._z *= -1;
            this._onChangeCallback();
            return this;
          }
          dot(_0x499998) {
            return this._x * _0x499998._x + this._y * _0x499998._y + this._z * _0x499998._z + this._w * _0x499998._w;
          }
          lengthSq() {
            return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
          }
          length() {
            return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
          }
          normalize() {
            var _0x3030b2 = this.length();
            if (_0x3030b2 === 0) {
              this._x = 0;
              this._y = 0;
              this._z = 0;
              this._w = 1;
            } else {
              this._x = this._x * (_0x3030b2 = 1 / _0x3030b2);
              this._y = this._y * _0x3030b2;
              this._z = this._z * _0x3030b2;
              this._w = this._w * _0x3030b2;
            }
            this._onChangeCallback();
            return this;
          }
          multiply(_0x84a30c, _0x602fc9) {
            if (_0x602fc9 !== undefined) {
              return this.multiplyQuaternions(_0x84a30c, _0x602fc9);
            } else {
              return this.multiplyQuaternions(this, _0x84a30c);
            }
          }
          premultiply(_0x54022e) {
            return this.multiplyQuaternions(_0x54022e, this);
          }
          multiplyQuaternions(_0x3b9286, _0x33ce7d) {
            var _0x5bc08b = _0x3b9286._x;
            var _0x25d3e6 = _0x3b9286._y;
            var _0x473f24 = _0x3b9286._z;
            var _0x4a60a6 = _0x3b9286._w;
            var _0x1eabdf = _0x33ce7d._x;
            var _0x34ecca = _0x33ce7d._y;
            _0x3b9286 = _0x33ce7d._z;
            _0x33ce7d = _0x33ce7d._w;
            this._x = _0x5bc08b * _0x33ce7d + _0x4a60a6 * _0x1eabdf + _0x25d3e6 * _0x3b9286 - _0x473f24 * _0x34ecca;
            this._y = _0x25d3e6 * _0x33ce7d + _0x4a60a6 * _0x34ecca + _0x473f24 * _0x1eabdf - _0x5bc08b * _0x3b9286;
            this._z = _0x473f24 * _0x33ce7d + _0x4a60a6 * _0x3b9286 + _0x5bc08b * _0x34ecca - _0x25d3e6 * _0x1eabdf;
            this._w = _0x4a60a6 * _0x33ce7d - _0x5bc08b * _0x1eabdf - _0x25d3e6 * _0x34ecca - _0x473f24 * _0x3b9286;
            this._onChangeCallback();
            return this;
          }
          slerp(_0x5479e5, _0xe5acc4) {
            if (_0xe5acc4 === 0) {
              return this;
            }
            if (_0xe5acc4 === 1) {
              return this.copy(_0x5479e5);
            }
            var _0x29d4e2 = this._x;
            var _0x4449ce = this._y;
            var _0x1c6e9a = this._z;
            var _0x2fb2f7 = this._w;
            var _0x167acc;
            let _0x354bc4 = _0x2fb2f7 * _0x5479e5._w + _0x29d4e2 * _0x5479e5._x + _0x4449ce * _0x5479e5._y + _0x1c6e9a * _0x5479e5._z;
            _0x167acc = 5;
            if (_0x354bc4 < 0) {
              this._w = -_0x5479e5._w;
              this._x = -_0x5479e5._x;
              this._y = -_0x5479e5._y;
              this._z = -_0x5479e5._z;
              _0x354bc4 = -_0x354bc4;
            } else {
              this.copy(_0x5479e5);
            }
            if (_0x354bc4 >= 1) {
              this._w = _0x2fb2f7;
              this._x = _0x29d4e2;
              this._y = _0x4449ce;
              this._z = _0x1c6e9a;
              return this;
            }
            var _0x1016b4 = 1 - _0x354bc4 * _0x354bc4;
            if (_0x1016b4 <= Number.EPSILON) {
              var _0x48a335 = 1 - _0xe5acc4;
              this._w = _0x48a335 * _0x2fb2f7 + _0xe5acc4 * this._w;
              this._x = _0x48a335 * _0x29d4e2 + _0xe5acc4 * this._x;
              this._y = _0x48a335 * _0x4449ce + _0xe5acc4 * this._y;
              this._z = _0x48a335 * _0x1c6e9a + _0xe5acc4 * this._z;
              this.normalize();
              this._onChangeCallback();
              return this;
            }
            _0x5479e5 = Math.sqrt(_0x1016b4);
            _0x48a335 = Math.atan2(_0x5479e5, _0x354bc4);
            _0x1016b4 = Math.sin((1 - _0xe5acc4) * _0x48a335) / _0x5479e5;
            _0x5479e5 = Math.sin(_0xe5acc4 * _0x48a335) / _0x5479e5;
            this._w = _0x2fb2f7 * _0x1016b4 + this._w * _0x5479e5;
            this._x = _0x29d4e2 * _0x1016b4 + this._x * _0x5479e5;
            this._y = _0x4449ce * _0x1016b4 + this._y * _0x5479e5;
            this._z = _0x1c6e9a * _0x1016b4 + this._z * _0x5479e5;
            this._onChangeCallback();
            return this;
          }
          slerpQuaternions(_0xa27ed7, _0x57b116, _0xfd1f73) {
            this.copy(_0xa27ed7).slerp(_0x57b116, _0xfd1f73);
          }
          random() {
            var _0x183c90 = Math.random();
            var _0x317ad7 = Math.sqrt(1 - _0x183c90);
            var _0xe2cee0 = Math.sqrt(_0x183c90);
            var _0x3e7246 = Math.PI * 2 * Math.random();
            _0x183c90 = Math.PI * 2 * Math.random();
            return this.set(_0x317ad7 * Math.cos(_0x3e7246), _0xe2cee0 * Math.sin(_0x183c90), _0xe2cee0 * Math.cos(_0x183c90), _0x317ad7 * Math.sin(_0x3e7246));
          }
          equals(_0x3caf9d) {
            return _0x3caf9d._x === this._x && _0x3caf9d._y === this._y && _0x3caf9d._z === this._z && _0x3caf9d._w === this._w;
          }
          fromArray(_0x3752d2, _0x49c118 = 0) {
            this._x = _0x3752d2[_0x49c118];
            this._y = _0x3752d2[_0x49c118 + 1];
            this._z = _0x3752d2[_0x49c118 + 2];
            this._w = _0x3752d2[_0x49c118 + 3];
            this._onChangeCallback();
            return this;
          }
          toArray(_0x1a38ce = [], _0x54ef5f = 0) {
            _0x1a38ce[_0x54ef5f] = this._x;
            _0x1a38ce[_0x54ef5f + 1] = this._y;
            _0x1a38ce[_0x54ef5f + 2] = this._z;
            _0x1a38ce[_0x54ef5f + 3] = this._w;
            return _0x1a38ce;
          }
          fromBufferAttribute(_0x2971c6, _0x5f3838) {
            this._x = _0x2971c6.getX(_0x5f3838);
            this._y = _0x2971c6.getY(_0x5f3838);
            this._z = _0x2971c6.getZ(_0x5f3838);
            this._w = _0x2971c6.getW(_0x5f3838);
            return this;
          }
          _onChange(_0x197d57) {
            this._onChangeCallback = _0x197d57;
            return this;
          }
          _onChangeCallback() {}
        }
        _0x53f372.prototype.isQuaternion = true;
        class _0x1d20ef {
          constructor(_0x47e11f = 0, _0x744ce0 = 0, _0x45b628 = 0) {
            this.x = _0x47e11f;
            this.y = _0x744ce0;
            this.z = _0x45b628;
          }
          set(_0x4a3883, _0x41aa7c, _0x248b08) {
            if (_0x248b08 === undefined) {
              _0x248b08 = this.z;
            }
            this.x = _0x4a3883;
            this.y = _0x41aa7c;
            this.z = _0x248b08;
            return this;
          }
          setScalar(_0x71cec3) {
            this.x = _0x71cec3;
            this.y = _0x71cec3;
            this.z = _0x71cec3;
            return this;
          }
          setX(_0x3a3462) {
            this.x = _0x3a3462;
            return this;
          }
          setY(_0x2de219) {
            this.y = _0x2de219;
            return this;
          }
          setZ(_0x375ed6) {
            this.z = _0x375ed6;
            return this;
          }
          setComponent(_0x2d0693, _0x450cfa) {
            switch (_0x2d0693) {
              case 0:
                this.x = _0x450cfa;
                break;
              case 1:
                this.y = _0x450cfa;
                break;
              case 2:
                this.z = _0x450cfa;
                break;
              default:
                throw new Error("`````````````");
            }
            return this;
          }
          getComponent(_0x117fb3) {
            switch (_0x117fb3) {
              case 0:
                return this.x;
              case 1:
                return this.y;
              case 2:
                return this.z;
              default:
                throw new Error("`````````````");
            }
          }
          clone() {
            return new this.constructor(this.x, this.y, this.z);
          }
          copy(_0x482f68) {
            this.x = _0x482f68.x;
            this.y = _0x482f68.y;
            this.z = _0x482f68.z;
            return this;
          }
          add(_0xb875d2, _0x8c2b41) {
            if (_0x8c2b41 !== undefined) {
              return this.addVectors(_0xb875d2, _0x8c2b41);
            } else {
              this.x += _0xb875d2.x;
              this.y += _0xb875d2.y;
              this.z += _0xb875d2.z;
              return this;
            }
          }
          addScalar(_0x121a35) {
            this.x += _0x121a35;
            this.y += _0x121a35;
            this.z += _0x121a35;
            return this;
          }
          addVectors(_0x5f41d6, _0x3e5754) {
            this.x = _0x5f41d6.x + _0x3e5754.x;
            this.y = _0x5f41d6.y + _0x3e5754.y;
            this.z = _0x5f41d6.z + _0x3e5754.z;
            return this;
          }
          addScaledVector(_0xa5eeac, _0xaef80c) {
            this.x += _0xa5eeac.x * _0xaef80c;
            this.y += _0xa5eeac.y * _0xaef80c;
            this.z += _0xa5eeac.z * _0xaef80c;
            return this;
          }
          sub(_0x28525a, _0x1e67ee) {
            if (_0x1e67ee !== undefined) {
              return this.subVectors(_0x28525a, _0x1e67ee);
            } else {
              this.x -= _0x28525a.x;
              this.y -= _0x28525a.y;
              this.z -= _0x28525a.z;
              return this;
            }
          }
          subScalar(_0x41535b) {
            this.x -= _0x41535b;
            this.y -= _0x41535b;
            this.z -= _0x41535b;
            return this;
          }
          subVectors(_0x148072, _0x556d27) {
            this.x = _0x148072.x - _0x556d27.x;
            this.y = _0x148072.y - _0x556d27.y;
            this.z = _0x148072.z - _0x556d27.z;
            return this;
          }
          multiply(_0x3686bf, _0x5572b3) {
            if (_0x5572b3 !== undefined) {
              return this.multiplyVectors(_0x3686bf, _0x5572b3);
            } else {
              this.x *= _0x3686bf.x;
              this.y *= _0x3686bf.y;
              this.z *= _0x3686bf.z;
              return this;
            }
          }
          multiplyScalar(_0x4eeb0e) {
            this.x *= _0x4eeb0e;
            this.y *= _0x4eeb0e;
            this.z *= _0x4eeb0e;
            return this;
          }
          multiplyVectors(_0x5bc5ee, _0x47b57c) {
            this.x = _0x5bc5ee.x * _0x47b57c.x;
            this.y = _0x5bc5ee.y * _0x47b57c.y;
            this.z = _0x5bc5ee.z * _0x47b57c.z;
            return this;
          }
          applyEuler(_0x1d4555) {
            if (_0x1d4555) {
              _0x1d4555.isEuler;
            }
            return this.applyQuaternion(_0x452bb0.setFromEuler(_0x1d4555));
          }
          applyAxisAngle(_0x479bb6, _0x327f10) {
            return this.applyQuaternion(_0x452bb0.setFromAxisAngle(_0x479bb6, _0x327f10));
          }
          applyMatrix3(_0x33bcff) {
            var _0x184d6c = this.x;
            var _0x559e57 = this.y;
            var _0x5bb104 = this.z;
            _0x33bcff = _0x33bcff.elements;
            this.x = _0x33bcff[0] * _0x184d6c + _0x33bcff[3] * _0x559e57 + _0x33bcff[6] * _0x5bb104;
            this.y = _0x33bcff[1] * _0x184d6c + _0x33bcff[4] * _0x559e57 + _0x33bcff[7] * _0x5bb104;
            this.z = _0x33bcff[2] * _0x184d6c + _0x33bcff[5] * _0x559e57 + _0x33bcff[8] * _0x5bb104;
            return this;
          }
          applyNormalMatrix(_0x2572d6) {
            return this.applyMatrix3(_0x2572d6).normalize();
          }
          applyMatrix4(_0x44e9c3) {
            var _0x4747d9 = this.x;
            var _0x594d4a = this.y;
            var _0x15d941 = this.z;
            var _0x2a99b9 = _0x44e9c3.elements;
            _0x44e9c3 = 1 / (_0x2a99b9[3] * _0x4747d9 + _0x2a99b9[7] * _0x594d4a + _0x2a99b9[11] * _0x15d941 + _0x2a99b9[15]);
            this.x = (_0x2a99b9[0] * _0x4747d9 + _0x2a99b9[4] * _0x594d4a + _0x2a99b9[8] * _0x15d941 + _0x2a99b9[12]) * _0x44e9c3;
            this.y = (_0x2a99b9[1] * _0x4747d9 + _0x2a99b9[5] * _0x594d4a + _0x2a99b9[9] * _0x15d941 + _0x2a99b9[13]) * _0x44e9c3;
            this.z = (_0x2a99b9[2] * _0x4747d9 + _0x2a99b9[6] * _0x594d4a + _0x2a99b9[10] * _0x15d941 + _0x2a99b9[14]) * _0x44e9c3;
            return this;
          }
          applyQuaternion(_0x4018f6) {
            var _0x1b2a17 = this.x;
            var _0x5dd16b = this.y;
            var _0xb17a9e = this.z;
            var _0x25463c = _0x4018f6.x;
            var _0x50f096 = _0x4018f6.y;
            var _0x572e89 = _0x4018f6.z;
            var _0x4c73d9 = _0x4018f6.w;
            var _0x701872 = _0x4c73d9 * _0x1b2a17 + _0x50f096 * _0xb17a9e - _0x572e89 * _0x5dd16b;
            var _0x4968d2 = _0x4c73d9 * _0x5dd16b + _0x572e89 * _0x1b2a17 - _0x25463c * _0xb17a9e;
            _0x4018f6 = _0x4c73d9 * _0xb17a9e + _0x25463c * _0x5dd16b - _0x50f096 * _0x1b2a17;
            _0xb17a9e = -_0x25463c * _0x1b2a17 - _0x50f096 * _0x5dd16b - _0x572e89 * _0xb17a9e;
            this.x = _0x701872 * _0x4c73d9 + _0xb17a9e * -_0x25463c + _0x4968d2 * -_0x572e89 - _0x4018f6 * -_0x50f096;
            this.y = _0x4968d2 * _0x4c73d9 + _0xb17a9e * -_0x50f096 + _0x4018f6 * -_0x25463c - _0x701872 * -_0x572e89;
            this.z = _0x4018f6 * _0x4c73d9 + _0xb17a9e * -_0x572e89 + _0x701872 * -_0x50f096 - _0x4968d2 * -_0x25463c;
            return this;
          }
          project(_0x35d872) {
            return this.applyMatrix4(_0x35d872.matrixWorldInverse).applyMatrix4(_0x35d872.projectionMatrix);
          }
          unproject(_0x184efd) {
            return this.applyMatrix4(_0x184efd.projectionMatrixInverse).applyMatrix4(_0x184efd.matrixWorld);
          }
          transformDirection(_0x3a8fce) {
            var _0x2a1998 = this.x;
            var _0x1a2215 = this.y;
            var _0x2438d2 = this.z;
            _0x3a8fce = _0x3a8fce.elements;
            this.x = _0x3a8fce[0] * _0x2a1998 + _0x3a8fce[4] * _0x1a2215 + _0x3a8fce[8] * _0x2438d2;
            this.y = _0x3a8fce[1] * _0x2a1998 + _0x3a8fce[5] * _0x1a2215 + _0x3a8fce[9] * _0x2438d2;
            this.z = _0x3a8fce[2] * _0x2a1998 + _0x3a8fce[6] * _0x1a2215 + _0x3a8fce[10] * _0x2438d2;
            return this.normalize();
          }
          divide(_0x44846c) {
            this.x /= _0x44846c.x;
            this.y /= _0x44846c.y;
            this.z /= _0x44846c.z;
            return this;
          }
          divideScalar(_0x56808e) {
            return this.multiplyScalar(1 / _0x56808e);
          }
          min(_0x2da2a4) {
            this.x = Math.min(this.x, _0x2da2a4.x);
            this.y = Math.min(this.y, _0x2da2a4.y);
            this.z = Math.min(this.z, _0x2da2a4.z);
            return this;
          }
          max(_0x27f98f) {
            this.x = Math.max(this.x, _0x27f98f.x);
            this.y = Math.max(this.y, _0x27f98f.y);
            this.z = Math.max(this.z, _0x27f98f.z);
            return this;
          }
          clamp(_0x5eb737, _0x2a7831) {
            this.x = Math.max(_0x5eb737.x, Math.min(_0x2a7831.x, this.x));
            this.y = Math.max(_0x5eb737.y, Math.min(_0x2a7831.y, this.y));
            this.z = Math.max(_0x5eb737.z, Math.min(_0x2a7831.z, this.z));
            return this;
          }
          clampScalar(_0x1e9d26, _0x58bcb0) {
            this.x = Math.max(_0x1e9d26, Math.min(_0x58bcb0, this.x));
            this.y = Math.max(_0x1e9d26, Math.min(_0x58bcb0, this.y));
            this.z = Math.max(_0x1e9d26, Math.min(_0x58bcb0, this.z));
            return this;
          }
          clampLength(_0x4feba3, _0x2950ca) {
            var _0x39a130 = 17;
            var _0x15b981 = this.length();
            _0x39a130 = 9;
            return this.divideScalar(_0x15b981 || 1).multiplyScalar(Math.max(_0x4feba3, Math.min(_0x2950ca, _0x15b981)));
          }
          floor() {
            this.x = Math.floor(this.x);
            this.y = Math.floor(this.y);
            this.z = Math.floor(this.z);
            return this;
          }
          ceil() {
            this.x = Math.ceil(this.x);
            this.y = Math.ceil(this.y);
            this.z = Math.ceil(this.z);
            return this;
          }
          round() {
            this.x = Math.round(this.x);
            this.y = Math.round(this.y);
            this.z = Math.round(this.z);
            return this;
          }
          roundToZero() {
            this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
            this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
            this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
            return this;
          }
          negate() {
            this.x = -this.x;
            this.y = -this.y;
            this.z = -this.z;
            return this;
          }
          dot(_0x354f8d) {
            return this.x * _0x354f8d.x + this.y * _0x354f8d.y + this.z * _0x354f8d.z;
          }
          lengthSq() {
            return this.x * this.x + this.y * this.y + this.z * this.z;
          }
          length() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
          }
          ["htgneLnattahnam".split("").reverse().join("")]() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
          }
          normalize() {
            return this.divideScalar(this.length() || 1);
          }
          setLength(_0x4f4312) {
            return this.normalize().multiplyScalar(_0x4f4312);
          }
          lerp(_0x53c3cc, _0x90b192) {
            this.x += (_0x53c3cc.x - this.x) * _0x90b192;
            this.y += (_0x53c3cc.y - this.y) * _0x90b192;
            this.z += (_0x53c3cc.z - this.z) * _0x90b192;
            return this;
          }
          lerpVectors(_0x4ea6fb, _0x5b3c61, _0x1068c2) {
            this.x = _0x4ea6fb.x + (_0x5b3c61.x - _0x4ea6fb.x) * _0x1068c2;
            this.y = _0x4ea6fb.y + (_0x5b3c61.y - _0x4ea6fb.y) * _0x1068c2;
            this.z = _0x4ea6fb.z + (_0x5b3c61.z - _0x4ea6fb.z) * _0x1068c2;
            return this;
          }
          cross(_0x5da090, _0x340a49) {
            if (_0x340a49 !== undefined) {
              return this.crossVectors(_0x5da090, _0x340a49);
            } else {
              return this.crossVectors(this, _0x5da090);
            }
          }
          crossVectors(_0x5e1295, _0x1fa827) {
            var _0x2bfdc8 = _0x5e1295.x;
            var _0x1840de = _0x5e1295.y;
            var _0x31c381 = _0x5e1295.z;
            var _0x10f018 = _0x1fa827.x;
            _0x5e1295 = _0x1fa827.y;
            _0x1fa827 = _0x1fa827.z;
            this.x = _0x1840de * _0x1fa827 - _0x31c381 * _0x5e1295;
            this.y = _0x31c381 * _0x10f018 - _0x2bfdc8 * _0x1fa827;
            this.z = _0x2bfdc8 * _0x5e1295 - _0x1840de * _0x10f018;
            return this;
          }
          projectOnVector(_0x3beb0b) {
            var _0x47d105 = 9;
            var _0xe17f1b = _0x3beb0b.lengthSq();
            _0x47d105 = 3;
            if (_0xe17f1b === 0) {
              return this.set(0, 0, 0);
            } else {
              _0xe17f1b = _0x3beb0b.dot(this) / _0xe17f1b;
              return this.copy(_0x3beb0b).multiplyScalar(_0xe17f1b);
            }
          }
          projectOnPlane(_0x144f30) {
            _0x1fb59d.copy(this).projectOnVector(_0x144f30);
            return this.sub(_0x1fb59d);
          }
          reflect(_0x1038f5) {
            return this.sub(_0x1fb59d.copy(_0x1038f5).multiplyScalar(this.dot(_0x1038f5) * 2));
          }
          angleTo(_0x56b700) {
            var _0x439e03 = Math.sqrt(this.lengthSq() * _0x56b700.lengthSq());
            if (_0x439e03 === 0) {
              return Math.PI / 2;
            } else {
              _0x439e03 = this.dot(_0x56b700) / _0x439e03;
              return Math.acos(_0x6865cb(_0x439e03, -1, 1));
            }
          }
          distanceTo(_0x3e5d00) {
            return Math.sqrt(this.distanceToSquared(_0x3e5d00));
          }
          distanceToSquared(_0x41dbfe) {
            var _0x3d649f = this.x - _0x41dbfe.x;
            var _0x5e03e3 = this.y - _0x41dbfe.y;
            return _0x3d649f * _0x3d649f + _0x5e03e3 * _0x5e03e3 + (_0x41dbfe = this.z - _0x41dbfe.z) * _0x41dbfe;
          }
          manhattanDistanceTo(_0x5de6f4) {
            return Math.abs(this.x - _0x5de6f4.x) + Math.abs(this.y - _0x5de6f4.y) + Math.abs(this.z - _0x5de6f4.z);
          }
          setFromSpherical(_0x4aac93) {
            return this.setFromSphericalCoords(_0x4aac93.radius, _0x4aac93.phi, _0x4aac93.theta);
          }
          setFromSphericalCoords(_0x31fd3a, _0x3b6ddd, _0xb1c510) {
            var _0x68522f = Math.sin(_0x3b6ddd) * _0x31fd3a;
            this.x = _0x68522f * Math.sin(_0xb1c510);
            this.y = Math.cos(_0x3b6ddd) * _0x31fd3a;
            this.z = _0x68522f * Math.cos(_0xb1c510);
            return this;
          }
          setFromCylindrical(_0x261810) {
            return this.setFromCylindricalCoords(_0x261810.radius, _0x261810.theta, _0x261810.y);
          }
          setFromCylindricalCoords(_0x1d3b41, _0x1cf125, _0x32d7ec) {
            this.x = _0x1d3b41 * Math.sin(_0x1cf125);
            this.y = _0x32d7ec;
            this.z = _0x1d3b41 * Math.cos(_0x1cf125);
            return this;
          }
          setFromMatrixPosition(_0x3e7b42) {
            _0x3e7b42 = _0x3e7b42.elements;
            this.x = _0x3e7b42[12];
            this.y = _0x3e7b42[13];
            this.z = _0x3e7b42[14];
            return this;
          }
          setFromMatrixScale(_0x4551fa) {
            var _0x3de7ca = this.setFromMatrixColumn(_0x4551fa, 0).length();
            var _0x2d605c = this.setFromMatrixColumn(_0x4551fa, 1).length();
            _0x4551fa = this.setFromMatrixColumn(_0x4551fa, 2).length();
            this.x = _0x3de7ca;
            this.y = _0x2d605c;
            this.z = _0x4551fa;
            return this;
          }
          setFromMatrixColumn(_0x555897, _0x1aa53) {
            return this.fromArray(_0x555897.elements, _0x1aa53 * 4);
          }
          setFromMatrix3Column(_0x5bd505, _0x29b01d) {
            return this.fromArray(_0x5bd505.elements, _0x29b01d * 3);
          }
          equals(_0xdf85aa) {
            return _0xdf85aa.x === this.x && _0xdf85aa.y === this.y && _0xdf85aa.z === this.z;
          }
          fromArray(_0x401a88, _0xb53eb0 = 0) {
            this.x = _0x401a88[_0xb53eb0];
            this.y = _0x401a88[_0xb53eb0 + 1];
            this.z = _0x401a88[_0xb53eb0 + 2];
            return this;
          }
          toArray(_0x1d8a76 = [], _0x178a20 = 0) {
            _0x1d8a76[_0x178a20] = this.x;
            _0x1d8a76[_0x178a20 + 1] = this.y;
            _0x1d8a76[_0x178a20 + 2] = this.z;
            return _0x1d8a76;
          }
          fromBufferAttribute(_0xafa5e3, _0x4fbe2a, _0x2b8262) {
            this.x = _0xafa5e3.getX(_0x4fbe2a);
            this.y = _0xafa5e3.getY(_0x4fbe2a);
            this.z = _0xafa5e3.getZ(_0x4fbe2a);
            return this;
          }
          random() {
            this.x = Math.random();
            this.y = Math.random();
            this.z = Math.random();
            return this;
          }
          randomDirection() {
            var _0x453464 = (Math.random() - 0.5) * 2;
            var _0x54a4d9 = Math.random() * Math.PI * 2;
            var _0x5348ca = Math.sqrt(1 - _0x453464 ** 2);
            this.x = _0x5348ca * Math.cos(_0x54a4d9);
            this.y = _0x5348ca * Math.sin(_0x54a4d9);
            this.z = _0x453464;
            return this;
          }
          *[Symbol.iterator]() {
            yield this.x;
            yield this.y;
            yield this.z;
          }
        }
        _0x1d20ef.prototype.isVector3 = true;
        const _0x1fb59d = new _0x1d20ef();
        const _0x452bb0 = new _0x53f372();
        class _0x227d92 {
          constructor(_0x1c0c11 = new _0x1d20ef(Infinity, Infinity, Infinity), _0x4be671 = new _0x1d20ef(-Infinity, -Infinity, -Infinity)) {
            this.min = _0x1c0c11;
            this.max = _0x4be671;
          }
          set(_0x551012, _0x2f2fb6) {
            this.min.copy(_0x551012);
            this.max.copy(_0x2f2fb6);
            return this;
          }
          setFromArray(_0x12b5e7) {
            let _0x5add5a = Infinity;
            let _0x4a4eec = Infinity;
            let _0x1774b7 = Infinity;
            let _0x243e06 = -Infinity;
            let _0x500b50 = -Infinity;
            let _0x2fd020 = -Infinity;
            for (let _0x3b1cca = 0, _0x4d7911 = _0x12b5e7.length; _0x3b1cca < _0x4d7911; _0x3b1cca += 3) {
              var _0x440263 = _0x12b5e7[_0x3b1cca];
              var _0x5de4f0 = _0x12b5e7[_0x3b1cca + 1];
              var _0x43747e = _0x12b5e7[_0x3b1cca + 2];
              if (_0x440263 < _0x5add5a) {
                _0x5add5a = _0x440263;
              }
              if (_0x5de4f0 < _0x4a4eec) {
                _0x4a4eec = _0x5de4f0;
              }
              if (_0x43747e < _0x1774b7) {
                _0x1774b7 = _0x43747e;
              }
              if (_0x440263 > _0x243e06) {
                _0x243e06 = _0x440263;
              }
              if (_0x5de4f0 > _0x500b50) {
                _0x500b50 = _0x5de4f0;
              }
              if (_0x43747e > _0x2fd020) {
                _0x2fd020 = _0x43747e;
              }
            }
            this.min.set(_0x5add5a, _0x4a4eec, _0x1774b7);
            this.max.set(_0x243e06, _0x500b50, _0x2fd020);
            return this;
          }
          setFromBufferAttribute(_0x4e76a5) {
            let _0x2aff76 = Infinity;
            let _0x59b5eb = Infinity;
            let _0x55bd67 = Infinity;
            let _0x284621 = -Infinity;
            let _0x235a26 = -Infinity;
            let _0x393177 = -Infinity;
            for (let _0x182984 = 0, _0xa37295 = _0x4e76a5.count; _0x182984 < _0xa37295; _0x182984++) {
              var _0xbb4285 = _0x4e76a5.getX(_0x182984);
              var _0xd41da7 = _0x4e76a5.getY(_0x182984);
              var _0x5630e4 = _0x4e76a5.getZ(_0x182984);
              if (_0xbb4285 < _0x2aff76) {
                _0x2aff76 = _0xbb4285;
              }
              if (_0xd41da7 < _0x59b5eb) {
                _0x59b5eb = _0xd41da7;
              }
              if (_0x5630e4 < _0x55bd67) {
                _0x55bd67 = _0x5630e4;
              }
              if (_0xbb4285 > _0x284621) {
                _0x284621 = _0xbb4285;
              }
              if (_0xd41da7 > _0x235a26) {
                _0x235a26 = _0xd41da7;
              }
              if (_0x5630e4 > _0x393177) {
                _0x393177 = _0x5630e4;
              }
            }
            this.min.set(_0x2aff76, _0x59b5eb, _0x55bd67);
            this.max.set(_0x284621, _0x235a26, _0x393177);
            return this;
          }
          setFromPoints(_0x2eddea) {
            this.makeEmpty();
            for (let _0x463158 = 0, _0x11f90c = _0x2eddea.length; _0x463158 < _0x11f90c; _0x463158++) {
              this.expandByPoint(_0x2eddea[_0x463158]);
            }
            return this;
          }
          setFromCenterAndSize(_0x310429, _0x46e7c9) {
            _0x46e7c9 = _0x29c519.copy(_0x46e7c9).multiplyScalar(0.5);
            this.min.copy(_0x310429).sub(_0x46e7c9);
            this.max.copy(_0x310429).add(_0x46e7c9);
            return this;
          }
          setFromObject(_0x373096) {
            this.makeEmpty();
            return this.expandByObject(_0x373096);
          }
          clone() {
            return new this.constructor().copy(this);
          }
          copy(_0xea2d1) {
            this.min.copy(_0xea2d1.min);
            this.max.copy(_0xea2d1.max);
            return this;
          }
          makeEmpty() {
            this.min.x = this.min.y = this.min.z = Infinity;
            this.max.x = this.max.y = this.max.z = -Infinity;
            return this;
          }
          isEmpty() {
            return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
          }
          getCenter(_0x537d53) {
            if (this.isEmpty()) {
              return _0x537d53.set(0, 0, 0);
            } else {
              return _0x537d53.addVectors(this.min, this.max).multiplyScalar(0.5);
            }
          }
          getSize(_0x41277e) {
            if (this.isEmpty()) {
              return _0x41277e.set(0, 0, 0);
            } else {
              return _0x41277e.subVectors(this.max, this.min);
            }
          }
          expandByPoint(_0x22c4ea) {
            this.min.min(_0x22c4ea);
            this.max.max(_0x22c4ea);
            return this;
          }
          expandByVector(_0x32dc19) {
            this.min.sub(_0x32dc19);
            this.max.add(_0x32dc19);
            return this;
          }
          expandByScalar(_0x2bdf85) {
            this.min.addScalar(-_0x2bdf85);
            this.max.addScalar(_0x2bdf85);
            return this;
          }
          expandByObject(_0x63be7e) {
            _0x63be7e.updateWorldMatrix(false, false);
            const _0x40fbea = _0x63be7e.geometry;
            if (_0x40fbea !== undefined) {
              if (_0x40fbea.boundingBox === null) {
                _0x40fbea.computeBoundingBox();
              }
              _0x3c031c.copy(_0x40fbea.boundingBox);
              _0x3c031c.applyMatrix4(_0x63be7e.matrixWorld);
              this.union(_0x3c031c);
            }
            var _0x4f7f65;
            var _0x4f37be = _0x63be7e.children;
            _0x4f7f65 = 4;
            for (let _0x135d45 = 0, _0x470a98 = _0x4f37be.length; _0x135d45 < _0x470a98; _0x135d45++) {
              this.expandByObject(_0x4f37be[_0x135d45]);
            }
            return this;
          }
          containsPoint(_0x41fa08) {
            return !(_0x41fa08.x < this.min.x || _0x41fa08.x > this.max.x || _0x41fa08.y < this.min.y || _0x41fa08.y > this.max.y || _0x41fa08.z < this.min.z || _0x41fa08.z > this.max.z);
          }
          containsBox(_0x11e384) {
            return this.min.x <= _0x11e384.min.x && _0x11e384.max.x <= this.max.x && this.min.y <= _0x11e384.min.y && _0x11e384.max.y <= this.max.y && this.min.z <= _0x11e384.min.z && _0x11e384.max.z <= this.max.z;
          }
          getParameter(_0x2181cb, _0x306179) {
            return _0x306179.set((_0x2181cb.x - this.min.x) / (this.max.x - this.min.x), (_0x2181cb.y - this.min.y) / (this.max.y - this.min.y), (_0x2181cb.z - this.min.z) / (this.max.z - this.min.z));
          }
          intersectsBox(_0x399aae) {
            return !(_0x399aae.max.x < this.min.x || _0x399aae.min.x > this.max.x || _0x399aae.max.y < this.min.y || _0x399aae.min.y > this.max.y || _0x399aae.max.z < this.min.z || _0x399aae.min.z > this.max.z);
          }
          intersectsSphere(_0x12e2c5) {
            this.clampPoint(_0x12e2c5.center, _0x29c519);
            return _0x29c519.distanceToSquared(_0x12e2c5.center) <= _0x12e2c5.radius * _0x12e2c5.radius;
          }
          intersectsPlane(_0x2954f2) {
            let _0x807e03;
            let _0x402ccd;
            _0x402ccd = _0x2954f2.normal.x > 0 ? (_0x807e03 = _0x2954f2.normal.x * this.min.x, _0x2954f2.normal.x * this.max.x) : (_0x807e03 = _0x2954f2.normal.x * this.max.x, _0x2954f2.normal.x * this.min.x);
            if (_0x2954f2.normal.y > 0) {
              _0x807e03 += _0x2954f2.normal.y * this.min.y;
              _0x402ccd += _0x2954f2.normal.y * this.max.y;
            } else {
              _0x807e03 += _0x2954f2.normal.y * this.max.y;
              _0x402ccd += _0x2954f2.normal.y * this.min.y;
            }
            if (_0x2954f2.normal.z > 0) {
              _0x807e03 += _0x2954f2.normal.z * this.min.z;
              _0x402ccd += _0x2954f2.normal.z * this.max.z;
            } else {
              _0x807e03 += _0x2954f2.normal.z * this.max.z;
              _0x402ccd += _0x2954f2.normal.z * this.min.z;
            }
            return _0x807e03 <= -_0x2954f2.constant && _0x402ccd >= -_0x2954f2.constant;
          }
          intersectsTriangle(_0x42f502) {
            return !this.isEmpty() && (this.getCenter(_0x2da732), _0x456f81.subVectors(this.max, _0x2da732), _0x2046cd.subVectors(_0x42f502.a, _0x2da732), _0x95f78d.subVectors(_0x42f502.b, _0x2da732), _0x55470d.subVectors(_0x42f502.c, _0x2da732), _0x916df9.subVectors(_0x95f78d, _0x2046cd), _0x429d6c.subVectors(_0x55470d, _0x95f78d), _0x3552e6.subVectors(_0x2046cd, _0x55470d), !!_0x1482a3([0, -_0x916df9.z, _0x916df9.y, 0, -_0x429d6c.z, _0x429d6c.y, 0, -_0x3552e6.z, _0x3552e6.y, _0x916df9.z, 0, -_0x916df9.x, _0x429d6c.z, 0, -_0x429d6c.x, _0x3552e6.z, 0, -_0x3552e6.x, -_0x916df9.y, _0x916df9.x, 0, -_0x429d6c.y, _0x429d6c.x, 0, -_0x3552e6.y, _0x3552e6.x, 0], _0x2046cd, _0x95f78d, _0x55470d, _0x456f81) && !!_0x1482a3([1, 0, 0, 0, 1, 0, 0, 0, 1], _0x2046cd, _0x95f78d, _0x55470d, _0x456f81) && (_0x550a29.crossVectors(_0x916df9, _0x429d6c), _0x1482a3([_0x550a29.x, _0x550a29.y, _0x550a29.z], _0x2046cd, _0x95f78d, _0x55470d, _0x456f81)));
          }
          clampPoint(_0x299b9d, _0x4208c4) {
            return _0x4208c4.copy(_0x299b9d).clamp(this.min, this.max);
          }
          distanceToPoint(_0x253917) {
            return _0x29c519.copy(_0x253917).clamp(this.min, this.max).sub(_0x253917).length();
          }
          getBoundingSphere(_0x4671c1) {
            this.getCenter(_0x4671c1.center);
            _0x4671c1.radius = this.getSize(_0x29c519).length() * 0.5;
            return _0x4671c1;
          }
          intersect(_0x15d4a5) {
            this.min.max(_0x15d4a5.min);
            this.max.min(_0x15d4a5.max);
            if (this.isEmpty()) {
              this.makeEmpty();
            }
            return this;
          }
          union(_0xcea1d3) {
            this.min.min(_0xcea1d3.min);
            this.max.max(_0xcea1d3.max);
            return this;
          }
          applyMatrix4(_0x37f58a) {
            if (!this.isEmpty()) {
              _0x472378[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(_0x37f58a);
              _0x472378[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(_0x37f58a);
              _0x472378[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(_0x37f58a);
              _0x472378[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(_0x37f58a);
              _0x472378[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(_0x37f58a);
              _0x472378[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(_0x37f58a);
              _0x472378[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(_0x37f58a);
              _0x472378[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(_0x37f58a);
              this.setFromPoints(_0x472378);
            }
            return this;
          }
          translate(_0x3e1d66) {
            this.min.add(_0x3e1d66);
            this.max.add(_0x3e1d66);
            return this;
          }
          equals(_0x1cdfa4) {
            return _0x1cdfa4.min.equals(this.min) && _0x1cdfa4.max.equals(this.max);
          }
        }
        _0x227d92.prototype.isBox3 = true;
        const _0x472378 = [new _0x1d20ef(), new _0x1d20ef(), new _0x1d20ef(), new _0x1d20ef(), new _0x1d20ef(), new _0x1d20ef(), new _0x1d20ef(), new _0x1d20ef()];
        const _0x29c519 = new _0x1d20ef();
        const _0x3c031c = new _0x227d92();
        const _0x2046cd = new _0x1d20ef();
        const _0x95f78d = new _0x1d20ef();
        const _0x55470d = new _0x1d20ef();
        const _0x916df9 = new _0x1d20ef();
        const _0x429d6c = new _0x1d20ef();
        const _0x3552e6 = new _0x1d20ef();
        const _0x2da732 = new _0x1d20ef();
        const _0x456f81 = new _0x1d20ef();
        const _0x550a29 = new _0x1d20ef();
        const _0x9cf000 = new _0x1d20ef();
        function _0x1482a3(_0x39a98e, _0x5bc07d, _0x58f083, _0x5eb1c5, _0x1ccbe7) {
          for (let _0x388110 = 0, _0x17c5ab = _0x39a98e.length - 3; _0x388110 <= _0x17c5ab; _0x388110 += 3) {
            _0x9cf000.fromArray(_0x39a98e, _0x388110);
            var _0x3803f0 = _0x1ccbe7.x * Math.abs(_0x9cf000.x) + _0x1ccbe7.y * Math.abs(_0x9cf000.y) + _0x1ccbe7.z * Math.abs(_0x9cf000.z);
            var _0x5aff09 = _0x5bc07d.dot(_0x9cf000);
            var _0x42066d = _0x58f083.dot(_0x9cf000);
            var _0x17a8ee = _0x5eb1c5.dot(_0x9cf000);
            if (Math.max(-Math.max(_0x5aff09, _0x42066d, _0x17a8ee), Math.min(_0x5aff09, _0x42066d, _0x17a8ee)) > _0x3803f0) {
              return false;
            }
          }
          return true;
        }
        const _0x1b7067 = new _0x227d92();
        const _0xb8831f = new _0x1d20ef();
        const _0x2e8280 = new _0x1d20ef();
        const _0x55aa15 = new _0x1d20ef();
        class _0x26f734 {
          constructor(_0x3cf4d7 = new _0x1d20ef(), _0x2df986 = -1) {
            this.center = _0x3cf4d7;
            this.radius = _0x2df986;
          }
          set(_0x3ef818, _0x45b81f) {
            this.center.copy(_0x3ef818);
            this.radius = _0x45b81f;
            return this;
          }
          setFromPoints(_0x2aed15, _0x3751a5) {
            const _0x15d84e = this.center;
            if (_0x3751a5 !== undefined) {
              _0x15d84e.copy(_0x3751a5);
            } else {
              _0x1b7067.setFromPoints(_0x2aed15).getCenter(_0x15d84e);
            }
            let _0x3e5a36 = 0;
            for (let _0x35f8a = 0, _0x2b6046 = _0x2aed15.length; _0x35f8a < _0x2b6046; _0x35f8a++) {
              _0x3e5a36 = Math.max(_0x3e5a36, _0x15d84e.distanceToSquared(_0x2aed15[_0x35f8a]));
            }
            this.radius = Math.sqrt(_0x3e5a36);
            return this;
          }
          copy(_0x359d60) {
            this.center.copy(_0x359d60.center);
            this.radius = _0x359d60.radius;
            return this;
          }
          isEmpty() {
            return this.radius < 0;
          }
          makeEmpty() {
            this.center.set(0, 0, 0);
            this.radius = -1;
            return this;
          }
          containsPoint(_0x4d1327) {
            return _0x4d1327.distanceToSquared(this.center) <= this.radius * this.radius;
          }
          distanceToPoint(_0x1c7ab5) {
            return _0x1c7ab5.distanceTo(this.center) - this.radius;
          }
          intersectsSphere(_0x2cafae) {
            var _0x49a3a3;
            var _0x33d35c = this.radius + _0x2cafae.radius;
            _0x49a3a3 = 9;
            return _0x2cafae.center.distanceToSquared(this.center) <= _0x33d35c * _0x33d35c;
          }
          intersectsBox(_0x8e3ecf) {
            return _0x8e3ecf.intersectsSphere(this);
          }
          intersectsPlane(_0x270114) {
            return Math.abs(_0x270114.distanceToPoint(this.center)) <= this.radius;
          }
          clampPoint(_0xc324e9, _0xe1e606) {
            var _0x996a95 = this.center.distanceToSquared(_0xc324e9);
            _0xe1e606.copy(_0xc324e9);
            if (_0x996a95 > this.radius * this.radius) {
              _0xe1e606.sub(this.center).normalize();
              _0xe1e606.multiplyScalar(this.radius).add(this.center);
            }
            return _0xe1e606;
          }
          getBoundingBox(_0xae710e) {
            if (this.isEmpty()) {
              _0xae710e.makeEmpty();
            } else {
              _0xae710e.set(this.center, this.center);
              _0xae710e.expandByScalar(this.radius);
            }
            return _0xae710e;
          }
          applyMatrix4(_0x3fadb0) {
            this.center.applyMatrix4(_0x3fadb0);
            this.radius = this.radius * _0x3fadb0.getMaxScaleOnAxis();
            return this;
          }
          translate(_0x44be7b) {
            this.center.add(_0x44be7b);
            return this;
          }
          expandByPoint(_0x55678d) {
            _0x55aa15.subVectors(_0x55678d, this.center);
            var _0x54368a = _0x55aa15.lengthSq();
            if (_0x54368a > this.radius * this.radius) {
              _0x54368a = ((_0x55678d = Math.sqrt(_0x54368a)) - this.radius) * 0.5;
              this.center.add(_0x55aa15.multiplyScalar(_0x54368a / _0x55678d));
              this.radius += _0x54368a;
            }
            return this;
          }
          union(_0x2786f9) {
            (this.center.equals(_0x2786f9.center) === true ? _0x2e8280.set(0, 0, 1) : _0x2e8280.subVectors(_0x2786f9.center, this.center).normalize()).multiplyScalar(_0x2786f9.radius);
            this.expandByPoint(_0xb8831f.copy(_0x2786f9.center).add(_0x2e8280));
            this.expandByPoint(_0xb8831f.copy(_0x2786f9.center).sub(_0x2e8280));
            return this;
          }
          equals(_0x34655c) {
            return _0x34655c.center.equals(this.center) && _0x34655c.radius === this.radius;
          }
          clone() {
            return new this.constructor().copy(this);
          }
        }
        const _0x381975 = new _0x1d20ef();
        const _0x452929 = new _0x1d20ef();
        const _0x25e350 = new _0x1d20ef();
        const _0x5e1eca = new _0x1d20ef();
        const _0x50304c = new _0x1d20ef();
        const _0x2c0c8d = new _0x1d20ef();
        const _0x2a5fcc = new _0x1d20ef();
        class _0x123ff1 {
          constructor(_0x1ce03a = new _0x1d20ef(), _0x466496 = new _0x1d20ef(0, 0, -1)) {
            this.origin = _0x1ce03a;
            this.direction = _0x466496;
          }
          set(_0x24be71, _0x700f7a) {
            this.origin.copy(_0x24be71);
            this.direction.copy(_0x700f7a);
            return this;
          }
          copy(_0x33cb04) {
            this.origin.copy(_0x33cb04.origin);
            this.direction.copy(_0x33cb04.direction);
            return this;
          }
          at(_0x144cc7, _0x3cfbb5) {
            return _0x3cfbb5.copy(this.direction).multiplyScalar(_0x144cc7).add(this.origin);
          }
          lookAt(_0x8d639c) {
            this.direction.copy(_0x8d639c).sub(this.origin).normalize();
            return this;
          }
          recast(_0x584116) {
            this.origin.copy(this.at(_0x584116, _0x381975));
            return this;
          }
          closestPointToPoint(_0x4d81db, _0x590094) {
            _0x590094.subVectors(_0x4d81db, this.origin);
            if ((_0x4d81db = _0x590094.dot(this.direction)) < 0) {
              return _0x590094.copy(this.origin);
            } else {
              return _0x590094.copy(this.direction).multiplyScalar(_0x4d81db).add(this.origin);
            }
          }
          distanceToPoint(_0x59d9e3) {
            return Math.sqrt(this.distanceSqToPoint(_0x59d9e3));
          }
          distanceSqToPoint(_0x53cbfc) {
            var _0x2dc634 = 8;
            var _0xa63275 = _0x381975.subVectors(_0x53cbfc, this.origin).dot(this.direction);
            _0x2dc634 = 4;
            if (_0xa63275 < 0) {
              return this.origin.distanceToSquared(_0x53cbfc);
            } else {
              _0x381975.copy(this.direction).multiplyScalar(_0xa63275).add(this.origin);
              return _0x381975.distanceToSquared(_0x53cbfc);
            }
          }
          distanceSqToSegment(_0x14418c, _0x5c9a54, _0x7661c5, _0x15015c) {
            _0x452929.copy(_0x14418c).add(_0x5c9a54).multiplyScalar(0.5);
            _0x25e350.copy(_0x5c9a54).sub(_0x14418c).normalize();
            _0x5e1eca.copy(this.origin).sub(_0x452929);
            var _0x1b1ab6 = _0x14418c.distanceTo(_0x5c9a54) * 0.5;
            var _0x594bd7 = -this.direction.dot(_0x25e350);
            var _0x4b3be5 = _0x5e1eca.dot(this.direction);
            var _0x11362c = -_0x5e1eca.dot(_0x25e350);
            _0x14418c = _0x5e1eca.lengthSq();
            let _0x34c309;
            let _0x49321d;
            let _0x4c91f7;
            let _0x4e5c54;
            _0x4c91f7 = (_0x5c9a54 = Math.abs(1 - _0x594bd7 * _0x594bd7)) > 0 ? (_0x34c309 = _0x594bd7 * _0x11362c - _0x4b3be5, _0x49321d = _0x594bd7 * _0x4b3be5 - _0x11362c, _0x4e5c54 = _0x1b1ab6 * _0x5c9a54, _0x34c309 >= 0 ? _0x49321d >= -_0x4e5c54 ? _0x49321d <= _0x4e5c54 ? (_0x34c309 *= _0x5c9a54 = 1 / _0x5c9a54, _0x49321d *= _0x5c9a54, _0x34c309 * (_0x34c309 + _0x594bd7 * _0x49321d + _0x4b3be5 * 2) + _0x49321d * (_0x594bd7 * _0x34c309 + _0x49321d + _0x11362c * 2) + _0x14418c) : (_0x49321d = _0x1b1ab6, _0x34c309 = Math.max(0, -(_0x594bd7 * _0x49321d + _0x4b3be5)), -_0x34c309 * _0x34c309 + _0x49321d * (_0x49321d + _0x11362c * 2) + _0x14418c) : (_0x49321d = -_0x1b1ab6, _0x34c309 = Math.max(0, -(_0x594bd7 * _0x49321d + _0x4b3be5)), -_0x34c309 * _0x34c309 + _0x49321d * (_0x49321d + _0x11362c * 2) + _0x14418c) : _0x49321d <= -_0x4e5c54 ? (_0x34c309 = Math.max(0, -(-_0x594bd7 * _0x1b1ab6 + _0x4b3be5)), _0x49321d = _0x34c309 > 0 ? -_0x1b1ab6 : Math.min(Math.max(-_0x1b1ab6, -_0x11362c), _0x1b1ab6), -_0x34c309 * _0x34c309 + _0x49321d * (_0x49321d + _0x11362c * 2) + _0x14418c) : _0x49321d <= _0x4e5c54 ? (_0x34c309 = 0, _0x49321d = Math.min(Math.max(-_0x1b1ab6, -_0x11362c), _0x1b1ab6), _0x49321d * (_0x49321d + _0x11362c * 2) + _0x14418c) : (_0x34c309 = Math.max(0, -(_0x594bd7 * _0x1b1ab6 + _0x4b3be5)), _0x49321d = _0x34c309 > 0 ? _0x1b1ab6 : Math.min(Math.max(-_0x1b1ab6, -_0x11362c), _0x1b1ab6), -_0x34c309 * _0x34c309 + _0x49321d * (_0x49321d + _0x11362c * 2) + _0x14418c)) : (_0x49321d = _0x594bd7 > 0 ? -_0x1b1ab6 : _0x1b1ab6, _0x34c309 = Math.max(0, -(_0x594bd7 * _0x49321d + _0x4b3be5)), -_0x34c309 * _0x34c309 + _0x49321d * (_0x49321d + _0x11362c * 2) + _0x14418c);
            if (_0x7661c5) {
              _0x7661c5.copy(this.direction).multiplyScalar(_0x34c309).add(this.origin);
            }
            if (_0x15015c) {
              _0x15015c.copy(_0x25e350).multiplyScalar(_0x49321d).add(_0x452929);
            }
            return _0x4c91f7;
          }
          intersectSphere(_0x1a80db, _0x1ba675) {
            _0x381975.subVectors(_0x1a80db.center, this.origin);
            var _0x2142e5 = _0x381975.dot(this.direction);
            var _0x50fff7 = _0x381975.dot(_0x381975) - _0x2142e5 * _0x2142e5;
            if ((_0x1a80db = _0x1a80db.radius * _0x1a80db.radius) < _0x50fff7) {
              return null;
            } else {
              _0x50fff7 = _0x2142e5 - (_0x1a80db = Math.sqrt(_0x1a80db - _0x50fff7));
              _0x1a80db = _0x2142e5 + _0x1a80db;
              if (_0x50fff7 < 0 && _0x1a80db < 0) {
                return null;
              } else if (_0x50fff7 < 0) {
                return this.at(_0x1a80db, _0x1ba675);
              } else {
                return this.at(_0x50fff7, _0x1ba675);
              }
            }
          }
          intersectsSphere(_0x2bfc03) {
            return this.distanceSqToPoint(_0x2bfc03.center) <= _0x2bfc03.radius * _0x2bfc03.radius;
          }
          distanceToPlane(_0x111d7a) {
            var _0x2971b4 = _0x111d7a.normal.dot(this.direction);
            if (_0x2971b4 === 0) {
              if (_0x111d7a.distanceToPoint(this.origin) === 0) {
                return 0;
              } else {
                return null;
              }
            } else if ((_0x2971b4 = -(this.origin.dot(_0x111d7a.normal) + _0x111d7a.constant) / _0x2971b4) >= 0) {
              return _0x2971b4;
            } else {
              return null;
            }
          }
          intersectPlane(_0x26f771, _0x5e641a) {
            if ((_0x26f771 = this.distanceToPlane(_0x26f771)) === null) {
              return null;
            } else {
              return this.at(_0x26f771, _0x5e641a);
            }
          }
          intersectsPlane(_0x1fbba7) {
            var _0x4a0f57 = _0x1fbba7.distanceToPoint(this.origin);
            return _0x4a0f57 === 0 || _0x1fbba7.normal.dot(this.direction) * _0x4a0f57 < 0;
          }
          intersectBox(_0x5941ee, _0x20b295) {
            let _0x55b322;
            let _0x5c1f41;
            let _0x11b14f;
            let _0x87fed;
            let _0x5cbe0c;
            let _0x4ec3c0;
            var _0x229d3a = 1 / this.direction.x;
            var _0x253759 = 1 / this.direction.y;
            var _0x515877 = 1 / this.direction.z;
            var _0x74b610 = this.origin;
            _0x5c1f41 = _0x229d3a >= 0 ? (_0x55b322 = (_0x5941ee.min.x - _0x74b610.x) * _0x229d3a, (_0x5941ee.max.x - _0x74b610.x) * _0x229d3a) : (_0x55b322 = (_0x5941ee.max.x - _0x74b610.x) * _0x229d3a, (_0x5941ee.min.x - _0x74b610.x) * _0x229d3a);
            _0x87fed = _0x253759 >= 0 ? (_0x11b14f = (_0x5941ee.min.y - _0x74b610.y) * _0x253759, (_0x5941ee.max.y - _0x74b610.y) * _0x253759) : (_0x11b14f = (_0x5941ee.max.y - _0x74b610.y) * _0x253759, (_0x5941ee.min.y - _0x74b610.y) * _0x253759);
            if (_0x55b322 > _0x87fed || _0x11b14f > _0x5c1f41) {
              return null;
            } else {
              if (_0x11b14f > _0x55b322 || _0x55b322 != _0x55b322) {
                _0x55b322 = _0x11b14f;
              }
              if (_0x87fed < _0x5c1f41 || _0x5c1f41 != _0x5c1f41) {
                _0x5c1f41 = _0x87fed;
              }
              _0x4ec3c0 = _0x515877 >= 0 ? (_0x5cbe0c = (_0x5941ee.min.z - _0x74b610.z) * _0x515877, (_0x5941ee.max.z - _0x74b610.z) * _0x515877) : (_0x5cbe0c = (_0x5941ee.max.z - _0x74b610.z) * _0x515877, (_0x5941ee.min.z - _0x74b610.z) * _0x515877);
              if (_0x55b322 > _0x4ec3c0 || _0x5cbe0c > _0x5c1f41) {
                return null;
              } else {
                if (_0x5cbe0c > _0x55b322 || _0x55b322 != _0x55b322) {
                  _0x55b322 = _0x5cbe0c;
                }
                if (_0x4ec3c0 < _0x5c1f41 || _0x5c1f41 != _0x5c1f41) {
                  _0x5c1f41 = _0x4ec3c0;
                }
                if (_0x5c1f41 < 0) {
                  return null;
                } else {
                  return this.at(_0x55b322 >= 0 ? _0x55b322 : _0x5c1f41, _0x20b295);
                }
              }
            }
          }
          intersectsBox(_0xf1f98f) {
            return this.intersectBox(_0xf1f98f, _0x381975) !== null;
          }
          intersectTriangle(_0xbcaacb, _0x317323, _0x4d71a0, _0x563929, _0x18fb70) {
            _0x50304c.subVectors(_0x317323, _0xbcaacb);
            _0x2c0c8d.subVectors(_0x4d71a0, _0xbcaacb);
            _0x2a5fcc.crossVectors(_0x50304c, _0x2c0c8d);
            let _0x4aa86f;
            let _0x9748e9 = this.direction.dot(_0x2a5fcc);
            if (_0x9748e9 > 0) {
              if (_0x563929) {
                return null;
              }
              _0x4aa86f = 1;
            } else {
              if (!(_0x9748e9 < 0)) {
                return null;
              }
              _0x4aa86f = -1;
              _0x9748e9 = -_0x9748e9;
            }
            _0x5e1eca.subVectors(this.origin, _0xbcaacb);
            if ((_0x563929 = _0x4aa86f * this.direction.dot(_0x2c0c8d.crossVectors(_0x5e1eca, _0x2c0c8d))) < 0 || (_0xbcaacb = _0x4aa86f * this.direction.dot(_0x50304c.cross(_0x5e1eca))) < 0 || _0x563929 + _0xbcaacb > _0x9748e9 || (_0xbcaacb = -_0x4aa86f * _0x5e1eca.dot(_0x2a5fcc)) < 0) {
              return null;
            } else {
              return this.at(_0xbcaacb / _0x9748e9, _0x18fb70);
            }
          }
          applyMatrix4(_0x32399d) {
            this.origin.applyMatrix4(_0x32399d);
            this.direction.transformDirection(_0x32399d);
            return this;
          }
          equals(_0x3ac7a0) {
            return _0x3ac7a0.origin.equals(this.origin) && _0x3ac7a0.direction.equals(this.direction);
          }
          clone() {
            return new this.constructor().copy(this);
          }
        }
        class _0x33b2c9 {
          constructor() {
            this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
          }
          set(_0x17e88f, _0x1d7172, _0x285949, _0x595416, _0x57f29b, _0x499294, _0x5202bb, _0x61b016, _0x52c5b6, _0x1806a5, _0x4542ab, _0x162ee0, _0x14cc3f, _0x2e19a0, _0xbad253, _0x329a7b) {
            const _0x32d521 = this.elements;
            _0x32d521[0] = _0x17e88f;
            _0x32d521[4] = _0x1d7172;
            _0x32d521[8] = _0x285949;
            _0x32d521[12] = _0x595416;
            _0x32d521[1] = _0x57f29b;
            _0x32d521[5] = _0x499294;
            _0x32d521[9] = _0x5202bb;
            _0x32d521[13] = _0x61b016;
            _0x32d521[2] = _0x52c5b6;
            _0x32d521[6] = _0x1806a5;
            _0x32d521[10] = _0x4542ab;
            _0x32d521[14] = _0x162ee0;
            _0x32d521[3] = _0x14cc3f;
            _0x32d521[7] = _0x2e19a0;
            _0x32d521[11] = _0xbad253;
            _0x32d521[15] = _0x329a7b;
            return this;
          }
          identity() {
            this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
            return this;
          }
          clone() {
            return new _0x33b2c9().fromArray(this.elements);
          }
          copy(_0x37c4d3) {
            const _0x5724b0 = this.elements;
            _0x37c4d3 = _0x37c4d3.elements;
            _0x5724b0[0] = _0x37c4d3[0];
            _0x5724b0[1] = _0x37c4d3[1];
            _0x5724b0[2] = _0x37c4d3[2];
            _0x5724b0[3] = _0x37c4d3[3];
            _0x5724b0[4] = _0x37c4d3[4];
            _0x5724b0[5] = _0x37c4d3[5];
            _0x5724b0[6] = _0x37c4d3[6];
            _0x5724b0[7] = _0x37c4d3[7];
            _0x5724b0[8] = _0x37c4d3[8];
            _0x5724b0[9] = _0x37c4d3[9];
            _0x5724b0[10] = _0x37c4d3[10];
            _0x5724b0[11] = _0x37c4d3[11];
            _0x5724b0[12] = _0x37c4d3[12];
            _0x5724b0[13] = _0x37c4d3[13];
            _0x5724b0[14] = _0x37c4d3[14];
            _0x5724b0[15] = _0x37c4d3[15];
            return this;
          }
          copyPosition(_0x523b71) {
            const _0x138669 = this.elements;
            const _0x1869c7 = _0x523b71.elements;
            _0x138669[12] = _0x1869c7[12];
            _0x138669[13] = _0x1869c7[13];
            _0x138669[14] = _0x1869c7[14];
            return this;
          }
          setFromMatrix3(_0x38e5be) {
            _0x38e5be = _0x38e5be.elements;
            this.set(_0x38e5be[0], _0x38e5be[3], _0x38e5be[6], 0, _0x38e5be[1], _0x38e5be[4], _0x38e5be[7], 0, _0x38e5be[2], _0x38e5be[5], _0x38e5be[8], 0, 0, 0, 0, 1);
            return this;
          }
          extractBasis(_0x354419, _0xc4ee7f, _0xc5a904) {
            _0x354419.setFromMatrixColumn(this, 0);
            _0xc4ee7f.setFromMatrixColumn(this, 1);
            _0xc5a904.setFromMatrixColumn(this, 2);
            return this;
          }
          makeBasis(_0x32609a, _0x33a28d, _0x41b489) {
            this.set(_0x32609a.x, _0x33a28d.x, _0x41b489.x, 0, _0x32609a.y, _0x33a28d.y, _0x41b489.y, 0, _0x32609a.z, _0x33a28d.z, _0x41b489.z, 0, 0, 0, 0, 1);
            return this;
          }
          extractRotation(_0x3df29d) {
            const _0x216304 = this.elements;
            var _0xba13d9 = _0x3df29d.elements;
            var _0x139de4 = 1 / _0x47d6b3.setFromMatrixColumn(_0x3df29d, 0).length();
            var _0x5d8309 = 1 / _0x47d6b3.setFromMatrixColumn(_0x3df29d, 1).length();
            _0x3df29d = 1 / _0x47d6b3.setFromMatrixColumn(_0x3df29d, 2).length();
            _0x216304[0] = _0xba13d9[0] * _0x139de4;
            _0x216304[1] = _0xba13d9[1] * _0x139de4;
            _0x216304[2] = _0xba13d9[2] * _0x139de4;
            _0x216304[3] = 0;
            _0x216304[4] = _0xba13d9[4] * _0x5d8309;
            _0x216304[5] = _0xba13d9[5] * _0x5d8309;
            _0x216304[6] = _0xba13d9[6] * _0x5d8309;
            _0x216304[7] = 0;
            _0x216304[8] = _0xba13d9[8] * _0x3df29d;
            _0x216304[9] = _0xba13d9[9] * _0x3df29d;
            _0x216304[10] = _0xba13d9[10] * _0x3df29d;
            _0x216304[11] = 0;
            _0x216304[12] = 0;
            _0x216304[13] = 0;
            _0x216304[14] = 0;
            _0x216304[15] = 1;
            return this;
          }
          makeRotationFromEuler(_0x5c1ab9) {
            if (_0x5c1ab9) {
              _0x5c1ab9.isEuler;
            }
            const _0x117073 = this.elements;
            var _0x92dc37;
            var _0x186b27;
            var _0x354b2b;
            var _0x2d8f3c;
            var _0x44ed60;
            var _0x9e64fd;
            var _0x51df27;
            var _0x39cfc9;
            var _0x1057bf;
            var _0xa5fe1b;
            var _0x2d841e;
            var _0x534638 = _0x5c1ab9.x;
            var _0x1440c7 = _0x5c1ab9.y;
            var _0x30af8e = _0x5c1ab9.z;
            var _0x15689c = Math.cos(_0x534638);
            var _0x363b2f = Math.sin(_0x534638);
            var _0x114f3a = Math.cos(_0x1440c7);
            var _0x41d270 = Math.sin(_0x1440c7);
            _0x534638 = Math.cos(_0x30af8e);
            _0x1440c7 = Math.sin(_0x30af8e);
            if (_0x5c1ab9.order === "XYZ") {
              _0x92dc37 = _0x15689c * _0x534638;
              _0x354b2b = _0x15689c * _0x1440c7;
              _0x186b27 = _0x363b2f * _0x534638;
              _0x30af8e = _0x363b2f * _0x1440c7;
              _0x117073[0] = _0x114f3a * _0x534638;
              _0x117073[4] = -_0x114f3a * _0x1440c7;
              _0x117073[8] = _0x41d270;
              _0x117073[1] = _0x354b2b + _0x186b27 * _0x41d270;
              _0x117073[5] = _0x92dc37 - _0x30af8e * _0x41d270;
              _0x117073[9] = -_0x363b2f * _0x114f3a;
              _0x117073[2] = _0x30af8e - _0x92dc37 * _0x41d270;
              _0x117073[6] = _0x186b27 + _0x354b2b * _0x41d270;
              _0x117073[10] = _0x15689c * _0x114f3a;
            } else if (_0x5c1ab9.order === "YXZ") {
              _0x2d8f3c = _0x114f3a * _0x534638;
              _0x92dc37 = _0x114f3a * _0x1440c7;
              _0x186b27 = _0x41d270 * _0x534638;
              _0x354b2b = _0x41d270 * _0x1440c7;
              _0x117073[0] = _0x2d8f3c + _0x354b2b * _0x363b2f;
              _0x117073[4] = _0x186b27 * _0x363b2f - _0x92dc37;
              _0x117073[8] = _0x15689c * _0x41d270;
              _0x117073[1] = _0x15689c * _0x1440c7;
              _0x117073[5] = _0x15689c * _0x534638;
              _0x117073[9] = -_0x363b2f;
              _0x117073[2] = _0x92dc37 * _0x363b2f - _0x186b27;
              _0x117073[6] = _0x354b2b + _0x2d8f3c * _0x363b2f;
              _0x117073[10] = _0x15689c * _0x114f3a;
            } else if (_0x5c1ab9.order === "ZXY") {
              _0x51df27 = _0x114f3a * _0x534638;
              _0x2d8f3c = _0x114f3a * _0x1440c7;
              _0x44ed60 = _0x41d270 * _0x534638;
              _0x9e64fd = _0x41d270 * _0x1440c7;
              _0x117073[0] = _0x51df27 - _0x9e64fd * _0x363b2f;
              _0x117073[4] = -_0x15689c * _0x1440c7;
              _0x117073[8] = _0x44ed60 + _0x2d8f3c * _0x363b2f;
              _0x117073[1] = _0x2d8f3c + _0x44ed60 * _0x363b2f;
              _0x117073[5] = _0x15689c * _0x534638;
              _0x117073[9] = _0x9e64fd - _0x51df27 * _0x363b2f;
              _0x117073[2] = -_0x15689c * _0x41d270;
              _0x117073[6] = _0x363b2f;
              _0x117073[10] = _0x15689c * _0x114f3a;
            } else if (_0x5c1ab9.order === "ZYX") {
              _0x44ed60 = _0x15689c * _0x534638;
              _0x9e64fd = _0x15689c * _0x1440c7;
              _0x39cfc9 = _0x363b2f * _0x534638;
              _0x51df27 = _0x363b2f * _0x1440c7;
              _0x117073[0] = _0x114f3a * _0x534638;
              _0x117073[4] = _0x39cfc9 * _0x41d270 - _0x9e64fd;
              _0x117073[8] = _0x44ed60 * _0x41d270 + _0x51df27;
              _0x117073[1] = _0x114f3a * _0x1440c7;
              _0x117073[5] = _0x51df27 * _0x41d270 + _0x44ed60;
              _0x117073[9] = _0x9e64fd * _0x41d270 - _0x39cfc9;
              _0x117073[2] = -_0x41d270;
              _0x117073[6] = _0x363b2f * _0x114f3a;
              _0x117073[10] = _0x15689c * _0x114f3a;
            } else if (_0x5c1ab9.order === "YZX") {
              _0xa5fe1b = _0x15689c * _0x114f3a;
              _0x39cfc9 = _0x15689c * _0x41d270;
              _0x1057bf = _0x363b2f * _0x114f3a;
              _0x2d841e = _0x363b2f * _0x41d270;
              _0x117073[0] = _0x114f3a * _0x534638;
              _0x117073[4] = _0x2d841e - _0xa5fe1b * _0x1440c7;
              _0x117073[8] = _0x1057bf * _0x1440c7 + _0x39cfc9;
              _0x117073[1] = _0x1440c7;
              _0x117073[5] = _0x15689c * _0x534638;
              _0x117073[9] = -_0x363b2f * _0x534638;
              _0x117073[2] = -_0x41d270 * _0x534638;
              _0x117073[6] = _0x39cfc9 * _0x1440c7 + _0x1057bf;
              _0x117073[10] = _0xa5fe1b - _0x2d841e * _0x1440c7;
            } else if (_0x5c1ab9.order === "XZY") {
              _0x1057bf = _0x15689c * _0x114f3a;
              _0xa5fe1b = _0x15689c * _0x41d270;
              _0x2d841e = _0x363b2f * _0x114f3a;
              _0x5c1ab9 = _0x363b2f * _0x41d270;
              _0x117073[0] = _0x114f3a * _0x534638;
              _0x117073[4] = -_0x1440c7;
              _0x117073[8] = _0x41d270 * _0x534638;
              _0x117073[1] = _0x1057bf * _0x1440c7 + _0x5c1ab9;
              _0x117073[5] = _0x15689c * _0x534638;
              _0x117073[9] = _0xa5fe1b * _0x1440c7 - _0x2d841e;
              _0x117073[2] = _0x2d841e * _0x1440c7 - _0xa5fe1b;
              _0x117073[6] = _0x363b2f * _0x534638;
              _0x117073[10] = _0x5c1ab9 * _0x1440c7 + _0x1057bf;
            }
            _0x117073[3] = 0;
            _0x117073[7] = 0;
            _0x117073[11] = 0;
            _0x117073[12] = 0;
            _0x117073[13] = 0;
            _0x117073[14] = 0;
            _0x117073[15] = 1;
            return this;
          }
          makeRotationFromQuaternion(_0x5679c9) {
            return this.compose(_0x731ec9, _0x5679c9, _0x24e137);
          }
          lookAt(_0x25e04d, _0x331358, _0x2a5a0a) {
            var _0x40360f;
            const _0xdc2652 = this.elements;
            _0x40360f = 11;
            _0x5253ae.subVectors(_0x25e04d, _0x331358);
            if (_0x5253ae.lengthSq() === 0) {
              _0x5253ae.z = 1;
            }
            _0x5253ae.normalize();
            _0x2f2e50.crossVectors(_0x2a5a0a, _0x5253ae);
            if (_0x2f2e50.lengthSq() === 0) {
              if (Math.abs(_0x2a5a0a.z) === 1) {
                _0x5253ae.x += 0.0001;
              } else {
                _0x5253ae.z += 0.0001;
              }
              _0x5253ae.normalize();
              _0x2f2e50.crossVectors(_0x2a5a0a, _0x5253ae);
            }
            _0x2f2e50.normalize();
            _0x543384.crossVectors(_0x5253ae, _0x2f2e50);
            _0xdc2652[0] = _0x2f2e50.x;
            _0xdc2652[4] = _0x543384.x;
            _0xdc2652[8] = _0x5253ae.x;
            _0xdc2652[1] = _0x2f2e50.y;
            _0xdc2652[5] = _0x543384.y;
            _0xdc2652[9] = _0x5253ae.y;
            _0xdc2652[2] = _0x2f2e50.z;
            _0xdc2652[6] = _0x543384.z;
            _0xdc2652[10] = _0x5253ae.z;
            return this;
          }
          multiply(_0x380a0c, _0xa21202) {
            if (_0xa21202 !== undefined) {
              return this.multiplyMatrices(_0x380a0c, _0xa21202);
            } else {
              return this.multiplyMatrices(this, _0x380a0c);
            }
          }
          premultiply(_0x4664b3) {
            return this.multiplyMatrices(_0x4664b3, this);
          }
          multiplyMatrices(_0x4edf01, _0x15f850) {
            var _0x51d66a = _0x4edf01.elements;
            var _0x4971a9 = _0x15f850.elements;
            var _0x266f88;
            const _0x2eb56b = this.elements;
            _0x266f88 = 9;
            var _0x4b64f2 = _0x51d66a[0];
            var _0x45f9d2 = _0x51d66a[4];
            var _0x558cbb = _0x51d66a[8];
            var _0x27c608 = _0x51d66a[12];
            var _0x1692e9 = _0x51d66a[1];
            var _0x444ebf = _0x51d66a[5];
            var _0x17cb3a = _0x51d66a[9];
            var _0x4a1fe1 = _0x51d66a[13];
            var _0x32c446 = _0x51d66a[2];
            var _0x2907fe = _0x51d66a[6];
            var _0x3e9b10 = _0x51d66a[10];
            var _0x1e4fcc = _0x51d66a[14];
            var _0x20ebf3 = _0x51d66a[3];
            var _0x32bafc = _0x51d66a[7];
            var _0x596035 = _0x51d66a[11];
            var _0x10bc74 = _0x51d66a[15];
            var _0x537806 = _0x4971a9[0];
            var _0x1db301 = _0x4971a9[4];
            var _0x1f83dd = _0x4971a9[8];
            var _0x46c9b5 = _0x4971a9[12];
            var _0x3f099a = _0x4971a9[1];
            var _0x312b23 = _0x4971a9[5];
            var _0x25c1fe = _0x4971a9[9];
            var _0x89b4bb = _0x4971a9[13];
            var _0x405171 = _0x4971a9[2];
            var _0x2dd6e9 = _0x4971a9[6];
            var _0x3c52b0 = _0x4971a9[10];
            var _0x5b17df = _0x4971a9[14];
            _0x4edf01 = _0x4971a9[3];
            _0x15f850 = _0x4971a9[7];
            _0x51d66a = _0x4971a9[11];
            _0x4971a9 = _0x4971a9[15];
            _0x2eb56b[0] = _0x4b64f2 * _0x537806 + _0x45f9d2 * _0x3f099a + _0x558cbb * _0x405171 + _0x27c608 * _0x4edf01;
            _0x2eb56b[4] = _0x4b64f2 * _0x1db301 + _0x45f9d2 * _0x312b23 + _0x558cbb * _0x2dd6e9 + _0x27c608 * _0x15f850;
            _0x2eb56b[8] = _0x4b64f2 * _0x1f83dd + _0x45f9d2 * _0x25c1fe + _0x558cbb * _0x3c52b0 + _0x27c608 * _0x51d66a;
            _0x2eb56b[12] = _0x4b64f2 * _0x46c9b5 + _0x45f9d2 * _0x89b4bb + _0x558cbb * _0x5b17df + _0x27c608 * _0x4971a9;
            _0x2eb56b[1] = _0x1692e9 * _0x537806 + _0x444ebf * _0x3f099a + _0x17cb3a * _0x405171 + _0x4a1fe1 * _0x4edf01;
            _0x2eb56b[5] = _0x1692e9 * _0x1db301 + _0x444ebf * _0x312b23 + _0x17cb3a * _0x2dd6e9 + _0x4a1fe1 * _0x15f850;
            _0x2eb56b[9] = _0x1692e9 * _0x1f83dd + _0x444ebf * _0x25c1fe + _0x17cb3a * _0x3c52b0 + _0x4a1fe1 * _0x51d66a;
            _0x2eb56b[13] = _0x1692e9 * _0x46c9b5 + _0x444ebf * _0x89b4bb + _0x17cb3a * _0x5b17df + _0x4a1fe1 * _0x4971a9;
            _0x2eb56b[2] = _0x32c446 * _0x537806 + _0x2907fe * _0x3f099a + _0x3e9b10 * _0x405171 + _0x1e4fcc * _0x4edf01;
            _0x2eb56b[6] = _0x32c446 * _0x1db301 + _0x2907fe * _0x312b23 + _0x3e9b10 * _0x2dd6e9 + _0x1e4fcc * _0x15f850;
            _0x2eb56b[10] = _0x32c446 * _0x1f83dd + _0x2907fe * _0x25c1fe + _0x3e9b10 * _0x3c52b0 + _0x1e4fcc * _0x51d66a;
            _0x2eb56b[14] = _0x32c446 * _0x46c9b5 + _0x2907fe * _0x89b4bb + _0x3e9b10 * _0x5b17df + _0x1e4fcc * _0x4971a9;
            _0x2eb56b[3] = _0x20ebf3 * _0x537806 + _0x32bafc * _0x3f099a + _0x596035 * _0x405171 + _0x10bc74 * _0x4edf01;
            _0x2eb56b[7] = _0x20ebf3 * _0x1db301 + _0x32bafc * _0x312b23 + _0x596035 * _0x2dd6e9 + _0x10bc74 * _0x15f850;
            _0x2eb56b[11] = _0x20ebf3 * _0x1f83dd + _0x32bafc * _0x25c1fe + _0x596035 * _0x3c52b0 + _0x10bc74 * _0x51d66a;
            _0x2eb56b[15] = _0x20ebf3 * _0x46c9b5 + _0x32bafc * _0x89b4bb + _0x596035 * _0x5b17df + _0x10bc74 * _0x4971a9;
            return this;
          }
          multiplyScalar(_0x320ef3) {
            const _0x565ebd = this.elements;
            _0x565ebd[0] *= _0x320ef3;
            _0x565ebd[4] *= _0x320ef3;
            _0x565ebd[8] *= _0x320ef3;
            _0x565ebd[12] *= _0x320ef3;
            _0x565ebd[1] *= _0x320ef3;
            _0x565ebd[5] *= _0x320ef3;
            _0x565ebd[9] *= _0x320ef3;
            _0x565ebd[13] *= _0x320ef3;
            _0x565ebd[2] *= _0x320ef3;
            _0x565ebd[6] *= _0x320ef3;
            _0x565ebd[10] *= _0x320ef3;
            _0x565ebd[14] *= _0x320ef3;
            _0x565ebd[3] *= _0x320ef3;
            _0x565ebd[7] *= _0x320ef3;
            _0x565ebd[11] *= _0x320ef3;
            _0x565ebd[15] *= _0x320ef3;
            return this;
          }
          determinant() {
            var _0xc88087 = this.elements;
            var _0x11576d = _0xc88087[0];
            var _0x5634af = _0xc88087[4];
            var _0x512896 = _0xc88087[8];
            var _0x431e04 = _0xc88087[12];
            var _0x462190 = _0xc88087[1];
            var _0x3058fb = _0xc88087[5];
            var _0x286603 = _0xc88087[9];
            var _0xe030db = _0xc88087[13];
            var _0x1a9d8e = _0xc88087[2];
            var _0xb4a9c = _0xc88087[6];
            var _0x32256e = _0xc88087[10];
            var _0x325e35 = _0xc88087[14];
            return _0xc88087[3] * (+_0x431e04 * _0x286603 * _0xb4a9c - _0x512896 * _0xe030db * _0xb4a9c - _0x431e04 * _0x3058fb * _0x32256e + _0x5634af * _0xe030db * _0x32256e + _0x512896 * _0x3058fb * _0x325e35 - _0x5634af * _0x286603 * _0x325e35) + _0xc88087[7] * (+_0x11576d * _0x286603 * _0x325e35 - _0x11576d * _0xe030db * _0x32256e + _0x431e04 * _0x462190 * _0x32256e - _0x512896 * _0x462190 * _0x325e35 + _0x512896 * _0xe030db * _0x1a9d8e - _0x431e04 * _0x286603 * _0x1a9d8e) + _0xc88087[11] * (+_0x11576d * _0xe030db * _0xb4a9c - _0x11576d * _0x3058fb * _0x325e35 - _0x431e04 * _0x462190 * _0xb4a9c + _0x5634af * _0x462190 * _0x325e35 + _0x431e04 * _0x3058fb * _0x1a9d8e - _0x5634af * _0xe030db * _0x1a9d8e) + _0xc88087[15] * (-_0x512896 * _0x3058fb * _0x1a9d8e - _0x11576d * _0x286603 * _0xb4a9c + _0x11576d * _0x3058fb * _0x32256e + _0x512896 * _0x462190 * _0xb4a9c - _0x5634af * _0x462190 * _0x32256e + _0x5634af * _0x286603 * _0x1a9d8e);
          }
          transpose() {
            const _0x579de5 = this.elements;
            var _0x35d009 = _0x579de5[1];
            _0x579de5[1] = _0x579de5[4];
            _0x579de5[4] = _0x35d009;
            _0x35d009 = _0x579de5[2];
            _0x579de5[2] = _0x579de5[8];
            _0x579de5[8] = _0x35d009;
            _0x35d009 = _0x579de5[6];
            _0x579de5[6] = _0x579de5[9];
            _0x579de5[9] = _0x35d009;
            _0x35d009 = _0x579de5[3];
            _0x579de5[3] = _0x579de5[12];
            _0x579de5[12] = _0x35d009;
            _0x35d009 = _0x579de5[7];
            _0x579de5[7] = _0x579de5[13];
            _0x579de5[13] = _0x35d009;
            _0x35d009 = _0x579de5[11];
            _0x579de5[11] = _0x579de5[14];
            _0x579de5[14] = _0x35d009;
            return this;
          }
          setPosition(_0x47f9db, _0x503fe8, _0x39a9c6) {
            const _0x69d613 = this.elements;
            if (_0x47f9db.isVector3) {
              _0x69d613[12] = _0x47f9db.x;
              _0x69d613[13] = _0x47f9db.y;
              _0x69d613[14] = _0x47f9db.z;
            } else {
              _0x69d613[12] = _0x47f9db;
              _0x69d613[13] = _0x503fe8;
              _0x69d613[14] = _0x39a9c6;
            }
            return this;
          }
          invert() {
            const _0x416f12 = this.elements;
            const _0x2f5aea = _0x416f12[0];
            const _0x1ea8aa = _0x416f12[1];
            const _0x33525f = _0x416f12[2];
            const _0xd30438 = _0x416f12[3];
            const _0x1d8c15 = _0x416f12[4];
            const _0x47bd97 = _0x416f12[5];
            const _0x59f485 = _0x416f12[6];
            const _0x1d9b77 = _0x416f12[7];
            const _0x3950c0 = _0x416f12[8];
            const _0x4c2f3e = _0x416f12[9];
            const _0x161fde = _0x416f12[10];
            const _0xab121b = _0x416f12[11];
            const _0x56bd77 = _0x416f12[12];
            const _0x532b6b = _0x416f12[13];
            const _0x542e08 = _0x416f12[14];
            const _0x1994c0 = _0x416f12[15];
            const _0x108163 = _0x4c2f3e * _0x542e08 * _0x1d9b77 - _0x532b6b * _0x161fde * _0x1d9b77 + _0x532b6b * _0x59f485 * _0xab121b - _0x47bd97 * _0x542e08 * _0xab121b - _0x4c2f3e * _0x59f485 * _0x1994c0 + _0x47bd97 * _0x161fde * _0x1994c0;
            const _0x5dc45c = _0x56bd77 * _0x161fde * _0x1d9b77 - _0x3950c0 * _0x542e08 * _0x1d9b77 - _0x56bd77 * _0x59f485 * _0xab121b + _0x1d8c15 * _0x542e08 * _0xab121b + _0x3950c0 * _0x59f485 * _0x1994c0 - _0x1d8c15 * _0x161fde * _0x1994c0;
            const _0x32f6ba = _0x3950c0 * _0x532b6b * _0x1d9b77 - _0x56bd77 * _0x4c2f3e * _0x1d9b77 + _0x56bd77 * _0x47bd97 * _0xab121b - _0x1d8c15 * _0x532b6b * _0xab121b - _0x3950c0 * _0x47bd97 * _0x1994c0 + _0x1d8c15 * _0x4c2f3e * _0x1994c0;
            const _0x300e69 = _0x56bd77 * _0x4c2f3e * _0x59f485 - _0x3950c0 * _0x532b6b * _0x59f485 - _0x56bd77 * _0x47bd97 * _0x161fde + _0x1d8c15 * _0x532b6b * _0x161fde + _0x3950c0 * _0x47bd97 * _0x542e08 - _0x1d8c15 * _0x4c2f3e * _0x542e08;
            var _0x5eb46e;
            var _0x2fb99f = _0x2f5aea * _0x108163 + _0x1ea8aa * _0x5dc45c + _0x33525f * _0x32f6ba + _0xd30438 * _0x300e69;
            _0x5eb46e = 3;
            if (_0x2fb99f == 0) {
              return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            } else {
              _0x2fb99f = 1 / _0x2fb99f;
              _0x416f12[0] = _0x108163 * _0x2fb99f;
              _0x416f12[1] = (_0x532b6b * _0x161fde * _0xd30438 - _0x4c2f3e * _0x542e08 * _0xd30438 - _0x532b6b * _0x33525f * _0xab121b + _0x1ea8aa * _0x542e08 * _0xab121b + _0x4c2f3e * _0x33525f * _0x1994c0 - _0x1ea8aa * _0x161fde * _0x1994c0) * _0x2fb99f;
              _0x416f12[2] = (_0x47bd97 * _0x542e08 * _0xd30438 - _0x532b6b * _0x59f485 * _0xd30438 + _0x532b6b * _0x33525f * _0x1d9b77 - _0x1ea8aa * _0x542e08 * _0x1d9b77 - _0x47bd97 * _0x33525f * _0x1994c0 + _0x1ea8aa * _0x59f485 * _0x1994c0) * _0x2fb99f;
              _0x416f12[3] = (_0x4c2f3e * _0x59f485 * _0xd30438 - _0x47bd97 * _0x161fde * _0xd30438 - _0x4c2f3e * _0x33525f * _0x1d9b77 + _0x1ea8aa * _0x161fde * _0x1d9b77 + _0x47bd97 * _0x33525f * _0xab121b - _0x1ea8aa * _0x59f485 * _0xab121b) * _0x2fb99f;
              _0x416f12[4] = _0x5dc45c * _0x2fb99f;
              _0x416f12[5] = (_0x3950c0 * _0x542e08 * _0xd30438 - _0x56bd77 * _0x161fde * _0xd30438 + _0x56bd77 * _0x33525f * _0xab121b - _0x2f5aea * _0x542e08 * _0xab121b - _0x3950c0 * _0x33525f * _0x1994c0 + _0x2f5aea * _0x161fde * _0x1994c0) * _0x2fb99f;
              _0x416f12[6] = (_0x56bd77 * _0x59f485 * _0xd30438 - _0x1d8c15 * _0x542e08 * _0xd30438 - _0x56bd77 * _0x33525f * _0x1d9b77 + _0x2f5aea * _0x542e08 * _0x1d9b77 + _0x1d8c15 * _0x33525f * _0x1994c0 - _0x2f5aea * _0x59f485 * _0x1994c0) * _0x2fb99f;
              _0x416f12[7] = (_0x1d8c15 * _0x161fde * _0xd30438 - _0x3950c0 * _0x59f485 * _0xd30438 + _0x3950c0 * _0x33525f * _0x1d9b77 - _0x2f5aea * _0x161fde * _0x1d9b77 - _0x1d8c15 * _0x33525f * _0xab121b + _0x2f5aea * _0x59f485 * _0xab121b) * _0x2fb99f;
              _0x416f12[8] = _0x32f6ba * _0x2fb99f;
              _0x416f12[9] = (_0x56bd77 * _0x4c2f3e * _0xd30438 - _0x3950c0 * _0x532b6b * _0xd30438 - _0x56bd77 * _0x1ea8aa * _0xab121b + _0x2f5aea * _0x532b6b * _0xab121b + _0x3950c0 * _0x1ea8aa * _0x1994c0 - _0x2f5aea * _0x4c2f3e * _0x1994c0) * _0x2fb99f;
              _0x416f12[10] = (_0x1d8c15 * _0x532b6b * _0xd30438 - _0x56bd77 * _0x47bd97 * _0xd30438 + _0x56bd77 * _0x1ea8aa * _0x1d9b77 - _0x2f5aea * _0x532b6b * _0x1d9b77 - _0x1d8c15 * _0x1ea8aa * _0x1994c0 + _0x2f5aea * _0x47bd97 * _0x1994c0) * _0x2fb99f;
              _0x416f12[11] = (_0x3950c0 * _0x47bd97 * _0xd30438 - _0x1d8c15 * _0x4c2f3e * _0xd30438 - _0x3950c0 * _0x1ea8aa * _0x1d9b77 + _0x2f5aea * _0x4c2f3e * _0x1d9b77 + _0x1d8c15 * _0x1ea8aa * _0xab121b - _0x2f5aea * _0x47bd97 * _0xab121b) * _0x2fb99f;
              _0x416f12[12] = _0x300e69 * _0x2fb99f;
              _0x416f12[13] = (_0x3950c0 * _0x532b6b * _0x33525f - _0x56bd77 * _0x4c2f3e * _0x33525f + _0x56bd77 * _0x1ea8aa * _0x161fde - _0x2f5aea * _0x532b6b * _0x161fde - _0x3950c0 * _0x1ea8aa * _0x542e08 + _0x2f5aea * _0x4c2f3e * _0x542e08) * _0x2fb99f;
              _0x416f12[14] = (_0x56bd77 * _0x47bd97 * _0x33525f - _0x1d8c15 * _0x532b6b * _0x33525f - _0x56bd77 * _0x1ea8aa * _0x59f485 + _0x2f5aea * _0x532b6b * _0x59f485 + _0x1d8c15 * _0x1ea8aa * _0x542e08 - _0x2f5aea * _0x47bd97 * _0x542e08) * _0x2fb99f;
              _0x416f12[15] = (_0x1d8c15 * _0x4c2f3e * _0x33525f - _0x3950c0 * _0x47bd97 * _0x33525f + _0x3950c0 * _0x1ea8aa * _0x59f485 - _0x2f5aea * _0x4c2f3e * _0x59f485 - _0x1d8c15 * _0x1ea8aa * _0x161fde + _0x2f5aea * _0x47bd97 * _0x161fde) * _0x2fb99f;
              return this;
            }
          }
          scale(_0x23ed5a) {
            var _0x24129c;
            const _0x326854 = this.elements;
            _0x24129c = "gbdl";
            var _0x4141db = _0x23ed5a.x;
            var _0x17e4bd = _0x23ed5a.y;
            _0x23ed5a = _0x23ed5a.z;
            _0x326854[0] *= _0x4141db;
            _0x326854[4] *= _0x17e4bd;
            _0x326854[8] *= _0x23ed5a;
            _0x326854[1] *= _0x4141db;
            _0x326854[5] *= _0x17e4bd;
            _0x326854[9] *= _0x23ed5a;
            _0x326854[2] *= _0x4141db;
            _0x326854[6] *= _0x17e4bd;
            _0x326854[10] *= _0x23ed5a;
            _0x326854[3] *= _0x4141db;
            _0x326854[7] *= _0x17e4bd;
            _0x326854[11] *= _0x23ed5a;
            return this;
          }
          getMaxScaleOnAxis() {
            var _0x4821a9 = (_0x2fe119 = this.elements)[0] * _0x2fe119[0] + _0x2fe119[1] * _0x2fe119[1] + _0x2fe119[2] * _0x2fe119[2];
            var _0x25935c = _0x2fe119[4] * _0x2fe119[4] + _0x2fe119[5] * _0x2fe119[5] + _0x2fe119[6] * _0x2fe119[6];
            var _0x2fe119 = _0x2fe119[8] * _0x2fe119[8] + _0x2fe119[9] * _0x2fe119[9] + _0x2fe119[10] * _0x2fe119[10];
            return Math.sqrt(Math.max(_0x4821a9, _0x25935c, _0x2fe119));
          }
          makeTranslation(_0x38c5f1, _0x244ee2, _0x4981a4) {
            this.set(1, 0, 0, _0x38c5f1, 0, 1, 0, _0x244ee2, 0, 0, 1, _0x4981a4, 0, 0, 0, 1);
            return this;
          }
          makeRotationX(_0x2b126b) {
            var _0x1fbddd = Math.cos(_0x2b126b);
            _0x2b126b = Math.sin(_0x2b126b);
            this.set(1, 0, 0, 0, 0, _0x1fbddd, -_0x2b126b, 0, 0, _0x2b126b, _0x1fbddd, 0, 0, 0, 0, 1);
            return this;
          }
          makeRotationY(_0x23e851) {
            var _0x4b2ef1;
            var _0x359514 = Math.cos(_0x23e851);
            _0x4b2ef1 = 4;
            _0x23e851 = Math.sin(_0x23e851);
            this.set(_0x359514, 0, _0x23e851, 0, 0, 1, 0, 0, -_0x23e851, 0, _0x359514, 0, 0, 0, 0, 1);
            return this;
          }
          makeRotationZ(_0x3eb930) {
            var _0x423b87 = Math.cos(_0x3eb930);
            _0x3eb930 = Math.sin(_0x3eb930);
            this.set(_0x423b87, -_0x3eb930, 0, 0, _0x3eb930, _0x423b87, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
            return this;
          }
          makeRotationAxis(_0x2e36e3, _0x4bf268) {
            var _0x36b21f = Math.cos(_0x4bf268);
            var _0x1e6bd1 = Math.sin(_0x4bf268);
            var _0x3c1364 = 1 - _0x36b21f;
            var _0x243f4c = _0x2e36e3.x;
            var _0xc4ce81 = _0x2e36e3.y;
            var _0x1b53e5 = _0x2e36e3.z;
            _0x4bf268 = _0x3c1364 * _0x243f4c;
            _0x2e36e3 = _0x3c1364 * _0xc4ce81;
            this.set(_0x4bf268 * _0x243f4c + _0x36b21f, _0x4bf268 * _0xc4ce81 - _0x1e6bd1 * _0x1b53e5, _0x4bf268 * _0x1b53e5 + _0x1e6bd1 * _0xc4ce81, 0, _0x4bf268 * _0xc4ce81 + _0x1e6bd1 * _0x1b53e5, _0x2e36e3 * _0xc4ce81 + _0x36b21f, _0x2e36e3 * _0x1b53e5 - _0x1e6bd1 * _0x243f4c, 0, _0x4bf268 * _0x1b53e5 - _0x1e6bd1 * _0xc4ce81, _0x2e36e3 * _0x1b53e5 + _0x1e6bd1 * _0x243f4c, _0x3c1364 * _0x1b53e5 * _0x1b53e5 + _0x36b21f, 0, 0, 0, 0, 1);
            return this;
          }
          makeScale(_0x319caf, _0x52c225, _0x345be3) {
            this.set(_0x319caf, 0, 0, 0, 0, _0x52c225, 0, 0, 0, 0, _0x345be3, 0, 0, 0, 0, 1);
            return this;
          }
          makeShear(_0x3d2c46, _0x33f9ae, _0x5d0d96, _0x562721, _0x71be9c, _0x3d27b3) {
            this.set(1, _0x5d0d96, _0x71be9c, 0, _0x3d2c46, 1, _0x3d27b3, 0, _0x33f9ae, _0x562721, 1, 0, 0, 0, 0, 1);
            return this;
          }
          compose(_0x3bb267, _0x4f8f62, _0x1c334e) {
            var _0x215654 = 2;
            const _0x50f208 = this.elements;
            _0x215654 = "okpd";
            var _0x53d262 = _0x4f8f62._x;
            var _0x5e9135 = _0x4f8f62._y;
            var _0x3110cf = _0x4f8f62._z;
            var _0x16a6ea = _0x4f8f62._w;
            var _0x13d4d8 = _0x53d262 * (_0x87d66c = _0x53d262 + _0x53d262);
            var _0x2fff3c = _0x53d262 * (_0x438bb3 = _0x5e9135 + _0x5e9135);
            var _0xb5d53d = _0x53d262 * (_0x589e9b = _0x3110cf + _0x3110cf);
            _0x4f8f62 = _0x5e9135 * _0x438bb3;
            _0x53d262 = _0x5e9135 * _0x589e9b;
            _0x5e9135 = _0x3110cf * _0x589e9b;
            _0x3110cf = _0x16a6ea * _0x87d66c;
            var _0x87d66c = _0x16a6ea * _0x438bb3;
            var _0x438bb3 = _0x16a6ea * _0x589e9b;
            _0x16a6ea = _0x1c334e.x;
            var _0x589e9b = _0x1c334e.y;
            _0x1c334e = _0x1c334e.z;
            _0x50f208[0] = (1 - (_0x4f8f62 + _0x5e9135)) * _0x16a6ea;
            _0x50f208[1] = (_0x2fff3c + _0x438bb3) * _0x16a6ea;
            _0x50f208[2] = (_0xb5d53d - _0x87d66c) * _0x16a6ea;
            _0x50f208[3] = 0;
            _0x50f208[4] = (_0x2fff3c - _0x438bb3) * _0x589e9b;
            _0x50f208[5] = (1 - (_0x13d4d8 + _0x5e9135)) * _0x589e9b;
            _0x50f208[6] = (_0x53d262 + _0x3110cf) * _0x589e9b;
            _0x50f208[7] = 0;
            _0x50f208[8] = (_0xb5d53d + _0x87d66c) * _0x1c334e;
            _0x50f208[9] = (_0x53d262 - _0x3110cf) * _0x1c334e;
            _0x50f208[10] = (1 - (_0x13d4d8 + _0x4f8f62)) * _0x1c334e;
            _0x50f208[11] = 0;
            _0x50f208[12] = _0x3bb267.x;
            _0x50f208[13] = _0x3bb267.y;
            _0x50f208[14] = _0x3bb267.z;
            _0x50f208[15] = 1;
            return this;
          }
          decompose(_0x322daa, _0x2034e5, _0x2ab3b1) {
            var _0x399afc = this.elements;
            let _0x1c863a = _0x47d6b3.set(_0x399afc[0], _0x399afc[1], _0x399afc[2]).length();
            var _0x33834e = _0x47d6b3.set(_0x399afc[4], _0x399afc[5], _0x399afc[6]).length();
            var _0xb71b36 = _0x47d6b3.set(_0x399afc[8], _0x399afc[9], _0x399afc[10]).length();
            if (this.determinant() < 0) {
              _0x1c863a = -_0x1c863a;
            }
            _0x322daa.x = _0x399afc[12];
            _0x322daa.y = _0x399afc[13];
            _0x322daa.z = _0x399afc[14];
            _0x592021.copy(this);
            var _0x37dd2c = 1 / _0x1c863a;
            _0x322daa = 1 / _0x33834e;
            _0x399afc = 1 / _0xb71b36;
            _0x592021.elements[0] *= _0x37dd2c;
            _0x592021.elements[1] *= _0x37dd2c;
            _0x592021.elements[2] *= _0x37dd2c;
            _0x592021.elements[4] *= _0x322daa;
            _0x592021.elements[5] *= _0x322daa;
            _0x592021.elements[6] *= _0x322daa;
            _0x592021.elements[8] *= _0x399afc;
            _0x592021.elements[9] *= _0x399afc;
            _0x592021.elements[10] *= _0x399afc;
            _0x2034e5.setFromRotationMatrix(_0x592021);
            _0x2ab3b1.x = _0x1c863a;
            _0x2ab3b1.y = _0x33834e;
            _0x2ab3b1.z = _0xb71b36;
            return this;
          }
          makePerspective(_0x3cf03a, _0x57bb7e, _0x176404, _0x4d1e91, _0xa4116d, _0x44b75e) {
            var _0x9218fd;
            const _0x211855 = this.elements;
            _0x9218fd = "mncn";
            var _0xeb3086 = _0xa4116d * 2 / (_0x176404 - _0x4d1e91);
            var _0x387aa2 = (_0x57bb7e + _0x3cf03a) / (_0x57bb7e - _0x3cf03a);
            _0x176404 = (_0x176404 + _0x4d1e91) / (_0x176404 - _0x4d1e91);
            _0x4d1e91 = -(_0x44b75e + _0xa4116d) / (_0x44b75e - _0xa4116d);
            _0x44b75e = _0x44b75e * -2 * _0xa4116d / (_0x44b75e - _0xa4116d);
            _0x211855[0] = _0xa4116d * 2 / (_0x57bb7e - _0x3cf03a);
            _0x211855[4] = 0;
            _0x211855[8] = _0x387aa2;
            _0x211855[12] = 0;
            _0x211855[1] = 0;
            _0x211855[5] = _0xeb3086;
            _0x211855[9] = _0x176404;
            _0x211855[13] = 0;
            _0x211855[2] = 0;
            _0x211855[6] = 0;
            _0x211855[10] = _0x4d1e91;
            _0x211855[14] = _0x44b75e;
            _0x211855[3] = 0;
            _0x211855[7] = 0;
            _0x211855[11] = -1;
            _0x211855[15] = 0;
            return this;
          }
          makeOrthographic(_0x3ac9d0, _0x669936, _0xe49696, _0x2b35f1, _0x35bafa, _0x3d28f7) {
            var _0x1494b3 = 9;
            const _0x34d8f5 = this.elements;
            _0x1494b3 = 13;
            var _0x2852e4 = 1 / (_0x669936 - _0x3ac9d0);
            var _0xe8dabb = 1 / (_0xe49696 - _0x2b35f1);
            var _0x46f9cc = 1 / (_0x3d28f7 - _0x35bafa);
            _0x3ac9d0 = (_0x669936 + _0x3ac9d0) * _0x2852e4;
            _0x2b35f1 = (_0xe49696 + _0x2b35f1) * _0xe8dabb;
            _0x35bafa = (_0x3d28f7 + _0x35bafa) * _0x46f9cc;
            _0x34d8f5[0] = _0x2852e4 * 2;
            _0x34d8f5[4] = 0;
            _0x34d8f5[8] = 0;
            _0x34d8f5[12] = -_0x3ac9d0;
            _0x34d8f5[1] = 0;
            _0x34d8f5[5] = _0xe8dabb * 2;
            _0x34d8f5[9] = 0;
            _0x34d8f5[13] = -_0x2b35f1;
            _0x34d8f5[2] = 0;
            _0x34d8f5[6] = 0;
            _0x34d8f5[10] = _0x46f9cc * -2;
            _0x34d8f5[14] = -_0x35bafa;
            _0x34d8f5[3] = 0;
            _0x34d8f5[7] = 0;
            _0x34d8f5[11] = 0;
            _0x34d8f5[15] = 1;
            return this;
          }
          equals(_0x3bb53b) {
            var _0x1c7ca0 = this.elements;
            var _0x872d5f = _0x3bb53b.elements;
            for (let _0x336667 = 0; _0x336667 < 16; _0x336667++) {
              if (_0x1c7ca0[_0x336667] !== _0x872d5f[_0x336667]) {
                return false;
              }
            }
            return true;
          }
          fromArray(_0x1bfe48, _0x5e7897 = 0) {
            for (let _0x57a29e = 0; _0x57a29e < 16; _0x57a29e++) {
              this.elements[_0x57a29e] = _0x1bfe48[_0x57a29e + _0x5e7897];
            }
            return this;
          }
          toArray(_0x55a0db = [], _0x14f5bd = 0) {
            var _0xcbf4fe = 13;
            var _0x1c5afc = this.elements;
            _0xcbf4fe = 14;
            _0x55a0db[_0x14f5bd] = _0x1c5afc[0];
            _0x55a0db[_0x14f5bd + 1] = _0x1c5afc[1];
            _0x55a0db[_0x14f5bd + 2] = _0x1c5afc[2];
            _0x55a0db[_0x14f5bd + 3] = _0x1c5afc[3];
            _0x55a0db[_0x14f5bd + 4] = _0x1c5afc[4];
            _0x55a0db[_0x14f5bd + 5] = _0x1c5afc[5];
            _0x55a0db[_0x14f5bd + 6] = _0x1c5afc[6];
            _0x55a0db[_0x14f5bd + 7] = _0x1c5afc[7];
            _0x55a0db[_0x14f5bd + 8] = _0x1c5afc[8];
            _0x55a0db[_0x14f5bd + 9] = _0x1c5afc[9];
            _0x55a0db[_0x14f5bd + 10] = _0x1c5afc[10];
            _0x55a0db[_0x14f5bd + 11] = _0x1c5afc[11];
            _0x55a0db[_0x14f5bd + 12] = _0x1c5afc[12];
            _0x55a0db[_0x14f5bd + 13] = _0x1c5afc[13];
            _0x55a0db[_0x14f5bd + 14] = _0x1c5afc[14];
            _0x55a0db[_0x14f5bd + 15] = _0x1c5afc[15];
            return _0x55a0db;
          }
        }
        _0x33b2c9.prototype.isMatrix4 = true;
        const _0x47d6b3 = new _0x1d20ef();
        const _0x592021 = new _0x33b2c9();
        const _0x731ec9 = new _0x1d20ef(0, 0, 0);
        const _0x24e137 = new _0x1d20ef(1, 1, 1);
        const _0x2f2e50 = new _0x1d20ef();
        const _0x543384 = new _0x1d20ef();
        const _0x5253ae = new _0x1d20ef();
        const _0x208510 = new _0x33b2c9();
        const _0xc09bab = new _0x53f372();
        class _0x609aab {
          constructor(_0x25848e = 0, _0x3d941e = 0, _0x3fabfd = 0, _0x440afb = _0x609aab.DefaultOrder) {
            this._x = _0x25848e;
            this._y = _0x3d941e;
            this._z = _0x3fabfd;
            this._order = _0x440afb;
          }
          get x() {
            return this._x;
          }
          set x(_0x44f95e) {
            this._x = _0x44f95e;
            this._onChangeCallback();
          }
          get y() {
            return this._y;
          }
          set y(_0x5809bc) {
            this._y = _0x5809bc;
            this._onChangeCallback();
          }
          get z() {
            return this._z;
          }
          set z(_0x20c4c9) {
            this._z = _0x20c4c9;
            this._onChangeCallback();
          }
          get order() {
            return this._order;
          }
          set order(_0x516913) {
            this._order = _0x516913;
            this._onChangeCallback();
          }
          set(_0x4a7438, _0x34730e, _0x490f2e, _0x51f83a = this._order) {
            this._x = _0x4a7438;
            this._y = _0x34730e;
            this._z = _0x490f2e;
            this._order = _0x51f83a;
            this._onChangeCallback();
            return this;
          }
          clone() {
            return new this.constructor(this._x, this._y, this._z, this._order);
          }
          copy(_0x11ee14) {
            this._x = _0x11ee14._x;
            this._y = _0x11ee14._y;
            this._z = _0x11ee14._z;
            this._order = _0x11ee14._order;
            this._onChangeCallback();
            return this;
          }
          setFromRotationMatrix(_0x3c17be, _0x490e2b = this._order, _0x1d8f91 = true) {
            var _0x52e595 = (_0x3c17be = _0x3c17be.elements)[0];
            var _0x54137c = _0x3c17be[4];
            var _0x193147 = _0x3c17be[8];
            var _0x2fd82a = _0x3c17be[1];
            var _0x95039f = _0x3c17be[5];
            var _0x3cf226 = _0x3c17be[9];
            var _0x478a51 = _0x3c17be[2];
            var _0x521441 = _0x3c17be[6];
            var _0x2547bd = _0x3c17be[10];
            switch (_0x490e2b) {
              case "XYZ":
                this._y = Math.asin(_0x6865cb(_0x193147, -1, 1));
                if (Math.abs(_0x193147) < 0.9999999) {
                  this._x = Math.atan2(-_0x3cf226, _0x2547bd);
                  this._z = Math.atan2(-_0x54137c, _0x52e595);
                } else {
                  this._x = Math.atan2(_0x521441, _0x95039f);
                  this._z = 0;
                }
                break;
              case "YXZ":
                this._x = Math.asin(-_0x6865cb(_0x3cf226, -1, 1));
                if (Math.abs(_0x3cf226) < 0.9999999) {
                  this._y = Math.atan2(_0x193147, _0x2547bd);
                  this._z = Math.atan2(_0x2fd82a, _0x95039f);
                } else {
                  this._y = Math.atan2(-_0x478a51, _0x52e595);
                  this._z = 0;
                }
                break;
              case "ZXY":
                this._x = Math.asin(_0x6865cb(_0x521441, -1, 1));
                if (Math.abs(_0x521441) < 0.9999999) {
                  this._y = Math.atan2(-_0x478a51, _0x2547bd);
                  this._z = Math.atan2(-_0x54137c, _0x95039f);
                } else {
                  this._y = 0;
                  this._z = Math.atan2(_0x2fd82a, _0x52e595);
                }
                break;
              case "ZYX":
                this._y = Math.asin(-_0x6865cb(_0x478a51, -1, 1));
                if (Math.abs(_0x478a51) < 0.9999999) {
                  this._x = Math.atan2(_0x521441, _0x2547bd);
                  this._z = Math.atan2(_0x2fd82a, _0x52e595);
                } else {
                  this._x = 0;
                  this._z = Math.atan2(-_0x54137c, _0x95039f);
                }
                break;
              case "YZX":
                this._z = Math.asin(_0x6865cb(_0x2fd82a, -1, 1));
                if (Math.abs(_0x2fd82a) < 0.9999999) {
                  this._x = Math.atan2(-_0x3cf226, _0x95039f);
                  this._y = Math.atan2(-_0x478a51, _0x52e595);
                } else {
                  this._x = 0;
                  this._y = Math.atan2(_0x193147, _0x2547bd);
                }
                break;
              case "XZY":
                this._z = Math.asin(-_0x6865cb(_0x54137c, -1, 1));
                if (Math.abs(_0x54137c) < 0.9999999) {
                  this._x = Math.atan2(_0x521441, _0x95039f);
                  this._y = Math.atan2(_0x193147, _0x52e595);
                } else {
                  this._x = Math.atan2(-_0x3cf226, _0x2547bd);
                  this._y = 0;
                }
            }
            this._order = _0x490e2b;
            if (_0x1d8f91 === true) {
              this._onChangeCallback();
            }
            return this;
          }
          setFromQuaternion(_0x2389cf, _0x1b8980, _0x1c77e2) {
            _0x208510.makeRotationFromQuaternion(_0x2389cf);
            return this.setFromRotationMatrix(_0x208510, _0x1b8980, _0x1c77e2);
          }
          setFromVector3(_0x27655e, _0x3a9a90 = this._order) {
            return this.set(_0x27655e.x, _0x27655e.y, _0x27655e.z, _0x3a9a90);
          }
          reorder(_0x2078d0) {
            _0xc09bab.setFromEuler(this);
            return this.setFromQuaternion(_0xc09bab, _0x2078d0);
          }
          equals(_0x194c5f) {
            return _0x194c5f._x === this._x && _0x194c5f._y === this._y && _0x194c5f._z === this._z && _0x194c5f._order === this._order;
          }
          fromArray(_0x399f62) {
            this._x = _0x399f62[0];
            this._y = _0x399f62[1];
            this._z = _0x399f62[2];
            if (_0x399f62[3] !== undefined) {
              this._order = _0x399f62[3];
            }
            this._onChangeCallback();
            return this;
          }
          toArray(_0x4d5b4d = [], _0x3f3293 = 0) {
            _0x4d5b4d[_0x3f3293] = this._x;
            _0x4d5b4d[_0x3f3293 + 1] = this._y;
            _0x4d5b4d[_0x3f3293 + 2] = this._z;
            _0x4d5b4d[_0x3f3293 + 3] = this._order;
            return _0x4d5b4d;
          }
          toVector3(_0x1aaba4) {
            if (_0x1aaba4) {
              return _0x1aaba4.set(this._x, this._y, this._z);
            } else {
              return new _0x1d20ef(this._x, this._y, this._z);
            }
          }
          _onChange(_0x5c92b4) {
            this._onChangeCallback = _0x5c92b4;
            return this;
          }
          _onChangeCallback() {}
        }
        _0x609aab.prototype.isEuler = true;
        _0x609aab.DefaultOrder = "XYZ";
        _0x609aab.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];
        class _0x10d507 {
          constructor() {
            this.mask = 1;
          }
          set(_0x5160f2) {
            this.mask = (1 << _0x5160f2 | 0) >>> 0;
          }
          enable(_0x3700d2) {
            this.mask |= 1 << _0x3700d2 | 0;
          }
          enableAll() {
            this.mask = -1;
          }
          toggle(_0x8d6514) {
            this.mask ^= 1 << _0x8d6514 | 0;
          }
          disable(_0x205790) {
            this.mask &= ~(1 << _0x205790 | 0);
          }
          disableAll() {
            this.mask = 0;
          }
          test(_0x4802a2) {
            return (this.mask & _0x4802a2.mask) != 0;
          }
          isEnabled(_0x1c0983) {
            return (this.mask & (1 << _0x1c0983 | 0)) != 0;
          }
        }
        var _0x5f2ddc;
        let _0xb28349 = 0;
        _0x5f2ddc = 4;
        const _0x5a267a = new _0x1d20ef();
        const _0x5297c4 = new _0x53f372();
        const _0x1e1b87 = new _0x33b2c9();
        const _0x3654c7 = new _0x1d20ef();
        const _0xc43820 = new _0x1d20ef();
        const _0x3a7045 = new _0x1d20ef();
        const _0x40dc0b = new _0x53f372();
        const _0x1890a6 = new _0x1d20ef(1, 0, 0);
        const _0x1a08dc = new _0x1d20ef(0, 1, 0);
        const _0x5e1a55 = new _0x1d20ef(0, 0, 1);
        const _0x5c8220 = {
          type: "added"
        };
        const _0xa0ed02 = {
          type: "removed"
        };
        class _0x3b73b1 extends _0x3a55ab {
          constructor() {
            super();
            Object.defineProperty(this, "id", {
              value: _0xb28349++
            });
            this.uuid = _0x2b30b2();
            this.name = "";
            this.type = "Object3D";
            this.parent = null;
            this.children = [];
            this.up = _0x3b73b1.DefaultUp.clone();
            var _0x403b38 = 9;
            var _0x45287d = new _0x1d20ef();
            _0x403b38 = "bohl";
            const _0x4ff50d = new _0x609aab();
            const _0x520986 = new _0x53f372();
            var _0x14d1f4 = 12;
            var _0x236d21 = new _0x1d20ef(1, 1, 1);
            _0x14d1f4 = 2;
            _0x4ff50d._onChange(function () {
              _0x520986.setFromEuler(_0x4ff50d, false);
            });
            _0x520986._onChange(function () {
              _0x4ff50d.setFromQuaternion(_0x520986, undefined, false);
            });
            Object.defineProperties(this, {
              position: {
                configurable: true,
                enumerable: true,
                value: _0x45287d
              },
              rotation: {
                configurable: true,
                enumerable: true,
                value: _0x4ff50d
              },
              quaternion: {
                configurable: true,
                enumerable: true,
                value: _0x520986
              },
              scale: {
                configurable: true,
                enumerable: true,
                value: _0x236d21
              },
              modelViewMatrix: {
                value: new _0x33b2c9()
              },
              normalMatrix: {
                value: new _0x30cf5e()
              }
            });
            this.matrix = new _0x33b2c9();
            this.matrixWorld = new _0x33b2c9();
            this.matrixAutoUpdate = _0x3b73b1.DefaultMatrixAutoUpdate;
            this.matrixWorldNeedsUpdate = false;
            this.layers = new _0x10d507();
            this.visible = true;
            this.castShadow = false;
            this.receiveShadow = false;
            this.frustumCulled = true;
            this.renderOrder = 0;
            this.animations = [];
            this.userData = {};
          }
          onBeforeRender() {}
          onAfterRender() {}
          applyMatrix4(_0x37f1b8) {
            if (this.matrixAutoUpdate) {
              this.updateMatrix();
            }
            this.matrix.premultiply(_0x37f1b8);
            this.matrix.decompose(this.position, this.quaternion, this.scale);
          }
          applyQuaternion(_0x20d091) {
            this.quaternion.premultiply(_0x20d091);
            return this;
          }
          setRotationFromAxisAngle(_0x342b42, _0x195954) {
            this.quaternion.setFromAxisAngle(_0x342b42, _0x195954);
          }
          setRotationFromEuler(_0x211dfd) {
            this.quaternion.setFromEuler(_0x211dfd, true);
          }
          setRotationFromMatrix(_0x1980c2) {
            this.quaternion.setFromRotationMatrix(_0x1980c2);
          }
          setRotationFromQuaternion(_0x2b1d95) {
            this.quaternion.copy(_0x2b1d95);
          }
          rotateOnAxis(_0x38ffaf, _0x236257) {
            _0x5297c4.setFromAxisAngle(_0x38ffaf, _0x236257);
            this.quaternion.multiply(_0x5297c4);
            return this;
          }
          rotateOnWorldAxis(_0xe29f3b, _0x389afa) {
            _0x5297c4.setFromAxisAngle(_0xe29f3b, _0x389afa);
            this.quaternion.premultiply(_0x5297c4);
            return this;
          }
          rotateX(_0x46aee0) {
            return this.rotateOnAxis(_0x1890a6, _0x46aee0);
          }
          rotateY(_0x90a53f) {
            return this.rotateOnAxis(_0x1a08dc, _0x90a53f);
          }
          rotateZ(_0x959bd2) {
            return this.rotateOnAxis(_0x5e1a55, _0x959bd2);
          }
          translateOnAxis(_0x34f415, _0x3d17af) {
            _0x5a267a.copy(_0x34f415).applyQuaternion(this.quaternion);
            this.position.add(_0x5a267a.multiplyScalar(_0x3d17af));
            return this;
          }
          translateX(_0x70a40d) {
            return this.translateOnAxis(_0x1890a6, _0x70a40d);
          }
          translateY(_0x4dfe12) {
            return this.translateOnAxis(_0x1a08dc, _0x4dfe12);
          }
          translateZ(_0x25aa5b) {
            return this.translateOnAxis(_0x5e1a55, _0x25aa5b);
          }
          localToWorld(_0x2456a6) {
            return _0x2456a6.applyMatrix4(this.matrixWorld);
          }
          worldToLocal(_0x2205e4) {
            return _0x2205e4.applyMatrix4(_0x1e1b87.copy(this.matrixWorld).invert());
          }
          lookAt(_0x1850b1, _0x3b7461, _0x32b33b) {
            if (_0x1850b1.isVector3) {
              _0x3654c7.copy(_0x1850b1);
            } else {
              _0x3654c7.set(_0x1850b1, _0x3b7461, _0x32b33b);
            }
            _0x32b33b = this.parent;
            this.updateWorldMatrix(true, false);
            _0xc43820.setFromMatrixPosition(this.matrixWorld);
            if (this.isCamera || this.isLight) {
              _0x1e1b87.lookAt(_0xc43820, _0x3654c7, this.up);
            } else {
              _0x1e1b87.lookAt(_0x3654c7, _0xc43820, this.up);
            }
            this.quaternion.setFromRotationMatrix(_0x1e1b87);
            if (_0x32b33b) {
              _0x1e1b87.extractRotation(_0x32b33b.matrixWorld);
              _0x5297c4.setFromRotationMatrix(_0x1e1b87);
              this.quaternion.premultiply(_0x5297c4.invert());
            }
          }
          add(_0x118206) {
            if (arguments.length > 1) {
              for (let _0x57ed7e = 0; _0x57ed7e < arguments.length; _0x57ed7e++) {
                this.add(arguments[_0x57ed7e]);
              }
              return this;
            }
            if (!(_0x118206 === this)) {
              if (_0x118206 && _0x118206.isObject3D) {
                if (_0x118206.parent !== null) {
                  _0x118206.parent.remove(_0x118206);
                }
                (_0x118206.parent = this).children.push(_0x118206);
                _0x118206.dispatchEvent(_0x5c8220);
              }
            }
            return this;
          }
          remove(_0x29b73f) {
            if (arguments.length > 1) {
              for (let _0x3887ff = 0; _0x3887ff < arguments.length; _0x3887ff++) {
                this.remove(arguments[_0x3887ff]);
              }
              return this;
            }
            var _0x5248e3 = this.children.indexOf(_0x29b73f);
            if (_0x5248e3 !== -1) {
              _0x29b73f.parent = null;
              this.children.splice(_0x5248e3, 1);
              _0x29b73f.dispatchEvent(_0xa0ed02);
            }
            return this;
          }
          removeFromParent() {
            var _0x4322d3;
            const _0x5c26ed = this.parent;
            _0x4322d3 = 12;
            if (_0x5c26ed !== null) {
              _0x5c26ed.remove(this);
            }
            return this;
          }
          clear() {
            for (let _0x5dfb1a = 0; _0x5dfb1a < this.children.length; _0x5dfb1a++) {
              const _0x9cf035 = this.children[_0x5dfb1a];
              _0x9cf035.parent = null;
              _0x9cf035.dispatchEvent(_0xa0ed02);
            }
            this.children.length = 0;
            return this;
          }
          attach(_0x2ee975) {
            this.updateWorldMatrix(true, false);
            _0x1e1b87.copy(this.matrixWorld).invert();
            if (_0x2ee975.parent !== null) {
              _0x2ee975.parent.updateWorldMatrix(true, false);
              _0x1e1b87.multiply(_0x2ee975.parent.matrixWorld);
            }
            _0x2ee975.applyMatrix4(_0x1e1b87);
            this.add(_0x2ee975);
            _0x2ee975.updateWorldMatrix(false, true);
            return this;
          }
          getObjectById(_0x13deb9) {
            return this.getObjectByProperty("id", _0x13deb9);
          }
          getObjectByName(_0x3b979c) {
            return this.getObjectByProperty("name", _0x3b979c);
          }
          getObjectByProperty(_0x1a260c, _0x59a471) {
            if (this[_0x1a260c] === _0x59a471) {
              return this;
            }
            for (let _0x3fe4d2 = 0, _0x50c7d6 = this.children.length; _0x3fe4d2 < _0x50c7d6; _0x3fe4d2++) {
              var _0x201a6a;
              var _0x15297b = this.children[_0x3fe4d2].getObjectByProperty(_0x1a260c, _0x59a471);
              _0x201a6a = 9;
              if (_0x15297b !== undefined) {
                return _0x15297b;
              }
            }
          }
          getWorldPosition(_0x3a1145) {
            this.updateWorldMatrix(true, false);
            return _0x3a1145.setFromMatrixPosition(this.matrixWorld);
          }
          getWorldQuaternion(_0x38304f) {
            this.updateWorldMatrix(true, false);
            this.matrixWorld.decompose(_0xc43820, _0x38304f, _0x3a7045);
            return _0x38304f;
          }
          getWorldScale(_0x845238) {
            this.updateWorldMatrix(true, false);
            this.matrixWorld.decompose(_0xc43820, _0x40dc0b, _0x845238);
            return _0x845238;
          }
          getWorldDirection(_0x5ce9bd) {
            this.updateWorldMatrix(true, false);
            var _0x53a515 = this.matrixWorld.elements;
            return _0x5ce9bd.set(_0x53a515[8], _0x53a515[9], _0x53a515[10]).normalize();
          }
          raycast() {}
          traverse(_0x524c2e) {
            _0x524c2e(this);
            const _0x1aa800 = this.children;
            for (let _0xea03b7 = 0, _0x2466b9 = _0x1aa800.length; _0xea03b7 < _0x2466b9; _0xea03b7++) {
              _0x1aa800[_0xea03b7].traverse(_0x524c2e);
            }
          }
          traverseVisible(_0x1c69cf) {
            if (this.visible !== false) {
              _0x1c69cf(this);
              const _0x54e153 = this.children;
              for (let _0x5c7cb1 = 0, _0x3052c0 = _0x54e153.length; _0x5c7cb1 < _0x3052c0; _0x5c7cb1++) {
                _0x54e153[_0x5c7cb1].traverseVisible(_0x1c69cf);
              }
            }
          }
          traverseAncestors(_0x516713) {
            const _0x138309 = this.parent;
            if (_0x138309 !== null) {
              _0x516713(_0x138309);
              _0x138309.traverseAncestors(_0x516713);
            }
          }
          updateMatrix() {
            this.matrix.compose(this.position, this.quaternion, this.scale);
            this.matrixWorldNeedsUpdate = true;
          }
          updateMatrixWorld(_0x36715c) {
            if (this.matrixAutoUpdate) {
              this.updateMatrix();
            }
            if (this.matrixWorldNeedsUpdate || _0x36715c) {
              if (this.parent === null) {
                this.matrixWorld.copy(this.matrix);
              } else {
                this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
              }
              _0x36715c = !(this.matrixWorldNeedsUpdate = false);
            }
            const _0x3d4b4c = this.children;
            for (let _0x41a9f5 = 0, _0x8b67ab = _0x3d4b4c.length; _0x41a9f5 < _0x8b67ab; _0x41a9f5++) {
              _0x3d4b4c[_0x41a9f5].updateMatrixWorld(_0x36715c);
            }
          }
          updateWorldMatrix(_0x2f4142, _0x28ec34) {
            const _0x5d9651 = this.parent;
            if (_0x2f4142 === true && _0x5d9651 !== null) {
              _0x5d9651.updateWorldMatrix(true, false);
            }
            if (this.matrixAutoUpdate) {
              this.updateMatrix();
            }
            if (this.parent === null) {
              this.matrixWorld.copy(this.matrix);
            } else {
              this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
            }
            if (_0x28ec34 === true) {
              const _0x447f9a = this.children;
              for (let _0x5073d0 = 0, _0x5ed7f8 = _0x447f9a.length; _0x5073d0 < _0x5ed7f8; _0x5073d0++) {
                _0x447f9a[_0x5073d0].updateWorldMatrix(false, true);
              }
            }
          }
          toJSON(_0x16cf45) {
            var _0x3ea1a0;
            var _0x4aa325;
            var _0x978807;
            var _0x5bd601;
            var _0x2a2382;
            var _0x1bc70a = _0x16cf45 === undefined || typeof _0x16cf45 == "string";
            const _0xe7a9ad = {};
            if (_0x1bc70a) {
              _0x16cf45 = {
                geometries: {},
                materials: {},
                textures: {},
                images: {},
                shapes: {},
                skeletons: {},
                animations: {}
              };
              _0xe7a9ad.metadata = {
                version: 4.5,
                type: "Object",
                generator: "Object3D.toJSON"
              };
            }
            const _0x475af3 = {};
            function _0x23c078(_0x40fbbd, _0x418383) {
              if (_0x40fbbd[_0x418383.uuid] === undefined) {
                _0x40fbbd[_0x418383.uuid] = _0x418383.toJSON(_0x16cf45);
              }
              return _0x418383.uuid;
            }
            _0x475af3.uuid = this.uuid;
            _0x475af3.type = this.type;
            if (this.name !== "") {
              _0x475af3.name = this.name;
            }
            if (this.castShadow === true) {
              _0x475af3.castShadow = true;
            }
            if (this.receiveShadow === true) {
              _0x475af3.receiveShadow = true;
            }
            if (this.visible === false) {
              _0x475af3.visible = false;
            }
            if (this.frustumCulled === false) {
              _0x475af3.frustumCulled = false;
            }
            if (this.renderOrder !== 0) {
              _0x475af3.renderOrder = this.renderOrder;
            }
            if (JSON.stringify(this.userData) !== "{}") {
              _0x475af3.userData = this.userData;
            }
            _0x475af3.layers = this.layers.mask;
            _0x475af3.matrix = this.matrix.toArray();
            if (this.matrixAutoUpdate === false) {
              _0x475af3.matrixAutoUpdate = false;
            }
            if (this.isInstancedMesh) {
              _0x475af3.type = "InstancedMesh";
              _0x475af3.count = this.count;
              _0x475af3.instanceMatrix = this.instanceMatrix.toJSON();
              if (this.instanceColor !== null) {
                _0x475af3.instanceColor = this.instanceColor.toJSON();
              }
            }
            if (this.isScene) {
              if (this.background) {
                if (this.background.isColor) {
                  _0x475af3.background = this.background.toJSON();
                } else if (this.background.isTexture) {
                  _0x475af3.background = this.background.toJSON(_0x16cf45).uuid;
                }
              }
              if (this.environment && this.environment.isTexture) {
                _0x475af3.environment = this.environment.toJSON(_0x16cf45).uuid;
              }
            } else if (this.isMesh || this.isLine || this.isPoints) {
              _0x475af3.geometry = _0x23c078(_0x16cf45.geometries, this.geometry);
              var _0x2c756c = this.geometry.parameters;
              if (_0x2c756c !== undefined && _0x2c756c.shapes !== undefined) {
                var _0x5c32b4 = 9;
                var _0x8164f7 = _0x2c756c.shapes;
                _0x5c32b4 = 0;
                if (Array.isArray(_0x8164f7)) {
                  for (let _0x331140 = 0, _0x104cac = _0x8164f7.length; _0x331140 < _0x104cac; _0x331140++) {
                    var _0x1ccdd2 = _0x8164f7[_0x331140];
                    _0x23c078(_0x16cf45.shapes, _0x1ccdd2);
                  }
                } else {
                  _0x23c078(_0x16cf45.shapes, _0x8164f7);
                }
              }
            }
            if (this.isSkinnedMesh) {
              _0x475af3.bindMode = this.bindMode;
              _0x475af3.bindMatrix = this.bindMatrix.toArray();
              if (this.skeleton !== undefined) {
                _0x23c078(_0x16cf45.skeletons, this.skeleton);
                _0x475af3.skeleton = this.skeleton.uuid;
              }
            }
            if (this.material !== undefined) {
              if (Array.isArray(this.material)) {
                const _0x3fb180 = [];
                for (let _0x48a48c = 0, _0x3ffe6b = this.material.length; _0x48a48c < _0x3ffe6b; _0x48a48c++) {
                  _0x3fb180.push(_0x23c078(_0x16cf45.materials, this.material[_0x48a48c]));
                }
                _0x475af3.material = _0x3fb180;
              } else {
                _0x475af3.material = _0x23c078(_0x16cf45.materials, this.material);
              }
            }
            if (this.children.length > 0) {
              _0x475af3.children = [];
              for (let _0x4c59df = 0; _0x4c59df < this.children.length; _0x4c59df++) {
                _0x475af3.children.push(this.children[_0x4c59df].toJSON(_0x16cf45).object);
              }
            }
            if (this.animations.length > 0) {
              _0x475af3.animations = [];
              for (let _0x370666 = 0; _0x370666 < this.animations.length; _0x370666++) {
                var _0x3a7bf7 = this.animations[_0x370666];
                _0x475af3.animations.push(_0x23c078(_0x16cf45.animations, _0x3a7bf7));
              }
            }
            if (_0x1bc70a) {
              _0x3ea1a0 = _0x1c546f(_0x16cf45.geometries);
              _0x4aa325 = _0x1c546f(_0x16cf45.materials);
              _0x978807 = _0x1c546f(_0x16cf45.textures);
              _0x5bd601 = _0x1c546f(_0x16cf45.images);
              _0x2a2382 = _0x1c546f(_0x16cf45.shapes);
              _0x2c756c = _0x1c546f(_0x16cf45.skeletons);
              _0x1bc70a = _0x1c546f(_0x16cf45.animations);
              if (_0x3ea1a0.length > 0) {
                _0xe7a9ad.geometries = _0x3ea1a0;
              }
              if (_0x4aa325.length > 0) {
                _0xe7a9ad.materials = _0x4aa325;
              }
              if (_0x978807.length > 0) {
                _0xe7a9ad.textures = _0x978807;
              }
              if (_0x5bd601.length > 0) {
                _0xe7a9ad.images = _0x5bd601;
              }
              if (_0x2a2382.length > 0) {
                _0xe7a9ad.shapes = _0x2a2382;
              }
              if (_0x2c756c.length > 0) {
                _0xe7a9ad.skeletons = _0x2c756c;
              }
              if (_0x1bc70a.length > 0) {
                _0xe7a9ad.animations = _0x1bc70a;
              }
            }
            _0xe7a9ad.object = _0x475af3;
            return _0xe7a9ad;
            function _0x1c546f(_0x5b63d3) {
              const _0x44eabb = [];
              for (const _0x3ee053 in _0x5b63d3) {
                var _0x4a0e69 = 7;
                const _0x4b7413 = _0x5b63d3[_0x3ee053];
                _0x4a0e69 = 10;
                delete _0x4b7413.metadata;
                _0x44eabb.push(_0x4b7413);
              }
              return _0x44eabb;
            }
          }
          clone(_0x160b3a) {
            return new this.constructor().copy(this, _0x160b3a);
          }
          copy(_0x33fbf4, _0x3cf73a = true) {
            this.name = _0x33fbf4.name;
            this.up.copy(_0x33fbf4.up);
            this.position.copy(_0x33fbf4.position);
            this.rotation.order = _0x33fbf4.rotation.order;
            this.quaternion.copy(_0x33fbf4.quaternion);
            this.scale.copy(_0x33fbf4.scale);
            this.matrix.copy(_0x33fbf4.matrix);
            this.matrixWorld.copy(_0x33fbf4.matrixWorld);
            this.matrixAutoUpdate = _0x33fbf4.matrixAutoUpdate;
            this.matrixWorldNeedsUpdate = _0x33fbf4.matrixWorldNeedsUpdate;
            this.layers.mask = _0x33fbf4.layers.mask;
            this.visible = _0x33fbf4.visible;
            this.castShadow = _0x33fbf4.castShadow;
            this.receiveShadow = _0x33fbf4.receiveShadow;
            this.frustumCulled = _0x33fbf4.frustumCulled;
            this.renderOrder = _0x33fbf4.renderOrder;
            this.userData = JSON.parse(JSON.stringify(_0x33fbf4.userData));
            if (_0x3cf73a === true) {
              for (let _0x136882 = 0; _0x136882 < _0x33fbf4.children.length; _0x136882++) {
                const _0x220d1f = _0x33fbf4.children[_0x136882];
                this.add(_0x220d1f.clone());
              }
            }
            return this;
          }
        }
        _0x3b73b1.DefaultUp = new _0x1d20ef(0, 1, 0);
        _0x3b73b1.DefaultMatrixAutoUpdate = true;
        _0x3b73b1.prototype.isObject3D = true;
        const _0x20c8e7 = new _0x1d20ef();
        const _0x1fa793 = new _0x1d20ef();
        const _0x3a4e34 = new _0x1d20ef();
        const _0x473069 = new _0x1d20ef();
        const _0x3f5285 = new _0x1d20ef();
        const _0x1e5aec = new _0x1d20ef();
        const _0x4d5700 = new _0x1d20ef();
        const _0x242b92 = new _0x1d20ef();
        const _0x3a6e93 = new _0x1d20ef();
        const _0x31458a = new _0x1d20ef();
        class _0x54aa93 {
          constructor(_0x175f1b = new _0x1d20ef(), _0x23e98f = new _0x1d20ef(), _0x5116f8 = new _0x1d20ef()) {
            this.a = _0x175f1b;
            this.b = _0x23e98f;
            this.c = _0x5116f8;
          }
          static getNormal(_0x3c273d, _0x2b9b30, _0x4c5603, _0x4cfddb) {
            _0x4cfddb.subVectors(_0x4c5603, _0x2b9b30);
            _0x20c8e7.subVectors(_0x3c273d, _0x2b9b30);
            _0x4cfddb.cross(_0x20c8e7);
            if ((_0x2b9b30 = _0x4cfddb.lengthSq()) > 0) {
              return _0x4cfddb.multiplyScalar(1 / Math.sqrt(_0x2b9b30));
            } else {
              return _0x4cfddb.set(0, 0, 0);
            }
          }
          static getBarycoord(_0x497ecd, _0x6f5d34, _0x4a20cb, _0x499b0d, _0x16d662) {
            _0x20c8e7.subVectors(_0x499b0d, _0x6f5d34);
            _0x1fa793.subVectors(_0x4a20cb, _0x6f5d34);
            _0x3a4e34.subVectors(_0x497ecd, _0x6f5d34);
            var _0x1d8bc9 = _0x20c8e7.dot(_0x20c8e7);
            var _0x1dbf95 = _0x20c8e7.dot(_0x1fa793);
            _0x499b0d = _0x20c8e7.dot(_0x3a4e34);
            _0x4a20cb = _0x1fa793.dot(_0x1fa793);
            _0x497ecd = _0x1fa793.dot(_0x3a4e34);
            if ((_0x6f5d34 = _0x1d8bc9 * _0x4a20cb - _0x1dbf95 * _0x1dbf95) == 0) {
              return _0x16d662.set(-2, -1, -1);
            } else {
              _0x4a20cb = (_0x4a20cb * _0x499b0d - _0x1dbf95 * _0x497ecd) * (_0x6f5d34 = 1 / _0x6f5d34);
              _0x6f5d34 *= _0x1d8bc9 * _0x497ecd - _0x1dbf95 * _0x499b0d;
              return _0x16d662.set(1 - _0x4a20cb - _0x6f5d34, _0x6f5d34, _0x4a20cb);
            }
          }
          static containsPoint(_0x349fac, _0x3e30d9, _0x2f2749, _0x40cc10) {
            this.getBarycoord(_0x349fac, _0x3e30d9, _0x2f2749, _0x40cc10, _0x473069);
            return _0x473069.x >= 0 && _0x473069.y >= 0 && _0x473069.x + _0x473069.y <= 1;
          }
          static getUV(_0x22786a, _0xe5bfbf, _0x424136, _0x15be78, _0x3d4ca9, _0x5e0d66, _0x50a315, _0x5afea9) {
            this.getBarycoord(_0x22786a, _0xe5bfbf, _0x424136, _0x15be78, _0x473069);
            _0x5afea9.set(0, 0);
            _0x5afea9.addScaledVector(_0x3d4ca9, _0x473069.x);
            _0x5afea9.addScaledVector(_0x5e0d66, _0x473069.y);
            _0x5afea9.addScaledVector(_0x50a315, _0x473069.z);
            return _0x5afea9;
          }
          static isFrontFacing(_0xa54388, _0x297111, _0x31cd21, _0x71aed4) {
            _0x20c8e7.subVectors(_0x31cd21, _0x297111);
            _0x1fa793.subVectors(_0xa54388, _0x297111);
            return _0x20c8e7.cross(_0x1fa793).dot(_0x71aed4) < 0;
          }
          set(_0x117ee5, _0x1eff26, _0x190349) {
            this.a.copy(_0x117ee5);
            this.b.copy(_0x1eff26);
            this.c.copy(_0x190349);
            return this;
          }
          setFromPointsAndIndices(_0x48448e, _0x2c6771, _0x1c6659, _0x4d440b) {
            this.a.copy(_0x48448e[_0x2c6771]);
            this.b.copy(_0x48448e[_0x1c6659]);
            this.c.copy(_0x48448e[_0x4d440b]);
            return this;
          }
          setFromAttributeAndIndices(_0x938d03, _0x2f7f8c, _0x32ac5c, _0x3933be) {
            this.a.fromBufferAttribute(_0x938d03, _0x2f7f8c);
            this.b.fromBufferAttribute(_0x938d03, _0x32ac5c);
            this.c.fromBufferAttribute(_0x938d03, _0x3933be);
            return this;
          }
          clone() {
            return new this.constructor().copy(this);
          }
          copy(_0x3dc61e) {
            this.a.copy(_0x3dc61e.a);
            this.b.copy(_0x3dc61e.b);
            this.c.copy(_0x3dc61e.c);
            return this;
          }
          getArea() {
            _0x20c8e7.subVectors(this.c, this.b);
            _0x1fa793.subVectors(this.a, this.b);
            return _0x20c8e7.cross(_0x1fa793).length() * 0.5;
          }
          getMidpoint(_0x2a54eb) {
            return _0x2a54eb.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
          }
          getNormal(_0x2ab056) {
            return _0x54aa93.getNormal(this.a, this.b, this.c, _0x2ab056);
          }
          getPlane(_0x5dc276) {
            return _0x5dc276.setFromCoplanarPoints(this.a, this.b, this.c);
          }
          getBarycoord(_0x575d93, _0x30e874) {
            return _0x54aa93.getBarycoord(_0x575d93, this.a, this.b, this.c, _0x30e874);
          }
          getUV(_0x152c12, _0x2bfeb9, _0x5a33f4, _0x72d015, _0x42032a) {
            return _0x54aa93.getUV(_0x152c12, this.a, this.b, this.c, _0x2bfeb9, _0x5a33f4, _0x72d015, _0x42032a);
          }
          containsPoint(_0x594afc) {
            return _0x54aa93.containsPoint(_0x594afc, this.a, this.b, this.c);
          }
          isFrontFacing(_0x3d171e) {
            return _0x54aa93.isFrontFacing(this.a, this.b, this.c, _0x3d171e);
          }
          intersectsBox(_0x14d581) {
            return _0x14d581.intersectsTriangle(this);
          }
          closestPointToPoint(_0x27f08c, _0x3849a3) {
            var _0x5619d8 = this.a;
            var _0x15039c = this.b;
            var _0x113dbc = this.c;
            let _0x387da0;
            let _0x3c2624;
            _0x3f5285.subVectors(_0x15039c, _0x5619d8);
            _0x1e5aec.subVectors(_0x113dbc, _0x5619d8);
            _0x242b92.subVectors(_0x27f08c, _0x5619d8);
            var _0x2d8ea5 = _0x3f5285.dot(_0x242b92);
            var _0x1151c6 = _0x1e5aec.dot(_0x242b92);
            if (_0x2d8ea5 <= 0 && _0x1151c6 <= 0) {
              return _0x3849a3.copy(_0x5619d8);
            }
            _0x3a6e93.subVectors(_0x27f08c, _0x15039c);
            var _0x182974 = _0x3f5285.dot(_0x3a6e93);
            var _0x4520eb = _0x1e5aec.dot(_0x3a6e93);
            if (_0x182974 >= 0 && _0x4520eb <= _0x182974) {
              return _0x3849a3.copy(_0x15039c);
            }
            var _0x3ca371 = _0x2d8ea5 * _0x4520eb - _0x182974 * _0x1151c6;
            if (_0x3ca371 <= 0 && _0x2d8ea5 >= 0 && _0x182974 <= 0) {
              _0x387da0 = _0x2d8ea5 / (_0x2d8ea5 - _0x182974);
              return _0x3849a3.copy(_0x5619d8).addScaledVector(_0x3f5285, _0x387da0);
            }
            _0x31458a.subVectors(_0x27f08c, _0x113dbc);
            var _0x14fc78 = _0x3f5285.dot(_0x31458a);
            if ((_0x27f08c = _0x1e5aec.dot(_0x31458a)) >= 0 && _0x14fc78 <= _0x27f08c) {
              return _0x3849a3.copy(_0x113dbc);
            } else if ((_0x2d8ea5 = _0x14fc78 * _0x1151c6 - _0x2d8ea5 * _0x27f08c) <= 0 && _0x1151c6 >= 0 && _0x27f08c <= 0) {
              _0x3c2624 = _0x1151c6 / (_0x1151c6 - _0x27f08c);
              return _0x3849a3.copy(_0x5619d8).addScaledVector(_0x1e5aec, _0x3c2624);
            } else if ((_0x1151c6 = _0x182974 * _0x27f08c - _0x14fc78 * _0x4520eb) <= 0 && _0x4520eb - _0x182974 >= 0 && _0x14fc78 - _0x27f08c >= 0) {
              _0x4d5700.subVectors(_0x113dbc, _0x15039c);
              _0x3c2624 = (_0x4520eb - _0x182974) / (_0x4520eb - _0x182974 + (_0x14fc78 - _0x27f08c));
              return _0x3849a3.copy(_0x15039c).addScaledVector(_0x4d5700, _0x3c2624);
            } else {
              _0x387da0 = _0x2d8ea5 * (_0x1151c6 = 1 / (_0x1151c6 + _0x2d8ea5 + _0x3ca371));
              _0x3c2624 = _0x3ca371 * _0x1151c6;
              return _0x3849a3.copy(_0x5619d8).addScaledVector(_0x3f5285, _0x387da0).addScaledVector(_0x1e5aec, _0x3c2624);
            }
          }
          equals(_0x2858dc) {
            return _0x2858dc.a.equals(this.a) && _0x2858dc.b.equals(this.b) && _0x2858dc.c.equals(this.c);
          }
        }
        let _0x421d08 = 0;
        class _0x2098dd extends _0x3a55ab {
          constructor() {
            super();
            Object.defineProperty(this, "id", {
              value: _0x421d08++
            });
            this.uuid = _0x2b30b2();
            this.name = "";
            this.type = "Material";
            this.fog = true;
            this.blending = _0x4538d2;
            this.side = _0xe70805;
            this.vertexColors = false;
            this.opacity = 1;
            this.format = _0x4f87e5;
            this.transparent = false;
            this.blendSrc = _0x539d6e;
            this.blendDst = _0x5b604c;
            this.blendEquation = _0x3e7cc4;
            this.blendSrcAlpha = null;
            this.blendDstAlpha = null;
            this.blendEquationAlpha = null;
            this.depthFunc = _0x45fa99;
            this.depthTest = true;
            this.depthWrite = true;
            this.stencilWriteMask = 255;
            this.stencilFunc = _0x33ddf9;
            this.stencilRef = 0;
            this.stencilFuncMask = 255;
            this.stencilFail = _0x85718;
            this.stencilZFail = _0x85718;
            this.stencilZPass = _0x85718;
            this.stencilWrite = false;
            this.clippingPlanes = null;
            this.clipIntersection = false;
            this.clipShadows = false;
            this.shadowSide = null;
            this.colorWrite = true;
            this.precision = null;
            this.polygonOffset = false;
            this.polygonOffsetFactor = 0;
            this.polygonOffsetUnits = 0;
            this.dithering = false;
            this.alphaToCoverage = false;
            this.premultipliedAlpha = false;
            this.visible = true;
            this.toneMapped = true;
            this.userData = {};
            this.version = 0;
            this._alphaTest = 0;
          }
          get alphaTest() {
            return this._alphaTest;
          }
          set alphaTest(_0x15d17f) {
            if (this._alphaTest > 0 != _0x15d17f > 0) {
              this.version++;
            }
            this._alphaTest = _0x15d17f;
          }
          onBuild() {}
          onBeforeRender() {}
          onBeforeCompile() {}
          customProgramCacheKey() {
            return this.onBeforeCompile.toString();
          }
          setValues(_0xcfe366) {
            if (_0xcfe366 !== undefined) {
              for (const _0x31320b in _0xcfe366) {
                var _0x86e0f3 = _0xcfe366[_0x31320b];
                if (_0x86e0f3 !== undefined) {
                  if (_0x31320b !== "shading") {
                    var _0x510458 = 5;
                    const _0x30d1b1 = this[_0x31320b];
                    _0x510458 = 2;
                    if (_0x30d1b1 !== undefined) {
                      if (_0x30d1b1 && _0x30d1b1.isColor) {
                        _0x30d1b1.set(_0x86e0f3);
                      } else if (_0x30d1b1 && _0x30d1b1.isVector3 && _0x86e0f3 && _0x86e0f3.isVector3) {
                        _0x30d1b1.copy(_0x86e0f3);
                      } else {
                        this[_0x31320b] = _0x86e0f3;
                      }
                    }
                  } else {
                    this.flatShading = _0x86e0f3 === _0x2e28c7;
                  }
                }
              }
            }
          }
          toJSON(_0x13f039) {
            var _0x154b8a = _0x13f039 === undefined || typeof _0x13f039 == "string";
            if (_0x154b8a) {
              _0x13f039 = {
                textures: {},
                images: {}
              };
            }
            const _0xb23a4b = {
              metadata: {
                version: 4.5,
                type: "Material",
                generator: "Material.toJSON"
              }
            };
            function _0x32cb60(_0x438c6d) {
              const _0x35e261 = [];
              for (const _0x41c55d in _0x438c6d) {
                const _0x37996b = _0x438c6d[_0x41c55d];
                delete _0x37996b.metadata;
                _0x35e261.push(_0x37996b);
              }
              return _0x35e261;
            }
            _0xb23a4b.uuid = this.uuid;
            _0xb23a4b.type = this.type;
            if (this.name !== "") {
              _0xb23a4b.name = this.name;
            }
            if (this.color && this.color.isColor) {
              _0xb23a4b.color = this.color.getHex();
            }
            if (this.roughness !== undefined) {
              _0xb23a4b.roughness = this.roughness;
            }
            if (this.metalness !== undefined) {
              _0xb23a4b.metalness = this.metalness;
            }
            if (this.sheen !== undefined) {
              _0xb23a4b.sheen = this.sheen;
            }
            if (this.sheenColor && this.sheenColor.isColor) {
              _0xb23a4b.sheenColor = this.sheenColor.getHex();
            }
            if (this.sheenRoughness !== undefined) {
              _0xb23a4b.sheenRoughness = this.sheenRoughness;
            }
            if (this.emissive && this.emissive.isColor) {
              _0xb23a4b.emissive = this.emissive.getHex();
            }
            if (this.emissiveIntensity && this.emissiveIntensity !== 1) {
              _0xb23a4b.emissiveIntensity = this.emissiveIntensity;
            }
            if (this.specular && this.specular.isColor) {
              _0xb23a4b.specular = this.specular.getHex();
            }
            if (this.specularIntensity !== undefined) {
              _0xb23a4b.specularIntensity = this.specularIntensity;
            }
            if (this.specularColor && this.specularColor.isColor) {
              _0xb23a4b.specularColor = this.specularColor.getHex();
            }
            if (this.shininess !== undefined) {
              _0xb23a4b.shininess = this.shininess;
            }
            if (this.clearcoat !== undefined) {
              _0xb23a4b.clearcoat = this.clearcoat;
            }
            if (this.clearcoatRoughness !== undefined) {
              _0xb23a4b.clearcoatRoughness = this.clearcoatRoughness;
            }
            if (this.clearcoatMap && this.clearcoatMap.isTexture) {
              _0xb23a4b.clearcoatMap = this.clearcoatMap.toJSON(_0x13f039).uuid;
            }
            if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
              _0xb23a4b.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(_0x13f039).uuid;
            }
            if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
              _0xb23a4b.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(_0x13f039).uuid;
              _0xb23a4b.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
            }
            if (this.map && this.map.isTexture) {
              _0xb23a4b.map = this.map.toJSON(_0x13f039).uuid;
            }
            if (this.matcap && this.matcap.isTexture) {
              _0xb23a4b.matcap = this.matcap.toJSON(_0x13f039).uuid;
            }
            if (this.alphaMap && this.alphaMap.isTexture) {
              _0xb23a4b.alphaMap = this.alphaMap.toJSON(_0x13f039).uuid;
            }
            if (this.lightMap && this.lightMap.isTexture) {
              _0xb23a4b.lightMap = this.lightMap.toJSON(_0x13f039).uuid;
              _0xb23a4b.lightMapIntensity = this.lightMapIntensity;
            }
            if (this.aoMap && this.aoMap.isTexture) {
              _0xb23a4b.aoMap = this.aoMap.toJSON(_0x13f039).uuid;
              _0xb23a4b.aoMapIntensity = this.aoMapIntensity;
            }
            if (this.bumpMap && this.bumpMap.isTexture) {
              _0xb23a4b.bumpMap = this.bumpMap.toJSON(_0x13f039).uuid;
              _0xb23a4b.bumpScale = this.bumpScale;
            }
            if (this.normalMap && this.normalMap.isTexture) {
              _0xb23a4b.normalMap = this.normalMap.toJSON(_0x13f039).uuid;
              _0xb23a4b.normalMapType = this.normalMapType;
              _0xb23a4b.normalScale = this.normalScale.toArray();
            }
            if (this.displacementMap && this.displacementMap.isTexture) {
              _0xb23a4b.displacementMap = this.displacementMap.toJSON(_0x13f039).uuid;
              _0xb23a4b.displacementScale = this.displacementScale;
              _0xb23a4b.displacementBias = this.displacementBias;
            }
            if (this.roughnessMap && this.roughnessMap.isTexture) {
              _0xb23a4b.roughnessMap = this.roughnessMap.toJSON(_0x13f039).uuid;
            }
            if (this.metalnessMap && this.metalnessMap.isTexture) {
              _0xb23a4b.metalnessMap = this.metalnessMap.toJSON(_0x13f039).uuid;
            }
            if (this.emissiveMap && this.emissiveMap.isTexture) {
              _0xb23a4b.emissiveMap = this.emissiveMap.toJSON(_0x13f039).uuid;
            }
            if (this.specularMap && this.specularMap.isTexture) {
              _0xb23a4b.specularMap = this.specularMap.toJSON(_0x13f039).uuid;
            }
            if (this.specularIntensityMap && this.specularIntensityMap.isTexture) {
              _0xb23a4b.specularIntensityMap = this.specularIntensityMap.toJSON(_0x13f039).uuid;
            }
            if (this.specularColorMap && this.specularColorMap.isTexture) {
              _0xb23a4b.specularColorMap = this.specularColorMap.toJSON(_0x13f039).uuid;
            }
            if (this.envMap && this.envMap.isTexture) {
              _0xb23a4b.envMap = this.envMap.toJSON(_0x13f039).uuid;
              if (this.combine !== undefined) {
                _0xb23a4b.combine = this.combine;
              }
            }
            if (this.envMapIntensity !== undefined) {
              _0xb23a4b.envMapIntensity = this.envMapIntensity;
            }
            if (this.reflectivity !== undefined) {
              _0xb23a4b.reflectivity = this.reflectivity;
            }
            if (this.refractionRatio !== undefined) {
              _0xb23a4b.refractionRatio = this.refractionRatio;
            }
            if (this.gradientMap && this.gradientMap.isTexture) {
              _0xb23a4b.gradientMap = this.gradientMap.toJSON(_0x13f039).uuid;
            }
            if (this.transmission !== undefined) {
              _0xb23a4b.transmission = this.transmission;
            }
            if (this.transmissionMap && this.transmissionMap.isTexture) {
              _0xb23a4b.transmissionMap = this.transmissionMap.toJSON(_0x13f039).uuid;
            }
            if (this.thickness !== undefined) {
              _0xb23a4b.thickness = this.thickness;
            }
            if (this.thicknessMap && this.thicknessMap.isTexture) {
              _0xb23a4b.thicknessMap = this.thicknessMap.toJSON(_0x13f039).uuid;
            }
            if (this.attenuationDistance !== undefined) {
              _0xb23a4b.attenuationDistance = this.attenuationDistance;
            }
            if (this.attenuationColor !== undefined) {
              _0xb23a4b.attenuationColor = this.attenuationColor.getHex();
            }
            if (this.size !== undefined) {
              _0xb23a4b.size = this.size;
            }
            if (this.shadowSide !== null) {
              _0xb23a4b.shadowSide = this.shadowSide;
            }
            if (this.sizeAttenuation !== undefined) {
              _0xb23a4b.sizeAttenuation = this.sizeAttenuation;
            }
            if (this.blending !== _0x4538d2) {
              _0xb23a4b.blending = this.blending;
            }
            if (this.side !== _0xe70805) {
              _0xb23a4b.side = this.side;
            }
            if (this.vertexColors) {
              _0xb23a4b.vertexColors = true;
            }
            if (this.opacity < 1) {
              _0xb23a4b.opacity = this.opacity;
            }
            if (this.format !== _0x4f87e5) {
              _0xb23a4b.format = this.format;
            }
            if (this.transparent === true) {
              _0xb23a4b.transparent = this.transparent;
            }
            _0xb23a4b.depthFunc = this.depthFunc;
            _0xb23a4b.depthTest = this.depthTest;
            _0xb23a4b.depthWrite = this.depthWrite;
            _0xb23a4b.colorWrite = this.colorWrite;
            _0xb23a4b.stencilWrite = this.stencilWrite;
            _0xb23a4b.stencilWriteMask = this.stencilWriteMask;
            _0xb23a4b.stencilFunc = this.stencilFunc;
            _0xb23a4b.stencilRef = this.stencilRef;
            _0xb23a4b.stencilFuncMask = this.stencilFuncMask;
            _0xb23a4b.stencilFail = this.stencilFail;
            _0xb23a4b.stencilZFail = this.stencilZFail;
            _0xb23a4b.stencilZPass = this.stencilZPass;
            if (this.rotation && this.rotation !== 0) {
              _0xb23a4b.rotation = this.rotation;
            }
            if (this.polygonOffset === true) {
              _0xb23a4b.polygonOffset = true;
            }
            if (this.polygonOffsetFactor !== 0) {
              _0xb23a4b.polygonOffsetFactor = this.polygonOffsetFactor;
            }
            if (this.polygonOffsetUnits !== 0) {
              _0xb23a4b.polygonOffsetUnits = this.polygonOffsetUnits;
            }
            if (this.linewidth && this.linewidth !== 1) {
              _0xb23a4b.linewidth = this.linewidth;
            }
            if (this.dashSize !== undefined) {
              _0xb23a4b.dashSize = this.dashSize;
            }
            if (this.gapSize !== undefined) {
              _0xb23a4b.gapSize = this.gapSize;
            }
            if (this.scale !== undefined) {
              _0xb23a4b.scale = this.scale;
            }
            if (this.dithering === true) {
              _0xb23a4b.dithering = true;
            }
            if (this.alphaTest > 0) {
              _0xb23a4b.alphaTest = this.alphaTest;
            }
            if (this.alphaToCoverage === true) {
              _0xb23a4b.alphaToCoverage = this.alphaToCoverage;
            }
            if (this.premultipliedAlpha === true) {
              _0xb23a4b.premultipliedAlpha = this.premultipliedAlpha;
            }
            if (this.wireframe === true) {
              _0xb23a4b.wireframe = this.wireframe;
            }
            if (this.wireframeLinewidth > 1) {
              _0xb23a4b.wireframeLinewidth = this.wireframeLinewidth;
            }
            if (this.wireframeLinecap !== "round") {
              _0xb23a4b.wireframeLinecap = this.wireframeLinecap;
            }
            if (this.wireframeLinejoin !== "round") {
              _0xb23a4b.wireframeLinejoin = this.wireframeLinejoin;
            }
            if (this.flatShading === true) {
              _0xb23a4b.flatShading = this.flatShading;
            }
            if (this.visible === false) {
              _0xb23a4b.visible = false;
            }
            if (this.toneMapped === false) {
              _0xb23a4b.toneMapped = false;
            }
            if (JSON.stringify(this.userData) !== "{}") {
              _0xb23a4b.userData = this.userData;
            }
            if (_0x154b8a) {
              _0x154b8a = _0x32cb60(_0x13f039.textures);
              _0x13f039 = _0x32cb60(_0x13f039.images);
              if (_0x154b8a.length > 0) {
                _0xb23a4b.textures = _0x154b8a;
              }
              if (_0x13f039.length > 0) {
                _0xb23a4b.images = _0x13f039;
              }
            }
            return _0xb23a4b;
          }
          clone() {
            return new this.constructor().copy(this);
          }
          copy(_0x937ceb) {
            this.name = _0x937ceb.name;
            this.fog = _0x937ceb.fog;
            this.blending = _0x937ceb.blending;
            this.side = _0x937ceb.side;
            this.vertexColors = _0x937ceb.vertexColors;
            this.opacity = _0x937ceb.opacity;
            this.format = _0x937ceb.format;
            this.transparent = _0x937ceb.transparent;
            this.blendSrc = _0x937ceb.blendSrc;
            this.blendDst = _0x937ceb.blendDst;
            this.blendEquation = _0x937ceb.blendEquation;
            this.blendSrcAlpha = _0x937ceb.blendSrcAlpha;
            this.blendDstAlpha = _0x937ceb.blendDstAlpha;
            this.blendEquationAlpha = _0x937ceb.blendEquationAlpha;
            this.depthFunc = _0x937ceb.depthFunc;
            this.depthTest = _0x937ceb.depthTest;
            this.depthWrite = _0x937ceb.depthWrite;
            this.stencilWriteMask = _0x937ceb.stencilWriteMask;
            this.stencilFunc = _0x937ceb.stencilFunc;
            this.stencilRef = _0x937ceb.stencilRef;
            this.stencilFuncMask = _0x937ceb.stencilFuncMask;
            this.stencilFail = _0x937ceb.stencilFail;
            this.stencilZFail = _0x937ceb.stencilZFail;
            this.stencilZPass = _0x937ceb.stencilZPass;
            this.stencilWrite = _0x937ceb.stencilWrite;
            const _0x11cd7c = _0x937ceb.clippingPlanes;
            let _0x5df9cb = null;
            if (_0x11cd7c !== null) {
              var _0x5b1655 = _0x11cd7c.length;
              _0x5df9cb = new Array(_0x5b1655);
              for (let _0x39e0e3 = 0; _0x39e0e3 !== _0x5b1655; ++_0x39e0e3) {
                _0x5df9cb[_0x39e0e3] = _0x11cd7c[_0x39e0e3].clone();
              }
            }
            this.clippingPlanes = _0x5df9cb;
            this.clipIntersection = _0x937ceb.clipIntersection;
            this.clipShadows = _0x937ceb.clipShadows;
            this.shadowSide = _0x937ceb.shadowSide;
            this.colorWrite = _0x937ceb.colorWrite;
            this.precision = _0x937ceb.precision;
            this.polygonOffset = _0x937ceb.polygonOffset;
            this.polygonOffsetFactor = _0x937ceb.polygonOffsetFactor;
            this.polygonOffsetUnits = _0x937ceb.polygonOffsetUnits;
            this.dithering = _0x937ceb.dithering;
            this.alphaTest = _0x937ceb.alphaTest;
            this.alphaToCoverage = _0x937ceb.alphaToCoverage;
            this.premultipliedAlpha = _0x937ceb.premultipliedAlpha;
            this.visible = _0x937ceb.visible;
            this.toneMapped = _0x937ceb.toneMapped;
            this.userData = JSON.parse(JSON.stringify(_0x937ceb.userData));
            return this;
          }
          dispose() {
            this.dispatchEvent({
              type: "dispose"
            });
          }
          set needsUpdate(_0x5bf553) {
            if (_0x5bf553 === true) {
              this.version++;
            }
          }
        }
        _0x2098dd.prototype.isMaterial = true;
        const _0x2c3613 = {
          aliceblue: 15792383,
          antiquewhite: 16444375,
          aqua: 65535,
          aquamarine: 8388564,
          azure: 15794175,
          beige: 16119260,
          bisque: 16770244,
          black: 0,
          blanchedalmond: 16772045,
          blue: 255,
          blueviolet: 9055202,
          brown: 10824234,
          burlywood: 14596231,
          cadetblue: 6266528,
          chartreuse: 8388352,
          chocolate: 13789470,
          coral: 16744272,
          cornflowerblue: 6591981,
          cornsilk: 16775388,
          crimson: 14423100,
          cyan: 65535,
          darkblue: 139,
          darkcyan: 35723,
          darkgoldenrod: 12092939,
          darkgray: 11119017,
          darkgreen: 25600,
          darkgrey: 11119017,
          darkkhaki: 12433259,
          darkmagenta: 9109643,
          darkolivegreen: 5597999,
          darkorange: 16747520,
          darkorchid: 10040012,
          darkred: 9109504,
          darksalmon: 15308410,
          darkseagreen: 9419919,
          darkslateblue: 4734347,
          darkslategray: 3100495,
          darkslategrey: 3100495,
          darkturquoise: 52945,
          darkviolet: 9699539,
          deeppink: 16716947,
          deepskyblue: 49151,
          dimgray: 6908265,
          dimgrey: 6908265,
          dodgerblue: 2003199,
          firebrick: 11674146,
          floralwhite: 16775920,
          forestgreen: 2263842,
          fuchsia: 16711935,
          gainsboro: 14474460,
          ghostwhite: 16316671,
          gold: 16766720,
          goldenrod: 14329120,
          gray: 8421504,
          green: 32768,
          greenyellow: 11403055,
          grey: 8421504,
          honeydew: 15794160,
          hotpink: 16738740,
          indianred: 13458524,
          indigo: 4915330,
          ivory: 16777200,
          khaki: 15787660,
          lavender: 15132410,
          lavenderblush: 16773365,
          lawngreen: 8190976,
          lemonchiffon: 16775885,
          lightblue: 11393254,
          lightcoral: 15761536,
          lightcyan: 14745599,
          lightgoldenrodyellow: 16448210,
          lightgray: 13882323,
          lightgreen: 9498256,
          lightgrey: 13882323,
          lightpink: 16758465,
          lightsalmon: 16752762,
          lightseagreen: 2142890,
          lightskyblue: 8900346,
          lightslategray: 7833753,
          lightslategrey: 7833753,
          lightsteelblue: 11584734,
          lightyellow: 16777184,
          lime: 65280,
          limegreen: 3329330,
          linen: 16445670,
          magenta: 16711935,
          maroon: 8388608,
          mediumaquamarine: 6737322,
          mediumblue: 205,
          mediumorchid: 12211667,
          mediumpurple: 9662683,
          mediumseagreen: 3978097,
          mediumslateblue: 8087790,
          mediumspringgreen: 64154,
          mediumturquoise: 4772300,
          mediumvioletred: 13047173,
          midnightblue: 1644912,
          mintcream: 16121850,
          mistyrose: 16770273,
          moccasin: 16770229,
          navajowhite: 16768685,
          navy: 128,
          oldlace: 16643558,
          olive: 8421376,
          olivedrab: 7048739,
          orange: 16753920,
          orangered: 16729344,
          orchid: 14315734,
          palegoldenrod: 15657130,
          palegreen: 10025880,
          paleturquoise: 11529966,
          palevioletred: 14381203,
          papayawhip: 16773077,
          peachpuff: 16767673,
          peru: 13468991,
          pink: 16761035,
          plum: 14524637,
          powderblue: 11591910,
          purple: 8388736,
          rebeccapurple: 6697881,
          red: 16711680,
          rosybrown: 12357519,
          royalblue: 4286945,
          saddlebrown: 9127187,
          salmon: 16416882,
          sandybrown: 16032864,
          seagreen: 3050327,
          seashell: 16774638,
          sienna: 10506797,
          silver: 12632256,
          skyblue: 8900331,
          slateblue: 6970061,
          slategray: 7372944,
          slategrey: 7372944,
          snow: 16775930,
          springgreen: 65407,
          steelblue: 4620980,
          tan: 13808780,
          teal: 32896,
          thistle: 14204888,
          tomato: 16737095,
          turquoise: 4251856,
          violet: 15631086,
          wheat: 16113331,
          white: 16777215,
          whitesmoke: 16119285,
          yellow: 16776960,
          yellowgreen: 10145074
        };
        const _0x12a2df = {
          h: 0,
          s: 0,
          l: 0
        };
        const _0x1bf66f = {
          h: 0,
          s: 0,
          l: 0
        };
        function _0x43f70f(_0x437ddc, _0x580751, _0x2445c0) {
          if (_0x2445c0 < 0) {
            _0x2445c0 += 1;
          }
          if (_0x2445c0 > 1) {
            --_0x2445c0;
          }
          if (_0x2445c0 < 1 / 6) {
            return _0x437ddc + (_0x580751 - _0x437ddc) * 6 * _0x2445c0;
          } else if (_0x2445c0 < 0.5) {
            return _0x580751;
          } else if (_0x2445c0 < 2 / 3) {
            return _0x437ddc + (_0x580751 - _0x437ddc) * 6 * (2 / 3 - _0x2445c0);
          } else {
            return _0x437ddc;
          }
        }
        function _0xee5a20(_0x1ac61a) {
          if (_0x1ac61a < 0.04045) {
            return _0x1ac61a * 0.0773993808;
          } else {
            return Math.pow(_0x1ac61a * 0.9478672986 + 0.0521327014, 2.4);
          }
        }
        function _0x183698(_0x57b377) {
          if (_0x57b377 < 0.0031308) {
            return _0x57b377 * 12.92;
          } else {
            return Math.pow(_0x57b377, 0.41666) * 1.055 - 0.055;
          }
        }
        class _0x1282c2 {
          constructor(_0x169d9c, _0x1f725e, _0x53670c) {
            if (_0x1f725e === undefined && _0x53670c === undefined) {
              return this.set(_0x169d9c);
            } else {
              return this.setRGB(_0x169d9c, _0x1f725e, _0x53670c);
            }
          }
          set(_0x5864af) {
            if (_0x5864af && _0x5864af.isColor) {
              this.copy(_0x5864af);
            } else if (typeof _0x5864af == "number") {
              this.setHex(_0x5864af);
            } else if (typeof _0x5864af == "string") {
              this.setStyle(_0x5864af);
            }
            return this;
          }
          setScalar(_0x15e074) {
            this.r = _0x15e074;
            this.g = _0x15e074;
            this.b = _0x15e074;
            return this;
          }
          setHex(_0xe47f52) {
            _0xe47f52 = Math.floor(_0xe47f52);
            this.r = (_0xe47f52 >> 16 & 255) / 255;
            this.g = (_0xe47f52 >> 8 & 255) / 255;
            this.b = (_0xe47f52 & 255) / 255;
            return this;
          }
          setRGB(_0x5258e9, _0x5dfa2c, _0x1ad251) {
            this.r = _0x5258e9;
            this.g = _0x5dfa2c;
            this.b = _0x1ad251;
            return this;
          }
          setHSL(_0x24016c, _0x39b9e7, _0x3a41f8) {
            _0x24016c = _0x55f8fa(_0x24016c, 1);
            _0x39b9e7 = _0x6865cb(_0x39b9e7, 0, 1);
            _0x3a41f8 = _0x6865cb(_0x3a41f8, 0, 1);
            if (_0x39b9e7 === 0) {
              this.r = this.g = this.b = _0x3a41f8;
            } else {
              this.r = _0x43f70f(_0x39b9e7 = _0x3a41f8 * 2 - (_0x3a41f8 = _0x3a41f8 <= 0.5 ? _0x3a41f8 * (1 + _0x39b9e7) : _0x3a41f8 + _0x39b9e7 - _0x3a41f8 * _0x39b9e7), _0x3a41f8, _0x24016c + 1 / 3);
              this.g = _0x43f70f(_0x39b9e7, _0x3a41f8, _0x24016c);
              this.b = _0x43f70f(_0x39b9e7, _0x3a41f8, _0x24016c - 1 / 3);
            }
            return this;
          }
          setStyle(_0xe40cc5) {
            function _0x2bf8e0(_0x44f751) {
              if (_0x44f751 !== undefined) {
                parseFloat(_0x44f751);
              }
            }
            let _0x2b3261;
            if (_0x2b3261 = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(_0xe40cc5)) {
              let _0x2cfbe6;
              var _0x5a049f = _0x2b3261[1];
              var _0x5798d3 = _0x2b3261[2];
              switch (_0x5a049f) {
                case "rgb":
                case "rgba":
                  if (_0x2cfbe6 = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(_0x5798d3)) {
                    this.r = Math.min(255, parseInt(_0x2cfbe6[1], 10)) / 255;
                    this.g = Math.min(255, parseInt(_0x2cfbe6[2], 10)) / 255;
                    this.b = Math.min(255, parseInt(_0x2cfbe6[3], 10)) / 255;
                    _0x2bf8e0(_0x2cfbe6[4]);
                    return this;
                  }
                  if (_0x2cfbe6 = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(_0x5798d3)) {
                    this.r = Math.min(100, parseInt(_0x2cfbe6[1], 10)) / 100;
                    this.g = Math.min(100, parseInt(_0x2cfbe6[2], 10)) / 100;
                    this.b = Math.min(100, parseInt(_0x2cfbe6[3], 10)) / 100;
                    _0x2bf8e0(_0x2cfbe6[4]);
                    return this;
                  }
                  break;
                case "hsl":
                case "hsla":
                  if (_0x2cfbe6 = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(_0x5798d3)) {
                    var _0x4ae780 = parseFloat(_0x2cfbe6[1]) / 360;
                    var _0x3775ef = parseInt(_0x2cfbe6[2], 10) / 100;
                    var _0x5c188c = parseInt(_0x2cfbe6[3], 10) / 100;
                    _0x2bf8e0(_0x2cfbe6[4]);
                    return this.setHSL(_0x4ae780, _0x3775ef, _0x5c188c);
                  }
              }
            } else if (_0x2b3261 = /^\#([A-Fa-f\d]+)$/.exec(_0xe40cc5)) {
              const _0x57787c = _0x2b3261[1];
              _0x5a049f = _0x57787c.length;
              if (_0x5a049f === 3) {
                this.r = parseInt(_0x57787c.charAt(0) + _0x57787c.charAt(0), 16) / 255;
                this.g = parseInt(_0x57787c.charAt(1) + _0x57787c.charAt(1), 16) / 255;
                this.b = parseInt(_0x57787c.charAt(2) + _0x57787c.charAt(2), 16) / 255;
                return this;
              }
              if (_0x5a049f === 6) {
                this.r = parseInt(_0x57787c.charAt(0) + _0x57787c.charAt(1), 16) / 255;
                this.g = parseInt(_0x57787c.charAt(2) + _0x57787c.charAt(3), 16) / 255;
                this.b = parseInt(_0x57787c.charAt(4) + _0x57787c.charAt(5), 16) / 255;
                return this;
              }
            }
            if (_0xe40cc5 && _0xe40cc5.length > 0) {
              return this.setColorName(_0xe40cc5);
            } else {
              return this;
            }
          }
          setColorName(_0x744d61) {
            if ((_0x744d61 = _0x2c3613[_0x744d61.toLowerCase()]) !== undefined) {
              this.setHex(_0x744d61);
            }
            return this;
          }
          clone() {
            return new this.constructor(this.r, this.g, this.b);
          }
          copy(_0xb70045) {
            this.r = _0xb70045.r;
            this.g = _0xb70045.g;
            this.b = _0xb70045.b;
            return this;
          }
          copySRGBToLinear(_0x6a06e2) {
            this.r = _0xee5a20(_0x6a06e2.r);
            this.g = _0xee5a20(_0x6a06e2.g);
            this.b = _0xee5a20(_0x6a06e2.b);
            return this;
          }
          copyLinearToSRGB(_0x4852fe) {
            this.r = _0x183698(_0x4852fe.r);
            this.g = _0x183698(_0x4852fe.g);
            this.b = _0x183698(_0x4852fe.b);
            return this;
          }
          convertSRGBToLinear() {
            this.copySRGBToLinear(this);
            return this;
          }
          convertLinearToSRGB() {
            this.copyLinearToSRGB(this);
            return this;
          }
          getHex() {
            return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
          }
          getHexString() {
            return ("000000" + this.getHex().toString(16)).slice(-6);
          }
          getHSL(_0x2932cb) {
            var _0x23a360 = this.r;
            var _0x5768c3 = this.g;
            var _0x1ec6b9 = this.b;
            var _0x44d932 = Math.max(_0x23a360, _0x5768c3, _0x1ec6b9);
            var _0x4f9427 = Math.min(_0x23a360, _0x5768c3, _0x1ec6b9);
            let _0x17001f;
            let _0x3f4b49;
            var _0x32300c;
            var _0x34d4e6 = (_0x4f9427 + _0x44d932) / 2;
            _0x32300c = "bjng";
            if (_0x4f9427 === _0x44d932) {
              _0x17001f = 0;
              _0x3f4b49 = 0;
            } else {
              var _0x3adddb = _0x44d932 - _0x4f9427;
              _0x3f4b49 = _0x34d4e6 <= 0.5 ? _0x3adddb / (_0x44d932 + _0x4f9427) : _0x3adddb / (2 - _0x44d932 - _0x4f9427);
              switch (_0x44d932) {
                case _0x23a360:
                  _0x17001f = (_0x5768c3 - _0x1ec6b9) / _0x3adddb + (_0x5768c3 < _0x1ec6b9 ? 6 : 0);
                  break;
                case _0x5768c3:
                  _0x17001f = (_0x1ec6b9 - _0x23a360) / _0x3adddb + 2;
                  break;
                case _0x1ec6b9:
                  _0x17001f = (_0x23a360 - _0x5768c3) / _0x3adddb + 4;
              }
              _0x17001f /= 6;
            }
            _0x2932cb.h = _0x17001f;
            _0x2932cb.s = _0x3f4b49;
            _0x2932cb.l = _0x34d4e6;
            return _0x2932cb;
          }
          getStyle() {
            return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")";
          }
          offsetHSL(_0x2eb4d4, _0x264814, _0x2ae26e) {
            this.getHSL(_0x12a2df);
            _0x12a2df.h += _0x2eb4d4;
            _0x12a2df.s += _0x264814;
            _0x12a2df.l += _0x2ae26e;
            this.setHSL(_0x12a2df.h, _0x12a2df.s, _0x12a2df.l);
            return this;
          }
          add(_0x29036e) {
            this.r += _0x29036e.r;
            this.g += _0x29036e.g;
            this.b += _0x29036e.b;
            return this;
          }
          addColors(_0x204866, _0x78aef7) {
            this.r = _0x204866.r + _0x78aef7.r;
            this.g = _0x204866.g + _0x78aef7.g;
            this.b = _0x204866.b + _0x78aef7.b;
            return this;
          }
          addScalar(_0x53d54f) {
            this.r += _0x53d54f;
            this.g += _0x53d54f;
            this.b += _0x53d54f;
            return this;
          }
          sub(_0x373770) {
            this.r = Math.max(0, this.r - _0x373770.r);
            this.g = Math.max(0, this.g - _0x373770.g);
            this.b = Math.max(0, this.b - _0x373770.b);
            return this;
          }
          multiply(_0x52b9cb) {
            this.r *= _0x52b9cb.r;
            this.g *= _0x52b9cb.g;
            this.b *= _0x52b9cb.b;
            return this;
          }
          multiplyScalar(_0x5f4183) {
            this.r *= _0x5f4183;
            this.g *= _0x5f4183;
            this.b *= _0x5f4183;
            return this;
          }
          lerp(_0x2dc88e, _0x614051) {
            this.r += (_0x2dc88e.r - this.r) * _0x614051;
            this.g += (_0x2dc88e.g - this.g) * _0x614051;
            this.b += (_0x2dc88e.b - this.b) * _0x614051;
            return this;
          }
          lerpColors(_0x3ab51b, _0x32c7df, _0x591e5b) {
            this.r = _0x3ab51b.r + (_0x32c7df.r - _0x3ab51b.r) * _0x591e5b;
            this.g = _0x3ab51b.g + (_0x32c7df.g - _0x3ab51b.g) * _0x591e5b;
            this.b = _0x3ab51b.b + (_0x32c7df.b - _0x3ab51b.b) * _0x591e5b;
            return this;
          }
          lerpHSL(_0x39286d, _0x1917e9) {
            this.getHSL(_0x12a2df);
            _0x39286d.getHSL(_0x1bf66f);
            var _0x54e8dc;
            var _0x2b1466 = _0x4c5b27(_0x12a2df.h, _0x1bf66f.h, _0x1917e9);
            _0x54e8dc = "hphk";
            _0x39286d = _0x4c5b27(_0x12a2df.s, _0x1bf66f.s, _0x1917e9);
            _0x1917e9 = _0x4c5b27(_0x12a2df.l, _0x1bf66f.l, _0x1917e9);
            this.setHSL(_0x2b1466, _0x39286d, _0x1917e9);
            return this;
          }
          equals(_0x47cf0d) {
            return _0x47cf0d.r === this.r && _0x47cf0d.g === this.g && _0x47cf0d.b === this.b;
          }
          fromArray(_0x2509b1, _0x3f94dd = 0) {
            this.r = _0x2509b1[_0x3f94dd];
            this.g = _0x2509b1[_0x3f94dd + 1];
            this.b = _0x2509b1[_0x3f94dd + 2];
            return this;
          }
          toArray(_0xd89703 = [], _0x44ee3c = 0) {
            _0xd89703[_0x44ee3c] = this.r;
            _0xd89703[_0x44ee3c + 1] = this.g;
            _0xd89703[_0x44ee3c + 2] = this.b;
            return _0xd89703;
          }
          fromBufferAttribute(_0x400f0c, _0x4bde2c) {
            this.r = _0x400f0c.getX(_0x4bde2c);
            this.g = _0x400f0c.getY(_0x4bde2c);
            this.b = _0x400f0c.getZ(_0x4bde2c);
            if (_0x400f0c.normalized === true) {
              this.r /= 255;
              this.g /= 255;
              this.b /= 255;
            }
            return this;
          }
          toJSON() {
            return this.getHex();
          }
        }
        _0x1282c2.NAMES = _0x2c3613;
        _0x1282c2.prototype.isColor = true;
        _0x1282c2.prototype.r = 1;
        _0x1282c2.prototype.g = 1;
        _0x1282c2.prototype.b = 1;
        class _0x4c4e20 extends _0x2098dd {
          constructor(_0x32cc33) {
            super();
            this.type = "MeshBasicMaterial";
            this.color = new _0x1282c2(16777215);
            this.map = null;
            this.lightMap = null;
            this.lightMapIntensity = 1;
            this.aoMap = null;
            this.aoMapIntensity = 1;
            this.specularMap = null;
            this.alphaMap = null;
            this.envMap = null;
            this.combine = _0x2e0cd0;
            this.reflectivity = 1;
            this.refractionRatio = 0.98;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = "round";
            this.wireframeLinejoin = "round";
            this.setValues(_0x32cc33);
          }
          copy(_0x3925d3) {
            super.copy(_0x3925d3);
            this.color.copy(_0x3925d3.color);
            this.map = _0x3925d3.map;
            this.lightMap = _0x3925d3.lightMap;
            this.lightMapIntensity = _0x3925d3.lightMapIntensity;
            this.aoMap = _0x3925d3.aoMap;
            this.aoMapIntensity = _0x3925d3.aoMapIntensity;
            this.specularMap = _0x3925d3.specularMap;
            this.alphaMap = _0x3925d3.alphaMap;
            this.envMap = _0x3925d3.envMap;
            this.combine = _0x3925d3.combine;
            this.reflectivity = _0x3925d3.reflectivity;
            this.refractionRatio = _0x3925d3.refractionRatio;
            this.wireframe = _0x3925d3.wireframe;
            this.wireframeLinewidth = _0x3925d3.wireframeLinewidth;
            this.wireframeLinecap = _0x3925d3.wireframeLinecap;
            this.wireframeLinejoin = _0x3925d3.wireframeLinejoin;
            return this;
          }
        }
        _0x4c4e20.prototype.isMeshBasicMaterial = true;
        const _0x967096 = new _0x1d20ef();
        const _0x2b3cff = new _0x25f874();
        class _0x570a7f {
          constructor(_0x24673a, _0x5ce77a, _0x504c58) {
            if (Array.isArray(_0x24673a)) {
              throw new TypeError("`````````````");
            }
            this.name = "";
            this.array = _0x24673a;
            this.itemSize = _0x5ce77a;
            this.count = _0x24673a !== undefined ? _0x24673a.length / _0x5ce77a : 0;
            this.normalized = _0x504c58 === true;
            this.usage = _0x4d2364;
            this.updateRange = {
              offset: 0,
              count: -1
            };
            this.version = 0;
          }
          onUploadCallback() {}
          set needsUpdate(_0x3abbe5) {
            if (_0x3abbe5 === true) {
              this.version++;
            }
          }
          setUsage(_0x3f6b1b) {
            this.usage = _0x3f6b1b;
            return this;
          }
          copy(_0x2641fa) {
            this.name = _0x2641fa.name;
            this.array = new _0x2641fa.array.constructor(_0x2641fa.array);
            this.itemSize = _0x2641fa.itemSize;
            this.count = _0x2641fa.count;
            this.normalized = _0x2641fa.normalized;
            this.usage = _0x2641fa.usage;
            return this;
          }
          copyAt(_0x31aa09, _0x24f63d, _0x4c9a47) {
            _0x31aa09 *= this.itemSize;
            _0x4c9a47 *= _0x24f63d.itemSize;
            for (let _0x44cccb = 0, _0x1f13a6 = this.itemSize; _0x44cccb < _0x1f13a6; _0x44cccb++) {
              this.array[_0x31aa09 + _0x44cccb] = _0x24f63d.array[_0x4c9a47 + _0x44cccb];
            }
            return this;
          }
          copyArray(_0x3bd5ae) {
            this.array.set(_0x3bd5ae);
            return this;
          }
          copyColorsArray(_0x438d7f) {
            var _0x3eb4d0;
            const _0x5bb35c = this.array;
            _0x3eb4d0 = 1;
            let _0x2592b7 = 0;
            for (let _0x57d55c = 0, _0x3adfe9 = _0x438d7f.length; _0x57d55c < _0x3adfe9; _0x57d55c++) {
              let _0x448538 = _0x438d7f[_0x57d55c];
              if (_0x448538 === undefined) {
                _0x448538 = new _0x1282c2();
              }
              _0x5bb35c[_0x2592b7++] = _0x448538.r;
              _0x5bb35c[_0x2592b7++] = _0x448538.g;
              _0x5bb35c[_0x2592b7++] = _0x448538.b;
            }
            return this;
          }
          copyVector2sArray(_0x4424b4) {
            const _0x21d36d = this.array;
            let _0x4ed891 = 0;
            for (let _0x37a3aa = 0, _0x3e0072 = _0x4424b4.length; _0x37a3aa < _0x3e0072; _0x37a3aa++) {
              let _0x20059d = _0x4424b4[_0x37a3aa];
              if (_0x20059d === undefined) {
                _0x20059d = new _0x25f874();
              }
              _0x21d36d[_0x4ed891++] = _0x20059d.x;
              _0x21d36d[_0x4ed891++] = _0x20059d.y;
            }
            return this;
          }
          copyVector3sArray(_0x7332a5) {
            const _0x50e25e = this.array;
            let _0x4b875d = 0;
            for (let _0x3ad984 = 0, _0x1c197f = _0x7332a5.length; _0x3ad984 < _0x1c197f; _0x3ad984++) {
              let _0x3ae5d1 = _0x7332a5[_0x3ad984];
              if (_0x3ae5d1 === undefined) {
                _0x3ae5d1 = new _0x1d20ef();
              }
              _0x50e25e[_0x4b875d++] = _0x3ae5d1.x;
              _0x50e25e[_0x4b875d++] = _0x3ae5d1.y;
              _0x50e25e[_0x4b875d++] = _0x3ae5d1.z;
            }
            return this;
          }
          copyVector4sArray(_0x5784a3) {
            const _0xd7c01d = this.array;
            let _0x173b71 = 0;
            for (let _0x1bf234 = 0, _0x217567 = _0x5784a3.length; _0x1bf234 < _0x217567; _0x1bf234++) {
              var _0x3c5487 = 9;
              let _0x48824c = _0x5784a3[_0x1bf234];
              _0x3c5487 = 7;
              if (_0x48824c === undefined) {
                _0x48824c = new _0x275701();
              }
              _0xd7c01d[_0x173b71++] = _0x48824c.x;
              _0xd7c01d[_0x173b71++] = _0x48824c.y;
              _0xd7c01d[_0x173b71++] = _0x48824c.z;
              _0xd7c01d[_0x173b71++] = _0x48824c.w;
            }
            return this;
          }
          applyMatrix3(_0x56c29e) {
            if (this.itemSize === 2) {
              for (let _0x2eeabc = 0, _0x273147 = this.count; _0x2eeabc < _0x273147; _0x2eeabc++) {
                _0x2b3cff.fromBufferAttribute(this, _0x2eeabc);
                _0x2b3cff.applyMatrix3(_0x56c29e);
                this.setXY(_0x2eeabc, _0x2b3cff.x, _0x2b3cff.y);
              }
            } else if (this.itemSize === 3) {
              for (let _0x6517ef = 0, _0x5d1de7 = this.count; _0x6517ef < _0x5d1de7; _0x6517ef++) {
                _0x967096.fromBufferAttribute(this, _0x6517ef);
                _0x967096.applyMatrix3(_0x56c29e);
                this.setXYZ(_0x6517ef, _0x967096.x, _0x967096.y, _0x967096.z);
              }
            }
            return this;
          }
          applyMatrix4(_0x1e429f) {
            for (let _0x25e762 = 0, _0x5bde9b = this.count; _0x25e762 < _0x5bde9b; _0x25e762++) {
              _0x967096.x = this.getX(_0x25e762);
              _0x967096.y = this.getY(_0x25e762);
              _0x967096.z = this.getZ(_0x25e762);
              _0x967096.applyMatrix4(_0x1e429f);
              this.setXYZ(_0x25e762, _0x967096.x, _0x967096.y, _0x967096.z);
            }
            return this;
          }
          applyNormalMatrix(_0x550030) {
            for (let _0x44703e = 0, _0x881278 = this.count; _0x44703e < _0x881278; _0x44703e++) {
              _0x967096.x = this.getX(_0x44703e);
              _0x967096.y = this.getY(_0x44703e);
              _0x967096.z = this.getZ(_0x44703e);
              _0x967096.applyNormalMatrix(_0x550030);
              this.setXYZ(_0x44703e, _0x967096.x, _0x967096.y, _0x967096.z);
            }
            return this;
          }
          transformDirection(_0x348530) {
            for (let _0x59b22d = 0, _0x281eae = this.count; _0x59b22d < _0x281eae; _0x59b22d++) {
              _0x967096.x = this.getX(_0x59b22d);
              _0x967096.y = this.getY(_0x59b22d);
              _0x967096.z = this.getZ(_0x59b22d);
              _0x967096.transformDirection(_0x348530);
              this.setXYZ(_0x59b22d, _0x967096.x, _0x967096.y, _0x967096.z);
            }
            return this;
          }
          set(_0x20814a, _0x1e67a0 = 0) {
            this.array.set(_0x20814a, _0x1e67a0);
            return this;
          }
          getX(_0x355bc6) {
            return this.array[_0x355bc6 * this.itemSize];
          }
          setX(_0xf2865a, _0x1f3f1c) {
            this.array[_0xf2865a * this.itemSize] = _0x1f3f1c;
            return this;
          }
          getY(_0x57e9ba) {
            return this.array[_0x57e9ba * this.itemSize + 1];
          }
          setY(_0x129a60, _0x5c8f8e) {
            this.array[_0x129a60 * this.itemSize + 1] = _0x5c8f8e;
            return this;
          }
          getZ(_0x296f2c) {
            return this.array[_0x296f2c * this.itemSize + 2];
          }
          setZ(_0x3509d7, _0xbe5e2c) {
            this.array[_0x3509d7 * this.itemSize + 2] = _0xbe5e2c;
            return this;
          }
          getW(_0x1fb68e) {
            return this.array[_0x1fb68e * this.itemSize + 3];
          }
          setW(_0x117616, _0x5ebcd7) {
            this.array[_0x117616 * this.itemSize + 3] = _0x5ebcd7;
            return this;
          }
          setXY(_0x37c764, _0x351171, _0x278d6b) {
            _0x37c764 *= this.itemSize;
            this.array[_0x37c764 + 0] = _0x351171;
            this.array[_0x37c764 + 1] = _0x278d6b;
            return this;
          }
          setXYZ(_0x83ad1b, _0x5463bf, _0x2ea989, _0x1c1609) {
            _0x83ad1b *= this.itemSize;
            this.array[_0x83ad1b + 0] = _0x5463bf;
            this.array[_0x83ad1b + 1] = _0x2ea989;
            this.array[_0x83ad1b + 2] = _0x1c1609;
            return this;
          }
          setXYZW(_0x30e42a, _0x23769d, _0x2451bc, _0xa418d6, _0xc7dbb5) {
            _0x30e42a *= this.itemSize;
            this.array[_0x30e42a + 0] = _0x23769d;
            this.array[_0x30e42a + 1] = _0x2451bc;
            this.array[_0x30e42a + 2] = _0xa418d6;
            this.array[_0x30e42a + 3] = _0xc7dbb5;
            return this;
          }
          onUpload(_0x1a34f1) {
            this.onUploadCallback = _0x1a34f1;
            return this;
          }
          clone() {
            return new this.constructor(this.array, this.itemSize).copy(this);
          }
          toJSON() {
            const _0x1712f2 = {
              itemSize: this.itemSize,
              type: this.array.constructor.name,
              array: Array.prototype.slice.call(this.array),
              normalized: this.normalized
            };
            if (this.name !== "") {
              _0x1712f2.name = this.name;
            }
            if (this.usage !== _0x4d2364) {
              _0x1712f2.usage = this.usage;
            }
            if (!(this.updateRange.offset === 0 && this.updateRange.count === -1)) {
              _0x1712f2.updateRange = this.updateRange;
            }
            return _0x1712f2;
          }
        }
        _0x570a7f.prototype.isBufferAttribute = true;
        class _0x17f91a extends _0x570a7f {
          constructor(_0x31e2ba, _0x4e4bbf, _0x39032f) {
            super(new Int8Array(_0x31e2ba), _0x4e4bbf, _0x39032f);
          }
        }
        class _0x2ecd21 extends _0x570a7f {
          constructor(_0x1a9bc4, _0x3fc46c, _0x2756fd) {
            super(new Uint8Array(_0x1a9bc4), _0x3fc46c, _0x2756fd);
          }
        }
        class _0x472dcd extends _0x570a7f {
          constructor(_0xda8f12, _0x498e6a, _0x342262) {
            super(new Uint8ClampedArray(_0xda8f12), _0x498e6a, _0x342262);
          }
        }
        class _0x176362 extends _0x570a7f {
          constructor(_0x33637a, _0x115c11, _0x3f5e18) {
            super(new Int16Array(_0x33637a), _0x115c11, _0x3f5e18);
          }
        }
        class _0x564c79 extends _0x570a7f {
          constructor(_0x18427f, _0x38ce11, _0x59679b) {
            super(new Uint16Array(_0x18427f), _0x38ce11, _0x59679b);
          }
        }
        class _0x4fac2f extends _0x570a7f {
          constructor(_0x22daaf, _0x2cd4c7, _0x2d9bd6) {
            super(new Int32Array(_0x22daaf), _0x2cd4c7, _0x2d9bd6);
          }
        }
        class _0x3026e9 extends _0x570a7f {
          constructor(_0x54fdfa, _0x1869ef, _0x538163) {
            super(new Uint32Array(_0x54fdfa), _0x1869ef, _0x538163);
          }
        }
        class _0xbcf0c7 extends _0x570a7f {
          constructor(_0x332ac5, _0x3f8abb, _0x33621c) {
            super(new Uint16Array(_0x332ac5), _0x3f8abb, _0x33621c);
          }
        }
        _0xbcf0c7.prototype.isFloat16BufferAttribute = true;
        class _0x17b758 extends _0x570a7f {
          constructor(_0x855404, _0x3ba876, _0x203465) {
            super(new Float32Array(_0x855404), _0x3ba876, _0x203465);
          }
        }
        class _0x474199 extends _0x570a7f {
          constructor(_0x370eee, _0x2ba81d, _0x369ab7) {
            super(new Float64Array(_0x370eee), _0x2ba81d, _0x369ab7);
          }
        }
        let _0x5a04aa = 0;
        const _0x2ad657 = new _0x33b2c9();
        const _0x4d651a = new _0x3b73b1();
        const _0x44e120 = new _0x1d20ef();
        const _0x1d70b7 = new _0x227d92();
        const _0xdf7ec7 = new _0x227d92();
        const _0x39252f = new _0x1d20ef();
        class _0x3f374d extends _0x3a55ab {
          constructor() {
            super();
            Object.defineProperty(this, "id", {
              value: _0x5a04aa++
            });
            this.uuid = _0x2b30b2();
            this.name = "";
            this.type = "BufferGeometry";
            this.index = null;
            this.attributes = {};
            this.morphAttributes = {};
            this.morphTargetsRelative = false;
            this.groups = [];
            this.boundingBox = null;
            this.boundingSphere = null;
            this.drawRange = {
              start: 0,
              count: Infinity
            };
            this.userData = {};
          }
          getIndex() {
            return this.index;
          }
          setIndex(_0x3f2e99) {
            if (Array.isArray(_0x3f2e99)) {
              this.index = new (_0x301bd1(_0x3f2e99) > 65535 ? _0x3026e9 : _0x564c79)(_0x3f2e99, 1);
            } else {
              this.index = _0x3f2e99;
            }
            return this;
          }
          getAttribute(_0x2c28eb) {
            return this.attributes[_0x2c28eb];
          }
          setAttribute(_0x49b559, _0x539010) {
            this.attributes[_0x49b559] = _0x539010;
            return this;
          }
          deleteAttribute(_0x4a7ca4) {
            delete this.attributes[_0x4a7ca4];
            return this;
          }
          hasAttribute(_0x13a209) {
            return this.attributes[_0x13a209] !== undefined;
          }
          addGroup(_0x1840f0, _0x3b1f92, _0x4ceb08 = 0) {
            this.groups.push({
              start: _0x1840f0,
              count: _0x3b1f92,
              materialIndex: _0x4ceb08
            });
          }
          clearGroups() {
            this.groups = [];
          }
          setDrawRange(_0x37cfc1, _0xbc8135) {
            this.drawRange.start = _0x37cfc1;
            this.drawRange.count = _0xbc8135;
          }
          applyMatrix4(_0x4fa50c) {
            const _0x2c42b3 = this.attributes.position;
            if (_0x2c42b3 !== undefined) {
              _0x2c42b3.applyMatrix4(_0x4fa50c);
              _0x2c42b3.needsUpdate = true;
            }
            const _0x5a2a52 = this.attributes.normal;
            var _0x9bdd88;
            if (_0x5a2a52 !== undefined) {
              _0x9bdd88 = new _0x30cf5e().getNormalMatrix(_0x4fa50c);
              _0x5a2a52.applyNormalMatrix(_0x9bdd88);
              _0x5a2a52.needsUpdate = true;
            }
            var _0x150082;
            const _0x5322b2 = this.attributes.tangent;
            _0x150082 = 6;
            if (_0x5322b2 !== undefined) {
              _0x5322b2.transformDirection(_0x4fa50c);
              _0x5322b2.needsUpdate = true;
            }
            if (this.boundingBox !== null) {
              this.computeBoundingBox();
            }
            if (this.boundingSphere !== null) {
              this.computeBoundingSphere();
            }
            return this;
          }
          applyQuaternion(_0x6b9545) {
            _0x2ad657.makeRotationFromQuaternion(_0x6b9545);
            this.applyMatrix4(_0x2ad657);
            return this;
          }
          rotateX(_0x2d0a27) {
            _0x2ad657.makeRotationX(_0x2d0a27);
            this.applyMatrix4(_0x2ad657);
            return this;
          }
          ["Yetator".split("").reverse().join("")](_0x4f736b) {
            _0x2ad657.makeRotationY(_0x4f736b);
            this.applyMatrix4(_0x2ad657);
            return this;
          }
          rotateZ(_0x56d19d) {
            _0x2ad657.makeRotationZ(_0x56d19d);
            this.applyMatrix4(_0x2ad657);
            return this;
          }
          translate(_0x1d804b, _0x16cd44, _0x3382ba) {
            _0x2ad657.makeTranslation(_0x1d804b, _0x16cd44, _0x3382ba);
            this.applyMatrix4(_0x2ad657);
            return this;
          }
          scale(_0xc52db0, _0x55e581, _0x8e1912) {
            _0x2ad657.makeScale(_0xc52db0, _0x55e581, _0x8e1912);
            this.applyMatrix4(_0x2ad657);
            return this;
          }
          lookAt(_0x4c58a5) {
            _0x4d651a.lookAt(_0x4c58a5);
            _0x4d651a.updateMatrix();
            this.applyMatrix4(_0x4d651a.matrix);
            return this;
          }
          center() {
            this.computeBoundingBox();
            this.boundingBox.getCenter(_0x44e120).negate();
            this.translate(_0x44e120.x, _0x44e120.y, _0x44e120.z);
            return this;
          }
          setFromPoints(_0x43c55a) {
            const _0x4b7a63 = [];
            for (let _0x34fb11 = 0, _0x3df722 = _0x43c55a.length; _0x34fb11 < _0x3df722; _0x34fb11++) {
              var _0x11d19e = _0x43c55a[_0x34fb11];
              _0x4b7a63.push(_0x11d19e.x, _0x11d19e.y, _0x11d19e.z || 0);
            }
            this.setAttribute("position", new _0x17b758(_0x4b7a63, 3));
            return this;
          }
          computeBoundingBox() {
            if (this.boundingBox === null) {
              this.boundingBox = new _0x227d92();
            }
            var _0x3546bb = this.attributes.position;
            var _0x5cffcf = this.morphAttributes.position;
            if (_0x3546bb && _0x3546bb.isGLBufferAttribute) {
              this.boundingBox.set(new _0x1d20ef(-Infinity, -Infinity, -Infinity), new _0x1d20ef(Infinity, Infinity, Infinity));
            } else {
              if (_0x3546bb !== undefined) {
                this.boundingBox.setFromBufferAttribute(_0x3546bb);
                if (_0x5cffcf) {
                  for (let _0x159569 = 0, _0x4ef108 = _0x5cffcf.length; _0x159569 < _0x4ef108; _0x159569++) {
                    var _0x37bf61 = _0x5cffcf[_0x159569];
                    _0x1d70b7.setFromBufferAttribute(_0x37bf61);
                    if (this.morphTargetsRelative) {
                      _0x39252f.addVectors(this.boundingBox.min, _0x1d70b7.min);
                      this.boundingBox.expandByPoint(_0x39252f);
                      _0x39252f.addVectors(this.boundingBox.max, _0x1d70b7.max);
                      this.boundingBox.expandByPoint(_0x39252f);
                    } else {
                      this.boundingBox.expandByPoint(_0x1d70b7.min);
                      this.boundingBox.expandByPoint(_0x1d70b7.max);
                    }
                  }
                }
              } else {
                this.boundingBox.makeEmpty();
              }
              if (!(isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y))) {
                isNaN(this.boundingBox.min.z);
              }
            }
          }
          computeBoundingSphere() {
            if (this.boundingSphere === null) {
              this.boundingSphere = new _0x26f734();
            }
            var _0x540a55 = this.attributes.position;
            var _0x32dd36 = this.morphAttributes.position;
            if (_0x540a55 && _0x540a55.isGLBufferAttribute) {
              this.boundingSphere.set(new _0x1d20ef(), Infinity);
            } else if (_0x540a55) {
              const _0x5d48d2 = this.boundingSphere.center;
              _0x1d70b7.setFromBufferAttribute(_0x540a55);
              if (_0x32dd36) {
                for (let _0x42a66e = 0, _0x4ccb6b = _0x32dd36.length; _0x42a66e < _0x4ccb6b; _0x42a66e++) {
                  var _0x596bcc = _0x32dd36[_0x42a66e];
                  _0xdf7ec7.setFromBufferAttribute(_0x596bcc);
                  if (this.morphTargetsRelative) {
                    _0x39252f.addVectors(_0x1d70b7.min, _0xdf7ec7.min);
                    _0x1d70b7.expandByPoint(_0x39252f);
                    _0x39252f.addVectors(_0x1d70b7.max, _0xdf7ec7.max);
                    _0x1d70b7.expandByPoint(_0x39252f);
                  } else {
                    _0x1d70b7.expandByPoint(_0xdf7ec7.min);
                    _0x1d70b7.expandByPoint(_0xdf7ec7.max);
                  }
                }
              }
              _0x1d70b7.getCenter(_0x5d48d2);
              let _0x576647 = 0;
              for (let _0x1653aa = 0, _0x3f2041 = _0x540a55.count; _0x1653aa < _0x3f2041; _0x1653aa++) {
                _0x39252f.fromBufferAttribute(_0x540a55, _0x1653aa);
                _0x576647 = Math.max(_0x576647, _0x5d48d2.distanceToSquared(_0x39252f));
              }
              if (_0x32dd36) {
                for (let _0xa6c16d = 0, _0x9c948a = _0x32dd36.length; _0xa6c16d < _0x9c948a; _0xa6c16d++) {
                  var _0x3f1ed7 = _0x32dd36[_0xa6c16d];
                  var _0x244f4b = this.morphTargetsRelative;
                  for (let _0xc1ab5f = 0, _0x2440ce = _0x3f1ed7.count; _0xc1ab5f < _0x2440ce; _0xc1ab5f++) {
                    _0x39252f.fromBufferAttribute(_0x3f1ed7, _0xc1ab5f);
                    if (_0x244f4b) {
                      _0x44e120.fromBufferAttribute(_0x540a55, _0xc1ab5f);
                      _0x39252f.add(_0x44e120);
                    }
                    _0x576647 = Math.max(_0x576647, _0x5d48d2.distanceToSquared(_0x39252f));
                  }
                }
              }
              this.boundingSphere.radius = Math.sqrt(_0x576647);
              isNaN(this.boundingSphere.radius);
            }
          }
          computeTangents() {
            var _0x1c4da5 = this.index;
            var _0x312fd7 = this.attributes;
            if (_0x1c4da5 !== null && _0x312fd7.position !== undefined && _0x312fd7.normal !== undefined && _0x312fd7.uv !== undefined) {
              var _0x5736a6 = 16;
              var _0x5e9e20 = _0x1c4da5.array;
              _0x5736a6 = 7;
              const _0x19e7ca = _0x312fd7.position.array;
              const _0x268152 = _0x312fd7.normal.array;
              const _0x500bd8 = _0x312fd7.uv.array;
              var _0x569512 = _0x19e7ca.length / 3;
              if (_0x312fd7.tangent === undefined) {
                this.setAttribute("tangent", new _0x570a7f(new Float32Array(_0x569512 * 4), 4));
              }
              const _0x4fda59 = _0x312fd7.tangent.array;
              const _0x28c04f = [];
              const _0x3f9850 = [];
              for (let _0x5f0079 = 0; _0x5f0079 < _0x569512; _0x5f0079++) {
                _0x28c04f[_0x5f0079] = new _0x1d20ef();
                _0x3f9850[_0x5f0079] = new _0x1d20ef();
              }
              const _0x50a679 = new _0x1d20ef();
              const _0x4d1dcc = new _0x1d20ef();
              const _0x50b57a = new _0x1d20ef();
              const _0x1b4a06 = new _0x25f874();
              const _0x406d4f = new _0x25f874();
              const _0x52b593 = new _0x25f874();
              const _0x2e19fe = new _0x1d20ef();
              const _0x10be08 = new _0x1d20ef();
              let _0x2b8d05 = this.groups;
              if (_0x2b8d05.length === 0) {
                _0x2b8d05 = [{
                  start: 0,
                  count: _0x5e9e20.length
                }];
              }
              for (let _0x2ddc3f = 0, _0x3dc9aa = _0x2b8d05.length; _0x2ddc3f < _0x3dc9aa; ++_0x2ddc3f) {
                var _0x45b33f = _0x2b8d05[_0x2ddc3f];
                var _0x256204 = _0x45b33f.start;
                for (let _0x7e4654 = _0x256204, _0x1e67f8 = _0x256204 + _0x45b33f.count; _0x7e4654 < _0x1e67f8; _0x7e4654 += 3) {
                  (function (_0x17e07e, _0x5f47d8, _0x4f5e6f) {
                    _0x50a679.fromArray(_0x19e7ca, _0x17e07e * 3);
                    _0x4d1dcc.fromArray(_0x19e7ca, _0x5f47d8 * 3);
                    _0x50b57a.fromArray(_0x19e7ca, _0x4f5e6f * 3);
                    _0x1b4a06.fromArray(_0x500bd8, _0x17e07e * 2);
                    _0x406d4f.fromArray(_0x500bd8, _0x5f47d8 * 2);
                    _0x52b593.fromArray(_0x500bd8, _0x4f5e6f * 2);
                    _0x4d1dcc.sub(_0x50a679);
                    _0x50b57a.sub(_0x50a679);
                    _0x406d4f.sub(_0x1b4a06);
                    _0x52b593.sub(_0x1b4a06);
                    var _0x52f846 = 1 / (_0x406d4f.x * _0x52b593.y - _0x52b593.x * _0x406d4f.y);
                    if (isFinite(_0x52f846)) {
                      _0x2e19fe.copy(_0x4d1dcc).multiplyScalar(_0x52b593.y).addScaledVector(_0x50b57a, -_0x406d4f.y).multiplyScalar(_0x52f846);
                      _0x10be08.copy(_0x50b57a).multiplyScalar(_0x406d4f.x).addScaledVector(_0x4d1dcc, -_0x52b593.x).multiplyScalar(_0x52f846);
                      _0x28c04f[_0x17e07e].add(_0x2e19fe);
                      _0x28c04f[_0x5f47d8].add(_0x2e19fe);
                      _0x28c04f[_0x4f5e6f].add(_0x2e19fe);
                      _0x3f9850[_0x17e07e].add(_0x10be08);
                      _0x3f9850[_0x5f47d8].add(_0x10be08);
                      _0x3f9850[_0x4f5e6f].add(_0x10be08);
                    }
                  })(_0x5e9e20[_0x7e4654 + 0], _0x5e9e20[_0x7e4654 + 1], _0x5e9e20[_0x7e4654 + 2]);
                }
              }
              const _0x498749 = new _0x1d20ef();
              const _0x49e19f = new _0x1d20ef();
              const _0x2a9f19 = new _0x1d20ef();
              const _0x52ec5a = new _0x1d20ef();
              for (let _0x4764f0 = 0, _0x54ba2c = _0x2b8d05.length; _0x4764f0 < _0x54ba2c; ++_0x4764f0) {
                var _0xca0c78 = _0x2b8d05[_0x4764f0];
                var _0x5d0071 = _0xca0c78.start;
                for (let _0x5d0067 = _0x5d0071, _0x5e37aa = _0x5d0071 + _0xca0c78.count; _0x5d0067 < _0x5e37aa; _0x5d0067 += 3) {
                  _0x56a33d(_0x5e9e20[_0x5d0067 + 0]);
                  _0x56a33d(_0x5e9e20[_0x5d0067 + 1]);
                  _0x56a33d(_0x5e9e20[_0x5d0067 + 2]);
                }
              }
              function _0x56a33d(_0x23190a) {
                _0x2a9f19.fromArray(_0x268152, _0x23190a * 3);
                _0x52ec5a.copy(_0x2a9f19);
                var _0x4ca9ec = 12;
                var _0x51712d = _0x28c04f[_0x23190a];
                _0x4ca9ec = 8;
                _0x498749.copy(_0x51712d);
                _0x498749.sub(_0x2a9f19.multiplyScalar(_0x2a9f19.dot(_0x51712d))).normalize();
                _0x49e19f.crossVectors(_0x52ec5a, _0x51712d);
                _0x51712d = _0x49e19f.dot(_0x3f9850[_0x23190a]) < 0 ? -1 : 1;
                _0x4fda59[_0x23190a * 4] = _0x498749.x;
                _0x4fda59[_0x23190a * 4 + 1] = _0x498749.y;
                _0x4fda59[_0x23190a * 4 + 2] = _0x498749.z;
                _0x4fda59[_0x23190a * 4 + 3] = _0x51712d;
              }
            }
          }
          computeVertexNormals() {
            var _0x18613e = 10;
            const _0x5231b5 = this.index;
            _0x18613e = 9;
            var _0x20ea35 = this.getAttribute("position");
            if (_0x20ea35 !== undefined) {
              var _0x464288;
              let _0x4a220e = this.getAttribute("normal");
              _0x464288 = 13;
              if (_0x4a220e === undefined) {
                _0x4a220e = new _0x570a7f(new Float32Array(_0x20ea35.count * 3), 3);
                this.setAttribute("normal", _0x4a220e);
              } else {
                for (let _0x1b0011 = 0, _0x2e6b1d = _0x4a220e.count; _0x1b0011 < _0x2e6b1d; _0x1b0011++) {
                  _0x4a220e.setXYZ(_0x1b0011, 0, 0, 0);
                }
              }
              const _0x5934da = new _0x1d20ef();
              const _0x4c7760 = new _0x1d20ef();
              const _0x514bd8 = new _0x1d20ef();
              const _0x172202 = new _0x1d20ef();
              const _0x2715da = new _0x1d20ef();
              const _0xd7259c = new _0x1d20ef();
              const _0x258bb8 = new _0x1d20ef();
              const _0x5a9d52 = new _0x1d20ef();
              if (_0x5231b5) {
                for (let _0xb80160 = 0, _0x48c423 = _0x5231b5.count; _0xb80160 < _0x48c423; _0xb80160 += 3) {
                  var _0x11ff11 = _0x5231b5.getX(_0xb80160 + 0);
                  var _0x3e7cc9 = _0x5231b5.getX(_0xb80160 + 1);
                  var _0x399261 = _0x5231b5.getX(_0xb80160 + 2);
                  _0x5934da.fromBufferAttribute(_0x20ea35, _0x11ff11);
                  _0x4c7760.fromBufferAttribute(_0x20ea35, _0x3e7cc9);
                  _0x514bd8.fromBufferAttribute(_0x20ea35, _0x399261);
                  _0x258bb8.subVectors(_0x514bd8, _0x4c7760);
                  _0x5a9d52.subVectors(_0x5934da, _0x4c7760);
                  _0x258bb8.cross(_0x5a9d52);
                  _0x172202.fromBufferAttribute(_0x4a220e, _0x11ff11);
                  _0x2715da.fromBufferAttribute(_0x4a220e, _0x3e7cc9);
                  _0xd7259c.fromBufferAttribute(_0x4a220e, _0x399261);
                  _0x172202.add(_0x258bb8);
                  _0x2715da.add(_0x258bb8);
                  _0xd7259c.add(_0x258bb8);
                  _0x4a220e.setXYZ(_0x11ff11, _0x172202.x, _0x172202.y, _0x172202.z);
                  _0x4a220e.setXYZ(_0x3e7cc9, _0x2715da.x, _0x2715da.y, _0x2715da.z);
                  _0x4a220e.setXYZ(_0x399261, _0xd7259c.x, _0xd7259c.y, _0xd7259c.z);
                }
              } else {
                for (let _0x24f75d = 0, _0x581f86 = _0x20ea35.count; _0x24f75d < _0x581f86; _0x24f75d += 3) {
                  _0x5934da.fromBufferAttribute(_0x20ea35, _0x24f75d + 0);
                  _0x4c7760.fromBufferAttribute(_0x20ea35, _0x24f75d + 1);
                  _0x514bd8.fromBufferAttribute(_0x20ea35, _0x24f75d + 2);
                  _0x258bb8.subVectors(_0x514bd8, _0x4c7760);
                  _0x5a9d52.subVectors(_0x5934da, _0x4c7760);
                  _0x258bb8.cross(_0x5a9d52);
                  _0x4a220e.setXYZ(_0x24f75d + 0, _0x258bb8.x, _0x258bb8.y, _0x258bb8.z);
                  _0x4a220e.setXYZ(_0x24f75d + 1, _0x258bb8.x, _0x258bb8.y, _0x258bb8.z);
                  _0x4a220e.setXYZ(_0x24f75d + 2, _0x258bb8.x, _0x258bb8.y, _0x258bb8.z);
                }
              }
              this.normalizeNormals();
              _0x4a220e.needsUpdate = true;
            }
          }
          merge(_0xc89223, _0x6b5346) {
            if (_0xc89223 && _0xc89223.isBufferGeometry) {
              if (_0x6b5346 === undefined) {
                _0x6b5346 = 0;
              }
              var _0x5de1f9 = this.attributes;
              for (const _0x53e6d2 in _0x5de1f9) {
                if (_0xc89223.attributes[_0x53e6d2] !== undefined) {
                  const _0xa35d48 = _0x5de1f9[_0x53e6d2].array;
                  var _0x2b48c9 = _0xc89223.attributes[_0x53e6d2];
                  var _0x3f6ccd = _0x2b48c9.array;
                  _0x2b48c9 = _0x2b48c9.itemSize * _0x6b5346;
                  var _0x46c2a8 = Math.min(_0x3f6ccd.length, _0xa35d48.length - _0x2b48c9);
                  for (let _0x228c6c = 0, _0x20a361 = _0x2b48c9; _0x228c6c < _0x46c2a8; _0x228c6c++, _0x20a361++) {
                    _0xa35d48[_0x20a361] = _0x3f6ccd[_0x228c6c];
                  }
                }
              }
              return this;
            }
          }
          normalizeNormals() {
            const _0x53bb98 = this.attributes.normal;
            for (let _0x571212 = 0, _0xcbacc4 = _0x53bb98.count; _0x571212 < _0xcbacc4; _0x571212++) {
              _0x39252f.fromBufferAttribute(_0x53bb98, _0x571212);
              _0x39252f.normalize();
              _0x53bb98.setXYZ(_0x571212, _0x39252f.x, _0x39252f.y, _0x39252f.z);
            }
          }
          toNonIndexed() {
            function _0xcea29a(_0x4d1ecb, _0xcba9c4) {
              var _0x3d9c27 = 11;
              const _0x3d9e8b = _0x4d1ecb.array;
              _0x3d9c27 = 9;
              var _0x4aa244 = _0x4d1ecb.itemSize;
              var _0x12de6b = _0x4d1ecb.normalized;
              const _0x4cf9bf = new _0x3d9e8b.constructor(_0xcba9c4.length * _0x4aa244);
              let _0x20523e = 0;
              let _0x593408 = 0;
              for (let _0x5c8e97 = 0, _0x2ca741 = _0xcba9c4.length; _0x5c8e97 < _0x2ca741; _0x5c8e97++) {
                _0x20523e = _0x4d1ecb.isInterleavedBufferAttribute ? _0xcba9c4[_0x5c8e97] * _0x4d1ecb.data.stride + _0x4d1ecb.offset : _0xcba9c4[_0x5c8e97] * _0x4aa244;
                for (let _0x2931f2 = 0; _0x2931f2 < _0x4aa244; _0x2931f2++) {
                  _0x4cf9bf[_0x593408++] = _0x3d9e8b[_0x20523e++];
                }
              }
              return new _0x570a7f(_0x4cf9bf, _0x4aa244, _0x12de6b);
            }
            if (this.index === null) {
              return this;
            }
            const _0x9d9d0f = new _0x3f374d();
            var _0x3b506c = this.index.array;
            var _0x347290 = this.attributes;
            for (const _0x1d3f15 in _0x347290) {
              var _0x2c4c54;
              var _0x44d3d6 = _0xcea29a(_0x347290[_0x1d3f15], _0x3b506c);
              _0x2c4c54 = 11;
              _0x9d9d0f.setAttribute(_0x1d3f15, _0x44d3d6);
            }
            var _0x53d1d6 = this.morphAttributes;
            for (const _0x5cef5a in _0x53d1d6) {
              var _0x1d267a;
              const _0x540daa = [];
              _0x1d267a = 5;
              var _0x1482c0 = _0x53d1d6[_0x5cef5a];
              for (let _0x255542 = 0, _0x80e595 = _0x1482c0.length; _0x255542 < _0x80e595; _0x255542++) {
                var _0x2ab50b = _0xcea29a(_0x1482c0[_0x255542], _0x3b506c);
                _0x540daa.push(_0x2ab50b);
              }
              _0x9d9d0f.morphAttributes[_0x5cef5a] = _0x540daa;
            }
            _0x9d9d0f.morphTargetsRelative = this.morphTargetsRelative;
            var _0x498b03 = this.groups;
            for (let _0x4013cc = 0, _0x259247 = _0x498b03.length; _0x4013cc < _0x259247; _0x4013cc++) {
              var _0x43b56e;
              var _0x13bf75 = _0x498b03[_0x4013cc];
              _0x43b56e = 3;
              _0x9d9d0f.addGroup(_0x13bf75.start, _0x13bf75.count, _0x13bf75.materialIndex);
            }
            return _0x9d9d0f;
          }
          toJSON() {
            const _0x21822d = {
              metadata: {
                version: 4.5,
                type: "BufferGeometry",
                generator: "BufferGeometry.toJSON"
              }
            };
            _0x21822d.uuid = this.uuid;
            _0x21822d.type = this.type;
            if (this.name !== "") {
              _0x21822d.name = this.name;
            }
            if (Object.keys(this.userData).length > 0) {
              _0x21822d.userData = this.userData;
            }
            if (this.parameters !== undefined) {
              var _0xb98035 = this.parameters;
              for (const _0x5777d0 in _0xb98035) {
                if (_0xb98035[_0x5777d0] !== undefined) {
                  _0x21822d[_0x5777d0] = _0xb98035[_0x5777d0];
                }
              }
              return _0x21822d;
            }
            _0x21822d.data = {
              attributes: {}
            };
            var _0x6e44a5 = this.index;
            if (_0x6e44a5 !== null) {
              _0x21822d.data.index = {
                type: _0x6e44a5.array.constructor.name,
                array: Array.prototype.slice.call(_0x6e44a5.array)
              };
            }
            var _0x2650b4 = this.attributes;
            for (const _0x1b0f5c in _0x2650b4) {
              const _0x214a5f = _0x2650b4[_0x1b0f5c];
              _0x21822d.data.attributes[_0x1b0f5c] = _0x214a5f.toJSON(_0x21822d.data);
            }
            const _0x3ae775 = {};
            let _0x3ab76e = false;
            for (const _0x31e975 in this.morphAttributes) {
              var _0x2418c7 = this.morphAttributes[_0x31e975];
              const _0x465ff8 = [];
              for (let _0x52a988 = 0, _0x3e6429 = _0x2418c7.length; _0x52a988 < _0x3e6429; _0x52a988++) {
                const _0x1b79fe = _0x2418c7[_0x52a988];
                _0x465ff8.push(_0x1b79fe.toJSON(_0x21822d.data));
              }
              if (_0x465ff8.length > 0) {
                _0x3ae775[_0x31e975] = _0x465ff8;
                _0x3ab76e = true;
              }
            }
            if (_0x3ab76e) {
              _0x21822d.data.morphAttributes = _0x3ae775;
              _0x21822d.data.morphTargetsRelative = this.morphTargetsRelative;
            }
            if ((_0x6e44a5 = this.groups).length > 0) {
              _0x21822d.data.groups = JSON.parse(JSON.stringify(_0x6e44a5));
            }
            var _0x11707b = 4;
            const _0x433d2f = this.boundingSphere;
            _0x11707b = 9;
            if (_0x433d2f !== null) {
              _0x21822d.data.boundingSphere = {
                center: _0x433d2f.center.toArray(),
                radius: _0x433d2f.radius
              };
            }
            return _0x21822d;
          }
          clone() {
            return new this.constructor().copy(this);
          }
          copy(_0x353dce) {
            this.index = null;
            this.attributes = {};
            this.morphAttributes = {};
            this.groups = [];
            this.boundingBox = null;
            this.boundingSphere = null;
            var _0x3546a8 = {};
            this.name = _0x353dce.name;
            var _0x53df4b;
            const _0x265399 = _0x353dce.index;
            _0x53df4b = "gfbh";
            if (_0x265399 !== null) {
              this.setIndex(_0x265399.clone(_0x3546a8));
            }
            var _0x4aa5b5 = _0x353dce.attributes;
            for (const _0x23bbf6 in _0x4aa5b5) {
              var _0x50421d;
              const _0x282117 = _0x4aa5b5[_0x23bbf6];
              _0x50421d = 1;
              this.setAttribute(_0x23bbf6, _0x282117.clone(_0x3546a8));
            }
            var _0x3ffad0 = _0x353dce.morphAttributes;
            for (const _0x5e46f1 in _0x3ffad0) {
              const _0x48ccf8 = [];
              const _0x2d0560 = _0x3ffad0[_0x5e46f1];
              for (let _0x1f117c = 0, _0x17ab41 = _0x2d0560.length; _0x1f117c < _0x17ab41; _0x1f117c++) {
                _0x48ccf8.push(_0x2d0560[_0x1f117c].clone(_0x3546a8));
              }
              this.morphAttributes[_0x5e46f1] = _0x48ccf8;
            }
            this.morphTargetsRelative = _0x353dce.morphTargetsRelative;
            var _0x37d84b = 14;
            var _0x1a0f16 = _0x353dce.groups;
            _0x37d84b = 1;
            for (let _0x9681ab = 0, _0x227c10 = _0x1a0f16.length; _0x9681ab < _0x227c10; _0x9681ab++) {
              var _0x511ce4 = _0x1a0f16[_0x9681ab];
              this.addGroup(_0x511ce4.start, _0x511ce4.count, _0x511ce4.materialIndex);
            }
            const _0x20f615 = _0x353dce.boundingBox;
            if (_0x20f615 !== null) {
              this.boundingBox = _0x20f615.clone();
            }
            var _0x105af1;
            const _0xbd6046 = _0x353dce.boundingSphere;
            _0x105af1 = 6;
            if (_0xbd6046 !== null) {
              this.boundingSphere = _0xbd6046.clone();
            }
            this.drawRange.start = _0x353dce.drawRange.start;
            this.drawRange.count = _0x353dce.drawRange.count;
            this.userData = _0x353dce.userData;
            if (_0x353dce.parameters !== undefined) {
              this.parameters = Object.assign({}, _0x353dce.parameters);
            }
            return this;
          }
          dispose() {
            this.dispatchEvent({
              type: "dispose"
            });
          }
        }
        _0x3f374d.prototype.isBufferGeometry = true;
        const _0x1bec9e = new _0x33b2c9();
        const _0x4fa351 = new _0x123ff1();
        const _0x3e7277 = new _0x26f734();
        const _0x29f0d4 = new _0x1d20ef();
        const _0x1ed235 = new _0x1d20ef();
        const _0x4af659 = new _0x1d20ef();
        const _0x77a02a = new _0x1d20ef();
        const _0x5cf668 = new _0x1d20ef();
        const _0x19c7e4 = new _0x1d20ef();
        const _0x37b92d = new _0x1d20ef();
        const _0x1a7569 = new _0x1d20ef();
        const _0xb4acb1 = new _0x1d20ef();
        const _0x240cde = new _0x25f874();
        const _0x525e78 = new _0x25f874();
        const _0x3dbe71 = new _0x25f874();
        const _0x3d0044 = new _0x1d20ef();
        const _0x5b561d = new _0x1d20ef();
        class _0x9b7b04 extends _0x3b73b1 {
          constructor(_0x56fea0 = new _0x3f374d(), _0x230d37 = new _0x4c4e20()) {
            super();
            this.type = "Mesh";
            this.geometry = _0x56fea0;
            this.material = _0x230d37;
            this.updateMorphTargets();
          }
          copy(_0x4c02bf) {
            super.copy(_0x4c02bf);
            if (_0x4c02bf.morphTargetInfluences !== undefined) {
              this.morphTargetInfluences = _0x4c02bf.morphTargetInfluences.slice();
            }
            if (_0x4c02bf.morphTargetDictionary !== undefined) {
              this.morphTargetDictionary = Object.assign({}, _0x4c02bf.morphTargetDictionary);
            }
            this.material = _0x4c02bf.material;
            this.geometry = _0x4c02bf.geometry;
            return this;
          }
          updateMorphTargets() {
            var _0x1b28fa = this.geometry;
            if (_0x1b28fa.isBufferGeometry) {
              var _0x505c03 = _0x1b28fa.morphAttributes;
              var _0x2673cd = Object.keys(_0x505c03);
              if (_0x2673cd.length > 0) {
                var _0x33acc0 = _0x505c03[_0x2673cd[0]];
                if (_0x33acc0 !== undefined) {
                  this.morphTargetInfluences = [];
                  this.morphTargetDictionary = {};
                  for (let _0x24496d = 0, _0x4928a3 = _0x33acc0.length; _0x24496d < _0x4928a3; _0x24496d++) {
                    var _0x2a537b = _0x33acc0[_0x24496d].name || String(_0x24496d);
                    this.morphTargetInfluences.push(0);
                    this.morphTargetDictionary[_0x2a537b] = _0x24496d;
                  }
                }
              }
            } else if ((_0x1b28fa = _0x1b28fa.morphTargets) !== undefined) {
              _0x1b28fa.length;
            }
          }
          raycast(_0x5d4e6e, _0x1e8e35) {
            const _0x31cd9a = this.geometry;
            var _0x95db0f = this.material;
            var _0x5f4d3e = this.matrixWorld;
            if (_0x95db0f !== undefined && (_0x31cd9a.boundingSphere === null && _0x31cd9a.computeBoundingSphere(), _0x3e7277.copy(_0x31cd9a.boundingSphere), _0x3e7277.applyMatrix4(_0x5f4d3e), _0x5d4e6e.ray.intersectsSphere(_0x3e7277) !== false && (_0x1bec9e.copy(_0x5f4d3e).invert(), _0x4fa351.copy(_0x5d4e6e.ray).applyMatrix4(_0x1bec9e), _0x31cd9a.boundingBox === null || _0x4fa351.intersectsBox(_0x31cd9a.boundingBox) !== false))) {
              let _0x5d0451;
              if (_0x31cd9a.isBufferGeometry) {
                var _0x54a71a;
                const _0x4aeab0 = _0x31cd9a.index;
                _0x54a71a = 3;
                var _0xf57819 = _0x31cd9a.attributes.position;
                var _0x4c75ac = _0x31cd9a.morphAttributes.position;
                var _0x3683f7 = _0x31cd9a.morphTargetsRelative;
                var _0x3c6198 = _0x31cd9a.attributes.uv;
                var _0x5a3cc1 = _0x31cd9a.attributes.uv2;
                var _0x1212e6 = _0x31cd9a.groups;
                var _0x35e0bb = _0x31cd9a.drawRange;
                if (_0x4aeab0 !== null) {
                  if (Array.isArray(_0x95db0f)) {
                    for (let _0x4e47ea = 0, _0x1d37ee = _0x1212e6.length; _0x4e47ea < _0x1d37ee; _0x4e47ea++) {
                      var _0x3cc710 = _0x1212e6[_0x4e47ea];
                      var _0x5de17a = _0x95db0f[_0x3cc710.materialIndex];
                      for (let _0x50248a = Math.max(_0x3cc710.start, _0x35e0bb.start), _0x148123 = Math.min(_0x4aeab0.count, Math.min(_0x3cc710.start + _0x3cc710.count, _0x35e0bb.start + _0x35e0bb.count)); _0x50248a < _0x148123; _0x50248a += 3) {
                        var _0x1f72c9 = _0x4aeab0.getX(_0x50248a);
                        var _0x17a5f0 = _0x4aeab0.getX(_0x50248a + 1);
                        var _0x48281d = _0x4aeab0.getX(_0x50248a + 2);
                        _0x5d0451 = _0x5dfa6a(this, _0x5de17a, _0x5d4e6e, _0x4fa351, _0xf57819, _0x4c75ac, _0x3683f7, _0x3c6198, _0x5a3cc1, _0x1f72c9, _0x17a5f0, _0x48281d);
                        if (_0x5d0451) {
                          _0x5d0451.faceIndex = Math.floor(_0x50248a / 3);
                          _0x5d0451.face.materialIndex = _0x3cc710.materialIndex;
                          _0x1e8e35.push(_0x5d0451);
                        }
                      }
                    }
                  } else {
                    for (let _0x1d79b6 = Math.max(0, _0x35e0bb.start), _0x4da33f = Math.min(_0x4aeab0.count, _0x35e0bb.start + _0x35e0bb.count); _0x1d79b6 < _0x4da33f; _0x1d79b6 += 3) {
                      var _0x4e00b0 = _0x4aeab0.getX(_0x1d79b6);
                      var _0x2e504d = _0x4aeab0.getX(_0x1d79b6 + 1);
                      var _0x2a84f3 = _0x4aeab0.getX(_0x1d79b6 + 2);
                      _0x5d0451 = _0x5dfa6a(this, _0x95db0f, _0x5d4e6e, _0x4fa351, _0xf57819, _0x4c75ac, _0x3683f7, _0x3c6198, _0x5a3cc1, _0x4e00b0, _0x2e504d, _0x2a84f3);
                      if (_0x5d0451) {
                        _0x5d0451.faceIndex = Math.floor(_0x1d79b6 / 3);
                        _0x1e8e35.push(_0x5d0451);
                      }
                    }
                  }
                } else if (_0xf57819 !== undefined) {
                  if (Array.isArray(_0x95db0f)) {
                    for (let _0x38d6e4 = 0, _0x51bc6e = _0x1212e6.length; _0x38d6e4 < _0x51bc6e; _0x38d6e4++) {
                      var _0x390daf = _0x1212e6[_0x38d6e4];
                      var _0x1f25f6 = _0x95db0f[_0x390daf.materialIndex];
                      for (let _0x22b58a = Math.max(_0x390daf.start, _0x35e0bb.start), _0x4ad515 = Math.min(_0xf57819.count, Math.min(_0x390daf.start + _0x390daf.count, _0x35e0bb.start + _0x35e0bb.count)); _0x22b58a < _0x4ad515; _0x22b58a += 3) {
                        var _0x10757a = _0x22b58a;
                        var _0x359efd = _0x22b58a + 1;
                        var _0x9160 = _0x22b58a + 2;
                        _0x5d0451 = _0x5dfa6a(this, _0x1f25f6, _0x5d4e6e, _0x4fa351, _0xf57819, _0x4c75ac, _0x3683f7, _0x3c6198, _0x5a3cc1, _0x10757a, _0x359efd, _0x9160);
                        if (_0x5d0451) {
                          _0x5d0451.faceIndex = Math.floor(_0x22b58a / 3);
                          _0x5d0451.face.materialIndex = _0x390daf.materialIndex;
                          _0x1e8e35.push(_0x5d0451);
                        }
                      }
                    }
                  } else {
                    for (let _0x4d12e4 = Math.max(0, _0x35e0bb.start), _0x1ae2a1 = Math.min(_0xf57819.count, _0x35e0bb.start + _0x35e0bb.count); _0x4d12e4 < _0x1ae2a1; _0x4d12e4 += 3) {
                      var _0x57ca0d = _0x4d12e4;
                      var _0x1c8eab = _0x4d12e4 + 1;
                      var _0x4daa20 = _0x4d12e4 + 2;
                      _0x5d0451 = _0x5dfa6a(this, _0x95db0f, _0x5d4e6e, _0x4fa351, _0xf57819, _0x4c75ac, _0x3683f7, _0x3c6198, _0x5a3cc1, _0x57ca0d, _0x1c8eab, _0x4daa20);
                      if (_0x5d0451) {
                        _0x5d0451.faceIndex = Math.floor(_0x4d12e4 / 3);
                        _0x1e8e35.push(_0x5d0451);
                      }
                    }
                  }
                }
              } else {
                _0x31cd9a.isGeometry;
              }
            }
          }
        }
        function _0x5dfa6a(_0x23c579, _0x4c31c3, _0x27b9bc, _0x4241d7, _0x2f565a, _0x20d959, _0x23e323, _0x513cbc, _0x268f4e, _0x311345, _0x4a90c5, _0x569f4b) {
          _0x29f0d4.fromBufferAttribute(_0x2f565a, _0x311345);
          _0x1ed235.fromBufferAttribute(_0x2f565a, _0x4a90c5);
          _0x4af659.fromBufferAttribute(_0x2f565a, _0x569f4b);
          var _0x28f06f = _0x23c579.morphTargetInfluences;
          if (_0x20d959 && _0x28f06f) {
            _0x37b92d.set(0, 0, 0);
            _0x1a7569.set(0, 0, 0);
            _0xb4acb1.set(0, 0, 0);
            for (let _0x53317e = 0, _0x1bf765 = _0x20d959.length; _0x53317e < _0x1bf765; _0x53317e++) {
              var _0x2e2199 = _0x28f06f[_0x53317e];
              var _0x5c608b = _0x20d959[_0x53317e];
              if (_0x2e2199 !== 0) {
                _0x77a02a.fromBufferAttribute(_0x5c608b, _0x311345);
                _0x5cf668.fromBufferAttribute(_0x5c608b, _0x4a90c5);
                _0x19c7e4.fromBufferAttribute(_0x5c608b, _0x569f4b);
                if (_0x23e323) {
                  _0x37b92d.addScaledVector(_0x77a02a, _0x2e2199);
                  _0x1a7569.addScaledVector(_0x5cf668, _0x2e2199);
                  _0xb4acb1.addScaledVector(_0x19c7e4, _0x2e2199);
                } else {
                  _0x37b92d.addScaledVector(_0x77a02a.sub(_0x29f0d4), _0x2e2199);
                  _0x1a7569.addScaledVector(_0x5cf668.sub(_0x1ed235), _0x2e2199);
                  _0xb4acb1.addScaledVector(_0x19c7e4.sub(_0x4af659), _0x2e2199);
                }
              }
            }
            _0x29f0d4.add(_0x37b92d);
            _0x1ed235.add(_0x1a7569);
            _0x4af659.add(_0xb4acb1);
          }
          if (_0x23c579.isSkinnedMesh) {
            _0x23c579.boneTransform(_0x311345, _0x29f0d4);
            _0x23c579.boneTransform(_0x4a90c5, _0x1ed235);
            _0x23c579.boneTransform(_0x569f4b, _0x4af659);
          }
          const _0x46c03b = function (_0x2e4900, _0x2e5f2a, _0x5358e5, _0x16249e, _0xbe729e, _0xb7e0c6, _0x501263, _0x491788) {
            var _0x1e57a0;
            let _0x495295;
            _0x1e57a0 = "ogkj";
            _0x495295 = _0x2e5f2a.side === _0x460782 ? _0x16249e.intersectTriangle(_0x501263, _0xb7e0c6, _0xbe729e, true, _0x491788) : _0x16249e.intersectTriangle(_0xbe729e, _0xb7e0c6, _0x501263, _0x2e5f2a.side !== _0x250b44, _0x491788);
            if (_0x495295 === null) {
              return null;
            } else {
              _0x5b561d.copy(_0x491788);
              _0x5b561d.applyMatrix4(_0x2e4900.matrixWorld);
              if ((_0x491788 = _0x5358e5.ray.origin.distanceTo(_0x5b561d)) < _0x5358e5.near || _0x491788 > _0x5358e5.far) {
                return null;
              } else {
                return {
                  distance: _0x491788,
                  point: _0x5b561d.clone(),
                  object: _0x2e4900
                };
              }
            }
          }(_0x23c579, _0x4c31c3, _0x27b9bc, _0x4241d7, _0x29f0d4, _0x1ed235, _0x4af659, _0x3d0044);
          if (_0x46c03b) {
            if (_0x513cbc) {
              _0x240cde.fromBufferAttribute(_0x513cbc, _0x311345);
              _0x525e78.fromBufferAttribute(_0x513cbc, _0x4a90c5);
              _0x3dbe71.fromBufferAttribute(_0x513cbc, _0x569f4b);
              _0x46c03b.uv = _0x54aa93.getUV(_0x3d0044, _0x29f0d4, _0x1ed235, _0x4af659, _0x240cde, _0x525e78, _0x3dbe71, new _0x25f874());
            }
            if (_0x268f4e) {
              _0x240cde.fromBufferAttribute(_0x268f4e, _0x311345);
              _0x525e78.fromBufferAttribute(_0x268f4e, _0x4a90c5);
              _0x3dbe71.fromBufferAttribute(_0x268f4e, _0x569f4b);
              _0x46c03b.uv2 = _0x54aa93.getUV(_0x3d0044, _0x29f0d4, _0x1ed235, _0x4af659, _0x240cde, _0x525e78, _0x3dbe71, new _0x25f874());
            }
            _0x268f4e = {
              a: _0x311345,
              b: _0x4a90c5,
              c: _0x569f4b,
              normal: new _0x1d20ef(),
              materialIndex: 0
            };
            _0x54aa93.getNormal(_0x29f0d4, _0x1ed235, _0x4af659, _0x268f4e.normal);
            _0x46c03b.face = _0x268f4e;
          }
          return _0x46c03b;
        }
        _0x9b7b04.prototype.isMesh = true;
        class _0xce9a1e extends _0x3f374d {
          constructor(_0x3ec2a4 = 1, _0x49b74a = 1, _0x4f3523 = 1, _0x256fd5 = 1, _0x2e8fb1 = 1, _0xe873d3 = 1) {
            super();
            this.type = "BoxGeometry";
            this.parameters = {
              width: _0x3ec2a4,
              height: _0x49b74a,
              depth: _0x4f3523,
              widthSegments: _0x256fd5,
              heightSegments: _0x2e8fb1,
              depthSegments: _0xe873d3
            };
            const _0x3fb6b3 = this;
            _0x256fd5 = Math.floor(_0x256fd5);
            _0x2e8fb1 = Math.floor(_0x2e8fb1);
            _0xe873d3 = Math.floor(_0xe873d3);
            const _0x44e44a = [];
            const _0x1b225f = [];
            const _0x5a1fa1 = [];
            const _0x3ef8e5 = [];
            let _0x35bab6 = 0;
            let _0x4d5b2f = 0;
            function _0x21f145(_0x584646, _0x3a3c7c, _0x189cde, _0x2eac22, _0x5115cd, _0x4e0f80, _0x3ab733, _0x48d1eb, _0x5e5024, _0x2e8e55, _0x3e3cad) {
              var _0x47ebef = _0x4e0f80 / _0x5e5024;
              var _0x27d00e = _0x3ab733 / _0x2e8e55;
              var _0x3877c4 = _0x4e0f80 / 2;
              var _0xc9b48c = _0x3ab733 / 2;
              var _0x549746 = _0x48d1eb / 2;
              var _0x4c5ad5 = _0x5e5024 + 1;
              var _0x4c0a9b = _0x2e8e55 + 1;
              let _0x272333 = 0;
              let _0x4a1a66 = 0;
              const _0x563726 = new _0x1d20ef();
              for (let _0x3bf37b = 0; _0x3bf37b < _0x4c0a9b; _0x3bf37b++) {
                var _0x45cbc5 = _0x3bf37b * _0x27d00e - _0xc9b48c;
                for (let _0x5868f8 = 0; _0x5868f8 < _0x4c5ad5; _0x5868f8++) {
                  var _0x1130d5 = _0x5868f8 * _0x47ebef - _0x3877c4;
                  _0x563726[_0x584646] = _0x1130d5 * _0x2eac22;
                  _0x563726[_0x3a3c7c] = _0x45cbc5 * _0x5115cd;
                  _0x563726[_0x189cde] = _0x549746;
                  _0x1b225f.push(_0x563726.x, _0x563726.y, _0x563726.z);
                  _0x563726[_0x584646] = 0;
                  _0x563726[_0x3a3c7c] = 0;
                  _0x563726[_0x189cde] = _0x48d1eb > 0 ? 1 : -1;
                  _0x5a1fa1.push(_0x563726.x, _0x563726.y, _0x563726.z);
                  _0x3ef8e5.push(_0x5868f8 / _0x5e5024);
                  _0x3ef8e5.push(1 - _0x3bf37b / _0x2e8e55);
                  _0x272333 += 1;
                }
              }
              for (let _0x1f2774 = 0; _0x1f2774 < _0x2e8e55; _0x1f2774++) {
                for (let _0x2bf6da = 0; _0x2bf6da < _0x5e5024; _0x2bf6da++) {
                  var _0x404e2a = _0x35bab6 + _0x2bf6da + _0x4c5ad5 * _0x1f2774;
                  var _0x184648 = _0x35bab6 + _0x2bf6da + _0x4c5ad5 * (_0x1f2774 + 1);
                  var _0x5c21ab = _0x35bab6 + (_0x2bf6da + 1) + _0x4c5ad5 * (_0x1f2774 + 1);
                  var _0x44ce63 = _0x35bab6 + (_0x2bf6da + 1) + _0x4c5ad5 * _0x1f2774;
                  _0x44e44a.push(_0x404e2a, _0x184648, _0x44ce63);
                  _0x44e44a.push(_0x184648, _0x5c21ab, _0x44ce63);
                  _0x4a1a66 += 6;
                }
              }
              _0x3fb6b3.addGroup(_0x4d5b2f, _0x4a1a66, _0x3e3cad);
              _0x4d5b2f += _0x4a1a66;
              _0x35bab6 += _0x272333;
            }
            _0x21f145("z", "y", "x", -1, -1, _0x4f3523, _0x49b74a, _0x3ec2a4, _0xe873d3, _0x2e8fb1, 0);
            _0x21f145("z", "y", "x", 1, -1, _0x4f3523, _0x49b74a, -_0x3ec2a4, _0xe873d3, _0x2e8fb1, 1);
            _0x21f145("x", "z", "y", 1, 1, _0x3ec2a4, _0x4f3523, _0x49b74a, _0x256fd5, _0xe873d3, 2);
            _0x21f145("x", "z", "y", 1, -1, _0x3ec2a4, _0x4f3523, -_0x49b74a, _0x256fd5, _0xe873d3, 3);
            _0x21f145("x", "y", "z", 1, -1, _0x3ec2a4, _0x49b74a, _0x4f3523, _0x256fd5, _0x2e8fb1, 4);
            _0x21f145("x", "y", "z", -1, -1, _0x3ec2a4, _0x49b74a, -_0x4f3523, _0x256fd5, _0x2e8fb1, 5);
            this.setIndex(_0x44e44a);
            this.setAttribute("position", new _0x17b758(_0x1b225f, 3));
            this.setAttribute("normal", new _0x17b758(_0x5a1fa1, 3));
            this.setAttribute("uv", new _0x17b758(_0x3ef8e5, 2));
          }
          static fromJSON(_0x3f86f3) {
            return new _0xce9a1e(_0x3f86f3.width, _0x3f86f3.height, _0x3f86f3.depth, _0x3f86f3.widthSegments, _0x3f86f3.heightSegments, _0x3f86f3.depthSegments);
          }
        }
        function _0x1c556b(_0x4321f1) {
          const _0x47b127 = {};
          for (const _0x24c3b7 in _0x4321f1) {
            _0x47b127[_0x24c3b7] = {};
            for (const _0x2bc835 in _0x4321f1[_0x24c3b7]) {
              const _0x39bd7a = _0x4321f1[_0x24c3b7][_0x2bc835];
              if (_0x39bd7a && (_0x39bd7a.isColor || _0x39bd7a.isMatrix3 || _0x39bd7a.isMatrix4 || _0x39bd7a.isVector2 || _0x39bd7a.isVector3 || _0x39bd7a.isVector4 || _0x39bd7a.isTexture || _0x39bd7a.isQuaternion)) {
                _0x47b127[_0x24c3b7][_0x2bc835] = _0x39bd7a.clone();
              } else if (Array.isArray(_0x39bd7a)) {
                _0x47b127[_0x24c3b7][_0x2bc835] = _0x39bd7a.slice();
              } else {
                _0x47b127[_0x24c3b7][_0x2bc835] = _0x39bd7a;
              }
            }
          }
          return _0x47b127;
        }
        function _0x418e3c(_0x157507) {
          const _0x286bb4 = {};
          for (let _0x20f211 = 0; _0x20f211 < _0x157507.length; _0x20f211++) {
            var _0xffc4c5 = _0x1c556b(_0x157507[_0x20f211]);
            for (const _0x36fdd7 in _0xffc4c5) {
              _0x286bb4[_0x36fdd7] = _0xffc4c5[_0x36fdd7];
            }
          }
          return _0x286bb4;
        }
        const _0x491e76 = {
          clone: _0x1c556b,
          merge: _0x418e3c
        };
        class _0x18cc6b extends _0x2098dd {
          constructor(_0x123074) {
            super();
            this.type = "ShaderMaterial";
            this.defines = {};
            this.uniforms = {};
            this.vertexShader = `void main() {
  \tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
  }`;
            this.fragmentShader = `void main() {
  \tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
  }`;
            this.linewidth = 1;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.fog = false;
            this.lights = false;
            this.clipping = false;
            this.extensions = {
              derivatives: false,
              fragDepth: false,
              drawBuffers: false,
              shaderTextureLOD: false
            };
            this.defaultAttributeValues = {
              color: [1, 1, 1],
              uv: [0, 0],
              uv2: [0, 0]
            };
            this.index0AttributeName = undefined;
            this.uniformsNeedUpdate = false;
            this.glslVersion = null;
            if (_0x123074 !== undefined) {
              _0x123074.attributes;
              this.setValues(_0x123074);
            }
          }
          copy(_0x145746) {
            super.copy(_0x145746);
            this.fragmentShader = _0x145746.fragmentShader;
            this.vertexShader = _0x145746.vertexShader;
            this.uniforms = _0x1c556b(_0x145746.uniforms);
            this.defines = Object.assign({}, _0x145746.defines);
            this.wireframe = _0x145746.wireframe;
            this.wireframeLinewidth = _0x145746.wireframeLinewidth;
            this.lights = _0x145746.lights;
            this.clipping = _0x145746.clipping;
            this.extensions = Object.assign({}, _0x145746.extensions);
            this.glslVersion = _0x145746.glslVersion;
            return this;
          }
          toJSON(_0x82fd94) {
            var _0x3542b5 = 6;
            const _0x14eb2e = super.toJSON(_0x82fd94);
            _0x3542b5 = "phij";
            _0x14eb2e.glslVersion = this.glslVersion;
            _0x14eb2e.uniforms = {};
            for (const _0x3e8ce8 in this.uniforms) {
              const _0x49bb4a = this.uniforms[_0x3e8ce8].value;
              if (_0x49bb4a && _0x49bb4a.isTexture) {
                _0x14eb2e.uniforms[_0x3e8ce8] = {
                  type: "t",
                  value: _0x49bb4a.toJSON(_0x82fd94).uuid
                };
              } else if (_0x49bb4a && _0x49bb4a.isColor) {
                _0x14eb2e.uniforms[_0x3e8ce8] = {
                  type: "c",
                  value: _0x49bb4a.getHex()
                };
              } else if (_0x49bb4a && _0x49bb4a.isVector2) {
                _0x14eb2e.uniforms[_0x3e8ce8] = {
                  type: "v2",
                  value: _0x49bb4a.toArray()
                };
              } else if (_0x49bb4a && _0x49bb4a.isVector3) {
                _0x14eb2e.uniforms[_0x3e8ce8] = {
                  type: "v3",
                  value: _0x49bb4a.toArray()
                };
              } else if (_0x49bb4a && _0x49bb4a.isVector4) {
                _0x14eb2e.uniforms[_0x3e8ce8] = {
                  type: "v4",
                  value: _0x49bb4a.toArray()
                };
              } else if (_0x49bb4a && _0x49bb4a.isMatrix3) {
                _0x14eb2e.uniforms[_0x3e8ce8] = {
                  type: "m3",
                  value: _0x49bb4a.toArray()
                };
              } else if (_0x49bb4a && _0x49bb4a.isMatrix4) {
                _0x14eb2e.uniforms[_0x3e8ce8] = {
                  type: "m4",
                  value: _0x49bb4a.toArray()
                };
              } else {
                _0x14eb2e.uniforms[_0x3e8ce8] = {
                  value: _0x49bb4a
                };
              }
            }
            if (Object.keys(this.defines).length > 0) {
              _0x14eb2e.defines = this.defines;
            }
            _0x14eb2e.vertexShader = this.vertexShader;
            _0x14eb2e.fragmentShader = this.fragmentShader;
            var _0x3f1cf0;
            const _0x390819 = {};
            _0x3f1cf0 = 3;
            for (const _0x2ec4ec in this.extensions) {
              if (this.extensions[_0x2ec4ec] === true) {
                _0x390819[_0x2ec4ec] = true;
              }
            }
            if (Object.keys(_0x390819).length > 0) {
              _0x14eb2e.extensions = _0x390819;
            }
            return _0x14eb2e;
          }
        }
        _0x18cc6b.prototype.isShaderMaterial = true;
        class _0x324380 extends _0x3b73b1 {
          constructor() {
            super();
            this.type = "Camera";
            this.matrixWorldInverse = new _0x33b2c9();
            this.projectionMatrix = new _0x33b2c9();
            this.projectionMatrixInverse = new _0x33b2c9();
          }
          copy(_0x5887f6, _0x59cf0b) {
            super.copy(_0x5887f6, _0x59cf0b);
            this.matrixWorldInverse.copy(_0x5887f6.matrixWorldInverse);
            this.projectionMatrix.copy(_0x5887f6.projectionMatrix);
            this.projectionMatrixInverse.copy(_0x5887f6.projectionMatrixInverse);
            return this;
          }
          getWorldDirection(_0x35176c) {
            this.updateWorldMatrix(true, false);
            var _0x57fc24 = this.matrixWorld.elements;
            return _0x35176c.set(-_0x57fc24[8], -_0x57fc24[9], -_0x57fc24[10]).normalize();
          }
          updateMatrixWorld(_0x5c2f43) {
            super.updateMatrixWorld(_0x5c2f43);
            this.matrixWorldInverse.copy(this.matrixWorld).invert();
          }
          updateWorldMatrix(_0x31c623, _0x3bce0c) {
            super.updateWorldMatrix(_0x31c623, _0x3bce0c);
            this.matrixWorldInverse.copy(this.matrixWorld).invert();
          }
          clone() {
            return new this.constructor().copy(this);
          }
        }
        _0x324380.prototype.isCamera = true;
        class _0x41f6fd extends _0x324380 {
          constructor(_0x230061 = 50, _0x26a791 = 1, _0x226b95 = 0.1, _0x26669f = 2000) {
            super();
            this.type = "PerspectiveCamera";
            this.fov = _0x230061;
            this.zoom = 1;
            this.near = _0x226b95;
            this.far = _0x26669f;
            this.focus = 10;
            this.aspect = _0x26a791;
            this.view = null;
            this.filmGauge = 35;
            this.filmOffset = 0;
            this.updateProjectionMatrix();
          }
          copy(_0x3fccc3, _0xb3f051) {
            super.copy(_0x3fccc3, _0xb3f051);
            this.fov = _0x3fccc3.fov;
            this.zoom = _0x3fccc3.zoom;
            this.near = _0x3fccc3.near;
            this.far = _0x3fccc3.far;
            this.focus = _0x3fccc3.focus;
            this.aspect = _0x3fccc3.aspect;
            this.view = _0x3fccc3.view === null ? null : Object.assign({}, _0x3fccc3.view);
            this.filmGauge = _0x3fccc3.filmGauge;
            this.filmOffset = _0x3fccc3.filmOffset;
            return this;
          }
          setFocalLength(_0x464c70) {
            _0x464c70 = this.getFilmHeight() * 0.5 / _0x464c70;
            this.fov = _0x77398c * 2 * Math.atan(_0x464c70);
            this.updateProjectionMatrix();
          }
          getFocalLength() {
            var _0x5c5570 = Math.tan(_0x21403c * 0.5 * this.fov);
            return this.getFilmHeight() * 0.5 / _0x5c5570;
          }
          getEffectiveFOV() {
            return _0x77398c * 2 * Math.atan(Math.tan(_0x21403c * 0.5 * this.fov) / this.zoom);
          }
          getFilmWidth() {
            return this.filmGauge * Math.min(this.aspect, 1);
          }
          getFilmHeight() {
            return this.filmGauge / Math.max(this.aspect, 1);
          }
          setViewOffset(_0x33d142, _0x1ef9b3, _0x44eb53, _0x16b9bd, _0x15d1b4, _0x57e901) {
            this.aspect = _0x33d142 / _0x1ef9b3;
            if (this.view === null) {
              this.view = {
                enabled: true,
                fullWidth: 1,
                fullHeight: 1,
                offsetX: 0,
                offsetY: 0,
                width: 1,
                height: 1
              };
            }
            this.view.enabled = true;
            this.view.fullWidth = _0x33d142;
            this.view.fullHeight = _0x1ef9b3;
            this.view.offsetX = _0x44eb53;
            this.view.offsetY = _0x16b9bd;
            this.view.width = _0x15d1b4;
            this.view.height = _0x57e901;
            this.updateProjectionMatrix();
          }
          clearViewOffset() {
            if (this.view !== null) {
              this.view.enabled = false;
            }
            this.updateProjectionMatrix();
          }
          updateProjectionMatrix() {
            var _0x457a15 = this.near;
            let _0x292bcf = _0x457a15 * Math.tan(_0x21403c * 0.5 * this.fov) / this.zoom;
            let _0x122c7f = _0x292bcf * 2;
            let _0x173425 = this.aspect * _0x122c7f;
            let _0x2f9cca = _0x173425 * -0.5;
            var _0x1f02a5;
            var _0x15a153 = this.view;
            if (this.view !== null && this.view.enabled) {
              _0x1f02a5 = _0x15a153.fullWidth;
              _0x2945ef = _0x15a153.fullHeight;
              _0x2f9cca += _0x15a153.offsetX * _0x173425 / _0x1f02a5;
              _0x292bcf -= _0x15a153.offsetY * _0x122c7f / _0x2945ef;
              _0x173425 *= _0x15a153.width / _0x1f02a5;
              _0x122c7f *= _0x15a153.height / _0x2945ef;
            }
            var _0x2945ef = this.filmOffset;
            if (_0x2945ef !== 0) {
              _0x2f9cca += _0x457a15 * _0x2945ef / this.getFilmWidth();
            }
            this.projectionMatrix.makePerspective(_0x2f9cca, _0x2f9cca + _0x173425, _0x292bcf, _0x292bcf - _0x122c7f, _0x457a15, this.far);
            this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
          }
          toJSON(_0x390b82) {
            const _0x409bd7 = super.toJSON(_0x390b82);
            _0x409bd7.object.fov = this.fov;
            _0x409bd7.object.zoom = this.zoom;
            _0x409bd7.object.near = this.near;
            _0x409bd7.object.far = this.far;
            _0x409bd7.object.focus = this.focus;
            _0x409bd7.object.aspect = this.aspect;
            if (this.view !== null) {
              _0x409bd7.object.view = Object.assign({}, this.view);
            }
            _0x409bd7.object.filmGauge = this.filmGauge;
            _0x409bd7.object.filmOffset = this.filmOffset;
            return _0x409bd7;
          }
        }
        _0x41f6fd.prototype.isPerspectiveCamera = true;
        class _0x534d0b extends _0x3b73b1 {
          constructor(_0x11f682, _0x417e2a, _0x4e8950) {
            super();
            this.type = "CubeCamera";
            if (_0x4e8950.isWebGLCubeRenderTarget === true) {
              this.renderTarget = _0x4e8950;
              var _0x40f57e;
              const _0x11e7de = new _0x41f6fd(90, 1, _0x11f682, _0x417e2a);
              _0x40f57e = "hfkl";
              _0x11e7de.layers = this.layers;
              _0x11e7de.up.set(0, -1, 0);
              _0x11e7de.lookAt(new _0x1d20ef(1, 0, 0));
              this.add(_0x11e7de);
              var _0x4043e9 = 7;
              const _0x524aa5 = new _0x41f6fd(90, 1, _0x11f682, _0x417e2a);
              _0x4043e9 = 10;
              _0x524aa5.layers = this.layers;
              _0x524aa5.up.set(0, -1, 0);
              _0x524aa5.lookAt(new _0x1d20ef(-1, 0, 0));
              this.add(_0x524aa5);
              var _0xf3ee39 = 6;
              const _0x531838 = new _0x41f6fd(90, 1, _0x11f682, _0x417e2a);
              _0xf3ee39 = "mgfk";
              _0x531838.layers = this.layers;
              _0x531838.up.set(0, 0, 1);
              _0x531838.lookAt(new _0x1d20ef(0, 1, 0));
              this.add(_0x531838);
              var _0x738f0e;
              const _0x4f617b = new _0x41f6fd(90, 1, _0x11f682, _0x417e2a);
              _0x738f0e = 2;
              _0x4f617b.layers = this.layers;
              _0x4f617b.up.set(0, 0, -1);
              _0x4f617b.lookAt(new _0x1d20ef(0, -1, 0));
              this.add(_0x4f617b);
              const _0x3047bd = new _0x41f6fd(90, 1, _0x11f682, _0x417e2a);
              _0x3047bd.layers = this.layers;
              _0x3047bd.up.set(0, -1, 0);
              _0x3047bd.lookAt(new _0x1d20ef(0, 0, 1));
              this.add(_0x3047bd);
              const _0x4f2949 = new _0x41f6fd(90, 1, _0x11f682, _0x417e2a);
              _0x4f2949.layers = this.layers;
              _0x4f2949.up.set(0, -1, 0);
              _0x4f2949.lookAt(new _0x1d20ef(0, 0, -1));
              this.add(_0x4f2949);
            }
          }
          update(_0x5dd1e5, _0x30bfd0) {
            if (this.parent === null) {
              this.updateMatrixWorld();
            }
            const _0x367fc8 = this.renderTarget;
            var [_0x5a6c84, _0x3ec4ce, _0x38d6bf, _0x174464, _0x15c674, _0x958dc2] = this.children;
            var _0x20a108 = _0x5dd1e5.xr.enabled;
            var _0x4ff14e = _0x5dd1e5.getRenderTarget();
            _0x5dd1e5.xr.enabled = false;
            var _0x43cd9d;
            var _0xc73306 = _0x367fc8.texture.generateMipmaps;
            _0x43cd9d = 10;
            _0x367fc8.texture.generateMipmaps = false;
            _0x5dd1e5.setRenderTarget(_0x367fc8, 0);
            _0x5dd1e5.render(_0x30bfd0, _0x5a6c84);
            _0x5dd1e5.setRenderTarget(_0x367fc8, 1);
            _0x5dd1e5.render(_0x30bfd0, _0x3ec4ce);
            _0x5dd1e5.setRenderTarget(_0x367fc8, 2);
            _0x5dd1e5.render(_0x30bfd0, _0x38d6bf);
            _0x5dd1e5.setRenderTarget(_0x367fc8, 3);
            _0x5dd1e5.render(_0x30bfd0, _0x174464);
            _0x5dd1e5.setRenderTarget(_0x367fc8, 4);
            _0x5dd1e5.render(_0x30bfd0, _0x15c674);
            _0x367fc8.texture.generateMipmaps = _0xc73306;
            _0x5dd1e5.setRenderTarget(_0x367fc8, 5);
            _0x5dd1e5.render(_0x30bfd0, _0x958dc2);
            _0x5dd1e5.setRenderTarget(_0x4ff14e);
            _0x5dd1e5.xr.enabled = _0x20a108;
          }
        }
        class _0x50e2c1 extends _0x3d39cb {
          constructor(_0x189fe2, _0x59f1eb, _0x38d853, _0x53918b, _0x1e6587, _0x4b5c74, _0x11e87f, _0x3cb5bb, _0x30659f, _0x23ae77) {
            super(_0x189fe2 = _0x189fe2 !== undefined ? _0x189fe2 : [], _0x59f1eb = _0x59f1eb !== undefined ? _0x59f1eb : _0x2097dc, _0x38d853, _0x53918b, _0x1e6587, _0x4b5c74, _0x11e87f, _0x3cb5bb, _0x30659f, _0x23ae77);
            this.flipY = false;
          }
          get images() {
            return this.image;
          }
          set images(_0x51407e) {
            this.image = _0x51407e;
          }
        }
        _0x50e2c1.prototype.isCubeTexture = true;
        class _0x3488b9 extends _0x4eb744 {
          constructor(_0x1d01b7, _0x2853ce, _0x25dbb4) {
            super(_0x1d01b7, _0x1d01b7, _0x2853ce = Number.isInteger(_0x2853ce) ? _0x25dbb4 : _0x2853ce);
            _0x2853ce = _0x2853ce || {};
            this.texture = new _0x50e2c1(undefined, _0x2853ce.mapping, _0x2853ce.wrapS, _0x2853ce.wrapT, _0x2853ce.magFilter, _0x2853ce.minFilter, _0x2853ce.format, _0x2853ce.type, _0x2853ce.anisotropy, _0x2853ce.encoding);
            this.texture.isRenderTargetTexture = true;
            this.texture.generateMipmaps = _0x2853ce.generateMipmaps !== undefined && _0x2853ce.generateMipmaps;
            this.texture.minFilter = _0x2853ce.minFilter !== undefined ? _0x2853ce.minFilter : _0x202e90;
            this.texture._needsFlipEnvMap = false;
          }
          fromEquirectangularTexture(_0x1c8328, _0x5821b1) {
            this.texture.type = _0x5821b1.type;
            this.texture.format = _0x4f87e5;
            this.texture.encoding = _0x5821b1.encoding;
            this.texture.generateMipmaps = _0x5821b1.generateMipmaps;
            this.texture.minFilter = _0x5821b1.minFilter;
            this.texture.magFilter = _0x5821b1.magFilter;
            var _0xce6f08 = {
              uniforms: {
                tEquirect: {
                  value: null
                }
              },
              vertexShader: `
  
  \t\t\t\tvarying vec3 vWorldDirection;
  
  \t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {
  
  \t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
  
  \t\t\t\t}
  
  \t\t\t\tvoid main() {
  
  \t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );
  
  \t\t\t\t\t#include <begin_vertex>
  \t\t\t\t\t#include <project_vertex>
  
  \t\t\t\t}
  \t\t\t`,
              fragmentShader: `
  
  \t\t\t\tuniform sampler2D tEquirect;
  
  \t\t\t\tvarying vec3 vWorldDirection;
  
  \t\t\t\t#include <common>
  
  \t\t\t\tvoid main() {
  
  \t\t\t\t\tvec3 direction = normalize( vWorldDirection );
  
  \t\t\t\t\tvec2 sampleUV = equirectUv( direction );
  
  \t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );
  
  \t\t\t\t}
  \t\t\t`
            };
            var _0x5d3d77 = new _0xce9a1e(5, 5, 5);
            const _0x323e87 = new _0x18cc6b({
              name: "CubemapFromEquirect",
              uniforms: _0x1c556b(_0xce6f08.uniforms),
              vertexShader: _0xce6f08.vertexShader,
              fragmentShader: _0xce6f08.fragmentShader,
              side: _0x460782,
              blending: _0x1bf8b5
            });
            _0x323e87.uniforms.tEquirect.value = _0x5821b1;
            const _0x4473bc = new _0x9b7b04(_0x5d3d77, _0x323e87);
            _0x5d3d77 = _0x5821b1.minFilter;
            if (_0x5821b1.minFilter === _0x3f90fb) {
              _0x5821b1.minFilter = _0x202e90;
            }
            new _0x534d0b(1, 10, this).update(_0x1c8328, _0x4473bc);
            _0x5821b1.minFilter = _0x5d3d77;
            _0x4473bc.geometry.dispose();
            _0x4473bc.material.dispose();
            return this;
          }
          clear(_0x99dadd, _0x49a95c, _0x477623, _0xf3aad3) {
            var _0x3af725 = _0x99dadd.getRenderTarget();
            for (let _0x3dc973 = 0; _0x3dc973 < 6; _0x3dc973++) {
              _0x99dadd.setRenderTarget(this, _0x3dc973);
              _0x99dadd.clear(_0x49a95c, _0x477623, _0xf3aad3);
            }
            _0x99dadd.setRenderTarget(_0x3af725);
          }
        }
        _0x3488b9.prototype.isWebGLCubeRenderTarget = true;
        const _0x4310c3 = new _0x1d20ef();
        const _0x3de9d4 = new _0x1d20ef();
        const _0x511204 = new _0x30cf5e();
        class _0x2bef9b {
          constructor(_0x3e0032 = new _0x1d20ef(1, 0, 0), _0x2c0e9c = 0) {
            this.normal = _0x3e0032;
            this.constant = _0x2c0e9c;
          }
          set(_0x3aa581, _0x149fa6) {
            this.normal.copy(_0x3aa581);
            this.constant = _0x149fa6;
            return this;
          }
          setComponents(_0x296cdf, _0x20c82b, _0x1fcd45, _0x1e5695) {
            this.normal.set(_0x296cdf, _0x20c82b, _0x1fcd45);
            this.constant = _0x1e5695;
            return this;
          }
          setFromNormalAndCoplanarPoint(_0x34227d, _0x4f58b4) {
            this.normal.copy(_0x34227d);
            this.constant = -_0x4f58b4.dot(this.normal);
            return this;
          }
          setFromCoplanarPoints(_0x28a527, _0x42ddcb, _0x5db40d) {
            _0x42ddcb = _0x4310c3.subVectors(_0x5db40d, _0x42ddcb).cross(_0x3de9d4.subVectors(_0x28a527, _0x42ddcb)).normalize();
            this.setFromNormalAndCoplanarPoint(_0x42ddcb, _0x28a527);
            return this;
          }
          copy(_0x89328) {
            this.normal.copy(_0x89328.normal);
            this.constant = _0x89328.constant;
            return this;
          }
          normalize() {
            var _0x4486a9;
            var _0x1fe82f = 1 / this.normal.length();
            _0x4486a9 = 1;
            this.normal.multiplyScalar(_0x1fe82f);
            this.constant *= _0x1fe82f;
            return this;
          }
          negate() {
            this.constant *= -1;
            this.normal.negate();
            return this;
          }
          distanceToPoint(_0x200843) {
            return this.normal.dot(_0x200843) + this.constant;
          }
          distanceToSphere(_0x55231f) {
            return this.distanceToPoint(_0x55231f.center) - _0x55231f.radius;
          }
          projectPoint(_0xd7d14e, _0x157621) {
            return _0x157621.copy(this.normal).multiplyScalar(-this.distanceToPoint(_0xd7d14e)).add(_0xd7d14e);
          }
          intersectLine(_0xb96ddc, _0x5f9ba2) {
            var _0x3b6322 = _0xb96ddc.delta(_0x4310c3);
            var _0x10c00c = this.normal.dot(_0x3b6322);
            if (_0x10c00c === 0) {
              if (this.distanceToPoint(_0xb96ddc.start) === 0) {
                return _0x5f9ba2.copy(_0xb96ddc.start);
              } else {
                return null;
              }
            } else if ((_0x10c00c = -(_0xb96ddc.start.dot(this.normal) + this.constant) / _0x10c00c) < 0 || _0x10c00c > 1) {
              return null;
            } else {
              return _0x5f9ba2.copy(_0x3b6322).multiplyScalar(_0x10c00c).add(_0xb96ddc.start);
            }
          }
          intersectsLine(_0x3eca48) {
            var _0x461c66 = this.distanceToPoint(_0x3eca48.start);
            _0x3eca48 = this.distanceToPoint(_0x3eca48.end);
            return _0x461c66 < 0 && _0x3eca48 > 0 || _0x3eca48 < 0 && _0x461c66 > 0;
          }
          intersectsBox(_0x3906e9) {
            return _0x3906e9.intersectsPlane(this);
          }
          intersectsSphere(_0xd092b9) {
            return _0xd092b9.intersectsPlane(this);
          }
          coplanarPoint(_0x58dbff) {
            return _0x58dbff.copy(this.normal).multiplyScalar(-this.constant);
          }
          applyMatrix4(_0x58e9b5, _0x2de159) {
            _0x2de159 = _0x2de159 || _0x511204.getNormalMatrix(_0x58e9b5);
            const _0x330c54 = this.coplanarPoint(_0x4310c3).applyMatrix4(_0x58e9b5);
            _0x2de159 = this.normal.applyMatrix3(_0x2de159).normalize();
            this.constant = -_0x330c54.dot(_0x2de159);
            return this;
          }
          translate(_0x5468ac) {
            this.constant -= _0x5468ac.dot(this.normal);
            return this;
          }
          equals(_0x19c165) {
            return _0x19c165.normal.equals(this.normal) && _0x19c165.constant === this.constant;
          }
          clone() {
            return new this.constructor().copy(this);
          }
        }
        _0x2bef9b.prototype.isPlane = true;
        const _0x32a3d5 = new _0x26f734();
        const _0x4b6543 = new _0x1d20ef();
        class _0x1d3bc5 {
          constructor(_0x4e8c0b = new _0x2bef9b(), _0x300404 = new _0x2bef9b(), _0x4643a6 = new _0x2bef9b(), _0xa4f0d = new _0x2bef9b(), _0x974db0 = new _0x2bef9b(), _0x33e5dd = new _0x2bef9b()) {
            this.planes = [_0x4e8c0b, _0x300404, _0x4643a6, _0xa4f0d, _0x974db0, _0x33e5dd];
          }
          set(_0xe600a6, _0x1877bc, _0x33130c, _0x52c2e4, _0x4c4d27, _0x2a69d3) {
            var _0xa3bfe2 = 12;
            const _0x3c8553 = this.planes;
            _0xa3bfe2 = 13;
            _0x3c8553[0].copy(_0xe600a6);
            _0x3c8553[1].copy(_0x1877bc);
            _0x3c8553[2].copy(_0x33130c);
            _0x3c8553[3].copy(_0x52c2e4);
            _0x3c8553[4].copy(_0x4c4d27);
            _0x3c8553[5].copy(_0x2a69d3);
            return this;
          }
          copy(_0x56955d) {
            const _0x417da6 = this.planes;
            for (let _0x125776 = 0; _0x125776 < 6; _0x125776++) {
              _0x417da6[_0x125776].copy(_0x56955d.planes[_0x125776]);
            }
            return this;
          }
          setFromProjectionMatrix(_0x208f78) {
            const _0x2565ac = this.planes;
            var _0x5d7c44 = (_0x5163ec = _0x208f78.elements)[0];
            var _0xbf59eb = _0x5163ec[1];
            var _0x1fdec9 = _0x5163ec[2];
            var _0x1c15c4 = _0x5163ec[3];
            var _0x26499c = _0x5163ec[4];
            var _0x1bbad7 = _0x5163ec[5];
            var _0x8ece7e = _0x5163ec[6];
            var _0x1b87cc = _0x5163ec[7];
            var _0x463a37 = _0x5163ec[8];
            var _0x302f85 = _0x5163ec[9];
            var _0x223b4a = _0x5163ec[10];
            var _0x1fc818 = _0x5163ec[11];
            var _0x48dd66 = _0x5163ec[12];
            var _0x8fcf0c = _0x5163ec[13];
            _0x208f78 = _0x5163ec[14];
            var _0x5163ec = _0x5163ec[15];
            _0x2565ac[0].setComponents(_0x1c15c4 - _0x5d7c44, _0x1b87cc - _0x26499c, _0x1fc818 - _0x463a37, _0x5163ec - _0x48dd66).normalize();
            _0x2565ac[1].setComponents(_0x1c15c4 + _0x5d7c44, _0x1b87cc + _0x26499c, _0x1fc818 + _0x463a37, _0x5163ec + _0x48dd66).normalize();
            _0x2565ac[2].setComponents(_0x1c15c4 + _0xbf59eb, _0x1b87cc + _0x1bbad7, _0x1fc818 + _0x302f85, _0x5163ec + _0x8fcf0c).normalize();
            _0x2565ac[3].setComponents(_0x1c15c4 - _0xbf59eb, _0x1b87cc - _0x1bbad7, _0x1fc818 - _0x302f85, _0x5163ec - _0x8fcf0c).normalize();
            _0x2565ac[4].setComponents(_0x1c15c4 - _0x1fdec9, _0x1b87cc - _0x8ece7e, _0x1fc818 - _0x223b4a, _0x5163ec - _0x208f78).normalize();
            _0x2565ac[5].setComponents(_0x1c15c4 + _0x1fdec9, _0x1b87cc + _0x8ece7e, _0x1fc818 + _0x223b4a, _0x5163ec + _0x208f78).normalize();
            return this;
          }
          intersectsObject(_0x59213c) {
            const _0x3fa793 = _0x59213c.geometry;
            if (_0x3fa793.boundingSphere === null) {
              _0x3fa793.computeBoundingSphere();
            }
            _0x32a3d5.copy(_0x3fa793.boundingSphere).applyMatrix4(_0x59213c.matrixWorld);
            return this.intersectsSphere(_0x32a3d5);
          }
          intersectsSprite(_0x4b73e5) {
            _0x32a3d5.center.set(0, 0, 0);
            _0x32a3d5.radius = 0.7071067811865476;
            _0x32a3d5.applyMatrix4(_0x4b73e5.matrixWorld);
            return this.intersectsSphere(_0x32a3d5);
          }
          intersectsSphere(_0xf729ba) {
            const _0x134dfc = this.planes;
            var _0x4f37fb = _0xf729ba.center;
            var _0x126030 = -_0xf729ba.radius;
            for (let _0x1bf585 = 0; _0x1bf585 < 6; _0x1bf585++) {
              if (_0x134dfc[_0x1bf585].distanceToPoint(_0x4f37fb) < _0x126030) {
                return false;
              }
            }
            return true;
          }
          intersectsBox(_0x48a145) {
            var _0x5f27a9 = this.planes;
            for (let _0x4d81b4 = 0; _0x4d81b4 < 6; _0x4d81b4++) {
              const _0x4b029b = _0x5f27a9[_0x4d81b4];
              _0x4b6543.x = (_0x4b029b.normal.x > 0 ? _0x48a145.max : _0x48a145.min).x;
              _0x4b6543.y = (_0x4b029b.normal.y > 0 ? _0x48a145.max : _0x48a145.min).y;
              _0x4b6543.z = (_0x4b029b.normal.z > 0 ? _0x48a145.max : _0x48a145.min).z;
              if (_0x4b029b.distanceToPoint(_0x4b6543) < 0) {
                return false;
              }
            }
            return true;
          }
          containsPoint(_0x46cd9a) {
            const _0x4a6fbd = this.planes;
            for (let _0x4f2db4 = 0; _0x4f2db4 < 6; _0x4f2db4++) {
              if (_0x4a6fbd[_0x4f2db4].distanceToPoint(_0x46cd9a) < 0) {
                return false;
              }
            }
            return true;
          }
          clone() {
            return new this.constructor().copy(this);
          }
        }
        function _0x2ba39f() {
          let _0x56eb5f = null;
          let _0x4d4c55 = false;
          let _0x8cc6e = null;
          let _0x222dd2 = null;
          function _0x3b54af(_0x23e9e4, _0x4fc3bc) {
            _0x8cc6e(_0x23e9e4, _0x4fc3bc);
            _0x222dd2 = _0x56eb5f.requestAnimationFrame(_0x3b54af);
          }
          return {
            start: function () {
              if (_0x4d4c55 !== true && _0x8cc6e !== null) {
                _0x222dd2 = _0x56eb5f.requestAnimationFrame(_0x3b54af);
                _0x4d4c55 = true;
              }
            },
            stop: function () {
              _0x56eb5f.cancelAnimationFrame(_0x222dd2);
              _0x4d4c55 = false;
            },
            setAnimationLoop: function (_0x130bf5) {
              _0x8cc6e = _0x130bf5;
            },
            setContext: function (_0x543910) {
              _0x56eb5f = _0x543910;
            }
          };
        }
        function _0x1e4e91(_0x504767, _0x17ed32) {
          const _0x54309e = _0x17ed32.isWebGL2;
          const _0x188146 = new WeakMap();
          return {
            get: function (_0x44fd94) {
              if (_0x44fd94.isInterleavedBufferAttribute) {
                _0x44fd94 = _0x44fd94.data;
              }
              return _0x188146.get(_0x44fd94);
            },
            remove: function (_0x510076) {
              if (_0x510076.isInterleavedBufferAttribute) {
                _0x510076 = _0x510076.data;
              }
              var _0x2fa439;
              var _0x4e095d = _0x188146.get(_0x510076);
              _0x2fa439 = 4;
              if (_0x4e095d) {
                _0x504767.deleteBuffer(_0x4e095d.buffer);
                _0x188146.delete(_0x510076);
              }
            },
            update: function (_0x9c2a16, _0x1a8252) {
              if (_0x9c2a16.isGLBufferAttribute) {
                var _0x1ad4f3;
                var _0x1a4d85 = _0x188146.get(_0x9c2a16);
                _0x1ad4f3 = "kbnk";
                if (!_0x1a4d85 || _0x1a4d85.version < _0x9c2a16.version) {
                  _0x188146.set(_0x9c2a16, {
                    buffer: _0x9c2a16.buffer,
                    type: _0x9c2a16.type,
                    bytesPerElement: _0x9c2a16.elementSize,
                    version: _0x9c2a16.version
                  });
                }
              } else {
                if (_0x9c2a16.isInterleavedBufferAttribute) {
                  _0x9c2a16 = _0x9c2a16.data;
                }
                const _0x2d88eb = _0x188146.get(_0x9c2a16);
                if (_0x2d88eb === undefined) {
                  _0x188146.set(_0x9c2a16, function (_0x396823, _0x289970) {
                    var _0x3d6ca7 = _0x396823.array;
                    var _0xd0b8b7 = _0x396823.usage;
                    var _0x3a1e40 = _0x504767.createBuffer();
                    _0x504767.bindBuffer(_0x289970, _0x3a1e40);
                    _0x504767.bufferData(_0x289970, _0x3d6ca7, _0xd0b8b7);
                    _0x396823.onUploadCallback();
                    let _0x48cd49 = 5126;
                    if (_0x3d6ca7 instanceof Float32Array) {
                      _0x48cd49 = 5126;
                    } else if (!(_0x3d6ca7 instanceof Float64Array)) {
                      if (_0x3d6ca7 instanceof Uint16Array) {
                        if (_0x396823.isFloat16BufferAttribute) {
                          if (_0x54309e) {
                            _0x48cd49 = 5131;
                          }
                        } else {
                          _0x48cd49 = 5123;
                        }
                      } else if (_0x3d6ca7 instanceof Int16Array) {
                        _0x48cd49 = 5122;
                      } else if (_0x3d6ca7 instanceof Uint32Array) {
                        _0x48cd49 = 5125;
                      } else if (_0x3d6ca7 instanceof Int32Array) {
                        _0x48cd49 = 5124;
                      } else if (_0x3d6ca7 instanceof Int8Array) {
                        _0x48cd49 = 5120;
                      } else if (_0x3d6ca7 instanceof Uint8Array || _0x3d6ca7 instanceof Uint8ClampedArray) {
                        _0x48cd49 = 5121;
                      }
                    }
                    return {
                      buffer: _0x3a1e40,
                      type: _0x48cd49,
                      bytesPerElement: _0x3d6ca7.BYTES_PER_ELEMENT,
                      version: _0x396823.version
                    };
                  }(_0x9c2a16, _0x1a8252));
                } else if (_0x2d88eb.version < _0x9c2a16.version) {
                  (function (_0x39ce0b, _0x219268, _0x230bb7) {
                    const _0x294757 = _0x219268.array;
                    const _0x5f5a1c = _0x219268.updateRange;
                    _0x504767.bindBuffer(_0x230bb7, _0x39ce0b);
                    if (_0x5f5a1c.count === -1) {
                      _0x504767.bufferSubData(_0x230bb7, 0, _0x294757);
                    } else {
                      if (_0x54309e) {
                        _0x504767.bufferSubData(_0x230bb7, _0x5f5a1c.offset * _0x294757.BYTES_PER_ELEMENT, _0x294757, _0x5f5a1c.offset, _0x5f5a1c.count);
                      } else {
                        _0x504767.bufferSubData(_0x230bb7, _0x5f5a1c.offset * _0x294757.BYTES_PER_ELEMENT, _0x294757.subarray(_0x5f5a1c.offset, _0x5f5a1c.offset + _0x5f5a1c.count));
                      }
                      _0x5f5a1c.count = -1;
                    }
                  })(_0x2d88eb.buffer, _0x9c2a16, _0x1a8252);
                  _0x2d88eb.version = _0x9c2a16.version;
                }
              }
            }
          };
        }
        class _0x41807a extends _0x3f374d {
          constructor(_0x5d4c78 = 1, _0x2bf95a = 1, _0x1f1ef6 = 1, _0xa6f1a7 = 1) {
            super();
            this.type = "PlaneGeometry";
            this.parameters = {
              width: _0x5d4c78,
              height: _0x2bf95a,
              widthSegments: _0x1f1ef6,
              heightSegments: _0xa6f1a7
            };
            var _0x1f6e5d = _0x5d4c78 / 2;
            var _0xb36a99 = _0x2bf95a / 2;
            var _0x468a88 = Math.floor(_0x1f1ef6);
            var _0x2278ab = Math.floor(_0xa6f1a7);
            var _0x25def5 = _0x468a88 + 1;
            var _0x52be1f = _0x2278ab + 1;
            var _0x3dbb7d = _0x5d4c78 / _0x468a88;
            var _0x61636e = _0x2bf95a / _0x2278ab;
            const _0x122f44 = [];
            const _0x1abc03 = [];
            const _0x3bbb06 = [];
            const _0x53b087 = [];
            for (let _0x2766f8 = 0; _0x2766f8 < _0x52be1f; _0x2766f8++) {
              var _0x5970e3 = 6;
              var _0x141e13 = _0x2766f8 * _0x61636e - _0xb36a99;
              _0x5970e3 = 9;
              for (let _0x2806ce = 0; _0x2806ce < _0x25def5; _0x2806ce++) {
                var _0x27bcda = _0x2806ce * _0x3dbb7d - _0x1f6e5d;
                _0x1abc03.push(_0x27bcda, -_0x141e13, 0);
                _0x3bbb06.push(0, 0, 1);
                _0x53b087.push(_0x2806ce / _0x468a88);
                _0x53b087.push(1 - _0x2766f8 / _0x2278ab);
              }
            }
            for (let _0x15be3a = 0; _0x15be3a < _0x2278ab; _0x15be3a++) {
              for (let _0x3ba59f = 0; _0x3ba59f < _0x468a88; _0x3ba59f++) {
                var _0x53d4e2 = _0x3ba59f + _0x25def5 * _0x15be3a;
                var _0x316809 = _0x3ba59f + _0x25def5 * (_0x15be3a + 1);
                var _0x157831 = _0x3ba59f + 1 + _0x25def5 * (_0x15be3a + 1);
                var _0x21fedc = _0x3ba59f + 1 + _0x25def5 * _0x15be3a;
                _0x122f44.push(_0x53d4e2, _0x316809, _0x21fedc);
                _0x122f44.push(_0x316809, _0x157831, _0x21fedc);
              }
            }
            this.setIndex(_0x122f44);
            this.setAttribute("position", new _0x17b758(_0x1abc03, 3));
            this.setAttribute("normal", new _0x17b758(_0x3bbb06, 3));
            this.setAttribute("uv", new _0x17b758(_0x53b087, 2));
          }
          static fromJSON(_0x226ab2) {
            return new _0x41807a(_0x226ab2.width, _0x226ab2.height, _0x226ab2.widthSegments, _0x226ab2.heightSegments);
          }
        }
        const _0x53dfdc = {
          alphamap_fragment: `#ifdef USE_ALPHAMAP
  \tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;
  #endif`,
          alphamap_pars_fragment: `#ifdef USE_ALPHAMAP
  \tuniform sampler2D alphaMap;
  #endif`,
          alphatest_fragment: `#ifdef USE_ALPHATEST
  \tif ( diffuseColor.a < alphaTest ) discard;
  #endif`,
          alphatest_pars_fragment: `#ifdef USE_ALPHATEST
  \tuniform float alphaTest;
  #endif`,
          aomap_fragment: `#ifdef USE_AOMAP
  \tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
  \treflectedLight.indirectDiffuse *= ambientOcclusion;
  \t#if defined( USE_ENVMAP ) && defined( STANDARD )
  \t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
  \t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
  \t#endif
  #endif`,
          aomap_pars_fragment: `#ifdef USE_AOMAP
  \tuniform sampler2D aoMap;
  \tuniform float aoMapIntensity;
  #endif`,
          begin_vertex: "vec3 transformed = vec3( position );",
          beginnormal_vertex: `vec3 objectNormal = vec3( normal );
  #ifdef USE_TANGENT
  \tvec3 objectTangent = vec3( tangent.xyz );
  #endif`,
          bsdfs: `vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
  \treturn RECIPROCAL_PI * diffuseColor;
  }
  vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
  \tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
  \treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
  }
  float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
  \tfloat a2 = pow2( alpha );
  \tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
  \tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
  \treturn 0.5 / max( gv + gl, EPSILON );
  }
  float D_GGX( const in float alpha, const in float dotNH ) {
  \tfloat a2 = pow2( alpha );
  \tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
  \treturn RECIPROCAL_PI * a2 / pow2( denom );
  }
  vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
  \tfloat alpha = pow2( roughness );
  \tvec3 halfDir = normalize( lightDir + viewDir );
  \tfloat dotNL = saturate( dot( normal, lightDir ) );
  \tfloat dotNV = saturate( dot( normal, viewDir ) );
  \tfloat dotNH = saturate( dot( normal, halfDir ) );
  \tfloat dotVH = saturate( dot( viewDir, halfDir ) );
  \tvec3 F = F_Schlick( f0, f90, dotVH );
  \tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
  \tfloat D = D_GGX( alpha, dotNH );
  \treturn F * ( V * D );
  }
  vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
  \tconst float LUT_SIZE = 64.0;
  \tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
  \tconst float LUT_BIAS = 0.5 / LUT_SIZE;
  \tfloat dotNV = saturate( dot( N, V ) );
  \tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
  \tuv = uv * LUT_SCALE + LUT_BIAS;
  \treturn uv;
  }
  float LTC_ClippedSphereFormFactor( const in vec3 f ) {
  \tfloat l = length( f );
  \treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
  }
  vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
  \tfloat x = dot( v1, v2 );
  \tfloat y = abs( x );
  \tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
  \tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;
  \tfloat v = a / b;
  \tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
  \treturn cross( v1, v2 ) * theta_sintheta;
  }
  vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
  \tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
  \tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
  \tvec3 lightNormal = cross( v1, v2 );
  \tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
  \tvec3 T1, T2;
  \tT1 = normalize( V - N * dot( V, N ) );
  \tT2 = - cross( N, T1 );
  \tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
  \tvec3 coords[ 4 ];
  \tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
  \tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
  \tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
  \tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
  \tcoords[ 0 ] = normalize( coords[ 0 ] );
  \tcoords[ 1 ] = normalize( coords[ 1 ] );
  \tcoords[ 2 ] = normalize( coords[ 2 ] );
  \tcoords[ 3 ] = normalize( coords[ 3 ] );
  \tvec3 vectorFormFactor = vec3( 0.0 );
  \tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
  \tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
  \tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
  \tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
  \tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );
  \treturn vec3( result );
  }
  float G_BlinnPhong_Implicit( ) {
  \treturn 0.25;
  }
  float D_BlinnPhong( const in float shininess, const in float dotNH ) {
  \treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
  }
  vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
  \tvec3 halfDir = normalize( lightDir + viewDir );
  \tfloat dotNH = saturate( dot( normal, halfDir ) );
  \tfloat dotVH = saturate( dot( viewDir, halfDir ) );
  \tvec3 F = F_Schlick( specularColor, 1.0, dotVH );
  \tfloat G = G_BlinnPhong_Implicit( );
  \tfloat D = D_BlinnPhong( shininess, dotNH );
  \treturn F * ( G * D );
  }
  #if defined( USE_SHEEN )
  float D_Charlie( float roughness, float dotNH ) {
  \tfloat alpha = pow2( roughness );
  \tfloat invAlpha = 1.0 / alpha;
  \tfloat cos2h = dotNH * dotNH;
  \tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );
  \treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
  }
  float V_Neubelt( float dotNV, float dotNL ) {
  \treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
  }
  vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
  \tvec3 halfDir = normalize( lightDir + viewDir );
  \tfloat dotNL = saturate( dot( normal, lightDir ) );
  \tfloat dotNV = saturate( dot( normal, viewDir ) );
  \tfloat dotNH = saturate( dot( normal, halfDir ) );
  \tfloat D = D_Charlie( sheenRoughness, dotNH );
  \tfloat V = V_Neubelt( dotNV, dotNL );
  \treturn sheenColor * ( D * V );
  }
  #endif`,
          bumpmap_pars_fragment: `#ifdef USE_BUMPMAP
  \tuniform sampler2D bumpMap;
  \tuniform float bumpScale;
  \tvec2 dHdxy_fwd() {
  \t\tvec2 dSTdx = dFdx( vUv );
  \t\tvec2 dSTdy = dFdy( vUv );
  \t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;
  \t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
  \t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
  \t\treturn vec2( dBx, dBy );
  \t}
  \tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
  \t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
  \t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
  \t\tvec3 vN = surf_norm;
  \t\tvec3 R1 = cross( vSigmaY, vN );
  \t\tvec3 R2 = cross( vN, vSigmaX );
  \t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;
  \t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
  \t\treturn normalize( abs( fDet ) * surf_norm - vGrad );
  \t}
  #endif`,
          clipping_planes_fragment: `#if NUM_CLIPPING_PLANES > 0
  \tvec4 plane;
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
  \t\tplane = clippingPlanes[ i ];
  \t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
  \t}
  \t#pragma unroll_loop_end
  \t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
  \t\tbool clipped = true;
  \t\t#pragma unroll_loop_start
  \t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
  \t\t\tplane = clippingPlanes[ i ];
  \t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
  \t\t}
  \t\t#pragma unroll_loop_end
  \t\tif ( clipped ) discard;
  \t#endif
  #endif`,
          clipping_planes_pars_fragment: `#if NUM_CLIPPING_PLANES > 0
  \tvarying vec3 vClipPosition;
  \tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
  #endif`,
          clipping_planes_pars_vertex: `#if NUM_CLIPPING_PLANES > 0
  \tvarying vec3 vClipPosition;
  #endif`,
          clipping_planes_vertex: `#if NUM_CLIPPING_PLANES > 0
  \tvClipPosition = - mvPosition.xyz;
  #endif`,
          color_fragment: `#if defined( USE_COLOR_ALPHA )
  \tdiffuseColor *= vColor;
  #elif defined( USE_COLOR )
  \tdiffuseColor.rgb *= vColor;
  #endif`,
          color_pars_fragment: `#if defined( USE_COLOR_ALPHA )
  \tvarying vec4 vColor;
  #elif defined( USE_COLOR )
  \tvarying vec3 vColor;
  #endif`,
          color_pars_vertex: `#if defined( USE_COLOR_ALPHA )
  \tvarying vec4 vColor;
  #elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
  \tvarying vec3 vColor;
  #endif`,
          color_vertex: `#if defined( USE_COLOR_ALPHA )
  \tvColor = vec4( 1.0 );
  #elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
  \tvColor = vec3( 1.0 );
  #endif
  #ifdef USE_COLOR
  \tvColor *= color;
  #endif
  #ifdef USE_INSTANCING_COLOR
  \tvColor.xyz *= instanceColor.xyz;
  #endif`,
          common: `#define PI 3.141592653589793
  #define PI2 6.283185307179586
  #define PI_HALF 1.5707963267948966
  #define RECIPROCAL_PI 0.3183098861837907
  #define RECIPROCAL_PI2 0.15915494309189535
  #define EPSILON 1e-6
  #ifndef saturate
  #define saturate( a ) clamp( a, 0.0, 1.0 )
  #endif
  #define whiteComplement( a ) ( 1.0 - saturate( a ) )
  float pow2( const in float x ) { return x*x; }
  float pow3( const in float x ) { return x*x*x; }
  float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
  float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
  float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
  highp float rand( const in vec2 uv ) {
  \tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;
  \thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
  \treturn fract( sin( sn ) * c );
  }
  #ifdef HIGH_PRECISION
  \tfloat precisionSafeLength( vec3 v ) { return length( v ); }
  #else
  \tfloat precisionSafeLength( vec3 v ) {
  \t\tfloat maxComponent = max3( abs( v ) );
  \t\treturn length( v / maxComponent ) * maxComponent;
  \t}
  #endif
  struct IncidentLight {
  \tvec3 color;
  \tvec3 direction;
  \tbool visible;
  };
  struct ReflectedLight {
  \tvec3 directDiffuse;
  \tvec3 directSpecular;
  \tvec3 indirectDiffuse;
  \tvec3 indirectSpecular;
  };
  struct GeometricContext {
  \tvec3 position;
  \tvec3 normal;
  \tvec3 viewDir;
  #ifdef USE_CLEARCOAT
  \tvec3 clearcoatNormal;
  #endif
  };
  vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
  \treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
  }
  vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
  \treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
  }
  mat3 transposeMat3( const in mat3 m ) {
  \tmat3 tmp;
  \ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
  \ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
  \ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
  \treturn tmp;
  }
  float linearToRelativeLuminance( const in vec3 color ) {
  \tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
  \treturn dot( weights, color.rgb );
  }
  bool isPerspectiveMatrix( mat4 m ) {
  \treturn m[ 2 ][ 3 ] == - 1.0;
  }
  vec2 equirectUv( in vec3 dir ) {
  \tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
  \tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
  \treturn vec2( u, v );
  }`,
          cube_uv_reflection_fragment: `#ifdef ENVMAP_TYPE_CUBE_UV
  \t#define cubeUV_maxMipLevel 8.0
  \t#define cubeUV_minMipLevel 4.0
  \t#define cubeUV_maxTileSize 256.0
  \t#define cubeUV_minTileSize 16.0
  \tfloat getFace( vec3 direction ) {
  \t\tvec3 absDirection = abs( direction );
  \t\tfloat face = - 1.0;
  \t\tif ( absDirection.x > absDirection.z ) {
  \t\t\tif ( absDirection.x > absDirection.y )
  \t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;
  \t\t\telse
  \t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;
  \t\t} else {
  \t\t\tif ( absDirection.z > absDirection.y )
  \t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;
  \t\t\telse
  \t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;
  \t\t}
  \t\treturn face;
  \t}
  \tvec2 getUV( vec3 direction, float face ) {
  \t\tvec2 uv;
  \t\tif ( face == 0.0 ) {
  \t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );
  \t\t} else if ( face == 1.0 ) {
  \t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );
  \t\t} else if ( face == 2.0 ) {
  \t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );
  \t\t} else if ( face == 3.0 ) {
  \t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );
  \t\t} else if ( face == 4.0 ) {
  \t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );
  \t\t} else {
  \t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );
  \t\t}
  \t\treturn 0.5 * ( uv + 1.0 );
  \t}
  \tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
  \t\tfloat face = getFace( direction );
  \t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
  \t\tmipInt = max( mipInt, cubeUV_minMipLevel );
  \t\tfloat faceSize = exp2( mipInt );
  \t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );
  \t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;
  \t\tif ( face > 2.0 ) {
  \t\t\tuv.y += faceSize;
  \t\t\tface -= 3.0;
  \t\t}
  \t\tuv.x += face * faceSize;
  \t\tif ( mipInt < cubeUV_maxMipLevel ) {
  \t\t\tuv.y += 2.0 * cubeUV_maxTileSize;
  \t\t}
  \t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;
  \t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );
  \t\tuv *= texelSize;
  \t\treturn texture2D( envMap, uv ).rgb;
  \t}
  \t#define r0 1.0
  \t#define v0 0.339
  \t#define m0 - 2.0
  \t#define r1 0.8
  \t#define v1 0.276
  \t#define m1 - 1.0
  \t#define r4 0.4
  \t#define v4 0.046
  \t#define m4 2.0
  \t#define r5 0.305
  \t#define v5 0.016
  \t#define m5 3.0
  \t#define r6 0.21
  \t#define v6 0.0038
  \t#define m6 4.0
  \tfloat roughnessToMip( float roughness ) {
  \t\tfloat mip = 0.0;
  \t\tif ( roughness >= r1 ) {
  \t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
  \t\t} else if ( roughness >= r4 ) {
  \t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
  \t\t} else if ( roughness >= r5 ) {
  \t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
  \t\t} else if ( roughness >= r6 ) {
  \t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
  \t\t} else {
  \t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}
  \t\treturn mip;
  \t}
  \tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
  \t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );
  \t\tfloat mipF = fract( mip );
  \t\tfloat mipInt = floor( mip );
  \t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
  \t\tif ( mipF == 0.0 ) {
  \t\t\treturn vec4( color0, 1.0 );
  \t\t} else {
  \t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
  \t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );
  \t\t}
  \t}
  #endif`,
          defaultnormal_vertex: `vec3 transformedNormal = objectNormal;
  #ifdef USE_INSTANCING
  \tmat3 m = mat3( instanceMatrix );
  \ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
  \ttransformedNormal = m * transformedNormal;
  #endif
  transformedNormal = normalMatrix * transformedNormal;
  #ifdef FLIP_SIDED
  \ttransformedNormal = - transformedNormal;
  #endif
  #ifdef USE_TANGENT
  \tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
  \t#ifdef FLIP_SIDED
  \t\ttransformedTangent = - transformedTangent;
  \t#endif
  #endif`,
          displacementmap_pars_vertex: `#ifdef USE_DISPLACEMENTMAP
  \tuniform sampler2D displacementMap;
  \tuniform float displacementScale;
  \tuniform float displacementBias;
  #endif`,
          displacementmap_vertex: `#ifdef USE_DISPLACEMENTMAP
  \ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
  #endif`,
          emissivemap_fragment: `#ifdef USE_EMISSIVEMAP
  \tvec4 emissiveColor = texture2D( emissiveMap, vUv );
  \temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;
  \ttotalEmissiveRadiance *= emissiveColor.rgb;
  #endif`,
          emissivemap_pars_fragment: `#ifdef USE_EMISSIVEMAP
  \tuniform sampler2D emissiveMap;
  #endif`,
          encodings_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );",
          encodings_pars_fragment: `vec4 LinearToLinear( in vec4 value ) {
  \treturn value;
  }
  vec4 sRGBToLinear( in vec4 value ) {
  \treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
  }
  vec4 LinearTosRGB( in vec4 value ) {
  \treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
  }`,
          envmap_fragment: `#ifdef USE_ENVMAP
  \t#ifdef ENV_WORLDPOS
  \t\tvec3 cameraToFrag;
  \t\tif ( isOrthographic ) {
  \t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
  \t\t} else {
  \t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );
  \t\t}
  \t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
  \t\t#ifdef ENVMAP_MODE_REFLECTION
  \t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );
  \t\t#else
  \t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
  \t\t#endif
  \t#else
  \t\tvec3 reflectVec = vReflect;
  \t#endif
  \t#ifdef ENVMAP_TYPE_CUBE
  \t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
  \t\tenvColor = envMapTexelToLinear( envColor );
  \t#elif defined( ENVMAP_TYPE_CUBE_UV )
  \t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
  \t#else
  \t\tvec4 envColor = vec4( 0.0 );
  \t#endif
  \t#ifdef ENVMAP_BLENDING_MULTIPLY
  \t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
  \t#elif defined( ENVMAP_BLENDING_MIX )
  \t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
  \t#elif defined( ENVMAP_BLENDING_ADD )
  \t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;
  \t#endif
  #endif`,
          envmap_common_pars_fragment: `#ifdef USE_ENVMAP
  \tuniform float envMapIntensity;
  \tuniform float flipEnvMap;
  \t#ifdef ENVMAP_TYPE_CUBE
  \t\tuniform samplerCube envMap;
  \t#else
  \t\tuniform sampler2D envMap;
  \t#endif
  \t
  #endif`,
          envmap_pars_fragment: `#ifdef USE_ENVMAP
  \tuniform float reflectivity;
  \t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
  \t\t#define ENV_WORLDPOS
  \t#endif
  \t#ifdef ENV_WORLDPOS
  \t\tvarying vec3 vWorldPosition;
  \t\tuniform float refractionRatio;
  \t#else
  \t\tvarying vec3 vReflect;
  \t#endif
  #endif`,
          envmap_pars_vertex: `#ifdef USE_ENVMAP
  \t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
  \t\t#define ENV_WORLDPOS
  \t#endif
  \t#ifdef ENV_WORLDPOS
  \t\t
  \t\tvarying vec3 vWorldPosition;
  \t#else
  \t\tvarying vec3 vReflect;
  \t\tuniform float refractionRatio;
  \t#endif
  #endif`,
          envmap_physical_pars_fragment: `#if defined( USE_ENVMAP )
  \t#ifdef ENVMAP_MODE_REFRACTION
  \t\tuniform float refractionRatio;
  \t#endif
  \tvec3 getIBLIrradiance( const in vec3 normal ) {
  \t\t#if defined( ENVMAP_TYPE_CUBE_UV )
  \t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
  \t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
  \t\t\treturn PI * envMapColor.rgb * envMapIntensity;
  \t\t#else
  \t\t\treturn vec3( 0.0 );
  \t\t#endif
  \t}
  \tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
  \t\t#if defined( ENVMAP_TYPE_CUBE_UV )
  \t\t\tvec3 reflectVec;
  \t\t\t#ifdef ENVMAP_MODE_REFLECTION
  \t\t\t\treflectVec = reflect( - viewDir, normal );
  \t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
  \t\t\t#else
  \t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );
  \t\t\t#endif
  \t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );
  \t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
  \t\t\treturn envMapColor.rgb * envMapIntensity;
  \t\t#else
  \t\t\treturn vec3( 0.0 );
  \t\t#endif
  \t}
  #endif`,
          envmap_vertex: `#ifdef USE_ENVMAP
  \t#ifdef ENV_WORLDPOS
  \t\tvWorldPosition = worldPosition.xyz;
  \t#else
  \t\tvec3 cameraToVertex;
  \t\tif ( isOrthographic ) {
  \t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
  \t\t} else {
  \t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );
  \t\t}
  \t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
  \t\t#ifdef ENVMAP_MODE_REFLECTION
  \t\t\tvReflect = reflect( cameraToVertex, worldNormal );
  \t\t#else
  \t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );
  \t\t#endif
  \t#endif
  #endif`,
          fog_vertex: `#ifdef USE_FOG
  \tvFogDepth = - mvPosition.z;
  #endif`,
          fog_pars_vertex: `#ifdef USE_FOG
  \tvarying float vFogDepth;
  #endif`,
          fog_fragment: `#ifdef USE_FOG
  \t#ifdef FOG_EXP2
  \t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
  \t#else
  \t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
  \t#endif
  \tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
  #endif`,
          fog_pars_fragment: `#ifdef USE_FOG
  \tuniform vec3 fogColor;
  \tvarying float vFogDepth;
  \t#ifdef FOG_EXP2
  \t\tuniform float fogDensity;
  \t#else
  \t\tuniform float fogNear;
  \t\tuniform float fogFar;
  \t#endif
  #endif`,
          gradientmap_pars_fragment: `#ifdef USE_GRADIENTMAP
  \tuniform sampler2D gradientMap;
  #endif
  vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
  \tfloat dotNL = dot( normal, lightDirection );
  \tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
  \t#ifdef USE_GRADIENTMAP
  \t\treturn vec3( texture2D( gradientMap, coord ).r );
  \t#else
  \t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
  \t#endif
  }`,
          lightmap_fragment: `#ifdef USE_LIGHTMAP
  \tvec4 lightMapTexel = texture2D( lightMap, vUv2 );
  \tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
  \t#ifndef PHYSICALLY_CORRECT_LIGHTS
  \t\tlightMapIrradiance *= PI;
  \t#endif
  \treflectedLight.indirectDiffuse += lightMapIrradiance;
  #endif`,
          lightmap_pars_fragment: `#ifdef USE_LIGHTMAP
  \tuniform sampler2D lightMap;
  \tuniform float lightMapIntensity;
  #endif`,
          lights_lambert_vertex: `vec3 diffuse = vec3( 1.0 );
  GeometricContext geometry;
  geometry.position = mvPosition.xyz;
  geometry.normal = normalize( transformedNormal );
  geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
  GeometricContext backGeometry;
  backGeometry.position = geometry.position;
  backGeometry.normal = -geometry.normal;
  backGeometry.viewDir = geometry.viewDir;
  vLightFront = vec3( 0.0 );
  vIndirectFront = vec3( 0.0 );
  #ifdef DOUBLE_SIDED
  \tvLightBack = vec3( 0.0 );
  \tvIndirectBack = vec3( 0.0 );
  #endif
  IncidentLight directLight;
  float dotNL;
  vec3 directLightColor_Diffuse;
  vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
  vIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );
  #ifdef DOUBLE_SIDED
  \tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );
  \tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );
  #endif
  #if NUM_POINT_LIGHTS > 0
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
  \t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );
  \t\tdotNL = dot( geometry.normal, directLight.direction );
  \t\tdirectLightColor_Diffuse = directLight.color;
  \t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;
  \t\t#ifdef DOUBLE_SIDED
  \t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
  \t\t#endif
  \t}
  \t#pragma unroll_loop_end
  #endif
  #if NUM_SPOT_LIGHTS > 0
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
  \t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );
  \t\tdotNL = dot( geometry.normal, directLight.direction );
  \t\tdirectLightColor_Diffuse = directLight.color;
  \t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;
  \t\t#ifdef DOUBLE_SIDED
  \t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
  \t\t#endif
  \t}
  \t#pragma unroll_loop_end
  #endif
  #if NUM_DIR_LIGHTS > 0
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
  \t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );
  \t\tdotNL = dot( geometry.normal, directLight.direction );
  \t\tdirectLightColor_Diffuse = directLight.color;
  \t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;
  \t\t#ifdef DOUBLE_SIDED
  \t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
  \t\t#endif
  \t}
  \t#pragma unroll_loop_end
  #endif
  #if NUM_HEMI_LIGHTS > 0
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
  \t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
  \t\t#ifdef DOUBLE_SIDED
  \t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );
  \t\t#endif
  \t}
  \t#pragma unroll_loop_end
  #endif`,
          lights_pars_begin: `uniform bool receiveShadow;
  uniform vec3 ambientLightColor;
  uniform vec3 lightProbe[ 9 ];
  vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
  \tfloat x = normal.x, y = normal.y, z = normal.z;
  \tvec3 result = shCoefficients[ 0 ] * 0.886227;
  \tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
  \tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
  \tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
  \tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
  \tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
  \tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
  \tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
  \tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
  \treturn result;
  }
  vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
  \tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
  \tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
  \treturn irradiance;
  }
  vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
  \tvec3 irradiance = ambientLightColor;
  \treturn irradiance;
  }
  float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
  \t#if defined ( PHYSICALLY_CORRECT_LIGHTS )
  \t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
  \t\tif ( cutoffDistance > 0.0 ) {
  \t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
  \t\t}
  \t\treturn distanceFalloff;
  \t#else
  \t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
  \t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
  \t\t}
  \t\treturn 1.0;
  \t#endif
  }
  float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
  \treturn smoothstep( coneCosine, penumbraCosine, angleCosine );
  }
  #if NUM_DIR_LIGHTS > 0
  \tstruct DirectionalLight {
  \t\tvec3 direction;
  \t\tvec3 color;
  \t};
  \tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
  \tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
  \t\tlight.color = directionalLight.color;
  \t\tlight.direction = directionalLight.direction;
  \t\tlight.visible = true;
  \t}
  #endif
  #if NUM_POINT_LIGHTS > 0
  \tstruct PointLight {
  \t\tvec3 position;
  \t\tvec3 color;
  \t\tfloat distance;
  \t\tfloat decay;
  \t};
  \tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];
  \tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
  \t\tvec3 lVector = pointLight.position - geometry.position;
  \t\tlight.direction = normalize( lVector );
  \t\tfloat lightDistance = length( lVector );
  \t\tlight.color = pointLight.color;
  \t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
  \t\tlight.visible = ( light.color != vec3( 0.0 ) );
  \t}
  #endif
  #if NUM_SPOT_LIGHTS > 0
  \tstruct SpotLight {
  \t\tvec3 position;
  \t\tvec3 direction;
  \t\tvec3 color;
  \t\tfloat distance;
  \t\tfloat decay;
  \t\tfloat coneCos;
  \t\tfloat penumbraCos;
  \t};
  \tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
  \tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
  \t\tvec3 lVector = spotLight.position - geometry.position;
  \t\tlight.direction = normalize( lVector );
  \t\tfloat angleCos = dot( light.direction, spotLight.direction );
  \t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
  \t\tif ( spotAttenuation > 0.0 ) {
  \t\t\tfloat lightDistance = length( lVector );
  \t\t\tlight.color = spotLight.color * spotAttenuation;
  \t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
  \t\t\tlight.visible = ( light.color != vec3( 0.0 ) );
  \t\t} else {
  \t\t\tlight.color = vec3( 0.0 );
  \t\t\tlight.visible = false;
  \t\t}
  \t}
  #endif
  #if NUM_RECT_AREA_LIGHTS > 0
  \tstruct RectAreaLight {
  \t\tvec3 color;
  \t\tvec3 position;
  \t\tvec3 halfWidth;
  \t\tvec3 halfHeight;
  \t};
  \tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;
  \tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
  #endif
  #if NUM_HEMI_LIGHTS > 0
  \tstruct HemisphereLight {
  \t\tvec3 direction;
  \t\tvec3 skyColor;
  \t\tvec3 groundColor;
  \t};
  \tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
  \tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
  \t\tfloat dotNL = dot( normal, hemiLight.direction );
  \t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;
  \t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
  \t\treturn irradiance;
  \t}
  #endif`,
          lights_toon_fragment: "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",
          lights_toon_pars_fragment: `varying vec3 vViewPosition;
  struct ToonMaterial {
  \tvec3 diffuseColor;
  };
  void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
  \tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
  \treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
  }
  void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
  \treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
  }
  #define RE_Direct\t\t\t\tRE_Direct_Toon
  #define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon
  #define Material_LightProbeLOD( material )\t(0)`,
          lights_phong_fragment: `BlinnPhongMaterial material;
  material.diffuseColor = diffuseColor.rgb;
  material.specularColor = specular;
  material.specularShininess = shininess;
  material.specularStrength = specularStrength;`,
          lights_phong_pars_fragment: `varying vec3 vViewPosition;
  struct BlinnPhongMaterial {
  \tvec3 diffuseColor;
  \tvec3 specularColor;
  \tfloat specularShininess;
  \tfloat specularStrength;
  };
  void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
  \tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );
  \tvec3 irradiance = dotNL * directLight.color;
  \treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
  \treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
  }
  void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
  \treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
  }
  #define RE_Direct\t\t\t\tRE_Direct_BlinnPhong
  #define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong
  #define Material_LightProbeLOD( material )\t(0)`,
          lights_physical_fragment: `PhysicalMaterial material;
  material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
  vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
  float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
  material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
  material.roughness = min( material.roughness, 1.0 );
  #ifdef IOR
  \t#ifdef SPECULAR
  \t\tfloat specularIntensityFactor = specularIntensity;
  \t\tvec3 specularColorFactor = specularColor;
  \t\t#ifdef USE_SPECULARINTENSITYMAP
  \t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
  \t\t#endif
  \t\t#ifdef USE_SPECULARCOLORMAP
  \t\t\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;
  \t\t#endif
  \t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
  \t#else
  \t\tfloat specularIntensityFactor = 1.0;
  \t\tvec3 specularColorFactor = vec3( 1.0 );
  \t\tmaterial.specularF90 = 1.0;
  \t#endif
  \tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
  #else
  \tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
  \tmaterial.specularF90 = 1.0;
  #endif
  #ifdef USE_CLEARCOAT
  \tmaterial.clearcoat = clearcoat;
  \tmaterial.clearcoatRoughness = clearcoatRoughness;
  \tmaterial.clearcoatF0 = vec3( 0.04 );
  \tmaterial.clearcoatF90 = 1.0;
  \t#ifdef USE_CLEARCOATMAP
  \t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;
  \t#endif
  \t#ifdef USE_CLEARCOAT_ROUGHNESSMAP
  \t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
  \t#endif
  \tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
  \tmaterial.clearcoatRoughness += geometryRoughness;
  \tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
  #endif
  #ifdef USE_SHEEN
  \tmaterial.sheenColor = sheenColor;
  \t#ifdef USE_SHEENCOLORMAP
  \t\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;
  \t#endif
  \tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
  \t#ifdef USE_SHEENROUGHNESSMAP
  \t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;
  \t#endif
  #endif`,
          lights_physical_pars_fragment: `struct PhysicalMaterial {
  \tvec3 diffuseColor;
  \tfloat roughness;
  \tvec3 specularColor;
  \tfloat specularF90;
  \t#ifdef USE_CLEARCOAT
  \t\tfloat clearcoat;
  \t\tfloat clearcoatRoughness;
  \t\tvec3 clearcoatF0;
  \t\tfloat clearcoatF90;
  \t#endif
  \t#ifdef USE_SHEEN
  \t\tvec3 sheenColor;
  \t\tfloat sheenRoughness;
  \t#endif
  };
  vec3 clearcoatSpecular = vec3( 0.0 );
  vec3 sheenSpecular = vec3( 0.0 );
  float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {
  \tfloat dotNV = saturate( dot( normal, viewDir ) );
  \tfloat r2 = roughness * roughness;
  \tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
  \tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
  \tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
  \treturn saturate( DG * RECIPROCAL_PI );
  }
  vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
  \tfloat dotNV = saturate( dot( normal, viewDir ) );
  \tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
  \tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
  \tvec4 r = roughness * c0 + c1;
  \tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
  \tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
  \treturn fab;
  }
  vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
  \tvec2 fab = DFGApprox( normal, viewDir, roughness );
  \treturn specularColor * fab.x + specularF90 * fab.y;
  }
  void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
  \tvec2 fab = DFGApprox( normal, viewDir, roughness );
  \tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;
  \tfloat Ess = fab.x + fab.y;
  \tfloat Ems = 1.0 - Ess;
  \tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
  \tsingleScatter += FssEss;
  \tmultiScatter += Fms * Ems;
  }
  #if NUM_RECT_AREA_LIGHTS > 0
  \tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
  \t\tvec3 normal = geometry.normal;
  \t\tvec3 viewDir = geometry.viewDir;
  \t\tvec3 position = geometry.position;
  \t\tvec3 lightPos = rectAreaLight.position;
  \t\tvec3 halfWidth = rectAreaLight.halfWidth;
  \t\tvec3 halfHeight = rectAreaLight.halfHeight;
  \t\tvec3 lightColor = rectAreaLight.color;
  \t\tfloat roughness = material.roughness;
  \t\tvec3 rectCoords[ 4 ];
  \t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
  \t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
  \t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
  \t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );
  \t\tvec4 t1 = texture2D( ltc_1, uv );
  \t\tvec4 t2 = texture2D( ltc_2, uv );
  \t\tmat3 mInv = mat3(
  \t\t\tvec3( t1.x, 0, t1.y ),
  \t\t\tvec3(    0, 1,    0 ),
  \t\t\tvec3( t1.z, 0, t1.w )
  \t\t);
  \t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
  \t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
  \t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
  \t}
  #endif
  void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
  \tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );
  \tvec3 irradiance = dotNL * directLight.color;
  \t#ifdef USE_CLEARCOAT
  \t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
  \t\tvec3 ccIrradiance = dotNLcc * directLight.color;
  \t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
  \t#endif
  \t#ifdef USE_SHEEN
  \t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
  \t#endif
  \treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
  \treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
  }
  void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
  \treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
  }
  void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
  \t#ifdef USE_CLEARCOAT
  \t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
  \t#endif
  \t#ifdef USE_SHEEN
  \t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
  \t#endif
  \tvec3 singleScattering = vec3( 0.0 );
  \tvec3 multiScattering = vec3( 0.0 );
  \tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
  \tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
  \tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
  \treflectedLight.indirectSpecular += radiance * singleScattering;
  \treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
  \treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
  }
  #define RE_Direct\t\t\t\tRE_Direct_Physical
  #define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical
  #define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical
  #define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical
  float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
  \treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
  }`,
          lights_fragment_begin: `
  GeometricContext geometry;
  geometry.position = - vViewPosition;
  geometry.normal = normal;
  geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
  #ifdef USE_CLEARCOAT
  \tgeometry.clearcoatNormal = clearcoatNormal;
  #endif
  IncidentLight directLight;
  #if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
  \tPointLight pointLight;
  \t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
  \tPointLightShadow pointLightShadow;
  \t#endif
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
  \t\tpointLight = pointLights[ i ];
  \t\tgetPointLightInfo( pointLight, geometry, directLight );
  \t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
  \t\tpointLightShadow = pointLightShadows[ i ];
  \t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
  \t\t#endif
  \t\tRE_Direct( directLight, geometry, material, reflectedLight );
  \t}
  \t#pragma unroll_loop_end
  #endif
  #if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
  \tSpotLight spotLight;
  \t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
  \tSpotLightShadow spotLightShadow;
  \t#endif
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
  \t\tspotLight = spotLights[ i ];
  \t\tgetSpotLightInfo( spotLight, geometry, directLight );
  \t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
  \t\tspotLightShadow = spotLightShadows[ i ];
  \t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
  \t\t#endif
  \t\tRE_Direct( directLight, geometry, material, reflectedLight );
  \t}
  \t#pragma unroll_loop_end
  #endif
  #if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
  \tDirectionalLight directionalLight;
  \t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
  \tDirectionalLightShadow directionalLightShadow;
  \t#endif
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
  \t\tdirectionalLight = directionalLights[ i ];
  \t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );
  \t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
  \t\tdirectionalLightShadow = directionalLightShadows[ i ];
  \t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
  \t\t#endif
  \t\tRE_Direct( directLight, geometry, material, reflectedLight );
  \t}
  \t#pragma unroll_loop_end
  #endif
  #if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
  \tRectAreaLight rectAreaLight;
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
  \t\trectAreaLight = rectAreaLights[ i ];
  \t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
  \t}
  \t#pragma unroll_loop_end
  #endif
  #if defined( RE_IndirectDiffuse )
  \tvec3 iblIrradiance = vec3( 0.0 );
  \tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
  \tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
  \t#if ( NUM_HEMI_LIGHTS > 0 )
  \t\t#pragma unroll_loop_start
  \t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
  \t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
  \t\t}
  \t\t#pragma unroll_loop_end
  \t#endif
  #endif
  #if defined( RE_IndirectSpecular )
  \tvec3 radiance = vec3( 0.0 );
  \tvec3 clearcoatRadiance = vec3( 0.0 );
  #endif`,
          lights_fragment_maps: `#if defined( RE_IndirectDiffuse )
  \t#ifdef USE_LIGHTMAP
  \t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );
  \t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
  \t\t#ifndef PHYSICALLY_CORRECT_LIGHTS
  \t\t\tlightMapIrradiance *= PI;
  \t\t#endif
  \t\tirradiance += lightMapIrradiance;
  \t#endif
  \t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
  \t\tiblIrradiance += getIBLIrradiance( geometry.normal );
  \t#endif
  #endif
  #if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
  \tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
  \t#ifdef USE_CLEARCOAT
  \t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
  \t#endif
  #endif`,
          lights_fragment_end: `#if defined( RE_IndirectDiffuse )
  \tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
  #endif
  #if defined( RE_IndirectSpecular )
  \tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
  #endif`,
          logdepthbuf_fragment: `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
  \tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
  #endif`,
          logdepthbuf_pars_fragment: `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
  \tuniform float logDepthBufFC;
  \tvarying float vFragDepth;
  \tvarying float vIsPerspective;
  #endif`,
          logdepthbuf_pars_vertex: `#ifdef USE_LOGDEPTHBUF
  \t#ifdef USE_LOGDEPTHBUF_EXT
  \t\tvarying float vFragDepth;
  \t\tvarying float vIsPerspective;
  \t#else
  \t\tuniform float logDepthBufFC;
  \t#endif
  #endif`,
          logdepthbuf_vertex: `#ifdef USE_LOGDEPTHBUF
  \t#ifdef USE_LOGDEPTHBUF_EXT
  \t\tvFragDepth = 1.0 + gl_Position.w;
  \t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
  \t#else
  \t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {
  \t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
  \t\t\tgl_Position.z *= gl_Position.w;
  \t\t}
  \t#endif
  #endif`,
          map_fragment: `#ifdef USE_MAP
  \tvec4 texelColor = texture2D( map, vUv );
  \ttexelColor = mapTexelToLinear( texelColor );
  \tdiffuseColor *= texelColor;
  #endif`,
          map_pars_fragment: `#ifdef USE_MAP
  \tuniform sampler2D map;
  #endif`,
          map_particle_fragment: `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
  \tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
  #endif
  #ifdef USE_MAP
  \tvec4 mapTexel = texture2D( map, uv );
  \tdiffuseColor *= mapTexelToLinear( mapTexel );
  #endif
  #ifdef USE_ALPHAMAP
  \tdiffuseColor.a *= texture2D( alphaMap, uv ).g;
  #endif`,
          map_particle_pars_fragment: `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
  \tuniform mat3 uvTransform;
  #endif
  #ifdef USE_MAP
  \tuniform sampler2D map;
  #endif
  #ifdef USE_ALPHAMAP
  \tuniform sampler2D alphaMap;
  #endif`,
          metalnessmap_fragment: `float metalnessFactor = metalness;
  #ifdef USE_METALNESSMAP
  \tvec4 texelMetalness = texture2D( metalnessMap, vUv );
  \tmetalnessFactor *= texelMetalness.b;
  #endif`,
          metalnessmap_pars_fragment: `#ifdef USE_METALNESSMAP
  \tuniform sampler2D metalnessMap;
  #endif`,
          morphnormal_vertex: `#ifdef USE_MORPHNORMALS
  \tobjectNormal *= morphTargetBaseInfluence;
  \t#ifdef MORPHTARGETS_TEXTURE
  \t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
  \t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];
  \t\t}
  \t#else
  \t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
  \t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
  \t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
  \t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
  \t#endif
  #endif`,
          morphtarget_pars_vertex: `#ifdef USE_MORPHTARGETS
  \tuniform float morphTargetBaseInfluence;
  \t#ifdef MORPHTARGETS_TEXTURE
  \t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
  \t\tuniform sampler2DArray morphTargetsTexture;
  \t\tuniform vec2 morphTargetsTextureSize;
  \t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {
  \t\t\tfloat texelIndex = float( vertexIndex * stride + offset );
  \t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );
  \t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;
  \t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );
  \t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;
  \t\t}
  \t#else
  \t\t#ifndef USE_MORPHNORMALS
  \t\t\tuniform float morphTargetInfluences[ 8 ];
  \t\t#else
  \t\t\tuniform float morphTargetInfluences[ 4 ];
  \t\t#endif
  \t#endif
  #endif`,
          morphtarget_vertex: `#ifdef USE_MORPHTARGETS
  \ttransformed *= morphTargetBaseInfluence;
  \t#ifdef MORPHTARGETS_TEXTURE
  \t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
  \t\t\t#ifndef USE_MORPHNORMALS
  \t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];
  \t\t\t#else
  \t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];
  \t\t\t#endif
  \t\t}
  \t#else
  \t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];
  \t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];
  \t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];
  \t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];
  \t\t#ifndef USE_MORPHNORMALS
  \t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];
  \t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];
  \t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];
  \t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];
  \t\t#endif
  \t#endif
  #endif`,
          normal_fragment_begin: `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
  #ifdef FLAT_SHADED
  \tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
  \tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
  \tvec3 normal = normalize( cross( fdx, fdy ) );
  #else
  \tvec3 normal = normalize( vNormal );
  \t#ifdef DOUBLE_SIDED
  \t\tnormal = normal * faceDirection;
  \t#endif
  \t#ifdef USE_TANGENT
  \t\tvec3 tangent = normalize( vTangent );
  \t\tvec3 bitangent = normalize( vBitangent );
  \t\t#ifdef DOUBLE_SIDED
  \t\t\ttangent = tangent * faceDirection;
  \t\t\tbitangent = bitangent * faceDirection;
  \t\t#endif
  \t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
  \t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );
  \t\t#endif
  \t#endif
  #endif
  vec3 geometryNormal = normal;`,
          normal_fragment_maps: `#ifdef OBJECTSPACE_NORMALMAP
  \tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
  \t#ifdef FLIP_SIDED
  \t\tnormal = - normal;
  \t#endif
  \t#ifdef DOUBLE_SIDED
  \t\tnormal = normal * faceDirection;
  \t#endif
  \tnormal = normalize( normalMatrix * normal );
  #elif defined( TANGENTSPACE_NORMALMAP )
  \tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
  \tmapN.xy *= normalScale;
  \t#ifdef USE_TANGENT
  \t\tnormal = normalize( vTBN * mapN );
  \t#else
  \t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
  \t#endif
  #elif defined( USE_BUMPMAP )
  \tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
  #endif`,
          normal_pars_fragment: `#ifndef FLAT_SHADED
  \tvarying vec3 vNormal;
  \t#ifdef USE_TANGENT
  \t\tvarying vec3 vTangent;
  \t\tvarying vec3 vBitangent;
  \t#endif
  #endif`,
          normal_pars_vertex: `#ifndef FLAT_SHADED
  \tvarying vec3 vNormal;
  \t#ifdef USE_TANGENT
  \t\tvarying vec3 vTangent;
  \t\tvarying vec3 vBitangent;
  \t#endif
  #endif`,
          normal_vertex: `#ifndef FLAT_SHADED
  \tvNormal = normalize( transformedNormal );
  \t#ifdef USE_TANGENT
  \t\tvTangent = normalize( transformedTangent );
  \t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
  \t#endif
  #endif`,
          normalmap_pars_fragment: `#ifdef USE_NORMALMAP
  \tuniform sampler2D normalMap;
  \tuniform vec2 normalScale;
  #endif
  #ifdef OBJECTSPACE_NORMALMAP
  \tuniform mat3 normalMatrix;
  #endif
  #if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
  \tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
  \t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
  \t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
  \t\tvec2 st0 = dFdx( vUv.st );
  \t\tvec2 st1 = dFdy( vUv.st );
  \t\tvec3 N = surf_norm;
  \t\tvec3 q1perp = cross( q1, N );
  \t\tvec3 q0perp = cross( N, q0 );
  \t\tvec3 T = q1perp * st0.x + q0perp * st1.x;
  \t\tvec3 B = q1perp * st0.y + q0perp * st1.y;
  \t\tfloat det = max( dot( T, T ), dot( B, B ) );
  \t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
  \t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
  \t}
  #endif`,
          clearcoat_normal_fragment_begin: `#ifdef USE_CLEARCOAT
  \tvec3 clearcoatNormal = geometryNormal;
  #endif`,
          clearcoat_normal_fragment_maps: `#ifdef USE_CLEARCOAT_NORMALMAP
  \tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
  \tclearcoatMapN.xy *= clearcoatNormalScale;
  \t#ifdef USE_TANGENT
  \t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );
  \t#else
  \t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
  \t#endif
  #endif`,
          clearcoat_pars_fragment: `#ifdef USE_CLEARCOATMAP
  \tuniform sampler2D clearcoatMap;
  #endif
  #ifdef USE_CLEARCOAT_ROUGHNESSMAP
  \tuniform sampler2D clearcoatRoughnessMap;
  #endif
  #ifdef USE_CLEARCOAT_NORMALMAP
  \tuniform sampler2D clearcoatNormalMap;
  \tuniform vec2 clearcoatNormalScale;
  #endif`,
          output_fragment: `#ifdef OPAQUE
  diffuseColor.a = 1.0;
  #endif
  #ifdef USE_TRANSMISSION
  diffuseColor.a *= transmissionAlpha + 0.1;
  #endif
  gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,
          packing: `vec3 packNormalToRGB( const in vec3 normal ) {
  \treturn normalize( normal ) * 0.5 + 0.5;
  }
  vec3 unpackRGBToNormal( const in vec3 rgb ) {
  \treturn 2.0 * rgb.xyz - 1.0;
  }
  const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
  const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
  const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
  const float ShiftRight8 = 1. / 256.;
  vec4 packDepthToRGBA( const in float v ) {
  \tvec4 r = vec4( fract( v * PackFactors ), v );
  \tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;
  }
  float unpackRGBAToDepth( const in vec4 v ) {
  \treturn dot( v, UnpackFactors );
  }
  vec4 pack2HalfToRGBA( vec2 v ) {
  \tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
  \treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
  }
  vec2 unpackRGBATo2Half( vec4 v ) {
  \treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
  }
  float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
  \treturn ( viewZ + near ) / ( near - far );
  }
  float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
  \treturn linearClipZ * ( near - far ) - near;
  }
  float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
  \treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
  }
  float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
  \treturn ( near * far ) / ( ( far - near ) * invClipZ - far );
  }`,
          premultiplied_alpha_fragment: `#ifdef PREMULTIPLIED_ALPHA
  \tgl_FragColor.rgb *= gl_FragColor.a;
  #endif`,
          project_vertex: `vec4 mvPosition = vec4( transformed, 1.0 );
  #ifdef USE_INSTANCING
  \tmvPosition = instanceMatrix * mvPosition;
  #endif
  mvPosition = modelViewMatrix * mvPosition;
  gl_Position = projectionMatrix * mvPosition;`,
          dithering_fragment: `#ifdef DITHERING
  \tgl_FragColor.rgb = dithering( gl_FragColor.rgb );
  #endif`,
          dithering_pars_fragment: `#ifdef DITHERING
  \tvec3 dithering( vec3 color ) {
  \t\tfloat grid_position = rand( gl_FragCoord.xy );
  \t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
  \t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
  \t\treturn color + dither_shift_RGB;
  \t}
  #endif`,
          roughnessmap_fragment: `float roughnessFactor = roughness;
  #ifdef USE_ROUGHNESSMAP
  \tvec4 texelRoughness = texture2D( roughnessMap, vUv );
  \troughnessFactor *= texelRoughness.g;
  #endif`,
          roughnessmap_pars_fragment: `#ifdef USE_ROUGHNESSMAP
  \tuniform sampler2D roughnessMap;
  #endif`,
          shadowmap_pars_fragment: `#ifdef USE_SHADOWMAP
  \t#if NUM_DIR_LIGHT_SHADOWS > 0
  \t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
  \t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
  \t\tstruct DirectionalLightShadow {
  \t\t\tfloat shadowBias;
  \t\t\tfloat shadowNormalBias;
  \t\t\tfloat shadowRadius;
  \t\t\tvec2 shadowMapSize;
  \t\t};
  \t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
  \t#endif
  \t#if NUM_SPOT_LIGHT_SHADOWS > 0
  \t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
  \t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
  \t\tstruct SpotLightShadow {
  \t\t\tfloat shadowBias;
  \t\t\tfloat shadowNormalBias;
  \t\t\tfloat shadowRadius;
  \t\t\tvec2 shadowMapSize;
  \t\t};
  \t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
  \t#endif
  \t#if NUM_POINT_LIGHT_SHADOWS > 0
  \t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
  \t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
  \t\tstruct PointLightShadow {
  \t\t\tfloat shadowBias;
  \t\t\tfloat shadowNormalBias;
  \t\t\tfloat shadowRadius;
  \t\t\tvec2 shadowMapSize;
  \t\t\tfloat shadowCameraNear;
  \t\t\tfloat shadowCameraFar;
  \t\t};
  \t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
  \t#endif
  \tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
  \t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
  \t}
  \tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
  \t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );
  \t}
  \tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){
  \t\tfloat occlusion = 1.0;
  \t\tvec2 distribution = texture2DDistribution( shadow, uv );
  \t\tfloat hard_shadow = step( compare , distribution.x );
  \t\tif (hard_shadow != 1.0 ) {
  \t\t\tfloat distance = compare - distribution.x ;
  \t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );
  \t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
  \t\t}
  \t\treturn occlusion;
  \t}
  \tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
  \t\tfloat shadow = 1.0;
  \t\tshadowCoord.xyz /= shadowCoord.w;
  \t\tshadowCoord.z += shadowBias;
  \t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
  \t\tbool inFrustum = all( inFrustumVec );
  \t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
  \t\tbool frustumTest = all( frustumTestVec );
  \t\tif ( frustumTest ) {
  \t\t#if defined( SHADOWMAP_TYPE_PCF )
  \t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;
  \t\t\tfloat dx0 = - texelSize.x * shadowRadius;
  \t\t\tfloat dy0 = - texelSize.y * shadowRadius;
  \t\t\tfloat dx1 = + texelSize.x * shadowRadius;
  \t\t\tfloat dy1 = + texelSize.y * shadowRadius;
  \t\t\tfloat dx2 = dx0 / 2.0;
  \t\t\tfloat dy2 = dy0 / 2.0;
  \t\t\tfloat dx3 = dx1 / 2.0;
  \t\t\tfloat dy3 = dy1 / 2.0;
  \t\t\tshadow = (
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
  \t\t\t) * ( 1.0 / 17.0 );
  \t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
  \t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;
  \t\t\tfloat dx = texelSize.x;
  \t\t\tfloat dy = texelSize.y;
  \t\t\tvec2 uv = shadowCoord.xy;
  \t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );
  \t\t\tuv -= f * texelSize;
  \t\t\tshadow = (
  \t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
  \t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
  \t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
  \t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
  \t\t\t\t\t f.x ) +
  \t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
  \t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
  \t\t\t\t\t f.x ) +
  \t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
  \t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
  \t\t\t\t\t f.y ) +
  \t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
  \t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
  \t\t\t\t\t f.y ) +
  \t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
  \t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
  \t\t\t\t\t\t  f.x ),
  \t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
  \t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
  \t\t\t\t\t\t  f.x ),
  \t\t\t\t\t f.y )
  \t\t\t) * ( 1.0 / 9.0 );
  \t\t#elif defined( SHADOWMAP_TYPE_VSM )
  \t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
  \t\t#else
  \t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
  \t\t#endif
  \t\t}
  \t\treturn shadow;
  \t}
  \tvec2 cubeToUV( vec3 v, float texelSizeY ) {
  \t\tvec3 absV = abs( v );
  \t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
  \t\tabsV *= scaleToCube;
  \t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
  \t\tvec2 planar = v.xy;
  \t\tfloat almostATexel = 1.5 * texelSizeY;
  \t\tfloat almostOne = 1.0 - almostATexel;
  \t\tif ( absV.z >= almostOne ) {
  \t\t\tif ( v.z > 0.0 )
  \t\t\t\tplanar.x = 4.0 - v.x;
  \t\t} else if ( absV.x >= almostOne ) {
  \t\t\tfloat signX = sign( v.x );
  \t\t\tplanar.x = v.z * signX + 2.0 * signX;
  \t\t} else if ( absV.y >= almostOne ) {
  \t\t\tfloat signY = sign( v.y );
  \t\t\tplanar.x = v.x + 2.0 * signY + 2.0;
  \t\t\tplanar.y = v.z * signY - 2.0;
  \t\t}
  \t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
  \t}
  \tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
  \t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
  \t\tvec3 lightToPosition = shadowCoord.xyz;
  \t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;
  \t\tvec3 bd3D = normalize( lightToPosition );
  \t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
  \t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
  \t\t\treturn (
  \t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
  \t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
  \t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
  \t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
  \t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
  \t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
  \t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
  \t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
  \t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
  \t\t\t) * ( 1.0 / 9.0 );
  \t\t#else
  \t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
  \t\t#endif
  \t}
  #endif`,
          shadowmap_pars_vertex: `#ifdef USE_SHADOWMAP
  \t#if NUM_DIR_LIGHT_SHADOWS > 0
  \t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
  \t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
  \t\tstruct DirectionalLightShadow {
  \t\t\tfloat shadowBias;
  \t\t\tfloat shadowNormalBias;
  \t\t\tfloat shadowRadius;
  \t\t\tvec2 shadowMapSize;
  \t\t};
  \t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
  \t#endif
  \t#if NUM_SPOT_LIGHT_SHADOWS > 0
  \t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
  \t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
  \t\tstruct SpotLightShadow {
  \t\t\tfloat shadowBias;
  \t\t\tfloat shadowNormalBias;
  \t\t\tfloat shadowRadius;
  \t\t\tvec2 shadowMapSize;
  \t\t};
  \t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
  \t#endif
  \t#if NUM_POINT_LIGHT_SHADOWS > 0
  \t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
  \t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
  \t\tstruct PointLightShadow {
  \t\t\tfloat shadowBias;
  \t\t\tfloat shadowNormalBias;
  \t\t\tfloat shadowRadius;
  \t\t\tvec2 shadowMapSize;
  \t\t\tfloat shadowCameraNear;
  \t\t\tfloat shadowCameraFar;
  \t\t};
  \t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
  \t#endif
  #endif`,
          shadowmap_vertex: `#ifdef USE_SHADOWMAP
  \t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
  \t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
  \t\tvec4 shadowWorldPosition;
  \t#endif
  \t#if NUM_DIR_LIGHT_SHADOWS > 0
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
  \t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
  \t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
  \t}
  \t#pragma unroll_loop_end
  \t#endif
  \t#if NUM_SPOT_LIGHT_SHADOWS > 0
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
  \t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
  \t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
  \t}
  \t#pragma unroll_loop_end
  \t#endif
  \t#if NUM_POINT_LIGHT_SHADOWS > 0
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
  \t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
  \t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
  \t}
  \t#pragma unroll_loop_end
  \t#endif
  #endif`,
          shadowmask_pars_fragment: `float getShadowMask() {
  \tfloat shadow = 1.0;
  \t#ifdef USE_SHADOWMAP
  \t#if NUM_DIR_LIGHT_SHADOWS > 0
  \tDirectionalLightShadow directionalLight;
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
  \t\tdirectionalLight = directionalLightShadows[ i ];
  \t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
  \t}
  \t#pragma unroll_loop_end
  \t#endif
  \t#if NUM_SPOT_LIGHT_SHADOWS > 0
  \tSpotLightShadow spotLight;
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
  \t\tspotLight = spotLightShadows[ i ];
  \t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
  \t}
  \t#pragma unroll_loop_end
  \t#endif
  \t#if NUM_POINT_LIGHT_SHADOWS > 0
  \tPointLightShadow pointLight;
  \t#pragma unroll_loop_start
  \tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
  \t\tpointLight = pointLightShadows[ i ];
  \t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
  \t}
  \t#pragma unroll_loop_end
  \t#endif
  \t#endif
  \treturn shadow;
  }`,
          skinbase_vertex: `#ifdef USE_SKINNING
  \tmat4 boneMatX = getBoneMatrix( skinIndex.x );
  \tmat4 boneMatY = getBoneMatrix( skinIndex.y );
  \tmat4 boneMatZ = getBoneMatrix( skinIndex.z );
  \tmat4 boneMatW = getBoneMatrix( skinIndex.w );
  #endif`,
          skinning_pars_vertex: `#ifdef USE_SKINNING
  \tuniform mat4 bindMatrix;
  \tuniform mat4 bindMatrixInverse;
  \t#ifdef BONE_TEXTURE
  \t\tuniform highp sampler2D boneTexture;
  \t\tuniform int boneTextureSize;
  \t\tmat4 getBoneMatrix( const in float i ) {
  \t\t\tfloat j = i * 4.0;
  \t\t\tfloat x = mod( j, float( boneTextureSize ) );
  \t\t\tfloat y = floor( j / float( boneTextureSize ) );
  \t\t\tfloat dx = 1.0 / float( boneTextureSize );
  \t\t\tfloat dy = 1.0 / float( boneTextureSize );
  \t\t\ty = dy * ( y + 0.5 );
  \t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
  \t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
  \t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
  \t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
  \t\t\tmat4 bone = mat4( v1, v2, v3, v4 );
  \t\t\treturn bone;
  \t\t}
  \t#else
  \t\tuniform mat4 boneMatrices[ MAX_BONES ];
  \t\tmat4 getBoneMatrix( const in float i ) {
  \t\t\tmat4 bone = boneMatrices[ int(i) ];
  \t\t\treturn bone;
  \t\t}
  \t#endif
  #endif`,
          skinning_vertex: `#ifdef USE_SKINNING
  \tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
  \tvec4 skinned = vec4( 0.0 );
  \tskinned += boneMatX * skinVertex * skinWeight.x;
  \tskinned += boneMatY * skinVertex * skinWeight.y;
  \tskinned += boneMatZ * skinVertex * skinWeight.z;
  \tskinned += boneMatW * skinVertex * skinWeight.w;
  \ttransformed = ( bindMatrixInverse * skinned ).xyz;
  #endif`,
          skinnormal_vertex: `#ifdef USE_SKINNING
  \tmat4 skinMatrix = mat4( 0.0 );
  \tskinMatrix += skinWeight.x * boneMatX;
  \tskinMatrix += skinWeight.y * boneMatY;
  \tskinMatrix += skinWeight.z * boneMatZ;
  \tskinMatrix += skinWeight.w * boneMatW;
  \tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
  \tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
  \t#ifdef USE_TANGENT
  \t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
  \t#endif
  #endif`,
          specularmap_fragment: `float specularStrength;
  #ifdef USE_SPECULARMAP
  \tvec4 texelSpecular = texture2D( specularMap, vUv );
  \tspecularStrength = texelSpecular.r;
  #else
  \tspecularStrength = 1.0;
  #endif`,
          specularmap_pars_fragment: `#ifdef USE_SPECULARMAP
  \tuniform sampler2D specularMap;
  #endif`,
          tonemapping_fragment: `#if defined( TONE_MAPPING )
  \tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
  #endif`,
          tonemapping_pars_fragment: `#ifndef saturate
  #define saturate( a ) clamp( a, 0.0, 1.0 )
  #endif
  uniform float toneMappingExposure;
  vec3 LinearToneMapping( vec3 color ) {
  \treturn toneMappingExposure * color;
  }
  vec3 ReinhardToneMapping( vec3 color ) {
  \tcolor *= toneMappingExposure;
  \treturn saturate( color / ( vec3( 1.0 ) + color ) );
  }
  vec3 OptimizedCineonToneMapping( vec3 color ) {
  \tcolor *= toneMappingExposure;
  \tcolor = max( vec3( 0.0 ), color - 0.004 );
  \treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
  }
  vec3 RRTAndODTFit( vec3 v ) {
  \tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;
  \tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
  \treturn a / b;
  }
  vec3 ACESFilmicToneMapping( vec3 color ) {
  \tconst mat3 ACESInputMat = mat3(
  \t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),
  \t\tvec3( 0.04823, 0.01566, 0.83777 )
  \t);
  \tconst mat3 ACESOutputMat = mat3(
  \t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),
  \t\tvec3( -0.07367, -0.00605,  1.07602 )
  \t);
  \tcolor *= toneMappingExposure / 0.6;
  \tcolor = ACESInputMat * color;
  \tcolor = RRTAndODTFit( color );
  \tcolor = ACESOutputMat * color;
  \treturn saturate( color );
  }
  vec3 CustomToneMapping( vec3 color ) { return color; }`,
          transmission_fragment: `#ifdef USE_TRANSMISSION
  \tfloat transmissionAlpha = 1.0;
  \tfloat transmissionFactor = transmission;
  \tfloat thicknessFactor = thickness;
  \t#ifdef USE_TRANSMISSIONMAP
  \t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;
  \t#endif
  \t#ifdef USE_THICKNESSMAP
  \t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;
  \t#endif
  \tvec3 pos = vWorldPosition;
  \tvec3 v = normalize( cameraPosition - pos );
  \tvec3 n = inverseTransformDirection( normal, viewMatrix );
  \tvec4 transmission = getIBLVolumeRefraction(
  \t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,
  \t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,
  \t\tattenuationColor, attenuationDistance );
  \ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );
  \ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );
  #endif`,
          transmission_pars_fragment: `#ifdef USE_TRANSMISSION
  \tuniform float transmission;
  \tuniform float thickness;
  \tuniform float attenuationDistance;
  \tuniform vec3 attenuationColor;
  \t#ifdef USE_TRANSMISSIONMAP
  \t\tuniform sampler2D transmissionMap;
  \t#endif
  \t#ifdef USE_THICKNESSMAP
  \t\tuniform sampler2D thicknessMap;
  \t#endif
  \tuniform vec2 transmissionSamplerSize;
  \tuniform sampler2D transmissionSamplerMap;
  \tuniform mat4 modelMatrix;
  \tuniform mat4 projectionMatrix;
  \tvarying vec3 vWorldPosition;
  \tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {
  \t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
  \t\tvec3 modelScale;
  \t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
  \t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
  \t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
  \t\treturn normalize( refractionVector ) * thickness * modelScale;
  \t}
  \tfloat applyIorToRoughness( float roughness, float ior ) {
  \t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
  \t}
  \tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {
  \t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
  \t\t#ifdef TEXTURE_LOD_EXT
  \t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
  \t\t#else
  \t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
  \t\t#endif
  \t}
  \tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {
  \t\tif ( attenuationDistance == 0.0 ) {
  \t\t\treturn radiance;
  \t\t} else {
  \t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
  \t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;
  \t\t}
  \t}
  \tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,
  \t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,
  \t\tvec3 attenuationColor, float attenuationDistance ) {
  \t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
  \t\tvec3 refractedRayExit = position + transmissionRay;
  \t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
  \t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;
  \t\trefractionCoords += 1.0;
  \t\trefractionCoords /= 2.0;
  \t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
  \t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
  \t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
  \t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
  \t}
  #endif`,
          uv_pars_fragment: `#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
  \tvarying vec2 vUv;
  #endif`,
          uv_pars_vertex: `#ifdef USE_UV
  \t#ifdef UVS_VERTEX_ONLY
  \t\tvec2 vUv;
  \t#else
  \t\tvarying vec2 vUv;
  \t#endif
  \tuniform mat3 uvTransform;
  #endif`,
          uv_vertex: `#ifdef USE_UV
  \tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;
  #endif`,
          uv2_pars_fragment: `#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
  \tvarying vec2 vUv2;
  #endif`,
          uv2_pars_vertex: `#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
  \tattribute vec2 uv2;
  \tvarying vec2 vUv2;
  \tuniform mat3 uv2Transform;
  #endif`,
          uv2_vertex: `#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
  \tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
  #endif`,
          worldpos_vertex: `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )
  \tvec4 worldPosition = vec4( transformed, 1.0 );
  \t#ifdef USE_INSTANCING
  \t\tworldPosition = instanceMatrix * worldPosition;
  \t#endif
  \tworldPosition = modelMatrix * worldPosition;
  #endif`,
          background_vert: `varying vec2 vUv;
  uniform mat3 uvTransform;
  void main() {
  \tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;
  \tgl_Position = vec4( position.xy, 1.0, 1.0 );
  }`,
          background_frag: `uniform sampler2D t2D;
  varying vec2 vUv;
  void main() {
  \tvec4 texColor = texture2D( t2D, vUv );
  \tgl_FragColor = mapTexelToLinear( texColor );
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  }`,
          cube_vert: `varying vec3 vWorldDirection;
  #include <common>
  void main() {
  \tvWorldDirection = transformDirection( position, modelMatrix );
  \t#include <begin_vertex>
  \t#include <project_vertex>
  \tgl_Position.z = gl_Position.w;
  }`,
          cube_frag: `#include <envmap_common_pars_fragment>
  uniform float opacity;
  varying vec3 vWorldDirection;
  #include <cube_uv_reflection_fragment>
  void main() {
  \tvec3 vReflect = vWorldDirection;
  \t#include <envmap_fragment>
  \tgl_FragColor = envColor;
  \tgl_FragColor.a *= opacity;
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  }`,
          depth_vert: `#include <common>
  #include <uv_pars_vertex>
  #include <displacementmap_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <skinning_pars_vertex>
  #include <logdepthbuf_pars_vertex>
  #include <clipping_planes_pars_vertex>
  varying vec2 vHighPrecisionZW;
  void main() {
  \t#include <uv_vertex>
  \t#include <skinbase_vertex>
  \t#ifdef USE_DISPLACEMENTMAP
  \t\t#include <beginnormal_vertex>
  \t\t#include <morphnormal_vertex>
  \t\t#include <skinnormal_vertex>
  \t#endif
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <skinning_vertex>
  \t#include <displacementmap_vertex>
  \t#include <project_vertex>
  \t#include <logdepthbuf_vertex>
  \t#include <clipping_planes_vertex>
  \tvHighPrecisionZW = gl_Position.zw;
  }`,
          depth_frag: `#if DEPTH_PACKING == 3200
  \tuniform float opacity;
  #endif
  #include <common>
  #include <packing>
  #include <uv_pars_fragment>
  #include <map_pars_fragment>
  #include <alphamap_pars_fragment>
  #include <alphatest_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  varying vec2 vHighPrecisionZW;
  void main() {
  \t#include <clipping_planes_fragment>
  \tvec4 diffuseColor = vec4( 1.0 );
  \t#if DEPTH_PACKING == 3200
  \t\tdiffuseColor.a = opacity;
  \t#endif
  \t#include <map_fragment>
  \t#include <alphamap_fragment>
  \t#include <alphatest_fragment>
  \t#include <logdepthbuf_fragment>
  \tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
  \t#if DEPTH_PACKING == 3200
  \t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
  \t#elif DEPTH_PACKING == 3201
  \t\tgl_FragColor = packDepthToRGBA( fragCoordZ );
  \t#endif
  }`,
          distanceRGBA_vert: `#define DISTANCE
  varying vec3 vWorldPosition;
  #include <common>
  #include <uv_pars_vertex>
  #include <displacementmap_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <skinning_pars_vertex>
  #include <clipping_planes_pars_vertex>
  void main() {
  \t#include <uv_vertex>
  \t#include <skinbase_vertex>
  \t#ifdef USE_DISPLACEMENTMAP
  \t\t#include <beginnormal_vertex>
  \t\t#include <morphnormal_vertex>
  \t\t#include <skinnormal_vertex>
  \t#endif
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <skinning_vertex>
  \t#include <displacementmap_vertex>
  \t#include <project_vertex>
  \t#include <worldpos_vertex>
  \t#include <clipping_planes_vertex>
  \tvWorldPosition = worldPosition.xyz;
  }`,
          distanceRGBA_frag: `#define DISTANCE
  uniform vec3 referencePosition;
  uniform float nearDistance;
  uniform float farDistance;
  varying vec3 vWorldPosition;
  #include <common>
  #include <packing>
  #include <uv_pars_fragment>
  #include <map_pars_fragment>
  #include <alphamap_pars_fragment>
  #include <alphatest_pars_fragment>
  #include <clipping_planes_pars_fragment>
  void main () {
  \t#include <clipping_planes_fragment>
  \tvec4 diffuseColor = vec4( 1.0 );
  \t#include <map_fragment>
  \t#include <alphamap_fragment>
  \t#include <alphatest_fragment>
  \tfloat dist = length( vWorldPosition - referencePosition );
  \tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );
  \tdist = saturate( dist );
  \tgl_FragColor = packDepthToRGBA( dist );
  }`,
          equirect_vert: `varying vec3 vWorldDirection;
  #include <common>
  void main() {
  \tvWorldDirection = transformDirection( position, modelMatrix );
  \t#include <begin_vertex>
  \t#include <project_vertex>
  }`,
          equirect_frag: `uniform sampler2D tEquirect;
  varying vec3 vWorldDirection;
  #include <common>
  void main() {
  \tvec3 direction = normalize( vWorldDirection );
  \tvec2 sampleUV = equirectUv( direction );
  \tvec4 texColor = texture2D( tEquirect, sampleUV );
  \tgl_FragColor = mapTexelToLinear( texColor );
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  }`,
          linedashed_vert: `uniform float scale;
  attribute float lineDistance;
  varying float vLineDistance;
  #include <common>
  #include <color_pars_vertex>
  #include <fog_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <logdepthbuf_pars_vertex>
  #include <clipping_planes_pars_vertex>
  void main() {
  \tvLineDistance = scale * lineDistance;
  \t#include <color_vertex>
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <project_vertex>
  \t#include <logdepthbuf_vertex>
  \t#include <clipping_planes_vertex>
  \t#include <fog_vertex>
  }`,
          linedashed_frag: `uniform vec3 diffuse;
  uniform float opacity;
  uniform float dashSize;
  uniform float totalSize;
  varying float vLineDistance;
  #include <common>
  #include <color_pars_fragment>
  #include <fog_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  void main() {
  \t#include <clipping_planes_fragment>
  \tif ( mod( vLineDistance, totalSize ) > dashSize ) {
  \t\tdiscard;
  \t}
  \tvec3 outgoingLight = vec3( 0.0 );
  \tvec4 diffuseColor = vec4( diffuse, opacity );
  \t#include <logdepthbuf_fragment>
  \t#include <color_fragment>
  \toutgoingLight = diffuseColor.rgb;
  \t#include <output_fragment>
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  \t#include <fog_fragment>
  \t#include <premultiplied_alpha_fragment>
  }`,
          meshbasic_vert: `#include <common>
  #include <uv_pars_vertex>
  #include <uv2_pars_vertex>
  #include <envmap_pars_vertex>
  #include <color_pars_vertex>
  #include <fog_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <skinning_pars_vertex>
  #include <logdepthbuf_pars_vertex>
  #include <clipping_planes_pars_vertex>
  void main() {
  \t#include <uv_vertex>
  \t#include <uv2_vertex>
  \t#include <color_vertex>
  \t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
  \t\t#include <beginnormal_vertex>
  \t\t#include <morphnormal_vertex>
  \t\t#include <skinbase_vertex>
  \t\t#include <skinnormal_vertex>
  \t\t#include <defaultnormal_vertex>
  \t#endif
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <skinning_vertex>
  \t#include <project_vertex>
  \t#include <logdepthbuf_vertex>
  \t#include <clipping_planes_vertex>
  \t#include <worldpos_vertex>
  \t#include <envmap_vertex>
  \t#include <fog_vertex>
  }`,
          meshbasic_frag: `uniform vec3 diffuse;
  uniform float opacity;
  #ifndef FLAT_SHADED
  \tvarying vec3 vNormal;
  #endif
  #include <common>
  #include <dithering_pars_fragment>
  #include <color_pars_fragment>
  #include <uv_pars_fragment>
  #include <uv2_pars_fragment>
  #include <map_pars_fragment>
  #include <alphamap_pars_fragment>
  #include <alphatest_pars_fragment>
  #include <aomap_pars_fragment>
  #include <lightmap_pars_fragment>
  #include <envmap_common_pars_fragment>
  #include <envmap_pars_fragment>
  #include <cube_uv_reflection_fragment>
  #include <fog_pars_fragment>
  #include <specularmap_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  void main() {
  \t#include <clipping_planes_fragment>
  \tvec4 diffuseColor = vec4( diffuse, opacity );
  \t#include <logdepthbuf_fragment>
  \t#include <map_fragment>
  \t#include <color_fragment>
  \t#include <alphamap_fragment>
  \t#include <alphatest_fragment>
  \t#include <specularmap_fragment>
  \tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
  \t#ifdef USE_LIGHTMAP
  \t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );
  \t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
  \t#else
  \t\treflectedLight.indirectDiffuse += vec3( 1.0 );
  \t#endif
  \t#include <aomap_fragment>
  \treflectedLight.indirectDiffuse *= diffuseColor.rgb;
  \tvec3 outgoingLight = reflectedLight.indirectDiffuse;
  \t#include <envmap_fragment>
  \t#include <output_fragment>
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  \t#include <fog_fragment>
  \t#include <premultiplied_alpha_fragment>
  \t#include <dithering_fragment>
  }`,
          meshlambert_vert: `#define LAMBERT
  varying vec3 vLightFront;
  varying vec3 vIndirectFront;
  #ifdef DOUBLE_SIDED
  \tvarying vec3 vLightBack;
  \tvarying vec3 vIndirectBack;
  #endif
  #include <common>
  #include <uv_pars_vertex>
  #include <uv2_pars_vertex>
  #include <envmap_pars_vertex>
  #include <bsdfs>
  #include <lights_pars_begin>
  #include <color_pars_vertex>
  #include <fog_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <skinning_pars_vertex>
  #include <shadowmap_pars_vertex>
  #include <logdepthbuf_pars_vertex>
  #include <clipping_planes_pars_vertex>
  void main() {
  \t#include <uv_vertex>
  \t#include <uv2_vertex>
  \t#include <color_vertex>
  \t#include <beginnormal_vertex>
  \t#include <morphnormal_vertex>
  \t#include <skinbase_vertex>
  \t#include <skinnormal_vertex>
  \t#include <defaultnormal_vertex>
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <skinning_vertex>
  \t#include <project_vertex>
  \t#include <logdepthbuf_vertex>
  \t#include <clipping_planes_vertex>
  \t#include <worldpos_vertex>
  \t#include <envmap_vertex>
  \t#include <lights_lambert_vertex>
  \t#include <shadowmap_vertex>
  \t#include <fog_vertex>
  }`,
          meshlambert_frag: `uniform vec3 diffuse;
  uniform vec3 emissive;
  uniform float opacity;
  varying vec3 vLightFront;
  varying vec3 vIndirectFront;
  #ifdef DOUBLE_SIDED
  \tvarying vec3 vLightBack;
  \tvarying vec3 vIndirectBack;
  #endif
  #include <common>
  #include <packing>
  #include <dithering_pars_fragment>
  #include <color_pars_fragment>
  #include <uv_pars_fragment>
  #include <uv2_pars_fragment>
  #include <map_pars_fragment>
  #include <alphamap_pars_fragment>
  #include <alphatest_pars_fragment>
  #include <aomap_pars_fragment>
  #include <lightmap_pars_fragment>
  #include <emissivemap_pars_fragment>
  #include <envmap_common_pars_fragment>
  #include <envmap_pars_fragment>
  #include <cube_uv_reflection_fragment>
  #include <bsdfs>
  #include <lights_pars_begin>
  #include <fog_pars_fragment>
  #include <shadowmap_pars_fragment>
  #include <shadowmask_pars_fragment>
  #include <specularmap_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  void main() {
  \t#include <clipping_planes_fragment>
  \tvec4 diffuseColor = vec4( diffuse, opacity );
  \tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
  \tvec3 totalEmissiveRadiance = emissive;
  \t#include <logdepthbuf_fragment>
  \t#include <map_fragment>
  \t#include <color_fragment>
  \t#include <alphamap_fragment>
  \t#include <alphatest_fragment>
  \t#include <specularmap_fragment>
  \t#include <emissivemap_fragment>
  \t#ifdef DOUBLE_SIDED
  \t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
  \t#else
  \t\treflectedLight.indirectDiffuse += vIndirectFront;
  \t#endif
  \t#include <lightmap_fragment>
  \treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );
  \t#ifdef DOUBLE_SIDED
  \t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
  \t#else
  \t\treflectedLight.directDiffuse = vLightFront;
  \t#endif
  \treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();
  \t#include <aomap_fragment>
  \tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
  \t#include <envmap_fragment>
  \t#include <output_fragment>
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  \t#include <fog_fragment>
  \t#include <premultiplied_alpha_fragment>
  \t#include <dithering_fragment>
  }`,
          meshmatcap_vert: `#define MATCAP
  varying vec3 vViewPosition;
  #include <common>
  #include <uv_pars_vertex>
  #include <color_pars_vertex>
  #include <displacementmap_pars_vertex>
  #include <fog_pars_vertex>
  #include <normal_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <skinning_pars_vertex>
  #include <logdepthbuf_pars_vertex>
  #include <clipping_planes_pars_vertex>
  void main() {
  \t#include <uv_vertex>
  \t#include <color_vertex>
  \t#include <beginnormal_vertex>
  \t#include <morphnormal_vertex>
  \t#include <skinbase_vertex>
  \t#include <skinnormal_vertex>
  \t#include <defaultnormal_vertex>
  \t#include <normal_vertex>
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <skinning_vertex>
  \t#include <displacementmap_vertex>
  \t#include <project_vertex>
  \t#include <logdepthbuf_vertex>
  \t#include <clipping_planes_vertex>
  \t#include <fog_vertex>
  \tvViewPosition = - mvPosition.xyz;
  }`,
          meshmatcap_frag: `#define MATCAP
  uniform vec3 diffuse;
  uniform float opacity;
  uniform sampler2D matcap;
  varying vec3 vViewPosition;
  #include <common>
  #include <dithering_pars_fragment>
  #include <color_pars_fragment>
  #include <uv_pars_fragment>
  #include <map_pars_fragment>
  #include <alphamap_pars_fragment>
  #include <alphatest_pars_fragment>
  #include <fog_pars_fragment>
  #include <normal_pars_fragment>
  #include <bumpmap_pars_fragment>
  #include <normalmap_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  void main() {
  \t#include <clipping_planes_fragment>
  \tvec4 diffuseColor = vec4( diffuse, opacity );
  \t#include <logdepthbuf_fragment>
  \t#include <map_fragment>
  \t#include <color_fragment>
  \t#include <alphamap_fragment>
  \t#include <alphatest_fragment>
  \t#include <normal_fragment_begin>
  \t#include <normal_fragment_maps>
  \tvec3 viewDir = normalize( vViewPosition );
  \tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
  \tvec3 y = cross( viewDir, x );
  \tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
  \t#ifdef USE_MATCAP
  \t\tvec4 matcapColor = texture2D( matcap, uv );
  \t\tmatcapColor = matcapTexelToLinear( matcapColor );
  \t#else
  \t\tvec4 matcapColor = vec4( 1.0 );
  \t#endif
  \tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
  \t#include <output_fragment>
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  \t#include <fog_fragment>
  \t#include <premultiplied_alpha_fragment>
  \t#include <dithering_fragment>
  }`,
          meshnormal_vert: `#define NORMAL
  #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
  \tvarying vec3 vViewPosition;
  #endif
  #include <common>
  #include <uv_pars_vertex>
  #include <displacementmap_pars_vertex>
  #include <normal_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <skinning_pars_vertex>
  #include <logdepthbuf_pars_vertex>
  #include <clipping_planes_pars_vertex>
  void main() {
  \t#include <uv_vertex>
  \t#include <beginnormal_vertex>
  \t#include <morphnormal_vertex>
  \t#include <skinbase_vertex>
  \t#include <skinnormal_vertex>
  \t#include <defaultnormal_vertex>
  \t#include <normal_vertex>
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <skinning_vertex>
  \t#include <displacementmap_vertex>
  \t#include <project_vertex>
  \t#include <logdepthbuf_vertex>
  \t#include <clipping_planes_vertex>
  #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
  \tvViewPosition = - mvPosition.xyz;
  #endif
  }`,
          meshnormal_frag: `#define NORMAL
  uniform float opacity;
  #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
  \tvarying vec3 vViewPosition;
  #endif
  #include <packing>
  #include <uv_pars_fragment>
  #include <normal_pars_fragment>
  #include <bumpmap_pars_fragment>
  #include <normalmap_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  void main() {
  \t#include <clipping_planes_fragment>
  \t#include <logdepthbuf_fragment>
  \t#include <normal_fragment_begin>
  \t#include <normal_fragment_maps>
  \tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );
  }`,
          meshphong_vert: `#define PHONG
  varying vec3 vViewPosition;
  #include <common>
  #include <uv_pars_vertex>
  #include <uv2_pars_vertex>
  #include <displacementmap_pars_vertex>
  #include <envmap_pars_vertex>
  #include <color_pars_vertex>
  #include <fog_pars_vertex>
  #include <normal_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <skinning_pars_vertex>
  #include <shadowmap_pars_vertex>
  #include <logdepthbuf_pars_vertex>
  #include <clipping_planes_pars_vertex>
  void main() {
  \t#include <uv_vertex>
  \t#include <uv2_vertex>
  \t#include <color_vertex>
  \t#include <beginnormal_vertex>
  \t#include <morphnormal_vertex>
  \t#include <skinbase_vertex>
  \t#include <skinnormal_vertex>
  \t#include <defaultnormal_vertex>
  \t#include <normal_vertex>
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <skinning_vertex>
  \t#include <displacementmap_vertex>
  \t#include <project_vertex>
  \t#include <logdepthbuf_vertex>
  \t#include <clipping_planes_vertex>
  \tvViewPosition = - mvPosition.xyz;
  \t#include <worldpos_vertex>
  \t#include <envmap_vertex>
  \t#include <shadowmap_vertex>
  \t#include <fog_vertex>
  }`,
          meshphong_frag: `#define PHONG
  uniform vec3 diffuse;
  uniform vec3 emissive;
  uniform vec3 specular;
  uniform float shininess;
  uniform float opacity;
  #include <common>
  #include <packing>
  #include <dithering_pars_fragment>
  #include <color_pars_fragment>
  #include <uv_pars_fragment>
  #include <uv2_pars_fragment>
  #include <map_pars_fragment>
  #include <alphamap_pars_fragment>
  #include <alphatest_pars_fragment>
  #include <aomap_pars_fragment>
  #include <lightmap_pars_fragment>
  #include <emissivemap_pars_fragment>
  #include <envmap_common_pars_fragment>
  #include <envmap_pars_fragment>
  #include <cube_uv_reflection_fragment>
  #include <fog_pars_fragment>
  #include <bsdfs>
  #include <lights_pars_begin>
  #include <normal_pars_fragment>
  #include <lights_phong_pars_fragment>
  #include <shadowmap_pars_fragment>
  #include <bumpmap_pars_fragment>
  #include <normalmap_pars_fragment>
  #include <specularmap_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  void main() {
  \t#include <clipping_planes_fragment>
  \tvec4 diffuseColor = vec4( diffuse, opacity );
  \tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
  \tvec3 totalEmissiveRadiance = emissive;
  \t#include <logdepthbuf_fragment>
  \t#include <map_fragment>
  \t#include <color_fragment>
  \t#include <alphamap_fragment>
  \t#include <alphatest_fragment>
  \t#include <specularmap_fragment>
  \t#include <normal_fragment_begin>
  \t#include <normal_fragment_maps>
  \t#include <emissivemap_fragment>
  \t#include <lights_phong_fragment>
  \t#include <lights_fragment_begin>
  \t#include <lights_fragment_maps>
  \t#include <lights_fragment_end>
  \t#include <aomap_fragment>
  \tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
  \t#include <envmap_fragment>
  \t#include <output_fragment>
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  \t#include <fog_fragment>
  \t#include <premultiplied_alpha_fragment>
  \t#include <dithering_fragment>
  }`,
          meshphysical_vert: `#define STANDARD
  varying vec3 vViewPosition;
  #ifdef USE_TRANSMISSION
  \tvarying vec3 vWorldPosition;
  #endif
  #include <common>
  #include <uv_pars_vertex>
  #include <uv2_pars_vertex>
  #include <displacementmap_pars_vertex>
  #include <color_pars_vertex>
  #include <fog_pars_vertex>
  #include <normal_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <skinning_pars_vertex>
  #include <shadowmap_pars_vertex>
  #include <logdepthbuf_pars_vertex>
  #include <clipping_planes_pars_vertex>
  void main() {
  \t#include <uv_vertex>
  \t#include <uv2_vertex>
  \t#include <color_vertex>
  \t#include <beginnormal_vertex>
  \t#include <morphnormal_vertex>
  \t#include <skinbase_vertex>
  \t#include <skinnormal_vertex>
  \t#include <defaultnormal_vertex>
  \t#include <normal_vertex>
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <skinning_vertex>
  \t#include <displacementmap_vertex>
  \t#include <project_vertex>
  \t#include <logdepthbuf_vertex>
  \t#include <clipping_planes_vertex>
  \tvViewPosition = - mvPosition.xyz;
  \t#include <worldpos_vertex>
  \t#include <shadowmap_vertex>
  \t#include <fog_vertex>
  #ifdef USE_TRANSMISSION
  \tvWorldPosition = worldPosition.xyz;
  #endif
  }`,
          meshphysical_frag: `#define STANDARD
  #ifdef PHYSICAL
  \t#define IOR
  \t#define SPECULAR
  #endif
  uniform vec3 diffuse;
  uniform vec3 emissive;
  uniform float roughness;
  uniform float metalness;
  uniform float opacity;
  #ifdef IOR
  \tuniform float ior;
  #endif
  #ifdef SPECULAR
  \tuniform float specularIntensity;
  \tuniform vec3 specularColor;
  \t#ifdef USE_SPECULARINTENSITYMAP
  \t\tuniform sampler2D specularIntensityMap;
  \t#endif
  \t#ifdef USE_SPECULARCOLORMAP
  \t\tuniform sampler2D specularColorMap;
  \t#endif
  #endif
  #ifdef USE_CLEARCOAT
  \tuniform float clearcoat;
  \tuniform float clearcoatRoughness;
  #endif
  #ifdef USE_SHEEN
  \tuniform vec3 sheenColor;
  \tuniform float sheenRoughness;
  \t#ifdef USE_SHEENCOLORMAP
  \t\tuniform sampler2D sheenColorMap;
  \t#endif
  \t#ifdef USE_SHEENROUGHNESSMAP
  \t\tuniform sampler2D sheenRoughnessMap;
  \t#endif
  #endif
  varying vec3 vViewPosition;
  #include <common>
  #include <packing>
  #include <dithering_pars_fragment>
  #include <color_pars_fragment>
  #include <uv_pars_fragment>
  #include <uv2_pars_fragment>
  #include <map_pars_fragment>
  #include <alphamap_pars_fragment>
  #include <alphatest_pars_fragment>
  #include <aomap_pars_fragment>
  #include <lightmap_pars_fragment>
  #include <emissivemap_pars_fragment>
  #include <bsdfs>
  #include <cube_uv_reflection_fragment>
  #include <envmap_common_pars_fragment>
  #include <envmap_physical_pars_fragment>
  #include <fog_pars_fragment>
  #include <lights_pars_begin>
  #include <normal_pars_fragment>
  #include <lights_physical_pars_fragment>
  #include <transmission_pars_fragment>
  #include <shadowmap_pars_fragment>
  #include <bumpmap_pars_fragment>
  #include <normalmap_pars_fragment>
  #include <clearcoat_pars_fragment>
  #include <roughnessmap_pars_fragment>
  #include <metalnessmap_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  void main() {
  \t#include <clipping_planes_fragment>
  \tvec4 diffuseColor = vec4( diffuse, opacity );
  \tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
  \tvec3 totalEmissiveRadiance = emissive;
  \t#include <logdepthbuf_fragment>
  \t#include <map_fragment>
  \t#include <color_fragment>
  \t#include <alphamap_fragment>
  \t#include <alphatest_fragment>
  \t#include <roughnessmap_fragment>
  \t#include <metalnessmap_fragment>
  \t#include <normal_fragment_begin>
  \t#include <normal_fragment_maps>
  \t#include <clearcoat_normal_fragment_begin>
  \t#include <clearcoat_normal_fragment_maps>
  \t#include <emissivemap_fragment>
  \t#include <lights_physical_fragment>
  \t#include <lights_fragment_begin>
  \t#include <lights_fragment_maps>
  \t#include <lights_fragment_end>
  \t#include <aomap_fragment>
  \tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
  \tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
  \t#include <transmission_fragment>
  \tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
  \t#ifdef USE_SHEEN
  \t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
  \t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
  \t#endif
  \t#ifdef USE_CLEARCOAT
  \t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
  \t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
  \t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
  \t#endif
  \t#include <output_fragment>
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  \t#include <fog_fragment>
  \t#include <premultiplied_alpha_fragment>
  \t#include <dithering_fragment>
  }`,
          meshtoon_vert: `#define TOON
  varying vec3 vViewPosition;
  #include <common>
  #include <uv_pars_vertex>
  #include <uv2_pars_vertex>
  #include <displacementmap_pars_vertex>
  #include <color_pars_vertex>
  #include <fog_pars_vertex>
  #include <normal_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <skinning_pars_vertex>
  #include <shadowmap_pars_vertex>
  #include <logdepthbuf_pars_vertex>
  #include <clipping_planes_pars_vertex>
  void main() {
  \t#include <uv_vertex>
  \t#include <uv2_vertex>
  \t#include <color_vertex>
  \t#include <beginnormal_vertex>
  \t#include <morphnormal_vertex>
  \t#include <skinbase_vertex>
  \t#include <skinnormal_vertex>
  \t#include <defaultnormal_vertex>
  \t#include <normal_vertex>
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <skinning_vertex>
  \t#include <displacementmap_vertex>
  \t#include <project_vertex>
  \t#include <logdepthbuf_vertex>
  \t#include <clipping_planes_vertex>
  \tvViewPosition = - mvPosition.xyz;
  \t#include <worldpos_vertex>
  \t#include <shadowmap_vertex>
  \t#include <fog_vertex>
  }`,
          meshtoon_frag: `#define TOON
  uniform vec3 diffuse;
  uniform vec3 emissive;
  uniform float opacity;
  #include <common>
  #include <packing>
  #include <dithering_pars_fragment>
  #include <color_pars_fragment>
  #include <uv_pars_fragment>
  #include <uv2_pars_fragment>
  #include <map_pars_fragment>
  #include <alphamap_pars_fragment>
  #include <alphatest_pars_fragment>
  #include <aomap_pars_fragment>
  #include <lightmap_pars_fragment>
  #include <emissivemap_pars_fragment>
  #include <gradientmap_pars_fragment>
  #include <fog_pars_fragment>
  #include <bsdfs>
  #include <lights_pars_begin>
  #include <normal_pars_fragment>
  #include <lights_toon_pars_fragment>
  #include <shadowmap_pars_fragment>
  #include <bumpmap_pars_fragment>
  #include <normalmap_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  void main() {
  \t#include <clipping_planes_fragment>
  \tvec4 diffuseColor = vec4( diffuse, opacity );
  \tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
  \tvec3 totalEmissiveRadiance = emissive;
  \t#include <logdepthbuf_fragment>
  \t#include <map_fragment>
  \t#include <color_fragment>
  \t#include <alphamap_fragment>
  \t#include <alphatest_fragment>
  \t#include <normal_fragment_begin>
  \t#include <normal_fragment_maps>
  \t#include <emissivemap_fragment>
  \t#include <lights_toon_fragment>
  \t#include <lights_fragment_begin>
  \t#include <lights_fragment_maps>
  \t#include <lights_fragment_end>
  \t#include <aomap_fragment>
  \tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
  \t#include <output_fragment>
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  \t#include <fog_fragment>
  \t#include <premultiplied_alpha_fragment>
  \t#include <dithering_fragment>
  }`,
          points_vert: `uniform float size;
  uniform float scale;
  #include <common>
  #include <color_pars_vertex>
  #include <fog_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <logdepthbuf_pars_vertex>
  #include <clipping_planes_pars_vertex>
  void main() {
  \t#include <color_vertex>
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <project_vertex>
  \tgl_PointSize = size;
  \t#ifdef USE_SIZEATTENUATION
  \t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );
  \t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
  \t#endif
  \t#include <logdepthbuf_vertex>
  \t#include <clipping_planes_vertex>
  \t#include <worldpos_vertex>
  \t#include <fog_vertex>
  }`,
          points_frag: `uniform vec3 diffuse;
  uniform float opacity;
  #include <common>
  #include <color_pars_fragment>
  #include <map_particle_pars_fragment>
  #include <alphatest_pars_fragment>
  #include <fog_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  void main() {
  \t#include <clipping_planes_fragment>
  \tvec3 outgoingLight = vec3( 0.0 );
  \tvec4 diffuseColor = vec4( diffuse, opacity );
  \t#include <logdepthbuf_fragment>
  \t#include <map_particle_fragment>
  \t#include <color_fragment>
  \t#include <alphatest_fragment>
  \toutgoingLight = diffuseColor.rgb;
  \t#include <output_fragment>
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  \t#include <fog_fragment>
  \t#include <premultiplied_alpha_fragment>
  }`,
          shadow_vert: `#include <common>
  #include <fog_pars_vertex>
  #include <morphtarget_pars_vertex>
  #include <skinning_pars_vertex>
  #include <shadowmap_pars_vertex>
  void main() {
  \t#include <beginnormal_vertex>
  \t#include <morphnormal_vertex>
  \t#include <skinbase_vertex>
  \t#include <skinnormal_vertex>
  \t#include <defaultnormal_vertex>
  \t#include <begin_vertex>
  \t#include <morphtarget_vertex>
  \t#include <skinning_vertex>
  \t#include <project_vertex>
  \t#include <worldpos_vertex>
  \t#include <shadowmap_vertex>
  \t#include <fog_vertex>
  }`,
          shadow_frag: `uniform vec3 color;
  uniform float opacity;
  #include <common>
  #include <packing>
  #include <fog_pars_fragment>
  #include <bsdfs>
  #include <lights_pars_begin>
  #include <shadowmap_pars_fragment>
  #include <shadowmask_pars_fragment>
  void main() {
  \tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  \t#include <fog_fragment>
  }`,
          sprite_vert: `uniform float rotation;
  uniform vec2 center;
  #include <common>
  #include <uv_pars_vertex>
  #include <fog_pars_vertex>
  #include <logdepthbuf_pars_vertex>
  #include <clipping_planes_pars_vertex>
  void main() {
  \t#include <uv_vertex>
  \tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
  \tvec2 scale;
  \tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
  \tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
  \t#ifndef USE_SIZEATTENUATION
  \t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );
  \t\tif ( isPerspective ) scale *= - mvPosition.z;
  \t#endif
  \tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
  \tvec2 rotatedPosition;
  \trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
  \trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
  \tmvPosition.xy += rotatedPosition;
  \tgl_Position = projectionMatrix * mvPosition;
  \t#include <logdepthbuf_vertex>
  \t#include <clipping_planes_vertex>
  \t#include <fog_vertex>
  }`,
          sprite_frag: `uniform vec3 diffuse;
  uniform float opacity;
  #include <common>
  #include <uv_pars_fragment>
  #include <map_pars_fragment>
  #include <alphamap_pars_fragment>
  #include <alphatest_pars_fragment>
  #include <fog_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  void main() {
  \t#include <clipping_planes_fragment>
  \tvec3 outgoingLight = vec3( 0.0 );
  \tvec4 diffuseColor = vec4( diffuse, opacity );
  \t#include <logdepthbuf_fragment>
  \t#include <map_fragment>
  \t#include <alphamap_fragment>
  \t#include <alphatest_fragment>
  \toutgoingLight = diffuseColor.rgb;
  \t#include <output_fragment>
  \t#include <tonemapping_fragment>
  \t#include <encodings_fragment>
  \t#include <fog_fragment>
  }`
        };
        const _0x2b5bcc = {
          common: {
            diffuse: {
              value: new _0x1282c2(16777215)
            },
            opacity: {
              value: 1
            },
            map: {
              value: null
            },
            uvTransform: {
              value: new _0x30cf5e()
            },
            uv2Transform: {
              value: new _0x30cf5e()
            },
            alphaMap: {
              value: null
            },
            alphaTest: {
              value: 0
            }
          },
          specularmap: {
            specularMap: {
              value: null
            }
          },
          envmap: {
            envMap: {
              value: null
            },
            flipEnvMap: {
              value: -1
            },
            reflectivity: {
              value: 1
            },
            ior: {
              value: 1.5
            },
            refractionRatio: {
              value: 0.98
            }
          },
          aomap: {
            aoMap: {
              value: null
            },
            aoMapIntensity: {
              value: 1
            }
          },
          lightmap: {
            lightMap: {
              value: null
            },
            lightMapIntensity: {
              value: 1
            }
          },
          emissivemap: {
            emissiveMap: {
              value: null
            }
          },
          bumpmap: {
            bumpMap: {
              value: null
            },
            bumpScale: {
              value: 1
            }
          },
          normalmap: {
            normalMap: {
              value: null
            },
            normalScale: {
              value: new _0x25f874(1, 1)
            }
          },
          displacementmap: {
            displacementMap: {
              value: null
            },
            displacementScale: {
              value: 1
            },
            displacementBias: {
              value: 0
            }
          },
          roughnessmap: {
            roughnessMap: {
              value: null
            }
          },
          metalnessmap: {
            metalnessMap: {
              value: null
            }
          },
          gradientmap: {
            gradientMap: {
              value: null
            }
          },
          fog: {
            fogDensity: {
              value: 0.00025
            },
            fogNear: {
              value: 1
            },
            fogFar: {
              value: 2000
            },
            fogColor: {
              value: new _0x1282c2(16777215)
            }
          },
          lights: {
            ambientLightColor: {
              value: []
            },
            lightProbe: {
              value: []
            },
            directionalLights: {
              value: [],
              properties: {
                direction: {},
                color: {}
              }
            },
            directionalLightShadows: {
              value: [],
              properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
              }
            },
            directionalShadowMap: {
              value: []
            },
            directionalShadowMatrix: {
              value: []
            },
            spotLights: {
              value: [],
              properties: {
                color: {},
                position: {},
                direction: {},
                distance: {},
                coneCos: {},
                penumbraCos: {},
                decay: {}
              }
            },
            spotLightShadows: {
              value: [],
              properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
              }
            },
            spotShadowMap: {
              value: []
            },
            spotShadowMatrix: {
              value: []
            },
            pointLights: {
              value: [],
              properties: {
                color: {},
                position: {},
                decay: {},
                distance: {}
              }
            },
            pointLightShadows: {
              value: [],
              properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
                shadowCameraNear: {},
                shadowCameraFar: {}
              }
            },
            pointShadowMap: {
              value: []
            },
            pointShadowMatrix: {
              value: []
            },
            hemisphereLights: {
              value: [],
              properties: {
                direction: {},
                skyColor: {},
                groundColor: {}
              }
            },
            rectAreaLights: {
              value: [],
              properties: {
                color: {},
                position: {},
                width: {},
                height: {}
              }
            },
            ltc_1: {
              value: null
            },
            ltc_2: {
              value: null
            }
          },
          points: {
            diffuse: {
              value: new _0x1282c2(16777215)
            },
            opacity: {
              value: 1
            },
            size: {
              value: 1
            },
            scale: {
              value: 1
            },
            map: {
              value: null
            },
            alphaMap: {
              value: null
            },
            alphaTest: {
              value: 0
            },
            uvTransform: {
              value: new _0x30cf5e()
            }
          },
          sprite: {
            diffuse: {
              value: new _0x1282c2(16777215)
            },
            opacity: {
              value: 1
            },
            center: {
              value: new _0x25f874(0.5, 0.5)
            },
            rotation: {
              value: 0
            },
            map: {
              value: null
            },
            alphaMap: {
              value: null
            },
            alphaTest: {
              value: 0
            },
            uvTransform: {
              value: new _0x30cf5e()
            }
          }
        };
        const _0x3543c2 = {
          basic: {
            uniforms: _0x418e3c([_0x2b5bcc.common, _0x2b5bcc.specularmap, _0x2b5bcc.envmap, _0x2b5bcc.aomap, _0x2b5bcc.lightmap, _0x2b5bcc.fog]),
            vertexShader: _0x53dfdc.meshbasic_vert,
            fragmentShader: _0x53dfdc.meshbasic_frag
          },
          lambert: {
            uniforms: _0x418e3c([_0x2b5bcc.common, _0x2b5bcc.specularmap, _0x2b5bcc.envmap, _0x2b5bcc.aomap, _0x2b5bcc.lightmap, _0x2b5bcc.emissivemap, _0x2b5bcc.fog, _0x2b5bcc.lights, {
              emissive: {
                value: new _0x1282c2(0)
              }
            }]),
            vertexShader: _0x53dfdc.meshlambert_vert,
            fragmentShader: _0x53dfdc.meshlambert_frag
          },
          phong: {
            uniforms: _0x418e3c([_0x2b5bcc.common, _0x2b5bcc.specularmap, _0x2b5bcc.envmap, _0x2b5bcc.aomap, _0x2b5bcc.lightmap, _0x2b5bcc.emissivemap, _0x2b5bcc.bumpmap, _0x2b5bcc.normalmap, _0x2b5bcc.displacementmap, _0x2b5bcc.fog, _0x2b5bcc.lights, {
              emissive: {
                value: new _0x1282c2(0)
              },
              specular: {
                value: new _0x1282c2(1118481)
              },
              shininess: {
                value: 30
              }
            }]),
            vertexShader: _0x53dfdc.meshphong_vert,
            fragmentShader: _0x53dfdc.meshphong_frag
          },
          standard: {
            uniforms: _0x418e3c([_0x2b5bcc.common, _0x2b5bcc.envmap, _0x2b5bcc.aomap, _0x2b5bcc.lightmap, _0x2b5bcc.emissivemap, _0x2b5bcc.bumpmap, _0x2b5bcc.normalmap, _0x2b5bcc.displacementmap, _0x2b5bcc.roughnessmap, _0x2b5bcc.metalnessmap, _0x2b5bcc.fog, _0x2b5bcc.lights, {
              emissive: {
                value: new _0x1282c2(0)
              },
              roughness: {
                value: 1
              },
              metalness: {
                value: 0
              },
              envMapIntensity: {
                value: 1
              }
            }]),
            vertexShader: _0x53dfdc.meshphysical_vert,
            fragmentShader: _0x53dfdc.meshphysical_frag
          },
          toon: {
            uniforms: _0x418e3c([_0x2b5bcc.common, _0x2b5bcc.aomap, _0x2b5bcc.lightmap, _0x2b5bcc.emissivemap, _0x2b5bcc.bumpmap, _0x2b5bcc.normalmap, _0x2b5bcc.displacementmap, _0x2b5bcc.gradientmap, _0x2b5bcc.fog, _0x2b5bcc.lights, {
              emissive: {
                value: new _0x1282c2(0)
              }
            }]),
            vertexShader: _0x53dfdc.meshtoon_vert,
            fragmentShader: _0x53dfdc.meshtoon_frag
          },
          matcap: {
            uniforms: _0x418e3c([_0x2b5bcc.common, _0x2b5bcc.bumpmap, _0x2b5bcc.normalmap, _0x2b5bcc.displacementmap, _0x2b5bcc.fog, {
              matcap: {
                value: null
              }
            }]),
            vertexShader: _0x53dfdc.meshmatcap_vert,
            fragmentShader: _0x53dfdc.meshmatcap_frag
          },
          points: {
            uniforms: _0x418e3c([_0x2b5bcc.points, _0x2b5bcc.fog]),
            vertexShader: _0x53dfdc.points_vert,
            fragmentShader: _0x53dfdc.points_frag
          },
          dashed: {
            uniforms: _0x418e3c([_0x2b5bcc.common, _0x2b5bcc.fog, {
              scale: {
                value: 1
              },
              dashSize: {
                value: 1
              },
              totalSize: {
                value: 2
              }
            }]),
            vertexShader: _0x53dfdc.linedashed_vert,
            fragmentShader: _0x53dfdc.linedashed_frag
          },
          depth: {
            uniforms: _0x418e3c([_0x2b5bcc.common, _0x2b5bcc.displacementmap]),
            vertexShader: _0x53dfdc.depth_vert,
            fragmentShader: _0x53dfdc.depth_frag
          },
          normal: {
            uniforms: _0x418e3c([_0x2b5bcc.common, _0x2b5bcc.bumpmap, _0x2b5bcc.normalmap, _0x2b5bcc.displacementmap, {
              opacity: {
                value: 1
              }
            }]),
            vertexShader: _0x53dfdc.meshnormal_vert,
            fragmentShader: _0x53dfdc.meshnormal_frag
          },
          sprite: {
            uniforms: _0x418e3c([_0x2b5bcc.sprite, _0x2b5bcc.fog]),
            vertexShader: _0x53dfdc.sprite_vert,
            fragmentShader: _0x53dfdc.sprite_frag
          },
          background: {
            uniforms: {
              uvTransform: {
                value: new _0x30cf5e()
              },
              t2D: {
                value: null
              }
            },
            vertexShader: _0x53dfdc.background_vert,
            fragmentShader: _0x53dfdc.background_frag
          },
          cube: {
            uniforms: _0x418e3c([_0x2b5bcc.envmap, {
              opacity: {
                value: 1
              }
            }]),
            vertexShader: _0x53dfdc.cube_vert,
            fragmentShader: _0x53dfdc.cube_frag
          },
          equirect: {
            uniforms: {
              tEquirect: {
                value: null
              }
            },
            vertexShader: _0x53dfdc.equirect_vert,
            fragmentShader: _0x53dfdc.equirect_frag
          },
          distanceRGBA: {
            uniforms: _0x418e3c([_0x2b5bcc.common, _0x2b5bcc.displacementmap, {
              referencePosition: {
                value: new _0x1d20ef()
              },
              nearDistance: {
                value: 1
              },
              farDistance: {
                value: 1000
              }
            }]),
            vertexShader: _0x53dfdc.distanceRGBA_vert,
            fragmentShader: _0x53dfdc.distanceRGBA_frag
          },
          shadow: {
            uniforms: _0x418e3c([_0x2b5bcc.lights, _0x2b5bcc.fog, {
              color: {
                value: new _0x1282c2(0)
              },
              opacity: {
                value: 1
              }
            }]),
            vertexShader: _0x53dfdc.shadow_vert,
            fragmentShader: _0x53dfdc.shadow_frag
          }
        };
        function _0x4b6b75(_0x1fc42c, _0x239d00, _0xc2f93, _0x298956, _0x372a5f) {
          var _0x270fe1;
          const _0xeec449 = new _0x1282c2(0);
          _0x270fe1 = "ilmd";
          let _0x1b8457;
          let _0x4cc31c;
          let _0x469eaf = 0;
          let _0x12668d = null;
          let _0x58b14e = 0;
          let _0x1e6268 = null;
          function _0x4b8050(_0x268e36, _0x5cd3ed) {
            _0xc2f93.buffers.color.setClear(_0x268e36.r, _0x268e36.g, _0x268e36.b, _0x5cd3ed, _0x372a5f);
          }
          return {
            getClearColor: function () {
              return _0xeec449;
            },
            setClearColor: function (_0x567315, _0x392971 = 1) {
              _0xeec449.set(_0x567315);
              _0x469eaf = _0x392971;
              _0x4b8050(_0xeec449, _0x469eaf);
            },
            getClearAlpha: function () {
              return _0x469eaf;
            },
            setClearAlpha: function (_0x58e511) {
              _0x469eaf = _0x58e511;
              _0x4b8050(_0xeec449, _0x469eaf);
            },
            render: function (_0x2b49e1, _0x35d8a2) {
              let _0x876590 = false;
              let _0x38bb80 = _0x35d8a2.isScene === true ? _0x35d8a2.background : null;
              if (_0x38bb80 && _0x38bb80.isTexture) {
                _0x38bb80 = _0x239d00.get(_0x38bb80);
              }
              const _0x13e17b = _0x1fc42c.xr;
              if ((_0x35d8a2 = _0x13e17b.getSession && _0x13e17b.getSession()) && _0x35d8a2.environmentBlendMode === "additive") {
                _0x38bb80 = null;
              }
              if (_0x38bb80 === null) {
                _0x4b8050(_0xeec449, _0x469eaf);
              } else if (_0x38bb80 && _0x38bb80.isColor) {
                _0x4b8050(_0x38bb80, 1);
                _0x876590 = true;
              }
              if (_0x1fc42c.autoClear || _0x876590) {
                _0x1fc42c.clear(_0x1fc42c.autoClearColor, _0x1fc42c.autoClearDepth, _0x1fc42c.autoClearStencil);
              }
              if (_0x38bb80 && (_0x38bb80.isCubeTexture || _0x38bb80.mapping === _0x41f85a)) {
                if (_0x4cc31c === undefined) {
                  _0x4cc31c = new _0x9b7b04(new _0xce9a1e(1, 1, 1), new _0x18cc6b({
                    name: "BackgroundCubeMaterial",
                    uniforms: _0x1c556b(_0x3543c2.cube.uniforms),
                    vertexShader: _0x3543c2.cube.vertexShader,
                    fragmentShader: _0x3543c2.cube.fragmentShader,
                    side: _0x460782,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                  }));
                  _0x4cc31c.geometry.deleteAttribute("normal");
                  _0x4cc31c.geometry.deleteAttribute("uv");
                  _0x4cc31c.onBeforeRender = function (_0x4a99ce, _0x4e61e9, _0x31feeb) {
                    this.matrixWorld.copyPosition(_0x31feeb.matrixWorld);
                  };
                  Object.defineProperty(_0x4cc31c.material, "envMap", {
                    get: function () {
                      return this.uniforms.envMap.value;
                    }
                  });
                  _0x298956.update(_0x4cc31c);
                }
                _0x4cc31c.material.uniforms.envMap.value = _0x38bb80;
                _0x4cc31c.material.uniforms.flipEnvMap.value = _0x38bb80.isCubeTexture && _0x38bb80.isRenderTargetTexture === false ? -1 : 1;
                if (!(_0x12668d === _0x38bb80 && _0x58b14e === _0x38bb80.version && _0x1e6268 === _0x1fc42c.toneMapping)) {
                  _0x4cc31c.material.needsUpdate = true;
                  _0x12668d = _0x38bb80;
                  _0x58b14e = _0x38bb80.version;
                  _0x1e6268 = _0x1fc42c.toneMapping;
                }
                _0x2b49e1.unshift(_0x4cc31c, _0x4cc31c.geometry, _0x4cc31c.material, 0, 0, null);
              } else if (_0x38bb80 && _0x38bb80.isTexture) {
                if (_0x1b8457 === undefined) {
                  _0x1b8457 = new _0x9b7b04(new _0x41807a(2, 2), new _0x18cc6b({
                    name: "BackgroundMaterial",
                    uniforms: _0x1c556b(_0x3543c2.background.uniforms),
                    vertexShader: _0x3543c2.background.vertexShader,
                    fragmentShader: _0x3543c2.background.fragmentShader,
                    side: _0xe70805,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                  }));
                  _0x1b8457.geometry.deleteAttribute("normal");
                  Object.defineProperty(_0x1b8457.material, "map", {
                    get: function () {
                      return this.uniforms.t2D.value;
                    }
                  });
                  _0x298956.update(_0x1b8457);
                }
                _0x1b8457.material.uniforms.t2D.value = _0x38bb80;
                if (_0x38bb80.matrixAutoUpdate === true) {
                  _0x38bb80.updateMatrix();
                }
                _0x1b8457.material.uniforms.uvTransform.value.copy(_0x38bb80.matrix);
                if (!(_0x12668d === _0x38bb80 && _0x58b14e === _0x38bb80.version && _0x1e6268 === _0x1fc42c.toneMapping)) {
                  _0x1b8457.material.needsUpdate = true;
                  _0x12668d = _0x38bb80;
                  _0x58b14e = _0x38bb80.version;
                  _0x1e6268 = _0x1fc42c.toneMapping;
                }
                _0x2b49e1.unshift(_0x1b8457, _0x1b8457.geometry, _0x1b8457.material, 0, 0, null);
              }
            }
          };
        }
        function _0x3d17f9(_0x84d556, _0x377dd6, _0x3a1b0d, _0x31ad79) {
          const _0x4b736f = _0x84d556.getParameter(34921);
          const _0x5739e6 = _0x31ad79.isWebGL2 ? null : _0x377dd6.get("OES_vertex_array_object");
          const _0x9f6a25 = _0x31ad79.isWebGL2 || _0x5739e6 !== null;
          const _0x52bca4 = {};
          const _0xde542c = _0x558ff3(null);
          let _0xbdb9cb = _0xde542c;
          function _0x243722(_0x26addc) {
            if (_0x31ad79.isWebGL2) {
              return _0x84d556.bindVertexArray(_0x26addc);
            } else {
              return _0x5739e6.bindVertexArrayOES(_0x26addc);
            }
          }
          function _0x9551eb(_0xf27222) {
            if (_0x31ad79.isWebGL2) {
              return _0x84d556.deleteVertexArray(_0xf27222);
            } else {
              return _0x5739e6.deleteVertexArrayOES(_0xf27222);
            }
          }
          function _0x558ff3(_0x1d5cb7) {
            const _0x1f0cb7 = [];
            const _0x43d85e = [];
            const _0x4ce05e = [];
            for (let _0x182af2 = 0; _0x182af2 < _0x4b736f; _0x182af2++) {
              _0x1f0cb7[_0x182af2] = 0;
              _0x43d85e[_0x182af2] = 0;
              _0x4ce05e[_0x182af2] = 0;
            }
            return {
              geometry: null,
              program: null,
              wireframe: false,
              newAttributes: _0x1f0cb7,
              enabledAttributes: _0x43d85e,
              attributeDivisors: _0x4ce05e,
              object: _0x1d5cb7,
              attributes: {},
              index: null
            };
          }
          function _0x3e2cbe() {
            const _0x34c159 = _0xbdb9cb.newAttributes;
            for (let _0x2b2319 = 0, _0x1ca630 = _0x34c159.length; _0x2b2319 < _0x1ca630; _0x2b2319++) {
              _0x34c159[_0x2b2319] = 0;
            }
          }
          function _0x85155d(_0x184e13) {
            _0x22c198(_0x184e13, 0);
          }
          function _0x22c198(_0x21edcc, _0x59615c) {
            const _0x456487 = _0xbdb9cb.newAttributes;
            const _0x2c2257 = _0xbdb9cb.enabledAttributes;
            const _0x37b41c = _0xbdb9cb.attributeDivisors;
            _0x456487[_0x21edcc] = 1;
            if (_0x2c2257[_0x21edcc] === 0) {
              _0x84d556.enableVertexAttribArray(_0x21edcc);
              _0x2c2257[_0x21edcc] = 1;
            }
            if (_0x37b41c[_0x21edcc] !== _0x59615c) {
              (_0x31ad79.isWebGL2 ? _0x84d556 : _0x377dd6.get("ANGLE_instanced_arrays"))[_0x31ad79.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](_0x21edcc, _0x59615c);
              _0x37b41c[_0x21edcc] = _0x59615c;
            }
          }
          function _0xc43af0() {
            var _0x156671 = _0xbdb9cb.newAttributes;
            const _0x105d93 = _0xbdb9cb.enabledAttributes;
            for (let _0x18d93f = 0, _0x4dc271 = _0x105d93.length; _0x18d93f < _0x4dc271; _0x18d93f++) {
              if (_0x105d93[_0x18d93f] !== _0x156671[_0x18d93f]) {
                _0x84d556.disableVertexAttribArray(_0x18d93f);
                _0x105d93[_0x18d93f] = 0;
              }
            }
          }
          function _0x4f0da7(_0x3d9a17, _0x5593c6, _0x24aa91, _0x1b7691, _0xccec73, _0x5ad5d2) {
            if (_0x31ad79.isWebGL2 !== true || _0x24aa91 !== 5124 && _0x24aa91 !== 5125) {
              _0x84d556.vertexAttribPointer(_0x3d9a17, _0x5593c6, _0x24aa91, _0x1b7691, _0xccec73, _0x5ad5d2);
            } else {
              _0x84d556.vertexAttribIPointer(_0x3d9a17, _0x5593c6, _0x24aa91, _0xccec73, _0x5ad5d2);
            }
          }
          function _0x23c8f2() {
            _0x2455a6();
            if (_0xbdb9cb !== _0xde542c) {
              _0xbdb9cb = _0xde542c;
              _0x243722(_0xbdb9cb.object);
            }
          }
          function _0x2455a6() {
            _0xde542c.geometry = null;
            _0xde542c.program = null;
            _0xde542c.wireframe = false;
          }
          return {
            setup: function (_0xce474a, _0x1bc41b, _0x4f6b21, _0x1b6ac2, _0x14610c) {
              let _0x49d44c = false;
              var _0xbd7b6a;
              if (_0x9f6a25) {
                _0xbd7b6a = function (_0x476f19, _0x43f3cf, _0x103132) {
                  _0x103132 = _0x103132.wireframe === true;
                  let _0x48bda8 = _0x52bca4[_0x476f19.id];
                  if (_0x48bda8 === undefined) {
                    _0x48bda8 = {};
                    _0x52bca4[_0x476f19.id] = _0x48bda8;
                  }
                  var _0x3d71ea = 11;
                  let _0xeb4550 = _0x48bda8[_0x43f3cf.id];
                  _0x3d71ea = "nfkq";
                  if (_0xeb4550 === undefined) {
                    _0xeb4550 = {};
                    _0x48bda8[_0x43f3cf.id] = _0xeb4550;
                  }
                  var _0x14621d;
                  let _0x1f46ea = _0xeb4550[_0x103132];
                  _0x14621d = 17;
                  if (_0x1f46ea === undefined) {
                    _0x1f46ea = _0x558ff3(_0x31ad79.isWebGL2 ? _0x84d556.createVertexArray() : _0x5739e6.createVertexArrayOES());
                    _0xeb4550[_0x103132] = _0x1f46ea;
                  }
                  return _0x1f46ea;
                }(_0x1b6ac2, _0x4f6b21, _0x1bc41b);
                if (_0xbdb9cb !== _0xbd7b6a) {
                  _0xbdb9cb = _0xbd7b6a;
                  _0x243722(_0xbdb9cb.object);
                }
                _0x49d44c = function (_0x1d36e3, _0x1c2b76) {
                  var _0x1548c5 = _0xbdb9cb.attributes;
                  var _0x321893 = _0x1d36e3.attributes;
                  let _0x42fe4e = 0;
                  for (const _0x1a0157 in _0x321893) {
                    var _0x23a34e = _0x1548c5[_0x1a0157];
                    var _0x4ab817 = _0x321893[_0x1a0157];
                    if (_0x23a34e === undefined) {
                      return true;
                    }
                    if (_0x23a34e.attribute !== _0x4ab817) {
                      return true;
                    }
                    if (_0x23a34e.data !== _0x4ab817.data) {
                      return true;
                    }
                    _0x42fe4e++;
                  }
                  return _0xbdb9cb.attributesNum !== _0x42fe4e || _0xbdb9cb.index !== _0x1c2b76;
                }(_0x1b6ac2, _0x14610c);
                if (_0x49d44c) {
                  (function (_0x4f737c, _0x3d2361) {
                    const _0x4c981e = {};
                    const _0x46c799 = _0x4f737c.attributes;
                    var _0x5c00a6;
                    let _0x21b8d3 = 0;
                    _0x5c00a6 = 4;
                    for (const _0x2d1603 in _0x46c799) {
                      var _0x23e632;
                      var _0x28bd5f = _0x46c799[_0x2d1603];
                      _0x23e632 = "jmol";
                      var _0xe74a41 = 5;
                      const _0x4e47bc = {};
                      _0xe74a41 = "mngg";
                      if ((_0x4e47bc.attribute = _0x28bd5f).data) {
                        _0x4e47bc.data = _0x28bd5f.data;
                      }
                      _0x4c981e[_0x2d1603] = _0x4e47bc;
                      _0x21b8d3++;
                    }
                    _0xbdb9cb.attributes = _0x4c981e;
                    _0xbdb9cb.attributesNum = _0x21b8d3;
                    _0xbdb9cb.index = _0x3d2361;
                  })(_0x1b6ac2, _0x14610c);
                }
              } else {
                _0xbd7b6a = _0x1bc41b.wireframe === true;
                if (!(_0xbdb9cb.geometry === _0x1b6ac2.id && _0xbdb9cb.program === _0x4f6b21.id && _0xbdb9cb.wireframe === _0xbd7b6a)) {
                  _0xbdb9cb.geometry = _0x1b6ac2.id;
                  _0xbdb9cb.program = _0x4f6b21.id;
                  _0xbdb9cb.wireframe = _0xbd7b6a;
                  _0x49d44c = true;
                }
              }
              if (_0xce474a.isInstancedMesh === true) {
                _0x49d44c = true;
              }
              if (_0x14610c !== null) {
                _0x3a1b0d.update(_0x14610c, 34963);
              }
              if (_0x49d44c) {
                (function (_0x1e13ab, _0x46f2d8, _0x2295c3, _0x4cd27a) {
                  if (_0x31ad79.isWebGL2 !== false || !_0x1e13ab.isInstancedMesh && !_0x4cd27a.isInstancedBufferGeometry || _0x377dd6.get("ANGLE_instanced_arrays") !== null) {
                    _0x3e2cbe();
                    var _0x57b27a = _0x4cd27a.attributes;
                    var _0x2d060e = _0x2295c3.getAttributes();
                    var _0x13e30c = _0x46f2d8.defaultAttributeValues;
                    for (const _0xdc4d99 in _0x2d060e) {
                      var _0x307f75 = _0x2d060e[_0xdc4d99];
                      if (_0x307f75.location >= 0) {
                        let _0x13b7fe = _0x57b27a[_0xdc4d99];
                        if (_0x13b7fe === undefined) {
                          if (_0xdc4d99 === "instanceMatrix" && _0x1e13ab.instanceMatrix) {
                            _0x13b7fe = _0x1e13ab.instanceMatrix;
                          }
                          if (_0xdc4d99 === "instanceColor" && _0x1e13ab.instanceColor) {
                            _0x13b7fe = _0x1e13ab.instanceColor;
                          }
                        }
                        if (_0x13b7fe !== undefined) {
                          var _0x1e9d6f = _0x13b7fe.normalized;
                          var _0x439acb = _0x13b7fe.itemSize;
                          var _0x32ebbc = _0x3a1b0d.get(_0x13b7fe);
                          if (_0x32ebbc !== undefined) {
                            var _0x284563 = _0x32ebbc.buffer;
                            var _0x3956c5 = _0x32ebbc.type;
                            var _0x291e53 = _0x32ebbc.bytesPerElement;
                            if (_0x13b7fe.isInterleavedBufferAttribute) {
                              var _0x4f32d6 = _0x13b7fe.data;
                              var _0x312ae9 = _0x4f32d6.stride;
                              var _0x496097 = _0x13b7fe.offset;
                              if (_0x4f32d6 && _0x4f32d6.isInstancedInterleavedBuffer) {
                                for (let _0x40c13a = 0; _0x40c13a < _0x307f75.locationSize; _0x40c13a++) {
                                  _0x22c198(_0x307f75.location + _0x40c13a, _0x4f32d6.meshPerAttribute);
                                }
                                if (_0x1e13ab.isInstancedMesh !== true && _0x4cd27a._maxInstanceCount === undefined) {
                                  _0x4cd27a._maxInstanceCount = _0x4f32d6.meshPerAttribute * _0x4f32d6.count;
                                }
                              } else {
                                for (let _0x452b16 = 0; _0x452b16 < _0x307f75.locationSize; _0x452b16++) {
                                  _0x85155d(_0x307f75.location + _0x452b16);
                                }
                              }
                              _0x84d556.bindBuffer(34962, _0x284563);
                              for (let _0x38a69e = 0; _0x38a69e < _0x307f75.locationSize; _0x38a69e++) {
                                _0x4f0da7(_0x307f75.location + _0x38a69e, _0x439acb / _0x307f75.locationSize, _0x3956c5, _0x1e9d6f, _0x312ae9 * _0x291e53, (_0x496097 + _0x439acb / _0x307f75.locationSize * _0x38a69e) * _0x291e53);
                              }
                            } else {
                              if (_0x13b7fe.isInstancedBufferAttribute) {
                                for (let _0x4d8ea9 = 0; _0x4d8ea9 < _0x307f75.locationSize; _0x4d8ea9++) {
                                  _0x22c198(_0x307f75.location + _0x4d8ea9, _0x13b7fe.meshPerAttribute);
                                }
                                if (_0x1e13ab.isInstancedMesh !== true && _0x4cd27a._maxInstanceCount === undefined) {
                                  _0x4cd27a._maxInstanceCount = _0x13b7fe.meshPerAttribute * _0x13b7fe.count;
                                }
                              } else {
                                for (let _0x21fd8c = 0; _0x21fd8c < _0x307f75.locationSize; _0x21fd8c++) {
                                  _0x85155d(_0x307f75.location + _0x21fd8c);
                                }
                              }
                              _0x84d556.bindBuffer(34962, _0x284563);
                              for (let _0x5e7b97 = 0; _0x5e7b97 < _0x307f75.locationSize; _0x5e7b97++) {
                                _0x4f0da7(_0x307f75.location + _0x5e7b97, _0x439acb / _0x307f75.locationSize, _0x3956c5, _0x1e9d6f, _0x439acb * _0x291e53, _0x439acb / _0x307f75.locationSize * _0x5e7b97 * _0x291e53);
                              }
                            }
                          }
                        } else if (_0x13e30c !== undefined) {
                          var _0x2e395b = 8;
                          var _0x2542f5 = _0x13e30c[_0xdc4d99];
                          _0x2e395b = 8;
                          if (_0x2542f5 !== undefined) {
                            switch (_0x2542f5.length) {
                              case 2:
                                _0x84d556.vertexAttrib2fv(_0x307f75.location, _0x2542f5);
                                break;
                              case 3:
                                _0x84d556.vertexAttrib3fv(_0x307f75.location, _0x2542f5);
                                break;
                              case 4:
                                _0x84d556.vertexAttrib4fv(_0x307f75.location, _0x2542f5);
                                break;
                              default:
                                _0x84d556.vertexAttrib1fv(_0x307f75.location, _0x2542f5);
                            }
                          }
                        }
                      }
                    }
                    _0xc43af0();
                  }
                })(_0xce474a, _0x1bc41b, _0x4f6b21, _0x1b6ac2);
                if (_0x14610c !== null) {
                  _0x84d556.bindBuffer(34963, _0x3a1b0d.get(_0x14610c).buffer);
                }
              }
            },
            reset: _0x23c8f2,
            resetDefaultState: _0x2455a6,
            dispose: function () {
              _0x23c8f2();
              for (const _0x56c2ff in _0x52bca4) {
                const _0x162816 = _0x52bca4[_0x56c2ff];
                for (const _0x4517a5 in _0x162816) {
                  const _0x5849c6 = _0x162816[_0x4517a5];
                  for (const _0x4e7a0f in _0x5849c6) {
                    _0x9551eb(_0x5849c6[_0x4e7a0f].object);
                    delete _0x5849c6[_0x4e7a0f];
                  }
                  delete _0x162816[_0x4517a5];
                }
                delete _0x52bca4[_0x56c2ff];
              }
            },
            releaseStatesOfGeometry: function (_0x5d268b) {
              if (_0x52bca4[_0x5d268b.id] !== undefined) {
                const _0x175cf9 = _0x52bca4[_0x5d268b.id];
                for (const _0x3ae14d in _0x175cf9) {
                  var _0xe0da3d;
                  const _0x25a7b2 = _0x175cf9[_0x3ae14d];
                  _0xe0da3d = 3;
                  for (const _0x471ddf in _0x25a7b2) {
                    _0x9551eb(_0x25a7b2[_0x471ddf].object);
                    delete _0x25a7b2[_0x471ddf];
                  }
                  delete _0x175cf9[_0x3ae14d];
                }
                delete _0x52bca4[_0x5d268b.id];
              }
            },
            releaseStatesOfProgram: function (_0x301de6) {
              for (const _0x5d9717 in _0x52bca4) {
                const _0x3980bf = _0x52bca4[_0x5d9717];
                if (_0x3980bf[_0x301de6.id] !== undefined) {
                  const _0xc1096e = _0x3980bf[_0x301de6.id];
                  for (const _0x5aeb24 in _0xc1096e) {
                    _0x9551eb(_0xc1096e[_0x5aeb24].object);
                    delete _0xc1096e[_0x5aeb24];
                  }
                  delete _0x3980bf[_0x301de6.id];
                }
              }
            },
            initAttributes: _0x3e2cbe,
            enableAttribute: _0x85155d,
            disableUnusedAttributes: _0xc43af0
          };
        }
        function _0x2898f4(_0x4e4245, _0x52f32e, _0xd60342, _0x39c5fb) {
          const _0x190a00 = _0x39c5fb.isWebGL2;
          let _0xe2276e;
          this.setMode = function (_0x52fa34) {
            _0xe2276e = _0x52fa34;
          };
          this.render = function (_0x165e70, _0x107965) {
            _0x4e4245.drawArrays(_0xe2276e, _0x165e70, _0x107965);
            _0xd60342.update(_0x107965, _0xe2276e, 1);
          };
          this.renderInstances = function (_0x1b98e1, _0x41be4f, _0x3d6c8f) {
            if (_0x3d6c8f !== 0) {
              let _0x4823ef;
              let _0x39dbc4;
              if (_0x190a00) {
                _0x4823ef = _0x4e4245;
                _0x39dbc4 = "drawArraysInstanced";
              } else {
                _0x4823ef = _0x52f32e.get("ANGLE_instanced_arrays");
                _0x39dbc4 = "drawArraysInstancedANGLE";
                if (_0x4823ef === null) {
                  return;
                }
              }
              _0x4823ef[_0x39dbc4](_0xe2276e, _0x1b98e1, _0x41be4f, _0x3d6c8f);
              _0xd60342.update(_0x41be4f, _0xe2276e, _0x3d6c8f);
            }
          };
        }
        function _0x211eb5(_0x44b307, _0x420b11, _0x4c3eef) {
          let _0x35b353;
          function _0x238472(_0x1901eb) {
            if (_0x1901eb === "highp") {
              if (_0x44b307.getShaderPrecisionFormat(35633, 36338).precision > 0 && _0x44b307.getShaderPrecisionFormat(35632, 36338).precision > 0) {
                return "highp";
              }
              _0x1901eb = "mediump";
            }
            if (_0x1901eb === "mediump" && _0x44b307.getShaderPrecisionFormat(35633, 36337).precision > 0 && _0x44b307.getShaderPrecisionFormat(35632, 36337).precision > 0) {
              return "mediump";
            } else {
              return "lowp";
            }
          }
          var _0x32b4b4 = 8;
          var _0x349166 = typeof WebGL2RenderingContext != "undefined" && _0x44b307 instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext != "undefined" && _0x44b307 instanceof WebGL2ComputeRenderingContext;
          _0x32b4b4 = 7;
          let _0x20cb23 = _0x4c3eef.precision !== undefined ? _0x4c3eef.precision : "highp";
          if ((_0x38b5f8 = _0x238472(_0x20cb23)) !== _0x20cb23) {
            _0x20cb23 = _0x38b5f8;
          }
          var _0x38b5f8;
          var _0x47dc3b = _0x349166 || _0x420b11.has("WEBGL_draw_buffers");
          var _0x3fd037 = _0x4c3eef.logarithmicDepthBuffer === true;
          var _0x3d16ab = _0x44b307.getParameter(34930);
          var _0x1cb850 = _0x44b307.getParameter(35660);
          var _0x52f409 = _0x44b307.getParameter(3379);
          var _0x4665b = _0x44b307.getParameter(34076);
          var _0x448260 = _0x44b307.getParameter(34921);
          var _0x5e0c8f = _0x44b307.getParameter(36347);
          var _0x2a6497 = _0x44b307.getParameter(36348);
          var _0x15c93e = _0x44b307.getParameter(36349);
          var _0x317696 = _0x1cb850 > 0;
          var _0x57945f = _0x349166 || _0x420b11.has("OES_texture_float");
          return {
            isWebGL2: _0x349166,
            drawBuffers: _0x47dc3b,
            getMaxAnisotropy: function () {
              if (!(_0x35b353 !== undefined)) {
                _0x35b353 = _0x420b11.has("EXT_texture_filter_anisotropic") === true ? (_0x630d49 = _0x420b11.get("EXT_texture_filter_anisotropic"), _0x44b307.getParameter(_0x630d49.MAX_TEXTURE_MAX_ANISOTROPY_EXT)) : 0;
              }
              return _0x35b353;
              var _0x630d49;
            },
            getMaxPrecision: _0x238472,
            precision: _0x20cb23,
            logarithmicDepthBuffer: _0x3fd037,
            maxTextures: _0x3d16ab,
            maxVertexTextures: _0x1cb850,
            maxTextureSize: _0x52f409,
            maxCubemapSize: _0x4665b,
            maxAttributes: _0x448260,
            maxVertexUniforms: _0x5e0c8f,
            maxVaryings: _0x2a6497,
            maxFragmentUniforms: _0x15c93e,
            vertexTextures: _0x317696,
            floatFragmentTextures: _0x57945f,
            floatVertexTextures: _0x38b5f8 = _0x317696 && _0x57945f,
            maxSamples: _0x4c3eef = _0x349166 ? _0x44b307.getParameter(36183) : 0
          };
        }
        function _0x580445(_0x337f85) {
          var _0x597de5;
          const _0x5e5575 = this;
          _0x597de5 = 9;
          let _0x14e77e = null;
          let _0x4729cb = 0;
          let _0x1f8d29 = false;
          let _0x2ab2b2 = false;
          const _0x1b6ad2 = new _0x2bef9b();
          const _0x3bb1fb = new _0x30cf5e();
          const _0x3e25f7 = {
            value: null,
            needsUpdate: false
          };
          function _0x14a962() {
            if (_0x3e25f7.value !== _0x14e77e) {
              _0x3e25f7.value = _0x14e77e;
              _0x3e25f7.needsUpdate = _0x4729cb > 0;
            }
            _0x5e5575.numPlanes = _0x4729cb;
            _0x5e5575.numIntersection = 0;
          }
          function _0x4912b5(_0x2543d4, _0x3ac5ac, _0x1a759a, _0x45c399) {
            var _0x323de7 = _0x2543d4 !== null ? _0x2543d4.length : 0;
            let _0x1a5152 = null;
            if (_0x323de7 !== 0) {
              _0x1a5152 = _0x3e25f7.value;
              if (_0x45c399 !== true || _0x1a5152 === null) {
                _0x45c399 = _0x1a759a + _0x323de7 * 4;
                var _0xa88eba = _0x3ac5ac.matrixWorldInverse;
                _0x3bb1fb.getNormalMatrix(_0xa88eba);
                if (_0x1a5152 === null || _0x1a5152.length < _0x45c399) {
                  _0x1a5152 = new Float32Array(_0x45c399);
                }
                for (let _0x4fc65e = 0, _0x4a6e80 = _0x1a759a; _0x4fc65e !== _0x323de7; ++_0x4fc65e, _0x4a6e80 += 4) {
                  _0x1b6ad2.copy(_0x2543d4[_0x4fc65e]).applyMatrix4(_0xa88eba, _0x3bb1fb);
                  _0x1b6ad2.normal.toArray(_0x1a5152, _0x4a6e80);
                  _0x1a5152[_0x4a6e80 + 3] = _0x1b6ad2.constant;
                }
              }
              _0x3e25f7.value = _0x1a5152;
              _0x3e25f7.needsUpdate = true;
            }
            _0x5e5575.numPlanes = _0x323de7;
            _0x5e5575.numIntersection = 0;
            return _0x1a5152;
          }
          this.uniform = _0x3e25f7;
          this.numPlanes = 0;
          this.numIntersection = 0;
          this.init = function (_0x542025, _0x3f5e1e, _0x50f4c8) {
            var _0x23fccf = _0x542025.length !== 0 || _0x3f5e1e || _0x4729cb !== 0 || _0x1f8d29;
            _0x1f8d29 = _0x3f5e1e;
            _0x14e77e = _0x4912b5(_0x542025, _0x50f4c8, 0);
            _0x4729cb = _0x542025.length;
            return _0x23fccf;
          };
          this.beginShadows = function () {
            _0x2ab2b2 = true;
            _0x4912b5(null);
          };
          this.endShadows = function () {
            _0x2ab2b2 = false;
            _0x14a962();
          };
          this.setState = function (_0x58c410, _0x5e0bee, _0x2f6ecd) {
            var _0x244e3f = _0x58c410.clippingPlanes;
            var _0x154244 = _0x58c410.clipIntersection;
            var _0x4384e6 = _0x58c410.clipShadows;
            var _0x179048 = 8;
            const _0x50ffef = _0x337f85.get(_0x58c410);
            _0x179048 = "giqn";
            if (!_0x1f8d29 || _0x244e3f === null || _0x244e3f.length === 0 || _0x2ab2b2 && !_0x4384e6) {
              if (_0x2ab2b2) {
                _0x4912b5(null);
              } else {
                _0x14a962();
              }
            } else {
              var _0x3259ef = (_0x4384e6 = _0x2ab2b2 ? 0 : _0x4729cb) * 4;
              let _0x5bf2eb = _0x50ffef.clippingState || null;
              _0x3e25f7.value = _0x5bf2eb;
              _0x5bf2eb = _0x4912b5(_0x244e3f, _0x5e0bee, _0x3259ef, _0x2f6ecd);
              for (let _0x68cf1a = 0; _0x68cf1a !== _0x3259ef; ++_0x68cf1a) {
                _0x5bf2eb[_0x68cf1a] = _0x14e77e[_0x68cf1a];
              }
              _0x50ffef.clippingState = _0x5bf2eb;
              this.numIntersection = _0x154244 ? this.numPlanes : 0;
              this.numPlanes += _0x4384e6;
            }
          };
        }
        function _0x54cd68(_0x489ec8) {
          let _0x62a24b = new WeakMap();
          function _0x1dafb2(_0x18e150, _0x5661f6) {
            if (_0x5661f6 === _0x23c46a) {
              _0x18e150.mapping = _0x2097dc;
            } else if (_0x5661f6 === _0x3eb421) {
              _0x18e150.mapping = _0x38a1fa;
            }
            return _0x18e150;
          }
          function _0x1b0a43(_0x49e4db) {
            const _0x17c9ff = _0x49e4db.target;
            _0x17c9ff.removeEventListener("dispose", _0x1b0a43);
            const _0x101e99 = _0x62a24b.get(_0x17c9ff);
            if (_0x101e99 !== undefined) {
              _0x62a24b.delete(_0x17c9ff);
              _0x101e99.dispose();
            }
          }
          return {
            get: function (_0x391095) {
              if (_0x391095 && _0x391095.isTexture && _0x391095.isRenderTargetTexture === false) {
                var _0x56a8dc = _0x391095.mapping;
                if (_0x56a8dc === _0x23c46a || _0x56a8dc === _0x3eb421) {
                  if (_0x62a24b.has(_0x391095)) {
                    return _0x1dafb2(_0x62a24b.get(_0x391095).texture, _0x391095.mapping);
                  }
                  var _0x6939c4 = _0x391095.image;
                  if (_0x6939c4 && _0x6939c4.height > 0) {
                    _0x56a8dc = _0x489ec8.getRenderTarget();
                    var _0x1cddae;
                    const _0x39aa3f = new _0x3488b9(_0x6939c4.height / 2);
                    _0x1cddae = "fhij";
                    _0x39aa3f.fromEquirectangularTexture(_0x489ec8, _0x391095);
                    _0x62a24b.set(_0x391095, _0x39aa3f);
                    _0x489ec8.setRenderTarget(_0x56a8dc);
                    _0x391095.addEventListener("dispose", _0x1b0a43);
                    return _0x1dafb2(_0x39aa3f.texture, _0x391095.mapping);
                  }
                  return null;
                }
              }
              return _0x391095;
            },
            dispose: function () {
              _0x62a24b = new WeakMap();
            }
          };
        }
        _0x3543c2.physical = {
          uniforms: _0x418e3c([_0x3543c2.standard.uniforms, {
            clearcoat: {
              value: 0
            },
            clearcoatMap: {
              value: null
            },
            clearcoatRoughness: {
              value: 0
            },
            clearcoatRoughnessMap: {
              value: null
            },
            clearcoatNormalScale: {
              value: new _0x25f874(1, 1)
            },
            clearcoatNormalMap: {
              value: null
            },
            sheen: {
              value: 0
            },
            sheenColor: {
              value: new _0x1282c2(0)
            },
            sheenColorMap: {
              value: null
            },
            sheenRoughness: {
              value: 0
            },
            sheenRoughnessMap: {
              value: null
            },
            transmission: {
              value: 0
            },
            transmissionMap: {
              value: null
            },
            transmissionSamplerSize: {
              value: new _0x25f874()
            },
            transmissionSamplerMap: {
              value: null
            },
            thickness: {
              value: 0
            },
            thicknessMap: {
              value: null
            },
            attenuationDistance: {
              value: 0
            },
            attenuationColor: {
              value: new _0x1282c2(0)
            },
            specularIntensity: {
              value: 0
            },
            specularIntensityMap: {
              value: null
            },
            specularColor: {
              value: new _0x1282c2(1, 1, 1)
            },
            specularColorMap: {
              value: null
            }
          }]),
          vertexShader: _0x53dfdc.meshphysical_vert,
          fragmentShader: _0x53dfdc.meshphysical_frag
        };
        class _0x2a01ad extends _0x324380 {
          constructor(_0x758942 = -1, _0x1e2ccc = 1, _0x5424b6 = 1, _0x1662f4 = -1, _0x181c96 = 0.1, _0x2b0a4a = 2000) {
            super();
            this.type = "OrthographicCamera";
            this.zoom = 1;
            this.view = null;
            this.left = _0x758942;
            this.right = _0x1e2ccc;
            this.top = _0x5424b6;
            this.bottom = _0x1662f4;
            this.near = _0x181c96;
            this.far = _0x2b0a4a;
            this.updateProjectionMatrix();
          }
          copy(_0x1dd16b, _0x578bf2) {
            super.copy(_0x1dd16b, _0x578bf2);
            this.left = _0x1dd16b.left;
            this.right = _0x1dd16b.right;
            this.top = _0x1dd16b.top;
            this.bottom = _0x1dd16b.bottom;
            this.near = _0x1dd16b.near;
            this.far = _0x1dd16b.far;
            this.zoom = _0x1dd16b.zoom;
            this.view = _0x1dd16b.view === null ? null : Object.assign({}, _0x1dd16b.view);
            return this;
          }
          setViewOffset(_0x2dc0af, _0xc07f74, _0x3a0f95, _0x333432, _0x757bc6, _0x1a6ca8) {
            if (this.view === null) {
              this.view = {
                enabled: true,
                fullWidth: 1,
                fullHeight: 1,
                offsetX: 0,
                offsetY: 0,
                width: 1,
                height: 1
              };
            }
            this.view.enabled = true;
            this.view.fullWidth = _0x2dc0af;
            this.view.fullHeight = _0xc07f74;
            this.view.offsetX = _0x3a0f95;
            this.view.offsetY = _0x333432;
            this.view.width = _0x757bc6;
            this.view.height = _0x1a6ca8;
            this.updateProjectionMatrix();
          }
          clearViewOffset() {
            if (this.view !== null) {
              this.view.enabled = false;
            }
            this.updateProjectionMatrix();
          }
          updateProjectionMatrix() {
            var _0x11a1d8 = (this.right - this.left) / (this.zoom * 2);
            var _0x152f92 = (this.top - this.bottom) / (this.zoom * 2);
            var _0x4e6885 = (this.right + this.left) / 2;
            var _0x5525f8 = (this.top + this.bottom) / 2;
            let _0x1a8a43 = _0x4e6885 - _0x11a1d8;
            let _0xa2589 = _0x4e6885 + _0x11a1d8;
            let _0x4eb1d6 = _0x5525f8 + _0x152f92;
            let _0x1fb14b = _0x5525f8 - _0x152f92;
            if (this.view !== null && this.view.enabled) {
              _0x5525f8 = (this.right - this.left) / this.view.fullWidth / this.zoom;
              _0x152f92 = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
              _0x1a8a43 += _0x5525f8 * this.view.offsetX;
              _0xa2589 = _0x1a8a43 + _0x5525f8 * this.view.width;
              _0x4eb1d6 -= _0x152f92 * this.view.offsetY;
              _0x1fb14b = _0x4eb1d6 - _0x152f92 * this.view.height;
            }
            this.projectionMatrix.makeOrthographic(_0x1a8a43, _0xa2589, _0x4eb1d6, _0x1fb14b, this.near, this.far);
            this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
          }
          toJSON(_0x21b022) {
            var _0x1ac027;
            const _0xb19d12 = super.toJSON(_0x21b022);
            _0x1ac027 = "lpdb";
            _0xb19d12.object.zoom = this.zoom;
            _0xb19d12.object.left = this.left;
            _0xb19d12.object.right = this.right;
            _0xb19d12.object.top = this.top;
            _0xb19d12.object.bottom = this.bottom;
            _0xb19d12.object.near = this.near;
            _0xb19d12.object.far = this.far;
            if (this.view !== null) {
              _0xb19d12.object.view = Object.assign({}, this.view);
            }
            return _0xb19d12;
          }
        }
        _0x2a01ad.prototype.isOrthographicCamera = true;
        class _0x1cac03 extends _0x18cc6b {
          constructor(_0x4b2592) {
            super(_0x4b2592);
            this.type = "RawShaderMaterial";
          }
        }
        _0x1cac03.prototype.isRawShaderMaterial = true;
        const _0x1aaa5a = Math.pow(2, 8);
        const _0x1e46b2 = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
        const _0x476c43 = 5 + _0x1e46b2.length;
        const _0x2f0f8a = {
          [_0xca2f2a]: 0,
          [_0x320ef1]: 1
        };
        const _0x49c41a = new _0x2a01ad();
        const {
          _lodPlanes: _0x3437b9,
          _sizeLods: _0x465eb4,
          _sigmas: _0x30f26e
        } = function () {
          const _0x37f469 = [];
          const _0x560624 = [];
          const _0x3056fc = [];
          let _0x2dc899 = 8;
          for (let _0x4ad0b4 = 0; _0x4ad0b4 < _0x476c43; _0x4ad0b4++) {
            var _0x1f42eb = Math.pow(2, _0x2dc899);
            _0x560624.push(_0x1f42eb);
            let _0x3a68b8 = 1 / _0x1f42eb;
            if (_0x4ad0b4 > 4) {
              _0x3a68b8 = _0x1e46b2[_0x4ad0b4 - 8 + 4 - 1];
            } else if (_0x4ad0b4 == 0) {
              _0x3a68b8 = 0;
            }
            _0x3056fc.push(_0x3a68b8);
            var _0x55a3d4;
            var _0x34100c = [_0x1f42eb = -(_0x55a3d4 = 1 / (_0x1f42eb - 1)) / 2, _0x1f42eb, _0x55a3d4 = 1 + _0x55a3d4 / 2, _0x1f42eb, _0x55a3d4, _0x55a3d4, _0x1f42eb, _0x1f42eb, _0x55a3d4, _0x55a3d4, _0x1f42eb, _0x55a3d4];
            const _0x4b4524 = new Float32Array(108);
            const _0x5afea5 = new Float32Array(72);
            const _0xcae3a0 = new Float32Array(36);
            for (let _0x2ff46c = 0; _0x2ff46c < 6; _0x2ff46c++) {
              var _0x6eecbf = _0x2ff46c % 3 * 2 / 3 - 1;
              var _0x4a313f = _0x2ff46c > 2 ? 0 : -1;
              _0x4b4524.set([_0x6eecbf, _0x4a313f, 0, _0x6eecbf + 2 / 3, _0x4a313f, 0, _0x6eecbf + 2 / 3, 1 + _0x4a313f, 0, _0x6eecbf, _0x4a313f, 0, _0x6eecbf + 2 / 3, 1 + _0x4a313f, 0, _0x6eecbf, 1 + _0x4a313f, 0], _0x2ff46c * 18);
              _0x5afea5.set(_0x34100c, _0x2ff46c * 12);
              _0x4a313f = [_0x2ff46c, _0x2ff46c, _0x2ff46c, _0x2ff46c, _0x2ff46c, _0x2ff46c];
              _0xcae3a0.set(_0x4a313f, _0x2ff46c * 6);
            }
            const _0x5d1e23 = new _0x3f374d();
            _0x5d1e23.setAttribute("position", new _0x570a7f(_0x4b4524, 3));
            _0x5d1e23.setAttribute("uv", new _0x570a7f(_0x5afea5, 2));
            _0x5d1e23.setAttribute("faceIndex", new _0x570a7f(_0xcae3a0, 1));
            _0x37f469.push(_0x5d1e23);
            if (_0x2dc899 > 4) {
              _0x2dc899--;
            }
          }
          return {
            _lodPlanes: _0x37f469,
            _sizeLods: _0x560624,
            _sigmas: _0x3056fc
          };
        }();
        const _0x54ff7a = new _0x1282c2();
        let _0x31082a = null;
        _0x4cd0fa = 1 / (_0x35fa32 = (1 + Math.sqrt(5)) / 2);
        const _0x1e12c3 = [new _0x1d20ef(1, 1, 1), new _0x1d20ef(-1, 1, 1), new _0x1d20ef(1, 1, -1), new _0x1d20ef(-1, 1, -1), new _0x1d20ef(0, _0x35fa32, _0x4cd0fa), new _0x1d20ef(0, _0x35fa32, -_0x4cd0fa), new _0x1d20ef(_0x4cd0fa, 0, _0x35fa32), new _0x1d20ef(-_0x4cd0fa, 0, _0x35fa32), new _0x1d20ef(_0x35fa32, _0x4cd0fa, 0), new _0x1d20ef(-_0x35fa32, _0x4cd0fa, 0)];
        class _0x21f128 {
          constructor(_0x2f7fcd) {
            var _0x3ed2da;
            this._renderer = _0x2f7fcd;
            this._pingPongRenderTarget = null;
            this._blurMaterial = (20, _0x3ed2da = new Float32Array(20), _0x2f7fcd = new _0x1d20ef(0, 1, 0), _0x2f7fcd = new _0x1cac03({
              name: "SphericalGaussianBlur",
              defines: {
                n: 20
              },
              uniforms: {
                envMap: {
                  value: null
                },
                samples: {
                  value: 1
                },
                weights: {
                  value: _0x3ed2da
                },
                latitudinal: {
                  value: false
                },
                dTheta: {
                  value: 0
                },
                mipInt: {
                  value: 0
                },
                poleAxis: {
                  value: _0x2f7fcd
                }
              },
              vertexShader: _0x439e92(),
              fragmentShader: `
  
  \t\t\tprecision mediump float;
  \t\t\tprecision mediump int;
  
  \t\t\tvarying vec3 vOutputDirection;
  
  \t\t\tuniform sampler2D envMap;
  \t\t\tuniform int samples;
  \t\t\tuniform float weights[ n ];
  \t\t\tuniform bool latitudinal;
  \t\t\tuniform float dTheta;
  \t\t\tuniform float mipInt;
  \t\t\tuniform vec3 poleAxis;
  
  \t\t\t` + _0x52a05c() + `
  
  \t\t\t#define ENVMAP_TYPE_CUBE_UV
  \t\t\t#include <cube_uv_reflection_fragment>
  
  \t\t\tvec3 getSample( float theta, vec3 axis ) {
  
  \t\t\t\tfloat cosTheta = cos( theta );
  \t\t\t\t// Rodrigues' axis-angle rotation
  \t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta
  \t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )
  \t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );
  
  \t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );
  
  \t\t\t}
  
  \t\t\tvoid main() {
  
  \t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );
  
  \t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {
  
  \t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );
  
  \t\t\t\t}
  
  \t\t\t\taxis = normalize( axis );
  
  \t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
  \t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );
  
  \t\t\t\tfor ( int i = 1; i < n; i++ ) {
  
  \t\t\t\t\tif ( i >= samples ) {
  
  \t\t\t\t\t\tbreak;
  
  \t\t\t\t\t}
  
  \t\t\t\t\tfloat theta = dTheta * float( i );
  \t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
  \t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );
  
  \t\t\t\t}
  
  \t\t\t}
  \t\t`,
              blending: _0x1bf8b5,
              depthTest: false,
              depthWrite: false
            }));
            this._equirectShader = null;
            this._cubemapShader = null;
            this._compileMaterial(this._blurMaterial);
          }
          fromScene(_0x16d2b1, _0x1c92c1 = 0, _0x2440a6 = 0.1, _0x14cc36 = 100) {
            _0x31082a = this._renderer.getRenderTarget();
            var _0x1cf7fa = this._allocateTargets();
            this._sceneToCubeUV(_0x16d2b1, _0x2440a6, _0x14cc36, _0x1cf7fa);
            if (_0x1c92c1 > 0) {
              this._blur(_0x1cf7fa, 0, 0, _0x1c92c1);
            }
            this._applyPMREM(_0x1cf7fa);
            this._cleanup(_0x1cf7fa);
            return _0x1cf7fa;
          }
          fromEquirectangular(_0xeb672a) {
            return this._fromTexture(_0xeb672a);
          }
          fromCubemap(_0x1c5f49) {
            return this._fromTexture(_0x1c5f49);
          }
          compileCubemapShader() {
            if (this._cubemapShader === null) {
              this._cubemapShader = _0x2e64a8();
              this._compileMaterial(this._cubemapShader);
            }
          }
          compileEquirectangularShader() {
            if (this._equirectShader === null) {
              this._equirectShader = _0x458f44();
              this._compileMaterial(this._equirectShader);
            }
          }
          dispose() {
            this._blurMaterial.dispose();
            if (this._cubemapShader !== null) {
              this._cubemapShader.dispose();
            }
            if (this._equirectShader !== null) {
              this._equirectShader.dispose();
            }
            for (let _0x589626 = 0; _0x589626 < _0x3437b9.length; _0x589626++) {
              _0x3437b9[_0x589626].dispose();
            }
          }
          _cleanup(_0x15e828) {
            this._pingPongRenderTarget.dispose();
            this._renderer.setRenderTarget(_0x31082a);
            _0x15e828.scissorTest = false;
            _0x5da697(_0x15e828, 0, 0, _0x15e828.width, _0x15e828.height);
          }
          _fromTexture(_0x5cda49) {
            _0x31082a = this._renderer.getRenderTarget();
            var _0x24dda9 = 9;
            var _0x579cb5 = this._allocateTargets(_0x5cda49);
            _0x24dda9 = 10;
            this._textureToCubeUV(_0x5cda49, _0x579cb5);
            this._applyPMREM(_0x579cb5);
            this._cleanup(_0x579cb5);
            return _0x579cb5;
          }
          _allocateTargets(_0x2422d1) {
            var _0xd6a8e7 = {
              magFilter: _0x202e90,
              minFilter: _0x202e90,
              generateMipmaps: false,
              type: _0x399f5d,
              format: _0x4f87e5,
              encoding: _0xca2f2a,
              depthBuffer: false
            };
            var _0x536aba;
            const _0x2f84e8 = _0x4ceb5a(_0xd6a8e7);
            _0x536aba = 17;
            _0x2f84e8.depthBuffer = !_0x2422d1;
            this._pingPongRenderTarget = _0x4ceb5a(_0xd6a8e7);
            return _0x2f84e8;
          }
          _compileMaterial(_0x6a5202) {
            _0x6a5202 = new _0x9b7b04(_0x3437b9[0], _0x6a5202);
            this._renderer.compile(_0x6a5202, _0x49c41a);
          }
          _sceneToCubeUV(_0x58c211, _0x2e34c2, _0x139171, _0x200df3) {
            const _0x13c06f = new _0x41f6fd(90, 1, _0x2e34c2, _0x139171);
            var _0x2802fb = [1, -1, 1, 1, 1, 1];
            var _0xa72908 = [1, 1, 1, -1, -1, -1];
            var _0x62b236;
            const _0x2ee54e = this._renderer;
            _0x62b236 = 3;
            var _0x3b16df = _0x2ee54e.autoClear;
            _0x2e34c2 = _0x2ee54e.toneMapping;
            _0x2ee54e.getClearColor(_0x54ff7a);
            _0x2ee54e.toneMapping = _0x510390;
            _0x2ee54e.autoClear = false;
            const _0x345241 = new _0x4c4e20({
              name: "PMREM.Background",
              side: _0x460782,
              depthWrite: false,
              depthTest: false
            });
            const _0x203ceb = new _0x9b7b04(new _0xce9a1e(), _0x345241);
            let _0x509025 = false;
            if (_0x139171 = _0x58c211.background) {
              if (_0x139171.isColor) {
                _0x345241.color.copy(_0x139171);
                _0x58c211.background = null;
                _0x509025 = true;
              }
            } else {
              _0x345241.color.copy(_0x54ff7a);
              _0x509025 = true;
            }
            for (let _0x5b6046 = 0; _0x5b6046 < 6; _0x5b6046++) {
              var _0x1053b8 = _0x5b6046 % 3;
              if (_0x1053b8 == 0) {
                _0x13c06f.up.set(0, _0x2802fb[_0x5b6046], 0);
                _0x13c06f.lookAt(_0xa72908[_0x5b6046], 0, 0);
              } else if (_0x1053b8 == 1) {
                _0x13c06f.up.set(0, 0, _0x2802fb[_0x5b6046]);
                _0x13c06f.lookAt(0, _0xa72908[_0x5b6046], 0);
              } else {
                _0x13c06f.up.set(0, _0x2802fb[_0x5b6046], 0);
                _0x13c06f.lookAt(0, 0, _0xa72908[_0x5b6046]);
              }
              _0x5da697(_0x200df3, _0x1053b8 * _0x1aaa5a, _0x5b6046 > 2 ? _0x1aaa5a : 0, _0x1aaa5a, _0x1aaa5a);
              _0x2ee54e.setRenderTarget(_0x200df3);
              if (_0x509025) {
                _0x2ee54e.render(_0x203ceb, _0x13c06f);
              }
              _0x2ee54e.render(_0x58c211, _0x13c06f);
            }
            _0x203ceb.geometry.dispose();
            _0x203ceb.material.dispose();
            _0x2ee54e.toneMapping = _0x2e34c2;
            _0x2ee54e.autoClear = _0x3b16df;
            _0x58c211.background = _0x139171;
          }
          _setEncoding(_0x375580, _0x407b69) {
            if (this._renderer.capabilities.isWebGL2 === true && _0x407b69.format === _0x4f87e5 && _0x407b69.type === _0x3a53e9 && _0x407b69.encoding === _0x320ef1) {
              _0x375580.value = _0x2f0f8a[_0xca2f2a];
            } else {
              _0x375580.value = _0x2f0f8a[_0x407b69.encoding];
            }
          }
          ["VUebuCoTerutxet_".split("").reverse().join("")](_0x40c693, _0x244fc3) {
            const _0x4465a8 = this._renderer;
            var _0x20084f;
            var _0x321332 = _0x40c693.mapping === _0x2097dc || _0x40c693.mapping === _0x38a1fa;
            _0x20084f = 7;
            if (_0x321332) {
              if (this._cubemapShader == null) {
                this._cubemapShader = _0x2e64a8();
              }
            } else if (this._equirectShader == null) {
              this._equirectShader = _0x458f44();
            }
            var _0x165e84 = _0x321332 ? this._cubemapShader : this._equirectShader;
            var _0xa353a = new _0x9b7b04(_0x3437b9[0], _0x165e84);
            const _0x5eb15e = _0x165e84.uniforms;
            _0x5eb15e.envMap.value = _0x40c693;
            if (!_0x321332) {
              _0x5eb15e.texelSize.value.set(1 / _0x40c693.image.width, 1 / _0x40c693.image.height);
            }
            this._setEncoding(_0x5eb15e.inputEncoding, _0x40c693);
            _0x5da697(_0x244fc3, 0, 0, _0x1aaa5a * 3, _0x1aaa5a * 2);
            _0x4465a8.setRenderTarget(_0x244fc3);
            _0x4465a8.render(_0xa353a, _0x49c41a);
          }
          _applyPMREM(_0x1a81d2) {
            const _0x357eae = this._renderer;
            var _0x2b46c5 = _0x357eae.autoClear;
            _0x357eae.autoClear = false;
            for (let _0x34afa9 = 1; _0x34afa9 < _0x476c43; _0x34afa9++) {
              var _0x225b3d = Math.sqrt(_0x30f26e[_0x34afa9] * _0x30f26e[_0x34afa9] - _0x30f26e[_0x34afa9 - 1] * _0x30f26e[_0x34afa9 - 1]);
              var _0x46c7d8 = _0x1e12c3[(_0x34afa9 - 1) % _0x1e12c3.length];
              this._blur(_0x1a81d2, _0x34afa9 - 1, _0x34afa9, _0x225b3d, _0x46c7d8);
            }
            _0x357eae.autoClear = _0x2b46c5;
          }
          _blur(_0x11e2fd, _0xeab927, _0x27a3be, _0xac6fe7, _0xffed01) {
            var _0x67faa5 = this._pingPongRenderTarget;
            this._halfBlur(_0x11e2fd, _0x67faa5, _0xeab927, _0x27a3be, _0xac6fe7, "latitudinal", _0xffed01);
            this._halfBlur(_0x67faa5, _0x11e2fd, _0x27a3be, _0x27a3be, _0xac6fe7, "longitudinal", _0xffed01);
          }
          _halfBlur(_0x1e4a31, _0xf5474c, _0x28735d, _0x3de3f1, _0x52df61, _0x5adcfb, _0x415049) {
            var _0x2b78f5;
            const _0x424e6b = this._renderer;
            _0x2b78f5 = "gboc";
            var _0x575211 = this._blurMaterial;
            var _0x1cf992 = new _0x9b7b04(_0x3437b9[_0x3de3f1], _0x575211);
            const _0x2f5bd3 = _0x575211.uniforms;
            _0x575211 = _0x465eb4[_0x28735d] - 1;
            var _0x2e37d1 = _0x52df61 / (_0x575211 = isFinite(_0x52df61) ? Math.PI / (_0x575211 * 2) : Math.PI * 2 / 39);
            var _0x325759 = isFinite(_0x52df61) ? 1 + Math.floor(_0x2e37d1 * 3) : 20;
            const _0x5d538c = [];
            let _0x40b8fb = 0;
            for (let _0x2735b8 = 0; _0x2735b8 < 20; ++_0x2735b8) {
              var _0x15d3ab;
              const _0x300d91 = _0x2735b8 / _0x2e37d1;
              _0x15d3ab = 2;
              var _0x1bfd10 = Math.exp(-_0x300d91 * _0x300d91 / 2);
              _0x5d538c.push(_0x1bfd10);
              if (_0x2735b8 == 0) {
                _0x40b8fb += _0x1bfd10;
              } else if (_0x2735b8 < _0x325759) {
                _0x40b8fb += _0x1bfd10 * 2;
              }
            }
            for (let _0x41a938 = 0; _0x41a938 < _0x5d538c.length; _0x41a938++) {
              _0x5d538c[_0x41a938] = _0x5d538c[_0x41a938] / _0x40b8fb;
            }
            _0x2f5bd3.envMap.value = _0x1e4a31.texture;
            _0x2f5bd3.samples.value = _0x325759;
            _0x2f5bd3.weights.value = _0x5d538c;
            _0x2f5bd3.latitudinal.value = _0x5adcfb === "latitudinal";
            if (_0x415049) {
              _0x2f5bd3.poleAxis.value = _0x415049;
            }
            _0x2f5bd3.dTheta.value = _0x575211;
            _0x2f5bd3.mipInt.value = 8 - _0x28735d;
            _0x28735d = _0x465eb4[_0x3de3f1];
            _0x5da697(_0xf5474c, Math.max(0, _0x1aaa5a - _0x28735d * 2) * 3, _0x3de3f1 = (_0x3de3f1 === 0 ? 0 : _0x1aaa5a * 2) + _0x28735d * 2 * (_0x3de3f1 > 4 ? _0x3de3f1 - 8 + 4 : 0), _0x28735d * 3, _0x28735d * 2);
            _0x424e6b.setRenderTarget(_0xf5474c);
            _0x424e6b.render(_0x1cf992, _0x49c41a);
          }
        }
        function _0x4ceb5a(_0x4239b5) {
          const _0x37a3a7 = new _0x4eb744(_0x1aaa5a * 3, _0x1aaa5a * 3, _0x4239b5);
          _0x37a3a7.texture.mapping = _0x41f85a;
          _0x37a3a7.texture.name = "PMREM.cubeUv";
          _0x37a3a7.scissorTest = true;
          return _0x37a3a7;
        }
        function _0x5da697(_0x5cb00b, _0x33468f, _0x3dd43a, _0x1d025d, _0x268230) {
          _0x5cb00b.viewport.set(_0x33468f, _0x3dd43a, _0x1d025d, _0x268230);
          _0x5cb00b.scissor.set(_0x33468f, _0x3dd43a, _0x1d025d, _0x268230);
        }
        function _0x458f44() {
          var _0x58adef = new _0x25f874(1, 1);
          return new _0x1cac03({
            name: "EquirectangularToCubeUV",
            uniforms: {
              envMap: {
                value: null
              },
              texelSize: {
                value: _0x58adef
              },
              inputEncoding: {
                value: _0x2f0f8a[_0xca2f2a]
              }
            },
            vertexShader: _0x439e92(),
            fragmentShader: `
  
  \t\t\tprecision mediump float;
  \t\t\tprecision mediump int;
  
  \t\t\tvarying vec3 vOutputDirection;
  
  \t\t\tuniform sampler2D envMap;
  \t\t\tuniform vec2 texelSize;
  
  \t\t\t` + _0x52a05c() + `
  
  \t\t\t#include <common>
  
  \t\t\tvoid main() {
  
  \t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
  
  \t\t\t\tvec3 outputDirection = normalize( vOutputDirection );
  \t\t\t\tvec2 uv = equirectUv( outputDirection );
  
  \t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );
  \t\t\t\tuv -= f * texelSize;
  \t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
  \t\t\t\tuv.x += texelSize.x;
  \t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
  \t\t\t\tuv.y += texelSize.y;
  \t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
  \t\t\t\tuv.x -= texelSize.x;
  \t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
  
  \t\t\t\tvec3 tm = mix( tl, tr, f.x );
  \t\t\t\tvec3 bm = mix( bl, br, f.x );
  \t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );
  
  \t\t\t}
  \t\t`,
            blending: _0x1bf8b5,
            depthTest: false,
            depthWrite: false
          });
        }
        function _0x2e64a8() {
          return new _0x1cac03({
            name: "CubemapToCubeUV",
            uniforms: {
              envMap: {
                value: null
              },
              inputEncoding: {
                value: _0x2f0f8a[_0xca2f2a]
              }
            },
            vertexShader: _0x439e92(),
            fragmentShader: `
  
  \t\t\tprecision mediump float;
  \t\t\tprecision mediump int;
  
  \t\t\tvarying vec3 vOutputDirection;
  
  \t\t\tuniform samplerCube envMap;
  
  \t\t\t` + _0x52a05c() + `
  
  \t\t\tvoid main() {
  
  \t\t\t\tgl_FragColor = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) );
  
  \t\t\t}
  \t\t`,
            blending: _0x1bf8b5,
            depthTest: false,
            depthWrite: false
          });
        }
        function _0x439e92() {
          return `
  
  \t\tprecision mediump float;
  \t\tprecision mediump int;
  
  \t\tattribute vec3 position;
  \t\tattribute vec2 uv;
  \t\tattribute float faceIndex;
  
  \t\tvarying vec3 vOutputDirection;
  
  \t\t// RH coordinate system; PMREM face-indexing convention
  \t\tvec3 getDirection( vec2 uv, float face ) {
  
  \t\t\tuv = 2.0 * uv - 1.0;
  
  \t\t\tvec3 direction = vec3( uv, 1.0 );
  
  \t\t\tif ( face == 0.0 ) {
  
  \t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x
  
  \t\t\t} else if ( face == 1.0 ) {
  
  \t\t\t\tdirection = direction.xzy;
  \t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y
  
  \t\t\t} else if ( face == 2.0 ) {
  
  \t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z
  
  \t\t\t} else if ( face == 3.0 ) {
  
  \t\t\t\tdirection = direction.zyx;
  \t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x
  
  \t\t\t} else if ( face == 4.0 ) {
  
  \t\t\t\tdirection = direction.xzy;
  \t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y
  
  \t\t\t} else if ( face == 5.0 ) {
  
  \t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z
  
  \t\t\t}
  
  \t\t\treturn direction;
  
  \t\t}
  
  \t\tvoid main() {
  
  \t\t\tvOutputDirection = getDirection( uv, faceIndex );
  \t\t\tgl_Position = vec4( position, 1.0 );
  
  \t\t}
  \t`;
        }
        function _0x52a05c() {
          return `
  
  \t\tuniform int inputEncoding;
  
  \t\t#include <encodings_pars_fragment>
  
  \t\tvec4 inputTexelToLinear( vec4 value ) {
  
  \t\t\tif ( inputEncoding == 0 ) {
  
  \t\t\t\treturn value;
  
  \t\t\t} else {
  
  \t\t\t\treturn sRGBToLinear( value );
  
  \t\t\t}
  
  \t\t}
  
  \t\tvec4 envMapTexelToLinear( vec4 color ) {
  
  \t\t\treturn inputTexelToLinear( color );
  
  \t\t}
  \t`;
        }
        function _0x415f5c(_0x1bd205) {
          let _0x4b57da = new WeakMap();
          let _0x188c2d = null;
          function _0x446421(_0x2e64d4) {
            var _0x39ea75 = 7;
            const _0x54798a = _0x2e64d4.target;
            _0x39ea75 = 6;
            _0x54798a.removeEventListener("dispose", _0x446421);
            const _0x58a7f7 = _0x4b57da.get(_0x54798a);
            if (_0x58a7f7 !== undefined) {
              _0x4b57da.delete(_0x54798a);
              _0x58a7f7.dispose();
            }
          }
          return {
            get: function (_0x2bfb11) {
              if (_0x2bfb11 && _0x2bfb11.isTexture && _0x2bfb11.isRenderTargetTexture === false) {
                var _0x451d95 = _0x2bfb11.mapping;
                var _0x3e5ffb = _0x451d95 === _0x23c46a || _0x451d95 === _0x3eb421;
                var _0x3cc798 = _0x451d95 === _0x2097dc || _0x451d95 === _0x38a1fa;
                if (_0x3e5ffb || _0x3cc798) {
                  if (_0x4b57da.has(_0x2bfb11)) {
                    return _0x4b57da.get(_0x2bfb11).texture;
                  } else {
                    _0x451d95 = _0x2bfb11.image;
                    if (_0x3e5ffb && _0x451d95 && _0x451d95.height > 0 || _0x3cc798 && _0x451d95 && function (_0x3f1809) {
                      let _0x26ee72 = 0;
                      for (let _0x1d7449 = 0; _0x1d7449 < 6; _0x1d7449++) {
                        if (_0x3f1809[_0x1d7449] !== undefined) {
                          _0x26ee72++;
                        }
                      }
                      return _0x26ee72 === 6;
                    }(_0x451d95)) {
                      _0x451d95 = _0x1bd205.getRenderTarget();
                      if (_0x188c2d === null) {
                        _0x188c2d = new _0x21f128(_0x1bd205);
                      }
                      _0x3e5ffb = _0x3e5ffb ? _0x188c2d.fromEquirectangular(_0x2bfb11) : _0x188c2d.fromCubemap(_0x2bfb11);
                      _0x4b57da.set(_0x2bfb11, _0x3e5ffb);
                      _0x1bd205.setRenderTarget(_0x451d95);
                      _0x2bfb11.addEventListener("dispose", _0x446421);
                      return _0x3e5ffb.texture;
                    } else {
                      return null;
                    }
                  }
                }
              }
              return _0x2bfb11;
            },
            dispose: function () {
              _0x4b57da = new WeakMap();
              if (_0x188c2d !== null) {
                _0x188c2d.dispose();
                _0x188c2d = null;
              }
            }
          };
        }
        function _0x30c2d7(_0x83d8dc) {
          var _0x3c5e2d;
          const _0x486bac = {};
          _0x3c5e2d = "fqoh";
          function _0x1a0e57(_0x444f53) {
            if (_0x486bac[_0x444f53] !== undefined) {
              return _0x486bac[_0x444f53];
            }
            let _0x55bf06;
            switch (_0x444f53) {
              case "WEBGL_depth_texture":
                _0x55bf06 = _0x83d8dc.getExtension("WEBGL_depth_texture") || _0x83d8dc.getExtension("MOZ_WEBGL_depth_texture") || _0x83d8dc.getExtension("WEBKIT_WEBGL_depth_texture");
                break;
              case "EXT_texture_filter_anisotropic":
                _0x55bf06 = _0x83d8dc.getExtension("EXT_texture_filter_anisotropic") || _0x83d8dc.getExtension("MOZ_EXT_texture_filter_anisotropic") || _0x83d8dc.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                break;
              case "WEBGL_compressed_texture_s3tc":
                _0x55bf06 = _0x83d8dc.getExtension("WEBGL_compressed_texture_s3tc") || _0x83d8dc.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || _0x83d8dc.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                break;
              case "WEBGL_compressed_texture_pvrtc":
                _0x55bf06 = _0x83d8dc.getExtension("WEBGL_compressed_texture_pvrtc") || _0x83d8dc.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                break;
              default:
                _0x55bf06 = _0x83d8dc.getExtension(_0x444f53);
            }
            _0x486bac[_0x444f53] = _0x55bf06;
            return _0x55bf06;
          }
          return {
            has: function (_0x56a22b) {
              return _0x1a0e57(_0x56a22b) !== null;
            },
            init: function (_0x1f1812) {
              if (_0x1f1812.isWebGL2) {
                _0x1a0e57("EXT_color_buffer_float");
              } else {
                _0x1a0e57("WEBGL_depth_texture");
                _0x1a0e57("OES_texture_float");
                _0x1a0e57("OES_texture_half_float");
                _0x1a0e57("OES_texture_half_float_linear");
                _0x1a0e57("OES_standard_derivatives");
                _0x1a0e57("OES_element_index_uint");
                _0x1a0e57("OES_vertex_array_object");
                _0x1a0e57("ANGLE_instanced_arrays");
              }
              _0x1a0e57("OES_texture_float_linear");
              _0x1a0e57("EXT_color_buffer_half_float");
              _0x1a0e57("WEBGL_multisampled_render_to_texture");
            },
            get: function (_0x3ed85b) {
              return _0x3ed85b = _0x1a0e57(_0x3ed85b);
            }
          };
        }
        function _0x4ad8f6(_0x2c9f17, _0x5b31e7, _0x5e23b2, _0x1bccda) {
          const _0x53e63c = {};
          const _0x49897f = new WeakMap();
          function _0x1f8118(_0x25ca22) {
            const _0x45897b = _0x25ca22.target;
            if (_0x45897b.index !== null) {
              _0x5b31e7.remove(_0x45897b.index);
            }
            for (const _0x21f3f0 in _0x45897b.attributes) {
              _0x5b31e7.remove(_0x45897b.attributes[_0x21f3f0]);
            }
            _0x45897b.removeEventListener("dispose", _0x1f8118);
            delete _0x53e63c[_0x45897b.id];
            if (_0x25ca22 = _0x49897f.get(_0x45897b)) {
              _0x5b31e7.remove(_0x25ca22);
              _0x49897f.delete(_0x45897b);
            }
            _0x1bccda.releaseStatesOfGeometry(_0x45897b);
            if (_0x45897b.isInstancedBufferGeometry === true) {
              delete _0x45897b._maxInstanceCount;
            }
            _0x5e23b2.memory.geometries--;
          }
          return {
            get: function (_0x246839, _0xf95c95) {
              if (!(_0x53e63c[_0xf95c95.id] === true)) {
                _0xf95c95.addEventListener("dispose", _0x1f8118);
                _0x53e63c[_0xf95c95.id] = true;
                _0x5e23b2.memory.geometries++;
              }
              return _0xf95c95;
            },
            update: function (_0x2623a5) {
              var _0x542785 = _0x2623a5.attributes;
              for (const _0x33445d in _0x542785) {
                _0x5b31e7.update(_0x542785[_0x33445d], 34962);
              }
              var _0x358316 = _0x2623a5.morphAttributes;
              for (const _0x4ff713 in _0x358316) {
                var _0x9ae594;
                var _0x4633e6 = _0x358316[_0x4ff713];
                _0x9ae594 = 10;
                for (let _0x241609 = 0, _0x62d6ca = _0x4633e6.length; _0x241609 < _0x62d6ca; _0x241609++) {
                  _0x5b31e7.update(_0x4633e6[_0x241609], 34962);
                }
              }
            },
            getWireframeAttribute: function (_0x26dd2d) {
              var _0x141d6e;
              var _0x4ab93d = _0x49897f.get(_0x26dd2d);
              if (!_0x4ab93d || (_0x141d6e = _0x26dd2d.index) !== null && _0x4ab93d.version < _0x141d6e.version) {
                (function (_0x27cd42) {
                  const _0x162754 = [];
                  var _0x5d1b3e = _0x27cd42.index;
                  var _0x2207e7 = _0x27cd42.attributes.position;
                  let _0x47be12 = 0;
                  if (_0x5d1b3e !== null) {
                    var _0x398eca;
                    var _0x56dfd8 = _0x5d1b3e.array;
                    _0x398eca = 12;
                    _0x47be12 = _0x5d1b3e.version;
                    for (let _0x5cb2d5 = 0, _0x406be3 = _0x56dfd8.length; _0x5cb2d5 < _0x406be3; _0x5cb2d5 += 3) {
                      var _0x5da35f = _0x56dfd8[_0x5cb2d5 + 0];
                      var _0x347644 = _0x56dfd8[_0x5cb2d5 + 1];
                      var _0x406b70 = _0x56dfd8[_0x5cb2d5 + 2];
                      _0x162754.push(_0x5da35f, _0x347644, _0x347644, _0x406b70, _0x406b70, _0x5da35f);
                    }
                  } else {
                    var _0x3afc74 = _0x2207e7.array;
                    _0x47be12 = _0x2207e7.version;
                    for (let _0x148e0c = 0, _0x406c87 = _0x3afc74.length / 3 - 1; _0x148e0c < _0x406c87; _0x148e0c += 3) {
                      var _0x1cee75 = _0x148e0c + 0;
                      var _0x442669 = _0x148e0c + 1;
                      var _0x5cd194 = _0x148e0c + 2;
                      _0x162754.push(_0x1cee75, _0x442669, _0x442669, _0x5cd194, _0x5cd194, _0x1cee75);
                    }
                  }
                  const _0x225bf5 = new (_0x301bd1(_0x162754) > 65535 ? _0x3026e9 : _0x564c79)(_0x162754, 1);
                  _0x225bf5.version = _0x47be12;
                  if (_0x3afc74 = _0x49897f.get(_0x27cd42)) {
                    _0x5b31e7.remove(_0x3afc74);
                  }
                  _0x49897f.set(_0x27cd42, _0x225bf5);
                })(_0x26dd2d);
              }
              return _0x49897f.get(_0x26dd2d);
            }
          };
        }
        function _0x5eb7c1(_0xdf9349, _0x733f62, _0xa457f8, _0x4d1f20) {
          const _0x8bf0f0 = _0x4d1f20.isWebGL2;
          let _0x30b79a;
          let _0x488869;
          let _0xc4adc6;
          this.setMode = function (_0x51e959) {
            _0x30b79a = _0x51e959;
          };
          this.setIndex = function (_0x56c69f) {
            _0x488869 = _0x56c69f.type;
            _0xc4adc6 = _0x56c69f.bytesPerElement;
          };
          this.render = function (_0x36ffb8, _0x5a84c9) {
            _0xdf9349.drawElements(_0x30b79a, _0x5a84c9, _0x488869, _0x36ffb8 * _0xc4adc6);
            _0xa457f8.update(_0x5a84c9, _0x30b79a, 1);
          };
          this.renderInstances = function (_0x30682e, _0x105eb8, _0x4515ff) {
            if (_0x4515ff !== 0) {
              let _0x473d1e;
              let _0x2fee62;
              if (_0x8bf0f0) {
                _0x473d1e = _0xdf9349;
                _0x2fee62 = "drawElementsInstanced";
              } else {
                _0x473d1e = _0x733f62.get("ANGLE_instanced_arrays");
                _0x2fee62 = "drawElementsInstancedANGLE";
                if (_0x473d1e === null) {
                  return;
                }
              }
              _0x473d1e[_0x2fee62](_0x30b79a, _0x105eb8, _0x488869, _0x30682e * _0xc4adc6, _0x4515ff);
              _0xa457f8.update(_0x105eb8, _0x30b79a, _0x4515ff);
            }
          };
        }
        function _0x5b9ab4(_0x1f17b6) {
          const _0x586401 = {
            frame: 0,
            calls: 0,
            triangles: 0,
            points: 0,
            lines: 0
          };
          return {
            memory: {
              geometries: 0,
              textures: 0
            },
            render: _0x586401,
            programs: null,
            autoReset: true,
            reset: function () {
              _0x586401.frame++;
              _0x586401.calls = 0;
              _0x586401.triangles = 0;
              _0x586401.points = 0;
              _0x586401.lines = 0;
            },
            update: function (_0x12722c, _0x5f1285, _0x2b4460) {
              _0x586401.calls++;
              switch (_0x5f1285) {
                case 4:
                  _0x586401.triangles += _0x2b4460 * (_0x12722c / 3);
                  break;
                case 1:
                  _0x586401.lines += _0x2b4460 * (_0x12722c / 2);
                  break;
                case 3:
                  _0x586401.lines += _0x2b4460 * (_0x12722c - 1);
                  break;
                case 2:
                  _0x586401.lines += _0x2b4460 * _0x12722c;
                  break;
                case 0:
                  _0x586401.points += _0x2b4460 * _0x12722c;
              }
            }
          };
        }
        class _0x989990 extends _0x3d39cb {
          constructor(_0xf05eac = null, _0x14d86c = 1, _0x1cae23 = 1, _0x5a8b08 = 1) {
            super(null);
            this.image = {
              data: _0xf05eac,
              width: _0x14d86c,
              height: _0x1cae23,
              depth: _0x5a8b08
            };
            this.magFilter = _0x297826;
            this.minFilter = _0x297826;
            this.wrapR = _0x4f55c6;
            this.generateMipmaps = false;
            this.flipY = false;
            this.unpackAlignment = 1;
          }
        }
        function _0x585254(_0x24c967, _0x155e59) {
          return _0x24c967[0] - _0x155e59[0];
        }
        function _0x423cda(_0xd97778, _0x3eda08) {
          return Math.abs(_0x3eda08[1]) - Math.abs(_0xd97778[1]);
        }
        function _0x20a6c2(_0xaf3677, _0x3a4f72) {
          var _0x5e1984;
          let _0x28099c = 1;
          _0x5e1984 = 13;
          if ((_0x3a4f72 = (_0x3a4f72.isInterleavedBufferAttribute ? _0x3a4f72.data : _0x3a4f72).array) instanceof Int8Array) {
            _0x28099c = 127;
          } else if (_0x3a4f72 instanceof Int16Array) {
            _0x28099c = 32767;
          } else if (_0x3a4f72 instanceof Int32Array) {
            _0x28099c = 2147483647;
          }
          _0xaf3677.divideScalar(_0x28099c);
        }
        function _0x4556a6(_0x5965af, _0x460604, _0x1999ae) {
          const _0xe09833 = {};
          const _0x15feec = new Float32Array(8);
          const _0x236b8f = new WeakMap();
          const _0x3116ab = new _0x1d20ef();
          const _0x50c430 = [];
          for (let _0x4925f6 = 0; _0x4925f6 < 8; _0x4925f6++) {
            _0x50c430[_0x4925f6] = [_0x4925f6, 0];
          }
          return {
            update: function (_0x37f973, _0xeadc7a, _0xfdbca3, _0x598419) {
              var _0x2aa190 = 9;
              var _0x27e1e4 = _0x37f973.morphTargetInfluences;
              _0x2aa190 = 8;
              if (_0x460604.isWebGL2 === true) {
                var _0x544c12 = _0xeadc7a.morphAttributes.position.length;
                let _0x46d439 = _0x236b8f.get(_0xeadc7a);
                if (_0x46d439 === undefined || _0x46d439.count !== _0x544c12) {
                  if (_0x46d439 !== undefined) {
                    _0x46d439.texture.dispose();
                  }
                  var _0x4e8536 = _0xeadc7a.morphAttributes.normal !== undefined;
                  var _0x799112 = _0xeadc7a.morphAttributes.position;
                  var _0x4e7137 = _0xeadc7a.morphAttributes.normal || [];
                  var _0x2fa4b0 = _0x4e8536 == 1 ? 2 : 1;
                  let _0x5cc620 = _0xeadc7a.attributes.position.count * _0x2fa4b0;
                  let _0x594a22 = 1;
                  if (_0x5cc620 > _0x460604.maxTextureSize) {
                    _0x594a22 = Math.ceil(_0x5cc620 / _0x460604.maxTextureSize);
                    _0x5cc620 = _0x460604.maxTextureSize;
                  }
                  const _0xc37852 = new Float32Array(_0x5cc620 * _0x594a22 * 4 * _0x544c12);
                  const _0x4b851a = new _0x989990(_0xc37852, _0x5cc620, _0x594a22, _0x544c12);
                  _0x4b851a.format = _0x4f87e5;
                  _0x4b851a.type = _0x4c436e;
                  _0x4b851a.needsUpdate = true;
                  var _0x280ba3 = _0x2fa4b0 * 4;
                  for (let _0x13d999 = 0; _0x13d999 < _0x544c12; _0x13d999++) {
                    var _0x44d7c0 = _0x799112[_0x13d999];
                    var _0x229b4f = _0x4e7137[_0x13d999];
                    var _0x5bef47 = _0x5cc620 * _0x594a22 * 4 * _0x13d999;
                    for (let _0x280461 = 0; _0x280461 < _0x44d7c0.count; _0x280461++) {
                      _0x3116ab.fromBufferAttribute(_0x44d7c0, _0x280461);
                      if (_0x44d7c0.normalized === true) {
                        _0x20a6c2(_0x3116ab, _0x44d7c0);
                      }
                      var _0x243854 = _0x280461 * _0x280ba3;
                      _0xc37852[_0x5bef47 + _0x243854] = _0x3116ab.x;
                      _0xc37852[_0x5bef47 + _0x243854 + 1] = _0x3116ab.y;
                      _0xc37852[_0x5bef47 + _0x243854 + 2] = _0x3116ab.z;
                      if (!(_0xc37852[_0x5bef47 + _0x243854 + 3] = 0) == _0x4e8536) {
                        _0x3116ab.fromBufferAttribute(_0x229b4f, _0x280461);
                        if (_0x229b4f.normalized === true) {
                          _0x20a6c2(_0x3116ab, _0x229b4f);
                        }
                        _0xc37852[_0x5bef47 + _0x243854 + 4] = _0x3116ab.x;
                        _0xc37852[_0x5bef47 + _0x243854 + 5] = _0x3116ab.y;
                        _0xc37852[_0x5bef47 + _0x243854 + 6] = _0x3116ab.z;
                        _0xc37852[_0x5bef47 + _0x243854 + 7] = 0;
                      }
                    }
                  }
                  _0x46d439 = {
                    count: _0x544c12,
                    texture: _0x4b851a,
                    size: new _0x25f874(_0x5cc620, _0x594a22)
                  };
                  _0x236b8f.set(_0xeadc7a, _0x46d439);
                }
                let _0x59c57b = 0;
                for (let _0x2edd2d = 0; _0x2edd2d < _0x27e1e4.length; _0x2edd2d++) {
                  _0x59c57b += _0x27e1e4[_0x2edd2d];
                }
                _0x2fa4b0 = _0xeadc7a.morphTargetsRelative ? 1 : 1 - _0x59c57b;
                _0x598419.getUniforms().setValue(_0x5965af, "morphTargetBaseInfluence", _0x2fa4b0);
                _0x598419.getUniforms().setValue(_0x5965af, "morphTargetInfluences", _0x27e1e4);
                _0x598419.getUniforms().setValue(_0x5965af, "morphTargetsTexture", _0x46d439.texture, _0x1999ae);
                _0x598419.getUniforms().setValue(_0x5965af, "morphTargetsTextureSize", _0x46d439.size);
              } else {
                var _0x5384f1 = 15;
                var _0x5a4b9f = _0x27e1e4 === undefined ? 0 : _0x27e1e4.length;
                _0x5384f1 = 1;
                var _0x28aa53;
                let _0x4bec52 = _0xe09833[_0xeadc7a.id];
                _0x28aa53 = 2;
                if (_0x4bec52 === undefined || _0x4bec52.length !== _0x5a4b9f) {
                  _0x4bec52 = [];
                  for (let _0x361cbe = 0; _0x361cbe < _0x5a4b9f; _0x361cbe++) {
                    _0x4bec52[_0x361cbe] = [_0x361cbe, 0];
                  }
                  _0xe09833[_0xeadc7a.id] = _0x4bec52;
                }
                for (let _0xf531a3 = 0; _0xf531a3 < _0x5a4b9f; _0xf531a3++) {
                  var _0x473352 = 3;
                  const _0x4fafb2 = _0x4bec52[_0xf531a3];
                  _0x473352 = 8;
                  _0x4fafb2[0] = _0xf531a3;
                  _0x4fafb2[1] = _0x27e1e4[_0xf531a3];
                }
                _0x4bec52.sort(_0x423cda);
                for (let _0x433bfb = 0; _0x433bfb < 8; _0x433bfb++) {
                  if (_0x433bfb < _0x5a4b9f && _0x4bec52[_0x433bfb][1]) {
                    _0x50c430[_0x433bfb][0] = _0x4bec52[_0x433bfb][0];
                    _0x50c430[_0x433bfb][1] = _0x4bec52[_0x433bfb][1];
                  } else {
                    _0x50c430[_0x433bfb][0] = Number.MAX_SAFE_INTEGER;
                    _0x50c430[_0x433bfb][1] = 0;
                  }
                }
                _0x50c430.sort(_0x585254);
                var _0x11fe7c = _0xeadc7a.morphAttributes.position;
                var _0x20d13f = _0xeadc7a.morphAttributes.normal;
                let _0x7cf6b8 = 0;
                for (let _0x19689c = 0; _0x19689c < 8; _0x19689c++) {
                  var _0x41931d = _0x50c430[_0x19689c];
                  var _0x19d539 = _0x41931d[0];
                  _0x41931d = _0x41931d[1];
                  if (_0x19d539 !== Number.MAX_SAFE_INTEGER && _0x41931d) {
                    if (_0x11fe7c && _0xeadc7a.getAttribute("morphTarget" + _0x19689c) !== _0x11fe7c[_0x19d539]) {
                      _0xeadc7a.setAttribute("morphTarget" + _0x19689c, _0x11fe7c[_0x19d539]);
                    }
                    if (_0x20d13f && _0xeadc7a.getAttribute("morphNormal" + _0x19689c) !== _0x20d13f[_0x19d539]) {
                      _0xeadc7a.setAttribute("morphNormal" + _0x19689c, _0x20d13f[_0x19d539]);
                    }
                    _0x15feec[_0x19689c] = _0x41931d;
                    _0x7cf6b8 += _0x41931d;
                  } else {
                    if (_0x11fe7c && _0xeadc7a.hasAttribute("morphTarget" + _0x19689c) === true) {
                      _0xeadc7a.deleteAttribute("morphTarget" + _0x19689c);
                    }
                    if (_0x20d13f && _0xeadc7a.hasAttribute("morphNormal" + _0x19689c) === true) {
                      _0xeadc7a.deleteAttribute("morphNormal" + _0x19689c);
                    }
                    _0x15feec[_0x19689c] = 0;
                  }
                }
                _0x2fa4b0 = _0xeadc7a.morphTargetsRelative ? 1 : 1 - _0x7cf6b8;
                _0x598419.getUniforms().setValue(_0x5965af, "morphTargetBaseInfluence", _0x2fa4b0);
                _0x598419.getUniforms().setValue(_0x5965af, "morphTargetInfluences", _0x15feec);
              }
            }
          };
        }
        function _0x44ac8c(_0x2e7ca7, _0x5b36e4, _0x396d93, _0x6f3d4f) {
          let _0x14d8b2 = new WeakMap();
          function _0xd30c2f(_0x4e2ef8) {
            const _0x58f94a = _0x4e2ef8.target;
            _0x58f94a.removeEventListener("dispose", _0xd30c2f);
            _0x396d93.remove(_0x58f94a.instanceMatrix);
            if (_0x58f94a.instanceColor !== null) {
              _0x396d93.remove(_0x58f94a.instanceColor);
            }
          }
          return {
            update: function (_0x5b7370) {
              var _0x51cce2 = _0x6f3d4f.render.frame;
              var _0x36a705 = _0x5b7370.geometry;
              _0x36a705 = _0x5b36e4.get(_0x5b7370, _0x36a705);
              if (_0x14d8b2.get(_0x36a705) !== _0x51cce2) {
                _0x5b36e4.update(_0x36a705);
                _0x14d8b2.set(_0x36a705, _0x51cce2);
              }
              if (_0x5b7370.isInstancedMesh) {
                if (_0x5b7370.hasEventListener("dispose", _0xd30c2f) === false) {
                  _0x5b7370.addEventListener("dispose", _0xd30c2f);
                }
                _0x396d93.update(_0x5b7370.instanceMatrix, 34962);
                if (_0x5b7370.instanceColor !== null) {
                  _0x396d93.update(_0x5b7370.instanceColor, 34962);
                }
              }
              return _0x36a705;
            },
            dispose: function () {
              _0x14d8b2 = new WeakMap();
            }
          };
        }
        _0x989990.prototype.isDataTexture2DArray = true;
        class _0xd55802 extends _0x3d39cb {
          constructor(_0x263e7a = null, _0x5092a7 = 1, _0x52824e = 1, _0x1ccf12 = 1) {
            super(null);
            this.image = {
              data: _0x263e7a,
              width: _0x5092a7,
              height: _0x52824e,
              depth: _0x1ccf12
            };
            this.magFilter = _0x297826;
            this.minFilter = _0x297826;
            this.wrapR = _0x4f55c6;
            this.generateMipmaps = false;
            this.flipY = false;
            this.unpackAlignment = 1;
          }
        }
        _0xd55802.prototype.isDataTexture3D = true;
        const _0x4d9761 = new _0x3d39cb();
        const _0xc7a547 = new _0x989990();
        const _0x2f1b04 = new _0xd55802();
        const _0x749575 = new _0x50e2c1();
        const _0x2b6efa = [];
        const _0xdab9a3 = [];
        const _0x4212bb = new Float32Array(16);
        const _0x578c97 = new Float32Array(9);
        const _0x58f1d5 = new Float32Array(4);
        function _0x164b48(_0x1fd71b, _0x20d98f, _0x1d99b4) {
          const _0xf4bd1a = _0x1fd71b[0];
          if (_0xf4bd1a <= 0 || _0xf4bd1a > 0) {
            return _0x1fd71b;
          }
          var _0x505bbb = _0x20d98f * _0x1d99b4;
          var _0x1f9970 = 8;
          let _0x41cc27 = _0x2b6efa[_0x505bbb];
          _0x1f9970 = 9;
          if (_0x41cc27 === undefined) {
            _0x41cc27 = new Float32Array(_0x505bbb);
            _0x2b6efa[_0x505bbb] = _0x41cc27;
          }
          if (_0x20d98f !== 0) {
            _0xf4bd1a.toArray(_0x41cc27, 0);
            for (let _0x345dd3 = 1, _0x36a266 = 0; _0x345dd3 !== _0x20d98f; ++_0x345dd3) {
              _0x36a266 += _0x1d99b4;
              _0x1fd71b[_0x345dd3].toArray(_0x41cc27, _0x36a266);
            }
          }
          return _0x41cc27;
        }
        function _0x439376(_0x455b47, _0x4857b9) {
          if (_0x455b47.length === _0x4857b9.length) {
            for (let _0x21892c = 0, _0x3cf268 = _0x455b47.length; _0x21892c < _0x3cf268; _0x21892c++) {
              if (_0x455b47[_0x21892c] !== _0x4857b9[_0x21892c]) {
                return;
              }
            }
            return 1;
          }
        }
        function _0x5b4b13(_0xffa7f6, _0x51f309) {
          for (let _0x26a6c4 = 0, _0x3184bd = _0x51f309.length; _0x26a6c4 < _0x3184bd; _0x26a6c4++) {
            _0xffa7f6[_0x26a6c4] = _0x51f309[_0x26a6c4];
          }
        }
        function _0x3a8e35(_0x301ffd, _0x25f175) {
          let _0x300363 = _0xdab9a3[_0x25f175];
          if (_0x300363 === undefined) {
            _0x300363 = new Int32Array(_0x25f175);
            _0xdab9a3[_0x25f175] = _0x300363;
          }
          for (let _0x16f5b5 = 0; _0x16f5b5 !== _0x25f175; ++_0x16f5b5) {
            _0x300363[_0x16f5b5] = _0x301ffd.allocateTextureUnit();
          }
          return _0x300363;
        }
        function _0x4161ed(_0x1c2f58, _0x7dc799) {
          const _0x1c4677 = this.cache;
          if (_0x1c4677[0] !== _0x7dc799) {
            _0x1c2f58.uniform1f(this.addr, _0x7dc799);
            _0x1c4677[0] = _0x7dc799;
          }
        }
        function _0x5549ae(_0x2dd91a, _0x500755) {
          const _0x5c16e0 = this.cache;
          if (_0x500755.x !== undefined) {
            if (!(_0x5c16e0[0] === _0x500755.x && _0x5c16e0[1] === _0x500755.y)) {
              _0x2dd91a.uniform2f(this.addr, _0x500755.x, _0x500755.y);
              _0x5c16e0[0] = _0x500755.x;
              _0x5c16e0[1] = _0x500755.y;
            }
          } else if (!_0x439376(_0x5c16e0, _0x500755)) {
            _0x2dd91a.uniform2fv(this.addr, _0x500755);
            _0x5b4b13(_0x5c16e0, _0x500755);
          }
        }
        function _0x2e8391(_0x5139d8, _0x3d352f) {
          var _0x41ef91 = 11;
          const _0x4bcd8a = this.cache;
          _0x41ef91 = 13;
          if (_0x3d352f.x !== undefined) {
            if (!(_0x4bcd8a[0] === _0x3d352f.x && _0x4bcd8a[1] === _0x3d352f.y && _0x4bcd8a[2] === _0x3d352f.z)) {
              _0x5139d8.uniform3f(this.addr, _0x3d352f.x, _0x3d352f.y, _0x3d352f.z);
              _0x4bcd8a[0] = _0x3d352f.x;
              _0x4bcd8a[1] = _0x3d352f.y;
              _0x4bcd8a[2] = _0x3d352f.z;
            }
          } else if (_0x3d352f.r !== undefined) {
            if (!(_0x4bcd8a[0] === _0x3d352f.r && _0x4bcd8a[1] === _0x3d352f.g && _0x4bcd8a[2] === _0x3d352f.b)) {
              _0x5139d8.uniform3f(this.addr, _0x3d352f.r, _0x3d352f.g, _0x3d352f.b);
              _0x4bcd8a[0] = _0x3d352f.r;
              _0x4bcd8a[1] = _0x3d352f.g;
              _0x4bcd8a[2] = _0x3d352f.b;
            }
          } else if (!_0x439376(_0x4bcd8a, _0x3d352f)) {
            _0x5139d8.uniform3fv(this.addr, _0x3d352f);
            _0x5b4b13(_0x4bcd8a, _0x3d352f);
          }
        }
        function _0x29423b(_0x1e5123, _0x45409f) {
          var _0x1f0fce = 12;
          const _0xad9ad9 = this.cache;
          _0x1f0fce = 3;
          if (_0x45409f.x !== undefined) {
            if (!(_0xad9ad9[0] === _0x45409f.x && _0xad9ad9[1] === _0x45409f.y && _0xad9ad9[2] === _0x45409f.z && _0xad9ad9[3] === _0x45409f.w)) {
              _0x1e5123.uniform4f(this.addr, _0x45409f.x, _0x45409f.y, _0x45409f.z, _0x45409f.w);
              _0xad9ad9[0] = _0x45409f.x;
              _0xad9ad9[1] = _0x45409f.y;
              _0xad9ad9[2] = _0x45409f.z;
              _0xad9ad9[3] = _0x45409f.w;
            }
          } else if (!_0x439376(_0xad9ad9, _0x45409f)) {
            _0x1e5123.uniform4fv(this.addr, _0x45409f);
            _0x5b4b13(_0xad9ad9, _0x45409f);
          }
        }
        function _0x52942e(_0xd610d5, _0x4d949a) {
          var _0x34f627 = this.cache;
          var _0xfdee88 = _0x4d949a.elements;
          if (_0xfdee88 === undefined) {
            if (!_0x439376(_0x34f627, _0x4d949a)) {
              _0xd610d5.uniformMatrix2fv(this.addr, false, _0x4d949a);
              _0x5b4b13(_0x34f627, _0x4d949a);
            }
          } else if (!_0x439376(_0x34f627, _0xfdee88)) {
            _0x58f1d5.set(_0xfdee88);
            _0xd610d5.uniformMatrix2fv(this.addr, false, _0x58f1d5);
            _0x5b4b13(_0x34f627, _0xfdee88);
          }
        }
        function _0x2ce901(_0x4c51dc, _0x12cec5) {
          var _0x526298 = this.cache;
          var _0x274e73 = _0x12cec5.elements;
          if (_0x274e73 === undefined) {
            if (!_0x439376(_0x526298, _0x12cec5)) {
              _0x4c51dc.uniformMatrix3fv(this.addr, false, _0x12cec5);
              _0x5b4b13(_0x526298, _0x12cec5);
            }
          } else if (!_0x439376(_0x526298, _0x274e73)) {
            _0x578c97.set(_0x274e73);
            _0x4c51dc.uniformMatrix3fv(this.addr, false, _0x578c97);
            _0x5b4b13(_0x526298, _0x274e73);
          }
        }
        function _0x4eb9ab(_0x50f47a, _0x198bc1) {
          var _0x41eb91 = this.cache;
          var _0x4ffef7 = _0x198bc1.elements;
          if (_0x4ffef7 === undefined) {
            if (!_0x439376(_0x41eb91, _0x198bc1)) {
              _0x50f47a.uniformMatrix4fv(this.addr, false, _0x198bc1);
              _0x5b4b13(_0x41eb91, _0x198bc1);
            }
          } else if (!_0x439376(_0x41eb91, _0x4ffef7)) {
            _0x4212bb.set(_0x4ffef7);
            _0x50f47a.uniformMatrix4fv(this.addr, false, _0x4212bb);
            _0x5b4b13(_0x41eb91, _0x4ffef7);
          }
        }
        function _0x54d905(_0x5d287c, _0x7d53e0) {
          const _0x34ed92 = this.cache;
          if (_0x34ed92[0] !== _0x7d53e0) {
            _0x5d287c.uniform1i(this.addr, _0x7d53e0);
            _0x34ed92[0] = _0x7d53e0;
          }
        }
        function _0x58bd01(_0x12bed3, _0x281236) {
          var _0x544f63 = this.cache;
          if (!_0x439376(_0x544f63, _0x281236)) {
            _0x12bed3.uniform2iv(this.addr, _0x281236);
            _0x5b4b13(_0x544f63, _0x281236);
          }
        }
        function _0x5a73a9(_0x402e52, _0x1e71bb) {
          var _0x5401d4 = this.cache;
          if (!_0x439376(_0x5401d4, _0x1e71bb)) {
            _0x402e52.uniform3iv(this.addr, _0x1e71bb);
            _0x5b4b13(_0x5401d4, _0x1e71bb);
          }
        }
        function _0x2919f9(_0x1ad5d5, _0x2935bb) {
          var _0x15d986 = this.cache;
          if (!_0x439376(_0x15d986, _0x2935bb)) {
            _0x1ad5d5.uniform4iv(this.addr, _0x2935bb);
            _0x5b4b13(_0x15d986, _0x2935bb);
          }
        }
        function _0x24a7a9(_0x20d322, _0x468a2e) {
          const _0x10eb61 = this.cache;
          if (_0x10eb61[0] !== _0x468a2e) {
            _0x20d322.uniform1ui(this.addr, _0x468a2e);
            _0x10eb61[0] = _0x468a2e;
          }
        }
        function _0x10e859(_0x50cec0, _0x309f59) {
          var _0x3c14c7 = this.cache;
          if (!_0x439376(_0x3c14c7, _0x309f59)) {
            _0x50cec0.uniform2uiv(this.addr, _0x309f59);
            _0x5b4b13(_0x3c14c7, _0x309f59);
          }
        }
        function _0x401b69(_0x3e47dd, _0x26ef94) {
          var _0xcd9a3b = 11;
          var _0x278f5f = this.cache;
          _0xcd9a3b = 16;
          if (!_0x439376(_0x278f5f, _0x26ef94)) {
            _0x3e47dd.uniform3uiv(this.addr, _0x26ef94);
            _0x5b4b13(_0x278f5f, _0x26ef94);
          }
        }
        function _0x57eef6(_0x45088d, _0x58c6b9) {
          var _0x185ca1 = this.cache;
          if (!_0x439376(_0x185ca1, _0x58c6b9)) {
            _0x45088d.uniform4uiv(this.addr, _0x58c6b9);
            _0x5b4b13(_0x185ca1, _0x58c6b9);
          }
        }
        function _0x290ef5(_0x9beea1, _0x2ba12d, _0x15d3ed) {
          const _0x21ac83 = this.cache;
          var _0x429b92 = 2;
          var _0x166997 = _0x15d3ed.allocateTextureUnit();
          _0x429b92 = 6;
          if (_0x21ac83[0] !== _0x166997) {
            _0x9beea1.uniform1i(this.addr, _0x166997);
            _0x21ac83[0] = _0x166997;
          }
          _0x15d3ed.safeSetTexture2D(_0x2ba12d || _0x4d9761, _0x166997);
        }
        function _0x3bcd72(_0x156047, _0x4c0564, _0x2d262f) {
          var _0x586609;
          const _0x11d2fa = this.cache;
          _0x586609 = 10;
          var _0x2de476 = _0x2d262f.allocateTextureUnit();
          if (_0x11d2fa[0] !== _0x2de476) {
            _0x156047.uniform1i(this.addr, _0x2de476);
            _0x11d2fa[0] = _0x2de476;
          }
          _0x2d262f.setTexture3D(_0x4c0564 || _0x2f1b04, _0x2de476);
        }
        function _0x10c0c1(_0x253e42, _0x31f1ba, _0x466d7c) {
          var _0x24f003;
          const _0x562f26 = this.cache;
          _0x24f003 = 0;
          var _0x3e1145 = _0x466d7c.allocateTextureUnit();
          if (_0x562f26[0] !== _0x3e1145) {
            _0x253e42.uniform1i(this.addr, _0x3e1145);
            _0x562f26[0] = _0x3e1145;
          }
          _0x466d7c.safeSetTextureCube(_0x31f1ba || _0x749575, _0x3e1145);
        }
        function _0x234ff7(_0x295836, _0x1db586, _0x313d35) {
          const _0x4f4584 = this.cache;
          var _0x369c35 = _0x313d35.allocateTextureUnit();
          if (_0x4f4584[0] !== _0x369c35) {
            _0x295836.uniform1i(this.addr, _0x369c35);
            _0x4f4584[0] = _0x369c35;
          }
          _0x313d35.setTexture2DArray(_0x1db586 || _0xc7a547, _0x369c35);
        }
        function _0x538108(_0x5abffe, _0x4bf645) {
          _0x5abffe.uniform1fv(this.addr, _0x4bf645);
        }
        function _0x4d6b8(_0x475fa6, _0x528cf4) {
          _0x528cf4 = _0x164b48(_0x528cf4, this.size, 2);
          _0x475fa6.uniform2fv(this.addr, _0x528cf4);
        }
        function _0x589cb4(_0x3ee8c4, _0x166765) {
          _0x166765 = _0x164b48(_0x166765, this.size, 3);
          _0x3ee8c4.uniform3fv(this.addr, _0x166765);
        }
        function _0x16c222(_0x4f3d61, _0x2450e5) {
          _0x2450e5 = _0x164b48(_0x2450e5, this.size, 4);
          _0x4f3d61.uniform4fv(this.addr, _0x2450e5);
        }
        function _0x2fbf12(_0x19b0e1, _0x1aca43) {
          _0x1aca43 = _0x164b48(_0x1aca43, this.size, 4);
          _0x19b0e1.uniformMatrix2fv(this.addr, false, _0x1aca43);
        }
        function _0x46117c(_0x18e9f5, _0x1f17c9) {
          _0x1f17c9 = _0x164b48(_0x1f17c9, this.size, 9);
          _0x18e9f5.uniformMatrix3fv(this.addr, false, _0x1f17c9);
        }
        function _0x341921(_0x377129, _0x8169e3) {
          _0x8169e3 = _0x164b48(_0x8169e3, this.size, 16);
          _0x377129.uniformMatrix4fv(this.addr, false, _0x8169e3);
        }
        function _0x97b872(_0x5e2184, _0x37c2a4) {
          _0x5e2184.uniform1iv(this.addr, _0x37c2a4);
        }
        function _0x214083(_0x17b584, _0x2ea128) {
          _0x17b584.uniform2iv(this.addr, _0x2ea128);
        }
        function _0x3c4e5c(_0xad94a7, _0x222e5e) {
          _0xad94a7.uniform3iv(this.addr, _0x222e5e);
        }
        function _0x2f69e7(_0x566d74, _0xef8a06) {
          _0x566d74.uniform4iv(this.addr, _0xef8a06);
        }
        function _0x139035(_0x445de3, _0x1c9c6a) {
          _0x445de3.uniform1uiv(this.addr, _0x1c9c6a);
        }
        function _0x20188e(_0x340894, _0x532afd) {
          _0x340894.uniform2uiv(this.addr, _0x532afd);
        }
        function _0x377924(_0x5909c1, _0x393b87) {
          _0x5909c1.uniform3uiv(this.addr, _0x393b87);
        }
        function _0x27f88d(_0x453d77, _0x7b1ba0) {
          _0x453d77.uniform4uiv(this.addr, _0x7b1ba0);
        }
        function _0x5654c0(_0xed0aaf, _0x597449, _0x23dd0c) {
          var _0x5ea143 = _0x597449.length;
          var _0x36420c = _0x3a8e35(_0x23dd0c, _0x5ea143);
          _0xed0aaf.uniform1iv(this.addr, _0x36420c);
          for (let _0x2aebf9 = 0; _0x2aebf9 !== _0x5ea143; ++_0x2aebf9) {
            _0x23dd0c.safeSetTexture2D(_0x597449[_0x2aebf9] || _0x4d9761, _0x36420c[_0x2aebf9]);
          }
        }
        function _0x31e8b0(_0x103b00, _0x52497d, _0xe5c224) {
          var _0x44e342 = _0x52497d.length;
          var _0x5a3801 = _0x3a8e35(_0xe5c224, _0x44e342);
          _0x103b00.uniform1iv(this.addr, _0x5a3801);
          for (let _0x5e0a70 = 0; _0x5e0a70 !== _0x44e342; ++_0x5e0a70) {
            _0xe5c224.setTexture3D(_0x52497d[_0x5e0a70] || _0x2f1b04, _0x5a3801[_0x5e0a70]);
          }
        }
        function _0x3d6610(_0x89e79e, _0x22259a, _0x5ef1c9) {
          var _0x2054a8 = _0x22259a.length;
          var _0x19151d = _0x3a8e35(_0x5ef1c9, _0x2054a8);
          _0x89e79e.uniform1iv(this.addr, _0x19151d);
          for (let _0x2e9d34 = 0; _0x2e9d34 !== _0x2054a8; ++_0x2e9d34) {
            _0x5ef1c9.safeSetTextureCube(_0x22259a[_0x2e9d34] || _0x749575, _0x19151d[_0x2e9d34]);
          }
        }
        function _0x371b31(_0x474193, _0x3316c6, _0x4d647f) {
          var _0x110562 = _0x3316c6.length;
          var _0x17e4b5 = _0x3a8e35(_0x4d647f, _0x110562);
          _0x474193.uniform1iv(this.addr, _0x17e4b5);
          for (let _0x59a649 = 0; _0x59a649 !== _0x110562; ++_0x59a649) {
            _0x4d647f.setTexture2DArray(_0x3316c6[_0x59a649] || _0xc7a547, _0x17e4b5[_0x59a649]);
          }
        }
        function _0x5898d3(_0x398d42, _0x4487c3, _0x44e94b) {
          this.id = _0x398d42;
          this.addr = _0x44e94b;
          this.cache = [];
          this.setValue = function (_0x4221d0) {
            switch (_0x4221d0) {
              case 5126:
                return _0x4161ed;
              case 35664:
                return _0x5549ae;
              case 35665:
                return _0x2e8391;
              case 35666:
                return _0x29423b;
              case 35674:
                return _0x52942e;
              case 35675:
                return _0x2ce901;
              case 35676:
                return _0x4eb9ab;
              case 5124:
              case 35670:
                return _0x54d905;
              case 35667:
              case 35671:
                return _0x58bd01;
              case 35668:
              case 35672:
                return _0x5a73a9;
              case 35669:
              case 35673:
                return _0x2919f9;
              case 5125:
                return _0x24a7a9;
              case 36294:
                return _0x10e859;
              case 36295:
                return _0x401b69;
              case 36296:
                return _0x57eef6;
              case 35678:
              case 36198:
              case 36298:
              case 36306:
              case 35682:
                return _0x290ef5;
              case 35679:
              case 36299:
              case 36307:
                return _0x3bcd72;
              case 35680:
              case 36300:
              case 36308:
              case 36293:
                return _0x10c0c1;
              case 36289:
              case 36303:
              case 36311:
              case 36292:
                return _0x234ff7;
            }
          }(_0x4487c3.type);
        }
        function _0x3cf49c(_0x458057, _0x278e65, _0x408e2e) {
          this.id = _0x458057;
          this.addr = _0x408e2e;
          this.cache = [];
          this.size = _0x278e65.size;
          this.setValue = function (_0x467c39) {
            switch (_0x467c39) {
              case 5126:
                return _0x538108;
              case 35664:
                return _0x4d6b8;
              case 35665:
                return _0x589cb4;
              case 35666:
                return _0x16c222;
              case 35674:
                return _0x2fbf12;
              case 35675:
                return _0x46117c;
              case 35676:
                return _0x341921;
              case 5124:
              case 35670:
                return _0x97b872;
              case 35667:
              case 35671:
                return _0x214083;
              case 35668:
              case 35672:
                return _0x3c4e5c;
              case 35669:
              case 35673:
                return _0x2f69e7;
              case 5125:
                return _0x139035;
              case 36294:
                return _0x20188e;
              case 36295:
                return _0x377924;
              case 36296:
                return _0x27f88d;
              case 35678:
              case 36198:
              case 36298:
              case 36306:
              case 35682:
                return _0x5654c0;
              case 35679:
              case 36299:
              case 36307:
                return _0x31e8b0;
              case 35680:
              case 36300:
              case 36308:
              case 36293:
                return _0x3d6610;
              case 36289:
              case 36303:
              case 36311:
              case 36292:
                return _0x371b31;
            }
          }(_0x278e65.type);
        }
        function _0x4b7dde(_0x52092a) {
          this.id = _0x52092a;
          this.seq = [];
          this.map = {};
        }
        _0x3cf49c.prototype.updateCache = function (_0x101f2d) {
          var _0x212684 = this.cache;
          if (_0x101f2d instanceof Float32Array && _0x212684.length !== _0x101f2d.length) {
            this.cache = new Float32Array(_0x101f2d.length);
          }
          _0x5b4b13(_0x212684, _0x101f2d);
        };
        _0x4b7dde.prototype.setValue = function (_0x3e5db4, _0xd8f019, _0x2f5add) {
          var _0x2bcc91 = this.seq;
          for (let _0x1db5cd = 0, _0x13708c = _0x2bcc91.length; _0x1db5cd !== _0x13708c; ++_0x1db5cd) {
            const _0x3fab3f = _0x2bcc91[_0x1db5cd];
            _0x3fab3f.setValue(_0x3e5db4, _0xd8f019[_0x3fab3f.id], _0x2f5add);
          }
        };
        const _0x22077a = /(\w+)(\])?(\[|\.)?/g;
        function _0x1cf39b(_0x2eb59c, _0x195a17) {
          _0x2eb59c.seq.push(_0x195a17);
          _0x2eb59c.map[_0x195a17.id] = _0x195a17;
        }
        function _0x381ca9(_0x193a2b, _0x456ee6) {
          this.seq = [];
          this.map = {};
          var _0x3a13b6 = _0x193a2b.getProgramParameter(_0x456ee6, 35718);
          for (let _0x308df1 = 0; _0x308df1 < _0x3a13b6; ++_0x308df1) {
            var _0x380524 = _0x193a2b.getActiveUniform(_0x456ee6, _0x308df1);
            (function (_0x36634c, _0x4bfe42, _0x41d188) {
              var _0xc66920 = _0x36634c.name;
              var _0x7490c8 = _0xc66920.length;
              for (_0x22077a.lastIndex = 0;;) {
                var _0x451090 = _0x22077a.exec(_0xc66920);
                var _0x3ea254 = _0x22077a.lastIndex;
                let _0x3a96a7 = _0x451090[1];
                var _0x3b0e64;
                var _0x2f5076 = _0x451090[2] === "]";
                _0x3b0e64 = 9;
                _0x451090 = _0x451090[3];
                if (_0x2f5076) {
                  _0x3a96a7 |= 0;
                }
                if (_0x451090 === undefined || _0x451090 === "[" && _0x3ea254 + 2 === _0x7490c8) {
                  _0x1cf39b(_0x41d188, new (_0x451090 === undefined ? _0x5898d3 : _0x3cf49c)(_0x3a96a7, _0x36634c, _0x4bfe42));
                  break;
                }
                {
                  let _0x18d373 = _0x41d188.map[_0x3a96a7];
                  if (_0x18d373 === undefined) {
                    _0x18d373 = new _0x4b7dde(_0x3a96a7);
                    _0x1cf39b(_0x41d188, _0x18d373);
                  }
                  _0x41d188 = _0x18d373;
                }
              }
            })(_0x380524, _0x193a2b.getUniformLocation(_0x456ee6, _0x380524.name), this);
          }
        }
        function _0x2c552c(_0x439995, _0x5504f6, _0x1a438f) {
          _0x5504f6 = _0x439995.createShader(_0x5504f6);
          _0x439995.shaderSource(_0x5504f6, _0x1a438f);
          _0x439995.compileShader(_0x5504f6);
          return _0x5504f6;
        }
        _0x381ca9.prototype.setValue = function (_0x198920, _0x57a29d, _0x39625b, _0xfa769e) {
          const _0x5150e6 = this.map[_0x57a29d];
          if (_0x5150e6 !== undefined) {
            _0x5150e6.setValue(_0x198920, _0x39625b, _0xfa769e);
          }
        };
        _0x381ca9.prototype.setOptional = function (_0x352a7f, _0x56dc06, _0x7ac660) {
          if ((_0x56dc06 = _0x56dc06[_0x7ac660]) !== undefined) {
            this.setValue(_0x352a7f, _0x7ac660, _0x56dc06);
          }
        };
        _0x381ca9.upload = function (_0x14795b, _0x5298e6, _0x53296b, _0x5c81d0) {
          for (let _0x536f5f = 0, _0x5777a5 = _0x5298e6.length; _0x536f5f !== _0x5777a5; ++_0x536f5f) {
            const _0x5a2d31 = _0x5298e6[_0x536f5f];
            const _0x497be3 = _0x53296b[_0x5a2d31.id];
            if (_0x497be3.needsUpdate !== false) {
              _0x5a2d31.setValue(_0x14795b, _0x497be3.value, _0x5c81d0);
            }
          }
        };
        _0x381ca9.seqWithValue = function (_0x48b458, _0x3a2335) {
          const _0x393d33 = [];
          for (let _0x5bbaed = 0, _0x38c43b = _0x48b458.length; _0x5bbaed !== _0x38c43b; ++_0x5bbaed) {
            var _0x1d7453 = 7;
            var _0x36b8cc = _0x48b458[_0x5bbaed];
            _0x1d7453 = 7;
            if (_0x36b8cc.id in _0x3a2335) {
              _0x393d33.push(_0x36b8cc);
            }
          }
          return _0x393d33;
        };
        let _0x121aa4 = 0;
        function _0x443dd6(_0x235191) {
          switch (_0x235191) {
            case _0xca2f2a:
              return ["Linear", "( value )"];
            case _0x320ef1:
              return ["sRGB", "( value )"];
            default:
              return ["Linear", "( value )"];
          }
        }
        function _0x45b381(_0x3c28ce, _0x171164, _0x309e22) {
          var _0x4903f1 = _0x3c28ce.getShaderParameter(_0x171164, 35713);
          var _0x10b972 = _0x3c28ce.getShaderInfoLog(_0x171164).trim();
          if (_0x4903f1 && _0x10b972 === "") {
            return "";
          } else {
            return _0x309e22.toUpperCase() + `
  
  ` + _0x10b972 + `
  
  ` + function (_0xc97345) {
              const _0x104e3b = _0xc97345.split("\n");
              for (let _0x1dc9ad = 0; _0x1dc9ad < _0x104e3b.length; _0x1dc9ad++) {
                _0x104e3b[_0x1dc9ad] = _0x1dc9ad + 1 + ": " + _0x104e3b[_0x1dc9ad];
              }
              return _0x104e3b.join("\n");
            }(_0x3c28ce.getShaderSource(_0x171164));
          }
        }
        function _0xe9df9d(_0x5050eb, _0x5da5d4) {
          return "vec4 " + _0x5050eb + "( vec4 value ) { return " + (_0x5da5d4 = _0x443dd6(_0x5da5d4))[0] + "ToLinear" + _0x5da5d4[1] + "; }";
        }
        function _0x2115a1(_0x54750b) {
          return _0x54750b !== "";
        }
        function _0x5796bf(_0x5743b7, _0x4c12e4) {
          return _0x5743b7.replace(/NUM_DIR_LIGHTS/g, _0x4c12e4.numDirLights).replace(/NUM_SPOT_LIGHTS/g, _0x4c12e4.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, _0x4c12e4.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, _0x4c12e4.numPointLights).replace(/NUM_HEMI_LIGHTS/g, _0x4c12e4.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, _0x4c12e4.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, _0x4c12e4.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, _0x4c12e4.numPointLightShadows);
        }
        function _0x5141ad(_0x2898ab, _0x16323f) {
          return _0x2898ab.replace(/NUM_CLIPPING_PLANES/g, _0x16323f.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, _0x16323f.numClippingPlanes - _0x16323f.numClipIntersection);
        }
        const _0x4d143a = /^[ \t]*#include +<([\w\d./]+)>/gm;
        function _0x2a56d2(_0x2cbf00) {
          return _0x2cbf00.replace(_0x4d143a, _0x13952c);
        }
        function _0x13952c(_0x1fdd9a, _0xa1b93) {
          var _0x329b72 = _0x53dfdc[_0xa1b93];
          if (_0x329b72 === undefined) {
            throw new Error("`````````````");
          }
          return _0x2a56d2(_0x329b72);
        }
        const _0x5a5a2f = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
        const _0x295b22 = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
        function _0x53825c(_0x5e6186) {
          return _0x5e6186.replace(_0x295b22, _0x3cafec).replace(_0x5a5a2f, _0x557ab3);
        }
        function _0x557ab3(_0x3cea95, _0xdd73c9, _0x390f46, _0x4a5278) {
          return _0x3cafec(0, _0xdd73c9, _0x390f46, _0x4a5278);
        }
        function _0x3cafec(_0x20d3fd, _0x201464, _0x46064f, _0x39e909) {
          var _0x3ac075;
          let _0xfce11f = "";
          _0x3ac075 = "dqoi";
          for (let _0x3aeab1 = parseInt(_0x201464); _0x3aeab1 < parseInt(_0x46064f); _0x3aeab1++) {
            _0xfce11f += _0x39e909.replace(/\[\s*i\s*\]/g, "[ " + _0x3aeab1 + " ]").replace(/UNROLLED_LOOP_INDEX/g, _0x3aeab1);
          }
          return _0xfce11f;
        }
        function _0x106fb5(_0x3c770b) {
          let _0x8d795 = "precision " + _0x3c770b.precision + " float;\nprecision " + _0x3c770b.precision + " int;";
          if (_0x3c770b.precision === "highp") {
            _0x8d795 += "\n#define HIGH_PRECISION";
          } else if (_0x3c770b.precision === "mediump") {
            _0x8d795 += "\n#define MEDIUM_PRECISION";
          } else if (_0x3c770b.precision === "lowp") {
            _0x8d795 += "\n#define LOW_PRECISION";
          }
          return _0x8d795;
        }
        function _0x5a0014(_0x529a80, _0x4372d7, _0x36eb61, _0x137c87) {
          const _0x2a4373 = _0x529a80.getContext();
          var _0x2ac3ea = _0x36eb61.defines;
          var _0x40aac4 = _0x36eb61.vertexShader;
          var _0x1d299b = _0x36eb61.fragmentShader;
          var _0x314b7d = function (_0x510976) {
            let _0x580644 = "SHADOWMAP_TYPE_BASIC";
            if (_0x510976.shadowMapType === _0x185486) {
              _0x580644 = "SHADOWMAP_TYPE_PCF";
            } else if (_0x510976.shadowMapType === _0x2c1da1) {
              _0x580644 = "SHADOWMAP_TYPE_PCF_SOFT";
            } else if (_0x510976.shadowMapType === _0x31dc34) {
              _0x580644 = "SHADOWMAP_TYPE_VSM";
            }
            return _0x580644;
          }(_0x36eb61);
          var _0xc81344 = function (_0x182c11) {
            let _0x49baec = "ENVMAP_TYPE_CUBE";
            if (_0x182c11.envMap) {
              switch (_0x182c11.envMapMode) {
                case _0x2097dc:
                case _0x38a1fa:
                  _0x49baec = "ENVMAP_TYPE_CUBE";
                  break;
                case _0x41f85a:
                case _0x14f15e:
                  _0x49baec = "ENVMAP_TYPE_CUBE_UV";
              }
            }
            return _0x49baec;
          }(_0x36eb61);
          var _0x1393e4 = function (_0x2b38bb) {
            let _0x409d1c = "ENVMAP_MODE_REFLECTION";
            if (_0x2b38bb.envMap) {
              switch (_0x2b38bb.envMapMode) {
                case _0x38a1fa:
                case _0x14f15e:
                  _0x409d1c = "ENVMAP_MODE_REFRACTION";
              }
            }
            return _0x409d1c;
          }(_0x36eb61);
          var _0x4ac054 = function (_0xe460c3) {
            let _0x5e38d8 = "ENVMAP_BLENDING_NONE";
            if (_0xe460c3.envMap) {
              switch (_0xe460c3.combine) {
                case _0x2e0cd0:
                  _0x5e38d8 = "ENVMAP_BLENDING_MULTIPLY";
                  break;
                case _0x26fe3d:
                  _0x5e38d8 = "ENVMAP_BLENDING_MIX";
                  break;
                case _0xb45436:
                  _0x5e38d8 = "ENVMAP_BLENDING_ADD";
              }
            }
            return _0x5e38d8;
          }(_0x36eb61);
          const _0x276247 = _0x36eb61.isWebGL2 ? "" : function (_0x1c14c0) {
            return [_0x1c14c0.extensionDerivatives || _0x1c14c0.envMapCubeUV || _0x1c14c0.bumpMap || _0x1c14c0.tangentSpaceNormalMap || _0x1c14c0.clearcoatNormalMap || _0x1c14c0.flatShading || _0x1c14c0.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "", (_0x1c14c0.extensionFragDepth || _0x1c14c0.logarithmicDepthBuffer) && _0x1c14c0.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "", _0x1c14c0.extensionDrawBuffers && _0x1c14c0.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (_0x1c14c0.extensionShaderTextureLOD || _0x1c14c0.envMap || _0x1c14c0.transmission) && _0x1c14c0.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(_0x2115a1).join("\n");
          }(_0x36eb61);
          const _0x207468 = function (_0x85f1a3) {
            const _0xa1a026 = [];
            for (const _0x4356d5 in _0x85f1a3) {
              var _0xa271ee = _0x85f1a3[_0x4356d5];
              if (_0xa271ee !== false) {
                _0xa1a026.push("#define " + _0x4356d5 + " " + _0xa271ee);
              }
            }
            return _0xa1a026.join("\n");
          }(_0x2ac3ea);
          const _0x132ba1 = _0x2a4373.createProgram();
          let _0x5605d3;
          let _0x459b8c;
          let _0x63eacb = _0x36eb61.glslVersion ? "#version " + _0x36eb61.glslVersion + "\n" : "";
          if (_0x36eb61.isRawShaderMaterial) {
            _0x5605d3 = [_0x207468].filter(_0x2115a1).join("\n");
            if (_0x5605d3.length > 0) {
              _0x5605d3 += "\n";
            }
            _0x459b8c = [_0x276247, _0x207468].filter(_0x2115a1).join("\n");
            if (_0x459b8c.length > 0) {
              _0x459b8c += "\n";
            }
          } else {
            _0x5605d3 = [_0x106fb5(_0x36eb61), "#define SHADER_NAME " + _0x36eb61.shaderName, _0x207468, _0x36eb61.instancing ? "#define USE_INSTANCING" : "", _0x36eb61.instancingColor ? "#define USE_INSTANCING_COLOR" : "", _0x36eb61.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define MAX_BONES " + _0x36eb61.maxBones, _0x36eb61.useFog && _0x36eb61.fog ? "#define USE_FOG" : "", _0x36eb61.useFog && _0x36eb61.fogExp2 ? "#define FOG_EXP2" : "", _0x36eb61.map ? "#define USE_MAP" : "", _0x36eb61.envMap ? "#define USE_ENVMAP" : "", _0x36eb61.envMap ? "#define " + _0x1393e4 : "", _0x36eb61.lightMap ? "#define USE_LIGHTMAP" : "", _0x36eb61.aoMap ? "#define USE_AOMAP" : "", _0x36eb61.emissiveMap ? "#define USE_EMISSIVEMAP" : "", _0x36eb61.bumpMap ? "#define USE_BUMPMAP" : "", _0x36eb61.normalMap ? "#define USE_NORMALMAP" : "", _0x36eb61.normalMap && _0x36eb61.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", _0x36eb61.normalMap && _0x36eb61.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", _0x36eb61.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", _0x36eb61.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", _0x36eb61.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", _0x36eb61.displacementMap && _0x36eb61.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", _0x36eb61.specularMap ? "#define USE_SPECULARMAP" : "", _0x36eb61.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", _0x36eb61.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "", _0x36eb61.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", _0x36eb61.metalnessMap ? "#define USE_METALNESSMAP" : "", _0x36eb61.alphaMap ? "#define USE_ALPHAMAP" : "", _0x36eb61.transmission ? "#define USE_TRANSMISSION" : "", _0x36eb61.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", _0x36eb61.thicknessMap ? "#define USE_THICKNESSMAP" : "", _0x36eb61.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "", _0x36eb61.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "", _0x36eb61.vertexTangents ? "#define USE_TANGENT" : "", _0x36eb61.vertexColors ? "#define USE_COLOR" : "", _0x36eb61.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", _0x36eb61.vertexUvs ? "#define USE_UV" : "", _0x36eb61.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", _0x36eb61.flatShading ? "#define FLAT_SHADED" : "", _0x36eb61.skinning ? "#define USE_SKINNING" : "", _0x36eb61.useVertexTexture ? "#define BONE_TEXTURE" : "", _0x36eb61.morphTargets ? "#define USE_MORPHTARGETS" : "", _0x36eb61.morphNormals && _0x36eb61.flatShading === false ? "#define USE_MORPHNORMALS" : "", _0x36eb61.morphTargets && _0x36eb61.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "", _0x36eb61.morphTargets && _0x36eb61.isWebGL2 ? "#define MORPHTARGETS_COUNT " + _0x36eb61.morphTargetsCount : "", _0x36eb61.doubleSided ? "#define DOUBLE_SIDED" : "", _0x36eb61.flipSided ? "#define FLIP_SIDED" : "", _0x36eb61.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", _0x36eb61.shadowMapEnabled ? "#define " + _0x314b7d : "", _0x36eb61.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", _0x36eb61.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", _0x36eb61.logarithmicDepthBuffer && _0x36eb61.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", "\tattribute mat4 instanceMatrix;", "#endif", "#ifdef USE_INSTANCING_COLOR", "\tattribute vec3 instanceColor;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", "#if defined( USE_COLOR_ALPHA )", "\tattribute vec4 color;", "#elif defined( USE_COLOR )", "\tattribute vec3 color;", "#endif", "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(_0x2115a1).join("\n");
            _0x459b8c = [_0x276247, _0x106fb5(_0x36eb61), "#define SHADER_NAME " + _0x36eb61.shaderName, _0x207468, _0x36eb61.useFog && _0x36eb61.fog ? "#define USE_FOG" : "", _0x36eb61.useFog && _0x36eb61.fogExp2 ? "#define FOG_EXP2" : "", _0x36eb61.map ? "#define USE_MAP" : "", _0x36eb61.matcap ? "#define USE_MATCAP" : "", _0x36eb61.envMap ? "#define USE_ENVMAP" : "", _0x36eb61.envMap ? "#define " + _0xc81344 : "", _0x36eb61.envMap ? "#define " + _0x1393e4 : "", _0x36eb61.envMap ? "#define " + _0x4ac054 : "", _0x36eb61.lightMap ? "#define USE_LIGHTMAP" : "", _0x36eb61.aoMap ? "#define USE_AOMAP" : "", _0x36eb61.emissiveMap ? "#define USE_EMISSIVEMAP" : "", _0x36eb61.bumpMap ? "#define USE_BUMPMAP" : "", _0x36eb61.normalMap ? "#define USE_NORMALMAP" : "", _0x36eb61.normalMap && _0x36eb61.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", _0x36eb61.normalMap && _0x36eb61.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", _0x36eb61.clearcoat ? "#define USE_CLEARCOAT" : "", _0x36eb61.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", _0x36eb61.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", _0x36eb61.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", _0x36eb61.specularMap ? "#define USE_SPECULARMAP" : "", _0x36eb61.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", _0x36eb61.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "", _0x36eb61.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", _0x36eb61.metalnessMap ? "#define USE_METALNESSMAP" : "", _0x36eb61.alphaMap ? "#define USE_ALPHAMAP" : "", _0x36eb61.alphaTest ? "#define USE_ALPHATEST" : "", _0x36eb61.sheen ? "#define USE_SHEEN" : "", _0x36eb61.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "", _0x36eb61.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "", _0x36eb61.transmission ? "#define USE_TRANSMISSION" : "", _0x36eb61.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", _0x36eb61.thicknessMap ? "#define USE_THICKNESSMAP" : "", _0x36eb61.vertexTangents ? "#define USE_TANGENT" : "", _0x36eb61.vertexColors || _0x36eb61.instancingColor ? "#define USE_COLOR" : "", _0x36eb61.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", _0x36eb61.vertexUvs ? "#define USE_UV" : "", _0x36eb61.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", _0x36eb61.gradientMap ? "#define USE_GRADIENTMAP" : "", _0x36eb61.flatShading ? "#define FLAT_SHADED" : "", _0x36eb61.doubleSided ? "#define DOUBLE_SIDED" : "", _0x36eb61.flipSided ? "#define FLIP_SIDED" : "", _0x36eb61.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", _0x36eb61.shadowMapEnabled ? "#define " + _0x314b7d : "", _0x36eb61.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", _0x36eb61.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", _0x36eb61.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", _0x36eb61.logarithmicDepthBuffer && _0x36eb61.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", (_0x36eb61.extensionShaderTextureLOD || _0x36eb61.envMap) && _0x36eb61.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", _0x36eb61.toneMapping !== _0x510390 ? "#define TONE_MAPPING" : "", _0x36eb61.toneMapping !== _0x510390 ? _0x53dfdc.tonemapping_pars_fragment : "", _0x36eb61.toneMapping !== _0x510390 ? function (_0x4bfc43, _0x54678d) {
              var _0x1ae3b8 = 11;
              let _0xfbaa2f;
              _0x1ae3b8 = 3;
              switch (_0x54678d) {
                case _0x52e684:
                  _0xfbaa2f = "Linear";
                  break;
                case _0x42f8a8:
                  _0xfbaa2f = "Reinhard";
                  break;
                case _0x1cc381:
                  _0xfbaa2f = "OptimizedCineon";
                  break;
                case _0xc3db81:
                  _0xfbaa2f = "ACESFilmic";
                  break;
                case _0x4bf0d4:
                  _0xfbaa2f = "Custom";
                  break;
                default:
                  _0xfbaa2f = "Linear";
              }
              return "vec3 toneMapping( vec3 color ) { return " + _0xfbaa2f + "ToneMapping( color ); }";
            }(0, _0x36eb61.toneMapping) : "", _0x36eb61.dithering ? "#define DITHERING" : "", _0x36eb61.format === _0x1e0c08 ? "#define OPAQUE" : "", _0x53dfdc.encodings_pars_fragment, _0x36eb61.map ? _0xe9df9d("mapTexelToLinear", _0x36eb61.mapEncoding) : "", _0x36eb61.matcap ? _0xe9df9d("matcapTexelToLinear", _0x36eb61.matcapEncoding) : "", _0x36eb61.envMap ? _0xe9df9d("envMapTexelToLinear", _0x36eb61.envMapEncoding) : "", _0x36eb61.emissiveMap ? _0xe9df9d("emissiveMapTexelToLinear", _0x36eb61.emissiveMapEncoding) : "", _0x36eb61.specularColorMap ? _0xe9df9d("specularColorMapTexelToLinear", _0x36eb61.specularColorMapEncoding) : "", _0x36eb61.sheenColorMap ? _0xe9df9d("sheenColorMapTexelToLinear", _0x36eb61.sheenColorMapEncoding) : "", _0x36eb61.lightMap ? _0xe9df9d("lightMapTexelToLinear", _0x36eb61.lightMapEncoding) : "", (_0x2ba30b = "linearToOutputTexel", _0x588a2b = _0x443dd6(_0x588a2b = _0x36eb61.outputEncoding), "vec4 " + _0x2ba30b + "( vec4 value ) { return LinearTo" + _0x588a2b[0] + _0x588a2b[1] + "; }"), _0x36eb61.depthPacking ? "#define DEPTH_PACKING " + _0x36eb61.depthPacking : "", "\n"].filter(_0x2115a1).join("\n");
          }
          _0x40aac4 = _0x5141ad(_0x5796bf(_0x2a56d2(_0x40aac4), _0x36eb61), _0x36eb61);
          _0x1d299b = _0x5141ad(_0x5796bf(_0x2a56d2(_0x1d299b), _0x36eb61), _0x36eb61);
          _0x40aac4 = _0x53825c(_0x40aac4);
          _0x1d299b = _0x53825c(_0x1d299b);
          if (_0x36eb61.isWebGL2 && _0x36eb61.isRawShaderMaterial !== true) {
            _0x63eacb = "#version 300 es\n";
            _0x5605d3 = ["precision mediump sampler2DArray;", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + _0x5605d3;
            _0x459b8c = ["#define varying in", _0x36eb61.glslVersion === _0x53dd45 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;", _0x36eb61.glslVersion === _0x53dd45 ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + _0x459b8c;
          }
          var _0x2ba30b = _0x63eacb + _0x5605d3 + _0x40aac4;
          var _0x588a2b = _0x63eacb + _0x459b8c + _0x1d299b;
          _0x40aac4 = _0x2c552c(_0x2a4373, 35633, _0x2ba30b);
          _0x1d299b = _0x2c552c(_0x2a4373, 35632, _0x588a2b);
          _0x2a4373.attachShader(_0x132ba1, _0x40aac4);
          _0x2a4373.attachShader(_0x132ba1, _0x1d299b);
          if (_0x36eb61.index0AttributeName !== undefined) {
            _0x2a4373.bindAttribLocation(_0x132ba1, 0, _0x36eb61.index0AttributeName);
          } else if (_0x36eb61.morphTargets === true) {
            _0x2a4373.bindAttribLocation(_0x132ba1, 0, "position");
          }
          _0x2a4373.linkProgram(_0x132ba1);
          if (_0x529a80.debug.checkShaderErrors) {
            _0x2ba30b = _0x2a4373.getProgramInfoLog(_0x132ba1).trim();
            _0x588a2b = _0x2a4373.getShaderInfoLog(_0x40aac4).trim();
            _0x529a80 = _0x2a4373.getShaderInfoLog(_0x1d299b).trim();
            let _0xaa91c2 = true;
            let _0x11f5d4 = true;
            if (_0x2a4373.getProgramParameter(_0x132ba1, 35714) === false) {
              _0xaa91c2 = false;
              _0x45b381(_0x2a4373, _0x40aac4, "vertex");
              _0x45b381(_0x2a4373, _0x1d299b, "fragment");
            } else if (!(_0x2ba30b !== "" || _0x588a2b !== "" && _0x529a80 !== "")) {
              _0x11f5d4 = false;
            }
            if (_0x11f5d4) {
              this.diagnostics = {
                runnable: _0xaa91c2,
                programLog: _0x2ba30b,
                vertexShader: {
                  log: _0x588a2b,
                  prefix: _0x5605d3
                },
                fragmentShader: {
                  log: _0x529a80,
                  prefix: _0x459b8c
                }
              };
            }
          }
          let _0x2ca1f3;
          let _0x523cec;
          _0x2a4373.deleteShader(_0x40aac4);
          _0x2a4373.deleteShader(_0x1d299b);
          this.getUniforms = function () {
            if (_0x2ca1f3 === undefined) {
              _0x2ca1f3 = new _0x381ca9(_0x2a4373, _0x132ba1);
            }
            return _0x2ca1f3;
          };
          this.getAttributes = function () {
            if (_0x523cec === undefined) {
              _0x523cec = function (_0x2072bb, _0x4d74d5) {
                const _0xea2c53 = {};
                var _0x1f2f48 = _0x2072bb.getProgramParameter(_0x4d74d5, 35721);
                for (let _0xa93189 = 0; _0xa93189 < _0x1f2f48; _0xa93189++) {
                  var _0x595f5a = _0x2072bb.getActiveAttrib(_0x4d74d5, _0xa93189);
                  var _0x5246ee = _0x595f5a.name;
                  var _0x2398af = 5;
                  let _0xf15bf1 = 1;
                  _0x2398af = "mlee";
                  if (_0x595f5a.type === 35674) {
                    _0xf15bf1 = 2;
                  }
                  if (_0x595f5a.type === 35675) {
                    _0xf15bf1 = 3;
                  }
                  if (_0x595f5a.type === 35676) {
                    _0xf15bf1 = 4;
                  }
                  _0xea2c53[_0x5246ee] = {
                    type: _0x595f5a.type,
                    location: _0x2072bb.getAttribLocation(_0x4d74d5, _0x5246ee),
                    locationSize: _0xf15bf1
                  };
                }
                return _0xea2c53;
              }(_0x2a4373, _0x132ba1);
            }
            return _0x523cec;
          };
          this.destroy = function () {
            _0x137c87.releaseStatesOfProgram(this);
            _0x2a4373.deleteProgram(_0x132ba1);
            this.program = undefined;
          };
          this.name = _0x36eb61.shaderName;
          this.id = _0x121aa4++;
          this.cacheKey = _0x4372d7;
          this.usedTimes = 1;
          this.program = _0x132ba1;
          this.vertexShader = _0x40aac4;
          this.fragmentShader = _0x1d299b;
          return this;
        }
        let _0xc5becd = 0;
        class _0x1ccdfc {
          constructor() {
            this.shaderCache = new Map();
            this.materialCache = new Map();
          }
          update(_0x46c3fb) {
            var _0x28d82f = _0x46c3fb.vertexShader;
            var _0x39e36e = _0x46c3fb.fragmentShader;
            const _0x1199a0 = this._getShaderStage(_0x28d82f);
            const _0x155749 = this._getShaderStage(_0x39e36e);
            const _0x171035 = this._getShaderCacheForMaterial(_0x46c3fb);
            if (_0x171035.has(_0x1199a0) === false) {
              _0x171035.add(_0x1199a0);
              _0x1199a0.usedTimes++;
            }
            if (_0x171035.has(_0x155749) === false) {
              _0x171035.add(_0x155749);
              _0x155749.usedTimes++;
            }
            return this;
          }
          remove(_0x338aa9) {
            for (const _0x2ea11c of this.materialCache.get(_0x338aa9)) {
              _0x2ea11c.usedTimes--;
              if (_0x2ea11c.usedTimes === 0) {
                this.shaderCache.delete(_0x2ea11c);
              }
            }
            this.materialCache.delete(_0x338aa9);
            return this;
          }
          getVertexShaderID(_0x364dc8) {
            return this._getShaderStage(_0x364dc8.vertexShader).id;
          }
          getFragmentShaderID(_0x1a13e5) {
            return this._getShaderStage(_0x1a13e5.fragmentShader).id;
          }
          dispose() {
            this.shaderCache.clear();
            this.materialCache.clear();
          }
          _getShaderCacheForMaterial(_0x3950c9) {
            const _0x2fd813 = this.materialCache;
            if (_0x2fd813.has(_0x3950c9) === false) {
              _0x2fd813.set(_0x3950c9, new Set());
            }
            return _0x2fd813.get(_0x3950c9);
          }
          _getShaderStage(_0x8bdef3) {
            var _0x135c5c = 12;
            const _0x533870 = this.shaderCache;
            _0x135c5c = 7;
            var _0x16b98f;
            if (_0x533870.has(_0x8bdef3) === false) {
              _0x16b98f = new _0x59e215();
              _0x533870.set(_0x8bdef3, _0x16b98f);
            }
            return _0x533870.get(_0x8bdef3);
          }
        }
        class _0x59e215 {
          constructor() {
            this.id = _0xc5becd++;
            this.usedTimes = 0;
          }
        }
        function _0x33fe06(_0x4c5a4e, _0x29a34f, _0x24e4ea, _0x525049, _0x252d2b, _0x360ecd, _0x461570) {
          const _0x2c8e66 = new _0x10d507();
          const _0x1a7a28 = new _0x1ccdfc();
          const _0x4f62c8 = [];
          const _0x4101da = _0x252d2b.isWebGL2;
          const _0xcfb808 = _0x252d2b.logarithmicDepthBuffer;
          const _0x28be1b = _0x252d2b.floatVertexTextures;
          const _0x5847e8 = _0x252d2b.maxVertexUniforms;
          const _0x512331 = _0x252d2b.vertexTextures;
          let _0x4d0ca = _0x252d2b.precision;
          const _0xcfd2de = {
            MeshDepthMaterial: "depth",
            MeshDistanceMaterial: "distanceRGBA",
            MeshNormalMaterial: "normal",
            MeshBasicMaterial: "basic",
            MeshLambertMaterial: "lambert",
            MeshPhongMaterial: "phong",
            MeshToonMaterial: "toon",
            MeshStandardMaterial: "physical",
            MeshPhysicalMaterial: "physical",
            MeshMatcapMaterial: "matcap",
            LineBasicMaterial: "basic",
            LineDashedMaterial: "dashed",
            PointsMaterial: "points",
            ShadowMaterial: "shadow",
            SpriteMaterial: "sprite"
          };
          function _0x2b475d(_0x17e585) {
            let _0x640399;
            _0x640399 = _0x17e585 && _0x17e585.isTexture ? _0x17e585.encoding : _0x17e585 && _0x17e585.isWebGLRenderTarget ? _0x17e585.texture.encoding : _0xca2f2a;
            if (_0x4101da && _0x17e585 && _0x17e585.isTexture && _0x17e585.format === _0x4f87e5 && _0x17e585.type === _0x3a53e9 && _0x17e585.encoding === _0x320ef1) {
              _0x640399 = _0xca2f2a;
            }
            return _0x640399;
          }
          return {
            getParameters: function (_0x4a579d, _0x2eda3c, _0x1beba5, _0x11aaf0, _0x3acd50) {
              var _0x3686fd = _0x11aaf0.fog;
              var _0x1a3a1e = _0x4a579d.isMeshStandardMaterial ? _0x11aaf0.environment : null;
              var _0x584c37 = (_0x4a579d.isMeshStandardMaterial ? _0x24e4ea : _0x29a34f).get(_0x4a579d.envMap || _0x1a3a1e);
              _0x11aaf0 = _0xcfd2de[_0x4a579d.type];
              _0x1a3a1e = _0x3acd50.isSkinnedMesh ? (_0x544452 = (_0x3893b7 = _0x3acd50).skeleton.bones, _0x28be1b ? 1024 : (_0x3893b7 = _0x5847e8, _0x3893b7 = Math.floor((_0x3893b7 - 20) / 4), (_0x3893b7 = Math.min(_0x3893b7, _0x544452.length)) < _0x544452.length ? 0 : _0x3893b7)) : 0;
              let _0xe8de88;
              let _0x1c6cde;
              let _0x3de5fc;
              let _0x5a7653;
              if (_0x4a579d.precision !== null) {
                _0x4d0ca = _0x252d2b.getMaxPrecision(_0x4a579d.precision);
                _0x4a579d.precision;
              }
              if (_0x11aaf0) {
                _0xe8de88 = (_0x9995c9 = _0x3543c2[_0x11aaf0]).vertexShader;
                _0x1c6cde = _0x9995c9.fragmentShader;
              } else {
                _0xe8de88 = _0x4a579d.vertexShader;
                _0x1c6cde = _0x4a579d.fragmentShader;
                _0x1a7a28.update(_0x4a579d);
                _0x3de5fc = _0x1a7a28.getVertexShaderID(_0x4a579d);
                _0x5a7653 = _0x1a7a28.getFragmentShaderID(_0x4a579d);
              }
              var _0x544452 = _0x4c5a4e.getRenderTarget();
              var _0x3893b7 = _0x4a579d.alphaTest > 0;
              var _0x9995c9 = _0x4a579d.clearcoat > 0;
              return {
                isWebGL2: _0x4101da,
                shaderID: _0x11aaf0,
                shaderName: _0x4a579d.type,
                vertexShader: _0xe8de88,
                fragmentShader: _0x1c6cde,
                defines: _0x4a579d.defines,
                customVertexShaderID: _0x3de5fc,
                customFragmentShaderID: _0x5a7653,
                isRawShaderMaterial: _0x4a579d.isRawShaderMaterial === true,
                glslVersion: _0x4a579d.glslVersion,
                precision: _0x4d0ca,
                instancing: _0x3acd50.isInstancedMesh === true,
                instancingColor: _0x3acd50.isInstancedMesh === true && _0x3acd50.instanceColor !== null,
                supportsVertexTextures: _0x512331,
                outputEncoding: _0x544452 !== null ? _0x2b475d(_0x544452.texture) : _0x4c5a4e.outputEncoding,
                map: !!_0x4a579d.map,
                mapEncoding: _0x2b475d(_0x4a579d.map),
                matcap: !!_0x4a579d.matcap,
                matcapEncoding: _0x2b475d(_0x4a579d.matcap),
                envMap: !!_0x584c37,
                envMapMode: _0x584c37 && _0x584c37.mapping,
                envMapEncoding: _0x2b475d(_0x584c37),
                envMapCubeUV: !!_0x584c37 && (_0x584c37.mapping === _0x41f85a || _0x584c37.mapping === _0x14f15e),
                lightMap: !!_0x4a579d.lightMap,
                lightMapEncoding: _0x2b475d(_0x4a579d.lightMap),
                aoMap: !!_0x4a579d.aoMap,
                emissiveMap: !!_0x4a579d.emissiveMap,
                emissiveMapEncoding: _0x2b475d(_0x4a579d.emissiveMap),
                bumpMap: !!_0x4a579d.bumpMap,
                normalMap: !!_0x4a579d.normalMap,
                objectSpaceNormalMap: _0x4a579d.normalMapType === _0x3f0274,
                tangentSpaceNormalMap: _0x4a579d.normalMapType === _0x360692,
                clearcoat: _0x9995c9,
                clearcoatMap: _0x9995c9 && !!_0x4a579d.clearcoatMap,
                clearcoatRoughnessMap: _0x9995c9 && !!_0x4a579d.clearcoatRoughnessMap,
                clearcoatNormalMap: _0x9995c9 && !!_0x4a579d.clearcoatNormalMap,
                displacementMap: !!_0x4a579d.displacementMap,
                roughnessMap: !!_0x4a579d.roughnessMap,
                metalnessMap: !!_0x4a579d.metalnessMap,
                specularMap: !!_0x4a579d.specularMap,
                specularIntensityMap: !!_0x4a579d.specularIntensityMap,
                specularColorMap: !!_0x4a579d.specularColorMap,
                specularColorMapEncoding: _0x2b475d(_0x4a579d.specularColorMap),
                alphaMap: !!_0x4a579d.alphaMap,
                alphaTest: _0x3893b7,
                gradientMap: !!_0x4a579d.gradientMap,
                sheen: _0x4a579d.sheen > 0,
                sheenColorMap: !!_0x4a579d.sheenColorMap,
                sheenColorMapEncoding: _0x2b475d(_0x4a579d.sheenColorMap),
                sheenRoughnessMap: !!_0x4a579d.sheenRoughnessMap,
                transmission: _0x4a579d.transmission > 0,
                transmissionMap: !!_0x4a579d.transmissionMap,
                thicknessMap: !!_0x4a579d.thicknessMap,
                combine: _0x4a579d.combine,
                vertexTangents: !!_0x4a579d.normalMap && !!_0x3acd50.geometry && !!_0x3acd50.geometry.attributes.tangent,
                vertexColors: _0x4a579d.vertexColors,
                vertexAlphas: _0x4a579d.vertexColors === true && !!_0x3acd50.geometry && !!_0x3acd50.geometry.attributes.color && _0x3acd50.geometry.attributes.color.itemSize === 4,
                vertexUvs: !!(_0x4a579d.map || _0x4a579d.bumpMap || _0x4a579d.normalMap || _0x4a579d.specularMap || _0x4a579d.alphaMap || _0x4a579d.emissiveMap || _0x4a579d.roughnessMap || _0x4a579d.metalnessMap || _0x4a579d.clearcoatMap || _0x4a579d.clearcoatRoughnessMap || _0x4a579d.clearcoatNormalMap || _0x4a579d.displacementMap || _0x4a579d.transmissionMap || _0x4a579d.thicknessMap || _0x4a579d.specularIntensityMap || _0x4a579d.specularColorMap || _0x4a579d.sheenColorMap || _0x4a579d.sheenRoughnessMap),
                uvsVertexOnly: !(_0x4a579d.map || _0x4a579d.bumpMap || _0x4a579d.normalMap || _0x4a579d.specularMap || _0x4a579d.alphaMap || _0x4a579d.emissiveMap || _0x4a579d.roughnessMap || _0x4a579d.metalnessMap || _0x4a579d.clearcoatNormalMap || _0x4a579d.transmission > 0 || _0x4a579d.transmissionMap || _0x4a579d.thicknessMap || _0x4a579d.specularIntensityMap || _0x4a579d.specularColorMap || _0x4a579d.sheen > 0 || _0x4a579d.sheenColorMap || _0x4a579d.sheenRoughnessMap || !_0x4a579d.displacementMap),
                fog: !!_0x3686fd,
                useFog: _0x4a579d.fog,
                fogExp2: _0x3686fd && _0x3686fd.isFogExp2,
                flatShading: !!_0x4a579d.flatShading,
                sizeAttenuation: _0x4a579d.sizeAttenuation,
                logarithmicDepthBuffer: _0xcfb808,
                skinning: _0x3acd50.isSkinnedMesh === true && _0x1a3a1e > 0,
                maxBones: _0x1a3a1e,
                useVertexTexture: _0x28be1b,
                morphTargets: !!_0x3acd50.geometry && !!_0x3acd50.geometry.morphAttributes.position,
                morphNormals: !!_0x3acd50.geometry && !!_0x3acd50.geometry.morphAttributes.normal,
                morphTargetsCount: _0x3acd50.geometry && _0x3acd50.geometry.morphAttributes.position ? _0x3acd50.geometry.morphAttributes.position.length : 0,
                numDirLights: _0x2eda3c.directional.length,
                numPointLights: _0x2eda3c.point.length,
                numSpotLights: _0x2eda3c.spot.length,
                numRectAreaLights: _0x2eda3c.rectArea.length,
                numHemiLights: _0x2eda3c.hemi.length,
                numDirLightShadows: _0x2eda3c.directionalShadowMap.length,
                numPointLightShadows: _0x2eda3c.pointShadowMap.length,
                numSpotLightShadows: _0x2eda3c.spotShadowMap.length,
                numClippingPlanes: _0x461570.numPlanes,
                numClipIntersection: _0x461570.numIntersection,
                format: _0x4a579d.format,
                dithering: _0x4a579d.dithering,
                shadowMapEnabled: _0x4c5a4e.shadowMap.enabled && _0x1beba5.length > 0,
                shadowMapType: _0x4c5a4e.shadowMap.type,
                toneMapping: _0x4a579d.toneMapped ? _0x4c5a4e.toneMapping : _0x510390,
                physicallyCorrectLights: _0x4c5a4e.physicallyCorrectLights,
                premultipliedAlpha: _0x4a579d.premultipliedAlpha,
                doubleSided: _0x4a579d.side === _0x250b44,
                flipSided: _0x4a579d.side === _0x460782,
                depthPacking: _0x4a579d.depthPacking !== undefined && _0x4a579d.depthPacking,
                index0AttributeName: _0x4a579d.index0AttributeName,
                extensionDerivatives: _0x4a579d.extensions && _0x4a579d.extensions.derivatives,
                extensionFragDepth: _0x4a579d.extensions && _0x4a579d.extensions.fragDepth,
                extensionDrawBuffers: _0x4a579d.extensions && _0x4a579d.extensions.drawBuffers,
                extensionShaderTextureLOD: _0x4a579d.extensions && _0x4a579d.extensions.shaderTextureLOD,
                rendererExtensionFragDepth: _0x4101da || _0x525049.has("EXT_frag_depth"),
                rendererExtensionDrawBuffers: _0x4101da || _0x525049.has("WEBGL_draw_buffers"),
                rendererExtensionShaderTextureLod: _0x4101da || _0x525049.has("EXT_shader_texture_lod"),
                customProgramCacheKey: _0x4a579d.customProgramCacheKey()
              };
            },
            getProgramCacheKey: function (_0xdef987) {
              const _0x13b445 = [];
              if (_0xdef987.shaderID) {
                _0x13b445.push(_0xdef987.shaderID);
              } else {
                _0x13b445.push(_0xdef987.customVertexShaderID);
                _0x13b445.push(_0xdef987.customFragmentShaderID);
              }
              if (_0xdef987.defines !== undefined) {
                for (const _0x29a005 in _0xdef987.defines) {
                  _0x13b445.push(_0x29a005);
                  _0x13b445.push(_0xdef987.defines[_0x29a005]);
                }
              }
              var _0x1b29e8;
              var _0x7e5952;
              if (_0xdef987.isRawShaderMaterial === false) {
                _0x7e5952 = _0xdef987;
                (_0x1b29e8 = _0x13b445).push(_0x7e5952.precision);
                _0x1b29e8.push(_0x7e5952.outputEncoding);
                _0x1b29e8.push(_0x7e5952.mapEncoding);
                _0x1b29e8.push(_0x7e5952.matcapEncoding);
                _0x1b29e8.push(_0x7e5952.envMapMode);
                _0x1b29e8.push(_0x7e5952.envMapEncoding);
                _0x1b29e8.push(_0x7e5952.lightMapEncoding);
                _0x1b29e8.push(_0x7e5952.emissiveMapEncoding);
                _0x1b29e8.push(_0x7e5952.combine);
                _0x1b29e8.push(_0x7e5952.vertexUvs);
                _0x1b29e8.push(_0x7e5952.fogExp2);
                _0x1b29e8.push(_0x7e5952.sizeAttenuation);
                _0x1b29e8.push(_0x7e5952.maxBones);
                _0x1b29e8.push(_0x7e5952.morphTargetsCount);
                _0x1b29e8.push(_0x7e5952.numDirLights);
                _0x1b29e8.push(_0x7e5952.numPointLights);
                _0x1b29e8.push(_0x7e5952.numSpotLights);
                _0x1b29e8.push(_0x7e5952.numHemiLights);
                _0x1b29e8.push(_0x7e5952.numRectAreaLights);
                _0x1b29e8.push(_0x7e5952.numDirLightShadows);
                _0x1b29e8.push(_0x7e5952.numPointLightShadows);
                _0x1b29e8.push(_0x7e5952.numSpotLightShadows);
                _0x1b29e8.push(_0x7e5952.shadowMapType);
                _0x1b29e8.push(_0x7e5952.toneMapping);
                _0x1b29e8.push(_0x7e5952.numClippingPlanes);
                _0x1b29e8.push(_0x7e5952.numClipIntersection);
                _0x1b29e8.push(_0x7e5952.format);
                _0x1b29e8.push(_0x7e5952.specularColorMapEncoding);
                _0x1b29e8.push(_0x7e5952.sheenColorMapEncoding);
                (function (_0x2ba8d7, _0x3a4483) {
                  _0x2c8e66.disableAll();
                  if (_0x3a4483.isWebGL2) {
                    _0x2c8e66.enable(0);
                  }
                  if (_0x3a4483.supportsVertexTextures) {
                    _0x2c8e66.enable(1);
                  }
                  if (_0x3a4483.instancing) {
                    _0x2c8e66.enable(2);
                  }
                  if (_0x3a4483.instancingColor) {
                    _0x2c8e66.enable(3);
                  }
                  if (_0x3a4483.map) {
                    _0x2c8e66.enable(4);
                  }
                  if (_0x3a4483.matcap) {
                    _0x2c8e66.enable(5);
                  }
                  if (_0x3a4483.envMap) {
                    _0x2c8e66.enable(6);
                  }
                  if (_0x3a4483.envMapCubeUV) {
                    _0x2c8e66.enable(7);
                  }
                  if (_0x3a4483.lightMap) {
                    _0x2c8e66.enable(8);
                  }
                  if (_0x3a4483.aoMap) {
                    _0x2c8e66.enable(9);
                  }
                  if (_0x3a4483.emissiveMap) {
                    _0x2c8e66.enable(10);
                  }
                  if (_0x3a4483.bumpMap) {
                    _0x2c8e66.enable(11);
                  }
                  if (_0x3a4483.normalMap) {
                    _0x2c8e66.enable(12);
                  }
                  if (_0x3a4483.objectSpaceNormalMap) {
                    _0x2c8e66.enable(13);
                  }
                  if (_0x3a4483.tangentSpaceNormalMap) {
                    _0x2c8e66.enable(14);
                  }
                  if (_0x3a4483.clearcoat) {
                    _0x2c8e66.enable(15);
                  }
                  if (_0x3a4483.clearcoatMap) {
                    _0x2c8e66.enable(16);
                  }
                  if (_0x3a4483.clearcoatRoughnessMap) {
                    _0x2c8e66.enable(17);
                  }
                  if (_0x3a4483.clearcoatNormalMap) {
                    _0x2c8e66.enable(18);
                  }
                  if (_0x3a4483.displacementMap) {
                    _0x2c8e66.enable(19);
                  }
                  if (_0x3a4483.specularMap) {
                    _0x2c8e66.enable(20);
                  }
                  if (_0x3a4483.roughnessMap) {
                    _0x2c8e66.enable(21);
                  }
                  if (_0x3a4483.metalnessMap) {
                    _0x2c8e66.enable(22);
                  }
                  if (_0x3a4483.gradientMap) {
                    _0x2c8e66.enable(23);
                  }
                  if (_0x3a4483.alphaMap) {
                    _0x2c8e66.enable(24);
                  }
                  if (_0x3a4483.alphaTest) {
                    _0x2c8e66.enable(25);
                  }
                  if (_0x3a4483.vertexColors) {
                    _0x2c8e66.enable(26);
                  }
                  if (_0x3a4483.vertexAlphas) {
                    _0x2c8e66.enable(27);
                  }
                  if (_0x3a4483.vertexUvs) {
                    _0x2c8e66.enable(28);
                  }
                  if (_0x3a4483.vertexTangents) {
                    _0x2c8e66.enable(29);
                  }
                  if (_0x3a4483.uvsVertexOnly) {
                    _0x2c8e66.enable(30);
                  }
                  if (_0x3a4483.fog) {
                    _0x2c8e66.enable(31);
                  }
                  _0x2ba8d7.push(_0x2c8e66.mask);
                  _0x2c8e66.disableAll();
                  if (_0x3a4483.useFog) {
                    _0x2c8e66.enable(0);
                  }
                  if (_0x3a4483.flatShading) {
                    _0x2c8e66.enable(1);
                  }
                  if (_0x3a4483.logarithmicDepthBuffer) {
                    _0x2c8e66.enable(2);
                  }
                  if (_0x3a4483.skinning) {
                    _0x2c8e66.enable(3);
                  }
                  if (_0x3a4483.useVertexTexture) {
                    _0x2c8e66.enable(4);
                  }
                  if (_0x3a4483.morphTargets) {
                    _0x2c8e66.enable(5);
                  }
                  if (_0x3a4483.morphNormals) {
                    _0x2c8e66.enable(6);
                  }
                  if (_0x3a4483.premultipliedAlpha) {
                    _0x2c8e66.enable(7);
                  }
                  if (_0x3a4483.shadowMapEnabled) {
                    _0x2c8e66.enable(8);
                  }
                  if (_0x3a4483.physicallyCorrectLights) {
                    _0x2c8e66.enable(9);
                  }
                  if (_0x3a4483.doubleSided) {
                    _0x2c8e66.enable(10);
                  }
                  if (_0x3a4483.flipSided) {
                    _0x2c8e66.enable(11);
                  }
                  if (_0x3a4483.depthPacking) {
                    _0x2c8e66.enable(12);
                  }
                  if (_0x3a4483.dithering) {
                    _0x2c8e66.enable(13);
                  }
                  if (_0x3a4483.specularIntensityMap) {
                    _0x2c8e66.enable(14);
                  }
                  if (_0x3a4483.specularColorMap) {
                    _0x2c8e66.enable(15);
                  }
                  if (_0x3a4483.transmission) {
                    _0x2c8e66.enable(16);
                  }
                  if (_0x3a4483.transmissionMap) {
                    _0x2c8e66.enable(17);
                  }
                  if (_0x3a4483.thicknessMap) {
                    _0x2c8e66.enable(18);
                  }
                  if (_0x3a4483.sheen) {
                    _0x2c8e66.enable(19);
                  }
                  if (_0x3a4483.sheenColorMap) {
                    _0x2c8e66.enable(20);
                  }
                  if (_0x3a4483.sheenRoughnessMap) {
                    _0x2c8e66.enable(21);
                  }
                  _0x2ba8d7.push(_0x2c8e66.mask);
                })(_0x13b445, _0xdef987);
                _0x13b445.push(_0x4c5a4e.outputEncoding);
              }
              _0x13b445.push(_0xdef987.customProgramCacheKey);
              return _0x13b445.join();
            },
            getUniforms: function (_0x5ba526) {
              var _0x2d9cda = _0xcfd2de[_0x5ba526.type];
              var _0x29cdec;
              let _0x35d1af;
              _0x29cdec = "kocn";
              _0x35d1af = _0x2d9cda ? (_0x2d9cda = _0x3543c2[_0x2d9cda], _0x491e76.clone(_0x2d9cda.uniforms)) : _0x5ba526.uniforms;
              return _0x35d1af;
            },
            acquireProgram: function (_0x4f5052, _0x2173e1) {
              let _0x3c9f5b;
              for (let _0x4d7f00 = 0, _0x44e950 = _0x4f62c8.length; _0x4d7f00 < _0x44e950; _0x4d7f00++) {
                var _0x1f4c14;
                var _0x3bb7a4 = _0x4f62c8[_0x4d7f00];
                _0x1f4c14 = 5;
                if (_0x3bb7a4.cacheKey === _0x2173e1) {
                  _0x3c9f5b = _0x3bb7a4;
                  ++_0x3c9f5b.usedTimes;
                  break;
                }
              }
              if (_0x3c9f5b === undefined) {
                _0x3c9f5b = new _0x5a0014(_0x4c5a4e, _0x2173e1, _0x4f5052, _0x360ecd);
                _0x4f62c8.push(_0x3c9f5b);
              }
              return _0x3c9f5b;
            },
            releaseProgram: function (_0x563c55) {
              var _0x9a41b3;
              var _0x709ed6;
              _0x9a41b3 = "hmhq";
              if (--_0x563c55.usedTimes == 0) {
                _0x709ed6 = _0x4f62c8.indexOf(_0x563c55);
                _0x4f62c8[_0x709ed6] = _0x4f62c8[_0x4f62c8.length - 1];
                _0x4f62c8.pop();
                _0x563c55.destroy();
              }
            },
            releaseShaderCache: function (_0x2d543c) {
              _0x1a7a28.remove(_0x2d543c);
            },
            programs: _0x4f62c8,
            dispose: function () {
              _0x1a7a28.dispose();
            }
          };
        }
        function _0x5e74ff() {
          var _0x4f35e7 = 9;
          let _0x2cd5a5 = new WeakMap();
          _0x4f35e7 = 5;
          return {
            get: function (_0x4b4b49) {
              let _0x20c388 = _0x2cd5a5.get(_0x4b4b49);
              if (_0x20c388 === undefined) {
                _0x20c388 = {};
                _0x2cd5a5.set(_0x4b4b49, _0x20c388);
              }
              return _0x20c388;
            },
            remove: function (_0x44ac5e) {
              _0x2cd5a5.delete(_0x44ac5e);
            },
            update: function (_0xd65ba, _0x27b2ee, _0x1cd32c) {
              _0x2cd5a5.get(_0xd65ba)[_0x27b2ee] = _0x1cd32c;
            },
            dispose: function () {
              _0x2cd5a5 = new WeakMap();
            }
          };
        }
        function _0xbf3994(_0x5de9d1, _0x2beea4) {
          if (_0x5de9d1.groupOrder !== _0x2beea4.groupOrder) {
            return _0x5de9d1.groupOrder - _0x2beea4.groupOrder;
          } else if (_0x5de9d1.renderOrder !== _0x2beea4.renderOrder) {
            return _0x5de9d1.renderOrder - _0x2beea4.renderOrder;
          } else if (_0x5de9d1.material.id !== _0x2beea4.material.id) {
            return _0x5de9d1.material.id - _0x2beea4.material.id;
          } else if (_0x5de9d1.z !== _0x2beea4.z) {
            return _0x5de9d1.z - _0x2beea4.z;
          } else {
            return _0x5de9d1.id - _0x2beea4.id;
          }
        }
        function _0x45e1b1(_0x478b24, _0x3c7287) {
          if (_0x478b24.groupOrder !== _0x3c7287.groupOrder) {
            return _0x478b24.groupOrder - _0x3c7287.groupOrder;
          } else if (_0x478b24.renderOrder !== _0x3c7287.renderOrder) {
            return _0x478b24.renderOrder - _0x3c7287.renderOrder;
          } else if (_0x478b24.z !== _0x3c7287.z) {
            return _0x3c7287.z - _0x478b24.z;
          } else {
            return _0x478b24.id - _0x3c7287.id;
          }
        }
        function _0x302d86() {
          const _0x1a9d83 = [];
          var _0x173f9f = 2;
          let _0x21d958 = 0;
          _0x173f9f = 8;
          const _0x28146d = [];
          const _0x239616 = [];
          const _0x2b1d8f = [];
          function _0x499592(_0x52cab4, _0x347439, _0x49ad52, _0x26c4db, _0xf8feb0, _0x48fe8a) {
            let _0x5871f2 = _0x1a9d83[_0x21d958];
            if (_0x5871f2 === undefined) {
              _0x5871f2 = {
                id: _0x52cab4.id,
                object: _0x52cab4,
                geometry: _0x347439,
                material: _0x49ad52,
                groupOrder: _0x26c4db,
                renderOrder: _0x52cab4.renderOrder,
                z: _0xf8feb0,
                group: _0x48fe8a
              };
              _0x1a9d83[_0x21d958] = _0x5871f2;
            } else {
              _0x5871f2.id = _0x52cab4.id;
              _0x5871f2.object = _0x52cab4;
              _0x5871f2.geometry = _0x347439;
              _0x5871f2.material = _0x49ad52;
              _0x5871f2.groupOrder = _0x26c4db;
              _0x5871f2.renderOrder = _0x52cab4.renderOrder;
              _0x5871f2.z = _0xf8feb0;
              _0x5871f2.group = _0x48fe8a;
            }
            _0x21d958++;
            return _0x5871f2;
          }
          return {
            opaque: _0x28146d,
            transmissive: _0x239616,
            transparent: _0x2b1d8f,
            init: function () {
              _0x21d958 = 0;
              _0x28146d.length = 0;
              _0x239616.length = 0;
              _0x2b1d8f.length = 0;
            },
            push: function (_0x149b05, _0x40e3ec, _0xeb6648, _0x338d28, _0x5bbac5, _0x4f076a) {
              _0x4f076a = _0x499592(_0x149b05, _0x40e3ec, _0xeb6648, _0x338d28, _0x5bbac5, _0x4f076a);
              (_0xeb6648.transmission > 0 ? _0x239616 : _0xeb6648.transparent === true ? _0x2b1d8f : _0x28146d).push(_0x4f076a);
            },
            unshift: function (_0x453393, _0x17b707, _0x3e0c27, _0x2e92d3, _0x1b2608, _0xb83151) {
              _0xb83151 = _0x499592(_0x453393, _0x17b707, _0x3e0c27, _0x2e92d3, _0x1b2608, _0xb83151);
              (_0x3e0c27.transmission > 0 ? _0x239616 : _0x3e0c27.transparent === true ? _0x2b1d8f : _0x28146d).unshift(_0xb83151);
            },
            finish: function () {
              for (let _0x50d41f = _0x21d958, _0x4260ed = _0x1a9d83.length; _0x50d41f < _0x4260ed; _0x50d41f++) {
                const _0xace6b = _0x1a9d83[_0x50d41f];
                if (_0xace6b.id === null) {
                  break;
                }
                _0xace6b.id = null;
                _0xace6b.object = null;
                _0xace6b.geometry = null;
                _0xace6b.material = null;
                _0xace6b.group = null;
              }
            },
            sort: function (_0x400f55, _0x2292bb) {
              if (_0x28146d.length > 1) {
                _0x28146d.sort(_0x400f55 || _0xbf3994);
              }
              if (_0x239616.length > 1) {
                _0x239616.sort(_0x2292bb || _0x45e1b1);
              }
              if (_0x2b1d8f.length > 1) {
                _0x2b1d8f.sort(_0x2292bb || _0x45e1b1);
              }
            }
          };
        }
        function _0x4331c9() {
          let _0xd01d67 = new WeakMap();
          return {
            get: function (_0x3d925a, _0x34de76) {
              let _0x2c6f2b;
              if (_0xd01d67.has(_0x3d925a) === false) {
                _0x2c6f2b = new _0x302d86();
                _0xd01d67.set(_0x3d925a, [_0x2c6f2b]);
              } else if (_0x34de76 >= _0xd01d67.get(_0x3d925a).length) {
                _0x2c6f2b = new _0x302d86();
                _0xd01d67.get(_0x3d925a).push(_0x2c6f2b);
              } else {
                _0x2c6f2b = _0xd01d67.get(_0x3d925a)[_0x34de76];
              }
              return _0x2c6f2b;
            },
            dispose: function () {
              _0xd01d67 = new WeakMap();
            }
          };
        }
        function _0x164d1c() {
          const _0x49940e = {};
          return {
            get: function (_0x57366b) {
              if (_0x49940e[_0x57366b.id] !== undefined) {
                return _0x49940e[_0x57366b.id];
              }
              let _0x4a51b1;
              switch (_0x57366b.type) {
                case "DirectionalLight":
                  _0x4a51b1 = {
                    direction: new _0x1d20ef(),
                    color: new _0x1282c2()
                  };
                  break;
                case "SpotLight":
                  _0x4a51b1 = {
                    position: new _0x1d20ef(),
                    direction: new _0x1d20ef(),
                    color: new _0x1282c2(),
                    distance: 0,
                    coneCos: 0,
                    penumbraCos: 0,
                    decay: 0
                  };
                  break;
                case "PointLight":
                  _0x4a51b1 = {
                    position: new _0x1d20ef(),
                    color: new _0x1282c2(),
                    distance: 0,
                    decay: 0
                  };
                  break;
                case "HemisphereLight":
                  _0x4a51b1 = {
                    direction: new _0x1d20ef(),
                    skyColor: new _0x1282c2(),
                    groundColor: new _0x1282c2()
                  };
                  break;
                case "RectAreaLight":
                  _0x4a51b1 = {
                    color: new _0x1282c2(),
                    position: new _0x1d20ef(),
                    halfWidth: new _0x1d20ef(),
                    halfHeight: new _0x1d20ef()
                  };
              }
              _0x49940e[_0x57366b.id] = _0x4a51b1;
              return _0x4a51b1;
            }
          };
        }
        let _0x2198cc = 0;
        function _0x4e00d2(_0x1c8df8, _0x3565e6) {
          return (_0x3565e6.castShadow ? 1 : 0) - (_0x1c8df8.castShadow ? 1 : 0);
        }
        function _0x360146(_0x4ec512, _0x5d7c04) {
          const _0x1795cc = new _0x164d1c();
          const _0x4e5dae = function () {
            const _0x54b6fe = {};
            return {
              get: function (_0xc4cc38) {
                if (_0x54b6fe[_0xc4cc38.id] !== undefined) {
                  return _0x54b6fe[_0xc4cc38.id];
                }
                var _0x30dff1 = 14;
                let _0x454283;
                _0x30dff1 = 9;
                switch (_0xc4cc38.type) {
                  case "DirectionalLight":
                  case "SpotLight":
                    _0x454283 = {
                      shadowBias: 0,
                      shadowNormalBias: 0,
                      shadowRadius: 1,
                      shadowMapSize: new _0x25f874()
                    };
                    break;
                  case "PointLight":
                    _0x454283 = {
                      shadowBias: 0,
                      shadowNormalBias: 0,
                      shadowRadius: 1,
                      shadowMapSize: new _0x25f874(),
                      shadowCameraNear: 1,
                      shadowCameraFar: 1000
                    };
                }
                _0x54b6fe[_0xc4cc38.id] = _0x454283;
                return _0x454283;
              }
            };
          }();
          const _0xc124a3 = {
            version: 0,
            hash: {
              directionalLength: -1,
              pointLength: -1,
              spotLength: -1,
              rectAreaLength: -1,
              hemiLength: -1,
              numDirectionalShadows: -1,
              numPointShadows: -1,
              numSpotShadows: -1
            },
            ambient: [0, 0, 0],
            probe: [],
            directional: [],
            directionalShadow: [],
            directionalShadowMap: [],
            directionalShadowMatrix: [],
            spot: [],
            spotShadow: [],
            spotShadowMap: [],
            spotShadowMatrix: [],
            rectArea: [],
            rectAreaLTC1: null,
            rectAreaLTC2: null,
            point: [],
            pointShadow: [],
            pointShadowMap: [],
            pointShadowMatrix: [],
            hemi: []
          };
          for (let _0x1810c4 = 0; _0x1810c4 < 9; _0x1810c4++) {
            _0xc124a3.probe.push(new _0x1d20ef());
          }
          const _0x3d1b25 = new _0x1d20ef();
          const _0x376473 = new _0x33b2c9();
          const _0x16a20a = new _0x33b2c9();
          return {
            setup: function (_0x15d086, _0x4adb4b) {
              let _0x5da322 = 0;
              let _0x27efd6 = 0;
              let _0x26c714 = 0;
              for (let _0x17e630 = 0; _0x17e630 < 9; _0x17e630++) {
                _0xc124a3.probe[_0x17e630].set(0, 0, 0);
              }
              let _0x32ac1b = 0;
              let _0x2f1fde = 0;
              let _0x28cbf6 = 0;
              let _0x5e4e24 = 0;
              let _0x52b98d = 0;
              let _0x29afd9 = 0;
              let _0x42a803 = 0;
              let _0xcee407 = 0;
              _0x15d086.sort(_0x4e00d2);
              var _0x5a4193 = _0x4adb4b !== true ? Math.PI : 1;
              for (let _0x8fd81b = 0, _0xec41a4 = _0x15d086.length; _0x8fd81b < _0xec41a4; _0x8fd81b++) {
                var _0x2a9f93 = _0x15d086[_0x8fd81b];
                var _0x56fa91 = _0x2a9f93.color;
                var _0x34e1fc = _0x2a9f93.intensity;
                var _0x1a8dce = _0x2a9f93.distance;
                var _0x53c034 = _0x2a9f93.shadow && _0x2a9f93.shadow.map ? _0x2a9f93.shadow.map.texture : null;
                if (_0x2a9f93.isAmbientLight) {
                  _0x5da322 += _0x56fa91.r * _0x34e1fc * _0x5a4193;
                  _0x27efd6 += _0x56fa91.g * _0x34e1fc * _0x5a4193;
                  _0x26c714 += _0x56fa91.b * _0x34e1fc * _0x5a4193;
                } else if (_0x2a9f93.isLightProbe) {
                  for (let _0x303742 = 0; _0x303742 < 9; _0x303742++) {
                    _0xc124a3.probe[_0x303742].addScaledVector(_0x2a9f93.sh.coefficients[_0x303742], _0x34e1fc);
                  }
                } else if (_0x2a9f93.isDirectionalLight) {
                  const _0x443fff = _0x1795cc.get(_0x2a9f93);
                  _0x443fff.color.copy(_0x2a9f93.color).multiplyScalar(_0x2a9f93.intensity * _0x5a4193);
                  if (_0x2a9f93.castShadow) {
                    var _0x1fd6af = _0x2a9f93.shadow;
                    var _0x2b81f4 = 7;
                    const _0x4b7138 = _0x4e5dae.get(_0x2a9f93);
                    _0x2b81f4 = 16;
                    _0x4b7138.shadowBias = _0x1fd6af.bias;
                    _0x4b7138.shadowNormalBias = _0x1fd6af.normalBias;
                    _0x4b7138.shadowRadius = _0x1fd6af.radius;
                    _0x4b7138.shadowMapSize = _0x1fd6af.mapSize;
                    _0xc124a3.directionalShadow[_0x32ac1b] = _0x4b7138;
                    _0xc124a3.directionalShadowMap[_0x32ac1b] = _0x53c034;
                    _0xc124a3.directionalShadowMatrix[_0x32ac1b] = _0x2a9f93.shadow.matrix;
                    _0x29afd9++;
                  }
                  _0xc124a3.directional[_0x32ac1b] = _0x443fff;
                  _0x32ac1b++;
                } else if (_0x2a9f93.isSpotLight) {
                  const _0x946af = _0x1795cc.get(_0x2a9f93);
                  _0x946af.position.setFromMatrixPosition(_0x2a9f93.matrixWorld);
                  _0x946af.color.copy(_0x56fa91).multiplyScalar(_0x34e1fc * _0x5a4193);
                  _0x946af.distance = _0x1a8dce;
                  _0x946af.coneCos = Math.cos(_0x2a9f93.angle);
                  _0x946af.penumbraCos = Math.cos(_0x2a9f93.angle * (1 - _0x2a9f93.penumbra));
                  _0x946af.decay = _0x2a9f93.decay;
                  if (_0x2a9f93.castShadow) {
                    _0x1a8dce = _0x2a9f93.shadow;
                    const _0x3279e6 = _0x4e5dae.get(_0x2a9f93);
                    _0x3279e6.shadowBias = _0x1a8dce.bias;
                    _0x3279e6.shadowNormalBias = _0x1a8dce.normalBias;
                    _0x3279e6.shadowRadius = _0x1a8dce.radius;
                    _0x3279e6.shadowMapSize = _0x1a8dce.mapSize;
                    _0xc124a3.spotShadow[_0x28cbf6] = _0x3279e6;
                    _0xc124a3.spotShadowMap[_0x28cbf6] = _0x53c034;
                    _0xc124a3.spotShadowMatrix[_0x28cbf6] = _0x2a9f93.shadow.matrix;
                    _0xcee407++;
                  }
                  _0xc124a3.spot[_0x28cbf6] = _0x946af;
                  _0x28cbf6++;
                } else if (_0x2a9f93.isRectAreaLight) {
                  var _0xe9ddf9 = 10;
                  const _0x224a28 = _0x1795cc.get(_0x2a9f93);
                  _0xe9ddf9 = 10;
                  _0x224a28.color.copy(_0x56fa91).multiplyScalar(_0x34e1fc);
                  _0x224a28.halfWidth.set(_0x2a9f93.width * 0.5, 0, 0);
                  _0x224a28.halfHeight.set(0, _0x2a9f93.height * 0.5, 0);
                  _0xc124a3.rectArea[_0x5e4e24] = _0x224a28;
                  _0x5e4e24++;
                } else if (_0x2a9f93.isPointLight) {
                  var _0x3eb42b = 6;
                  const _0x2b185b = _0x1795cc.get(_0x2a9f93);
                  _0x3eb42b = 2;
                  _0x2b185b.color.copy(_0x2a9f93.color).multiplyScalar(_0x2a9f93.intensity * _0x5a4193);
                  _0x2b185b.distance = _0x2a9f93.distance;
                  _0x2b185b.decay = _0x2a9f93.decay;
                  if (_0x2a9f93.castShadow) {
                    _0x56fa91 = _0x2a9f93.shadow;
                    const _0x35743d = _0x4e5dae.get(_0x2a9f93);
                    _0x35743d.shadowBias = _0x56fa91.bias;
                    _0x35743d.shadowNormalBias = _0x56fa91.normalBias;
                    _0x35743d.shadowRadius = _0x56fa91.radius;
                    _0x35743d.shadowMapSize = _0x56fa91.mapSize;
                    _0x35743d.shadowCameraNear = _0x56fa91.camera.near;
                    _0x35743d.shadowCameraFar = _0x56fa91.camera.far;
                    _0xc124a3.pointShadow[_0x2f1fde] = _0x35743d;
                    _0xc124a3.pointShadowMap[_0x2f1fde] = _0x53c034;
                    _0xc124a3.pointShadowMatrix[_0x2f1fde] = _0x2a9f93.shadow.matrix;
                    _0x42a803++;
                  }
                  _0xc124a3.point[_0x2f1fde] = _0x2b185b;
                  _0x2f1fde++;
                } else if (_0x2a9f93.isHemisphereLight) {
                  const _0x51af09 = _0x1795cc.get(_0x2a9f93);
                  _0x51af09.skyColor.copy(_0x2a9f93.color).multiplyScalar(_0x34e1fc * _0x5a4193);
                  _0x51af09.groundColor.copy(_0x2a9f93.groundColor).multiplyScalar(_0x34e1fc * _0x5a4193);
                  _0xc124a3.hemi[_0x52b98d] = _0x51af09;
                  _0x52b98d++;
                }
              }
              if (_0x5e4e24 > 0) {
                if (_0x5d7c04.isWebGL2 || _0x4ec512.has("OES_texture_float_linear") === true) {
                  _0xc124a3.rectAreaLTC1 = _0x2b5bcc.LTC_FLOAT_1;
                  _0xc124a3.rectAreaLTC2 = _0x2b5bcc.LTC_FLOAT_2;
                } else if (_0x4ec512.has("OES_texture_half_float_linear") === true) {
                  _0xc124a3.rectAreaLTC1 = _0x2b5bcc.LTC_HALF_1;
                  _0xc124a3.rectAreaLTC2 = _0x2b5bcc.LTC_HALF_2;
                }
              }
              _0xc124a3.ambient[0] = _0x5da322;
              _0xc124a3.ambient[1] = _0x27efd6;
              _0xc124a3.ambient[2] = _0x26c714;
              const _0x39a81f = _0xc124a3.hash;
              if (!(_0x39a81f.directionalLength === _0x32ac1b && _0x39a81f.pointLength === _0x2f1fde && _0x39a81f.spotLength === _0x28cbf6 && _0x39a81f.rectAreaLength === _0x5e4e24 && _0x39a81f.hemiLength === _0x52b98d && _0x39a81f.numDirectionalShadows === _0x29afd9 && _0x39a81f.numPointShadows === _0x42a803 && _0x39a81f.numSpotShadows === _0xcee407)) {
                _0xc124a3.directional.length = _0x32ac1b;
                _0xc124a3.spot.length = _0x28cbf6;
                _0xc124a3.rectArea.length = _0x5e4e24;
                _0xc124a3.point.length = _0x2f1fde;
                _0xc124a3.hemi.length = _0x52b98d;
                _0xc124a3.directionalShadow.length = _0x29afd9;
                _0xc124a3.directionalShadowMap.length = _0x29afd9;
                _0xc124a3.pointShadow.length = _0x42a803;
                _0xc124a3.pointShadowMap.length = _0x42a803;
                _0xc124a3.spotShadow.length = _0xcee407;
                _0xc124a3.spotShadowMap.length = _0xcee407;
                _0xc124a3.directionalShadowMatrix.length = _0x29afd9;
                _0xc124a3.pointShadowMatrix.length = _0x42a803;
                _0xc124a3.spotShadowMatrix.length = _0xcee407;
                _0x39a81f.directionalLength = _0x32ac1b;
                _0x39a81f.pointLength = _0x2f1fde;
                _0x39a81f.spotLength = _0x28cbf6;
                _0x39a81f.rectAreaLength = _0x5e4e24;
                _0x39a81f.hemiLength = _0x52b98d;
                _0x39a81f.numDirectionalShadows = _0x29afd9;
                _0x39a81f.numPointShadows = _0x42a803;
                _0x39a81f.numSpotShadows = _0xcee407;
                _0xc124a3.version = _0x2198cc++;
              }
            },
            setupView: function (_0x389814, _0x4c1588) {
              let _0x5b8571 = 0;
              let _0x248375 = 0;
              let _0x3cda3d = 0;
              let _0x2cf6b8 = 0;
              let _0x1dec26 = 0;
              var _0xefa6b6 = _0x4c1588.matrixWorldInverse;
              for (let _0x121ec8 = 0, _0x524d95 = _0x389814.length; _0x121ec8 < _0x524d95; _0x121ec8++) {
                var _0xa74529 = _0x389814[_0x121ec8];
                if (_0xa74529.isDirectionalLight) {
                  const _0x5c414e = _0xc124a3.directional[_0x5b8571];
                  _0x5c414e.direction.setFromMatrixPosition(_0xa74529.matrixWorld);
                  _0x3d1b25.setFromMatrixPosition(_0xa74529.target.matrixWorld);
                  _0x5c414e.direction.sub(_0x3d1b25);
                  _0x5c414e.direction.transformDirection(_0xefa6b6);
                  _0x5b8571++;
                } else if (_0xa74529.isSpotLight) {
                  const _0xf5f91e = _0xc124a3.spot[_0x3cda3d];
                  _0xf5f91e.position.setFromMatrixPosition(_0xa74529.matrixWorld);
                  _0xf5f91e.position.applyMatrix4(_0xefa6b6);
                  _0xf5f91e.direction.setFromMatrixPosition(_0xa74529.matrixWorld);
                  _0x3d1b25.setFromMatrixPosition(_0xa74529.target.matrixWorld);
                  _0xf5f91e.direction.sub(_0x3d1b25);
                  _0xf5f91e.direction.transformDirection(_0xefa6b6);
                  _0x3cda3d++;
                } else if (_0xa74529.isRectAreaLight) {
                  var _0x271477;
                  const _0x2118ab = _0xc124a3.rectArea[_0x2cf6b8];
                  _0x271477 = "eaql";
                  _0x2118ab.position.setFromMatrixPosition(_0xa74529.matrixWorld);
                  _0x2118ab.position.applyMatrix4(_0xefa6b6);
                  _0x16a20a.identity();
                  _0x376473.copy(_0xa74529.matrixWorld);
                  _0x376473.premultiply(_0xefa6b6);
                  _0x16a20a.extractRotation(_0x376473);
                  _0x2118ab.halfWidth.set(_0xa74529.width * 0.5, 0, 0);
                  _0x2118ab.halfHeight.set(0, _0xa74529.height * 0.5, 0);
                  _0x2118ab.halfWidth.applyMatrix4(_0x16a20a);
                  _0x2118ab.halfHeight.applyMatrix4(_0x16a20a);
                  _0x2cf6b8++;
                } else if (_0xa74529.isPointLight) {
                  const _0x3495a6 = _0xc124a3.point[_0x248375];
                  _0x3495a6.position.setFromMatrixPosition(_0xa74529.matrixWorld);
                  _0x3495a6.position.applyMatrix4(_0xefa6b6);
                  _0x248375++;
                } else if (_0xa74529.isHemisphereLight) {
                  var _0x4c83a5 = 11;
                  const _0x4cdb8b = _0xc124a3.hemi[_0x1dec26];
                  _0x4c83a5 = 3;
                  _0x4cdb8b.direction.setFromMatrixPosition(_0xa74529.matrixWorld);
                  _0x4cdb8b.direction.transformDirection(_0xefa6b6);
                  _0x4cdb8b.direction.normalize();
                  _0x1dec26++;
                }
              }
            },
            state: _0xc124a3
          };
        }
        function _0x56da6f(_0x314221, _0x118914) {
          const _0x1c169c = new _0x360146(_0x314221, _0x118914);
          const _0x4e43a6 = [];
          const _0x35aaea = [];
          return {
            init: function () {
              _0x4e43a6.length = 0;
              _0x35aaea.length = 0;
            },
            state: {
              lightsArray: _0x4e43a6,
              shadowsArray: _0x35aaea,
              lights: _0x1c169c
            },
            setupLights: function (_0x573d6e) {
              _0x1c169c.setup(_0x4e43a6, _0x573d6e);
            },
            setupLightsView: function (_0x17caaa) {
              _0x1c169c.setupView(_0x4e43a6, _0x17caaa);
            },
            pushLight: function (_0x1d4ed8) {
              _0x4e43a6.push(_0x1d4ed8);
            },
            pushShadow: function (_0x27721e) {
              _0x35aaea.push(_0x27721e);
            }
          };
        }
        function _0x3e303e(_0x5c4151, _0x508aae) {
          let _0xb52957 = new WeakMap();
          return {
            get: function (_0x1cd144, _0xed1c0d = 0) {
              let _0x2fc521;
              if (_0xb52957.has(_0x1cd144) === false) {
                _0x2fc521 = new _0x56da6f(_0x5c4151, _0x508aae);
                _0xb52957.set(_0x1cd144, [_0x2fc521]);
              } else if (_0xed1c0d >= _0xb52957.get(_0x1cd144).length) {
                _0x2fc521 = new _0x56da6f(_0x5c4151, _0x508aae);
                _0xb52957.get(_0x1cd144).push(_0x2fc521);
              } else {
                _0x2fc521 = _0xb52957.get(_0x1cd144)[_0xed1c0d];
              }
              return _0x2fc521;
            },
            dispose: function () {
              _0xb52957 = new WeakMap();
            }
          };
        }
        class _0x3b5e8b extends _0x2098dd {
          constructor(_0x28edd6) {
            super();
            this.type = "MeshDepthMaterial";
            this.depthPacking = _0x55ce27;
            this.map = null;
            this.alphaMap = null;
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.fog = false;
            this.setValues(_0x28edd6);
          }
          copy(_0x5ab97d) {
            super.copy(_0x5ab97d);
            this.depthPacking = _0x5ab97d.depthPacking;
            this.map = _0x5ab97d.map;
            this.alphaMap = _0x5ab97d.alphaMap;
            this.displacementMap = _0x5ab97d.displacementMap;
            this.displacementScale = _0x5ab97d.displacementScale;
            this.displacementBias = _0x5ab97d.displacementBias;
            this.wireframe = _0x5ab97d.wireframe;
            this.wireframeLinewidth = _0x5ab97d.wireframeLinewidth;
            return this;
          }
        }
        _0x3b5e8b.prototype.isMeshDepthMaterial = true;
        class _0x1b6045 extends _0x2098dd {
          constructor(_0x5448cd) {
            super();
            this.type = "MeshDistanceMaterial";
            this.referencePosition = new _0x1d20ef();
            this.nearDistance = 1;
            this.farDistance = 1000;
            this.map = null;
            this.alphaMap = null;
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.fog = false;
            this.setValues(_0x5448cd);
          }
          copy(_0x1ca140) {
            super.copy(_0x1ca140);
            this.referencePosition.copy(_0x1ca140.referencePosition);
            this.nearDistance = _0x1ca140.nearDistance;
            this.farDistance = _0x1ca140.farDistance;
            this.map = _0x1ca140.map;
            this.alphaMap = _0x1ca140.alphaMap;
            this.displacementMap = _0x1ca140.displacementMap;
            this.displacementScale = _0x1ca140.displacementScale;
            this.displacementBias = _0x1ca140.displacementBias;
            return this;
          }
        }
        _0x1b6045.prototype.isMeshDistanceMaterial = true;
        function _0x1eaba7(_0xe91abd, _0x13a3f8, _0x455d49) {
          let _0x294c19 = new _0x1d3bc5();
          const _0x335ccf = new _0x25f874();
          const _0x1afc03 = new _0x25f874();
          const _0x33c5c1 = new _0x275701();
          const _0x25f5ea = new _0x3b5e8b({
            depthPacking: _0x5c286f
          });
          const _0x4bfbd4 = new _0x1b6045();
          const _0x106c25 = {};
          const _0x231178 = _0x455d49.maxTextureSize;
          const _0x59e28e = {
            0: _0x460782,
            1: _0xe70805,
            2: _0x250b44
          };
          const _0x474400 = new _0x18cc6b({
            defines: {
              VSM_SAMPLES: 8
            },
            uniforms: {
              shadow_pass: {
                value: null
              },
              resolution: {
                value: new _0x25f874()
              },
              radius: {
                value: 4
              }
            },
            vertexShader: `void main() {
  \tgl_Position = vec4( position, 1.0 );
  }`,
            fragmentShader: `uniform sampler2D shadow_pass;
  uniform vec2 resolution;
  uniform float radius;
  #include <packing>
  void main() {
  \tconst float samples = float( VSM_SAMPLES );
  \tfloat mean = 0.0;
  \tfloat squared_mean = 0.0;
  \tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
  \tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;
  \tfor ( float i = 0.0; i < samples; i ++ ) {
  \t\tfloat uvOffset = uvStart + i * uvStride;
  \t\t#ifdef HORIZONTAL_PASS
  \t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
  \t\t\tmean += distribution.x;
  \t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
  \t\t#else
  \t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
  \t\t\tmean += depth;
  \t\t\tsquared_mean += depth * depth;
  \t\t#endif
  \t}
  \tmean = mean / samples;
  \tsquared_mean = squared_mean / samples;
  \tfloat std_dev = sqrt( squared_mean - mean * mean );
  \tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
  }`
          });
          const _0x369220 = _0x474400.clone();
          _0x369220.defines.HORIZONTAL_PASS = 1;
          const _0x1d9480 = new _0x3f374d();
          _0x1d9480.setAttribute("position", new _0x570a7f(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
          const _0x5bd4f2 = new _0x9b7b04(_0x1d9480, _0x474400);
          const _0x3570bd = this;
          function _0x531d05(_0x1cd755, _0x4afcdf, _0x1d3279, _0x3d2787, _0x2f941d, _0x5e2a98, _0x50e4a6) {
            let _0x594c63 = null;
            var _0x120dfe = _0x3d2787.isPointLight === true ? _0x1cd755.customDistanceMaterial : _0x1cd755.customDepthMaterial;
            _0x594c63 = _0x120dfe !== undefined ? _0x120dfe : _0x3d2787.isPointLight === true ? _0x4bfbd4 : _0x25f5ea;
            if (_0xe91abd.localClippingEnabled && _0x1d3279.clipShadows === true && _0x1d3279.clippingPlanes.length !== 0 || _0x1d3279.displacementMap && _0x1d3279.displacementScale !== 0 || _0x1d3279.alphaMap && _0x1d3279.alphaTest > 0) {
              _0x1cd755 = _0x594c63.uuid;
              _0x120dfe = _0x1d3279.uuid;
              let _0x4eaa97 = _0x106c25[_0x1cd755];
              if (_0x4eaa97 === undefined) {
                _0x4eaa97 = {};
                _0x106c25[_0x1cd755] = _0x4eaa97;
              }
              let _0x5f463c = _0x4eaa97[_0x120dfe];
              if (_0x5f463c === undefined) {
                _0x5f463c = _0x594c63.clone();
                _0x4eaa97[_0x120dfe] = _0x5f463c;
              }
              _0x594c63 = _0x5f463c;
            }
            _0x594c63.visible = _0x1d3279.visible;
            _0x594c63.wireframe = _0x1d3279.wireframe;
            _0x594c63.side = _0x50e4a6 === _0x31dc34 ? _0x1d3279.shadowSide !== null ? _0x1d3279.shadowSide : _0x1d3279.side : _0x1d3279.shadowSide !== null ? _0x1d3279.shadowSide : _0x59e28e[_0x1d3279.side];
            _0x594c63.alphaMap = _0x1d3279.alphaMap;
            _0x594c63.alphaTest = _0x1d3279.alphaTest;
            _0x594c63.clipShadows = _0x1d3279.clipShadows;
            _0x594c63.clippingPlanes = _0x1d3279.clippingPlanes;
            _0x594c63.clipIntersection = _0x1d3279.clipIntersection;
            _0x594c63.displacementMap = _0x1d3279.displacementMap;
            _0x594c63.displacementScale = _0x1d3279.displacementScale;
            _0x594c63.displacementBias = _0x1d3279.displacementBias;
            _0x594c63.wireframeLinewidth = _0x1d3279.wireframeLinewidth;
            _0x594c63.linewidth = _0x1d3279.linewidth;
            if (_0x3d2787.isPointLight === true && _0x594c63.isMeshDistanceMaterial === true) {
              _0x594c63.referencePosition.setFromMatrixPosition(_0x3d2787.matrixWorld);
              _0x594c63.nearDistance = _0x2f941d;
              _0x594c63.farDistance = _0x5e2a98;
            }
            return _0x594c63;
          }
          this.enabled = false;
          this.autoUpdate = true;
          this.needsUpdate = false;
          this.type = _0x185486;
          this.render = function (_0x3b04cf, _0x3bd561, _0x5336d3) {
            if (_0x3570bd.enabled !== false && (_0x3570bd.autoUpdate !== false || _0x3570bd.needsUpdate !== false) && _0x3b04cf.length !== 0) {
              var _0x3c1d71 = _0xe91abd.getRenderTarget();
              var _0x4a1b0a = _0xe91abd.getActiveCubeFace();
              var _0x41df08 = _0xe91abd.getActiveMipmapLevel();
              const _0x112db8 = _0xe91abd.state;
              _0x112db8.setBlending(_0x1bf8b5);
              _0x112db8.buffers.color.setClear(1, 1, 1, 1);
              _0x112db8.buffers.depth.setTest(true);
              _0x112db8.setScissorTest(false);
              for (let _0x10f90d = 0, _0x357138 = _0x3b04cf.length; _0x10f90d < _0x357138; _0x10f90d++) {
                var _0x31ce06;
                var _0x23cdaf = _0x3b04cf[_0x10f90d];
                _0x31ce06 = 12;
                const _0x25fd6c = _0x23cdaf.shadow;
                if (_0x25fd6c !== undefined && (_0x25fd6c.autoUpdate !== false || _0x25fd6c.needsUpdate !== false)) {
                  _0x335ccf.copy(_0x25fd6c.mapSize);
                  var _0x556205;
                  var _0x3a6e5b = _0x25fd6c.getFrameExtents();
                  _0x335ccf.multiply(_0x3a6e5b);
                  _0x1afc03.copy(_0x25fd6c.mapSize);
                  if (_0x335ccf.x > _0x231178 || _0x335ccf.y > _0x231178) {
                    if (_0x335ccf.x > _0x231178) {
                      _0x1afc03.x = Math.floor(_0x231178 / _0x3a6e5b.x);
                      _0x335ccf.x = _0x1afc03.x * _0x3a6e5b.x;
                      _0x25fd6c.mapSize.x = _0x1afc03.x;
                    }
                    if (_0x335ccf.y > _0x231178) {
                      _0x1afc03.y = Math.floor(_0x231178 / _0x3a6e5b.y);
                      _0x335ccf.y = _0x1afc03.y * _0x3a6e5b.y;
                      _0x25fd6c.mapSize.y = _0x1afc03.y;
                    }
                  }
                  if (!(_0x25fd6c.map !== null || _0x25fd6c.isPointLightShadow || this.type !== _0x31dc34)) {
                    _0x556205 = {
                      minFilter: _0x202e90,
                      magFilter: _0x202e90,
                      format: _0x4f87e5
                    };
                    _0x25fd6c.map = new _0x4eb744(_0x335ccf.x, _0x335ccf.y, _0x556205);
                    _0x25fd6c.map.texture.name = _0x23cdaf.name + ".shadowMap";
                    _0x25fd6c.mapPass = new _0x4eb744(_0x335ccf.x, _0x335ccf.y, _0x556205);
                    _0x25fd6c.camera.updateProjectionMatrix();
                  }
                  if (_0x25fd6c.map === null) {
                    _0x556205 = {
                      minFilter: _0x297826,
                      magFilter: _0x297826,
                      format: _0x4f87e5
                    };
                    _0x25fd6c.map = new _0x4eb744(_0x335ccf.x, _0x335ccf.y, _0x556205);
                    _0x25fd6c.map.texture.name = _0x23cdaf.name + ".shadowMap";
                    _0x25fd6c.camera.updateProjectionMatrix();
                  }
                  _0xe91abd.setRenderTarget(_0x25fd6c.map);
                  _0xe91abd.clear();
                  var _0xbbb9ab = 9;
                  var _0x159814 = _0x25fd6c.getViewportCount();
                  _0xbbb9ab = 12;
                  for (let _0x9eeabf = 0; _0x9eeabf < _0x159814; _0x9eeabf++) {
                    var _0x4db39b = 6;
                    var _0x320b7c = _0x25fd6c.getViewport(_0x9eeabf);
                    _0x4db39b = 18;
                    _0x33c5c1.set(_0x1afc03.x * _0x320b7c.x, _0x1afc03.y * _0x320b7c.y, _0x1afc03.x * _0x320b7c.z, _0x1afc03.y * _0x320b7c.w);
                    _0x112db8.viewport(_0x33c5c1);
                    _0x25fd6c.updateMatrices(_0x23cdaf, _0x9eeabf);
                    _0x294c19 = _0x25fd6c.getFrustum();
                    (function _0x5914bc(_0x40d4db, _0x439b94, _0x3ded04, _0x3be1f9, _0x1ce772) {
                      if (_0x40d4db.visible === false) {
                        return;
                      }
                      if (_0x40d4db.layers.test(_0x439b94.layers) && (_0x40d4db.isMesh || _0x40d4db.isLine || _0x40d4db.isPoints) && (_0x40d4db.castShadow || _0x40d4db.receiveShadow && _0x1ce772 === _0x31dc34) && (!_0x40d4db.frustumCulled || _0x294c19.intersectsObject(_0x40d4db))) {
                        _0x40d4db.modelViewMatrix.multiplyMatrices(_0x3ded04.matrixWorldInverse, _0x40d4db.matrixWorld);
                        const _0xa64a2f = _0x13a3f8.update(_0x40d4db);
                        const _0x53b539 = _0x40d4db.material;
                        if (Array.isArray(_0x53b539)) {
                          const _0x2499e6 = _0xa64a2f.groups;
                          for (let _0xa13904 = 0, _0xd7faac = _0x2499e6.length; _0xa13904 < _0xd7faac; _0xa13904++) {
                            const _0xb29fb4 = _0x2499e6[_0xa13904];
                            const _0x2f7275 = _0x53b539[_0xb29fb4.materialIndex];
                            if (_0x2f7275 && _0x2f7275.visible) {
                              var _0x393cf;
                              const _0x28520a = _0x531d05(_0x40d4db, 0, _0x2f7275, _0x3be1f9, _0x3ded04.near, _0x3ded04.far, _0x1ce772);
                              _0x393cf = "dfqo";
                              _0xe91abd.renderBufferDirect(_0x3ded04, null, _0xa64a2f, _0x28520a, _0x40d4db, _0xb29fb4);
                            }
                          }
                        } else if (_0x53b539.visible) {
                          const _0x588569 = _0x531d05(_0x40d4db, 0, _0x53b539, _0x3be1f9, _0x3ded04.near, _0x3ded04.far, _0x1ce772);
                          _0xe91abd.renderBufferDirect(_0x3ded04, null, _0xa64a2f, _0x588569, _0x40d4db, null);
                        }
                      }
                      const _0x52014d = _0x40d4db.children;
                      for (let _0x24f785 = 0, _0x4eea54 = _0x52014d.length; _0x24f785 < _0x4eea54; _0x24f785++) {
                        _0x5914bc(_0x52014d[_0x24f785], _0x439b94, _0x3ded04, _0x3be1f9, _0x1ce772);
                      }
                    })(_0x3bd561, _0x5336d3, _0x25fd6c.camera, _0x23cdaf, this.type);
                  }
                  if (!(_0x25fd6c.isPointLightShadow || this.type !== _0x31dc34)) {
                    (function (_0x317e11, _0x59b235) {
                      var _0x278280 = _0x13a3f8.update(_0x5bd4f2);
                      if (_0x474400.defines.VSM_SAMPLES !== _0x317e11.blurSamples) {
                        _0x474400.defines.VSM_SAMPLES = _0x317e11.blurSamples;
                        _0x369220.defines.VSM_SAMPLES = _0x317e11.blurSamples;
                        _0x474400.needsUpdate = true;
                        _0x369220.needsUpdate = true;
                      }
                      _0x474400.uniforms.shadow_pass.value = _0x317e11.map.texture;
                      _0x474400.uniforms.resolution.value = _0x317e11.mapSize;
                      _0x474400.uniforms.radius.value = _0x317e11.radius;
                      _0xe91abd.setRenderTarget(_0x317e11.mapPass);
                      _0xe91abd.clear();
                      _0xe91abd.renderBufferDirect(_0x59b235, null, _0x278280, _0x474400, _0x5bd4f2, null);
                      _0x369220.uniforms.shadow_pass.value = _0x317e11.mapPass.texture;
                      _0x369220.uniforms.resolution.value = _0x317e11.mapSize;
                      _0x369220.uniforms.radius.value = _0x317e11.radius;
                      _0xe91abd.setRenderTarget(_0x317e11.map);
                      _0xe91abd.clear();
                      _0xe91abd.renderBufferDirect(_0x59b235, null, _0x278280, _0x369220, _0x5bd4f2, null);
                    })(_0x25fd6c, _0x5336d3);
                  }
                  _0x25fd6c.needsUpdate = false;
                }
              }
              _0x3570bd.needsUpdate = false;
              _0xe91abd.setRenderTarget(_0x3c1d71, _0x4a1b0a, _0x41df08);
            }
          };
        }
        function _0x36dea7(_0x313056, _0x314be6, _0x38f492) {
          const _0x335a53 = _0x38f492.isWebGL2;
          const _0x258fb6 = new function () {
            let _0x51f47b = false;
            const _0x33a62d = new _0x275701();
            let _0x639c81 = null;
            const _0xe2a6b1 = new _0x275701(0, 0, 0, 0);
            return {
              setMask: function (_0x226001) {
                if (!(_0x639c81 === _0x226001 || _0x51f47b)) {
                  _0x313056.colorMask(_0x226001, _0x226001, _0x226001, _0x226001);
                  _0x639c81 = _0x226001;
                }
              },
              setLocked: function (_0x5ab9da) {
                _0x51f47b = _0x5ab9da;
              },
              setClear: function (_0x182d87, _0x5a3ca3, _0x310c26, _0x40aaad, _0x404ddf) {
                if (_0x404ddf === true) {
                  _0x182d87 *= _0x40aaad;
                  _0x5a3ca3 *= _0x40aaad;
                  _0x310c26 *= _0x40aaad;
                }
                _0x33a62d.set(_0x182d87, _0x5a3ca3, _0x310c26, _0x40aaad);
                if (_0xe2a6b1.equals(_0x33a62d) === false) {
                  _0x313056.clearColor(_0x182d87, _0x5a3ca3, _0x310c26, _0x40aaad);
                  _0xe2a6b1.copy(_0x33a62d);
                }
              },
              reset: function () {
                _0x51f47b = false;
                _0x639c81 = null;
                _0xe2a6b1.set(-1, 0, 0, 0);
              }
            };
          }();
          const _0x275492 = new function () {
            let _0x23b157 = false;
            let _0xb2f99a = null;
            let _0x1ab27f = null;
            let _0x3643d2 = null;
            return {
              setTest: function (_0x518981) {
                (_0x518981 ? _0x6783c5 : _0x75ebd3)(2929);
              },
              setMask: function (_0x42286e) {
                if (!(_0xb2f99a === _0x42286e || _0x23b157)) {
                  _0x313056.depthMask(_0x42286e);
                  _0xb2f99a = _0x42286e;
                }
              },
              setFunc: function (_0xff2e06) {
                if (_0x1ab27f !== _0xff2e06) {
                  if (_0xff2e06) {
                    switch (_0xff2e06) {
                      case _0x2cb585:
                        _0x313056.depthFunc(512);
                        break;
                      case _0x151214:
                        _0x313056.depthFunc(519);
                        break;
                      case _0x3835bb:
                        _0x313056.depthFunc(513);
                        break;
                      case _0x45fa99:
                        _0x313056.depthFunc(515);
                        break;
                      case _0x15b47f:
                        _0x313056.depthFunc(514);
                        break;
                      case _0x5eb9db:
                        _0x313056.depthFunc(518);
                        break;
                      case _0x1b4927:
                        _0x313056.depthFunc(516);
                        break;
                      case _0x462790:
                        _0x313056.depthFunc(517);
                        break;
                      default:
                        _0x313056.depthFunc(515);
                    }
                  } else {
                    _0x313056.depthFunc(515);
                  }
                  _0x1ab27f = _0xff2e06;
                }
              },
              setLocked: function (_0x3993b5) {
                _0x23b157 = _0x3993b5;
              },
              setClear: function (_0x563ffa) {
                if (_0x3643d2 !== _0x563ffa) {
                  _0x313056.clearDepth(_0x563ffa);
                  _0x3643d2 = _0x563ffa;
                }
              },
              reset: function () {
                _0x23b157 = false;
                _0xb2f99a = null;
                _0x1ab27f = null;
                _0x3643d2 = null;
              }
            };
          }();
          const _0x5def1b = new function () {
            let _0xe7b198 = false;
            let _0x43a532 = null;
            let _0x3da5eb = null;
            let _0x5db089 = null;
            let _0x5f1b5f = null;
            let _0x23c6c0 = null;
            let _0x4b5c37 = null;
            let _0x201d14 = null;
            let _0x1fe703 = null;
            return {
              setTest: function (_0x352aa4) {
                if (!_0xe7b198) {
                  (_0x352aa4 ? _0x6783c5 : _0x75ebd3)(2960);
                }
              },
              setMask: function (_0x1b9894) {
                if (!(_0x43a532 === _0x1b9894 || _0xe7b198)) {
                  _0x313056.stencilMask(_0x1b9894);
                  _0x43a532 = _0x1b9894;
                }
              },
              setFunc: function (_0x2ff889, _0x5303f0, _0x2ce38f) {
                if (!(_0x3da5eb === _0x2ff889 && _0x5db089 === _0x5303f0 && _0x5f1b5f === _0x2ce38f)) {
                  _0x313056.stencilFunc(_0x2ff889, _0x5303f0, _0x2ce38f);
                  _0x3da5eb = _0x2ff889;
                  _0x5db089 = _0x5303f0;
                  _0x5f1b5f = _0x2ce38f;
                }
              },
              setOp: function (_0xb41a24, _0x204cd, _0x4f2a15) {
                if (!(_0x23c6c0 === _0xb41a24 && _0x4b5c37 === _0x204cd && _0x201d14 === _0x4f2a15)) {
                  _0x313056.stencilOp(_0xb41a24, _0x204cd, _0x4f2a15);
                  _0x23c6c0 = _0xb41a24;
                  _0x4b5c37 = _0x204cd;
                  _0x201d14 = _0x4f2a15;
                }
              },
              setLocked: function (_0x5d25f5) {
                _0xe7b198 = _0x5d25f5;
              },
              setClear: function (_0x553ab8) {
                if (_0x1fe703 !== _0x553ab8) {
                  _0x313056.clearStencil(_0x553ab8);
                  _0x1fe703 = _0x553ab8;
                }
              },
              reset: function () {
                _0xe7b198 = false;
                _0x43a532 = null;
                _0x3da5eb = null;
                _0x5db089 = null;
                _0x5f1b5f = null;
                _0x23c6c0 = null;
                _0x4b5c37 = null;
                _0x201d14 = null;
                _0x1fe703 = null;
              }
            };
          }();
          let _0x403bb6 = {};
          let _0x4ed104 = {};
          let _0x337b29 = null;
          let _0x238266 = false;
          let _0x97f09b = null;
          let _0x1e1a77 = null;
          let _0x32e053 = null;
          let _0x2aa047 = null;
          let _0x2c1e10 = null;
          let _0xe0b55b = null;
          let _0x3452b4 = null;
          let _0x56a9bb = false;
          let _0x39acf6 = null;
          let _0x167817 = null;
          let _0x14ea3f = null;
          let _0x1fa13e = null;
          let _0x2283f0 = null;
          const _0x2ad4e9 = _0x313056.getParameter(35661);
          let _0x4e3567 = false;
          let _0x599539 = 0;
          const _0x2e33d0 = _0x313056.getParameter(7938);
          if (_0x2e33d0.indexOf("WebGL") !== -1) {
            _0x599539 = parseFloat(/^WebGL (\d)/.exec(_0x2e33d0)[1]);
            _0x4e3567 = _0x599539 >= 1;
          } else if (_0x2e33d0.indexOf("OpenGL ES") !== -1) {
            _0x599539 = parseFloat(/^OpenGL ES (\d)/.exec(_0x2e33d0)[1]);
            _0x4e3567 = _0x599539 >= 2;
          }
          let _0x1cdefd = null;
          let _0x35ccdb = {};
          var _0x57cfcc;
          var _0x3535d9 = _0x313056.getParameter(3088);
          _0x57cfcc = 14;
          _0x38f492 = _0x313056.getParameter(2978);
          const _0x103061 = new _0x275701().fromArray(_0x3535d9);
          const _0x52dbe3 = new _0x275701().fromArray(_0x38f492);
          function _0xcaa5c0(_0x156c21, _0x4b0bdc, _0x8da712) {
            var _0x1a81e0 = new Uint8Array(4);
            var _0x4665a8 = _0x313056.createTexture();
            _0x313056.bindTexture(_0x156c21, _0x4665a8);
            _0x313056.texParameteri(_0x156c21, 10241, 9728);
            _0x313056.texParameteri(_0x156c21, 10240, 9728);
            for (let _0x2876ab = 0; _0x2876ab < _0x8da712; _0x2876ab++) {
              _0x313056.texImage2D(_0x4b0bdc + _0x2876ab, 0, 6408, 1, 1, 0, 6408, 5121, _0x1a81e0);
            }
            return _0x4665a8;
          }
          var _0x1085c5;
          const _0x28173d = {};
          _0x1085c5 = 0;
          function _0x6783c5(_0xbf5498) {
            if (_0x403bb6[_0xbf5498] !== true) {
              _0x313056.enable(_0xbf5498);
              _0x403bb6[_0xbf5498] = true;
            }
          }
          function _0x75ebd3(_0x36f5f4) {
            if (_0x403bb6[_0x36f5f4] !== false) {
              _0x313056.disable(_0x36f5f4);
              _0x403bb6[_0x36f5f4] = false;
            }
          }
          _0x28173d[3553] = _0xcaa5c0(3553, 3553, 1);
          _0x28173d[34067] = _0xcaa5c0(34067, 34069, 6);
          _0x258fb6.setClear(0, 0, 0, 1);
          _0x275492.setClear(1);
          _0x5def1b.setClear(0);
          _0x6783c5(2929);
          _0x275492.setFunc(_0x45fa99);
          _0x34a38d(false);
          _0x57c984(_0x1aff1d);
          _0x6783c5(2884);
          _0x59485e(_0x1bf8b5);
          const _0x202c33 = {
            [_0x3e7cc4]: 32774,
            [_0x2dbbc4]: 32778,
            [_0x3b9cf9]: 32779
          };
          if (_0x335a53) {
            _0x202c33[_0x2ea231] = 32775;
            _0x202c33[_0x9c0bcc] = 32776;
          } else if ((_0x314be6 = _0x314be6.get("EXT_blend_minmax")) !== null) {
            _0x202c33[_0x2ea231] = _0x314be6.MIN_EXT;
            _0x202c33[_0x9c0bcc] = _0x314be6.MAX_EXT;
          }
          var _0x581a81;
          const _0x183c45 = {
            [_0x17fe61]: 0,
            [_0x365ab2]: 1,
            [_0x46c9b8]: 768,
            [_0x539d6e]: 770,
            [_0x495566]: 776,
            [_0x308053]: 774,
            [_0xfa45fa]: 772,
            [_0x2d8718]: 769,
            [_0x5b604c]: 771,
            [_0x3a19c8]: 775,
            [_0xcc53a9]: 773
          };
          _0x581a81 = 15;
          function _0x59485e(_0x3e540b, _0x28760b, _0x332d71, _0x311604, _0x517880, _0x270eca, _0x51366e, _0x228636) {
            if (_0x3e540b !== _0x1bf8b5) {
              if (_0x238266 === false) {
                _0x6783c5(3042);
                _0x238266 = true;
              }
              if (_0x3e540b === _0x237153) {
                _0x517880 = _0x517880 || _0x28760b;
                _0x270eca = _0x270eca || _0x332d71;
                _0x51366e = _0x51366e || _0x311604;
                if (!(_0x28760b === _0x1e1a77 && _0x517880 === _0x2c1e10)) {
                  _0x313056.blendEquationSeparate(_0x202c33[_0x28760b], _0x202c33[_0x517880]);
                  _0x1e1a77 = _0x28760b;
                  _0x2c1e10 = _0x517880;
                }
                if (!(_0x332d71 === _0x32e053 && _0x311604 === _0x2aa047 && _0x270eca === _0xe0b55b && _0x51366e === _0x3452b4)) {
                  _0x313056.blendFuncSeparate(_0x183c45[_0x332d71], _0x183c45[_0x311604], _0x183c45[_0x270eca], _0x183c45[_0x51366e]);
                  _0x32e053 = _0x332d71;
                  _0x2aa047 = _0x311604;
                  _0xe0b55b = _0x270eca;
                  _0x3452b4 = _0x51366e;
                }
                _0x97f09b = _0x3e540b;
                _0x56a9bb = null;
              } else if (_0x3e540b !== _0x97f09b || _0x228636 !== _0x56a9bb) {
                if (!(_0x1e1a77 === _0x3e7cc4 && _0x2c1e10 === _0x3e7cc4)) {
                  _0x313056.blendEquation(32774);
                  _0x1e1a77 = _0x3e7cc4;
                  _0x2c1e10 = _0x3e7cc4;
                }
                if (_0x228636) {
                  switch (_0x3e540b) {
                    case _0x4538d2:
                      _0x313056.blendFuncSeparate(1, 771, 1, 771);
                      break;
                    case _0x453d75:
                      _0x313056.blendFunc(1, 1);
                      break;
                    case _0x266139:
                      _0x313056.blendFuncSeparate(0, 0, 769, 771);
                      break;
                    case _0x46b709:
                      _0x313056.blendFuncSeparate(0, 768, 0, 770);
                  }
                } else {
                  switch (_0x3e540b) {
                    case _0x4538d2:
                      _0x313056.blendFuncSeparate(770, 771, 1, 771);
                      break;
                    case _0x453d75:
                      _0x313056.blendFunc(770, 1);
                      break;
                    case _0x266139:
                      _0x313056.blendFunc(0, 769);
                      break;
                    case _0x46b709:
                      _0x313056.blendFunc(0, 768);
                  }
                }
                _0x32e053 = null;
                _0x2aa047 = null;
                _0xe0b55b = null;
                _0x3452b4 = null;
                _0x97f09b = _0x3e540b;
                _0x56a9bb = _0x228636;
              }
            } else if (_0x238266 === true) {
              _0x75ebd3(3042);
              _0x238266 = false;
            }
          }
          function _0x34a38d(_0x4871d8) {
            if (_0x39acf6 !== _0x4871d8) {
              if (_0x4871d8) {
                _0x313056.frontFace(2304);
              } else {
                _0x313056.frontFace(2305);
              }
              _0x39acf6 = _0x4871d8;
            }
          }
          function _0x57c984(_0x45f94b) {
            if (_0x45f94b !== _0x3c4b50) {
              _0x6783c5(2884);
              if (_0x45f94b !== _0x167817) {
                if (_0x45f94b === _0x1aff1d) {
                  _0x313056.cullFace(1029);
                } else if (_0x45f94b === _0x4bef96) {
                  _0x313056.cullFace(1028);
                } else {
                  _0x313056.cullFace(1032);
                }
              }
            } else {
              _0x75ebd3(2884);
            }
            _0x167817 = _0x45f94b;
          }
          function _0x5474e9(_0x3a21df, _0x4c460b, _0x18c732) {
            if (_0x3a21df) {
              _0x6783c5(32823);
              if (!(_0x1fa13e === _0x4c460b && _0x2283f0 === _0x18c732)) {
                _0x313056.polygonOffset(_0x4c460b, _0x18c732);
                _0x1fa13e = _0x4c460b;
                _0x2283f0 = _0x18c732;
              }
            } else {
              _0x75ebd3(32823);
            }
          }
          function _0x504d92(_0x46f455) {
            if (_0x46f455 === undefined) {
              _0x46f455 = 33984 + _0x2ad4e9 - 1;
            }
            if (_0x1cdefd !== _0x46f455) {
              _0x313056.activeTexture(_0x46f455);
              _0x1cdefd = _0x46f455;
            }
          }
          return {
            buffers: {
              color: _0x258fb6,
              depth: _0x275492,
              stencil: _0x5def1b
            },
            enable: _0x6783c5,
            disable: _0x75ebd3,
            bindFramebuffer: function (_0x556456, _0x14301d) {
              return _0x4ed104[_0x556456] !== _0x14301d && (_0x313056.bindFramebuffer(_0x556456, _0x14301d), _0x4ed104[_0x556456] = _0x14301d, _0x335a53 && (_0x556456 === 36009 && (_0x4ed104[36160] = _0x14301d), _0x556456 === 36160 && (_0x4ed104[36009] = _0x14301d)), true);
            },
            useProgram: function (_0x12d29f) {
              return _0x337b29 !== _0x12d29f && (_0x313056.useProgram(_0x12d29f), _0x337b29 = _0x12d29f, true);
            },
            setBlending: _0x59485e,
            setMaterial: function (_0x4d7cc4, _0x8c84a5) {
              (_0x4d7cc4.side === _0x250b44 ? _0x75ebd3 : _0x6783c5)(2884);
              let _0x4adcfa = _0x4d7cc4.side === _0x460782;
              if (_0x8c84a5) {
                _0x4adcfa = !_0x4adcfa;
              }
              _0x34a38d(_0x4adcfa);
              if (_0x4d7cc4.blending === _0x4538d2 && _0x4d7cc4.transparent === false) {
                _0x59485e(_0x1bf8b5);
              } else {
                _0x59485e(_0x4d7cc4.blending, _0x4d7cc4.blendEquation, _0x4d7cc4.blendSrc, _0x4d7cc4.blendDst, _0x4d7cc4.blendEquationAlpha, _0x4d7cc4.blendSrcAlpha, _0x4d7cc4.blendDstAlpha, _0x4d7cc4.premultipliedAlpha);
              }
              _0x275492.setFunc(_0x4d7cc4.depthFunc);
              _0x275492.setTest(_0x4d7cc4.depthTest);
              _0x275492.setMask(_0x4d7cc4.depthWrite);
              _0x258fb6.setMask(_0x4d7cc4.colorWrite);
              _0x8c84a5 = _0x4d7cc4.stencilWrite;
              _0x5def1b.setTest(_0x8c84a5);
              if (_0x8c84a5) {
                _0x5def1b.setMask(_0x4d7cc4.stencilWriteMask);
                _0x5def1b.setFunc(_0x4d7cc4.stencilFunc, _0x4d7cc4.stencilRef, _0x4d7cc4.stencilFuncMask);
                _0x5def1b.setOp(_0x4d7cc4.stencilFail, _0x4d7cc4.stencilZFail, _0x4d7cc4.stencilZPass);
              }
              _0x5474e9(_0x4d7cc4.polygonOffset, _0x4d7cc4.polygonOffsetFactor, _0x4d7cc4.polygonOffsetUnits);
              (_0x4d7cc4.alphaToCoverage === true ? _0x6783c5 : _0x75ebd3)(32926);
            },
            setFlipSided: _0x34a38d,
            setCullFace: _0x57c984,
            setLineWidth: function (_0x3b8ff3) {
              if (_0x3b8ff3 !== _0x14ea3f) {
                if (_0x4e3567) {
                  _0x313056.lineWidth(_0x3b8ff3);
                }
                _0x14ea3f = _0x3b8ff3;
              }
            },
            setPolygonOffset: _0x5474e9,
            setScissorTest: function (_0x4bb5bc) {
              (_0x4bb5bc ? _0x6783c5 : _0x75ebd3)(3089);
            },
            activeTexture: _0x504d92,
            bindTexture: function (_0x54a42b, _0x42db1e) {
              if (_0x1cdefd === null) {
                _0x504d92();
              }
              let _0x2d89dc = _0x35ccdb[_0x1cdefd];
              if (_0x2d89dc === undefined) {
                _0x2d89dc = {
                  type: undefined,
                  texture: undefined
                };
                _0x35ccdb[_0x1cdefd] = _0x2d89dc;
              }
              if (!(_0x2d89dc.type === _0x54a42b && _0x2d89dc.texture === _0x42db1e)) {
                _0x313056.bindTexture(_0x54a42b, _0x42db1e || _0x28173d[_0x54a42b]);
                _0x2d89dc.type = _0x54a42b;
                _0x2d89dc.texture = _0x42db1e;
              }
            },
            unbindTexture: function () {
              var _0xfb5e0e = 13;
              const _0x163c4a = _0x35ccdb[_0x1cdefd];
              _0xfb5e0e = 2;
              if (_0x163c4a !== undefined && _0x163c4a.type !== undefined) {
                _0x313056.bindTexture(_0x163c4a.type, null);
                _0x163c4a.type = undefined;
                _0x163c4a.texture = undefined;
              }
            },
            compressedTexImage2D: function () {
              try {
                _0x313056.compressedTexImage2D.apply(_0x313056, arguments);
              } catch (_0x40ecf0) {}
            },
            texImage2D: function () {
              try {
                _0x313056.texImage2D.apply(_0x313056, arguments);
              } catch (_0x51a558) {}
            },
            texImage3D: function () {
              try {
                _0x313056.texImage3D.apply(_0x313056, arguments);
              } catch (_0xf8da20) {}
            },
            texStorage2D: function () {
              try {
                _0x313056.texStorage2D.apply(_0x313056, arguments);
              } catch (_0x2a458e) {}
            },
            texStorage3D: function () {
              try {
                _0x313056.texStorage3D.apply(_0x313056, arguments);
              } catch (_0x480985) {}
            },
            texSubImage2D: function () {
              try {
                _0x313056.texSubImage2D.apply(_0x313056, arguments);
              } catch (_0x5d37ce) {}
            },
            texSubImage3D: function () {
              try {
                _0x313056.texSubImage3D.apply(_0x313056, arguments);
              } catch (_0x4c322e) {}
            },
            compressedTexSubImage2D: function () {
              try {
                _0x313056.compressedTexSubImage2D.apply(_0x313056, arguments);
              } catch (_0x29c760) {}
            },
            scissor: function (_0x1830ee) {
              if (_0x103061.equals(_0x1830ee) === false) {
                _0x313056.scissor(_0x1830ee.x, _0x1830ee.y, _0x1830ee.z, _0x1830ee.w);
                _0x103061.copy(_0x1830ee);
              }
            },
            viewport: function (_0x415532) {
              if (_0x52dbe3.equals(_0x415532) === false) {
                _0x313056.viewport(_0x415532.x, _0x415532.y, _0x415532.z, _0x415532.w);
                _0x52dbe3.copy(_0x415532);
              }
            },
            reset: function () {
              _0x313056.disable(3042);
              _0x313056.disable(2884);
              _0x313056.disable(2929);
              _0x313056.disable(32823);
              _0x313056.disable(3089);
              _0x313056.disable(2960);
              _0x313056.disable(32926);
              _0x313056.blendEquation(32774);
              _0x313056.blendFunc(1, 0);
              _0x313056.blendFuncSeparate(1, 0, 1, 0);
              _0x313056.colorMask(true, true, true, true);
              _0x313056.clearColor(0, 0, 0, 0);
              _0x313056.depthMask(true);
              _0x313056.depthFunc(513);
              _0x313056.clearDepth(1);
              _0x313056.stencilMask(4294967295);
              _0x313056.stencilFunc(519, 0, 4294967295);
              _0x313056.stencilOp(7680, 7680, 7680);
              _0x313056.clearStencil(0);
              _0x313056.cullFace(1029);
              _0x313056.frontFace(2305);
              _0x313056.polygonOffset(0, 0);
              _0x313056.activeTexture(33984);
              _0x313056.bindFramebuffer(36160, null);
              if (_0x335a53 === true) {
                _0x313056.bindFramebuffer(36009, null);
                _0x313056.bindFramebuffer(36008, null);
              }
              _0x313056.useProgram(null);
              _0x313056.lineWidth(1);
              _0x313056.scissor(0, 0, _0x313056.canvas.width, _0x313056.canvas.height);
              _0x313056.viewport(0, 0, _0x313056.canvas.width, _0x313056.canvas.height);
              _0x403bb6 = {};
              _0x1cdefd = null;
              _0x35ccdb = {};
              _0x4ed104 = {};
              _0x337b29 = null;
              _0x238266 = false;
              _0x97f09b = null;
              _0x1e1a77 = null;
              _0x32e053 = null;
              _0x2aa047 = null;
              _0x2c1e10 = null;
              _0xe0b55b = null;
              _0x3452b4 = null;
              _0x56a9bb = false;
              _0x39acf6 = null;
              _0x167817 = null;
              _0x14ea3f = null;
              _0x1fa13e = null;
              _0x2283f0 = null;
              _0x103061.set(0, 0, _0x313056.canvas.width, _0x313056.canvas.height);
              _0x52dbe3.set(0, 0, _0x313056.canvas.width, _0x313056.canvas.height);
              _0x258fb6.reset();
              _0x275492.reset();
              _0x5def1b.reset();
            }
          };
        }
        function _0x12eb50(_0x2b806d, _0x3b34d7, _0x43c0f6, _0x661ba9, _0x2875f9, _0x40f34c, _0x26546d) {
          const _0x38724c = _0x2875f9.isWebGL2;
          _0x2875f9.maxTextures;
          const _0x20604d = _0x2875f9.maxCubemapSize;
          const _0x4800c9 = _0x2875f9.maxTextureSize;
          const _0x268fbf = _0x2875f9.maxSamples;
          const _0x43c193 = _0x3b34d7.has("WEBGL_multisampled_render_to_texture") ? _0x3b34d7.get("WEBGL_multisampled_render_to_texture") : undefined;
          const _0x293dbf = new WeakMap();
          let _0x3f43ea;
          let _0x1ac334 = false;
          try {
            _0x1ac334 = typeof OffscreenCanvas != "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
          } catch (_0x311aab) {}
          function _0x28fc40(_0xef5726, _0xaad3e1) {
            if (_0x1ac334) {
              return new OffscreenCanvas(_0xef5726, _0xaad3e1);
            } else {
              return _0xc7d73e("canvas");
            }
          }
          function _0x195e94(_0x43236d, _0x135fd7, _0x5c979d, _0x10fac1) {
            let _0x23258d = 1;
            if (_0x43236d.width > _0x10fac1 || _0x43236d.height > _0x10fac1) {
              _0x23258d = _0x10fac1 / Math.max(_0x43236d.width, _0x43236d.height);
            }
            if (_0x23258d < 1 || _0x135fd7 === true) {
              if (typeof HTMLImageElement != "undefined" && _0x43236d instanceof HTMLImageElement || typeof HTMLCanvasElement != "undefined" && _0x43236d instanceof HTMLCanvasElement || typeof ImageBitmap != "undefined" && _0x43236d instanceof ImageBitmap) {
                const _0xcd18b5 = _0x135fd7 ? _0x30f7e0 : Math.floor;
                _0x10fac1 = _0xcd18b5(_0x23258d * _0x43236d.width);
                _0x135fd7 = _0xcd18b5(_0x23258d * _0x43236d.height);
                if (_0x3f43ea === undefined) {
                  _0x3f43ea = _0x28fc40(_0x10fac1, _0x135fd7);
                }
                const _0xbc18c = _0x5c979d ? _0x28fc40(_0x10fac1, _0x135fd7) : _0x3f43ea;
                _0xbc18c.width = _0x10fac1;
                _0xbc18c.height = _0x135fd7;
                _0xbc18c.getContext("2d").drawImage(_0x43236d, 0, 0, _0x10fac1, _0x135fd7);
                return _0xbc18c;
              }
              return _0x43236d;
            }
            return _0x43236d;
          }
          function _0x3677f6(_0x15dfee) {
            return _0x5d7856(_0x15dfee.width) && _0x5d7856(_0x15dfee.height);
          }
          function _0x1d6d8b(_0x5bd96d, _0x1cf5e7) {
            return _0x5bd96d.generateMipmaps && _0x1cf5e7 && _0x5bd96d.minFilter !== _0x297826 && _0x5bd96d.minFilter !== _0x202e90;
          }
          function _0xb76b4(_0x29884b) {
            _0x2b806d.generateMipmap(_0x29884b);
          }
          function _0x1e3826(_0x278a12, _0x4e14d2, _0x454129, _0x515de3) {
            if (_0x38724c === false) {
              return _0x4e14d2;
            }
            if (_0x278a12 !== null && _0x2b806d[_0x278a12] !== undefined) {
              return _0x2b806d[_0x278a12];
            }
            let _0x16aebb = _0x4e14d2;
            if (_0x4e14d2 === 6403) {
              if (_0x454129 === 5126) {
                _0x16aebb = 33326;
              }
              if (_0x454129 === 5131) {
                _0x16aebb = 33325;
              }
              if (_0x454129 === 5121) {
                _0x16aebb = 33321;
              }
            }
            if (_0x4e14d2 === 6407) {
              if (_0x454129 === 5126) {
                _0x16aebb = 34837;
              }
              if (_0x454129 === 5131) {
                _0x16aebb = 34843;
              }
              if (_0x454129 === 5121) {
                _0x16aebb = 32849;
              }
            }
            if (_0x4e14d2 === 6408) {
              if (_0x454129 === 5126) {
                _0x16aebb = 34836;
              }
              if (_0x454129 === 5131) {
                _0x16aebb = 34842;
              }
              if (_0x454129 === 5121) {
                _0x16aebb = _0x515de3 === _0x320ef1 ? 35907 : 32856;
              }
            }
            if (!(_0x16aebb !== 33325 && _0x16aebb !== 33326 && _0x16aebb !== 34842 && _0x16aebb !== 34836)) {
              _0x3b34d7.get("EXT_color_buffer_float");
            }
            return _0x16aebb;
          }
          function _0x3f081d(_0x19f054, _0x519dfe, _0x48720b) {
            if (_0x1d6d8b(_0x19f054, _0x48720b) === true || _0x19f054.isFramebufferTexture && _0x19f054.minFilter !== _0x297826 && _0x19f054.minFilter !== _0x202e90) {
              return Math.log2(Math.max(_0x519dfe.width, _0x519dfe.height)) + 1;
            } else if (_0x19f054.mipmaps !== undefined && _0x19f054.mipmaps.length > 0) {
              return _0x19f054.mipmaps.length;
            } else if (_0x19f054.isCompressedTexture && Array.isArray(_0x19f054.image)) {
              return _0x519dfe.mipmaps.length;
            } else {
              return 1;
            }
          }
          function _0x3c2bd0(_0x45105b) {
            if (_0x45105b === _0x297826 || _0x45105b === _0x5d282a || _0x45105b === _0x99c93) {
              return 9728;
            } else {
              return 9729;
            }
          }
          function _0x5b555f(_0x4cf2d0) {
            const _0x297aa7 = _0x4cf2d0.target;
            var _0x3003d8 = 15;
            var _0x1af2fc;
            _0x3003d8 = 12;
            _0x297aa7.removeEventListener("dispose", _0x5b555f);
            _0x1af2fc = _0x297aa7;
            if ((_0x4cf2d0 = _0x661ba9.get(_0x1af2fc)).__webglInit !== undefined) {
              _0x2b806d.deleteTexture(_0x4cf2d0.__webglTexture);
              _0x661ba9.remove(_0x1af2fc);
            }
            if (_0x297aa7.isVideoTexture) {
              _0x293dbf.delete(_0x297aa7);
            }
            _0x26546d.memory.textures--;
          }
          function _0x17a5c2(_0x1b9af4) {
            const _0x46c403 = _0x1b9af4.target;
            _0x46c403.removeEventListener("dispose", _0x17a5c2);
            (function (_0x1beb7c) {
              var _0x149b0a = _0x1beb7c.texture;
              var _0x34e89c = _0x661ba9.get(_0x1beb7c);
              var _0x2bafc7 = _0x661ba9.get(_0x149b0a);
              if (_0x1beb7c) {
                if (_0x2bafc7.__webglTexture !== undefined) {
                  _0x2b806d.deleteTexture(_0x2bafc7.__webglTexture);
                  _0x26546d.memory.textures--;
                }
                if (_0x1beb7c.depthTexture) {
                  _0x1beb7c.depthTexture.dispose();
                }
                if (_0x1beb7c.isWebGLCubeRenderTarget) {
                  for (let _0x50f874 = 0; _0x50f874 < 6; _0x50f874++) {
                    _0x2b806d.deleteFramebuffer(_0x34e89c.__webglFramebuffer[_0x50f874]);
                    if (_0x34e89c.__webglDepthbuffer) {
                      _0x2b806d.deleteRenderbuffer(_0x34e89c.__webglDepthbuffer[_0x50f874]);
                    }
                  }
                } else {
                  _0x2b806d.deleteFramebuffer(_0x34e89c.__webglFramebuffer);
                  if (_0x34e89c.__webglDepthbuffer) {
                    _0x2b806d.deleteRenderbuffer(_0x34e89c.__webglDepthbuffer);
                  }
                  if (_0x34e89c.__webglMultisampledFramebuffer) {
                    _0x2b806d.deleteFramebuffer(_0x34e89c.__webglMultisampledFramebuffer);
                  }
                  if (_0x34e89c.__webglColorRenderbuffer) {
                    _0x2b806d.deleteRenderbuffer(_0x34e89c.__webglColorRenderbuffer);
                  }
                  if (_0x34e89c.__webglDepthRenderbuffer) {
                    _0x2b806d.deleteRenderbuffer(_0x34e89c.__webglDepthRenderbuffer);
                  }
                }
                if (_0x1beb7c.isWebGLMultipleRenderTargets) {
                  for (let _0x5a8d3f = 0, _0x525620 = _0x149b0a.length; _0x5a8d3f < _0x525620; _0x5a8d3f++) {
                    var _0xc3de6f = _0x661ba9.get(_0x149b0a[_0x5a8d3f]);
                    if (_0xc3de6f.__webglTexture) {
                      _0x2b806d.deleteTexture(_0xc3de6f.__webglTexture);
                      _0x26546d.memory.textures--;
                    }
                    _0x661ba9.remove(_0x149b0a[_0x5a8d3f]);
                  }
                }
                _0x661ba9.remove(_0x149b0a);
                _0x661ba9.remove(_0x1beb7c);
              }
            })(_0x46c403);
          }
          var _0x3aec76;
          let _0x34bd3f = 0;
          _0x3aec76 = "iebf";
          function _0x4a5b2e(_0x27106c, _0x3b7642) {
            var _0x53d339;
            var _0x2e1a6e = _0x661ba9.get(_0x27106c);
            if (_0x27106c.isVideoTexture) {
              _0x1d6237 = _0x27106c;
              _0x53d339 = _0x26546d.render.frame;
              if (_0x293dbf.get(_0x1d6237) !== _0x53d339) {
                _0x293dbf.set(_0x1d6237, _0x53d339);
                _0x1d6237.update();
              }
            }
            if (_0x27106c.version > 0 && _0x2e1a6e.__version !== _0x27106c.version) {
              var _0x219117;
              var _0x1d6237 = _0x27106c.image;
              _0x219117 = 8;
              if (_0x1d6237 !== undefined && _0x1d6237.complete !== false) {
                _0xd10b20(_0x2e1a6e, _0x27106c, _0x3b7642);
                return;
              }
            }
            _0x43c0f6.activeTexture(33984 + _0x3b7642);
            _0x43c0f6.bindTexture(3553, _0x2e1a6e.__webglTexture);
          }
          function _0x1598f2(_0x5c645c, _0x58628c) {
            var _0x2e0c05 = 18;
            var _0x2faecd = _0x661ba9.get(_0x5c645c);
            _0x2e0c05 = 8;
            if (_0x5c645c.version > 0 && _0x2faecd.__version !== _0x5c645c.version) {
              (function (_0x13c5eb, _0x2bee65, _0x275c45) {
                if (_0x2bee65.image.length === 6) {
                  _0x4b4c40(_0x13c5eb, _0x2bee65);
                  _0x43c0f6.activeTexture(33984 + _0x275c45);
                  _0x43c0f6.bindTexture(34067, _0x13c5eb.__webglTexture);
                  _0x2b806d.pixelStorei(37440, _0x2bee65.flipY);
                  _0x2b806d.pixelStorei(37441, _0x2bee65.premultiplyAlpha);
                  _0x2b806d.pixelStorei(3317, _0x2bee65.unpackAlignment);
                  _0x2b806d.pixelStorei(37443, 0);
                  var _0x559ce7 = _0x2bee65 && (_0x2bee65.isCompressedTexture || _0x2bee65.image[0].isCompressedTexture);
                  var _0x10d7a5 = _0x2bee65.image[0] && _0x2bee65.image[0].isDataTexture;
                  const _0x5c8e55 = [];
                  for (let _0x1e7a05 = 0; _0x1e7a05 < 6; _0x1e7a05++) {
                    _0x5c8e55[_0x1e7a05] = _0x559ce7 || _0x10d7a5 ? _0x10d7a5 ? _0x2bee65.image[_0x1e7a05].image : _0x2bee65.image[_0x1e7a05] : _0x195e94(_0x2bee65.image[_0x1e7a05], false, true, _0x20604d);
                  }
                  var _0x25c78a = _0x5c8e55[0];
                  var _0x4125e7 = _0x3677f6(_0x25c78a) || _0x38724c;
                  var _0x17012c = _0x40f34c.convert(_0x2bee65.format);
                  var _0x3e85ef = _0x40f34c.convert(_0x2bee65.type);
                  var _0x15d21c = _0x1e3826(_0x2bee65.internalFormat, _0x17012c, _0x3e85ef, _0x2bee65.encoding);
                  var _0x5ba898 = _0x38724c && _0x2bee65.isVideoTexture !== true;
                  _0x275c45 = _0x13c5eb.__version === undefined;
                  let _0x31364e;
                  let _0xed4793 = _0x3f081d(_0x2bee65, _0x25c78a, _0x4125e7);
                  _0x5d29a2(34067, _0x2bee65, _0x4125e7);
                  if (_0x559ce7) {
                    if (_0x5ba898 && _0x275c45) {
                      _0x43c0f6.texStorage2D(34067, _0xed4793, _0x15d21c, _0x25c78a.width, _0x25c78a.height);
                    }
                    for (let _0x863475 = 0; _0x863475 < 6; _0x863475++) {
                      _0x31364e = _0x5c8e55[_0x863475].mipmaps;
                      for (let _0x40f01d = 0; _0x40f01d < _0x31364e.length; _0x40f01d++) {
                        var _0x3cc24b = 13;
                        var _0x13921b = _0x31364e[_0x40f01d];
                        _0x3cc24b = 4;
                        if (_0x2bee65.format !== _0x4f87e5 && _0x2bee65.format !== _0x1e0c08) {
                          if (_0x17012c !== null) {
                            if (_0x5ba898) {
                              _0x43c0f6.compressedTexSubImage2D(34069 + _0x863475, _0x40f01d, 0, 0, _0x13921b.width, _0x13921b.height, _0x17012c, _0x13921b.data);
                            } else {
                              _0x43c0f6.compressedTexImage2D(34069 + _0x863475, _0x40f01d, _0x15d21c, _0x13921b.width, _0x13921b.height, 0, _0x13921b.data);
                            }
                          }
                        } else if (_0x5ba898) {
                          _0x43c0f6.texSubImage2D(34069 + _0x863475, _0x40f01d, 0, 0, _0x13921b.width, _0x13921b.height, _0x17012c, _0x3e85ef, _0x13921b.data);
                        } else {
                          _0x43c0f6.texImage2D(34069 + _0x863475, _0x40f01d, _0x15d21c, _0x13921b.width, _0x13921b.height, 0, _0x17012c, _0x3e85ef, _0x13921b.data);
                        }
                      }
                    }
                  } else {
                    _0x31364e = _0x2bee65.mipmaps;
                    if (_0x5ba898 && _0x275c45) {
                      if (_0x31364e.length > 0) {
                        _0xed4793++;
                      }
                      _0x43c0f6.texStorage2D(34067, _0xed4793, _0x15d21c, _0x5c8e55[0].width, _0x5c8e55[0].height);
                    }
                    for (let _0x44e771 = 0; _0x44e771 < 6; _0x44e771++) {
                      if (_0x10d7a5) {
                        if (_0x5ba898) {
                          _0x43c0f6.texSubImage2D(34069 + _0x44e771, 0, 0, 0, _0x5c8e55[_0x44e771].width, _0x5c8e55[_0x44e771].height, _0x17012c, _0x3e85ef, _0x5c8e55[_0x44e771].data);
                        } else {
                          _0x43c0f6.texImage2D(34069 + _0x44e771, 0, _0x15d21c, _0x5c8e55[_0x44e771].width, _0x5c8e55[_0x44e771].height, 0, _0x17012c, _0x3e85ef, _0x5c8e55[_0x44e771].data);
                        }
                        for (let _0x27afff = 0; _0x27afff < _0x31364e.length; _0x27afff++) {
                          var _0xc2cce = _0x31364e[_0x27afff].image[_0x44e771].image;
                          if (_0x5ba898) {
                            _0x43c0f6.texSubImage2D(34069 + _0x44e771, _0x27afff + 1, 0, 0, _0xc2cce.width, _0xc2cce.height, _0x17012c, _0x3e85ef, _0xc2cce.data);
                          } else {
                            _0x43c0f6.texImage2D(34069 + _0x44e771, _0x27afff + 1, _0x15d21c, _0xc2cce.width, _0xc2cce.height, 0, _0x17012c, _0x3e85ef, _0xc2cce.data);
                          }
                        }
                      } else {
                        if (_0x5ba898) {
                          _0x43c0f6.texSubImage2D(34069 + _0x44e771, 0, 0, 0, _0x17012c, _0x3e85ef, _0x5c8e55[_0x44e771]);
                        } else {
                          _0x43c0f6.texImage2D(34069 + _0x44e771, 0, _0x15d21c, _0x17012c, _0x3e85ef, _0x5c8e55[_0x44e771]);
                        }
                        for (let _0x1b0bc9 = 0; _0x1b0bc9 < _0x31364e.length; _0x1b0bc9++) {
                          var _0x1fdf19 = _0x31364e[_0x1b0bc9];
                          if (_0x5ba898) {
                            _0x43c0f6.texSubImage2D(34069 + _0x44e771, _0x1b0bc9 + 1, 0, 0, _0x17012c, _0x3e85ef, _0x1fdf19.image[_0x44e771]);
                          } else {
                            _0x43c0f6.texImage2D(34069 + _0x44e771, _0x1b0bc9 + 1, _0x15d21c, _0x17012c, _0x3e85ef, _0x1fdf19.image[_0x44e771]);
                          }
                        }
                      }
                    }
                  }
                  if (_0x1d6d8b(_0x2bee65, _0x4125e7)) {
                    _0xb76b4(34067);
                  }
                  _0x13c5eb.__version = _0x2bee65.version;
                  if (_0x2bee65.onUpdate) {
                    _0x2bee65.onUpdate(_0x2bee65);
                  }
                }
              })(_0x2faecd, _0x5c645c, _0x58628c);
            } else {
              _0x43c0f6.activeTexture(33984 + _0x58628c);
              _0x43c0f6.bindTexture(34067, _0x2faecd.__webglTexture);
            }
          }
          const _0x1df9fb = {
            [_0xc7a5e0]: 10497,
            [_0x4f55c6]: 33071,
            [_0x53382e]: 33648
          };
          const _0x4f81aa = {
            [_0x297826]: 9728,
            [_0x5d282a]: 9984,
            [_0x99c93]: 9986,
            [_0x202e90]: 9729,
            [_0x12c84a]: 9985,
            [_0x3f90fb]: 9987
          };
          function _0x5d29a2(_0x4daf95, _0x1b8f33, _0x408be9) {
            if (_0x408be9) {
              _0x2b806d.texParameteri(_0x4daf95, 10242, _0x1df9fb[_0x1b8f33.wrapS]);
              _0x2b806d.texParameteri(_0x4daf95, 10243, _0x1df9fb[_0x1b8f33.wrapT]);
              if (!(_0x4daf95 !== 32879 && _0x4daf95 !== 35866)) {
                _0x2b806d.texParameteri(_0x4daf95, 32882, _0x1df9fb[_0x1b8f33.wrapR]);
              }
              _0x2b806d.texParameteri(_0x4daf95, 10240, _0x4f81aa[_0x1b8f33.magFilter]);
              _0x2b806d.texParameteri(_0x4daf95, 10241, _0x4f81aa[_0x1b8f33.minFilter]);
            } else {
              _0x2b806d.texParameteri(_0x4daf95, 10242, 33071);
              _0x2b806d.texParameteri(_0x4daf95, 10243, 33071);
              if (!(_0x4daf95 !== 32879 && _0x4daf95 !== 35866)) {
                _0x2b806d.texParameteri(_0x4daf95, 32882, 33071);
              }
              if (!(_0x1b8f33.wrapS !== _0x4f55c6)) {
                _0x1b8f33.wrapT;
              }
              _0x2b806d.texParameteri(_0x4daf95, 10240, _0x3c2bd0(_0x1b8f33.magFilter));
              _0x2b806d.texParameteri(_0x4daf95, 10241, _0x3c2bd0(_0x1b8f33.minFilter));
              if (_0x1b8f33.minFilter !== _0x297826) {
                _0x1b8f33.minFilter;
              }
            }
            if (_0x3b34d7.has("EXT_texture_filter_anisotropic") === true) {
              _0x408be9 = _0x3b34d7.get("EXT_texture_filter_anisotropic");
              if (!(_0x1b8f33.type === _0x4c436e && _0x3b34d7.has("OES_texture_float_linear") === false || _0x38724c === false && _0x1b8f33.type === _0x399f5d && _0x3b34d7.has("OES_texture_half_float_linear") === false)) {
                if (_0x1b8f33.anisotropy > 1 || _0x661ba9.get(_0x1b8f33).__currentAnisotropy) {
                  _0x2b806d.texParameterf(_0x4daf95, _0x408be9.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(_0x1b8f33.anisotropy, _0x2875f9.getMaxAnisotropy()));
                  _0x661ba9.get(_0x1b8f33).__currentAnisotropy = _0x1b8f33.anisotropy;
                }
              }
            }
          }
          function _0x4b4c40(_0x3cd461, _0x43b134) {
            if (_0x3cd461.__webglInit === undefined) {
              _0x3cd461.__webglInit = true;
              _0x43b134.addEventListener("dispose", _0x5b555f);
              _0x3cd461.__webglTexture = _0x2b806d.createTexture();
              _0x26546d.memory.textures++;
            }
          }
          function _0xd10b20(_0x20eec3, _0x43e24b, _0xce3749) {
            let _0x31955e = 3553;
            if (_0x43e24b.isDataTexture2DArray) {
              _0x31955e = 35866;
            }
            if (_0x43e24b.isDataTexture3D) {
              _0x31955e = 32879;
            }
            _0x4b4c40(_0x20eec3, _0x43e24b);
            _0x43c0f6.activeTexture(33984 + _0xce3749);
            _0x43c0f6.bindTexture(_0x31955e, _0x20eec3.__webglTexture);
            _0x2b806d.pixelStorei(37440, _0x43e24b.flipY);
            _0x2b806d.pixelStorei(37441, _0x43e24b.premultiplyAlpha);
            _0x2b806d.pixelStorei(3317, _0x43e24b.unpackAlignment);
            _0x2b806d.pixelStorei(37443, 0);
            _0x205c31 = _0x43e24b;
            var _0x4262da = !_0x38724c && (_0x205c31.wrapS !== _0x4f55c6 || _0x205c31.wrapT !== _0x4f55c6 || _0x205c31.minFilter !== _0x297826 && _0x205c31.minFilter !== _0x202e90) && _0x3677f6(_0x43e24b.image) === false;
            var _0x5be156 = _0x195e94(_0x43e24b.image, _0x4262da, false, _0x4800c9);
            _0xce3749 = _0x3677f6(_0x5be156) || _0x38724c;
            var _0x29d7b2 = _0x40f34c.convert(_0x43e24b.format);
            let _0x14399d;
            let _0x5afa86 = _0x40f34c.convert(_0x43e24b.type);
            let _0x25848f = _0x1e3826(_0x43e24b.internalFormat, _0x29d7b2, _0x5afa86, _0x43e24b.encoding);
            _0x5d29a2(_0x31955e, _0x43e24b, _0xce3749);
            var _0x5d25a4 = _0x43e24b.mipmaps;
            var _0x3914d3 = _0x38724c && _0x43e24b.isVideoTexture !== true;
            var _0x205c31 = _0x20eec3.__version === undefined;
            _0x4262da = _0x3f081d(_0x43e24b, _0x5be156, _0xce3749);
            if (_0x43e24b.isDepthTexture) {
              _0x25848f = 6402;
              if (_0x38724c) {
                _0x25848f = _0x43e24b.type === _0x4c436e ? 36012 : _0x43e24b.type === _0x1f1250 ? 33190 : _0x43e24b.type === _0x32836b ? 35056 : 33189;
              } else {
                _0x43e24b.type;
              }
              if (_0x43e24b.format === _0x32a157 && _0x25848f === 6402 && _0x43e24b.type !== _0x2339bc && _0x43e24b.type !== _0x1f1250) {
                _0x43e24b.type = _0x2339bc;
                _0x5afa86 = _0x40f34c.convert(_0x43e24b.type);
              }
              if (_0x43e24b.format === _0x5ea0ca && _0x25848f === 6402) {
                _0x25848f = 34041;
                if (_0x43e24b.type !== _0x32836b) {
                  _0x43e24b.type = _0x32836b;
                  _0x5afa86 = _0x40f34c.convert(_0x43e24b.type);
                }
              }
              if (_0x3914d3 && _0x205c31) {
                _0x43c0f6.texStorage2D(3553, 1, _0x25848f, _0x5be156.width, _0x5be156.height);
              } else {
                _0x43c0f6.texImage2D(3553, 0, _0x25848f, _0x5be156.width, _0x5be156.height, 0, _0x29d7b2, _0x5afa86, null);
              }
            } else if (_0x43e24b.isDataTexture) {
              if (_0x5d25a4.length > 0 && _0xce3749) {
                if (_0x3914d3 && _0x205c31) {
                  _0x43c0f6.texStorage2D(3553, _0x4262da, _0x25848f, _0x5d25a4[0].width, _0x5d25a4[0].height);
                }
                for (let _0x245a9f = 0, _0x41af45 = _0x5d25a4.length; _0x245a9f < _0x41af45; _0x245a9f++) {
                  _0x14399d = _0x5d25a4[_0x245a9f];
                  if (_0x3914d3) {
                    _0x43c0f6.texSubImage2D(3553, 0, 0, 0, _0x14399d.width, _0x14399d.height, _0x29d7b2, _0x5afa86, _0x14399d.data);
                  } else {
                    _0x43c0f6.texImage2D(3553, _0x245a9f, _0x25848f, _0x14399d.width, _0x14399d.height, 0, _0x29d7b2, _0x5afa86, _0x14399d.data);
                  }
                }
                _0x43e24b.generateMipmaps = false;
              } else if (_0x3914d3) {
                if (_0x205c31) {
                  _0x43c0f6.texStorage2D(3553, _0x4262da, _0x25848f, _0x5be156.width, _0x5be156.height);
                }
                _0x43c0f6.texSubImage2D(3553, 0, 0, 0, _0x5be156.width, _0x5be156.height, _0x29d7b2, _0x5afa86, _0x5be156.data);
              } else {
                _0x43c0f6.texImage2D(3553, 0, _0x25848f, _0x5be156.width, _0x5be156.height, 0, _0x29d7b2, _0x5afa86, _0x5be156.data);
              }
            } else if (_0x43e24b.isCompressedTexture) {
              if (_0x3914d3 && _0x205c31) {
                _0x43c0f6.texStorage2D(3553, _0x4262da, _0x25848f, _0x5d25a4[0].width, _0x5d25a4[0].height);
              }
              for (let _0x5b4ad0 = 0, _0x3bd109 = _0x5d25a4.length; _0x5b4ad0 < _0x3bd109; _0x5b4ad0++) {
                _0x14399d = _0x5d25a4[_0x5b4ad0];
                if (_0x43e24b.format !== _0x4f87e5 && _0x43e24b.format !== _0x1e0c08) {
                  if (_0x29d7b2 !== null) {
                    if (_0x3914d3) {
                      _0x43c0f6.compressedTexSubImage2D(3553, _0x5b4ad0, 0, 0, _0x14399d.width, _0x14399d.height, _0x29d7b2, _0x14399d.data);
                    } else {
                      _0x43c0f6.compressedTexImage2D(3553, _0x5b4ad0, _0x25848f, _0x14399d.width, _0x14399d.height, 0, _0x14399d.data);
                    }
                  }
                } else if (_0x3914d3) {
                  _0x43c0f6.texSubImage2D(3553, _0x5b4ad0, 0, 0, _0x14399d.width, _0x14399d.height, _0x29d7b2, _0x5afa86, _0x14399d.data);
                } else {
                  _0x43c0f6.texImage2D(3553, _0x5b4ad0, _0x25848f, _0x14399d.width, _0x14399d.height, 0, _0x29d7b2, _0x5afa86, _0x14399d.data);
                }
              }
            } else if (_0x43e24b.isDataTexture2DArray) {
              if (_0x3914d3) {
                if (_0x205c31) {
                  _0x43c0f6.texStorage3D(35866, _0x4262da, _0x25848f, _0x5be156.width, _0x5be156.height, _0x5be156.depth);
                }
                _0x43c0f6.texSubImage3D(35866, 0, 0, 0, 0, _0x5be156.width, _0x5be156.height, _0x5be156.depth, _0x29d7b2, _0x5afa86, _0x5be156.data);
              } else {
                _0x43c0f6.texImage3D(35866, 0, _0x25848f, _0x5be156.width, _0x5be156.height, _0x5be156.depth, 0, _0x29d7b2, _0x5afa86, _0x5be156.data);
              }
            } else if (_0x43e24b.isDataTexture3D) {
              if (_0x3914d3) {
                if (_0x205c31) {
                  _0x43c0f6.texStorage3D(32879, _0x4262da, _0x25848f, _0x5be156.width, _0x5be156.height, _0x5be156.depth);
                }
                _0x43c0f6.texSubImage3D(32879, 0, 0, 0, 0, _0x5be156.width, _0x5be156.height, _0x5be156.depth, _0x29d7b2, _0x5afa86, _0x5be156.data);
              } else {
                _0x43c0f6.texImage3D(32879, 0, _0x25848f, _0x5be156.width, _0x5be156.height, _0x5be156.depth, 0, _0x29d7b2, _0x5afa86, _0x5be156.data);
              }
            } else if (_0x43e24b.isFramebufferTexture) {
              if (_0x3914d3 && _0x205c31) {
                _0x43c0f6.texStorage2D(3553, _0x4262da, _0x25848f, _0x5be156.width, _0x5be156.height);
              } else {
                _0x43c0f6.texImage2D(3553, 0, _0x25848f, _0x5be156.width, _0x5be156.height, 0, _0x29d7b2, _0x5afa86, null);
              }
            } else if (_0x5d25a4.length > 0 && _0xce3749) {
              if (_0x3914d3 && _0x205c31) {
                _0x43c0f6.texStorage2D(3553, _0x4262da, _0x25848f, _0x5d25a4[0].width, _0x5d25a4[0].height);
              }
              for (let _0x4e2c4a = 0, _0x20845a = _0x5d25a4.length; _0x4e2c4a < _0x20845a; _0x4e2c4a++) {
                _0x14399d = _0x5d25a4[_0x4e2c4a];
                if (_0x3914d3) {
                  _0x43c0f6.texSubImage2D(3553, _0x4e2c4a, 0, 0, _0x29d7b2, _0x5afa86, _0x14399d);
                } else {
                  _0x43c0f6.texImage2D(3553, _0x4e2c4a, _0x25848f, _0x29d7b2, _0x5afa86, _0x14399d);
                }
              }
              _0x43e24b.generateMipmaps = false;
            } else if (_0x3914d3) {
              if (_0x205c31) {
                _0x43c0f6.texStorage2D(3553, _0x4262da, _0x25848f, _0x5be156.width, _0x5be156.height);
              }
              _0x43c0f6.texSubImage2D(3553, 0, 0, 0, _0x29d7b2, _0x5afa86, _0x5be156);
            } else {
              _0x43c0f6.texImage2D(3553, 0, _0x25848f, _0x29d7b2, _0x5afa86, _0x5be156);
            }
            if (_0x1d6d8b(_0x43e24b, _0xce3749)) {
              _0xb76b4(_0x31955e);
            }
            _0x20eec3.__version = _0x43e24b.version;
            if (_0x43e24b.onUpdate) {
              _0x43e24b.onUpdate(_0x43e24b);
            }
          }
          function _0x18e7e4(_0x168f28, _0x1a9612, _0x199550, _0x44c45f, _0x7c2852) {
            var _0x330329 = _0x40f34c.convert(_0x199550.format);
            var _0x429d4b = _0x40f34c.convert(_0x199550.type);
            var _0xf06bc0 = _0x1e3826(_0x199550.internalFormat, _0x330329, _0x429d4b, _0x199550.encoding);
            if (!_0x661ba9.get(_0x1a9612).__hasExternalTextures) {
              if (_0x7c2852 === 32879 || _0x7c2852 === 35866) {
                _0x43c0f6.texImage3D(_0x7c2852, 0, _0xf06bc0, _0x1a9612.width, _0x1a9612.height, _0x1a9612.depth, 0, _0x330329, _0x429d4b, null);
              } else {
                _0x43c0f6.texImage2D(_0x7c2852, 0, _0xf06bc0, _0x1a9612.width, _0x1a9612.height, 0, _0x330329, _0x429d4b, null);
              }
            }
            _0x43c0f6.bindFramebuffer(36160, _0x168f28);
            if (_0x1a9612.useRenderToTexture) {
              _0x43c193.framebufferTexture2DMultisampleEXT(36160, _0x44c45f, _0x7c2852, _0x661ba9.get(_0x199550).__webglTexture, 0, _0x4b98f7(_0x1a9612));
            } else {
              _0x2b806d.framebufferTexture2D(36160, _0x44c45f, _0x7c2852, _0x661ba9.get(_0x199550).__webglTexture, 0);
            }
            _0x43c0f6.bindFramebuffer(36160, null);
          }
          function _0x44cc1d(_0x5c91b6, _0x186457, _0x24572e) {
            _0x2b806d.bindRenderbuffer(36161, _0x5c91b6);
            if (_0x186457.depthBuffer && !_0x186457.stencilBuffer) {
              let _0x2a3826 = 33189;
              if (_0x24572e || _0x186457.useRenderToTexture) {
                if ((_0x228979 = _0x186457.depthTexture) && _0x228979.isDepthTexture) {
                  if (_0x228979.type === _0x4c436e) {
                    _0x2a3826 = 36012;
                  } else if (_0x228979.type === _0x1f1250) {
                    _0x2a3826 = 33190;
                  }
                }
                _0x228979 = _0x4b98f7(_0x186457);
                if (_0x186457.useRenderToTexture) {
                  _0x43c193.renderbufferStorageMultisampleEXT(36161, _0x228979, _0x2a3826, _0x186457.width, _0x186457.height);
                } else {
                  _0x2b806d.renderbufferStorageMultisample(36161, _0x228979, _0x2a3826, _0x186457.width, _0x186457.height);
                }
              } else {
                _0x2b806d.renderbufferStorage(36161, _0x2a3826, _0x186457.width, _0x186457.height);
              }
              _0x2b806d.framebufferRenderbuffer(36160, 36096, 36161, _0x5c91b6);
            } else {
              var _0xe4993b;
              var _0x228979;
              if (_0x186457.depthBuffer && _0x186457.stencilBuffer) {
                _0xe4993b = _0x4b98f7(_0x186457);
                if (_0x24572e && _0x186457.useRenderbuffer) {
                  _0x2b806d.renderbufferStorageMultisample(36161, _0xe4993b, 35056, _0x186457.width, _0x186457.height);
                } else if (_0x186457.useRenderToTexture) {
                  _0x43c193.renderbufferStorageMultisampleEXT(36161, _0xe4993b, 35056, _0x186457.width, _0x186457.height);
                } else {
                  _0x2b806d.renderbufferStorage(36161, 34041, _0x186457.width, _0x186457.height);
                }
                _0x2b806d.framebufferRenderbuffer(36160, 33306, 36161, _0x5c91b6);
              } else {
                _0x228979 = _0x186457.isWebGLMultipleRenderTargets === true ? _0x186457.texture[0] : _0x186457.texture;
                _0xe4993b = _0x40f34c.convert(_0x228979.format);
                _0x5c91b6 = _0x40f34c.convert(_0x228979.type);
                _0x5c91b6 = _0x1e3826(_0x228979.internalFormat, _0xe4993b, _0x5c91b6, _0x228979.encoding);
                _0x228979 = _0x4b98f7(_0x186457);
                if (_0x24572e && _0x186457.useRenderbuffer) {
                  _0x2b806d.renderbufferStorageMultisample(36161, _0x228979, _0x5c91b6, _0x186457.width, _0x186457.height);
                } else if (_0x186457.useRenderToTexture) {
                  _0x43c193.renderbufferStorageMultisampleEXT(36161, _0x228979, _0x5c91b6, _0x186457.width, _0x186457.height);
                } else {
                  _0x2b806d.renderbufferStorage(36161, _0x5c91b6, _0x186457.width, _0x186457.height);
                }
              }
            }
            _0x2b806d.bindRenderbuffer(36161, null);
          }
          function _0x2127d5(_0x52eae9) {
            const _0x29ee36 = _0x661ba9.get(_0x52eae9);
            var _0x3cd83f = _0x52eae9.isWebGLCubeRenderTarget === true;
            if (_0x52eae9.depthTexture && !_0x29ee36.__autoAllocateDepthBuffer) {
              if (_0x3cd83f) {
                throw new Error("`````````````");
              }
              (function (_0x2fd73b, _0x16a532) {
                if (_0x16a532 && _0x16a532.isWebGLCubeRenderTarget) {
                  throw new Error("`````````````");
                }
                _0x43c0f6.bindFramebuffer(36160, _0x2fd73b);
                if (!_0x16a532.depthTexture || !_0x16a532.depthTexture.isDepthTexture) {
                  throw new Error("`````````````");
                }
                if (!(_0x661ba9.get(_0x16a532.depthTexture).__webglTexture && _0x16a532.depthTexture.image.width === _0x16a532.width && _0x16a532.depthTexture.image.height === _0x16a532.height)) {
                  _0x16a532.depthTexture.image.width = _0x16a532.width;
                  _0x16a532.depthTexture.image.height = _0x16a532.height;
                  _0x16a532.depthTexture.needsUpdate = true;
                }
                _0x4a5b2e(_0x16a532.depthTexture, 0);
                var _0x413d80 = _0x661ba9.get(_0x16a532.depthTexture).__webglTexture;
                _0x2fd73b = _0x4b98f7(_0x16a532);
                if (_0x16a532.depthTexture.format === _0x32a157) {
                  if (_0x16a532.useRenderToTexture) {
                    _0x43c193.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, _0x413d80, 0, _0x2fd73b);
                  } else {
                    _0x2b806d.framebufferTexture2D(36160, 36096, 3553, _0x413d80, 0);
                  }
                } else {
                  if (_0x16a532.depthTexture.format !== _0x5ea0ca) {
                    throw new Error("`````````````");
                  }
                  if (_0x16a532.useRenderToTexture) {
                    _0x43c193.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, _0x413d80, 0, _0x2fd73b);
                  } else {
                    _0x2b806d.framebufferTexture2D(36160, 33306, 3553, _0x413d80, 0);
                  }
                }
              })(_0x29ee36.__webglFramebuffer, _0x52eae9);
            } else if (_0x3cd83f) {
              _0x29ee36.__webglDepthbuffer = [];
              for (let _0x5ea7eb = 0; _0x5ea7eb < 6; _0x5ea7eb++) {
                _0x43c0f6.bindFramebuffer(36160, _0x29ee36.__webglFramebuffer[_0x5ea7eb]);
                _0x29ee36.__webglDepthbuffer[_0x5ea7eb] = _0x2b806d.createRenderbuffer();
                _0x44cc1d(_0x29ee36.__webglDepthbuffer[_0x5ea7eb], _0x52eae9, false);
              }
            } else {
              _0x43c0f6.bindFramebuffer(36160, _0x29ee36.__webglFramebuffer);
              _0x29ee36.__webglDepthbuffer = _0x2b806d.createRenderbuffer();
              _0x44cc1d(_0x29ee36.__webglDepthbuffer, _0x52eae9, false);
            }
            _0x43c0f6.bindFramebuffer(36160, null);
          }
          function _0x4b98f7(_0x5a7b27) {
            if (_0x38724c && (_0x5a7b27.useRenderbuffer || _0x5a7b27.useRenderToTexture)) {
              return Math.min(_0x268fbf, _0x5a7b27.samples);
            } else {
              return 0;
            }
          }
          let _0x3810b2 = false;
          let _0x2a1de8 = false;
          this.allocateTextureUnit = function () {
            var _0x3cbfa2;
            var _0x4e7460 = _0x34bd3f;
            _0x3cbfa2 = 9;
            _0x34bd3f += 1;
            return _0x4e7460;
          };
          this.resetTextureUnits = function () {
            _0x34bd3f = 0;
          };
          this.setTexture2D = _0x4a5b2e;
          this.setTexture2DArray = function (_0x1d82d1, _0x2eff53) {
            var _0x2a0e64 = _0x661ba9.get(_0x1d82d1);
            if (_0x1d82d1.version > 0 && _0x2a0e64.__version !== _0x1d82d1.version) {
              _0xd10b20(_0x2a0e64, _0x1d82d1, _0x2eff53);
            } else {
              _0x43c0f6.activeTexture(33984 + _0x2eff53);
              _0x43c0f6.bindTexture(35866, _0x2a0e64.__webglTexture);
            }
          };
          this.setTexture3D = function (_0xf159a1, _0x38b443) {
            var _0x299085;
            var _0x5a3fea = _0x661ba9.get(_0xf159a1);
            _0x299085 = 10;
            if (_0xf159a1.version > 0 && _0x5a3fea.__version !== _0xf159a1.version) {
              _0xd10b20(_0x5a3fea, _0xf159a1, _0x38b443);
            } else {
              _0x43c0f6.activeTexture(33984 + _0x38b443);
              _0x43c0f6.bindTexture(32879, _0x5a3fea.__webglTexture);
            }
          };
          this.setTextureCube = _0x1598f2;
          this.rebindTextures = function (_0x53a9ec, _0x1ca408, _0x470f87) {
            var _0x1348de = _0x661ba9.get(_0x53a9ec);
            if (_0x1ca408 !== undefined) {
              _0x18e7e4(_0x1348de.__webglFramebuffer, _0x53a9ec, _0x53a9ec.texture, 36064, 3553);
            }
            if (_0x470f87 !== undefined) {
              _0x2127d5(_0x53a9ec);
            }
          };
          this.setupRenderTarget = function (_0x4ab18f) {
            const _0x563a46 = _0x4ab18f.texture;
            const _0x41a231 = _0x661ba9.get(_0x4ab18f);
            const _0x44da29 = _0x661ba9.get(_0x563a46);
            _0x4ab18f.addEventListener("dispose", _0x17a5c2);
            if (_0x4ab18f.isWebGLMultipleRenderTargets !== true) {
              if (_0x44da29.__webglTexture === undefined) {
                _0x44da29.__webglTexture = _0x2b806d.createTexture();
              }
              _0x44da29.__version = _0x563a46.version;
              _0x26546d.memory.textures++;
            }
            var _0x3b952b;
            var _0x57fbf1;
            var _0x195dac = _0x4ab18f.isWebGLCubeRenderTarget === true;
            var _0x2128fc = _0x4ab18f.isWebGLMultipleRenderTargets === true;
            var _0x180d0c = _0x563a46.isDataTexture3D || _0x563a46.isDataTexture2DArray;
            var _0x3aea79 = _0x3677f6(_0x4ab18f) || _0x38724c;
            if (!(!_0x38724c || _0x563a46.format !== _0x1e0c08 || _0x563a46.type !== _0x4c436e && _0x563a46.type !== _0x399f5d)) {
              _0x563a46.format = _0x4f87e5;
            }
            if (_0x195dac) {
              _0x41a231.__webglFramebuffer = [];
              for (let _0x50fbe8 = 0; _0x50fbe8 < 6; _0x50fbe8++) {
                _0x41a231.__webglFramebuffer[_0x50fbe8] = _0x2b806d.createFramebuffer();
              }
            } else {
              _0x41a231.__webglFramebuffer = _0x2b806d.createFramebuffer();
              if (_0x2128fc) {
                if (_0x2875f9.drawBuffers) {
                  var _0x2ebbe1 = _0x4ab18f.texture;
                  for (let _0x37153d = 0, _0x5e6441 = _0x2ebbe1.length; _0x37153d < _0x5e6441; _0x37153d++) {
                    var _0x26d2d9;
                    const _0x49f134 = _0x661ba9.get(_0x2ebbe1[_0x37153d]);
                    _0x26d2d9 = 13;
                    if (_0x49f134.__webglTexture === undefined) {
                      _0x49f134.__webglTexture = _0x2b806d.createTexture();
                      _0x26546d.memory.textures++;
                    }
                  }
                }
              } else if (_0x4ab18f.useRenderbuffer && _0x38724c) {
                _0x41a231.__webglMultisampledFramebuffer = _0x2b806d.createFramebuffer();
                _0x41a231.__webglColorRenderbuffer = _0x2b806d.createRenderbuffer();
                _0x2b806d.bindRenderbuffer(36161, _0x41a231.__webglColorRenderbuffer);
                _0x3b952b = _0x40f34c.convert(_0x563a46.format);
                _0x57fbf1 = _0x40f34c.convert(_0x563a46.type);
                _0x3b952b = _0x1e3826(_0x563a46.internalFormat, _0x3b952b, _0x57fbf1, _0x563a46.encoding);
                _0x57fbf1 = _0x4b98f7(_0x4ab18f);
                _0x2b806d.renderbufferStorageMultisample(36161, _0x57fbf1, _0x3b952b, _0x4ab18f.width, _0x4ab18f.height);
                _0x43c0f6.bindFramebuffer(36160, _0x41a231.__webglMultisampledFramebuffer);
                _0x2b806d.framebufferRenderbuffer(36160, 36064, 36161, _0x41a231.__webglColorRenderbuffer);
                _0x2b806d.bindRenderbuffer(36161, null);
                if (_0x4ab18f.depthBuffer) {
                  _0x41a231.__webglDepthRenderbuffer = _0x2b806d.createRenderbuffer();
                  _0x44cc1d(_0x41a231.__webglDepthRenderbuffer, _0x4ab18f, true);
                }
                _0x43c0f6.bindFramebuffer(36160, null);
              }
            }
            if (_0x195dac) {
              _0x43c0f6.bindTexture(34067, _0x44da29.__webglTexture);
              _0x5d29a2(34067, _0x563a46, _0x3aea79);
              for (let _0x3f1329 = 0; _0x3f1329 < 6; _0x3f1329++) {
                _0x18e7e4(_0x41a231.__webglFramebuffer[_0x3f1329], _0x4ab18f, _0x563a46, 36064, 34069 + _0x3f1329);
              }
              if (_0x1d6d8b(_0x563a46, _0x3aea79)) {
                _0xb76b4(34067);
              }
              _0x43c0f6.unbindTexture();
            } else if (_0x2128fc) {
              var _0x1ad2a5 = _0x4ab18f.texture;
              for (let _0x4d8208 = 0, _0x523ec0 = _0x1ad2a5.length; _0x4d8208 < _0x523ec0; _0x4d8208++) {
                var _0x2bb5be = _0x1ad2a5[_0x4d8208];
                var _0x278627 = _0x661ba9.get(_0x2bb5be);
                _0x43c0f6.bindTexture(3553, _0x278627.__webglTexture);
                _0x5d29a2(3553, _0x2bb5be, _0x3aea79);
                _0x18e7e4(_0x41a231.__webglFramebuffer, _0x4ab18f, _0x2bb5be, 36064 + _0x4d8208, 3553);
                if (_0x1d6d8b(_0x2bb5be, _0x3aea79)) {
                  _0xb76b4(3553);
                }
              }
              _0x43c0f6.unbindTexture();
            } else {
              let _0x2827f8 = 3553;
              if (_0x180d0c && _0x38724c) {
                _0x2827f8 = (_0x180d0c = _0x563a46.isDataTexture3D) ? 32879 : 35866;
              }
              _0x43c0f6.bindTexture(_0x2827f8, _0x44da29.__webglTexture);
              _0x5d29a2(_0x2827f8, _0x563a46, _0x3aea79);
              _0x18e7e4(_0x41a231.__webglFramebuffer, _0x4ab18f, _0x563a46, 36064, _0x2827f8);
              if (_0x1d6d8b(_0x563a46, _0x3aea79)) {
                _0xb76b4(_0x2827f8);
              }
              _0x43c0f6.unbindTexture();
            }
            if (_0x4ab18f.depthBuffer) {
              _0x2127d5(_0x4ab18f);
            }
          };
          this.updateRenderTargetMipmap = function (_0xd7ffe2) {
            var _0x257daa = _0x3677f6(_0xd7ffe2) || _0x38724c;
            var _0x4b093e = _0xd7ffe2.isWebGLMultipleRenderTargets === true ? _0xd7ffe2.texture : [_0xd7ffe2.texture];
            for (let _0x167da0 = 0, _0x32e283 = _0x4b093e.length; _0x167da0 < _0x32e283; _0x167da0++) {
              var _0x2d0f34;
              var _0x4b4c1c = _0x4b093e[_0x167da0];
              if (_0x1d6d8b(_0x4b4c1c, _0x257daa)) {
                _0x2d0f34 = _0xd7ffe2.isWebGLCubeRenderTarget ? 34067 : 3553;
                _0x4b4c1c = _0x661ba9.get(_0x4b4c1c).__webglTexture;
                _0x43c0f6.bindTexture(_0x2d0f34, _0x4b4c1c);
                _0xb76b4(_0x2d0f34);
                _0x43c0f6.unbindTexture();
              }
            }
          };
          this.updateMultisampleRenderTarget = function (_0x170deb) {
            if (_0x170deb.useRenderbuffer && _0x38724c) {
              var _0x5641a2 = _0x170deb.width;
              var _0x4daf43 = _0x170deb.height;
              let _0x488200 = 16384;
              const _0x233084 = [36064];
              var _0x14ff8e;
              var _0x4610ed = _0x170deb.stencilBuffer ? 33306 : 36096;
              _0x14ff8e = 8;
              if (_0x170deb.depthBuffer) {
                _0x233084.push(_0x4610ed);
              }
              if (!_0x170deb.ignoreDepthForMultisampleCopy) {
                if (_0x170deb.depthBuffer) {
                  _0x488200 |= 256;
                }
                if (_0x170deb.stencilBuffer) {
                  _0x488200 |= 1024;
                }
              }
              var _0x2ffe7 = 5;
              var _0x380ea1 = _0x661ba9.get(_0x170deb);
              _0x2ffe7 = "njpk";
              _0x43c0f6.bindFramebuffer(36008, _0x380ea1.__webglMultisampledFramebuffer);
              _0x43c0f6.bindFramebuffer(36009, _0x380ea1.__webglFramebuffer);
              if (_0x170deb.ignoreDepthForMultisampleCopy) {
                _0x2b806d.invalidateFramebuffer(36008, [_0x4610ed]);
                _0x2b806d.invalidateFramebuffer(36009, [_0x4610ed]);
              }
              _0x2b806d.blitFramebuffer(0, 0, _0x5641a2, _0x4daf43, 0, 0, _0x5641a2, _0x4daf43, _0x488200, 9728);
              _0x2b806d.invalidateFramebuffer(36008, _0x233084);
              _0x43c0f6.bindFramebuffer(36008, null);
              _0x43c0f6.bindFramebuffer(36009, _0x380ea1.__webglMultisampledFramebuffer);
            }
          };
          this.setupDepthRenderbuffer = _0x2127d5;
          this.setupFrameBufferTexture = _0x18e7e4;
          this.safeSetTexture2D = function (_0x5b558b, _0x5b5339) {
            if (_0x5b558b && _0x5b558b.isWebGLRenderTarget) {
              if (_0x3810b2 === false) {
                _0x3810b2 = true;
              }
              _0x5b558b = _0x5b558b.texture;
            }
            _0x4a5b2e(_0x5b558b, _0x5b5339);
          };
          this.safeSetTextureCube = function (_0x142db1, _0x299059) {
            if (_0x142db1 && _0x142db1.isWebGLCubeRenderTarget) {
              if (_0x2a1de8 === false) {
                _0x2a1de8 = true;
              }
              _0x142db1 = _0x142db1.texture;
            }
            _0x1598f2(_0x142db1, _0x299059);
          };
        }
        function _0x37ac40(_0x26726b, _0x3d90f2, _0x17bba8) {
          const _0x5df843 = _0x17bba8.isWebGL2;
          return {
            convert: function (_0x405bb3) {
              let _0x3e4030;
              if (_0x405bb3 === _0x3a53e9) {
                return 5121;
              }
              if (_0x405bb3 === _0x47725a) {
                return 32819;
              }
              if (_0x405bb3 === _0x5f5cb5) {
                return 32820;
              }
              if (_0x405bb3 === _0x2c144c) {
                return 33635;
              }
              if (_0x405bb3 === _0x13ad8a) {
                return 5120;
              }
              if (_0x405bb3 === _0x143891) {
                return 5122;
              }
              if (_0x405bb3 === _0x2339bc) {
                return 5123;
              }
              if (_0x405bb3 === _0x4d4fb5) {
                return 5124;
              }
              if (_0x405bb3 === _0x1f1250) {
                return 5125;
              }
              if (_0x405bb3 === _0x4c436e) {
                return 5126;
              }
              if (_0x405bb3 === _0x399f5d) {
                if (_0x5df843) {
                  return 5131;
                } else {
                  _0x3e4030 = _0x3d90f2.get("OES_texture_half_float");
                  if (_0x3e4030 !== null) {
                    return _0x3e4030.HALF_FLOAT_OES;
                  } else {
                    return null;
                  }
                }
              }
              if (_0x405bb3 === _0x1aff07) {
                return 6406;
              }
              if (_0x405bb3 === _0x1e0c08) {
                return 6407;
              }
              if (_0x405bb3 === _0x4f87e5) {
                return 6408;
              }
              if (_0x405bb3 === _0x5ab64f) {
                return 6409;
              }
              if (_0x405bb3 === _0x1df6d9) {
                return 6410;
              }
              if (_0x405bb3 === _0x32a157) {
                return 6402;
              }
              if (_0x405bb3 === _0x5ea0ca) {
                return 34041;
              }
              if (_0x405bb3 === _0x6ff49f) {
                return 6403;
              }
              if (_0x405bb3 === _0x24a0c9) {
                return 36244;
              }
              if (_0x405bb3 === _0x2d6162) {
                return 33319;
              }
              if (_0x405bb3 === _0x2953f9) {
                return 33320;
              }
              if (_0x405bb3 === _0x5b268d) {
                return 36248;
              }
              if (_0x405bb3 === _0x4ff7a5) {
                return 36249;
              }
              if (_0x405bb3 === _0x55be8d || _0x405bb3 === _0x5daab3 || _0x405bb3 === _0x5adc18 || _0x405bb3 === _0x326843) {
                _0x3e4030 = _0x3d90f2.get("WEBGL_compressed_texture_s3tc");
                if (_0x3e4030 === null) {
                  return null;
                }
                if (_0x405bb3 === _0x55be8d) {
                  return _0x3e4030.COMPRESSED_RGB_S3TC_DXT1_EXT;
                }
                if (_0x405bb3 === _0x5daab3) {
                  return _0x3e4030.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                }
                if (_0x405bb3 === _0x5adc18) {
                  return _0x3e4030.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                }
                if (_0x405bb3 === _0x326843) {
                  return _0x3e4030.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                }
              }
              if (_0x405bb3 === _0x4a092b || _0x405bb3 === _0x29ff69 || _0x405bb3 === _0x448d81 || _0x405bb3 === _0x28d14d) {
                _0x3e4030 = _0x3d90f2.get("WEBGL_compressed_texture_pvrtc");
                if (_0x3e4030 === null) {
                  return null;
                }
                if (_0x405bb3 === _0x4a092b) {
                  return _0x3e4030.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                }
                if (_0x405bb3 === _0x29ff69) {
                  return _0x3e4030.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                }
                if (_0x405bb3 === _0x448d81) {
                  return _0x3e4030.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                }
                if (_0x405bb3 === _0x28d14d) {
                  return _0x3e4030.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                }
              }
              if (_0x405bb3 === _0x5be57b) {
                _0x3e4030 = _0x3d90f2.get("WEBGL_compressed_texture_etc1");
                if (_0x3e4030 !== null) {
                  return _0x3e4030.COMPRESSED_RGB_ETC1_WEBGL;
                } else {
                  return null;
                }
              }
              if ((_0x405bb3 === _0x30604a || _0x405bb3 === _0x704911) && (_0x3e4030 = _0x3d90f2.get("WEBGL_compressed_texture_etc"), _0x3e4030 !== null)) {
                if (_0x405bb3 === _0x30604a) {
                  return _0x3e4030.COMPRESSED_RGB8_ETC2;
                }
                if (_0x405bb3 === _0x704911) {
                  return _0x3e4030.COMPRESSED_RGBA8_ETC2_EAC;
                }
              }
              if (_0x405bb3 === _0x451bde || _0x405bb3 === _0x4d0164 || _0x405bb3 === _0x3eddd4 || _0x405bb3 === _0x346895 || _0x405bb3 === _0x4327c4 || _0x405bb3 === _0x314527 || _0x405bb3 === _0x5e5a83 || _0x405bb3 === _0x29cc04 || _0x405bb3 === _0xa24dc || _0x405bb3 === _0x290448 || _0x405bb3 === _0x3e4fc2 || _0x405bb3 === _0x1cb3eb || _0x405bb3 === _0xae4eed || _0x405bb3 === _0x1f55b4 || _0x405bb3 === _0x4764cd || _0x405bb3 === _0x39c5d2 || _0x405bb3 === _0xa659c4 || _0x405bb3 === _0x5e31bf || _0x405bb3 === _0x3337e4 || _0x405bb3 === _0x1d5b7d || _0x405bb3 === _0x660743 || _0x405bb3 === _0x124eee || _0x405bb3 === _0x3f579d || _0x405bb3 === _0x4c593e || _0x405bb3 === _0x364888 || _0x405bb3 === _0x5db82b || _0x405bb3 === _0x5e81bc || _0x405bb3 === _0x34b0d1) {
                _0x3e4030 = _0x3d90f2.get("WEBGL_compressed_texture_astc");
                if (_0x3e4030 !== null) {
                  return _0x405bb3;
                } else {
                  return null;
                }
              } else if (_0x405bb3 === _0x502bea) {
                _0x3e4030 = _0x3d90f2.get("EXT_texture_compression_bptc");
                if (_0x3e4030 !== null) {
                  return _0x405bb3;
                } else {
                  return null;
                }
              } else if (_0x405bb3 === _0x32836b) {
                if (_0x5df843) {
                  return 34042;
                } else {
                  _0x3e4030 = _0x3d90f2.get("WEBGL_depth_texture");
                  if (_0x3e4030 !== null) {
                    return _0x3e4030.UNSIGNED_INT_24_8_WEBGL;
                  } else {
                    return null;
                  }
                }
              } else {
                return undefined;
              }
            }
          };
        }
        class _0x2c8659 extends _0x41f6fd {
          constructor(_0x3eb197 = []) {
            super();
            this.cameras = _0x3eb197;
          }
        }
        _0x2c8659.prototype.isArrayCamera = true;
        class _0x2245c9 extends _0x3b73b1 {
          constructor() {
            super();
            this.type = "Group";
          }
        }
        _0x2245c9.prototype.isGroup = true;
        var _0x384956;
        const _0x5ec486 = {
          type: "move"
        };
        _0x384956 = 5;
        class _0x583396 {
          constructor() {
            this._targetRay = null;
            this._grip = null;
            this._hand = null;
          }
          getHandSpace() {
            if (this._hand === null) {
              this._hand = new _0x2245c9();
              this._hand.matrixAutoUpdate = false;
              this._hand.visible = false;
              this._hand.joints = {};
              this._hand.inputState = {
                pinching: false
              };
            }
            return this._hand;
          }
          getTargetRaySpace() {
            if (this._targetRay === null) {
              this._targetRay = new _0x2245c9();
              this._targetRay.matrixAutoUpdate = false;
              this._targetRay.visible = false;
              this._targetRay.hasLinearVelocity = false;
              this._targetRay.linearVelocity = new _0x1d20ef();
              this._targetRay.hasAngularVelocity = false;
              this._targetRay.angularVelocity = new _0x1d20ef();
            }
            return this._targetRay;
          }
          getGripSpace() {
            if (this._grip === null) {
              this._grip = new _0x2245c9();
              this._grip.matrixAutoUpdate = false;
              this._grip.visible = false;
              this._grip.hasLinearVelocity = false;
              this._grip.linearVelocity = new _0x1d20ef();
              this._grip.hasAngularVelocity = false;
              this._grip.angularVelocity = new _0x1d20ef();
            }
            return this._grip;
          }
          dispatchEvent(_0x303c45) {
            if (this._targetRay !== null) {
              this._targetRay.dispatchEvent(_0x303c45);
            }
            if (this._grip !== null) {
              this._grip.dispatchEvent(_0x303c45);
            }
            if (this._hand !== null) {
              this._hand.dispatchEvent(_0x303c45);
            }
            return this;
          }
          disconnect(_0x15024d) {
            this.dispatchEvent({
              type: "disconnected",
              data: _0x15024d
            });
            if (this._targetRay !== null) {
              this._targetRay.visible = false;
            }
            if (this._grip !== null) {
              this._grip.visible = false;
            }
            if (this._hand !== null) {
              this._hand.visible = false;
            }
            return this;
          }
          update(_0x2142f4, _0x5ad8c6, _0x59d939) {
            let _0x1d9da1 = null;
            let _0x3eac0c = null;
            let _0x5ca451 = null;
            const _0xb68227 = this._targetRay;
            const _0x569187 = this._grip;
            const _0x3dd521 = this._hand;
            if (_0x2142f4 && _0x5ad8c6.session.visibilityState !== "visible-blurred") {
              if (_0xb68227 !== null) {
                _0x1d9da1 = _0x5ad8c6.getPose(_0x2142f4.targetRaySpace, _0x59d939);
                if (_0x1d9da1 !== null) {
                  _0xb68227.matrix.fromArray(_0x1d9da1.transform.matrix);
                  _0xb68227.matrix.decompose(_0xb68227.position, _0xb68227.rotation, _0xb68227.scale);
                  if (_0x1d9da1.linearVelocity) {
                    _0xb68227.hasLinearVelocity = true;
                    _0xb68227.linearVelocity.copy(_0x1d9da1.linearVelocity);
                  } else {
                    _0xb68227.hasLinearVelocity = false;
                  }
                  if (_0x1d9da1.angularVelocity) {
                    _0xb68227.hasAngularVelocity = true;
                    _0xb68227.angularVelocity.copy(_0x1d9da1.angularVelocity);
                  } else {
                    _0xb68227.hasAngularVelocity = false;
                  }
                  this.dispatchEvent(_0x5ec486);
                }
              }
              if (_0x3dd521 && _0x2142f4.hand) {
                _0x5ca451 = true;
                for (const _0x2b7154 of _0x2142f4.hand.values()) {
                  var _0x5b9d28 = 7;
                  var _0x180c76 = _0x5ad8c6.getJointPose(_0x2b7154, _0x59d939);
                  _0x5b9d28 = 9;
                  if (_0x3dd521.joints[_0x2b7154.jointName] === undefined) {
                    var _0x13672a;
                    const _0x10b12f = new _0x2245c9();
                    _0x13672a = 13;
                    _0x10b12f.matrixAutoUpdate = false;
                    _0x10b12f.visible = false;
                    _0x3dd521.joints[_0x2b7154.jointName] = _0x10b12f;
                    _0x3dd521.add(_0x10b12f);
                  }
                  var _0x3d7efe = 10;
                  const _0x33e7c9 = _0x3dd521.joints[_0x2b7154.jointName];
                  _0x3d7efe = 5;
                  if (_0x180c76 !== null) {
                    _0x33e7c9.matrix.fromArray(_0x180c76.transform.matrix);
                    _0x33e7c9.matrix.decompose(_0x33e7c9.position, _0x33e7c9.rotation, _0x33e7c9.scale);
                    _0x33e7c9.jointRadius = _0x180c76.radius;
                  }
                  _0x33e7c9.visible = _0x180c76 !== null;
                }
                var _0x300a41 = 7;
                const _0x44e0e5 = _0x3dd521.joints["index-finger-tip"];
                _0x300a41 = 8;
                var _0x1a8e82;
                var _0x13d890 = _0x3dd521.joints["thumb-tip"];
                _0x1a8e82 = "hkqe";
                _0x13d890 = _0x44e0e5.position.distanceTo(_0x13d890.position);
                if (_0x3dd521.inputState.pinching && _0x13d890 > 0.025) {
                  _0x3dd521.inputState.pinching = false;
                  this.dispatchEvent({
                    type: "pinchend",
                    handedness: _0x2142f4.handedness,
                    target: this
                  });
                } else if (!_0x3dd521.inputState.pinching && _0x13d890 <= 0.015) {
                  _0x3dd521.inputState.pinching = true;
                  this.dispatchEvent({
                    type: "pinchstart",
                    handedness: _0x2142f4.handedness,
                    target: this
                  });
                }
              } else if (_0x569187 !== null && _0x2142f4.gripSpace) {
                _0x3eac0c = _0x5ad8c6.getPose(_0x2142f4.gripSpace, _0x59d939);
                if (_0x3eac0c !== null) {
                  _0x569187.matrix.fromArray(_0x3eac0c.transform.matrix);
                  _0x569187.matrix.decompose(_0x569187.position, _0x569187.rotation, _0x569187.scale);
                  if (_0x3eac0c.linearVelocity) {
                    _0x569187.hasLinearVelocity = true;
                    _0x569187.linearVelocity.copy(_0x3eac0c.linearVelocity);
                  } else {
                    _0x569187.hasLinearVelocity = false;
                  }
                  if (_0x3eac0c.angularVelocity) {
                    _0x569187.hasAngularVelocity = true;
                    _0x569187.angularVelocity.copy(_0x3eac0c.angularVelocity);
                  } else {
                    _0x569187.hasAngularVelocity = false;
                  }
                }
              }
            }
            if (_0xb68227 !== null) {
              _0xb68227.visible = _0x1d9da1 !== null;
            }
            if (_0x569187 !== null) {
              _0x569187.visible = _0x3eac0c !== null;
            }
            if (_0x3dd521 !== null) {
              _0x3dd521.visible = _0x5ca451 !== null;
            }
            return this;
          }
        }
        class _0x4e8160 extends _0x3d39cb {
          constructor(_0x50d304, _0x790e6b, _0x168eee, _0x112b4e, _0x210240, _0x50b8a3, _0x94675f, _0x1aef10, _0x8a6879, _0x8df020) {
            if ((_0x8df020 = _0x8df020 !== undefined ? _0x8df020 : _0x32a157) !== _0x32a157 && _0x8df020 !== _0x5ea0ca) {
              throw new Error("`````````````");
            }
            super(null, _0x112b4e, _0x210240, _0x50b8a3, _0x94675f, _0x1aef10, _0x8df020, _0x168eee = (_0x168eee = _0x168eee === undefined && _0x8df020 === _0x32a157 ? _0x2339bc : _0x168eee) === undefined && _0x8df020 === _0x5ea0ca ? _0x32836b : _0x168eee, _0x8a6879);
            this.image = {
              width: _0x50d304,
              height: _0x790e6b
            };
            this.magFilter = _0x94675f !== undefined ? _0x94675f : _0x297826;
            this.minFilter = _0x1aef10 !== undefined ? _0x1aef10 : _0x297826;
            this.flipY = false;
            this.generateMipmaps = false;
          }
        }
        _0x4e8160.prototype.isDepthTexture = true;
        class _0x48c6f2 extends _0x3a55ab {
          constructor(_0x5680fa, _0x150dc1) {
            super();
            var _0x39aef2 = 10;
            const _0x40e9a8 = this;
            _0x39aef2 = 14;
            let _0x28d142 = null;
            let _0x42b818 = 1;
            let _0x4c125f = null;
            let _0x47895d = "local-floor";
            var _0x2279c9 = 8;
            const _0x42b67b = _0x5680fa.extensions.has("WEBGL_multisampled_render_to_texture");
            _0x2279c9 = 8;
            let _0xf9931a;
            let _0x8a3c68 = null;
            let _0xcd466 = null;
            let _0x44f727 = null;
            let _0x16c27c = null;
            let _0x2d7700 = null;
            var _0x439d06;
            const _0x3896a6 = _0x150dc1.getContextAttributes();
            _0x439d06 = 16;
            let _0x52d5a5 = null;
            let _0x49e711 = null;
            const _0x10cedc = [];
            const _0x432105 = new Map();
            const _0x4ee2e4 = new _0x41f6fd();
            _0x4ee2e4.layers.enable(1);
            _0x4ee2e4.viewport = new _0x275701();
            const _0x20185a = new _0x41f6fd();
            _0x20185a.layers.enable(2);
            _0x20185a.viewport = new _0x275701();
            const _0x15eec2 = [_0x4ee2e4, _0x20185a];
            const _0x13a060 = new _0x2c8659();
            _0x13a060.layers.enable(1);
            _0x13a060.layers.enable(2);
            let _0x3048cf = null;
            let _0x5289a4 = null;
            function _0x2cbd70(_0x1d08b0) {
              const _0x1981be = _0x432105.get(_0x1d08b0.inputSource);
              if (_0x1981be) {
                _0x1981be.dispatchEvent({
                  type: _0x1d08b0.type,
                  data: _0x1d08b0.inputSource
                });
              }
            }
            function _0x5c84a9() {
              _0x432105.forEach(function (_0x23bd6a, _0x56190a) {
                _0x23bd6a.disconnect(_0x56190a);
              });
              _0x432105.clear();
              _0x3048cf = null;
              _0x5289a4 = null;
              _0x5680fa.setRenderTarget(_0x52d5a5);
              _0x16c27c = null;
              _0x44f727 = null;
              _0xcd466 = null;
              _0x28d142 = null;
              _0x49e711 = null;
              _0x2546c4.stop();
              _0x40e9a8.isPresenting = false;
              _0x40e9a8.dispatchEvent({
                type: "sessionend"
              });
            }
            function _0x48aa99(_0x4a6072) {
              var _0x46cc94 = 16;
              var _0x7e309a = _0x28d142.inputSources;
              _0x46cc94 = 7;
              for (let _0x1cb579 = 0; _0x1cb579 < _0x10cedc.length; _0x1cb579++) {
                _0x432105.set(_0x7e309a[_0x1cb579], _0x10cedc[_0x1cb579]);
              }
              for (let _0x5d4170 = 0; _0x5d4170 < _0x4a6072.removed.length; _0x5d4170++) {
                var _0x5570ae = _0x4a6072.removed[_0x5d4170];
                const _0x146b58 = _0x432105.get(_0x5570ae);
                if (_0x146b58) {
                  _0x146b58.dispatchEvent({
                    type: "disconnected",
                    data: _0x5570ae
                  });
                  _0x432105.delete(_0x5570ae);
                }
              }
              for (let _0x30b0b6 = 0; _0x30b0b6 < _0x4a6072.added.length; _0x30b0b6++) {
                var _0x57ff0a = _0x4a6072.added[_0x30b0b6];
                var _0x598df6;
                const _0x3437da = _0x432105.get(_0x57ff0a);
                _0x598df6 = 12;
                if (_0x3437da) {
                  _0x3437da.dispatchEvent({
                    type: "connected",
                    data: _0x57ff0a
                  });
                }
              }
            }
            this.cameraAutoUpdate = true;
            this.enabled = false;
            this.isPresenting = false;
            this.getController = function (_0x1016b2) {
              var _0x3d589f = 4;
              let _0x41efc8 = _0x10cedc[_0x1016b2];
              _0x3d589f = 6;
              if (_0x41efc8 === undefined) {
                _0x41efc8 = new _0x583396();
                _0x10cedc[_0x1016b2] = _0x41efc8;
              }
              return _0x41efc8.getTargetRaySpace();
            };
            this.getControllerGrip = function (_0x4fb3ac) {
              let _0x4cac29 = _0x10cedc[_0x4fb3ac];
              if (_0x4cac29 === undefined) {
                _0x4cac29 = new _0x583396();
                _0x10cedc[_0x4fb3ac] = _0x4cac29;
              }
              return _0x4cac29.getGripSpace();
            };
            this.getHand = function (_0x1c7904) {
              let _0x3025b6 = _0x10cedc[_0x1c7904];
              if (_0x3025b6 === undefined) {
                _0x3025b6 = new _0x583396();
                _0x10cedc[_0x1c7904] = _0x3025b6;
              }
              return _0x3025b6.getHandSpace();
            };
            this.setFramebufferScaleFactor = function (_0x20977c) {
              _0x42b818 = _0x20977c;
              _0x40e9a8.isPresenting;
            };
            this.setReferenceSpaceType = function (_0x331d90) {
              _0x47895d = _0x331d90;
              _0x40e9a8.isPresenting;
            };
            this.getReferenceSpace = function () {
              return _0x4c125f;
            };
            this.getBaseLayer = function () {
              if (_0x44f727 !== null) {
                return _0x44f727;
              } else {
                return _0x16c27c;
              }
            };
            this.getBinding = function () {
              return _0xcd466;
            };
            this.getFrame = function () {
              return _0x2d7700;
            };
            this.getSession = function () {
              return _0x28d142;
            };
            this.setSession = async function (_0x6f2bcb) {
              _0x28d142 = _0x6f2bcb;
              if (_0x28d142 !== null) {
                _0x52d5a5 = _0x5680fa.getRenderTarget();
                _0x28d142.addEventListener("select", _0x2cbd70);
                _0x28d142.addEventListener("selectstart", _0x2cbd70);
                _0x28d142.addEventListener("selectend", _0x2cbd70);
                _0x28d142.addEventListener("squeeze", _0x2cbd70);
                _0x28d142.addEventListener("squeezestart", _0x2cbd70);
                _0x28d142.addEventListener("squeezeend", _0x2cbd70);
                _0x28d142.addEventListener("end", _0x5c84a9);
                _0x28d142.addEventListener("inputsourceschange", _0x48aa99);
                if (_0x3896a6.xrCompatible !== true) {
                  await _0x150dc1.makeXRCompatible();
                }
                if (_0x28d142.renderState.layers === undefined || _0x5680fa.capabilities.isWebGL2 === false) {
                  var _0x144a30 = {
                    antialias: _0x28d142.renderState.layers !== undefined || _0x3896a6.antialias,
                    alpha: _0x3896a6.alpha,
                    depth: _0x3896a6.depth,
                    stencil: _0x3896a6.stencil,
                    framebufferScaleFactor: _0x42b818
                  };
                  _0x16c27c = new XRWebGLLayer(_0x28d142, _0x150dc1, _0x144a30);
                  _0x28d142.updateRenderState({
                    baseLayer: _0x16c27c
                  });
                  _0x49e711 = new _0x4eb744(_0x16c27c.framebufferWidth, _0x16c27c.framebufferHeight, {
                    format: _0x4f87e5,
                    type: _0x3a53e9,
                    encoding: _0x5680fa.outputEncoding
                  });
                } else {
                  _0xf9931a = _0x3896a6.antialias;
                  let _0xfb2944 = null;
                  let _0x51a65d = null;
                  let _0x3a6ce1 = null;
                  if (_0x3896a6.depth) {
                    _0x3a6ce1 = _0x3896a6.stencil ? 35056 : 33190;
                    _0xfb2944 = _0x3896a6.stencil ? _0x5ea0ca : _0x32a157;
                    _0x51a65d = _0x3896a6.stencil ? _0x32836b : _0x2339bc;
                  }
                  _0x144a30 = {
                    colorFormat: _0x3896a6.alpha || _0xf9931a ? 32856 : 32849,
                    depthFormat: _0x3a6ce1,
                    scaleFactor: _0x42b818
                  };
                  _0xcd466 = new XRWebGLBinding(_0x28d142, _0x150dc1);
                  _0x44f727 = _0xcd466.createProjectionLayer(_0x144a30);
                  _0x28d142.updateRenderState({
                    layers: [_0x44f727]
                  });
                  _0x49e711 = _0xf9931a ? new _0x588426(_0x44f727.textureWidth, _0x44f727.textureHeight, {
                    format: _0x4f87e5,
                    type: _0x3a53e9,
                    depthTexture: new _0x4e8160(_0x44f727.textureWidth, _0x44f727.textureHeight, _0x51a65d, undefined, undefined, undefined, undefined, undefined, undefined, _0xfb2944),
                    stencilBuffer: _0x3896a6.stencil,
                    ignoreDepth: _0x44f727.ignoreDepthValues,
                    useRenderToTexture: _0x42b67b,
                    encoding: _0x5680fa.outputEncoding
                  }) : new _0x4eb744(_0x44f727.textureWidth, _0x44f727.textureHeight, {
                    format: _0x3896a6.alpha ? _0x4f87e5 : _0x1e0c08,
                    type: _0x3a53e9,
                    depthTexture: new _0x4e8160(_0x44f727.textureWidth, _0x44f727.textureHeight, _0x51a65d, undefined, undefined, undefined, undefined, undefined, undefined, _0xfb2944),
                    stencilBuffer: _0x3896a6.stencil,
                    ignoreDepth: _0x44f727.ignoreDepthValues,
                    encoding: _0x5680fa.outputEncoding
                  });
                }
                this.setFoveation(1);
                _0x4c125f = await _0x28d142.requestReferenceSpace(_0x47895d);
                _0x2546c4.setContext(_0x28d142);
                _0x2546c4.start();
                _0x40e9a8.isPresenting = true;
                _0x40e9a8.dispatchEvent({
                  type: "sessionstart"
                });
              }
            };
            const _0x33fd27 = new _0x1d20ef();
            const _0x12554f = new _0x1d20ef();
            function _0x2f8e5a(_0x332980, _0x3caf24) {
              if (_0x3caf24 === null) {
                _0x332980.matrixWorld.copy(_0x332980.matrix);
              } else {
                _0x332980.matrixWorld.multiplyMatrices(_0x3caf24.matrixWorld, _0x332980.matrix);
              }
              _0x332980.matrixWorldInverse.copy(_0x332980.matrixWorld).invert();
            }
            this.updateCamera = function (_0x17346d) {
              if (_0x28d142 !== null) {
                _0x13a060.near = _0x20185a.near = _0x4ee2e4.near = _0x17346d.near;
                _0x13a060.far = _0x20185a.far = _0x4ee2e4.far = _0x17346d.far;
                if (!(_0x3048cf === _0x13a060.near && _0x5289a4 === _0x13a060.far)) {
                  _0x28d142.updateRenderState({
                    depthNear: _0x13a060.near,
                    depthFar: _0x13a060.far
                  });
                  _0x3048cf = _0x13a060.near;
                  _0x5289a4 = _0x13a060.far;
                }
                var _0x17946a = _0x17346d.parent;
                var _0x341200 = _0x13a060.cameras;
                _0x2f8e5a(_0x13a060, _0x17946a);
                for (let _0x12bed2 = 0; _0x12bed2 < _0x341200.length; _0x12bed2++) {
                  _0x2f8e5a(_0x341200[_0x12bed2], _0x17946a);
                }
                _0x13a060.matrixWorld.decompose(_0x13a060.position, _0x13a060.quaternion, _0x13a060.scale);
                _0x17346d.position.copy(_0x13a060.position);
                _0x17346d.quaternion.copy(_0x13a060.quaternion);
                _0x17346d.scale.copy(_0x13a060.scale);
                _0x17346d.matrix.copy(_0x13a060.matrix);
                _0x17346d.matrixWorld.copy(_0x13a060.matrixWorld);
                const _0x4776fa = _0x17346d.children;
                for (let _0x16fb62 = 0, _0x51eba2 = _0x4776fa.length; _0x16fb62 < _0x51eba2; _0x16fb62++) {
                  _0x4776fa[_0x16fb62].updateMatrixWorld(true);
                }
                if (_0x341200.length === 2) {
                  (function (_0x39d2c0, _0x30d4e7, _0x645463) {
                    _0x33fd27.setFromMatrixPosition(_0x30d4e7.matrixWorld);
                    _0x12554f.setFromMatrixPosition(_0x645463.matrixWorld);
                    var _0x4b4423 = _0x33fd27.distanceTo(_0x12554f);
                    var _0x4ff077 = _0x30d4e7.projectionMatrix.elements;
                    var _0x2bc8d7 = _0x645463.projectionMatrix.elements;
                    var _0x4de89e = _0x4ff077[14] / (_0x4ff077[10] - 1);
                    var _0x326842 = _0x4ff077[14] / (_0x4ff077[10] + 1);
                    var _0x10073f = (_0x4ff077[9] + 1) / _0x4ff077[5];
                    var _0x549770 = (_0x4ff077[9] - 1) / _0x4ff077[5];
                    _0x4ff077 = _0x4de89e * (_0x43d21d = (_0x4ff077[8] - 1) / _0x4ff077[0]);
                    _0x2bc8d7 = _0x4de89e * (_0x645463 = (_0x2bc8d7[8] + 1) / _0x2bc8d7[0]);
                    var _0x43d21d = (_0x645463 = _0x4b4423 / (_0x645463 - _0x43d21d)) * -_0x43d21d;
                    _0x30d4e7.matrixWorld.decompose(_0x39d2c0.position, _0x39d2c0.quaternion, _0x39d2c0.scale);
                    _0x39d2c0.translateX(_0x43d21d);
                    _0x39d2c0.translateZ(_0x645463);
                    _0x39d2c0.matrixWorld.compose(_0x39d2c0.position, _0x39d2c0.quaternion, _0x39d2c0.scale);
                    _0x39d2c0.matrixWorldInverse.copy(_0x39d2c0.matrixWorld).invert();
                    _0x4de89e += _0x645463;
                    _0x645463 = _0x326842 + _0x645463;
                    _0x39d2c0.projectionMatrix.makePerspective(_0x4ff077 - _0x43d21d, _0x4b4423 - _0x43d21d + _0x2bc8d7, _0x10073f * _0x326842 / _0x645463 * _0x4de89e, _0x549770 * _0x326842 / _0x645463 * _0x4de89e, _0x4de89e, _0x645463);
                  })(_0x13a060, _0x4ee2e4, _0x20185a);
                } else {
                  _0x13a060.projectionMatrix.copy(_0x4ee2e4.projectionMatrix);
                }
              }
            };
            this.getCamera = function () {
              return _0x13a060;
            };
            this.getFoveation = function () {
              if (_0x44f727 !== null) {
                return _0x44f727.fixedFoveation;
              } else if (_0x16c27c !== null) {
                return _0x16c27c.fixedFoveation;
              } else {
                return undefined;
              }
            };
            this.setFoveation = function (_0x30b654) {
              if (_0x44f727 !== null) {
                _0x44f727.fixedFoveation = _0x30b654;
              }
              if (_0x16c27c !== null && _0x16c27c.fixedFoveation !== undefined) {
                _0x16c27c.fixedFoveation = _0x30b654;
              }
            };
            var _0x447aa7 = 11;
            let _0x51e0fe = null;
            _0x447aa7 = 10;
            const _0x2546c4 = new _0x2ba39f();
            _0x2546c4.setAnimationLoop(function (_0xb5c45b, _0x26cbe6) {
              _0x8a3c68 = _0x26cbe6.getViewerPose(_0x4c125f);
              _0x2d7700 = _0x26cbe6;
              if (_0x8a3c68 !== null) {
                var _0x8a2fef = _0x8a3c68.views;
                if (_0x16c27c !== null) {
                  _0x5680fa.setRenderTargetFramebuffer(_0x49e711, _0x16c27c.framebuffer);
                  _0x5680fa.setRenderTarget(_0x49e711);
                }
                let _0x4f4fd6 = false;
                if (_0x8a2fef.length !== _0x13a060.cameras.length) {
                  _0x13a060.cameras.length = 0;
                  _0x4f4fd6 = true;
                }
                for (let _0x51e545 = 0; _0x51e545 < _0x8a2fef.length; _0x51e545++) {
                  var _0x23c9fa;
                  var _0x1f7929 = _0x8a2fef[_0x51e545];
                  let _0x5be82e = null;
                  if (_0x16c27c !== null) {
                    _0x5be82e = _0x16c27c.getViewport(_0x1f7929);
                  } else {
                    _0x5be82e = (_0x23c9fa = _0xcd466.getViewSubImage(_0x44f727, _0x1f7929)).viewport;
                    if (_0x51e545 === 0) {
                      _0x5680fa.setRenderTargetTextures(_0x49e711, _0x23c9fa.colorTexture, _0x44f727.ignoreDepthValues ? undefined : _0x23c9fa.depthStencilTexture);
                      _0x5680fa.setRenderTarget(_0x49e711);
                    }
                  }
                  const _0x419a6e = _0x15eec2[_0x51e545];
                  _0x419a6e.matrix.fromArray(_0x1f7929.transform.matrix);
                  _0x419a6e.projectionMatrix.fromArray(_0x1f7929.projectionMatrix);
                  _0x419a6e.viewport.set(_0x5be82e.x, _0x5be82e.y, _0x5be82e.width, _0x5be82e.height);
                  if (_0x51e545 === 0) {
                    _0x13a060.matrix.copy(_0x419a6e.matrix);
                  }
                  if (_0x4f4fd6 === true) {
                    _0x13a060.cameras.push(_0x419a6e);
                  }
                }
              }
              var _0x39e35b = _0x28d142.inputSources;
              for (let _0x3625ef = 0; _0x3625ef < _0x10cedc.length; _0x3625ef++) {
                const _0x972219 = _0x10cedc[_0x3625ef];
                var _0x401f7d;
                var _0x37c007 = _0x39e35b[_0x3625ef];
                _0x401f7d = 8;
                _0x972219.update(_0x37c007, _0x26cbe6, _0x4c125f);
              }
              if (_0x51e0fe) {
                _0x51e0fe(_0xb5c45b, _0x26cbe6);
              }
              _0x2d7700 = null;
            });
            this.setAnimationLoop = function (_0x27edc6) {
              _0x51e0fe = _0x27edc6;
            };
            this.dispose = function () {};
          }
        }
        function _0x4a8818(_0x47d03d) {
          function _0x4b77f6(_0x2123ea, _0x23121e) {
            _0x2123ea.opacity.value = _0x23121e.opacity;
            if (_0x23121e.color) {
              _0x2123ea.diffuse.value.copy(_0x23121e.color);
            }
            if (_0x23121e.emissive) {
              _0x2123ea.emissive.value.copy(_0x23121e.emissive).multiplyScalar(_0x23121e.emissiveIntensity);
            }
            if (_0x23121e.map) {
              _0x2123ea.map.value = _0x23121e.map;
            }
            if (_0x23121e.alphaMap) {
              _0x2123ea.alphaMap.value = _0x23121e.alphaMap;
            }
            if (_0x23121e.specularMap) {
              _0x2123ea.specularMap.value = _0x23121e.specularMap;
            }
            if (_0x23121e.alphaTest > 0) {
              _0x2123ea.alphaTest.value = _0x23121e.alphaTest;
            }
            var _0x65191a;
            var _0x929e1f = _0x47d03d.get(_0x23121e).envMap;
            _0x65191a = 10;
            let _0x5dc04f;
            let _0x338ebf;
            if (_0x929e1f) {
              _0x2123ea.envMap.value = _0x929e1f;
              _0x2123ea.flipEnvMap.value = _0x929e1f.isCubeTexture && _0x929e1f.isRenderTargetTexture === false ? -1 : 1;
              _0x2123ea.reflectivity.value = _0x23121e.reflectivity;
              _0x2123ea.ior.value = _0x23121e.ior;
              _0x2123ea.refractionRatio.value = _0x23121e.refractionRatio;
            }
            if (_0x23121e.lightMap) {
              _0x2123ea.lightMap.value = _0x23121e.lightMap;
              _0x2123ea.lightMapIntensity.value = _0x23121e.lightMapIntensity;
            }
            if (_0x23121e.aoMap) {
              _0x2123ea.aoMap.value = _0x23121e.aoMap;
              _0x2123ea.aoMapIntensity.value = _0x23121e.aoMapIntensity;
            }
            if (_0x23121e.map) {
              _0x5dc04f = _0x23121e.map;
            } else if (_0x23121e.specularMap) {
              _0x5dc04f = _0x23121e.specularMap;
            } else if (_0x23121e.displacementMap) {
              _0x5dc04f = _0x23121e.displacementMap;
            } else if (_0x23121e.normalMap) {
              _0x5dc04f = _0x23121e.normalMap;
            } else if (_0x23121e.bumpMap) {
              _0x5dc04f = _0x23121e.bumpMap;
            } else if (_0x23121e.roughnessMap) {
              _0x5dc04f = _0x23121e.roughnessMap;
            } else if (_0x23121e.metalnessMap) {
              _0x5dc04f = _0x23121e.metalnessMap;
            } else if (_0x23121e.alphaMap) {
              _0x5dc04f = _0x23121e.alphaMap;
            } else if (_0x23121e.emissiveMap) {
              _0x5dc04f = _0x23121e.emissiveMap;
            } else if (_0x23121e.clearcoatMap) {
              _0x5dc04f = _0x23121e.clearcoatMap;
            } else if (_0x23121e.clearcoatNormalMap) {
              _0x5dc04f = _0x23121e.clearcoatNormalMap;
            } else if (_0x23121e.clearcoatRoughnessMap) {
              _0x5dc04f = _0x23121e.clearcoatRoughnessMap;
            } else if (_0x23121e.specularIntensityMap) {
              _0x5dc04f = _0x23121e.specularIntensityMap;
            } else if (_0x23121e.specularColorMap) {
              _0x5dc04f = _0x23121e.specularColorMap;
            } else if (_0x23121e.transmissionMap) {
              _0x5dc04f = _0x23121e.transmissionMap;
            } else if (_0x23121e.thicknessMap) {
              _0x5dc04f = _0x23121e.thicknessMap;
            } else if (_0x23121e.sheenColorMap) {
              _0x5dc04f = _0x23121e.sheenColorMap;
            } else if (_0x23121e.sheenRoughnessMap) {
              _0x5dc04f = _0x23121e.sheenRoughnessMap;
            }
            if (_0x5dc04f !== undefined) {
              if (_0x5dc04f.isWebGLRenderTarget) {
                _0x5dc04f = _0x5dc04f.texture;
              }
              if (_0x5dc04f.matrixAutoUpdate === true) {
                _0x5dc04f.updateMatrix();
              }
              _0x2123ea.uvTransform.value.copy(_0x5dc04f.matrix);
            }
            if (_0x23121e.aoMap) {
              _0x338ebf = _0x23121e.aoMap;
            } else if (_0x23121e.lightMap) {
              _0x338ebf = _0x23121e.lightMap;
            }
            if (_0x338ebf !== undefined) {
              if (_0x338ebf.isWebGLRenderTarget) {
                _0x338ebf = _0x338ebf.texture;
              }
              if (_0x338ebf.matrixAutoUpdate === true) {
                _0x338ebf.updateMatrix();
              }
              _0x2123ea.uv2Transform.value.copy(_0x338ebf.matrix);
            }
          }
          function _0x3adbb4(_0x5a9840, _0x74d371) {
            _0x5a9840.roughness.value = _0x74d371.roughness;
            _0x5a9840.metalness.value = _0x74d371.metalness;
            if (_0x74d371.roughnessMap) {
              _0x5a9840.roughnessMap.value = _0x74d371.roughnessMap;
            }
            if (_0x74d371.metalnessMap) {
              _0x5a9840.metalnessMap.value = _0x74d371.metalnessMap;
            }
            if (_0x74d371.emissiveMap) {
              _0x5a9840.emissiveMap.value = _0x74d371.emissiveMap;
            }
            if (_0x74d371.bumpMap) {
              _0x5a9840.bumpMap.value = _0x74d371.bumpMap;
              _0x5a9840.bumpScale.value = _0x74d371.bumpScale;
              if (_0x74d371.side === _0x460782) {
                _0x5a9840.bumpScale.value *= -1;
              }
            }
            if (_0x74d371.normalMap) {
              _0x5a9840.normalMap.value = _0x74d371.normalMap;
              _0x5a9840.normalScale.value.copy(_0x74d371.normalScale);
              if (_0x74d371.side === _0x460782) {
                _0x5a9840.normalScale.value.negate();
              }
            }
            if (_0x74d371.displacementMap) {
              _0x5a9840.displacementMap.value = _0x74d371.displacementMap;
              _0x5a9840.displacementScale.value = _0x74d371.displacementScale;
              _0x5a9840.displacementBias.value = _0x74d371.displacementBias;
            }
            if (_0x47d03d.get(_0x74d371).envMap) {
              _0x5a9840.envMapIntensity.value = _0x74d371.envMapIntensity;
            }
          }
          return {
            refreshFogUniforms: function (_0xdecd3c, _0x3b2096) {
              _0xdecd3c.fogColor.value.copy(_0x3b2096.color);
              if (_0x3b2096.isFog) {
                _0xdecd3c.fogNear.value = _0x3b2096.near;
                _0xdecd3c.fogFar.value = _0x3b2096.far;
              } else if (_0x3b2096.isFogExp2) {
                _0xdecd3c.fogDensity.value = _0x3b2096.density;
              }
            },
            refreshMaterialUniforms: function (_0x2889be, _0x22f4ae, _0x18579a, _0x181921, _0x25e5ea) {
              var _0x11cc1e;
              var _0x3e6af2;
              var _0x1ff6f7;
              var _0x485117;
              if (_0x22f4ae.isMeshBasicMaterial) {
                _0x4b77f6(_0x2889be, _0x22f4ae);
              } else if (_0x22f4ae.isMeshLambertMaterial) {
                _0x4b77f6(_0x2889be, _0x22f4ae);
                _0x1ff6f7 = _0x2889be;
                if ((_0x485117 = _0x22f4ae).emissiveMap) {
                  _0x1ff6f7.emissiveMap.value = _0x485117.emissiveMap;
                }
              } else if (_0x22f4ae.isMeshToonMaterial) {
                _0x4b77f6(_0x2889be, _0x22f4ae);
                (function (_0x4ac816, _0x470e10) {
                  if (_0x470e10.gradientMap) {
                    _0x4ac816.gradientMap.value = _0x470e10.gradientMap;
                  }
                  if (_0x470e10.emissiveMap) {
                    _0x4ac816.emissiveMap.value = _0x470e10.emissiveMap;
                  }
                  if (_0x470e10.bumpMap) {
                    _0x4ac816.bumpMap.value = _0x470e10.bumpMap;
                    _0x4ac816.bumpScale.value = _0x470e10.bumpScale;
                    if (_0x470e10.side === _0x460782) {
                      _0x4ac816.bumpScale.value *= -1;
                    }
                  }
                  if (_0x470e10.normalMap) {
                    _0x4ac816.normalMap.value = _0x470e10.normalMap;
                    _0x4ac816.normalScale.value.copy(_0x470e10.normalScale);
                    if (_0x470e10.side === _0x460782) {
                      _0x4ac816.normalScale.value.negate();
                    }
                  }
                  if (_0x470e10.displacementMap) {
                    _0x4ac816.displacementMap.value = _0x470e10.displacementMap;
                    _0x4ac816.displacementScale.value = _0x470e10.displacementScale;
                    _0x4ac816.displacementBias.value = _0x470e10.displacementBias;
                  }
                })(_0x2889be, _0x22f4ae);
              } else if (_0x22f4ae.isMeshPhongMaterial) {
                _0x4b77f6(_0x2889be, _0x22f4ae);
                (function (_0x86f5bf, _0x1b56f8) {
                  _0x86f5bf.specular.value.copy(_0x1b56f8.specular);
                  _0x86f5bf.shininess.value = Math.max(_0x1b56f8.shininess, 0.0001);
                  if (_0x1b56f8.emissiveMap) {
                    _0x86f5bf.emissiveMap.value = _0x1b56f8.emissiveMap;
                  }
                  if (_0x1b56f8.bumpMap) {
                    _0x86f5bf.bumpMap.value = _0x1b56f8.bumpMap;
                    _0x86f5bf.bumpScale.value = _0x1b56f8.bumpScale;
                    if (_0x1b56f8.side === _0x460782) {
                      _0x86f5bf.bumpScale.value *= -1;
                    }
                  }
                  if (_0x1b56f8.normalMap) {
                    _0x86f5bf.normalMap.value = _0x1b56f8.normalMap;
                    _0x86f5bf.normalScale.value.copy(_0x1b56f8.normalScale);
                    if (_0x1b56f8.side === _0x460782) {
                      _0x86f5bf.normalScale.value.negate();
                    }
                  }
                  if (_0x1b56f8.displacementMap) {
                    _0x86f5bf.displacementMap.value = _0x1b56f8.displacementMap;
                    _0x86f5bf.displacementScale.value = _0x1b56f8.displacementScale;
                    _0x86f5bf.displacementBias.value = _0x1b56f8.displacementBias;
                  }
                })(_0x2889be, _0x22f4ae);
              } else if (_0x22f4ae.isMeshStandardMaterial) {
                _0x4b77f6(_0x2889be, _0x22f4ae);
                if (_0x22f4ae.isMeshPhysicalMaterial) {
                  (function (_0x397d52, _0x429a88, _0x43a40c) {
                    _0x3adbb4(_0x397d52, _0x429a88);
                    _0x397d52.ior.value = _0x429a88.ior;
                    if (_0x429a88.sheen > 0) {
                      _0x397d52.sheenColor.value.copy(_0x429a88.sheenColor).multiplyScalar(_0x429a88.sheen);
                      _0x397d52.sheenRoughness.value = _0x429a88.sheenRoughness;
                      if (_0x429a88.sheenColorMap) {
                        _0x397d52.sheenColorMap.value = _0x429a88.sheenColorMap;
                      }
                      if (_0x429a88.sheenRoughnessMap) {
                        _0x397d52.sheenRoughnessMap.value = _0x429a88.sheenRoughnessMap;
                      }
                    }
                    if (_0x429a88.clearcoat > 0) {
                      _0x397d52.clearcoat.value = _0x429a88.clearcoat;
                      _0x397d52.clearcoatRoughness.value = _0x429a88.clearcoatRoughness;
                      if (_0x429a88.clearcoatMap) {
                        _0x397d52.clearcoatMap.value = _0x429a88.clearcoatMap;
                      }
                      if (_0x429a88.clearcoatRoughnessMap) {
                        _0x397d52.clearcoatRoughnessMap.value = _0x429a88.clearcoatRoughnessMap;
                      }
                      if (_0x429a88.clearcoatNormalMap) {
                        _0x397d52.clearcoatNormalScale.value.copy(_0x429a88.clearcoatNormalScale);
                        _0x397d52.clearcoatNormalMap.value = _0x429a88.clearcoatNormalMap;
                        if (_0x429a88.side === _0x460782) {
                          _0x397d52.clearcoatNormalScale.value.negate();
                        }
                      }
                    }
                    if (_0x429a88.transmission > 0) {
                      _0x397d52.transmission.value = _0x429a88.transmission;
                      _0x397d52.transmissionSamplerMap.value = _0x43a40c.texture;
                      _0x397d52.transmissionSamplerSize.value.set(_0x43a40c.width, _0x43a40c.height);
                      if (_0x429a88.transmissionMap) {
                        _0x397d52.transmissionMap.value = _0x429a88.transmissionMap;
                      }
                      _0x397d52.thickness.value = _0x429a88.thickness;
                      if (_0x429a88.thicknessMap) {
                        _0x397d52.thicknessMap.value = _0x429a88.thicknessMap;
                      }
                      _0x397d52.attenuationDistance.value = _0x429a88.attenuationDistance;
                      _0x397d52.attenuationColor.value.copy(_0x429a88.attenuationColor);
                    }
                    _0x397d52.specularIntensity.value = _0x429a88.specularIntensity;
                    _0x397d52.specularColor.value.copy(_0x429a88.specularColor);
                    if (_0x429a88.specularIntensityMap) {
                      _0x397d52.specularIntensityMap.value = _0x429a88.specularIntensityMap;
                    }
                    if (_0x429a88.specularColorMap) {
                      _0x397d52.specularColorMap.value = _0x429a88.specularColorMap;
                    }
                  })(_0x2889be, _0x22f4ae, _0x25e5ea);
                } else {
                  _0x3adbb4(_0x2889be, _0x22f4ae);
                }
              } else if (_0x22f4ae.isMeshMatcapMaterial) {
                _0x4b77f6(_0x2889be, _0x22f4ae);
                (function (_0x10b284, _0x531534) {
                  if (_0x531534.matcap) {
                    _0x10b284.matcap.value = _0x531534.matcap;
                  }
                  if (_0x531534.bumpMap) {
                    _0x10b284.bumpMap.value = _0x531534.bumpMap;
                    _0x10b284.bumpScale.value = _0x531534.bumpScale;
                    if (_0x531534.side === _0x460782) {
                      _0x10b284.bumpScale.value *= -1;
                    }
                  }
                  if (_0x531534.normalMap) {
                    _0x10b284.normalMap.value = _0x531534.normalMap;
                    _0x10b284.normalScale.value.copy(_0x531534.normalScale);
                    if (_0x531534.side === _0x460782) {
                      _0x10b284.normalScale.value.negate();
                    }
                  }
                  if (_0x531534.displacementMap) {
                    _0x10b284.displacementMap.value = _0x531534.displacementMap;
                    _0x10b284.displacementScale.value = _0x531534.displacementScale;
                    _0x10b284.displacementBias.value = _0x531534.displacementBias;
                  }
                })(_0x2889be, _0x22f4ae);
              } else if (_0x22f4ae.isMeshDepthMaterial) {
                _0x4b77f6(_0x2889be, _0x22f4ae);
                _0x11cc1e = _0x2889be;
                if ((_0x3e6af2 = _0x22f4ae).displacementMap) {
                  _0x11cc1e.displacementMap.value = _0x3e6af2.displacementMap;
                  _0x11cc1e.displacementScale.value = _0x3e6af2.displacementScale;
                  _0x11cc1e.displacementBias.value = _0x3e6af2.displacementBias;
                }
              } else if (_0x22f4ae.isMeshDistanceMaterial) {
                _0x4b77f6(_0x2889be, _0x22f4ae);
                (function (_0x2650eb, _0x163384) {
                  if (_0x163384.displacementMap) {
                    _0x2650eb.displacementMap.value = _0x163384.displacementMap;
                    _0x2650eb.displacementScale.value = _0x163384.displacementScale;
                    _0x2650eb.displacementBias.value = _0x163384.displacementBias;
                  }
                  _0x2650eb.referencePosition.value.copy(_0x163384.referencePosition);
                  _0x2650eb.nearDistance.value = _0x163384.nearDistance;
                  _0x2650eb.farDistance.value = _0x163384.farDistance;
                })(_0x2889be, _0x22f4ae);
              } else if (_0x22f4ae.isMeshNormalMaterial) {
                _0x4b77f6(_0x2889be, _0x22f4ae);
                (function (_0x2bd8f1, _0x3c50b5) {
                  if (_0x3c50b5.bumpMap) {
                    _0x2bd8f1.bumpMap.value = _0x3c50b5.bumpMap;
                    _0x2bd8f1.bumpScale.value = _0x3c50b5.bumpScale;
                    if (_0x3c50b5.side === _0x460782) {
                      _0x2bd8f1.bumpScale.value *= -1;
                    }
                  }
                  if (_0x3c50b5.normalMap) {
                    _0x2bd8f1.normalMap.value = _0x3c50b5.normalMap;
                    _0x2bd8f1.normalScale.value.copy(_0x3c50b5.normalScale);
                    if (_0x3c50b5.side === _0x460782) {
                      _0x2bd8f1.normalScale.value.negate();
                    }
                  }
                  if (_0x3c50b5.displacementMap) {
                    _0x2bd8f1.displacementMap.value = _0x3c50b5.displacementMap;
                    _0x2bd8f1.displacementScale.value = _0x3c50b5.displacementScale;
                    _0x2bd8f1.displacementBias.value = _0x3c50b5.displacementBias;
                  }
                })(_0x2889be, _0x22f4ae);
              } else if (_0x22f4ae.isLineBasicMaterial) {
                _0x11cc1e = _0x22f4ae;
                (_0x3e6af2 = _0x2889be).diffuse.value.copy(_0x11cc1e.color);
                _0x3e6af2.opacity.value = _0x11cc1e.opacity;
                if (_0x22f4ae.isLineDashedMaterial) {
                  _0x3e6af2 = _0x22f4ae;
                  (_0x11cc1e = _0x2889be).dashSize.value = _0x3e6af2.dashSize;
                  _0x11cc1e.totalSize.value = _0x3e6af2.dashSize + _0x3e6af2.gapSize;
                  _0x11cc1e.scale.value = _0x3e6af2.scale;
                }
              } else if (_0x22f4ae.isPointsMaterial) {
                (function (_0x24a908, _0x341397, _0x1c766e, _0x191c24) {
                  let _0x63b7f;
                  _0x24a908.diffuse.value.copy(_0x341397.color);
                  _0x24a908.opacity.value = _0x341397.opacity;
                  _0x24a908.size.value = _0x341397.size * _0x1c766e;
                  _0x24a908.scale.value = _0x191c24 * 0.5;
                  if (_0x341397.map) {
                    _0x24a908.map.value = _0x341397.map;
                  }
                  if (_0x341397.alphaMap) {
                    _0x24a908.alphaMap.value = _0x341397.alphaMap;
                  }
                  if (_0x341397.alphaTest > 0) {
                    _0x24a908.alphaTest.value = _0x341397.alphaTest;
                  }
                  if (_0x341397.map) {
                    _0x63b7f = _0x341397.map;
                  } else if (_0x341397.alphaMap) {
                    _0x63b7f = _0x341397.alphaMap;
                  }
                  if (_0x63b7f !== undefined) {
                    if (_0x63b7f.matrixAutoUpdate === true) {
                      _0x63b7f.updateMatrix();
                    }
                    _0x24a908.uvTransform.value.copy(_0x63b7f.matrix);
                  }
                })(_0x2889be, _0x22f4ae, _0x18579a, _0x181921);
              } else if (_0x22f4ae.isSpriteMaterial) {
                (function (_0x5f0dec, _0x156005) {
                  var _0x2435a8;
                  let _0x17d7f1;
                  _0x2435a8 = 9;
                  _0x5f0dec.diffuse.value.copy(_0x156005.color);
                  _0x5f0dec.opacity.value = _0x156005.opacity;
                  _0x5f0dec.rotation.value = _0x156005.rotation;
                  if (_0x156005.map) {
                    _0x5f0dec.map.value = _0x156005.map;
                  }
                  if (_0x156005.alphaMap) {
                    _0x5f0dec.alphaMap.value = _0x156005.alphaMap;
                  }
                  if (_0x156005.alphaTest > 0) {
                    _0x5f0dec.alphaTest.value = _0x156005.alphaTest;
                  }
                  if (_0x156005.map) {
                    _0x17d7f1 = _0x156005.map;
                  } else if (_0x156005.alphaMap) {
                    _0x17d7f1 = _0x156005.alphaMap;
                  }
                  if (_0x17d7f1 !== undefined) {
                    if (_0x17d7f1.matrixAutoUpdate === true) {
                      _0x17d7f1.updateMatrix();
                    }
                    _0x5f0dec.uvTransform.value.copy(_0x17d7f1.matrix);
                  }
                })(_0x2889be, _0x22f4ae);
              } else if (_0x22f4ae.isShadowMaterial) {
                _0x2889be.color.value.copy(_0x22f4ae.color);
                _0x2889be.opacity.value = _0x22f4ae.opacity;
              } else if (_0x22f4ae.isShaderMaterial) {
                _0x22f4ae.uniformsNeedUpdate = false;
              }
            }
          };
        }
        function _0x45974d(_0x2265e5 = {}) {
          const _0x26aed1 = _0x2265e5.canvas !== undefined ? _0x2265e5.canvas : function () {
            var _0x37657f = 9;
            const _0x473053 = _0xc7d73e("canvas");
            _0x37657f = 8;
            _0x473053.style.display = "block";
            return _0x473053;
          }();
          const _0x2a735a = _0x2265e5.context !== undefined ? _0x2265e5.context : null;
          const _0x216231 = _0x2265e5.alpha !== undefined && _0x2265e5.alpha;
          const _0x127217 = _0x2265e5.depth === undefined || _0x2265e5.depth;
          const _0x254a9f = _0x2265e5.stencil === undefined || _0x2265e5.stencil;
          const _0x1bc4d4 = _0x2265e5.antialias !== undefined && _0x2265e5.antialias;
          const _0x81f2bc = _0x2265e5.premultipliedAlpha === undefined || _0x2265e5.premultipliedAlpha;
          const _0x47ff67 = _0x2265e5.preserveDrawingBuffer !== undefined && _0x2265e5.preserveDrawingBuffer;
          const _0xb048c1 = _0x2265e5.powerPreference !== undefined ? _0x2265e5.powerPreference : "default";
          const _0x273ac9 = _0x2265e5.failIfMajorPerformanceCaveat !== undefined && _0x2265e5.failIfMajorPerformanceCaveat;
          let _0x34a9b7 = null;
          let _0x3e633e = null;
          const _0x201c43 = [];
          const _0x1d7731 = [];
          this.domElement = _0x26aed1;
          this.debug = {
            checkShaderErrors: true
          };
          this.autoClear = true;
          this.autoClearColor = true;
          this.autoClearDepth = true;
          this.autoClearStencil = true;
          this.sortObjects = true;
          this.clippingPlanes = [];
          this.localClippingEnabled = false;
          this.outputEncoding = _0xca2f2a;
          this.physicallyCorrectLights = false;
          this.toneMapping = _0x510390;
          this.toneMappingExposure = 1;
          const _0x167ecc = this;
          let _0x5d8273 = false;
          let _0x3b929f = 0;
          let _0x19d782 = 0;
          let _0x52716a = null;
          let _0x246cd4 = -1;
          let _0x3095c3 = null;
          const _0x4f043c = new _0x275701();
          const _0xe8f919 = new _0x275701();
          let _0x466e65 = null;
          let _0x51947b = _0x26aed1.width;
          let _0x53c2ef = _0x26aed1.height;
          let _0x5f0d21 = 1;
          let _0x57dd22 = null;
          let _0x3bfe03 = null;
          const _0x4b060f = new _0x275701(0, 0, _0x51947b, _0x53c2ef);
          const _0x257092 = new _0x275701(0, 0, _0x51947b, _0x53c2ef);
          let _0x3fa74c = false;
          const _0x3e9a2f = [];
          const _0x55701a = new _0x1d3bc5();
          let _0x33a12c = false;
          let _0x368e3b = false;
          let _0x18dcb0 = null;
          const _0xcda287 = new _0x33b2c9();
          const _0x387dfe = new _0x1d20ef();
          const _0x1e3773 = {
            background: null,
            fog: null,
            environment: null,
            overrideMaterial: null,
            isScene: true
          };
          function _0x330eaa() {
            if (_0x52716a === null) {
              return _0x5f0d21;
            } else {
              return 1;
            }
          }
          let _0x16a8b7;
          let _0x33fe0e;
          let _0x29eb99;
          let _0x49be59;
          let _0x3c04de;
          let _0x198baf;
          let _0x436c99;
          let _0x83b344;
          let _0x3a120e;
          let _0x334cd1;
          let _0x1ff9bf;
          let _0x6250ee;
          let _0x35191f;
          let _0x239a7d;
          let _0x45785a;
          let _0x2d914f;
          let _0x5c55d8;
          let _0x5f59c1;
          let _0x3663d3;
          let _0x52e633;
          let _0x27f690;
          let _0x365395;
          let _0x36472b;
          let _0x260dc2 = _0x2a735a;
          function _0x5ab23e(_0x102f5d, _0x50b2a6) {
            for (let _0x1a9edb = 0; _0x1a9edb < _0x102f5d.length; _0x1a9edb++) {
              var _0x814a44 = _0x102f5d[_0x1a9edb];
              if ((_0x814a44 = _0x26aed1.getContext(_0x814a44, _0x50b2a6)) !== null) {
                return _0x814a44;
              }
            }
            return null;
          }
          try {
            var _0x171e97 = {
              alpha: _0x216231,
              depth: _0x127217,
              stencil: _0x254a9f,
              antialias: _0x1bc4d4,
              premultipliedAlpha: _0x81f2bc,
              preserveDrawingBuffer: _0x47ff67,
              powerPreference: _0xb048c1,
              failIfMajorPerformanceCaveat: _0x273ac9
            };
            if ("setAttribute" in _0x26aed1) {
              _0x26aed1.setAttribute("data-engine", "three.js r" + _0x57ec7c);
            }
            _0x26aed1.addEventListener("webglcontextlost", _0x280163, false);
            _0x26aed1.addEventListener("webglcontextrestored", _0x463c6b, false);
            if (_0x260dc2 === null) {
              const _0x583307 = ["webgl2", "webgl", "experimental-webgl"];
              if (_0x167ecc.isWebGL1Renderer === true) {
                _0x583307.shift();
              }
              _0x260dc2 = _0x5ab23e(_0x583307, _0x171e97);
              if (_0x260dc2 === null) {
                throw _0x5ab23e(_0x583307) ? new Error("`````````") : new Error("````````");
              }
            }
            if (_0x260dc2.getShaderPrecisionFormat === undefined) {
              _0x260dc2.getShaderPrecisionFormat = function () {
                return {
                  rangeMin: 1,
                  rangeMax: 1,
                  precision: 1
                };
              };
            }
          } catch (_0x593a1e) {
            throw _0x593a1e;
          }
          function _0x582c26() {
            _0x16a8b7 = new _0x30c2d7(_0x260dc2);
            _0x33fe0e = new _0x211eb5(_0x260dc2, _0x16a8b7, _0x2265e5);
            _0x16a8b7.init(_0x33fe0e);
            _0x365395 = new _0x37ac40(_0x260dc2, _0x16a8b7, _0x33fe0e);
            _0x29eb99 = new _0x36dea7(_0x260dc2, _0x16a8b7, _0x33fe0e);
            _0x3e9a2f[0] = 1029;
            _0x49be59 = new _0x5b9ab4(_0x260dc2);
            _0x3c04de = new _0x5e74ff();
            _0x198baf = new _0x12eb50(_0x260dc2, _0x16a8b7, _0x29eb99, _0x3c04de, _0x33fe0e, _0x365395, _0x49be59);
            _0x436c99 = new _0x54cd68(_0x167ecc);
            _0x83b344 = new _0x415f5c(_0x167ecc);
            _0x3a120e = new _0x1e4e91(_0x260dc2, _0x33fe0e);
            _0x36472b = new _0x3d17f9(_0x260dc2, _0x16a8b7, _0x3a120e, _0x33fe0e);
            _0x334cd1 = new _0x4ad8f6(_0x260dc2, _0x3a120e, _0x49be59, _0x36472b);
            _0x1ff9bf = new _0x44ac8c(_0x260dc2, _0x334cd1, _0x3a120e, _0x49be59);
            _0x3663d3 = new _0x4556a6(_0x260dc2, _0x33fe0e, _0x198baf);
            _0x2d914f = new _0x580445(_0x3c04de);
            _0x6250ee = new _0x33fe06(_0x167ecc, _0x436c99, _0x83b344, _0x16a8b7, _0x33fe0e, _0x36472b, _0x2d914f);
            _0x35191f = new _0x4a8818(_0x3c04de);
            _0x239a7d = new _0x4331c9();
            _0x45785a = new _0x3e303e(_0x16a8b7, _0x33fe0e);
            _0x5f59c1 = new _0x4b6b75(_0x167ecc, _0x436c99, _0x29eb99, _0x1ff9bf, _0x81f2bc);
            _0x5c55d8 = new _0x1eaba7(_0x167ecc, _0x1ff9bf, _0x33fe0e);
            _0x52e633 = new _0x2898f4(_0x260dc2, _0x16a8b7, _0x49be59, _0x33fe0e);
            _0x27f690 = new _0x5eb7c1(_0x260dc2, _0x16a8b7, _0x49be59, _0x33fe0e);
            _0x49be59.programs = _0x6250ee.programs;
            _0x167ecc.capabilities = _0x33fe0e;
            _0x167ecc.extensions = _0x16a8b7;
            _0x167ecc.properties = _0x3c04de;
            _0x167ecc.renderLists = _0x239a7d;
            _0x167ecc.shadowMap = _0x5c55d8;
            _0x167ecc.state = _0x29eb99;
            _0x167ecc.info = _0x49be59;
          }
          _0x582c26();
          const _0x28200b = new _0x48c6f2(_0x167ecc, _0x260dc2);
          function _0x280163(_0x45eac5) {
            _0x45eac5.preventDefault();
            _0x5d8273 = true;
          }
          function _0x463c6b() {
            _0x5d8273 = false;
            var _0xdaab3f = _0x49be59.autoReset;
            var _0xe91869 = _0x5c55d8.enabled;
            var _0x4aa1ff = _0x5c55d8.autoUpdate;
            var _0x586bcd = _0x5c55d8.needsUpdate;
            var _0x21b4fb = _0x5c55d8.type;
            _0x582c26();
            _0x49be59.autoReset = _0xdaab3f;
            _0x5c55d8.enabled = _0xe91869;
            _0x5c55d8.autoUpdate = _0x4aa1ff;
            _0x5c55d8.needsUpdate = _0x586bcd;
            _0x5c55d8.type = _0x21b4fb;
          }
          function _0x24d94c(_0x1b97dc) {
            const _0x3497d6 = _0x1b97dc.target;
            _0x3497d6.removeEventListener("dispose", _0x24d94c);
            (function (_0x47c011) {
              const _0x4eb264 = _0x3c04de.get(_0x47c011).programs;
              if (_0x4eb264 !== undefined) {
                _0x4eb264.forEach(function (_0x21655d) {
                  _0x6250ee.releaseProgram(_0x21655d);
                });
                if (_0x47c011.isShaderMaterial) {
                  _0x6250ee.releaseShaderCache(_0x47c011);
                }
              }
            })(_0x1b97dc = _0x3497d6);
            _0x3c04de.remove(_0x1b97dc);
          }
          this.xr = _0x28200b;
          this.getContext = function () {
            return _0x260dc2;
          };
          this.getContextAttributes = function () {
            return _0x260dc2.getContextAttributes();
          };
          this.forceContextLoss = function () {
            const _0x2bc18d = _0x16a8b7.get("WEBGL_lose_context");
            if (_0x2bc18d) {
              _0x2bc18d.loseContext();
            }
          };
          this.forceContextRestore = function () {
            const _0x4ee118 = _0x16a8b7.get("WEBGL_lose_context");
            if (_0x4ee118) {
              _0x4ee118.restoreContext();
            }
          };
          this.getPixelRatio = function () {
            return _0x5f0d21;
          };
          this.setPixelRatio = function (_0x400545) {
            if (_0x400545 !== undefined) {
              _0x5f0d21 = _0x400545;
              this.setSize(_0x51947b, _0x53c2ef, false);
            }
          };
          this.getSize = function (_0x508352) {
            return _0x508352.set(_0x51947b, _0x53c2ef);
          };
          this.setSize = function (_0x3b55e6, _0x7b1ad3, _0x2098e4) {
            if (!_0x28200b.isPresenting) {
              _0x51947b = _0x3b55e6;
              _0x53c2ef = _0x7b1ad3;
              _0x26aed1.width = Math.floor(_0x3b55e6 * _0x5f0d21);
              _0x26aed1.height = Math.floor(_0x7b1ad3 * _0x5f0d21);
              if (_0x2098e4 !== false) {
                _0x26aed1.style.width = _0x3b55e6 + "px";
                _0x26aed1.style.height = _0x7b1ad3 + "px";
              }
              this.setViewport(0, 0, _0x3b55e6, _0x7b1ad3);
            }
          };
          this.getDrawingBufferSize = function (_0x3daae8) {
            return _0x3daae8.set(_0x51947b * _0x5f0d21, _0x53c2ef * _0x5f0d21).floor();
          };
          this.setDrawingBufferSize = function (_0x1c107, _0x29d02c, _0x2a06be) {
            _0x51947b = _0x1c107;
            _0x53c2ef = _0x29d02c;
            _0x5f0d21 = _0x2a06be;
            _0x26aed1.width = Math.floor(_0x1c107 * _0x2a06be);
            _0x26aed1.height = Math.floor(_0x29d02c * _0x2a06be);
            this.setViewport(0, 0, _0x1c107, _0x29d02c);
          };
          this.getCurrentViewport = function (_0x3fc960) {
            return _0x3fc960.copy(_0x4f043c);
          };
          this.getViewport = function (_0x16d232) {
            return _0x16d232.copy(_0x4b060f);
          };
          this.setViewport = function (_0x5c0124, _0x5eadd9, _0x5d1b75, _0x5793a6) {
            if (_0x5c0124.isVector4) {
              _0x4b060f.set(_0x5c0124.x, _0x5c0124.y, _0x5c0124.z, _0x5c0124.w);
            } else {
              _0x4b060f.set(_0x5c0124, _0x5eadd9, _0x5d1b75, _0x5793a6);
            }
            _0x29eb99.viewport(_0x4f043c.copy(_0x4b060f).multiplyScalar(_0x5f0d21).floor());
          };
          this.getScissor = function (_0x33b2f3) {
            return _0x33b2f3.copy(_0x257092);
          };
          this.setScissor = function (_0x2fc2c9, _0x2704dd, _0x1644f8, _0x49560c) {
            if (_0x2fc2c9.isVector4) {
              _0x257092.set(_0x2fc2c9.x, _0x2fc2c9.y, _0x2fc2c9.z, _0x2fc2c9.w);
            } else {
              _0x257092.set(_0x2fc2c9, _0x2704dd, _0x1644f8, _0x49560c);
            }
            _0x29eb99.scissor(_0xe8f919.copy(_0x257092).multiplyScalar(_0x5f0d21).floor());
          };
          this.getScissorTest = function () {
            return _0x3fa74c;
          };
          this.setScissorTest = function (_0x2c67a8) {
            _0x29eb99.setScissorTest(_0x3fa74c = _0x2c67a8);
          };
          this.setOpaqueSort = function (_0x55b141) {
            _0x57dd22 = _0x55b141;
          };
          this.setTransparentSort = function (_0x1544fc) {
            _0x3bfe03 = _0x1544fc;
          };
          this.getClearColor = function (_0x3a8c96) {
            return _0x3a8c96.copy(_0x5f59c1.getClearColor());
          };
          this.setClearColor = function () {
            _0x5f59c1.setClearColor.apply(_0x5f59c1, arguments);
          };
          this.getClearAlpha = function () {
            return _0x5f59c1.getClearAlpha();
          };
          this.setClearAlpha = function () {
            _0x5f59c1.setClearAlpha.apply(_0x5f59c1, arguments);
          };
          this.clear = function (_0x18158e, _0x3c1046, _0x2ad4ae) {
            let _0x2e9aca = 0;
            if (!(_0x18158e !== undefined && !_0x18158e)) {
              _0x2e9aca |= 16384;
            }
            if (!(_0x3c1046 !== undefined && !_0x3c1046)) {
              _0x2e9aca |= 256;
            }
            if (!(_0x2ad4ae !== undefined && !_0x2ad4ae)) {
              _0x2e9aca |= 1024;
            }
            _0x260dc2.clear(_0x2e9aca);
          };
          this.clearColor = function () {
            this.clear(true, false, false);
          };
          this.clearDepth = function () {
            this.clear(false, true, false);
          };
          this.clearStencil = function () {
            this.clear(false, false, true);
          };
          this.dispose = function () {
            _0x26aed1.removeEventListener("webglcontextlost", _0x280163, false);
            _0x26aed1.removeEventListener("webglcontextrestored", _0x463c6b, false);
            _0x239a7d.dispose();
            _0x45785a.dispose();
            _0x3c04de.dispose();
            _0x436c99.dispose();
            _0x83b344.dispose();
            _0x1ff9bf.dispose();
            _0x36472b.dispose();
            _0x6250ee.dispose();
            _0x28200b.dispose();
            _0x28200b.removeEventListener("sessionstart", _0x1276ac);
            _0x28200b.removeEventListener("sessionend", _0x356aea);
            if (_0x18dcb0) {
              _0x18dcb0.dispose();
              _0x18dcb0 = null;
            }
            _0x239a5b.stop();
          };
          this.renderBufferDirect = function (_0x408bb1, _0x3f6c09, _0x198261, _0x218693, _0x1c0715, _0x412a6d) {
            if (_0x3f6c09 === null) {
              _0x3f6c09 = _0x1e3773;
            }
            var _0x315530 = _0x1c0715.isMesh && _0x1c0715.matrixWorld.determinant() < 0;
            var _0x16703e = function (_0x42d6b6, _0x535c95, _0x3baba4, _0x507c98, _0x26897a) {
              if (_0x535c95.isScene !== true) {
                _0x535c95 = _0x1e3773;
              }
              _0x198baf.resetTextureUnits();
              const _0x10070a = _0x535c95.fog;
              const _0x5e2058 = _0x507c98.isMeshStandardMaterial ? _0x535c95.environment : null;
              const _0x2e7062 = _0x52716a === null ? _0x167ecc.outputEncoding : _0x52716a.texture.encoding;
              const _0x2b119c = (_0x507c98.isMeshStandardMaterial ? _0x83b344 : _0x436c99).get(_0x507c98.envMap || _0x5e2058);
              const _0x1638f0 = _0x507c98.vertexColors === true && !!_0x3baba4.attributes.color && _0x3baba4.attributes.color.itemSize === 4;
              const _0x51cd47 = !!_0x507c98.normalMap && !!_0x3baba4.attributes.tangent;
              const _0x5b875e = !!_0x3baba4.morphAttributes.position;
              const _0x18a393 = !!_0x3baba4.morphAttributes.normal;
              const _0xbc58c7 = _0x3baba4.morphAttributes.position ? _0x3baba4.morphAttributes.position.length : 0;
              const _0x36048d = _0x507c98.toneMapped ? _0x167ecc.toneMapping : _0x510390;
              const _0x41a237 = _0x3c04de.get(_0x507c98);
              const _0x40403f = _0x3e633e.state.lights;
              var _0x35c615;
              if (_0x33a12c === true) {
                if (!(_0x368e3b !== true && _0x42d6b6 === _0x3095c3)) {
                  _0x35c615 = _0x42d6b6 === _0x3095c3 && _0x507c98.id === _0x246cd4;
                  _0x2d914f.setState(_0x507c98, _0x42d6b6, _0x35c615);
                }
              }
              var _0x37b244;
              let _0x1799cf = false;
              _0x37b244 = 2;
              if (_0x507c98.version === _0x41a237.__version) {
                if (_0x41a237.needsLights && _0x41a237.lightsStateVersion !== _0x40403f.state.version || _0x41a237.outputEncoding !== _0x2e7062 || _0x26897a.isInstancedMesh && _0x41a237.instancing === false || !_0x26897a.isInstancedMesh && _0x41a237.instancing === true || _0x26897a.isSkinnedMesh && _0x41a237.skinning === false || !_0x26897a.isSkinnedMesh && _0x41a237.skinning === true || _0x41a237.envMap !== _0x2b119c || _0x507c98.fog && _0x41a237.fog !== _0x10070a || _0x41a237.numClippingPlanes !== undefined && (_0x41a237.numClippingPlanes !== _0x2d914f.numPlanes || _0x41a237.numIntersection !== _0x2d914f.numIntersection) || _0x41a237.vertexAlphas !== _0x1638f0 || _0x41a237.vertexTangents !== _0x51cd47 || _0x41a237.morphTargets !== _0x5b875e || _0x41a237.morphNormals !== _0x18a393 || _0x41a237.toneMapping !== _0x36048d || _0x33fe0e.isWebGL2 === true && _0x41a237.morphTargetsCount !== _0xbc58c7) {
                  _0x1799cf = true;
                }
              } else {
                _0x1799cf = true;
                _0x41a237.__version = _0x507c98.version;
              }
              let _0x3dc352 = _0x41a237.currentProgram;
              if (_0x1799cf === true) {
                _0x3dc352 = _0x4c3fad(_0x507c98, _0x535c95, _0x26897a);
              }
              let _0x57a601 = false;
              let _0x18a845 = false;
              let _0xc11fa8 = false;
              const _0x490413 = _0x3dc352.getUniforms();
              const _0x510576 = _0x41a237.uniforms;
              if (_0x29eb99.useProgram(_0x3dc352.program)) {
                _0x57a601 = true;
                _0x18a845 = true;
                _0xc11fa8 = true;
              }
              if (_0x507c98.id !== _0x246cd4) {
                _0x246cd4 = _0x507c98.id;
                _0x18a845 = true;
              }
              if (_0x57a601 || _0x3095c3 !== _0x42d6b6) {
                _0x490413.setValue(_0x260dc2, "projectionMatrix", _0x42d6b6.projectionMatrix);
                if (_0x33fe0e.logarithmicDepthBuffer) {
                  _0x490413.setValue(_0x260dc2, "logDepthBufFC", 2 / (Math.log(_0x42d6b6.far + 1) / Math.LN2));
                }
                if (_0x3095c3 !== _0x42d6b6) {
                  _0x3095c3 = _0x42d6b6;
                  _0x18a845 = true;
                  _0xc11fa8 = true;
                }
                if (_0x507c98.isShaderMaterial || _0x507c98.isMeshPhongMaterial || _0x507c98.isMeshToonMaterial || _0x507c98.isMeshStandardMaterial || _0x507c98.envMap) {
                  const _0x351b60 = _0x490413.map.cameraPosition;
                  if (_0x351b60 !== undefined) {
                    _0x351b60.setValue(_0x260dc2, _0x387dfe.setFromMatrixPosition(_0x42d6b6.matrixWorld));
                  }
                }
                if (_0x507c98.isMeshPhongMaterial || _0x507c98.isMeshToonMaterial || _0x507c98.isMeshLambertMaterial || _0x507c98.isMeshBasicMaterial || _0x507c98.isMeshStandardMaterial || _0x507c98.isShaderMaterial) {
                  _0x490413.setValue(_0x260dc2, "isOrthographic", _0x42d6b6.isOrthographicCamera === true);
                }
                if (_0x507c98.isMeshPhongMaterial || _0x507c98.isMeshToonMaterial || _0x507c98.isMeshLambertMaterial || _0x507c98.isMeshBasicMaterial || _0x507c98.isMeshStandardMaterial || _0x507c98.isShaderMaterial || _0x507c98.isShadowMaterial || _0x26897a.isSkinnedMesh) {
                  _0x490413.setValue(_0x260dc2, "viewMatrix", _0x42d6b6.matrixWorldInverse);
                }
              }
              if (_0x26897a.isSkinnedMesh) {
                _0x490413.setOptional(_0x260dc2, _0x26897a, "bindMatrix");
                _0x490413.setOptional(_0x260dc2, _0x26897a, "bindMatrixInverse");
                const _0x11ddae = _0x26897a.skeleton;
                if (_0x11ddae) {
                  if (_0x33fe0e.floatVertexTextures) {
                    if (_0x11ddae.boneTexture === null) {
                      _0x11ddae.computeBoneTexture();
                    }
                    _0x490413.setValue(_0x260dc2, "boneTexture", _0x11ddae.boneTexture, _0x198baf);
                    _0x490413.setValue(_0x260dc2, "boneTextureSize", _0x11ddae.boneTextureSize);
                  } else {
                    _0x490413.setOptional(_0x260dc2, _0x11ddae, "boneMatrices");
                  }
                }
              }
              if (!(!_0x3baba4 || _0x3baba4.morphAttributes.position === undefined && _0x3baba4.morphAttributes.normal === undefined)) {
                _0x3663d3.update(_0x26897a, _0x3baba4, _0x507c98, _0x3dc352);
              }
              if (!(!_0x18a845 && _0x41a237.receiveShadow === _0x26897a.receiveShadow)) {
                _0x41a237.receiveShadow = _0x26897a.receiveShadow;
                _0x490413.setValue(_0x260dc2, "receiveShadow", _0x26897a.receiveShadow);
              }
              if (_0x18a845) {
                _0x490413.setValue(_0x260dc2, "toneMappingExposure", _0x167ecc.toneMappingExposure);
                if (_0x41a237.needsLights) {
                  (function (_0x277923, _0x3e133b) {
                    _0x277923.ambientLightColor.needsUpdate = _0x3e133b;
                    _0x277923.lightProbe.needsUpdate = _0x3e133b;
                    _0x277923.directionalLights.needsUpdate = _0x3e133b;
                    _0x277923.directionalLightShadows.needsUpdate = _0x3e133b;
                    _0x277923.pointLights.needsUpdate = _0x3e133b;
                    _0x277923.pointLightShadows.needsUpdate = _0x3e133b;
                    _0x277923.spotLights.needsUpdate = _0x3e133b;
                    _0x277923.spotLightShadows.needsUpdate = _0x3e133b;
                    _0x277923.rectAreaLights.needsUpdate = _0x3e133b;
                    _0x277923.hemisphereLights.needsUpdate = _0x3e133b;
                  })(_0x510576, _0xc11fa8);
                }
                if (_0x10070a && _0x507c98.fog) {
                  _0x35191f.refreshFogUniforms(_0x510576, _0x10070a);
                }
                _0x35191f.refreshMaterialUniforms(_0x510576, _0x507c98, _0x5f0d21, _0x53c2ef, _0x18dcb0);
                _0x381ca9.upload(_0x260dc2, _0x41a237.uniformsList, _0x510576, _0x198baf);
              }
              if (_0x507c98.isShaderMaterial && _0x507c98.uniformsNeedUpdate === true) {
                _0x381ca9.upload(_0x260dc2, _0x41a237.uniformsList, _0x510576, _0x198baf);
                _0x507c98.uniformsNeedUpdate = false;
              }
              if (_0x507c98.isSpriteMaterial) {
                _0x490413.setValue(_0x260dc2, "center", _0x26897a.center);
              }
              _0x490413.setValue(_0x260dc2, "modelViewMatrix", _0x26897a.modelViewMatrix);
              _0x490413.setValue(_0x260dc2, "normalMatrix", _0x26897a.normalMatrix);
              _0x490413.setValue(_0x260dc2, "modelMatrix", _0x26897a.matrixWorld);
              return _0x3dc352;
            }(_0x408bb1, _0x3f6c09, _0x198261, _0x218693, _0x1c0715);
            _0x29eb99.setMaterial(_0x218693, _0x315530);
            let _0x35b83b = _0x198261.index;
            _0x408bb1 = _0x198261.attributes.position;
            if (_0x35b83b === null) {
              if (_0x408bb1 === undefined || _0x408bb1.count === 0) {
                return;
              }
            } else if (_0x35b83b.count === 0) {
              return;
            }
            let _0x3849f9 = 1;
            if (_0x218693.wireframe === true) {
              _0x35b83b = _0x334cd1.getWireframeAttribute(_0x198261);
              _0x3849f9 = 2;
            }
            _0x36472b.setup(_0x1c0715, _0x218693, _0x16703e, _0x198261, _0x35b83b);
            let _0xf8f50b = _0x52e633;
            if (_0x35b83b !== null) {
              _0x2c1970 = _0x3a120e.get(_0x35b83b);
              _0xf8f50b = _0x27f690;
              _0xf8f50b.setIndex(_0x2c1970);
            }
            _0x3f6c09 = (_0x35b83b !== null ? _0x35b83b : _0x408bb1).count;
            _0x315530 = _0x198261.drawRange.start * _0x3849f9;
            _0x16703e = _0x198261.drawRange.count * _0x3849f9;
            var _0x2c1970 = _0x412a6d !== null ? _0x412a6d.start * _0x3849f9 : 0;
            _0x408bb1 = _0x412a6d !== null ? _0x412a6d.count * _0x3849f9 : Infinity;
            _0x412a6d = Math.max(_0x315530, _0x2c1970);
            _0x408bb1 = Math.min(_0x3f6c09, _0x315530 + _0x16703e, _0x2c1970 + _0x408bb1) - 1;
            if ((_0x408bb1 = Math.max(0, _0x408bb1 - _0x412a6d + 1)) !== 0) {
              if (_0x1c0715.isMesh) {
                if (_0x218693.wireframe === true) {
                  _0x29eb99.setLineWidth(_0x218693.wireframeLinewidth * _0x330eaa());
                  _0xf8f50b.setMode(1);
                } else {
                  _0xf8f50b.setMode(4);
                }
              } else if (_0x1c0715.isLine) {
                var _0x42e1ad;
                let _0x2fe575 = _0x218693.linewidth;
                _0x42e1ad = 16;
                if (_0x2fe575 === undefined) {
                  _0x2fe575 = 1;
                }
                _0x29eb99.setLineWidth(_0x2fe575 * _0x330eaa());
                if (_0x1c0715.isLineSegments) {
                  _0xf8f50b.setMode(1);
                } else if (_0x1c0715.isLineLoop) {
                  _0xf8f50b.setMode(2);
                } else {
                  _0xf8f50b.setMode(3);
                }
              } else if (_0x1c0715.isPoints) {
                _0xf8f50b.setMode(0);
              } else if (_0x1c0715.isSprite) {
                _0xf8f50b.setMode(4);
              }
              if (_0x1c0715.isInstancedMesh) {
                _0xf8f50b.renderInstances(_0x412a6d, _0x408bb1, _0x1c0715.count);
              } else if (_0x198261.isInstancedBufferGeometry) {
                _0x198261 = Math.min(_0x198261.instanceCount, _0x198261._maxInstanceCount);
                _0xf8f50b.renderInstances(_0x412a6d, _0x408bb1, _0x198261);
              } else {
                _0xf8f50b.render(_0x412a6d, _0x408bb1);
              }
            }
          };
          this.compile = function (_0x4cb553, _0x876e89) {
            _0x3e633e = _0x45785a.get(_0x4cb553);
            _0x3e633e.init();
            _0x1d7731.push(_0x3e633e);
            _0x4cb553.traverseVisible(function (_0x193359) {
              if (_0x193359.isLight && _0x193359.layers.test(_0x876e89.layers)) {
                _0x3e633e.pushLight(_0x193359);
                if (_0x193359.castShadow) {
                  _0x3e633e.pushShadow(_0x193359);
                }
              }
            });
            _0x3e633e.setupLights(_0x167ecc.physicallyCorrectLights);
            _0x4cb553.traverse(function (_0x58f8bb) {
              var _0x6a25b7;
              var _0x529290 = _0x58f8bb.material;
              _0x6a25b7 = 3;
              if (_0x529290) {
                if (Array.isArray(_0x529290)) {
                  for (let _0x54db46 = 0; _0x54db46 < _0x529290.length; _0x54db46++) {
                    _0x4c3fad(_0x529290[_0x54db46], _0x4cb553, _0x58f8bb);
                  }
                } else {
                  _0x4c3fad(_0x529290, _0x4cb553, _0x58f8bb);
                }
              }
            });
            _0x1d7731.pop();
            _0x3e633e = null;
          };
          var _0xa7b6cb = 10;
          let _0x456e39 = null;
          _0xa7b6cb = 0;
          function _0x1276ac() {
            _0x239a5b.stop();
          }
          function _0x356aea() {
            _0x239a5b.start();
          }
          var _0x44e0ca = 11;
          const _0x239a5b = new _0x2ba39f();
          _0x44e0ca = 9;
          function _0xe08630(_0x15dd73, _0x16ecc8, _0x3f77f8, _0x46c767) {
            var _0x1c21b4 = _0x15dd73.opaque;
            var _0x2e84ba = _0x15dd73.transmissive;
            _0x15dd73 = _0x15dd73.transparent;
            _0x3e633e.setupLightsView(_0x3f77f8);
            if (_0x2e84ba.length > 0) {
              (function (_0x4f7f6d, _0x337315, _0x167cb8) {
                if (_0x18dcb0 === null) {
                  const _0x356d8f = _0x1bc4d4 === true && _0x33fe0e.isWebGL2 === true ? _0x588426 : _0x4eb744;
                  _0x18dcb0 = new _0x356d8f(1024, 1024, {
                    generateMipmaps: true,
                    type: _0x365395.convert(_0x399f5d) !== null ? _0x399f5d : _0x3a53e9,
                    minFilter: _0x3f90fb,
                    magFilter: _0x297826,
                    wrapS: _0x4f55c6,
                    wrapT: _0x4f55c6,
                    useRenderToTexture: _0x16a8b7.has("WEBGL_multisampled_render_to_texture")
                  });
                }
                var _0x45aa10 = _0x167ecc.getRenderTarget();
                _0x167ecc.setRenderTarget(_0x18dcb0);
                _0x167ecc.clear();
                var _0x24fc08 = _0x167ecc.toneMapping;
                _0x167ecc.toneMapping = _0x510390;
                _0x4d7bdd(_0x4f7f6d, _0x337315, _0x167cb8);
                _0x167ecc.toneMapping = _0x24fc08;
                _0x198baf.updateMultisampleRenderTarget(_0x18dcb0);
                _0x198baf.updateRenderTargetMipmap(_0x18dcb0);
                _0x167ecc.setRenderTarget(_0x45aa10);
              })(_0x1c21b4, _0x16ecc8, _0x3f77f8);
            }
            if (_0x46c767) {
              _0x29eb99.viewport(_0x4f043c.copy(_0x46c767));
            }
            if (_0x1c21b4.length > 0) {
              _0x4d7bdd(_0x1c21b4, _0x16ecc8, _0x3f77f8);
            }
            if (_0x2e84ba.length > 0) {
              _0x4d7bdd(_0x2e84ba, _0x16ecc8, _0x3f77f8);
            }
            if (_0x15dd73.length > 0) {
              _0x4d7bdd(_0x15dd73, _0x16ecc8, _0x3f77f8);
            }
          }
          function _0x4d7bdd(_0x379b90, _0x101914, _0x3aa6dc) {
            var _0x1e8128 = _0x101914.isScene === true ? _0x101914.overrideMaterial : null;
            for (let _0x25f8aa = 0, _0x22a34b = _0x379b90.length; _0x25f8aa < _0x22a34b; _0x25f8aa++) {
              var _0x3d7d02 = _0x379b90[_0x25f8aa];
              const _0x2cc1f2 = _0x3d7d02.object;
              var _0xb12798 = _0x3d7d02.geometry;
              var _0x2d7778 = _0x1e8128 === null ? _0x3d7d02.material : _0x1e8128;
              _0x3d7d02 = _0x3d7d02.group;
              if (_0x2cc1f2.layers.test(_0x3aa6dc.layers)) {
                (function (_0x21f59c, _0xd694f3, _0x132ccf, _0x2e2047, _0x51e41b, _0x4ac196) {
                  _0x21f59c.onBeforeRender(_0x167ecc, _0xd694f3, _0x132ccf, _0x2e2047, _0x51e41b, _0x4ac196);
                  _0x21f59c.modelViewMatrix.multiplyMatrices(_0x132ccf.matrixWorldInverse, _0x21f59c.matrixWorld);
                  _0x21f59c.normalMatrix.getNormalMatrix(_0x21f59c.modelViewMatrix);
                  _0x51e41b.onBeforeRender(_0x167ecc, _0xd694f3, _0x132ccf, _0x2e2047, _0x21f59c, _0x4ac196);
                  if (_0x51e41b.transparent === true && _0x51e41b.side === _0x250b44) {
                    _0x51e41b.side = _0x460782;
                    _0x51e41b.needsUpdate = true;
                    _0x167ecc.renderBufferDirect(_0x132ccf, _0xd694f3, _0x2e2047, _0x51e41b, _0x21f59c, _0x4ac196);
                    _0x51e41b.side = _0xe70805;
                    _0x51e41b.needsUpdate = true;
                    _0x167ecc.renderBufferDirect(_0x132ccf, _0xd694f3, _0x2e2047, _0x51e41b, _0x21f59c, _0x4ac196);
                    _0x51e41b.side = _0x250b44;
                  } else {
                    _0x167ecc.renderBufferDirect(_0x132ccf, _0xd694f3, _0x2e2047, _0x51e41b, _0x21f59c, _0x4ac196);
                  }
                  _0x21f59c.onAfterRender(_0x167ecc, _0xd694f3, _0x132ccf, _0x2e2047, _0x51e41b, _0x4ac196);
                })(_0x2cc1f2, _0x101914, _0x3aa6dc, _0xb12798, _0x2d7778, _0x3d7d02);
              }
            }
          }
          function _0x4c3fad(_0x217ca7, _0x4b3345, _0x43b17a) {
            if (_0x4b3345.isScene !== true) {
              _0x4b3345 = _0x1e3773;
            }
            const _0x505dd2 = _0x3c04de.get(_0x217ca7);
            var _0x463e1f = _0x3e633e.state.lights;
            var _0x36f314 = _0x3e633e.state.shadowsArray;
            var _0x17ceaa = _0x463e1f.state.version;
            const _0x383de5 = _0x6250ee.getParameters(_0x217ca7, _0x463e1f.state, _0x36f314, _0x4b3345, _0x43b17a);
            _0x36f314 = _0x6250ee.getProgramCacheKey(_0x383de5);
            var _0x2c790;
            let _0x2b58d0 = _0x505dd2.programs;
            _0x2c790 = 12;
            _0x505dd2.environment = _0x217ca7.isMeshStandardMaterial ? _0x4b3345.environment : null;
            _0x505dd2.fog = _0x4b3345.fog;
            _0x505dd2.envMap = (_0x217ca7.isMeshStandardMaterial ? _0x83b344 : _0x436c99).get(_0x217ca7.envMap || _0x505dd2.environment);
            if (_0x2b58d0 === undefined) {
              _0x217ca7.addEventListener("dispose", _0x24d94c);
              _0x2b58d0 = new Map();
              _0x505dd2.programs = _0x2b58d0;
            }
            let _0x2bc708 = _0x2b58d0.get(_0x36f314);
            if (_0x2bc708 !== undefined) {
              if (_0x505dd2.currentProgram === _0x2bc708 && _0x505dd2.lightsStateVersion === _0x17ceaa) {
                _0x41a810(_0x217ca7, _0x383de5);
                return _0x2bc708;
              }
            } else {
              _0x383de5.uniforms = _0x6250ee.getUniforms(_0x217ca7);
              _0x217ca7.onBuild(_0x43b17a, _0x383de5, _0x167ecc);
              _0x217ca7.onBeforeCompile(_0x383de5, _0x167ecc);
              _0x2bc708 = _0x6250ee.acquireProgram(_0x383de5, _0x36f314);
              _0x2b58d0.set(_0x36f314, _0x2bc708);
              _0x505dd2.uniforms = _0x383de5.uniforms;
            }
            const _0x3b2625 = _0x505dd2.uniforms;
            if (!((_0x217ca7.isShaderMaterial || _0x217ca7.isRawShaderMaterial) && _0x217ca7.clipping !== true)) {
              _0x3b2625.clippingPlanes = _0x2d914f.uniform;
            }
            _0x41a810(_0x217ca7, _0x383de5);
            _0x505dd2.needsLights = (_0x217ca7 = _0x217ca7).isMeshLambertMaterial || _0x217ca7.isMeshToonMaterial || _0x217ca7.isMeshPhongMaterial || _0x217ca7.isMeshStandardMaterial || _0x217ca7.isShadowMaterial || _0x217ca7.isShaderMaterial && _0x217ca7.lights === true;
            _0x505dd2.lightsStateVersion = _0x17ceaa;
            if (_0x505dd2.needsLights) {
              _0x3b2625.ambientLightColor.value = _0x463e1f.state.ambient;
              _0x3b2625.lightProbe.value = _0x463e1f.state.probe;
              _0x3b2625.directionalLights.value = _0x463e1f.state.directional;
              _0x3b2625.directionalLightShadows.value = _0x463e1f.state.directionalShadow;
              _0x3b2625.spotLights.value = _0x463e1f.state.spot;
              _0x3b2625.spotLightShadows.value = _0x463e1f.state.spotShadow;
              _0x3b2625.rectAreaLights.value = _0x463e1f.state.rectArea;
              _0x3b2625.ltc_1.value = _0x463e1f.state.rectAreaLTC1;
              _0x3b2625.ltc_2.value = _0x463e1f.state.rectAreaLTC2;
              _0x3b2625.pointLights.value = _0x463e1f.state.point;
              _0x3b2625.pointLightShadows.value = _0x463e1f.state.pointShadow;
              _0x3b2625.hemisphereLights.value = _0x463e1f.state.hemi;
              _0x3b2625.directionalShadowMap.value = _0x463e1f.state.directionalShadowMap;
              _0x3b2625.directionalShadowMatrix.value = _0x463e1f.state.directionalShadowMatrix;
              _0x3b2625.spotShadowMap.value = _0x463e1f.state.spotShadowMap;
              _0x3b2625.spotShadowMatrix.value = _0x463e1f.state.spotShadowMatrix;
              _0x3b2625.pointShadowMap.value = _0x463e1f.state.pointShadowMap;
              _0x3b2625.pointShadowMatrix.value = _0x463e1f.state.pointShadowMatrix;
            }
            _0x463e1f = _0x2bc708.getUniforms();
            _0x463e1f = _0x381ca9.seqWithValue(_0x463e1f.seq, _0x3b2625);
            _0x505dd2.currentProgram = _0x2bc708;
            _0x505dd2.uniformsList = _0x463e1f;
            return _0x2bc708;
          }
          function _0x41a810(_0x19d879, _0xf9c6a4) {
            const _0x25ecbe = _0x3c04de.get(_0x19d879);
            _0x25ecbe.outputEncoding = _0xf9c6a4.outputEncoding;
            _0x25ecbe.instancing = _0xf9c6a4.instancing;
            _0x25ecbe.skinning = _0xf9c6a4.skinning;
            _0x25ecbe.morphTargets = _0xf9c6a4.morphTargets;
            _0x25ecbe.morphNormals = _0xf9c6a4.morphNormals;
            _0x25ecbe.morphTargetsCount = _0xf9c6a4.morphTargetsCount;
            _0x25ecbe.numClippingPlanes = _0xf9c6a4.numClippingPlanes;
            _0x25ecbe.numIntersection = _0xf9c6a4.numClipIntersection;
            _0x25ecbe.vertexAlphas = _0xf9c6a4.vertexAlphas;
            _0x25ecbe.vertexTangents = _0xf9c6a4.vertexTangents;
            _0x25ecbe.toneMapping = _0xf9c6a4.toneMapping;
          }
          _0x239a5b.setAnimationLoop(function (_0x5f3f09) {
            if (_0x456e39) {
              _0x456e39(_0x5f3f09);
            }
          });
          if (typeof window != "undefined") {
            _0x239a5b.setContext(window);
          }
          this.setAnimationLoop = function (_0x4270ba) {
            _0x456e39 = _0x4270ba;
            _0x28200b.setAnimationLoop(_0x4270ba);
            if (_0x4270ba === null) {
              _0x239a5b.stop();
            } else {
              _0x239a5b.start();
            }
          };
          _0x28200b.addEventListener("sessionstart", _0x1276ac);
          _0x28200b.addEventListener("sessionend", _0x356aea);
          this.render = function (_0x1014f1, _0x2df125) {
            if ((_0x2df125 === undefined || _0x2df125.isCamera === true) && _0x5d8273 !== true) {
              if (_0x1014f1.autoUpdate === true) {
                _0x1014f1.updateMatrixWorld();
              }
              if (_0x2df125.parent === null) {
                _0x2df125.updateMatrixWorld();
              }
              if (_0x28200b.enabled === true && _0x28200b.isPresenting === true) {
                if (_0x28200b.cameraAutoUpdate === true) {
                  _0x28200b.updateCamera(_0x2df125);
                }
                _0x2df125 = _0x28200b.getCamera();
              }
              if (_0x1014f1.isScene === true) {
                _0x1014f1.onBeforeRender(_0x167ecc, _0x1014f1, _0x2df125, _0x52716a);
              }
              _0x3e633e = _0x45785a.get(_0x1014f1, _0x1d7731.length);
              _0x3e633e.init();
              _0x1d7731.push(_0x3e633e);
              _0xcda287.multiplyMatrices(_0x2df125.projectionMatrix, _0x2df125.matrixWorldInverse);
              _0x55701a.setFromProjectionMatrix(_0xcda287);
              _0x368e3b = this.localClippingEnabled;
              _0x33a12c = _0x2d914f.init(this.clippingPlanes, _0x368e3b, _0x2df125);
              _0x34a9b7 = _0x239a7d.get(_0x1014f1, _0x201c43.length);
              _0x34a9b7.init();
              _0x201c43.push(_0x34a9b7);
              (function _0x35ab6c(_0x19da1a, _0x41dc92, _0x547766, _0x6039e7) {
                if (_0x19da1a.visible === false) {
                  return;
                }
                if (_0x19da1a.layers.test(_0x41dc92.layers)) {
                  if (_0x19da1a.isGroup) {
                    _0x547766 = _0x19da1a.renderOrder;
                  } else if (_0x19da1a.isLOD) {
                    if (_0x19da1a.autoUpdate === true) {
                      _0x19da1a.update(_0x41dc92);
                    }
                  } else if (_0x19da1a.isLight) {
                    _0x3e633e.pushLight(_0x19da1a);
                    if (_0x19da1a.castShadow) {
                      _0x3e633e.pushShadow(_0x19da1a);
                    }
                  } else if (_0x19da1a.isSprite) {
                    if (!_0x19da1a.frustumCulled || _0x55701a.intersectsSprite(_0x19da1a)) {
                      if (_0x6039e7) {
                        _0x387dfe.setFromMatrixPosition(_0x19da1a.matrixWorld).applyMatrix4(_0xcda287);
                      }
                      const _0x55e216 = _0x1ff9bf.update(_0x19da1a);
                      const _0x50145c = _0x19da1a.material;
                      if (_0x50145c.visible) {
                        _0x34a9b7.push(_0x19da1a, _0x55e216, _0x50145c, _0x547766, _0x387dfe.z, null);
                      }
                    }
                  } else if ((_0x19da1a.isMesh || _0x19da1a.isLine || _0x19da1a.isPoints) && (_0x19da1a.isSkinnedMesh && _0x19da1a.skeleton.frame !== _0x49be59.render.frame && (_0x19da1a.skeleton.update(), _0x19da1a.skeleton.frame = _0x49be59.render.frame), !_0x19da1a.frustumCulled || _0x55701a.intersectsObject(_0x19da1a))) {
                    if (_0x6039e7) {
                      _0x387dfe.setFromMatrixPosition(_0x19da1a.matrixWorld).applyMatrix4(_0xcda287);
                    }
                    const _0x44dd12 = _0x1ff9bf.update(_0x19da1a);
                    const _0x66b458 = _0x19da1a.material;
                    if (Array.isArray(_0x66b458)) {
                      var _0x12544d;
                      const _0x50a181 = _0x44dd12.groups;
                      _0x12544d = 3;
                      for (let _0x188df3 = 0, _0x8873fa = _0x50a181.length; _0x188df3 < _0x8873fa; _0x188df3++) {
                        const _0x13eaa0 = _0x50a181[_0x188df3];
                        const _0x46375b = _0x66b458[_0x13eaa0.materialIndex];
                        if (_0x46375b && _0x46375b.visible) {
                          _0x34a9b7.push(_0x19da1a, _0x44dd12, _0x46375b, _0x547766, _0x387dfe.z, _0x13eaa0);
                        }
                      }
                    } else if (_0x66b458.visible) {
                      _0x34a9b7.push(_0x19da1a, _0x44dd12, _0x66b458, _0x547766, _0x387dfe.z, null);
                    }
                  }
                }
                const _0x1e758b = _0x19da1a.children;
                for (let _0x263d08 = 0, _0x164c32 = _0x1e758b.length; _0x263d08 < _0x164c32; _0x263d08++) {
                  _0x35ab6c(_0x1e758b[_0x263d08], _0x41dc92, _0x547766, _0x6039e7);
                }
              })(_0x1014f1, _0x2df125, 0, _0x167ecc.sortObjects);
              _0x34a9b7.finish();
              if (_0x167ecc.sortObjects === true) {
                _0x34a9b7.sort(_0x57dd22, _0x3bfe03);
              }
              if (_0x33a12c === true) {
                _0x2d914f.beginShadows();
              }
              var _0x20ccd7 = _0x3e633e.state.shadowsArray;
              _0x5c55d8.render(_0x20ccd7, _0x1014f1, _0x2df125);
              if (_0x33a12c === true) {
                _0x2d914f.endShadows();
              }
              if (this.info.autoReset === true) {
                this.info.reset();
              }
              _0x5f59c1.render(_0x34a9b7, _0x1014f1);
              _0x3e633e.setupLights(_0x167ecc.physicallyCorrectLights);
              if (_0x2df125.isArrayCamera) {
                var _0xb9ae7a;
                var _0x251980 = _0x2df125.cameras;
                _0xb9ae7a = 3;
                for (let _0x560fa3 = 0, _0x342383 = _0x251980.length; _0x560fa3 < _0x342383; _0x560fa3++) {
                  var _0x52529b = _0x251980[_0x560fa3];
                  _0xe08630(_0x34a9b7, _0x1014f1, _0x52529b, _0x52529b.viewport);
                }
              } else {
                _0xe08630(_0x34a9b7, _0x1014f1, _0x2df125);
              }
              if (_0x52716a !== null) {
                _0x198baf.updateMultisampleRenderTarget(_0x52716a);
                _0x198baf.updateRenderTargetMipmap(_0x52716a);
              }
              if (_0x1014f1.isScene === true) {
                _0x1014f1.onAfterRender(_0x167ecc, _0x1014f1, _0x2df125);
              }
              _0x29eb99.buffers.depth.setTest(true);
              _0x29eb99.buffers.depth.setMask(true);
              _0x29eb99.buffers.color.setMask(true);
              _0x29eb99.setPolygonOffset(false);
              _0x36472b.resetDefaultState();
              _0x246cd4 = -1;
              _0x3095c3 = null;
              _0x1d7731.pop();
              _0x3e633e = _0x1d7731.length > 0 ? _0x1d7731[_0x1d7731.length - 1] : null;
              _0x201c43.pop();
              _0x34a9b7 = _0x201c43.length > 0 ? _0x201c43[_0x201c43.length - 1] : null;
            }
          };
          this.getActiveCubeFace = function () {
            return _0x3b929f;
          };
          this.getActiveMipmapLevel = function () {
            return _0x19d782;
          };
          this.getRenderTarget = function () {
            return _0x52716a;
          };
          this.setRenderTargetTextures = function (_0x5293fe, _0x5730e4, _0x4b4eca) {
            _0x3c04de.get(_0x5293fe.texture).__webglTexture = _0x5730e4;
            _0x3c04de.get(_0x5293fe.depthTexture).__webglTexture = _0x4b4eca;
            const _0x377e18 = _0x3c04de.get(_0x5293fe);
            _0x377e18.__hasExternalTextures = true;
            if (_0x377e18.__hasExternalTextures) {
              _0x377e18.__autoAllocateDepthBuffer = _0x4b4eca === undefined;
              if (!_0x377e18.__autoAllocateDepthBuffer) {
                if (_0x5293fe.useRenderToTexture) {
                  _0x5293fe.useRenderToTexture = false;
                  _0x5293fe.useRenderbuffer = true;
                }
              }
            }
          };
          this.setRenderTargetFramebuffer = function (_0x5db029, _0x200366) {
            const _0x362ab8 = _0x3c04de.get(_0x5db029);
            _0x362ab8.__webglFramebuffer = _0x200366;
            _0x362ab8.__useDefaultFramebuffer = _0x200366 === undefined;
          };
          this.setRenderTarget = function (_0x159207, _0x481f3b = 0, _0x4116d4 = 0) {
            _0x52716a = _0x159207;
            _0x3b929f = _0x481f3b;
            _0x19d782 = _0x4116d4;
            var _0x4cb831 = 11;
            let _0x2dd949 = true;
            _0x4cb831 = 5;
            var _0x1d5f60;
            var _0x5d9fc1;
            if (_0x159207) {
              if ((_0x1d5f60 = _0x3c04de.get(_0x159207)).__useDefaultFramebuffer !== undefined) {
                _0x29eb99.bindFramebuffer(36160, null);
                _0x2dd949 = false;
              } else if (_0x1d5f60.__webglFramebuffer === undefined) {
                _0x198baf.setupRenderTarget(_0x159207);
              } else if (_0x1d5f60.__hasExternalTextures) {
                _0x198baf.rebindTextures(_0x159207, _0x3c04de.get(_0x159207.texture).__webglTexture, _0x3c04de.get(_0x159207.depthTexture).__webglTexture);
              }
            }
            let _0x5d1367 = null;
            let _0x41c053 = false;
            let _0xe583b0 = false;
            _0x466e65 = _0x159207 ? (((_0x5d9fc1 = _0x159207.texture).isDataTexture3D || _0x5d9fc1.isDataTexture2DArray) && (_0xe583b0 = true), _0x5d9fc1 = _0x3c04de.get(_0x159207).__webglFramebuffer, _0x159207.isWebGLCubeRenderTarget ? (_0x5d1367 = _0x5d9fc1[_0x481f3b], _0x41c053 = true) : _0x5d1367 = _0x159207.useRenderbuffer ? _0x3c04de.get(_0x159207).__webglMultisampledFramebuffer : _0x5d9fc1, _0x4f043c.copy(_0x159207.viewport), _0xe8f919.copy(_0x159207.scissor), _0x159207.scissorTest) : (_0x4f043c.copy(_0x4b060f).multiplyScalar(_0x5f0d21).floor(), _0xe8f919.copy(_0x257092).multiplyScalar(_0x5f0d21).floor(), _0x3fa74c);
            if (_0x29eb99.bindFramebuffer(36160, _0x5d1367) && _0x33fe0e.drawBuffers && _0x2dd949) {
              var _0xf691c1;
              let _0x3bfa88 = false;
              _0xf691c1 = 1;
              if (_0x159207) {
                if (_0x159207.isWebGLMultipleRenderTargets) {
                  const _0x2338cf = _0x159207.texture;
                  if (_0x3e9a2f.length !== _0x2338cf.length || _0x3e9a2f[0] !== 36064) {
                    for (let _0x325915 = 0, _0xc51907 = _0x2338cf.length; _0x325915 < _0xc51907; _0x325915++) {
                      _0x3e9a2f[_0x325915] = 36064 + _0x325915;
                    }
                    _0x3e9a2f.length = _0x2338cf.length;
                    _0x3bfa88 = true;
                  }
                } else if (!(_0x3e9a2f.length === 1 && _0x3e9a2f[0] === 36064)) {
                  _0x3e9a2f[0] = 36064;
                  _0x3e9a2f.length = 1;
                  _0x3bfa88 = true;
                }
              } else if (!(_0x3e9a2f.length === 1 && _0x3e9a2f[0] === 1029)) {
                _0x3e9a2f[0] = 1029;
                _0x3e9a2f.length = 1;
                _0x3bfa88 = true;
              }
              if (_0x3bfa88) {
                if (_0x33fe0e.isWebGL2) {
                  _0x260dc2.drawBuffers(_0x3e9a2f);
                } else {
                  _0x16a8b7.get("WEBGL_draw_buffers").drawBuffersWEBGL(_0x3e9a2f);
                }
              }
            }
            _0x29eb99.viewport(_0x4f043c);
            _0x29eb99.scissor(_0xe8f919);
            _0x29eb99.setScissorTest(_0x466e65);
            if (_0x41c053) {
              _0x5d9fc1 = _0x3c04de.get(_0x159207.texture);
              _0x260dc2.framebufferTexture2D(36160, 36064, 34069 + _0x481f3b, _0x5d9fc1.__webglTexture, _0x4116d4);
            } else if (_0xe583b0) {
              _0x159207 = _0x3c04de.get(_0x159207.texture);
              _0x481f3b = _0x481f3b || 0;
              _0x260dc2.framebufferTextureLayer(36160, 36064, _0x159207.__webglTexture, _0x4116d4 || 0, _0x481f3b);
            }
            _0x246cd4 = -1;
          };
          this.readRenderTargetPixels = function (_0x3b77bc, _0x5d3802, _0x50c5f7, _0x1acb19, _0x4ec6f1, _0x252f8f, _0x1df395) {
            if (_0x3b77bc && _0x3b77bc.isWebGLRenderTarget) {
              let _0x5e4d66 = _0x3c04de.get(_0x3b77bc).__webglFramebuffer;
              if (_0x3b77bc.isWebGLCubeRenderTarget && _0x1df395 !== undefined) {
                _0x5e4d66 = _0x5e4d66[_0x1df395];
              }
              if (_0x5e4d66) {
                _0x29eb99.bindFramebuffer(36160, _0x5e4d66);
                try {
                  var _0x5c04b0 = _0x3b77bc.texture;
                  var _0xa7e65b = _0x5c04b0.format;
                  var _0x4cca07 = _0x5c04b0.type;
                  if (_0xa7e65b !== _0x4f87e5 && _0x365395.convert(_0xa7e65b) !== _0x260dc2.getParameter(35739)) {
                    return;
                  }
                  var _0x11f0c5 = _0x4cca07 === _0x399f5d && (_0x16a8b7.has("EXT_color_buffer_half_float") || _0x33fe0e.isWebGL2 && _0x16a8b7.has("EXT_color_buffer_float"));
                  if (!(_0x4cca07 === _0x3a53e9 || _0x365395.convert(_0x4cca07) === _0x260dc2.getParameter(35738) || _0x4cca07 === _0x4c436e && (_0x33fe0e.isWebGL2 || _0x16a8b7.has("OES_texture_float") || _0x16a8b7.has("WEBGL_color_buffer_float")) || _0x11f0c5)) {
                    return;
                  }
                  if (_0x260dc2.checkFramebufferStatus(36160) === 36053 && _0x5d3802 >= 0 && _0x5d3802 <= _0x3b77bc.width - _0x1acb19 && _0x50c5f7 >= 0 && _0x50c5f7 <= _0x3b77bc.height - _0x4ec6f1) {
                    _0x260dc2.readPixels(_0x5d3802, _0x50c5f7, _0x1acb19, _0x4ec6f1, _0x365395.convert(_0xa7e65b), _0x365395.convert(_0x4cca07), _0x252f8f);
                  }
                } finally {
                  const _0x1835a6 = _0x52716a !== null ? _0x3c04de.get(_0x52716a).__webglFramebuffer : null;
                  _0x29eb99.bindFramebuffer(36160, _0x1835a6);
                }
              }
            }
          };
          this.copyFramebufferToTexture = function (_0x23fda0, _0x5a986c, _0x514b76 = 0) {
            var _0x19e591;
            var _0x545589;
            if (_0x5a986c.isFramebufferTexture === true) {
              _0x545589 = Math.pow(2, -_0x514b76);
              _0x19e591 = Math.floor(_0x5a986c.image.width * _0x545589);
              _0x545589 = Math.floor(_0x5a986c.image.height * _0x545589);
              _0x198baf.setTexture2D(_0x5a986c, 0);
              _0x260dc2.copyTexSubImage2D(3553, _0x514b76, 0, 0, _0x23fda0.x, _0x23fda0.y, _0x19e591, _0x545589);
              _0x29eb99.unbindTexture();
            }
          };
          this.copyTextureToTexture = function (_0x7fa716, _0x364f75, _0x39341e, _0x2280e7 = 0) {
            var _0x1ba090 = _0x364f75.image.width;
            var _0xd0a214 = _0x364f75.image.height;
            var _0x347750 = _0x365395.convert(_0x39341e.format);
            var _0x22cd81 = _0x365395.convert(_0x39341e.type);
            _0x198baf.setTexture2D(_0x39341e, 0);
            _0x260dc2.pixelStorei(37440, _0x39341e.flipY);
            _0x260dc2.pixelStorei(37441, _0x39341e.premultiplyAlpha);
            _0x260dc2.pixelStorei(3317, _0x39341e.unpackAlignment);
            if (_0x364f75.isDataTexture) {
              _0x260dc2.texSubImage2D(3553, _0x2280e7, _0x7fa716.x, _0x7fa716.y, _0x1ba090, _0xd0a214, _0x347750, _0x22cd81, _0x364f75.image.data);
            } else if (_0x364f75.isCompressedTexture) {
              _0x260dc2.compressedTexSubImage2D(3553, _0x2280e7, _0x7fa716.x, _0x7fa716.y, _0x364f75.mipmaps[0].width, _0x364f75.mipmaps[0].height, _0x347750, _0x364f75.mipmaps[0].data);
            } else {
              _0x260dc2.texSubImage2D(3553, _0x2280e7, _0x7fa716.x, _0x7fa716.y, _0x347750, _0x22cd81, _0x364f75.image);
            }
            if (_0x2280e7 === 0 && _0x39341e.generateMipmaps) {
              _0x260dc2.generateMipmap(3553);
            }
            _0x29eb99.unbindTexture();
          };
          this.copyTextureToTexture3D = function (_0x4542f8, _0x5669fd, _0x1a7236, _0x76d1b4, _0x3a72cf = 0) {
            if (!_0x167ecc.isWebGL1Renderer) {
              var _0x40927d = _0x4542f8.max.x - _0x4542f8.min.x + 1;
              var _0x6ee0e2 = _0x4542f8.max.y - _0x4542f8.min.y + 1;
              var _0x3742c3 = _0x4542f8.max.z - _0x4542f8.min.z + 1;
              var _0x45aeeb = _0x365395.convert(_0x76d1b4.format);
              var _0x292363 = _0x365395.convert(_0x76d1b4.type);
              var _0x27b6e3;
              let _0x1f39a8;
              _0x27b6e3 = 6;
              if (_0x76d1b4.isDataTexture3D) {
                _0x198baf.setTexture3D(_0x76d1b4, 0);
                _0x1f39a8 = 32879;
              } else {
                if (!_0x76d1b4.isDataTexture2DArray) {
                  return;
                }
                _0x198baf.setTexture2DArray(_0x76d1b4, 0);
                _0x1f39a8 = 35866;
              }
              _0x260dc2.pixelStorei(37440, _0x76d1b4.flipY);
              _0x260dc2.pixelStorei(37441, _0x76d1b4.premultiplyAlpha);
              _0x260dc2.pixelStorei(3317, _0x76d1b4.unpackAlignment);
              var _0x58cf93 = _0x260dc2.getParameter(3314);
              var _0x457473 = _0x260dc2.getParameter(32878);
              var _0x4d85a2 = _0x260dc2.getParameter(3316);
              var _0x40bc12 = _0x260dc2.getParameter(3315);
              var _0x1aca4d = _0x260dc2.getParameter(32877);
              var _0x2303c5 = _0x1a7236.isCompressedTexture ? _0x1a7236.mipmaps[0] : _0x1a7236.image;
              _0x260dc2.pixelStorei(3314, _0x2303c5.width);
              _0x260dc2.pixelStorei(32878, _0x2303c5.height);
              _0x260dc2.pixelStorei(3316, _0x4542f8.min.x);
              _0x260dc2.pixelStorei(3315, _0x4542f8.min.y);
              _0x260dc2.pixelStorei(32877, _0x4542f8.min.z);
              if (_0x1a7236.isDataTexture || _0x1a7236.isDataTexture3D) {
                _0x260dc2.texSubImage3D(_0x1f39a8, _0x3a72cf, _0x5669fd.x, _0x5669fd.y, _0x5669fd.z, _0x40927d, _0x6ee0e2, _0x3742c3, _0x45aeeb, _0x292363, _0x2303c5.data);
              } else if (_0x1a7236.isCompressedTexture) {
                _0x260dc2.compressedTexSubImage3D(_0x1f39a8, _0x3a72cf, _0x5669fd.x, _0x5669fd.y, _0x5669fd.z, _0x40927d, _0x6ee0e2, _0x3742c3, _0x45aeeb, _0x2303c5.data);
              } else {
                _0x260dc2.texSubImage3D(_0x1f39a8, _0x3a72cf, _0x5669fd.x, _0x5669fd.y, _0x5669fd.z, _0x40927d, _0x6ee0e2, _0x3742c3, _0x45aeeb, _0x292363, _0x2303c5);
              }
              _0x260dc2.pixelStorei(3314, _0x58cf93);
              _0x260dc2.pixelStorei(32878, _0x457473);
              _0x260dc2.pixelStorei(3316, _0x4d85a2);
              _0x260dc2.pixelStorei(3315, _0x40bc12);
              _0x260dc2.pixelStorei(32877, _0x1aca4d);
              if (_0x3a72cf === 0 && _0x76d1b4.generateMipmaps) {
                _0x260dc2.generateMipmap(_0x1f39a8);
              }
              _0x29eb99.unbindTexture();
            }
          };
          this.initTexture = function (_0xaf3fed) {
            _0x198baf.setTexture2D(_0xaf3fed, 0);
            _0x29eb99.unbindTexture();
          };
          this.resetState = function () {
            _0x3b929f = 0;
            _0x19d782 = 0;
            _0x52716a = null;
            _0x29eb99.reset();
            _0x36472b.reset();
          };
          if (typeof __THREE_DEVTOOLS__ != "undefined") {
            __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
              detail: this
            }));
          }
        }
        _0x45974d.prototype.isWebGLRenderer = true;
        class _0x2f6871 extends _0x45974d {}
        _0x2f6871.prototype.isWebGL1Renderer = true;
        class _0x8a9faa {
          constructor(_0x91e9c7, _0x53619a = 0.00025) {
            this.name = "";
            this.color = new _0x1282c2(_0x91e9c7);
            this.density = _0x53619a;
          }
          clone() {
            return new _0x8a9faa(this.color, this.density);
          }
          toJSON() {
            return {
              type: "FogExp2",
              color: this.color.getHex(),
              density: this.density
            };
          }
        }
        _0x8a9faa.prototype.isFogExp2 = true;
        class _0x2f0e9d {
          constructor(_0x35e1d0, _0x348bf8 = 1, _0x1e07be = 1000) {
            this.name = "";
            this.color = new _0x1282c2(_0x35e1d0);
            this.near = _0x348bf8;
            this.far = _0x1e07be;
          }
          clone() {
            return new _0x2f0e9d(this.color, this.near, this.far);
          }
          toJSON() {
            return {
              type: "Fog",
              color: this.color.getHex(),
              near: this.near,
              far: this.far
            };
          }
        }
        _0x2f0e9d.prototype.isFog = true;
        class _0x291ff9 extends _0x3b73b1 {
          constructor() {
            super();
            this.type = "Scene";
            this.background = null;
            this.environment = null;
            this.fog = null;
            this.overrideMaterial = null;
            this.autoUpdate = true;
            if (typeof __THREE_DEVTOOLS__ != "undefined") {
              __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
                detail: this
              }));
            }
          }
          copy(_0x6d9f3c, _0x5559c8) {
            super.copy(_0x6d9f3c, _0x5559c8);
            if (_0x6d9f3c.background !== null) {
              this.background = _0x6d9f3c.background.clone();
            }
            if (_0x6d9f3c.environment !== null) {
              this.environment = _0x6d9f3c.environment.clone();
            }
            if (_0x6d9f3c.fog !== null) {
              this.fog = _0x6d9f3c.fog.clone();
            }
            if (_0x6d9f3c.overrideMaterial !== null) {
              this.overrideMaterial = _0x6d9f3c.overrideMaterial.clone();
            }
            this.autoUpdate = _0x6d9f3c.autoUpdate;
            this.matrixAutoUpdate = _0x6d9f3c.matrixAutoUpdate;
            return this;
          }
          toJSON(_0x5d5df0) {
            const _0xfa0ac9 = super.toJSON(_0x5d5df0);
            if (this.fog !== null) {
              _0xfa0ac9.object.fog = this.fog.toJSON();
            }
            return _0xfa0ac9;
          }
        }
        _0x291ff9.prototype.isScene = true;
        class _0x3f5d1e {
          constructor(_0x444666, _0x5a1897) {
            this.array = _0x444666;
            this.stride = _0x5a1897;
            this.count = _0x444666 !== undefined ? _0x444666.length / _0x5a1897 : 0;
            this.usage = _0x4d2364;
            this.updateRange = {
              offset: 0,
              count: -1
            };
            this.version = 0;
            this.uuid = _0x2b30b2();
          }
          onUploadCallback() {}
          set needsUpdate(_0x26ed30) {
            if (_0x26ed30 === true) {
              this.version++;
            }
          }
          setUsage(_0x5ab5cd) {
            this.usage = _0x5ab5cd;
            return this;
          }
          copy(_0x4a0879) {
            this.array = new _0x4a0879.array.constructor(_0x4a0879.array);
            this.count = _0x4a0879.count;
            this.stride = _0x4a0879.stride;
            this.usage = _0x4a0879.usage;
            return this;
          }
          copyAt(_0xb53079, _0x10035d, _0x12e640) {
            _0xb53079 *= this.stride;
            _0x12e640 *= _0x10035d.stride;
            for (let _0x4cc045 = 0, _0x233774 = this.stride; _0x4cc045 < _0x233774; _0x4cc045++) {
              this.array[_0xb53079 + _0x4cc045] = _0x10035d.array[_0x12e640 + _0x4cc045];
            }
            return this;
          }
          set(_0x25f6f3, _0x4a18fd = 0) {
            this.array.set(_0x25f6f3, _0x4a18fd);
            return this;
          }
          clone(_0x20eba9) {
            if (_0x20eba9.arrayBuffers === undefined) {
              _0x20eba9.arrayBuffers = {};
            }
            if (this.array.buffer._uuid === undefined) {
              this.array.buffer._uuid = _0x2b30b2();
            }
            if (_0x20eba9.arrayBuffers[this.array.buffer._uuid] === undefined) {
              _0x20eba9.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
            }
            _0x20eba9 = new this.array.constructor(_0x20eba9.arrayBuffers[this.array.buffer._uuid]);
            var _0x293970 = 13;
            const _0x484f69 = new this.constructor(_0x20eba9, this.stride);
            _0x293970 = 5;
            _0x484f69.setUsage(this.usage);
            return _0x484f69;
          }
          onUpload(_0xa5e907) {
            this.onUploadCallback = _0xa5e907;
            return this;
          }
          toJSON(_0x4dc7c9) {
            if (_0x4dc7c9.arrayBuffers === undefined) {
              _0x4dc7c9.arrayBuffers = {};
            }
            if (this.array.buffer._uuid === undefined) {
              this.array.buffer._uuid = _0x2b30b2();
            }
            if (_0x4dc7c9.arrayBuffers[this.array.buffer._uuid] === undefined) {
              _0x4dc7c9.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
            }
            return {
              uuid: this.uuid,
              buffer: this.array.buffer._uuid,
              type: this.array.constructor.name,
              stride: this.stride
            };
          }
        }
        _0x3f5d1e.prototype.isInterleavedBuffer = true;
        var _0xe422f7 = 10;
        const _0x27d34b = new _0x1d20ef();
        _0xe422f7 = 8;
        class _0x49f211 {
          constructor(_0x3d6582, _0x7a0511, _0x54e611, _0x240009 = false) {
            this.name = "";
            this.data = _0x3d6582;
            this.itemSize = _0x7a0511;
            this.offset = _0x54e611;
            this.normalized = _0x240009 === true;
          }
          get count() {
            return this.data.count;
          }
          get array() {
            return this.data.array;
          }
          set needsUpdate(_0x292d88) {
            this.data.needsUpdate = _0x292d88;
          }
          applyMatrix4(_0x1a71c2) {
            for (let _0x424835 = 0, _0x291644 = this.data.count; _0x424835 < _0x291644; _0x424835++) {
              _0x27d34b.x = this.getX(_0x424835);
              _0x27d34b.y = this.getY(_0x424835);
              _0x27d34b.z = this.getZ(_0x424835);
              _0x27d34b.applyMatrix4(_0x1a71c2);
              this.setXYZ(_0x424835, _0x27d34b.x, _0x27d34b.y, _0x27d34b.z);
            }
            return this;
          }
          applyNormalMatrix(_0x1c7b94) {
            for (let _0x2e6c0c = 0, _0x52cd9c = this.count; _0x2e6c0c < _0x52cd9c; _0x2e6c0c++) {
              _0x27d34b.x = this.getX(_0x2e6c0c);
              _0x27d34b.y = this.getY(_0x2e6c0c);
              _0x27d34b.z = this.getZ(_0x2e6c0c);
              _0x27d34b.applyNormalMatrix(_0x1c7b94);
              this.setXYZ(_0x2e6c0c, _0x27d34b.x, _0x27d34b.y, _0x27d34b.z);
            }
            return this;
          }
          transformDirection(_0x4a6017) {
            for (let _0x4ab40a = 0, _0x32797f = this.count; _0x4ab40a < _0x32797f; _0x4ab40a++) {
              _0x27d34b.x = this.getX(_0x4ab40a);
              _0x27d34b.y = this.getY(_0x4ab40a);
              _0x27d34b.z = this.getZ(_0x4ab40a);
              _0x27d34b.transformDirection(_0x4a6017);
              this.setXYZ(_0x4ab40a, _0x27d34b.x, _0x27d34b.y, _0x27d34b.z);
            }
            return this;
          }
          setX(_0xc1376, _0x1f8ef1) {
            this.data.array[_0xc1376 * this.data.stride + this.offset] = _0x1f8ef1;
            return this;
          }
          setY(_0x329603, _0x4a92cd) {
            this.data.array[_0x329603 * this.data.stride + this.offset + 1] = _0x4a92cd;
            return this;
          }
          setZ(_0x9fc96a, _0x13506f) {
            this.data.array[_0x9fc96a * this.data.stride + this.offset + 2] = _0x13506f;
            return this;
          }
          setW(_0x5dc387, _0x8c7749) {
            this.data.array[_0x5dc387 * this.data.stride + this.offset + 3] = _0x8c7749;
            return this;
          }
          getX(_0x404a91) {
            return this.data.array[_0x404a91 * this.data.stride + this.offset];
          }
          getY(_0x287754) {
            return this.data.array[_0x287754 * this.data.stride + this.offset + 1];
          }
          getZ(_0x6baaa7) {
            return this.data.array[_0x6baaa7 * this.data.stride + this.offset + 2];
          }
          getW(_0x2e1dd1) {
            return this.data.array[_0x2e1dd1 * this.data.stride + this.offset + 3];
          }
          setXY(_0x29d2be, _0x6a6625, _0x5bb91b) {
            _0x29d2be = _0x29d2be * this.data.stride + this.offset;
            this.data.array[_0x29d2be + 0] = _0x6a6625;
            this.data.array[_0x29d2be + 1] = _0x5bb91b;
            return this;
          }
          setXYZ(_0x1d2770, _0x37128c, _0x298eb2, _0x1046fa) {
            _0x1d2770 = _0x1d2770 * this.data.stride + this.offset;
            this.data.array[_0x1d2770 + 0] = _0x37128c;
            this.data.array[_0x1d2770 + 1] = _0x298eb2;
            this.data.array[_0x1d2770 + 2] = _0x1046fa;
            return this;
          }
          setXYZW(_0x1cc997, _0x1fe90c, _0x585726, _0x17eda3, _0x2241b8) {
            _0x1cc997 = _0x1cc997 * this.data.stride + this.offset;
            this.data.array[_0x1cc997 + 0] = _0x1fe90c;
            this.data.array[_0x1cc997 + 1] = _0x585726;
            this.data.array[_0x1cc997 + 2] = _0x17eda3;
            this.data.array[_0x1cc997 + 3] = _0x2241b8;
            return this;
          }
          clone(_0x282681) {
            if (_0x282681 !== undefined) {
              if (_0x282681.interleavedBuffers === undefined) {
                _0x282681.interleavedBuffers = {};
              }
              if (_0x282681.interleavedBuffers[this.data.uuid] === undefined) {
                _0x282681.interleavedBuffers[this.data.uuid] = this.data.clone(_0x282681);
              }
              return new _0x49f211(_0x282681.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
            }
            {
              const _0x51151a = [];
              for (let _0x5bbde6 = 0; _0x5bbde6 < this.count; _0x5bbde6++) {
                var _0x11edb3 = _0x5bbde6 * this.data.stride + this.offset;
                for (let _0x381049 = 0; _0x381049 < this.itemSize; _0x381049++) {
                  _0x51151a.push(this.data.array[_0x11edb3 + _0x381049]);
                }
              }
              return new _0x570a7f(new this.array.constructor(_0x51151a), this.itemSize, this.normalized);
            }
          }
          toJSON(_0x2a74dd) {
            if (_0x2a74dd !== undefined) {
              if (_0x2a74dd.interleavedBuffers === undefined) {
                _0x2a74dd.interleavedBuffers = {};
              }
              if (_0x2a74dd.interleavedBuffers[this.data.uuid] === undefined) {
                _0x2a74dd.interleavedBuffers[this.data.uuid] = this.data.toJSON(_0x2a74dd);
              }
              return {
                isInterleavedBufferAttribute: true,
                itemSize: this.itemSize,
                data: this.data.uuid,
                offset: this.offset,
                normalized: this.normalized
              };
            }
            {
              const _0x37d4a4 = [];
              for (let _0x587c0e = 0; _0x587c0e < this.count; _0x587c0e++) {
                var _0x3c39a7 = _0x587c0e * this.data.stride + this.offset;
                for (let _0x471576 = 0; _0x471576 < this.itemSize; _0x471576++) {
                  _0x37d4a4.push(this.data.array[_0x3c39a7 + _0x471576]);
                }
              }
              return {
                itemSize: this.itemSize,
                type: this.array.constructor.name,
                array: _0x37d4a4,
                normalized: this.normalized
              };
            }
          }
        }
        _0x49f211.prototype.isInterleavedBufferAttribute = true;
        class _0x4b5ffc extends _0x2098dd {
          constructor(_0x18ae7a) {
            super();
            this.type = "SpriteMaterial";
            this.color = new _0x1282c2(16777215);
            this.map = null;
            this.alphaMap = null;
            this.rotation = 0;
            this.sizeAttenuation = true;
            this.transparent = true;
            this.setValues(_0x18ae7a);
          }
          copy(_0x48fada) {
            super.copy(_0x48fada);
            this.color.copy(_0x48fada.color);
            this.map = _0x48fada.map;
            this.alphaMap = _0x48fada.alphaMap;
            this.rotation = _0x48fada.rotation;
            this.sizeAttenuation = _0x48fada.sizeAttenuation;
            return this;
          }
        }
        let _0x3c7009;
        _0x4b5ffc.prototype.isSpriteMaterial = true;
        const _0x3adb14 = new _0x1d20ef();
        const _0x569892 = new _0x1d20ef();
        const _0x1b4779 = new _0x1d20ef();
        const _0x367d5f = new _0x25f874();
        const _0x593bc9 = new _0x25f874();
        const _0x1f65ef = new _0x33b2c9();
        const _0x52387f = new _0x1d20ef();
        const _0x3065d2 = new _0x1d20ef();
        const _0x483c86 = new _0x1d20ef();
        const _0x3942b2 = new _0x25f874();
        const _0x4c90df = new _0x25f874();
        const _0x5e456d = new _0x25f874();
        class _0x5edc9a extends _0x3b73b1 {
          constructor(_0x119da5) {
            var _0x5d7b06;
            super();
            this.type = "Sprite";
            if (_0x3c7009 === undefined) {
              _0x3c7009 = new _0x3f374d();
              _0x5d7b06 = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);
              _0x5d7b06 = new _0x3f5d1e(_0x5d7b06, 5);
              _0x3c7009.setIndex([0, 1, 2, 0, 2, 3]);
              _0x3c7009.setAttribute("position", new _0x49f211(_0x5d7b06, 3, 0, false));
              _0x3c7009.setAttribute("uv", new _0x49f211(_0x5d7b06, 2, 3, false));
            }
            this.geometry = _0x3c7009;
            this.material = _0x119da5 !== undefined ? _0x119da5 : new _0x4b5ffc();
            this.center = new _0x25f874(0.5, 0.5);
          }
          raycast(_0x298827, _0x4205b0) {
            let _0x475826;
            let _0x48d50b;
            _0x298827.camera;
            _0x569892.setFromMatrixScale(this.matrixWorld);
            _0x1f65ef.copy(_0x298827.camera.matrixWorld);
            this.modelViewMatrix.multiplyMatrices(_0x298827.camera.matrixWorldInverse, this.matrixWorld);
            _0x1b4779.setFromMatrixPosition(this.modelViewMatrix);
            if (_0x298827.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
              _0x569892.multiplyScalar(-_0x1b4779.z);
            }
            if ((_0x2bd636 = this.material.rotation) !== 0) {
              _0x48d50b = Math.cos(_0x2bd636);
              _0x475826 = Math.sin(_0x2bd636);
            }
            var _0x14b02d = 9;
            var _0x2bd636 = this.center;
            _0x14b02d = 10;
            _0xd1548c(_0x52387f.set(-0.5, -0.5, 0), _0x1b4779, _0x2bd636, _0x569892, _0x475826, _0x48d50b);
            _0xd1548c(_0x3065d2.set(0.5, -0.5, 0), _0x1b4779, _0x2bd636, _0x569892, _0x475826, _0x48d50b);
            _0xd1548c(_0x483c86.set(0.5, 0.5, 0), _0x1b4779, _0x2bd636, _0x569892, _0x475826, _0x48d50b);
            _0x3942b2.set(0, 0);
            _0x4c90df.set(1, 0);
            _0x5e456d.set(1, 1);
            if (!(_0x298827.ray.intersectTriangle(_0x52387f, _0x3065d2, _0x483c86, false, _0x3adb14) === null && (_0xd1548c(_0x3065d2.set(-0.5, 0.5, 0), _0x1b4779, _0x2bd636, _0x569892, _0x475826, _0x48d50b), _0x4c90df.set(0, 1), _0x298827.ray.intersectTriangle(_0x52387f, _0x483c86, _0x3065d2, false, _0x3adb14) === null) || (_0x2bd636 = _0x298827.ray.origin.distanceTo(_0x3adb14)) < _0x298827.near || _0x2bd636 > _0x298827.far)) {
              _0x4205b0.push({
                distance: _0x2bd636,
                point: _0x3adb14.clone(),
                uv: _0x54aa93.getUV(_0x3adb14, _0x52387f, _0x3065d2, _0x483c86, _0x3942b2, _0x4c90df, _0x5e456d, new _0x25f874()),
                face: null,
                object: this
              });
            }
          }
          copy(_0x5e67ac) {
            super.copy(_0x5e67ac);
            if (_0x5e67ac.center !== undefined) {
              this.center.copy(_0x5e67ac.center);
            }
            this.material = _0x5e67ac.material;
            return this;
          }
        }
        function _0xd1548c(_0x16c6be, _0x4845e5, _0x324e2d, _0x427b19, _0x57d9b5, _0x48692a) {
          _0x367d5f.subVectors(_0x16c6be, _0x324e2d).addScalar(0.5).multiply(_0x427b19);
          if (_0x57d9b5 !== undefined) {
            _0x593bc9.x = _0x48692a * _0x367d5f.x - _0x57d9b5 * _0x367d5f.y;
            _0x593bc9.y = _0x57d9b5 * _0x367d5f.x + _0x48692a * _0x367d5f.y;
          } else {
            _0x593bc9.copy(_0x367d5f);
          }
          _0x16c6be.copy(_0x4845e5);
          _0x16c6be.x += _0x593bc9.x;
          _0x16c6be.y += _0x593bc9.y;
          _0x16c6be.applyMatrix4(_0x1f65ef);
        }
        _0x5edc9a.prototype.isSprite = true;
        const _0x35f36e = new _0x1d20ef();
        const _0xedf80a = new _0x1d20ef();
        class _0x4bfa65 extends _0x3b73b1 {
          constructor() {
            super();
            this._currentLevel = 0;
            this.type = "LOD";
            Object.defineProperties(this, {
              levels: {
                enumerable: true,
                value: []
              },
              isLOD: {
                value: true
              }
            });
            this.autoUpdate = true;
          }
          copy(_0x1653bd) {
            super.copy(_0x1653bd, false);
            var _0x5b8fa8 = _0x1653bd.levels;
            for (let _0x9ab9c1 = 0, _0x5a6f8c = _0x5b8fa8.length; _0x9ab9c1 < _0x5a6f8c; _0x9ab9c1++) {
              var _0x3e3255 = 17;
              const _0x3a675a = _0x5b8fa8[_0x9ab9c1];
              _0x3e3255 = 4;
              this.addLevel(_0x3a675a.object.clone(), _0x3a675a.distance);
            }
            this.autoUpdate = _0x1653bd.autoUpdate;
            return this;
          }
          addLevel(_0xb02492, _0x36cd95 = 0) {
            _0x36cd95 = Math.abs(_0x36cd95);
            const _0x275f8d = this.levels;
            let _0x5ae999;
            for (_0x5ae999 = 0; _0x5ae999 < _0x275f8d.length && !(_0x36cd95 < _0x275f8d[_0x5ae999].distance); _0x5ae999++);
            _0x275f8d.splice(_0x5ae999, 0, {
              distance: _0x36cd95,
              object: _0xb02492
            });
            this.add(_0xb02492);
            return this;
          }
          getCurrentLevel() {
            return this._currentLevel;
          }
          getObjectForDistance(_0x5bfc38) {
            var _0x1ad66a = this.levels;
            if (_0x1ad66a.length > 0) {
              let _0x39a033;
              let _0x2c717d;
              _0x39a033 = 1;
              _0x2c717d = _0x1ad66a.length;
              for (; _0x39a033 < _0x2c717d && !(_0x5bfc38 < _0x1ad66a[_0x39a033].distance); _0x39a033++);
              return _0x1ad66a[_0x39a033 - 1].object;
            }
            return null;
          }
          raycast(_0xf229a3, _0x37276b) {
            var _0x2129fa;
            if (this.levels.length > 0) {
              _0x35f36e.setFromMatrixPosition(this.matrixWorld);
              _0x2129fa = _0xf229a3.ray.origin.distanceTo(_0x35f36e);
              this.getObjectForDistance(_0x2129fa).raycast(_0xf229a3, _0x37276b);
            }
          }
          update(_0x296eed) {
            const _0x417309 = this.levels;
            if (_0x417309.length > 1) {
              _0x35f36e.setFromMatrixPosition(_0x296eed.matrixWorld);
              _0xedf80a.setFromMatrixPosition(this.matrixWorld);
              var _0x34b01b = _0x35f36e.distanceTo(_0xedf80a) / _0x296eed.zoom;
              let _0x7fadab;
              let _0x36a20c;
              _0x417309[0].object.visible = true;
              _0x7fadab = 1;
              _0x36a20c = _0x417309.length;
              for (; _0x7fadab < _0x36a20c && _0x34b01b >= _0x417309[_0x7fadab].distance; _0x7fadab++) {
                _0x417309[_0x7fadab - 1].object.visible = false;
                _0x417309[_0x7fadab].object.visible = true;
              }
              for (this._currentLevel = _0x7fadab - 1; _0x7fadab < _0x36a20c; _0x7fadab++) {
                _0x417309[_0x7fadab].object.visible = false;
              }
            }
          }
          toJSON(_0x494b4d) {
            var _0x13c68e = 9;
            const _0x3c726b = super.toJSON(_0x494b4d);
            _0x13c68e = 9;
            if (this.autoUpdate === false) {
              _0x3c726b.object.autoUpdate = false;
            }
            _0x3c726b.object.levels = [];
            var _0x26c526 = this.levels;
            for (let _0x44bb84 = 0, _0x5db7c3 = _0x26c526.length; _0x44bb84 < _0x5db7c3; _0x44bb84++) {
              var _0x256a5c = 6;
              var _0x2b091b = _0x26c526[_0x44bb84];
              _0x256a5c = 4;
              _0x3c726b.object.levels.push({
                object: _0x2b091b.object.uuid,
                distance: _0x2b091b.distance
              });
            }
            return _0x3c726b;
          }
        }
        const _0x2a62a9 = new _0x1d20ef();
        const _0x36bfe2 = new _0x275701();
        const _0x38eb92 = new _0x275701();
        const _0x74d0e1 = new _0x1d20ef();
        const _0x4759de = new _0x33b2c9();
        class _0x1d0bf6 extends _0x9b7b04 {
          constructor(_0x441b53, _0x38309d) {
            super(_0x441b53, _0x38309d);
            this.type = "SkinnedMesh";
            this.bindMode = "attached";
            this.bindMatrix = new _0x33b2c9();
            this.bindMatrixInverse = new _0x33b2c9();
          }
          copy(_0x1aed53) {
            super.copy(_0x1aed53);
            this.bindMode = _0x1aed53.bindMode;
            this.bindMatrix.copy(_0x1aed53.bindMatrix);
            this.bindMatrixInverse.copy(_0x1aed53.bindMatrixInverse);
            this.skeleton = _0x1aed53.skeleton;
            return this;
          }
          bind(_0xe327a9, _0x140d9d) {
            this.skeleton = _0xe327a9;
            if (_0x140d9d === undefined) {
              this.updateMatrixWorld(true);
              this.skeleton.calculateInverses();
              _0x140d9d = this.matrixWorld;
            }
            this.bindMatrix.copy(_0x140d9d);
            this.bindMatrixInverse.copy(_0x140d9d).invert();
          }
          pose() {
            this.skeleton.pose();
          }
          normalizeSkinWeights() {
            const _0x431580 = new _0x275701();
            const _0x43be6c = this.geometry.attributes.skinWeight;
            for (let _0x2b11f6 = 0, _0xe913ef = _0x43be6c.count; _0x2b11f6 < _0xe913ef; _0x2b11f6++) {
              _0x431580.x = _0x43be6c.getX(_0x2b11f6);
              _0x431580.y = _0x43be6c.getY(_0x2b11f6);
              _0x431580.z = _0x43be6c.getZ(_0x2b11f6);
              _0x431580.w = _0x43be6c.getW(_0x2b11f6);
              var _0x22e373 = 1 / _0x431580.manhattanLength();
              if (_0x22e373 != Infinity) {
                _0x431580.multiplyScalar(_0x22e373);
              } else {
                _0x431580.set(1, 0, 0, 0);
              }
              _0x43be6c.setXYZW(_0x2b11f6, _0x431580.x, _0x431580.y, _0x431580.z, _0x431580.w);
            }
          }
          updateMatrixWorld(_0x4e375d) {
            super.updateMatrixWorld(_0x4e375d);
            if (this.bindMode === "attached") {
              this.bindMatrixInverse.copy(this.matrixWorld).invert();
            } else if (this.bindMode === "detached") {
              this.bindMatrixInverse.copy(this.bindMatrix).invert();
            }
          }
          boneTransform(_0x304ed6, _0x16e757) {
            var _0x32413b = this.skeleton;
            var _0x4bd91a = this.geometry;
            _0x36bfe2.fromBufferAttribute(_0x4bd91a.attributes.skinIndex, _0x304ed6);
            _0x38eb92.fromBufferAttribute(_0x4bd91a.attributes.skinWeight, _0x304ed6);
            _0x2a62a9.copy(_0x16e757).applyMatrix4(this.bindMatrix);
            _0x16e757.set(0, 0, 0);
            for (let _0x228c0c = 0; _0x228c0c < 4; _0x228c0c++) {
              var _0x1cbc47;
              var _0x40731a = _0x38eb92.getComponent(_0x228c0c);
              if (_0x40731a !== 0) {
                _0x1cbc47 = _0x36bfe2.getComponent(_0x228c0c);
                _0x4759de.multiplyMatrices(_0x32413b.bones[_0x1cbc47].matrixWorld, _0x32413b.boneInverses[_0x1cbc47]);
                _0x16e757.addScaledVector(_0x74d0e1.copy(_0x2a62a9).applyMatrix4(_0x4759de), _0x40731a);
              }
            }
            return _0x16e757.applyMatrix4(this.bindMatrixInverse);
          }
        }
        _0x1d0bf6.prototype.isSkinnedMesh = true;
        class _0x425abb extends _0x3b73b1 {
          constructor() {
            super();
            this.type = "Bone";
          }
        }
        _0x425abb.prototype.isBone = true;
        class _0x415c15 extends _0x3d39cb {
          constructor(_0x3c9804 = null, _0x5c721a = 1, _0x410620 = 1, _0x572ea7, _0x2c7c8e, _0x996cc, _0x3f3c1e, _0x37d9d2, _0x4fca54 = _0x297826, _0x5bca42 = _0x297826, _0x5b1a3c, _0x574138) {
            super(null, _0x996cc, _0x3f3c1e, _0x37d9d2, _0x4fca54, _0x5bca42, _0x572ea7, _0x2c7c8e, _0x5b1a3c, _0x574138);
            this.image = {
              data: _0x3c9804,
              width: _0x5c721a,
              height: _0x410620
            };
            this.magFilter = _0x4fca54;
            this.minFilter = _0x5bca42;
            this.generateMipmaps = false;
            this.flipY = false;
            this.unpackAlignment = 1;
          }
        }
        _0x415c15.prototype.isDataTexture = true;
        const _0x5317af = new _0x33b2c9();
        const _0x8602a5 = new _0x33b2c9();
        class _0x571a0b {
          constructor(_0xeb4570 = [], _0x51557e = []) {
            this.uuid = _0x2b30b2();
            this.bones = _0xeb4570.slice(0);
            this.boneInverses = _0x51557e;
            this.boneMatrices = null;
            this.boneTexture = null;
            this.boneTextureSize = 0;
            this.frame = -1;
            this.init();
          }
          init() {
            var _0x450542 = this.bones;
            var _0x3d77b3 = this.boneInverses;
            this.boneMatrices = new Float32Array(_0x450542.length * 16);
            if (_0x3d77b3.length === 0) {
              this.calculateInverses();
            } else if (_0x450542.length !== _0x3d77b3.length) {
              this.boneInverses = [];
              for (let _0x1ce3ba = 0, _0x151ce5 = this.bones.length; _0x1ce3ba < _0x151ce5; _0x1ce3ba++) {
                this.boneInverses.push(new _0x33b2c9());
              }
            }
          }
          calculateInverses() {
            for (let _0x50aa08 = this.boneInverses.length = 0, _0x15bc3c = this.bones.length; _0x50aa08 < _0x15bc3c; _0x50aa08++) {
              const _0x432c5f = new _0x33b2c9();
              if (this.bones[_0x50aa08]) {
                _0x432c5f.copy(this.bones[_0x50aa08].matrixWorld).invert();
              }
              this.boneInverses.push(_0x432c5f);
            }
          }
          pose() {
            for (let _0x2b9d55 = 0, _0x3610ca = this.bones.length; _0x2b9d55 < _0x3610ca; _0x2b9d55++) {
              var _0x187381 = 4;
              const _0x4fd43b = this.bones[_0x2b9d55];
              _0x187381 = 0;
              if (_0x4fd43b) {
                _0x4fd43b.matrixWorld.copy(this.boneInverses[_0x2b9d55]).invert();
              }
            }
            for (let _0x5ed515 = 0, _0x5eb4e8 = this.bones.length; _0x5ed515 < _0x5eb4e8; _0x5ed515++) {
              const _0x580010 = this.bones[_0x5ed515];
              if (_0x580010) {
                if (_0x580010.parent && _0x580010.parent.isBone) {
                  _0x580010.matrix.copy(_0x580010.parent.matrixWorld).invert();
                  _0x580010.matrix.multiply(_0x580010.matrixWorld);
                } else {
                  _0x580010.matrix.copy(_0x580010.matrixWorld);
                }
                _0x580010.matrix.decompose(_0x580010.position, _0x580010.quaternion, _0x580010.scale);
              }
            }
          }
          update() {
            var _0x24d482 = this.bones;
            var _0x52f2d4 = this.boneInverses;
            var _0xcd2eec = this.boneMatrices;
            const _0x4ee6c8 = this.boneTexture;
            for (let _0x290fcc = 0, _0x5e47bc = _0x24d482.length; _0x290fcc < _0x5e47bc; _0x290fcc++) {
              var _0x36c46d = _0x24d482[_0x290fcc] ? _0x24d482[_0x290fcc].matrixWorld : _0x8602a5;
              _0x5317af.multiplyMatrices(_0x36c46d, _0x52f2d4[_0x290fcc]);
              _0x5317af.toArray(_0xcd2eec, _0x290fcc * 16);
            }
            if (_0x4ee6c8 !== null) {
              _0x4ee6c8.needsUpdate = true;
            }
          }
          clone() {
            return new _0x571a0b(this.bones, this.boneInverses);
          }
          computeBoneTexture() {
            var _0x542639 = _0x2f55b5(_0x542639 = Math.sqrt(this.bones.length * 4));
            _0x542639 = Math.max(_0x542639, 4);
            var _0x355fef = 9;
            const _0x397311 = new Float32Array(_0x542639 * _0x542639 * 4);
            _0x355fef = 1;
            _0x397311.set(this.boneMatrices);
            var _0x1a9e2e = 3;
            const _0x406626 = new _0x415c15(_0x397311, _0x542639, _0x542639, _0x4f87e5, _0x4c436e);
            _0x1a9e2e = "dhpg";
            _0x406626.needsUpdate = true;
            this.boneMatrices = _0x397311;
            this.boneTexture = _0x406626;
            this.boneTextureSize = _0x542639;
            return this;
          }
          getBoneByName(_0x2685c2) {
            for (let _0x174ac8 = 0, _0x3911ab = this.bones.length; _0x174ac8 < _0x3911ab; _0x174ac8++) {
              var _0x2fe22b = 9;
              var _0x4a57f9 = this.bones[_0x174ac8];
              _0x2fe22b = 3;
              if (_0x4a57f9.name === _0x2685c2) {
                return _0x4a57f9;
              }
            }
          }
          dispose() {
            if (this.boneTexture !== null) {
              this.boneTexture.dispose();
              this.boneTexture = null;
            }
          }
          fromJSON(_0xa86547, _0x580a03) {
            this.uuid = _0xa86547.uuid;
            for (let _0x565962 = 0, _0x3ee782 = _0xa86547.bones.length; _0x565962 < _0x3ee782; _0x565962++) {
              var _0x3ce5ad = _0xa86547.bones[_0x565962];
              let _0x36b0a3 = _0x580a03[_0x3ce5ad];
              if (_0x36b0a3 === undefined) {
                _0x36b0a3 = new _0x425abb();
              }
              this.bones.push(_0x36b0a3);
              this.boneInverses.push(new _0x33b2c9().fromArray(_0xa86547.boneInverses[_0x565962]));
            }
            this.init();
            return this;
          }
          toJSON() {
            var _0x3b26dd;
            const _0x40894f = {
              metadata: {
                version: 4.5,
                type: "Skeleton",
                generator: "Skeleton.toJSON"
              },
              bones: [],
              boneInverses: []
            };
            _0x3b26dd = 10;
            _0x40894f.uuid = this.uuid;
            var _0xee0e5b = this.bones;
            var _0x179eb9 = this.boneInverses;
            for (let _0x21636e = 0, _0x350d68 = _0xee0e5b.length; _0x21636e < _0x350d68; _0x21636e++) {
              var _0x76b313 = _0xee0e5b[_0x21636e];
              _0x40894f.bones.push(_0x76b313.uuid);
              const _0x4bef92 = _0x179eb9[_0x21636e];
              _0x40894f.boneInverses.push(_0x4bef92.toArray());
            }
            return _0x40894f;
          }
        }
        class _0x4da3fc extends _0x570a7f {
          constructor(_0x54b369, _0x493958, _0x38b07e, _0x598ebf = 1) {
            if (typeof _0x38b07e == "number") {
              _0x598ebf = _0x38b07e;
              _0x38b07e = false;
            }
            super(_0x54b369, _0x493958, _0x38b07e);
            this.meshPerAttribute = _0x598ebf;
          }
          copy(_0x5dc47e) {
            super.copy(_0x5dc47e);
            this.meshPerAttribute = _0x5dc47e.meshPerAttribute;
            return this;
          }
          toJSON() {
            const _0x2e28d0 = super.toJSON();
            _0x2e28d0.meshPerAttribute = this.meshPerAttribute;
            _0x2e28d0.isInstancedBufferAttribute = true;
            return _0x2e28d0;
          }
        }
        _0x4da3fc.prototype.isInstancedBufferAttribute = true;
        const _0x48b586 = new _0x33b2c9();
        const _0x37c45a = new _0x33b2c9();
        const _0x344eb4 = [];
        const _0x5dce75 = new _0x9b7b04();
        class _0x238c8f extends _0x9b7b04 {
          constructor(_0x13169a, _0x5a3d6c, _0x5841a0) {
            super(_0x13169a, _0x5a3d6c);
            this.instanceMatrix = new _0x4da3fc(new Float32Array(_0x5841a0 * 16), 16);
            this.instanceColor = null;
            this.count = _0x5841a0;
            this.frustumCulled = false;
          }
          copy(_0x33dca2) {
            super.copy(_0x33dca2);
            this.instanceMatrix.copy(_0x33dca2.instanceMatrix);
            if (_0x33dca2.instanceColor !== null) {
              this.instanceColor = _0x33dca2.instanceColor.clone();
            }
            this.count = _0x33dca2.count;
            return this;
          }
          getColorAt(_0x2f3c9c, _0x566693) {
            _0x566693.fromArray(this.instanceColor.array, _0x2f3c9c * 3);
          }
          getMatrixAt(_0x4ed5b2, _0x2453c8) {
            _0x2453c8.fromArray(this.instanceMatrix.array, _0x4ed5b2 * 16);
          }
          raycast(_0x489d9f, _0x324982) {
            var _0x3ba181 = this.matrixWorld;
            var _0x5404e2 = this.count;
            _0x5dce75.geometry = this.geometry;
            _0x5dce75.material = this.material;
            if (_0x5dce75.material !== undefined) {
              for (let _0x33f5bf = 0; _0x33f5bf < _0x5404e2; _0x33f5bf++) {
                this.getMatrixAt(_0x33f5bf, _0x48b586);
                _0x37c45a.multiplyMatrices(_0x3ba181, _0x48b586);
                _0x5dce75.matrixWorld = _0x37c45a;
                _0x5dce75.raycast(_0x489d9f, _0x344eb4);
                for (let _0x182bf8 = 0, _0x5ee82c = _0x344eb4.length; _0x182bf8 < _0x5ee82c; _0x182bf8++) {
                  const _0x412adf = _0x344eb4[_0x182bf8];
                  _0x412adf.instanceId = _0x33f5bf;
                  _0x412adf.object = this;
                  _0x324982.push(_0x412adf);
                }
                _0x344eb4.length = 0;
              }
            }
          }
          setColorAt(_0xd907a0, _0x77707f) {
            if (this.instanceColor === null) {
              this.instanceColor = new _0x4da3fc(new Float32Array(this.instanceMatrix.count * 3), 3);
            }
            _0x77707f.toArray(this.instanceColor.array, _0xd907a0 * 3);
          }
          setMatrixAt(_0x214a8c, _0x3986f9) {
            _0x3986f9.toArray(this.instanceMatrix.array, _0x214a8c * 16);
          }
          updateMorphTargets() {}
          dispose() {
            this.dispatchEvent({
              type: "dispose"
            });
          }
        }
        _0x238c8f.prototype.isInstancedMesh = true;
        class _0x3c9a1c extends _0x2098dd {
          constructor(_0x4a8dd2) {
            super();
            this.type = "LineBasicMaterial";
            this.color = new _0x1282c2(16777215);
            this.linewidth = 1;
            this.linecap = "round";
            this.linejoin = "round";
            this.setValues(_0x4a8dd2);
          }
          copy(_0x17810e) {
            super.copy(_0x17810e);
            this.color.copy(_0x17810e.color);
            this.linewidth = _0x17810e.linewidth;
            this.linecap = _0x17810e.linecap;
            this.linejoin = _0x17810e.linejoin;
            return this;
          }
        }
        _0x3c9a1c.prototype.isLineBasicMaterial = true;
        const _0x5b1322 = new _0x1d20ef();
        const _0x3eeef9 = new _0x1d20ef();
        const _0xa63b60 = new _0x33b2c9();
        const _0x149ae5 = new _0x123ff1();
        const _0x1b4db5 = new _0x26f734();
        class _0x266c5e extends _0x3b73b1 {
          constructor(_0x4618ac = new _0x3f374d(), _0x35c44a = new _0x3c9a1c()) {
            super();
            this.type = "Line";
            this.geometry = _0x4618ac;
            this.material = _0x35c44a;
            this.updateMorphTargets();
          }
          copy(_0x44f0b1) {
            super.copy(_0x44f0b1);
            this.material = _0x44f0b1.material;
            this.geometry = _0x44f0b1.geometry;
            return this;
          }
          computeLineDistances() {
            var _0x197e47;
            const _0x120786 = this.geometry;
            _0x197e47 = 8;
            if (_0x120786.isBufferGeometry) {
              if (_0x120786.index === null) {
                var _0x24fa04;
                var _0x1ab037 = _0x120786.attributes.position;
                _0x24fa04 = 8;
                const _0xba0406 = [0];
                for (let _0x497045 = 1, _0x34d72a = _0x1ab037.count; _0x497045 < _0x34d72a; _0x497045++) {
                  _0x5b1322.fromBufferAttribute(_0x1ab037, _0x497045 - 1);
                  _0x3eeef9.fromBufferAttribute(_0x1ab037, _0x497045);
                  _0xba0406[_0x497045] = _0xba0406[_0x497045 - 1];
                  _0xba0406[_0x497045] += _0x5b1322.distanceTo(_0x3eeef9);
                }
                _0x120786.setAttribute("lineDistance", new _0x17b758(_0xba0406, 1));
              }
            } else {
              _0x120786.isGeometry;
            }
            return this;
          }
          raycast(_0x309164, _0x499c7a) {
            const _0x496f48 = this.geometry;
            var _0x580dc4 = this.matrixWorld;
            var _0x2dce15 = _0x309164.params.Line.threshold;
            var _0x3a8874 = _0x496f48.drawRange;
            if (_0x496f48.boundingSphere === null) {
              _0x496f48.computeBoundingSphere();
            }
            _0x1b4db5.copy(_0x496f48.boundingSphere);
            _0x1b4db5.applyMatrix4(_0x580dc4);
            _0x1b4db5.radius += _0x2dce15;
            if (_0x309164.ray.intersectsSphere(_0x1b4db5) !== false) {
              _0xa63b60.copy(_0x580dc4).invert();
              _0x149ae5.copy(_0x309164.ray).applyMatrix4(_0xa63b60);
              var _0x4904d8 = 2;
              var _0x38822c = (_0x2dce15 = _0x2dce15 / ((this.scale.x + this.scale.y + this.scale.z) / 3)) * _0x2dce15;
              _0x4904d8 = "ehmk";
              const _0x1b1a9d = new _0x1d20ef();
              const _0x5927c5 = new _0x1d20ef();
              const _0x2d78d1 = new _0x1d20ef();
              const _0xa7bceb = new _0x1d20ef();
              var _0x2592d2;
              var _0x2e124b = this.isLineSegments ? 2 : 1;
              _0x2592d2 = 9;
              if (_0x496f48.isBufferGeometry) {
                var _0x2f81cd = 14;
                const _0x4f0be4 = _0x496f48.index;
                _0x2f81cd = 4;
                var _0x435a6d;
                var _0x1e623d = _0x496f48.attributes.position;
                if (_0x4f0be4 !== null) {
                  for (let _0x6e04c1 = Math.max(0, _0x3a8874.start), _0x2ed90b = Math.min(_0x4f0be4.count, _0x3a8874.start + _0x3a8874.count) - 1; _0x6e04c1 < _0x2ed90b; _0x6e04c1 += _0x2e124b) {
                    var _0x36107e = _0x4f0be4.getX(_0x6e04c1);
                    var _0x36bfd6 = _0x4f0be4.getX(_0x6e04c1 + 1);
                    _0x1b1a9d.fromBufferAttribute(_0x1e623d, _0x36107e);
                    _0x5927c5.fromBufferAttribute(_0x1e623d, _0x36bfd6);
                    if (!(_0x38822c < _0x149ae5.distanceSqToSegment(_0x1b1a9d, _0x5927c5, _0xa7bceb, _0x2d78d1))) {
                      _0xa7bceb.applyMatrix4(this.matrixWorld);
                      if (!((_0x36bfd6 = _0x309164.ray.origin.distanceTo(_0xa7bceb)) < _0x309164.near || _0x36bfd6 > _0x309164.far)) {
                        _0x499c7a.push({
                          distance: _0x36bfd6,
                          point: _0x2d78d1.clone().applyMatrix4(this.matrixWorld),
                          index: _0x6e04c1,
                          face: null,
                          faceIndex: null,
                          object: this
                        });
                      }
                    }
                  }
                } else {
                  for (let _0xde1955 = Math.max(0, _0x3a8874.start), _0x181738 = Math.min(_0x1e623d.count, _0x3a8874.start + _0x3a8874.count) - 1; _0xde1955 < _0x181738; _0xde1955 += _0x2e124b) {
                    _0x1b1a9d.fromBufferAttribute(_0x1e623d, _0xde1955);
                    _0x5927c5.fromBufferAttribute(_0x1e623d, _0xde1955 + 1);
                    if (!(_0x38822c < _0x149ae5.distanceSqToSegment(_0x1b1a9d, _0x5927c5, _0xa7bceb, _0x2d78d1))) {
                      _0xa7bceb.applyMatrix4(this.matrixWorld);
                      if (!((_0x435a6d = _0x309164.ray.origin.distanceTo(_0xa7bceb)) < _0x309164.near || _0x435a6d > _0x309164.far)) {
                        _0x499c7a.push({
                          distance: _0x435a6d,
                          point: _0x2d78d1.clone().applyMatrix4(this.matrixWorld),
                          index: _0xde1955,
                          face: null,
                          faceIndex: null,
                          object: this
                        });
                      }
                    }
                  }
                }
              } else {
                _0x496f48.isGeometry;
              }
            }
          }
          updateMorphTargets() {
            var _0x4d92d8 = this.geometry;
            if (_0x4d92d8.isBufferGeometry) {
              var _0x9bd45d = _0x4d92d8.morphAttributes;
              var _0xfdd455 = Object.keys(_0x9bd45d);
              if (_0xfdd455.length > 0) {
                var _0x1ae453 = _0x9bd45d[_0xfdd455[0]];
                if (_0x1ae453 !== undefined) {
                  this.morphTargetInfluences = [];
                  this.morphTargetDictionary = {};
                  for (let _0x56dab3 = 0, _0x2a9403 = _0x1ae453.length; _0x56dab3 < _0x2a9403; _0x56dab3++) {
                    var _0x34af74 = 7;
                    var _0x409501 = _0x1ae453[_0x56dab3].name || String(_0x56dab3);
                    _0x34af74 = 7;
                    this.morphTargetInfluences.push(0);
                    this.morphTargetDictionary[_0x409501] = _0x56dab3;
                  }
                }
              }
            } else if ((_0x4d92d8 = _0x4d92d8.morphTargets) !== undefined) {
              _0x4d92d8.length;
            }
          }
        }
        _0x266c5e.prototype.isLine = true;
        const _0x2555d1 = new _0x1d20ef();
        const _0x594565 = new _0x1d20ef();
        class _0x2fd8c1 extends _0x266c5e {
          constructor(_0x44a1d8, _0x29c402) {
            super(_0x44a1d8, _0x29c402);
            this.type = "LineSegments";
          }
          computeLineDistances() {
            const _0x2e7556 = this.geometry;
            if (_0x2e7556.isBufferGeometry) {
              if (_0x2e7556.index === null) {
                var _0x370e2a;
                var _0x302afe = _0x2e7556.attributes.position;
                _0x370e2a = 9;
                var _0x5a8a45;
                const _0x213524 = [];
                _0x5a8a45 = "hled";
                for (let _0x1f992a = 0, _0x11d766 = _0x302afe.count; _0x1f992a < _0x11d766; _0x1f992a += 2) {
                  _0x2555d1.fromBufferAttribute(_0x302afe, _0x1f992a);
                  _0x594565.fromBufferAttribute(_0x302afe, _0x1f992a + 1);
                  _0x213524[_0x1f992a] = _0x1f992a === 0 ? 0 : _0x213524[_0x1f992a - 1];
                  _0x213524[_0x1f992a + 1] = _0x213524[_0x1f992a] + _0x2555d1.distanceTo(_0x594565);
                }
                _0x2e7556.setAttribute("lineDistance", new _0x17b758(_0x213524, 1));
              }
            } else {
              _0x2e7556.isGeometry;
            }
            return this;
          }
        }
        _0x2fd8c1.prototype.isLineSegments = true;
        class _0x3a7022 extends _0x266c5e {
          constructor(_0x8a4fe3, _0x5e7122) {
            super(_0x8a4fe3, _0x5e7122);
            this.type = "LineLoop";
          }
        }
        _0x3a7022.prototype.isLineLoop = true;
        class _0x541061 extends _0x2098dd {
          constructor(_0x44dcb2) {
            super();
            this.type = "PointsMaterial";
            this.color = new _0x1282c2(16777215);
            this.map = null;
            this.alphaMap = null;
            this.size = 1;
            this.sizeAttenuation = true;
            this.setValues(_0x44dcb2);
          }
          copy(_0x9f2bd9) {
            super.copy(_0x9f2bd9);
            this.color.copy(_0x9f2bd9.color);
            this.map = _0x9f2bd9.map;
            this.alphaMap = _0x9f2bd9.alphaMap;
            this.size = _0x9f2bd9.size;
            this.sizeAttenuation = _0x9f2bd9.sizeAttenuation;
            return this;
          }
        }
        _0x541061.prototype.isPointsMaterial = true;
        const _0x5ae90d = new _0x33b2c9();
        const _0x5c7d26 = new _0x123ff1();
        const _0x11bc11 = new _0x26f734();
        const _0x1f36f6 = new _0x1d20ef();
        class _0x5ead64 extends _0x3b73b1 {
          constructor(_0x519d7f = new _0x3f374d(), _0x776b34 = new _0x541061()) {
            super();
            this.type = "Points";
            this.geometry = _0x519d7f;
            this.material = _0x776b34;
            this.updateMorphTargets();
          }
          copy(_0x40d631) {
            super.copy(_0x40d631);
            this.material = _0x40d631.material;
            this.geometry = _0x40d631.geometry;
            return this;
          }
          raycast(_0x1fffa6, _0x2b9154) {
            const _0x2f4e29 = this.geometry;
            var _0x41901f = this.matrixWorld;
            var _0x591d90 = _0x1fffa6.params.Points.threshold;
            var _0x10bf5e = _0x2f4e29.drawRange;
            if (_0x2f4e29.boundingSphere === null) {
              _0x2f4e29.computeBoundingSphere();
            }
            _0x11bc11.copy(_0x2f4e29.boundingSphere);
            _0x11bc11.applyMatrix4(_0x41901f);
            _0x11bc11.radius += _0x591d90;
            if (_0x1fffa6.ray.intersectsSphere(_0x11bc11) !== false) {
              _0x5ae90d.copy(_0x41901f).invert();
              _0x5c7d26.copy(_0x1fffa6.ray).applyMatrix4(_0x5ae90d);
              var _0xf8912c = 6;
              var _0x5480f0 = (_0x591d90 = _0x591d90 / ((this.scale.x + this.scale.y + this.scale.z) / 3)) * _0x591d90;
              _0xf8912c = "cbbd";
              if (_0x2f4e29.isBufferGeometry) {
                const _0x4e42b2 = _0x2f4e29.index;
                var _0x548014 = _0x2f4e29.attributes.position;
                if (_0x4e42b2 !== null) {
                  for (let _0x239d93 = Math.max(0, _0x10bf5e.start), _0x1748f1 = Math.min(_0x4e42b2.count, _0x10bf5e.start + _0x10bf5e.count); _0x239d93 < _0x1748f1; _0x239d93++) {
                    var _0x39c0d9 = _0x4e42b2.getX(_0x239d93);
                    _0x1f36f6.fromBufferAttribute(_0x548014, _0x39c0d9);
                    _0x1a7443(_0x1f36f6, _0x39c0d9, _0x5480f0, _0x41901f, _0x1fffa6, _0x2b9154, this);
                  }
                } else {
                  for (let _0x33c445 = Math.max(0, _0x10bf5e.start), _0x29ffe3 = Math.min(_0x548014.count, _0x10bf5e.start + _0x10bf5e.count); _0x33c445 < _0x29ffe3; _0x33c445++) {
                    _0x1f36f6.fromBufferAttribute(_0x548014, _0x33c445);
                    _0x1a7443(_0x1f36f6, _0x33c445, _0x5480f0, _0x41901f, _0x1fffa6, _0x2b9154, this);
                  }
                }
              }
            }
          }
          updateMorphTargets() {
            var _0x468196 = this.geometry;
            if (_0x468196.isBufferGeometry) {
              var _0x3257b4 = _0x468196.morphAttributes;
              var _0x4434fc = Object.keys(_0x3257b4);
              if (_0x4434fc.length > 0) {
                var _0x2095cf = 6;
                var _0x4c1321 = _0x3257b4[_0x4434fc[0]];
                _0x2095cf = 5;
                if (_0x4c1321 !== undefined) {
                  this.morphTargetInfluences = [];
                  this.morphTargetDictionary = {};
                  for (let _0x422a33 = 0, _0x1f940f = _0x4c1321.length; _0x422a33 < _0x1f940f; _0x422a33++) {
                    var _0x12e59d = _0x4c1321[_0x422a33].name || String(_0x422a33);
                    this.morphTargetInfluences.push(0);
                    this.morphTargetDictionary[_0x12e59d] = _0x422a33;
                  }
                }
              }
            } else if ((_0x468196 = _0x468196.morphTargets) !== undefined) {
              _0x468196.length;
            }
          }
        }
        function _0x1a7443(_0x5ae0de, _0x1e370c, _0x511f31, _0x163e20, _0x3e59ff, _0x13c2cd, _0x5147f2) {
          var _0x131190 = 14;
          var _0x59a402 = _0x5c7d26.distanceSqToPoint(_0x5ae0de);
          _0x131190 = 12;
          if (_0x59a402 < _0x511f31) {
            const _0xda1742 = new _0x1d20ef();
            _0x5c7d26.closestPointToPoint(_0x5ae0de, _0xda1742);
            _0xda1742.applyMatrix4(_0x163e20);
            _0x163e20 = _0x3e59ff.ray.origin.distanceTo(_0xda1742);
            if (!(_0x163e20 < _0x3e59ff.near || _0x163e20 > _0x3e59ff.far)) {
              _0x13c2cd.push({
                distance: _0x163e20,
                distanceToRay: Math.sqrt(_0x59a402),
                point: _0xda1742,
                index: _0x1e370c,
                face: null,
                object: _0x5147f2
              });
            }
          }
        }
        _0x5ead64.prototype.isPoints = true;
        class _0x4323f1 extends _0x3d39cb {
          constructor(_0x4c353a, _0x531427, _0x16f474, _0x236d08, _0xae33f2, _0x23a10c, _0x1cc139, _0x4cb416, _0xdd7cf) {
            super(_0x4c353a, _0x531427, _0x16f474, _0x236d08, _0xae33f2, _0x23a10c, _0x1cc139, _0x4cb416, _0xdd7cf);
            this.format = _0x1cc139 !== undefined ? _0x1cc139 : _0x1e0c08;
            this.minFilter = _0x23a10c !== undefined ? _0x23a10c : _0x202e90;
            this.magFilter = _0xae33f2 !== undefined ? _0xae33f2 : _0x202e90;
            this.generateMipmaps = false;
            var _0xe2029c;
            const _0x1c4a77 = this;
            _0xe2029c = "glgn";
            if ("requestVideoFrameCallback" in _0x4c353a) {
              _0x4c353a.requestVideoFrameCallback(function _0x479ca2() {
                _0x1c4a77.needsUpdate = true;
                _0x4c353a.requestVideoFrameCallback(_0x479ca2);
              });
            }
          }
          clone() {
            return new this.constructor(this.image).copy(this);
          }
          update() {
            var _0x25c1bf = this.image;
            if ("requestVideoFrameCallback" in _0x25c1bf == 0 && _0x25c1bf.readyState >= _0x25c1bf.HAVE_CURRENT_DATA) {
              this.needsUpdate = true;
            }
          }
        }
        _0x4323f1.prototype.isVideoTexture = true;
        class _0x74996 extends _0x3d39cb {
          constructor(_0x1283cd, _0x14dfaf, _0x241d74) {
            super({
              width: _0x1283cd,
              height: _0x14dfaf
            });
            this.format = _0x241d74;
            this.magFilter = _0x297826;
            this.minFilter = _0x297826;
            this.generateMipmaps = false;
            this.needsUpdate = true;
          }
        }
        _0x74996.prototype.isFramebufferTexture = true;
        class _0x4d21cf extends _0x3d39cb {
          constructor(_0x1b438e, _0x324d07, _0x5512d8, _0x3f8cf2, _0xed3c10, _0x355d8c, _0x2a8b2a, _0x2567ac, _0xd97f58, _0x35dac7, _0x3ed1db, _0x49087e) {
            super(null, _0x355d8c, _0x2a8b2a, _0x2567ac, _0xd97f58, _0x35dac7, _0x3f8cf2, _0xed3c10, _0x3ed1db, _0x49087e);
            this.image = {
              width: _0x324d07,
              height: _0x5512d8
            };
            this.mipmaps = _0x1b438e;
            this.flipY = false;
            this.generateMipmaps = false;
          }
        }
        _0x4d21cf.prototype.isCompressedTexture = true;
        class _0x159cf5 extends _0x3d39cb {
          constructor(_0x518536, _0x3ad048, _0x4b3725, _0x468f5d, _0x280445, _0x2f6f2c, _0x430b17, _0x494042, _0x39f83c) {
            super(_0x518536, _0x3ad048, _0x4b3725, _0x468f5d, _0x280445, _0x2f6f2c, _0x430b17, _0x494042, _0x39f83c);
            this.needsUpdate = true;
          }
        }
        _0x159cf5.prototype.isCanvasTexture = true;
        class _0x336546 extends _0x3f374d {
          constructor(_0x4fa48a = 1, _0x358778 = 8, _0x27c0c6 = 0, _0x131cbd = Math.PI * 2) {
            super();
            this.type = "CircleGeometry";
            this.parameters = {
              radius: _0x4fa48a,
              segments: _0x358778,
              thetaStart: _0x27c0c6,
              thetaLength: _0x131cbd
            };
            _0x358778 = Math.max(3, _0x358778);
            const _0x1925bb = [];
            const _0x4f7005 = [];
            const _0x260c36 = [];
            const _0xb56cd1 = [];
            const _0x1ac9cf = new _0x1d20ef();
            const _0x2c8991 = new _0x25f874();
            _0x4f7005.push(0, 0, 0);
            _0x260c36.push(0, 0, 1);
            _0xb56cd1.push(0.5, 0.5);
            for (let _0x174063 = 0, _0x4ebde1 = 3; _0x174063 <= _0x358778; _0x174063++, _0x4ebde1 += 3) {
              var _0x576dcb = 10;
              var _0x1f40ed = _0x27c0c6 + _0x174063 / _0x358778 * _0x131cbd;
              _0x576dcb = "fokb";
              _0x1ac9cf.x = _0x4fa48a * Math.cos(_0x1f40ed);
              _0x1ac9cf.y = _0x4fa48a * Math.sin(_0x1f40ed);
              _0x4f7005.push(_0x1ac9cf.x, _0x1ac9cf.y, _0x1ac9cf.z);
              _0x260c36.push(0, 0, 1);
              _0x2c8991.x = (_0x4f7005[_0x4ebde1] / _0x4fa48a + 1) / 2;
              _0x2c8991.y = (_0x4f7005[_0x4ebde1 + 1] / _0x4fa48a + 1) / 2;
              _0xb56cd1.push(_0x2c8991.x, _0x2c8991.y);
            }
            for (let _0x58a9b3 = 1; _0x58a9b3 <= _0x358778; _0x58a9b3++) {
              _0x1925bb.push(_0x58a9b3, _0x58a9b3 + 1, 0);
            }
            this.setIndex(_0x1925bb);
            this.setAttribute("position", new _0x17b758(_0x4f7005, 3));
            this.setAttribute("normal", new _0x17b758(_0x260c36, 3));
            this.setAttribute("uv", new _0x17b758(_0xb56cd1, 2));
          }
          static fromJSON(_0x3c3896) {
            return new _0x336546(_0x3c3896.radius, _0x3c3896.segments, _0x3c3896.thetaStart, _0x3c3896.thetaLength);
          }
        }
        class _0x292b7e extends _0x3f374d {
          constructor(_0x24fd54 = 1, _0xeaae69 = 1, _0x6059c6 = 1, _0xd40b90 = 8, _0x17886f = 1, _0xdfcbb2 = false, _0x2a2a5d = 0, _0x51bce9 = Math.PI * 2) {
            super();
            this.type = "CylinderGeometry";
            this.parameters = {
              radiusTop: _0x24fd54,
              radiusBottom: _0xeaae69,
              height: _0x6059c6,
              radialSegments: _0xd40b90,
              heightSegments: _0x17886f,
              openEnded: _0xdfcbb2,
              thetaStart: _0x2a2a5d,
              thetaLength: _0x51bce9
            };
            const _0x76ec19 = this;
            _0xd40b90 = Math.floor(_0xd40b90);
            _0x17886f = Math.floor(_0x17886f);
            const _0xbff52c = [];
            const _0x2c2f52 = [];
            const _0x3f9fc8 = [];
            const _0x54d985 = [];
            let _0x436204 = 0;
            const _0x3df50b = [];
            const _0x5660e5 = _0x6059c6 / 2;
            let _0x234b78 = 0;
            function _0x4a07a7(_0x515487) {
              var _0x491ce9;
              var _0x2ab1e1 = _0x436204;
              _0x491ce9 = "nqjo";
              const _0x6a8d2c = new _0x25f874();
              const _0x412f52 = new _0x1d20ef();
              var _0x42f511;
              let _0x336650 = 0;
              _0x42f511 = 0;
              var _0x2cbcd5 = _0x515487 === true ? _0x24fd54 : _0xeaae69;
              var _0x383a91 = _0x515487 === true ? 1 : -1;
              for (let _0x4c053a = 1; _0x4c053a <= _0xd40b90; _0x4c053a++) {
                _0x2c2f52.push(0, _0x5660e5 * _0x383a91, 0);
                _0x3f9fc8.push(0, _0x383a91, 0);
                _0x54d985.push(0.5, 0.5);
                _0x436204++;
              }
              var _0x4eb5df;
              var _0x5b2558 = _0x436204;
              _0x4eb5df = 9;
              for (let _0x4894f8 = 0; _0x4894f8 <= _0xd40b90; _0x4894f8++) {
                var _0x1f9ea9 = _0x4894f8 / _0xd40b90 * _0x51bce9 + _0x2a2a5d;
                var _0x5a2d73 = Math.cos(_0x1f9ea9);
                _0x1f9ea9 = Math.sin(_0x1f9ea9);
                _0x412f52.x = _0x2cbcd5 * _0x1f9ea9;
                _0x412f52.y = _0x5660e5 * _0x383a91;
                _0x412f52.z = _0x2cbcd5 * _0x5a2d73;
                _0x2c2f52.push(_0x412f52.x, _0x412f52.y, _0x412f52.z);
                _0x3f9fc8.push(0, _0x383a91, 0);
                _0x6a8d2c.x = _0x5a2d73 * 0.5 + 0.5;
                _0x6a8d2c.y = _0x1f9ea9 * 0.5 * _0x383a91 + 0.5;
                _0x54d985.push(_0x6a8d2c.x, _0x6a8d2c.y);
                _0x436204++;
              }
              for (let _0x5c0778 = 0; _0x5c0778 < _0xd40b90; _0x5c0778++) {
                var _0x31fade = _0x2ab1e1 + _0x5c0778;
                var _0x3dd094 = _0x5b2558 + _0x5c0778;
                if (_0x515487 === true) {
                  _0xbff52c.push(_0x3dd094, _0x3dd094 + 1, _0x31fade);
                } else {
                  _0xbff52c.push(_0x3dd094 + 1, _0x3dd094, _0x31fade);
                }
                _0x336650 += 3;
              }
              _0x76ec19.addGroup(_0x234b78, _0x336650, _0x515487 === true ? 1 : 2);
              _0x234b78 += _0x336650;
            }
            (function () {
              const _0x3d655c = new _0x1d20ef();
              const _0x2281d3 = new _0x1d20ef();
              var _0x3addc9;
              let _0x4bde0c = 0;
              _0x3addc9 = 5;
              var _0x2e8b58 = (_0xeaae69 - _0x24fd54) / _0x6059c6;
              for (let _0xae0ad1 = 0; _0xae0ad1 <= _0x17886f; _0xae0ad1++) {
                const _0x412245 = [];
                var _0x24aa97 = _0xae0ad1 / _0x17886f;
                var _0x371828 = _0x24aa97 * (_0xeaae69 - _0x24fd54) + _0x24fd54;
                for (let _0xc462c3 = 0; _0xc462c3 <= _0xd40b90; _0xc462c3++) {
                  var _0x4f8a95 = _0xc462c3 / _0xd40b90;
                  var _0x41d7ed = _0x4f8a95 * _0x51bce9 + _0x2a2a5d;
                  var _0xb387ba = Math.sin(_0x41d7ed);
                  _0x41d7ed = Math.cos(_0x41d7ed);
                  _0x2281d3.x = _0x371828 * _0xb387ba;
                  _0x2281d3.y = -_0x24aa97 * _0x6059c6 + _0x5660e5;
                  _0x2281d3.z = _0x371828 * _0x41d7ed;
                  _0x2c2f52.push(_0x2281d3.x, _0x2281d3.y, _0x2281d3.z);
                  _0x3d655c.set(_0xb387ba, _0x2e8b58, _0x41d7ed).normalize();
                  _0x3f9fc8.push(_0x3d655c.x, _0x3d655c.y, _0x3d655c.z);
                  _0x54d985.push(_0x4f8a95, 1 - _0x24aa97);
                  _0x412245.push(_0x436204++);
                }
                _0x3df50b.push(_0x412245);
              }
              for (let _0x3d7bb0 = 0; _0x3d7bb0 < _0xd40b90; _0x3d7bb0++) {
                for (let _0x2fa2bc = 0; _0x2fa2bc < _0x17886f; _0x2fa2bc++) {
                  var _0x524f18 = _0x3df50b[_0x2fa2bc][_0x3d7bb0];
                  var _0x397dff = _0x3df50b[_0x2fa2bc + 1][_0x3d7bb0];
                  var _0x21ccc8 = _0x3df50b[_0x2fa2bc + 1][_0x3d7bb0 + 1];
                  var _0x77ec0a = _0x3df50b[_0x2fa2bc][_0x3d7bb0 + 1];
                  _0xbff52c.push(_0x524f18, _0x397dff, _0x77ec0a);
                  _0xbff52c.push(_0x397dff, _0x21ccc8, _0x77ec0a);
                  _0x4bde0c += 6;
                }
              }
              _0x76ec19.addGroup(_0x234b78, _0x4bde0c, 0);
              _0x234b78 += _0x4bde0c;
            })();
            if (_0xdfcbb2 === false) {
              if (_0x24fd54 > 0) {
                _0x4a07a7(true);
              }
              if (_0xeaae69 > 0) {
                _0x4a07a7(false);
              }
            }
            this.setIndex(_0xbff52c);
            this.setAttribute("position", new _0x17b758(_0x2c2f52, 3));
            this.setAttribute("normal", new _0x17b758(_0x3f9fc8, 3));
            this.setAttribute("uv", new _0x17b758(_0x54d985, 2));
          }
          static fromJSON(_0x424242) {
            return new _0x292b7e(_0x424242.radiusTop, _0x424242.radiusBottom, _0x424242.height, _0x424242.radialSegments, _0x424242.heightSegments, _0x424242.openEnded, _0x424242.thetaStart, _0x424242.thetaLength);
          }
        }
        class _0x458021 extends _0x292b7e {
          constructor(_0x11bf30 = 1, _0x571191 = 1, _0x1f19ec = 8, _0x31ad5c = 1, _0x4fd067 = false, _0x258178 = 0, _0x5ee408 = Math.PI * 2) {
            super(0, _0x11bf30, _0x571191, _0x1f19ec, _0x31ad5c, _0x4fd067, _0x258178, _0x5ee408);
            this.type = "ConeGeometry";
            this.parameters = {
              radius: _0x11bf30,
              height: _0x571191,
              radialSegments: _0x1f19ec,
              heightSegments: _0x31ad5c,
              openEnded: _0x4fd067,
              thetaStart: _0x258178,
              thetaLength: _0x5ee408
            };
          }
          static fromJSON(_0x438860) {
            return new _0x458021(_0x438860.radius, _0x438860.height, _0x438860.radialSegments, _0x438860.heightSegments, _0x438860.openEnded, _0x438860.thetaStart, _0x438860.thetaLength);
          }
        }
        class _0xc297b7 extends _0x3f374d {
          constructor(_0x3e7b9c = [], _0x286d13 = [], _0x587f4c = 1, _0x491fcc = 0) {
            super();
            this.type = "PolyhedronGeometry";
            this.parameters = {
              vertices: _0x3e7b9c,
              indices: _0x286d13,
              radius: _0x587f4c,
              detail: _0x491fcc
            };
            const _0x965fc4 = [];
            const _0x425a92 = [];
            function _0x4ff757(_0x4ab1ba) {
              _0x965fc4.push(_0x4ab1ba.x, _0x4ab1ba.y, _0x4ab1ba.z);
            }
            function _0x410812(_0x2f4fd6, _0xd8812b) {
              _0x2f4fd6 *= 3;
              _0xd8812b.x = _0x3e7b9c[0 + _0x2f4fd6];
              _0xd8812b.y = _0x3e7b9c[1 + _0x2f4fd6];
              _0xd8812b.z = _0x3e7b9c[2 + _0x2f4fd6];
            }
            function _0x37f67d(_0x31c61e, _0x27a46a, _0x3e1dcc, _0x4561a0) {
              if (_0x4561a0 < 0 && _0x31c61e.x === 1) {
                _0x425a92[_0x27a46a] = _0x31c61e.x - 1;
              }
              if (_0x3e1dcc.x === 0 && _0x3e1dcc.z === 0) {
                _0x425a92[_0x27a46a] = _0x4561a0 / 2 / Math.PI + 0.5;
              }
            }
            function _0x2cddab(_0x1b3e0e) {
              return Math.atan2(_0x1b3e0e.z, -_0x1b3e0e.x);
            }
            (function (_0x53bb54) {
              var _0x296f96 = new _0x1d20ef();
              var _0x1e8996 = new _0x1d20ef();
              var _0x458d0a = new _0x1d20ef();
              for (let _0x31a977 = 0; _0x31a977 < _0x286d13.length; _0x31a977 += 3) {
                _0x410812(_0x286d13[_0x31a977 + 0], _0x296f96);
                _0x410812(_0x286d13[_0x31a977 + 1], _0x1e8996);
                _0x410812(_0x286d13[_0x31a977 + 2], _0x458d0a);
                (function (_0x55b03d, _0x14d61c, _0x1732f9, _0x371c0e) {
                  const _0x5c9d51 = _0x371c0e + 1;
                  const _0x36e0a1 = [];
                  for (let _0x4c29d4 = 0; _0x4c29d4 <= _0x5c9d51; _0x4c29d4++) {
                    _0x36e0a1[_0x4c29d4] = [];
                    const _0x5b14fd = _0x55b03d.clone().lerp(_0x1732f9, _0x4c29d4 / _0x5c9d51);
                    var _0xa138a1 = _0x14d61c.clone().lerp(_0x1732f9, _0x4c29d4 / _0x5c9d51);
                    var _0x4f0ce0 = _0x5c9d51 - _0x4c29d4;
                    for (let _0x11a37d = 0; _0x11a37d <= _0x4f0ce0; _0x11a37d++) {
                      _0x36e0a1[_0x4c29d4][_0x11a37d] = _0x11a37d === 0 && _0x4c29d4 === _0x5c9d51 ? _0x5b14fd : _0x5b14fd.clone().lerp(_0xa138a1, _0x11a37d / _0x4f0ce0);
                    }
                  }
                  for (let _0x26ee97 = 0; _0x26ee97 < _0x5c9d51; _0x26ee97++) {
                    for (let _0x1534d3 = 0; _0x1534d3 < (_0x5c9d51 - _0x26ee97) * 2 - 1; _0x1534d3++) {
                      var _0x4f7c16 = Math.floor(_0x1534d3 / 2);
                      if (_0x1534d3 % 2 == 0) {
                        _0x4ff757(_0x36e0a1[_0x26ee97][_0x4f7c16 + 1]);
                        _0x4ff757(_0x36e0a1[_0x26ee97 + 1][_0x4f7c16]);
                        _0x4ff757(_0x36e0a1[_0x26ee97][_0x4f7c16]);
                      } else {
                        _0x4ff757(_0x36e0a1[_0x26ee97][_0x4f7c16 + 1]);
                        _0x4ff757(_0x36e0a1[_0x26ee97 + 1][_0x4f7c16 + 1]);
                        _0x4ff757(_0x36e0a1[_0x26ee97 + 1][_0x4f7c16]);
                      }
                    }
                  }
                })(_0x296f96, _0x1e8996, _0x458d0a, _0x53bb54);
              }
            })(_0x491fcc);
            (function (_0x3eba71) {
              const _0x1f7302 = new _0x1d20ef();
              for (let _0xf2eb24 = 0; _0xf2eb24 < _0x965fc4.length; _0xf2eb24 += 3) {
                _0x1f7302.x = _0x965fc4[_0xf2eb24 + 0];
                _0x1f7302.y = _0x965fc4[_0xf2eb24 + 1];
                _0x1f7302.z = _0x965fc4[_0xf2eb24 + 2];
                _0x1f7302.normalize().multiplyScalar(_0x3eba71);
                _0x965fc4[_0xf2eb24 + 0] = _0x1f7302.x;
                _0x965fc4[_0xf2eb24 + 1] = _0x1f7302.y;
                _0x965fc4[_0xf2eb24 + 2] = _0x1f7302.z;
              }
            })(_0x587f4c);
            (function () {
              const _0x19c4b7 = new _0x1d20ef();
              for (let _0x85805c = 0; _0x85805c < _0x965fc4.length; _0x85805c += 3) {
                _0x19c4b7.x = _0x965fc4[_0x85805c + 0];
                _0x19c4b7.y = _0x965fc4[_0x85805c + 1];
                _0x19c4b7.z = _0x965fc4[_0x85805c + 2];
                var _0x150151 = _0x2cddab(_0x19c4b7) / 2 / Math.PI + 0.5;
                var _0x246f15 = function (_0x5c7bb2) {
                  return Math.atan2(-_0x5c7bb2.y, Math.sqrt(_0x5c7bb2.x * _0x5c7bb2.x + _0x5c7bb2.z * _0x5c7bb2.z));
                }(_0x19c4b7) / Math.PI + 0.5;
                _0x425a92.push(_0x150151, 1 - _0x246f15);
              }
              (function () {
                const _0x41e72b = new _0x1d20ef();
                const _0xd82245 = new _0x1d20ef();
                const _0x26c427 = new _0x1d20ef();
                const _0x448720 = new _0x1d20ef();
                const _0x310ede = new _0x25f874();
                const _0x212f92 = new _0x25f874();
                const _0x505519 = new _0x25f874();
                for (let _0x113333 = 0, _0x55e08f = 0; _0x113333 < _0x965fc4.length; _0x113333 += 9, _0x55e08f += 6) {
                  _0x41e72b.set(_0x965fc4[_0x113333 + 0], _0x965fc4[_0x113333 + 1], _0x965fc4[_0x113333 + 2]);
                  _0xd82245.set(_0x965fc4[_0x113333 + 3], _0x965fc4[_0x113333 + 4], _0x965fc4[_0x113333 + 5]);
                  _0x26c427.set(_0x965fc4[_0x113333 + 6], _0x965fc4[_0x113333 + 7], _0x965fc4[_0x113333 + 8]);
                  _0x310ede.set(_0x425a92[_0x55e08f + 0], _0x425a92[_0x55e08f + 1]);
                  _0x212f92.set(_0x425a92[_0x55e08f + 2], _0x425a92[_0x55e08f + 3]);
                  _0x505519.set(_0x425a92[_0x55e08f + 4], _0x425a92[_0x55e08f + 5]);
                  _0x448720.copy(_0x41e72b).add(_0xd82245).add(_0x26c427).divideScalar(3);
                  var _0x24d344 = _0x2cddab(_0x448720);
                  _0x37f67d(_0x310ede, _0x55e08f + 0, _0x41e72b, _0x24d344);
                  _0x37f67d(_0x212f92, _0x55e08f + 2, _0xd82245, _0x24d344);
                  _0x37f67d(_0x505519, _0x55e08f + 4, _0x26c427, _0x24d344);
                }
              })();
              (function () {
                for (let _0xaf0482 = 0; _0xaf0482 < _0x425a92.length; _0xaf0482 += 6) {
                  var _0x3af828 = _0x425a92[_0xaf0482 + 0];
                  var _0x4d82ec = _0x425a92[_0xaf0482 + 2];
                  var _0x38a46d = _0x425a92[_0xaf0482 + 4];
                  var _0x10845c = Math.max(_0x3af828, _0x4d82ec, _0x38a46d);
                  var _0xeac52f = Math.min(_0x3af828, _0x4d82ec, _0x38a46d);
                  if (_0x10845c > 0.9 && _0xeac52f < 0.1) {
                    if (_0x3af828 < 0.2) {
                      _0x425a92[_0xaf0482 + 0] += 1;
                    }
                    if (_0x4d82ec < 0.2) {
                      _0x425a92[_0xaf0482 + 2] += 1;
                    }
                    if (_0x38a46d < 0.2) {
                      _0x425a92[_0xaf0482 + 4] += 1;
                    }
                  }
                }
              })();
            })();
            this.setAttribute("position", new _0x17b758(_0x965fc4, 3));
            this.setAttribute("normal", new _0x17b758(_0x965fc4.slice(), 3));
            this.setAttribute("uv", new _0x17b758(_0x425a92, 2));
            if (_0x491fcc === 0) {
              this.computeVertexNormals();
            } else {
              this.normalizeNormals();
            }
          }
          static fromJSON(_0x3051d4) {
            return new _0xc297b7(_0x3051d4.vertices, _0x3051d4.indices, _0x3051d4.radius, _0x3051d4.details);
          }
        }
        class _0x6a340 extends _0xc297b7 {
          constructor(_0x2903d6 = 1, _0x44fd47 = 0) {
            var _0x32d03b = (1 + Math.sqrt(5)) / 2;
            var _0x8bbfef = 1 / _0x32d03b;
            super([-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -_0x8bbfef, -_0x32d03b, 0, -_0x8bbfef, _0x32d03b, 0, _0x8bbfef, -_0x32d03b, 0, _0x8bbfef, _0x32d03b, -_0x8bbfef, -_0x32d03b, 0, -_0x8bbfef, _0x32d03b, 0, _0x8bbfef, -_0x32d03b, 0, _0x8bbfef, _0x32d03b, 0, -_0x32d03b, 0, -_0x8bbfef, _0x32d03b, 0, -_0x8bbfef, -_0x32d03b, 0, _0x8bbfef, _0x32d03b, 0, _0x8bbfef], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], _0x2903d6, _0x44fd47);
            this.type = "DodecahedronGeometry";
            this.parameters = {
              radius: _0x2903d6,
              detail: _0x44fd47
            };
          }
          static fromJSON(_0x43534f) {
            return new _0x6a340(_0x43534f.radius, _0x43534f.detail);
          }
        }
        const _0x3213fc = new _0x1d20ef();
        const _0xb14c61 = new _0x1d20ef();
        const _0x1375d2 = new _0x1d20ef();
        const _0x4c43b5 = new _0x54aa93();
        class _0x26805c extends _0x3f374d {
          constructor(_0x166f49 = null, _0x188161 = 1) {
            super();
            this.type = "EdgesGeometry";
            this.parameters = {
              geometry: _0x166f49,
              thresholdAngle: _0x188161
            };
            if (_0x166f49 !== null) {
              var _0x366218 = Math.pow(10, 4);
              var _0x4ac546 = Math.cos(_0x21403c * _0x188161);
              const _0x331eb2 = _0x166f49.getIndex();
              var _0x306e10 = _0x166f49.getAttribute("position");
              var _0x4437dd = (_0x331eb2 || _0x306e10).count;
              const _0x1bc6fa = [0, 0, 0];
              var _0x3482f4;
              var _0x35a1b4;
              var _0x4117c2 = ["a", "b", "c"];
              const _0x12a561 = new Array(3);
              const _0x355d97 = {};
              const _0xc9c97d = [];
              for (let _0x4bc491 = 0; _0x4bc491 < _0x4437dd; _0x4bc491 += 3) {
                if (_0x331eb2) {
                  _0x1bc6fa[0] = _0x331eb2.getX(_0x4bc491);
                  _0x1bc6fa[1] = _0x331eb2.getX(_0x4bc491 + 1);
                  _0x1bc6fa[2] = _0x331eb2.getX(_0x4bc491 + 2);
                } else {
                  _0x1bc6fa[0] = _0x4bc491;
                  _0x1bc6fa[1] = _0x4bc491 + 1;
                  _0x1bc6fa[2] = _0x4bc491 + 2;
                }
                const {
                  a: _0x484524,
                  b: _0x278486,
                  c: _0x50104e
                } = _0x4c43b5;
                _0x484524.fromBufferAttribute(_0x306e10, _0x1bc6fa[0]);
                _0x278486.fromBufferAttribute(_0x306e10, _0x1bc6fa[1]);
                _0x50104e.fromBufferAttribute(_0x306e10, _0x1bc6fa[2]);
                _0x4c43b5.getNormal(_0x1375d2);
                _0x12a561[0] = Math.round(_0x484524.x * _0x366218) + "," + Math.round(_0x484524.y * _0x366218) + "," + Math.round(_0x484524.z * _0x366218);
                _0x12a561[1] = Math.round(_0x278486.x * _0x366218) + "," + Math.round(_0x278486.y * _0x366218) + "," + Math.round(_0x278486.z * _0x366218);
                _0x12a561[2] = Math.round(_0x50104e.x * _0x366218) + "," + Math.round(_0x50104e.y * _0x366218) + "," + Math.round(_0x50104e.z * _0x366218);
                if (_0x12a561[0] !== _0x12a561[1] && _0x12a561[1] !== _0x12a561[2] && _0x12a561[2] !== _0x12a561[0]) {
                  for (let _0x40d914 = 0; _0x40d914 < 3; _0x40d914++) {
                    var _0x3f0fce = (_0x40d914 + 1) % 3;
                    var _0x5e7b05 = _0x12a561[_0x40d914];
                    var _0x2348bc = _0x12a561[_0x3f0fce];
                    var _0x10debc = _0x4c43b5[_0x4117c2[_0x40d914]];
                    var _0x289d23 = _0x4c43b5[_0x4117c2[_0x3f0fce]];
                    var _0x77c589 = _0x5e7b05 + "_" + _0x2348bc;
                    if ((_0x5e7b05 = _0x2348bc + "_" + _0x5e7b05) in _0x355d97 && _0x355d97[_0x5e7b05]) {
                      if (_0x1375d2.dot(_0x355d97[_0x5e7b05].normal) <= _0x4ac546) {
                        _0xc9c97d.push(_0x10debc.x, _0x10debc.y, _0x10debc.z);
                        _0xc9c97d.push(_0x289d23.x, _0x289d23.y, _0x289d23.z);
                      }
                      _0x355d97[_0x5e7b05] = null;
                    } else if (!(_0x77c589 in _0x355d97)) {
                      _0x355d97[_0x77c589] = {
                        index0: _0x1bc6fa[_0x40d914],
                        index1: _0x1bc6fa[_0x3f0fce],
                        normal: _0x1375d2.clone()
                      };
                    }
                  }
                }
              }
              for (const _0x4e3c3c in _0x355d97) {
                if (_0x355d97[_0x4e3c3c]) {
                  ({
                    index0: _0x3482f4,
                    index1: _0x35a1b4
                  } = _0x355d97[_0x4e3c3c]);
                  _0x3213fc.fromBufferAttribute(_0x306e10, _0x3482f4);
                  _0xb14c61.fromBufferAttribute(_0x306e10, _0x35a1b4);
                  _0xc9c97d.push(_0x3213fc.x, _0x3213fc.y, _0x3213fc.z);
                  _0xc9c97d.push(_0xb14c61.x, _0xb14c61.y, _0xb14c61.z);
                }
              }
              this.setAttribute("position", new _0x17b758(_0xc9c97d, 3));
            }
          }
        }
        class _0x52649c {
          constructor() {
            this.type = "Curve";
            this.arcLengthDivisions = 200;
          }
          getPoint() {
            return null;
          }
          getPointAt(_0x441100, _0x111948) {
            _0x441100 = this.getUtoTmapping(_0x441100);
            return this.getPoint(_0x441100, _0x111948);
          }
          getPoints(_0x3e1b8c = 5) {
            var _0x2ee8cb;
            const _0x72833b = [];
            _0x2ee8cb = "cphn";
            for (let _0x34bdb7 = 0; _0x34bdb7 <= _0x3e1b8c; _0x34bdb7++) {
              _0x72833b.push(this.getPoint(_0x34bdb7 / _0x3e1b8c));
            }
            return _0x72833b;
          }
          getSpacedPoints(_0x51063c = 5) {
            const _0x3735d6 = [];
            for (let _0x51a020 = 0; _0x51a020 <= _0x51063c; _0x51a020++) {
              _0x3735d6.push(this.getPointAt(_0x51a020 / _0x51063c));
            }
            return _0x3735d6;
          }
          getLength() {
            var _0x49d776 = this.getLengths();
            return _0x49d776[_0x49d776.length - 1];
          }
          getLengths(_0x4d65b1 = this.arcLengthDivisions) {
            if (this.cacheArcLengths && this.cacheArcLengths.length === _0x4d65b1 + 1 && !this.needsUpdate) {
              return this.cacheArcLengths;
            }
            this.needsUpdate = false;
            var _0x7fb8f = 7;
            const _0x19caa4 = [];
            _0x7fb8f = "mnnb";
            let _0xfd36a5;
            let _0x3a4ff1 = this.getPoint(0);
            let _0x5a54e1 = 0;
            _0x19caa4.push(0);
            for (let _0x159ce3 = 1; _0x159ce3 <= _0x4d65b1; _0x159ce3++) {
              _0xfd36a5 = this.getPoint(_0x159ce3 / _0x4d65b1);
              _0x5a54e1 += _0xfd36a5.distanceTo(_0x3a4ff1);
              _0x19caa4.push(_0x5a54e1);
              _0x3a4ff1 = _0xfd36a5;
            }
            this.cacheArcLengths = _0x19caa4;
            return _0x19caa4;
          }
          updateArcLengths() {
            this.needsUpdate = true;
            this.getLengths();
          }
          getUtoTmapping(_0x4f507d, _0x3fdf2f) {
            var _0x41a296 = this.getLengths();
            let _0x4fc29a = 0;
            var _0x4dae0d = _0x41a296.length;
            let _0x3aa307;
            _0x3aa307 = _0x3fdf2f || _0x4f507d * _0x41a296[_0x4dae0d - 1];
            let _0xeee53e;
            let _0x46dff3 = 0;
            let _0x3cb596 = _0x4dae0d - 1;
            for (; _0x46dff3 <= _0x3cb596;) {
              _0x4fc29a = Math.floor(_0x46dff3 + (_0x3cb596 - _0x46dff3) / 2);
              if ((_0xeee53e = _0x41a296[_0x4fc29a] - _0x3aa307) < 0) {
                _0x46dff3 = _0x4fc29a + 1;
              } else {
                if (!(_0xeee53e > 0)) {
                  _0x3cb596 = _0x4fc29a;
                  break;
                }
                _0x3cb596 = _0x4fc29a - 1;
              }
            }
            _0x4fc29a = _0x3cb596;
            if (_0x41a296[_0x4fc29a] === _0x3aa307) {
              return _0x4fc29a / (_0x4dae0d - 1);
            } else {
              return (_0x4fc29a + (_0x3fdf2f = (_0x3aa307 - (_0x3fdf2f = _0x41a296[_0x4fc29a])) / ((_0x4f507d = _0x41a296[_0x4fc29a + 1]) - _0x3fdf2f))) / (_0x4dae0d - 1);
            }
          }
          getTangent(_0x226b4d, _0x45f2f9) {
            let _0x5add8a = _0x226b4d - 0.0001;
            let _0x2316a0 = _0x226b4d + 0.0001;
            if (_0x5add8a < 0) {
              _0x5add8a = 0;
            }
            if (_0x2316a0 > 1) {
              _0x2316a0 = 1;
            }
            var _0x3ca91e = this.getPoint(_0x5add8a);
            _0x226b4d = this.getPoint(_0x2316a0);
            var _0x352c85 = 4;
            const _0x1aeeb1 = _0x45f2f9 || new (_0x3ca91e.isVector2 ? _0x25f874 : _0x1d20ef)();
            _0x352c85 = "oefm";
            _0x1aeeb1.copy(_0x226b4d).sub(_0x3ca91e).normalize();
            return _0x1aeeb1;
          }
          getTangentAt(_0x1e6523, _0x51786a) {
            _0x1e6523 = this.getUtoTmapping(_0x1e6523);
            return this.getTangent(_0x1e6523, _0x51786a);
          }
          computeFrenetFrames(_0x2da2d8, _0x51835f) {
            const _0x49194b = new _0x1d20ef();
            const _0x536d65 = [];
            const _0x3ff2cf = [];
            const _0x532110 = [];
            const _0x300649 = new _0x1d20ef();
            const _0x5d9553 = new _0x33b2c9();
            for (let _0x155c45 = 0; _0x155c45 <= _0x2da2d8; _0x155c45++) {
              var _0x3cd387 = _0x155c45 / _0x2da2d8;
              _0x536d65[_0x155c45] = this.getTangentAt(_0x3cd387, new _0x1d20ef());
            }
            _0x3ff2cf[0] = new _0x1d20ef();
            _0x532110[0] = new _0x1d20ef();
            let _0x214f2b = Number.MAX_VALUE;
            var _0x20df9c;
            var _0x12c3e7 = Math.abs(_0x536d65[0].x);
            var _0x112f7c = Math.abs(_0x536d65[0].y);
            var _0x5a85e9 = Math.abs(_0x536d65[0].z);
            if (_0x12c3e7 <= _0x214f2b) {
              _0x214f2b = _0x12c3e7;
              _0x49194b.set(1, 0, 0);
            }
            if (_0x112f7c <= _0x214f2b) {
              _0x214f2b = _0x112f7c;
              _0x49194b.set(0, 1, 0);
            }
            if (_0x5a85e9 <= _0x214f2b) {
              _0x49194b.set(0, 0, 1);
            }
            _0x300649.crossVectors(_0x536d65[0], _0x49194b).normalize();
            _0x3ff2cf[0].crossVectors(_0x536d65[0], _0x300649);
            _0x532110[0].crossVectors(_0x536d65[0], _0x3ff2cf[0]);
            for (let _0x1a1a95 = 1; _0x1a1a95 <= _0x2da2d8; _0x1a1a95++) {
              _0x3ff2cf[_0x1a1a95] = _0x3ff2cf[_0x1a1a95 - 1].clone();
              _0x532110[_0x1a1a95] = _0x532110[_0x1a1a95 - 1].clone();
              _0x300649.crossVectors(_0x536d65[_0x1a1a95 - 1], _0x536d65[_0x1a1a95]);
              if (_0x300649.length() > Number.EPSILON) {
                _0x300649.normalize();
                _0x20df9c = Math.acos(_0x6865cb(_0x536d65[_0x1a1a95 - 1].dot(_0x536d65[_0x1a1a95]), -1, 1));
                _0x3ff2cf[_0x1a1a95].applyMatrix4(_0x5d9553.makeRotationAxis(_0x300649, _0x20df9c));
              }
              _0x532110[_0x1a1a95].crossVectors(_0x536d65[_0x1a1a95], _0x3ff2cf[_0x1a1a95]);
            }
            if (_0x51835f === true) {
              let _0x3b3ed1 = Math.acos(_0x6865cb(_0x3ff2cf[0].dot(_0x3ff2cf[_0x2da2d8]), -1, 1));
              _0x3b3ed1 /= _0x2da2d8;
              if (_0x536d65[0].dot(_0x300649.crossVectors(_0x3ff2cf[0], _0x3ff2cf[_0x2da2d8])) > 0) {
                _0x3b3ed1 = -_0x3b3ed1;
              }
              for (let _0x52734e = 1; _0x52734e <= _0x2da2d8; _0x52734e++) {
                _0x3ff2cf[_0x52734e].applyMatrix4(_0x5d9553.makeRotationAxis(_0x536d65[_0x52734e], _0x3b3ed1 * _0x52734e));
                _0x532110[_0x52734e].crossVectors(_0x536d65[_0x52734e], _0x3ff2cf[_0x52734e]);
              }
            }
            return {
              tangents: _0x536d65,
              normals: _0x3ff2cf,
              binormals: _0x532110
            };
          }
          clone() {
            return new this.constructor().copy(this);
          }
          copy(_0x1c5830) {
            this.arcLengthDivisions = _0x1c5830.arcLengthDivisions;
            return this;
          }
          toJSON() {
            var _0xa05596 = 14;
            const _0x2b7522 = {
              metadata: {
                version: 4.5,
                type: "Curve",
                generator: "Curve.toJSON"
              }
            };
            _0xa05596 = 10;
            _0x2b7522.arcLengthDivisions = this.arcLengthDivisions;
            _0x2b7522.type = this.type;
            return _0x2b7522;
          }
          fromJSON(_0x5ac36b) {
            this.arcLengthDivisions = _0x5ac36b.arcLengthDivisions;
            return this;
          }
        }
        class _0x28b4b3 extends _0x52649c {
          constructor(_0x2872b2 = 0, _0x2d4104 = 0, _0x2b9031 = 1, _0x132bc6 = 1, _0x43f446 = 0, _0x1c8c19 = Math.PI * 2, _0x5883d1 = false, _0x57b237 = 0) {
            super();
            this.type = "EllipseCurve";
            this.aX = _0x2872b2;
            this.aY = _0x2d4104;
            this.xRadius = _0x2b9031;
            this.yRadius = _0x132bc6;
            this.aStartAngle = _0x43f446;
            this.aEndAngle = _0x1c8c19;
            this.aClockwise = _0x5883d1;
            this.aRotation = _0x57b237;
          }
          getPoint(_0xbe6e67, _0x1e4a0b) {
            const _0x21ce6c = _0x1e4a0b || new _0x25f874();
            var _0x34fa75;
            var _0x59d20a = Math.PI * 2;
            _0x34fa75 = 13;
            let _0xe634a7 = this.aEndAngle - this.aStartAngle;
            for (var _0x394149 = Math.abs(_0xe634a7) < Number.EPSILON; _0xe634a7 < 0;) {
              _0xe634a7 += _0x59d20a;
            }
            for (; _0xe634a7 > _0x59d20a;) {
              _0xe634a7 -= _0x59d20a;
            }
            if (_0xe634a7 < Number.EPSILON) {
              _0xe634a7 = _0x394149 ? 0 : _0x59d20a;
            }
            if (!(this.aClockwise !== true || _0x394149)) {
              if (_0xe634a7 === _0x59d20a) {
                _0xe634a7 = -_0x59d20a;
              } else {
                _0xe634a7 -= _0x59d20a;
              }
            }
            var _0xe9f880 = this.aStartAngle + _0xbe6e67 * _0xe634a7;
            let _0x5be120 = this.aX + this.xRadius * Math.cos(_0xe9f880);
            let _0x5b38ee = this.aY + this.yRadius * Math.sin(_0xe9f880);
            if (this.aRotation !== 0) {
              _0x1e4a0b = Math.cos(this.aRotation);
              _0x394149 = Math.sin(this.aRotation);
              _0x5be120 = (_0xbe6e67 = _0x5be120 - this.aX) * _0x1e4a0b - (_0xe9f880 = _0x5b38ee - this.aY) * _0x394149 + this.aX;
              _0x5b38ee = _0xbe6e67 * _0x394149 + _0xe9f880 * _0x1e4a0b + this.aY;
            }
            return _0x21ce6c.set(_0x5be120, _0x5b38ee);
          }
          copy(_0x193de4) {
            super.copy(_0x193de4);
            this.aX = _0x193de4.aX;
            this.aY = _0x193de4.aY;
            this.xRadius = _0x193de4.xRadius;
            this.yRadius = _0x193de4.yRadius;
            this.aStartAngle = _0x193de4.aStartAngle;
            this.aEndAngle = _0x193de4.aEndAngle;
            this.aClockwise = _0x193de4.aClockwise;
            this.aRotation = _0x193de4.aRotation;
            return this;
          }
          toJSON() {
            const _0x339f2f = super.toJSON();
            _0x339f2f.aX = this.aX;
            _0x339f2f.aY = this.aY;
            _0x339f2f.xRadius = this.xRadius;
            _0x339f2f.yRadius = this.yRadius;
            _0x339f2f.aStartAngle = this.aStartAngle;
            _0x339f2f.aEndAngle = this.aEndAngle;
            _0x339f2f.aClockwise = this.aClockwise;
            _0x339f2f.aRotation = this.aRotation;
            return _0x339f2f;
          }
          fromJSON(_0x594101) {
            super.fromJSON(_0x594101);
            this.aX = _0x594101.aX;
            this.aY = _0x594101.aY;
            this.xRadius = _0x594101.xRadius;
            this.yRadius = _0x594101.yRadius;
            this.aStartAngle = _0x594101.aStartAngle;
            this.aEndAngle = _0x594101.aEndAngle;
            this.aClockwise = _0x594101.aClockwise;
            this.aRotation = _0x594101.aRotation;
            return this;
          }
        }
        _0x28b4b3.prototype.isEllipseCurve = true;
        class _0x1bc0f7 extends _0x28b4b3 {
          constructor(_0x4c9493, _0x1c8cad, _0x44df1f, _0x5f4ff9, _0xe5fc9c, _0x5ee818) {
            super(_0x4c9493, _0x1c8cad, _0x44df1f, _0x44df1f, _0x5f4ff9, _0xe5fc9c, _0x5ee818);
            this.type = "ArcCurve";
          }
        }
        function _0x4bda45() {
          let _0x5aefdd = 0;
          let _0x5eb518 = 0;
          let _0xaace7b = 0;
          let _0x41a403 = 0;
          function _0x6f213(_0x556d97, _0x23b552, _0x6d1134, _0x261fa2) {
            _0x5aefdd = _0x556d97;
            _0x5eb518 = _0x6d1134;
            _0xaace7b = _0x556d97 * -3 + _0x23b552 * 3 - _0x6d1134 * 2 - _0x261fa2;
            _0x41a403 = _0x556d97 * 2 - _0x23b552 * 2 + _0x6d1134 + _0x261fa2;
          }
          return {
            initCatmullRom: function (_0x153580, _0x5406c9, _0x11f135, _0x1debec, _0xec17fb) {
              _0x6f213(_0x5406c9, _0x11f135, _0xec17fb * (_0x11f135 - _0x153580), _0xec17fb * (_0x1debec - _0x5406c9));
            },
            initNonuniformCatmullRom: function (_0x2d6305, _0x2923a3, _0x3a1efa, _0x3aa54c, _0x47c25c, _0x457dd7, _0x4bf523) {
              _0x47c25c = (_0x2923a3 - _0x2d6305) / _0x47c25c - (_0x3a1efa - _0x2d6305) / (_0x47c25c + _0x457dd7) + (_0x3a1efa - _0x2923a3) / _0x457dd7;
              _0x4bf523 = (_0x3a1efa - _0x2923a3) / _0x457dd7 - (_0x3aa54c - _0x2923a3) / (_0x457dd7 + _0x4bf523) + (_0x3aa54c - _0x3a1efa) / _0x4bf523;
              _0x6f213(_0x2923a3, _0x3a1efa, _0x47c25c *= _0x457dd7, _0x4bf523 *= _0x457dd7);
            },
            calc: function (_0xc1fb85) {
              var _0x4e2a40 = 10;
              var _0x29589e = _0xc1fb85 * _0xc1fb85;
              _0x4e2a40 = "fmgm";
              return _0x5aefdd + _0x5eb518 * _0xc1fb85 + _0xaace7b * _0x29589e + _0x41a403 * (_0x29589e * _0xc1fb85);
            }
          };
        }
        _0x1bc0f7.prototype.isArcCurve = true;
        const _0xbec083 = new _0x1d20ef();
        const _0x1d657c = new _0x4bda45();
        const _0x5639e5 = new _0x4bda45();
        const _0x15d0bf = new _0x4bda45();
        class _0x1ed704 extends _0x52649c {
          constructor(_0x3af710 = [], _0x184b3e = false, _0x28fa92 = "centripetal", _0x204a14 = 0.5) {
            super();
            this.type = "CatmullRomCurve3";
            this.points = _0x3af710;
            this.closed = _0x184b3e;
            this.curveType = _0x28fa92;
            this.tension = _0x204a14;
          }
          getPoint(_0x136029, _0x227a60 = new _0x1d20ef()) {
            var _0x14b54f = 2;
            const _0x505995 = _0x227a60;
            _0x14b54f = 8;
            var _0x3dedd4 = 8;
            var _0x44842f = this.points;
            _0x3dedd4 = 9;
            _0x136029 = ((_0x227a60 = _0x44842f.length) - (this.closed ? 0 : 1)) * _0x136029;
            let _0x561320;
            let _0x47ff4a;
            let _0x4ba866 = Math.floor(_0x136029);
            let _0x3dd2cd = _0x136029 - _0x4ba866;
            if (this.closed) {
              _0x4ba866 += _0x4ba866 > 0 ? 0 : (Math.floor(Math.abs(_0x4ba866) / _0x227a60) + 1) * _0x227a60;
            } else if (_0x3dd2cd === 0 && _0x4ba866 === _0x227a60 - 1) {
              _0x4ba866 = _0x227a60 - 2;
              _0x3dd2cd = 1;
            }
            _0x561320 = this.closed || _0x4ba866 > 0 ? _0x44842f[(_0x4ba866 - 1) % _0x227a60] : (_0xbec083.subVectors(_0x44842f[0], _0x44842f[1]).add(_0x44842f[0]), _0xbec083);
            const _0x333213 = _0x44842f[_0x4ba866 % _0x227a60];
            const _0x428e93 = _0x44842f[(_0x4ba866 + 1) % _0x227a60];
            _0x47ff4a = this.closed || _0x4ba866 + 2 < _0x227a60 ? _0x44842f[(_0x4ba866 + 2) % _0x227a60] : (_0xbec083.subVectors(_0x44842f[_0x227a60 - 1], _0x44842f[_0x227a60 - 2]).add(_0x44842f[_0x227a60 - 1]), _0xbec083);
            if (this.curveType === "centripetal" || this.curveType === "chordal") {
              _0x227a60 = this.curveType === "chordal" ? 0.5 : 0.25;
              let _0x248c96 = Math.pow(_0x561320.distanceToSquared(_0x333213), _0x227a60);
              let _0x58ecdd = Math.pow(_0x333213.distanceToSquared(_0x428e93), _0x227a60);
              let _0xc59cb6 = Math.pow(_0x428e93.distanceToSquared(_0x47ff4a), _0x227a60);
              if (_0x58ecdd < 0.0001) {
                _0x58ecdd = 1;
              }
              if (_0x248c96 < 0.0001) {
                _0x248c96 = _0x58ecdd;
              }
              if (_0xc59cb6 < 0.0001) {
                _0xc59cb6 = _0x58ecdd;
              }
              _0x1d657c.initNonuniformCatmullRom(_0x561320.x, _0x333213.x, _0x428e93.x, _0x47ff4a.x, _0x248c96, _0x58ecdd, _0xc59cb6);
              _0x5639e5.initNonuniformCatmullRom(_0x561320.y, _0x333213.y, _0x428e93.y, _0x47ff4a.y, _0x248c96, _0x58ecdd, _0xc59cb6);
              _0x15d0bf.initNonuniformCatmullRom(_0x561320.z, _0x333213.z, _0x428e93.z, _0x47ff4a.z, _0x248c96, _0x58ecdd, _0xc59cb6);
            } else if (this.curveType === "catmullrom") {
              _0x1d657c.initCatmullRom(_0x561320.x, _0x333213.x, _0x428e93.x, _0x47ff4a.x, this.tension);
              _0x5639e5.initCatmullRom(_0x561320.y, _0x333213.y, _0x428e93.y, _0x47ff4a.y, this.tension);
              _0x15d0bf.initCatmullRom(_0x561320.z, _0x333213.z, _0x428e93.z, _0x47ff4a.z, this.tension);
            }
            _0x505995.set(_0x1d657c.calc(_0x3dd2cd), _0x5639e5.calc(_0x3dd2cd), _0x15d0bf.calc(_0x3dd2cd));
            return _0x505995;
          }
          copy(_0x330b22) {
            super.copy(_0x330b22);
            this.points = [];
            for (let _0x33c5a2 = 0, _0x2dc372 = _0x330b22.points.length; _0x33c5a2 < _0x2dc372; _0x33c5a2++) {
              var _0x2ceb3f = 12;
              const _0x4d8c01 = _0x330b22.points[_0x33c5a2];
              _0x2ceb3f = 7;
              this.points.push(_0x4d8c01.clone());
            }
            this.closed = _0x330b22.closed;
            this.curveType = _0x330b22.curveType;
            this.tension = _0x330b22.tension;
            return this;
          }
          toJSON() {
            const _0x53ec30 = super.toJSON();
            _0x53ec30.points = [];
            for (let _0x2d767b = 0, _0x4ce5b6 = this.points.length; _0x2d767b < _0x4ce5b6; _0x2d767b++) {
              const _0x5bc6fd = this.points[_0x2d767b];
              _0x53ec30.points.push(_0x5bc6fd.toArray());
            }
            _0x53ec30.closed = this.closed;
            _0x53ec30.curveType = this.curveType;
            _0x53ec30.tension = this.tension;
            return _0x53ec30;
          }
          fromJSON(_0x3abe94) {
            super.fromJSON(_0x3abe94);
            this.points = [];
            for (let _0x4b1705 = 0, _0x2c9ec4 = _0x3abe94.points.length; _0x4b1705 < _0x2c9ec4; _0x4b1705++) {
              var _0x1eb271 = _0x3abe94.points[_0x4b1705];
              this.points.push(new _0x1d20ef().fromArray(_0x1eb271));
            }
            this.closed = _0x3abe94.closed;
            this.curveType = _0x3abe94.curveType;
            this.tension = _0x3abe94.tension;
            return this;
          }
        }
        function _0x248ab7(_0x56d618, _0xd5fe2b, _0x1023b8, _0x750ca9, _0x2167ef) {
          var _0x26b5f5;
          var _0x8a0bac = (_0x750ca9 - _0xd5fe2b) * 0.5;
          _0x26b5f5 = 11;
          return (_0x1023b8 * 2 - _0x750ca9 * 2 + _0x8a0bac + (_0xd5fe2b = (_0x2167ef - _0x1023b8) * 0.5)) * (_0x56d618 * (_0x2167ef = _0x56d618 * _0x56d618)) + (_0x1023b8 * -3 + _0x750ca9 * 3 - _0x8a0bac * 2 - _0xd5fe2b) * _0x2167ef + _0x8a0bac * _0x56d618 + _0x1023b8;
        }
        function _0x436ef1(_0x2805a1, _0x440aba, _0x172256, _0x2c169c) {
          return (_0x5b94ea = 1 - (_0x5b94ea = _0x2805a1)) * _0x5b94ea * _0x440aba + (1 - _0x2805a1) * 2 * _0x2805a1 * _0x172256 + _0x2805a1 * _0x2805a1 * _0x2c169c;
          var _0x5b94ea;
        }
        function _0x566b33(_0x168505, _0x31936a, _0x44a4d2, _0x199bae, _0x176735) {
          return (_0x57c40e = 1 - (_0x57c40e = _0x168505)) * _0x57c40e * _0x57c40e * _0x31936a + (_0x31936a = 1 - _0x168505) * 3 * _0x31936a * _0x168505 * _0x44a4d2 + (1 - _0x168505) * 3 * _0x168505 * _0x168505 * _0x199bae + _0x168505 * _0x168505 * _0x168505 * _0x176735;
          var _0x57c40e;
        }
        _0x1ed704.prototype.isCatmullRomCurve3 = true;
        class _0x3601fc extends _0x52649c {
          constructor(_0x327377 = new _0x25f874(), _0x29efd1 = new _0x25f874(), _0x403cc7 = new _0x25f874(), _0x53340c = new _0x25f874()) {
            super();
            this.type = "CubicBezierCurve";
            this.v0 = _0x327377;
            this.v1 = _0x29efd1;
            this.v2 = _0x403cc7;
            this.v3 = _0x53340c;
          }
          getPoint(_0x20b976, _0x44a4fd = new _0x25f874()) {
            const _0x50577c = _0x44a4fd;
            var _0x3840a8 = this.v0;
            var _0x59e686 = this.v1;
            var _0x16114a = this.v2;
            _0x44a4fd = this.v3;
            _0x50577c.set(_0x566b33(_0x20b976, _0x3840a8.x, _0x59e686.x, _0x16114a.x, _0x44a4fd.x), _0x566b33(_0x20b976, _0x3840a8.y, _0x59e686.y, _0x16114a.y, _0x44a4fd.y));
            return _0x50577c;
          }
          copy(_0x1b6278) {
            super.copy(_0x1b6278);
            this.v0.copy(_0x1b6278.v0);
            this.v1.copy(_0x1b6278.v1);
            this.v2.copy(_0x1b6278.v2);
            this.v3.copy(_0x1b6278.v3);
            return this;
          }
          toJSON() {
            const _0x3011c5 = super.toJSON();
            _0x3011c5.v0 = this.v0.toArray();
            _0x3011c5.v1 = this.v1.toArray();
            _0x3011c5.v2 = this.v2.toArray();
            _0x3011c5.v3 = this.v3.toArray();
            return _0x3011c5;
          }
          fromJSON(_0x13858a) {
            super.fromJSON(_0x13858a);
            this.v0.fromArray(_0x13858a.v0);
            this.v1.fromArray(_0x13858a.v1);
            this.v2.fromArray(_0x13858a.v2);
            this.v3.fromArray(_0x13858a.v3);
            return this;
          }
        }
        _0x3601fc.prototype.isCubicBezierCurve = true;
        class _0x77f5e6 extends _0x52649c {
          constructor(_0x2268b1 = new _0x1d20ef(), _0x4d8fa3 = new _0x1d20ef(), _0x2fdd34 = new _0x1d20ef(), _0x56628e = new _0x1d20ef()) {
            super();
            this.type = "CubicBezierCurve3";
            this.v0 = _0x2268b1;
            this.v1 = _0x4d8fa3;
            this.v2 = _0x2fdd34;
            this.v3 = _0x56628e;
          }
          getPoint(_0x46c4c3, _0x57bc20 = new _0x1d20ef()) {
            const _0x1e05a4 = _0x57bc20;
            var _0x12688c = this.v0;
            var _0x2b4e19 = this.v1;
            var _0x45db41 = this.v2;
            _0x57bc20 = this.v3;
            _0x1e05a4.set(_0x566b33(_0x46c4c3, _0x12688c.x, _0x2b4e19.x, _0x45db41.x, _0x57bc20.x), _0x566b33(_0x46c4c3, _0x12688c.y, _0x2b4e19.y, _0x45db41.y, _0x57bc20.y), _0x566b33(_0x46c4c3, _0x12688c.z, _0x2b4e19.z, _0x45db41.z, _0x57bc20.z));
            return _0x1e05a4;
          }
          copy(_0x274bc1) {
            super.copy(_0x274bc1);
            this.v0.copy(_0x274bc1.v0);
            this.v1.copy(_0x274bc1.v1);
            this.v2.copy(_0x274bc1.v2);
            this.v3.copy(_0x274bc1.v3);
            return this;
          }
          toJSON() {
            const _0x4ea37a = super.toJSON();
            _0x4ea37a.v0 = this.v0.toArray();
            _0x4ea37a.v1 = this.v1.toArray();
            _0x4ea37a.v2 = this.v2.toArray();
            _0x4ea37a.v3 = this.v3.toArray();
            return _0x4ea37a;
          }
          fromJSON(_0x3ac93a) {
            super.fromJSON(_0x3ac93a);
            this.v0.fromArray(_0x3ac93a.v0);
            this.v1.fromArray(_0x3ac93a.v1);
            this.v2.fromArray(_0x3ac93a.v2);
            this.v3.fromArray(_0x3ac93a.v3);
            return this;
          }
        }
        _0x77f5e6.prototype.isCubicBezierCurve3 = true;
        class _0xc56f4 extends _0x52649c {
          constructor(_0x435a58 = new _0x25f874(), _0x4aafa1 = new _0x25f874()) {
            super();
            this.type = "LineCurve";
            this.v1 = _0x435a58;
            this.v2 = _0x4aafa1;
          }
          getPoint(_0xf07574, _0x38ca42 = new _0x25f874()) {
            const _0xfedac = _0x38ca42;
            if (_0xf07574 === 1) {
              _0xfedac.copy(this.v2);
            } else {
              _0xfedac.copy(this.v2).sub(this.v1);
              _0xfedac.multiplyScalar(_0xf07574).add(this.v1);
            }
            return _0xfedac;
          }
          getPointAt(_0x418438, _0x58657a) {
            return this.getPoint(_0x418438, _0x58657a);
          }
          getTangent(_0x15a4f5, _0x47d9d9) {
            const _0x3c9e8f = _0x47d9d9 || new _0x25f874();
            _0x3c9e8f.copy(this.v2).sub(this.v1).normalize();
            return _0x3c9e8f;
          }
          copy(_0x365d30) {
            super.copy(_0x365d30);
            this.v1.copy(_0x365d30.v1);
            this.v2.copy(_0x365d30.v2);
            return this;
          }
          toJSON() {
            const _0xee68d7 = super.toJSON();
            _0xee68d7.v1 = this.v1.toArray();
            _0xee68d7.v2 = this.v2.toArray();
            return _0xee68d7;
          }
          fromJSON(_0x66a1b4) {
            super.fromJSON(_0x66a1b4);
            this.v1.fromArray(_0x66a1b4.v1);
            this.v2.fromArray(_0x66a1b4.v2);
            return this;
          }
        }
        _0xc56f4.prototype.isLineCurve = true;
        class _0x3bbb90 extends _0x52649c {
          constructor(_0x12c0b4 = new _0x1d20ef(), _0x2b2caa = new _0x1d20ef()) {
            super();
            this.type = "LineCurve3";
            this.isLineCurve3 = true;
            this.v1 = _0x12c0b4;
            this.v2 = _0x2b2caa;
          }
          getPoint(_0x38f471, _0x419c05 = new _0x1d20ef()) {
            const _0x5f3983 = _0x419c05;
            if (_0x38f471 === 1) {
              _0x5f3983.copy(this.v2);
            } else {
              _0x5f3983.copy(this.v2).sub(this.v1);
              _0x5f3983.multiplyScalar(_0x38f471).add(this.v1);
            }
            return _0x5f3983;
          }
          getPointAt(_0x398467, _0x321516) {
            return this.getPoint(_0x398467, _0x321516);
          }
          copy(_0x482173) {
            super.copy(_0x482173);
            this.v1.copy(_0x482173.v1);
            this.v2.copy(_0x482173.v2);
            return this;
          }
          toJSON() {
            const _0xf08c9c = super.toJSON();
            _0xf08c9c.v1 = this.v1.toArray();
            _0xf08c9c.v2 = this.v2.toArray();
            return _0xf08c9c;
          }
          fromJSON(_0x5b4d23) {
            super.fromJSON(_0x5b4d23);
            this.v1.fromArray(_0x5b4d23.v1);
            this.v2.fromArray(_0x5b4d23.v2);
            return this;
          }
        }
        class _0x37c8d7 extends _0x52649c {
          constructor(_0x1710b2 = new _0x25f874(), _0x37e44c = new _0x25f874(), _0x481e5e = new _0x25f874()) {
            super();
            this.type = "QuadraticBezierCurve";
            this.v0 = _0x1710b2;
            this.v1 = _0x37e44c;
            this.v2 = _0x481e5e;
          }
          getPoint(_0x4146ec, _0x48b19e = new _0x25f874()) {
            var _0x16b23a;
            const _0xbdadcb = _0x48b19e;
            _0x16b23a = 3;
            var _0x1093eb = this.v0;
            var _0x20c485 = this.v1;
            _0x48b19e = this.v2;
            _0xbdadcb.set(_0x436ef1(_0x4146ec, _0x1093eb.x, _0x20c485.x, _0x48b19e.x), _0x436ef1(_0x4146ec, _0x1093eb.y, _0x20c485.y, _0x48b19e.y));
            return _0xbdadcb;
          }
          copy(_0x4a7cd0) {
            super.copy(_0x4a7cd0);
            this.v0.copy(_0x4a7cd0.v0);
            this.v1.copy(_0x4a7cd0.v1);
            this.v2.copy(_0x4a7cd0.v2);
            return this;
          }
          toJSON() {
            var _0x2ff14b;
            const _0x23dd1a = super.toJSON();
            _0x2ff14b = 6;
            _0x23dd1a.v0 = this.v0.toArray();
            _0x23dd1a.v1 = this.v1.toArray();
            _0x23dd1a.v2 = this.v2.toArray();
            return _0x23dd1a;
          }
          fromJSON(_0x5a5a96) {
            super.fromJSON(_0x5a5a96);
            this.v0.fromArray(_0x5a5a96.v0);
            this.v1.fromArray(_0x5a5a96.v1);
            this.v2.fromArray(_0x5a5a96.v2);
            return this;
          }
        }
        _0x37c8d7.prototype.isQuadraticBezierCurve = true;
        class _0x49a817 extends _0x52649c {
          constructor(_0x172fd7 = new _0x1d20ef(), _0x163943 = new _0x1d20ef(), _0x42178e = new _0x1d20ef()) {
            super();
            this.type = "QuadraticBezierCurve3";
            this.v0 = _0x172fd7;
            this.v1 = _0x163943;
            this.v2 = _0x42178e;
          }
          getPoint(_0x4b9d15, _0xd243df = new _0x1d20ef()) {
            var _0x5dd513 = 4;
            const _0x17f815 = _0xd243df;
            _0x5dd513 = 3;
            var _0x2558f6 = this.v0;
            var _0x2a1914 = this.v1;
            _0xd243df = this.v2;
            _0x17f815.set(_0x436ef1(_0x4b9d15, _0x2558f6.x, _0x2a1914.x, _0xd243df.x), _0x436ef1(_0x4b9d15, _0x2558f6.y, _0x2a1914.y, _0xd243df.y), _0x436ef1(_0x4b9d15, _0x2558f6.z, _0x2a1914.z, _0xd243df.z));
            return _0x17f815;
          }
          copy(_0x225c4b) {
            super.copy(_0x225c4b);
            this.v0.copy(_0x225c4b.v0);
            this.v1.copy(_0x225c4b.v1);
            this.v2.copy(_0x225c4b.v2);
            return this;
          }
          toJSON() {
            const _0x38e2d7 = super.toJSON();
            _0x38e2d7.v0 = this.v0.toArray();
            _0x38e2d7.v1 = this.v1.toArray();
            _0x38e2d7.v2 = this.v2.toArray();
            return _0x38e2d7;
          }
          fromJSON(_0x181bf4) {
            super.fromJSON(_0x181bf4);
            this.v0.fromArray(_0x181bf4.v0);
            this.v1.fromArray(_0x181bf4.v1);
            this.v2.fromArray(_0x181bf4.v2);
            return this;
          }
        }
        _0x49a817.prototype.isQuadraticBezierCurve3 = true;
        class _0x416de9 extends _0x52649c {
          constructor(_0x48e8d3 = []) {
            super();
            this.type = "SplineCurve";
            this.points = _0x48e8d3;
          }
          getPoint(_0x488663, _0x44d2c1 = new _0x25f874()) {
            const _0xa7d43c = _0x44d2c1;
            var _0x89cf79 = this.points;
            var _0x462846 = (_0x5f5257 = (_0x89cf79.length - 1) * _0x488663) - (_0x48edd3 = Math.floor(_0x5f5257));
            _0x44d2c1 = _0x89cf79[_0x48edd3 === 0 ? _0x48edd3 : _0x48edd3 - 1];
            _0x488663 = _0x89cf79[_0x48edd3];
            var _0x5f5257 = _0x89cf79[_0x48edd3 > _0x89cf79.length - 2 ? _0x89cf79.length - 1 : _0x48edd3 + 1];
            var _0x48edd3 = _0x89cf79[_0x48edd3 > _0x89cf79.length - 3 ? _0x89cf79.length - 1 : _0x48edd3 + 2];
            _0xa7d43c.set(_0x248ab7(_0x462846, _0x44d2c1.x, _0x488663.x, _0x5f5257.x, _0x48edd3.x), _0x248ab7(_0x462846, _0x44d2c1.y, _0x488663.y, _0x5f5257.y, _0x48edd3.y));
            return _0xa7d43c;
          }
          copy(_0x19cafe) {
            super.copy(_0x19cafe);
            this.points = [];
            for (let _0x2f42e4 = 0, _0x185c3b = _0x19cafe.points.length; _0x2f42e4 < _0x185c3b; _0x2f42e4++) {
              const _0x33be97 = _0x19cafe.points[_0x2f42e4];
              this.points.push(_0x33be97.clone());
            }
            return this;
          }
          toJSON() {
            const _0x76895e = super.toJSON();
            _0x76895e.points = [];
            for (let _0x4c6a66 = 0, _0x422454 = this.points.length; _0x4c6a66 < _0x422454; _0x4c6a66++) {
              var _0x229322;
              const _0x51488e = this.points[_0x4c6a66];
              _0x229322 = 6;
              _0x76895e.points.push(_0x51488e.toArray());
            }
            return _0x76895e;
          }
          fromJSON(_0x228a82) {
            super.fromJSON(_0x228a82);
            this.points = [];
            for (let _0x4e2320 = 0, _0x1ff7a8 = _0x228a82.points.length; _0x4e2320 < _0x1ff7a8; _0x4e2320++) {
              var _0x491b5e;
              var _0x5dc150 = _0x228a82.points[_0x4e2320];
              _0x491b5e = 10;
              this.points.push(new _0x25f874().fromArray(_0x5dc150));
            }
            return this;
          }
        }
        _0x416de9.prototype.isSplineCurve = true;
        var _0x4c70de = Object.freeze({
          "__proto__": null,
          ArcCurve: _0x1bc0f7,
          CatmullRomCurve3: _0x1ed704,
          CubicBezierCurve: _0x3601fc,
          CubicBezierCurve3: _0x77f5e6,
          EllipseCurve: _0x28b4b3,
          LineCurve: _0xc56f4,
          LineCurve3: _0x3bbb90,
          QuadraticBezierCurve: _0x37c8d7,
          QuadraticBezierCurve3: _0x49a817,
          SplineCurve: _0x416de9
        });
        class _0x44e76b extends _0x52649c {
          constructor() {
            super();
            this.type = "CurvePath";
            this.curves = [];
            this.autoClose = false;
          }
          add(_0x19f6d9) {
            this.curves.push(_0x19f6d9);
          }
          closePath() {
            var _0x1b1e28 = 10;
            const _0x1c4922 = this.curves[0].getPoint(0);
            _0x1b1e28 = 12;
            var _0xb79cd = this.curves[this.curves.length - 1].getPoint(1);
            if (!_0x1c4922.equals(_0xb79cd)) {
              this.curves.push(new _0xc56f4(_0xb79cd, _0x1c4922));
            }
          }
          getPoint(_0x1ae1da, _0x4c4713) {
            var _0x63a9d = _0x1ae1da * this.getLength();
            var _0x574c27 = this.getCurveLengths();
            let _0x431ad2 = 0;
            for (; _0x431ad2 < _0x574c27.length;) {
              if (_0x574c27[_0x431ad2] >= _0x63a9d) {
                var _0x34b04d = _0x574c27[_0x431ad2] - _0x63a9d;
                const _0x16cf0a = this.curves[_0x431ad2];
                var _0x2bfb98 = 7;
                var _0x4e85cb = _0x16cf0a.getLength();
                _0x2bfb98 = 9;
                return _0x16cf0a.getPointAt(_0x4e85cb === 0 ? 0 : 1 - _0x34b04d / _0x4e85cb, _0x4c4713);
              }
              _0x431ad2++;
            }
            return null;
          }
          getLength() {
            var _0x33ad68 = this.getCurveLengths();
            return _0x33ad68[_0x33ad68.length - 1];
          }
          updateArcLengths() {
            this.needsUpdate = true;
            this.cacheLengths = null;
            this.getCurveLengths();
          }
          getCurveLengths() {
            if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
              return this.cacheLengths;
            }
            var _0x995596 = 11;
            const _0x5d2f90 = [];
            _0x995596 = 18;
            let _0x39ca56 = 0;
            for (let _0x5666e6 = 0, _0x51db57 = this.curves.length; _0x5666e6 < _0x51db57; _0x5666e6++) {
              _0x39ca56 += this.curves[_0x5666e6].getLength();
              _0x5d2f90.push(_0x39ca56);
            }
            this.cacheLengths = _0x5d2f90;
            return _0x5d2f90;
          }
          getSpacedPoints(_0x984e49 = 40) {
            var _0x95de13;
            const _0x362214 = [];
            _0x95de13 = "jhme";
            for (let _0x1c1d97 = 0; _0x1c1d97 <= _0x984e49; _0x1c1d97++) {
              _0x362214.push(this.getPoint(_0x1c1d97 / _0x984e49));
            }
            if (this.autoClose) {
              _0x362214.push(_0x362214[0]);
            }
            return _0x362214;
          }
          getPoints(_0x4b79dd = 12) {
            const _0x4afdb0 = [];
            var _0x55588b = 7;
            let _0x560497;
            _0x55588b = 6;
            for (let _0x45a9c4 = 0, _0x8d69bf = this.curves; _0x45a9c4 < _0x8d69bf.length; _0x45a9c4++) {
              const _0x1a5864 = _0x8d69bf[_0x45a9c4];
              var _0x4a4ef3 = _0x1a5864 && _0x1a5864.isEllipseCurve ? _0x4b79dd * 2 : _0x1a5864 && (_0x1a5864.isLineCurve || _0x1a5864.isLineCurve3) ? 1 : _0x1a5864 && _0x1a5864.isSplineCurve ? _0x4b79dd * _0x1a5864.points.length : _0x4b79dd;
              var _0x19664f = _0x1a5864.getPoints(_0x4a4ef3);
              for (let _0x119898 = 0; _0x119898 < _0x19664f.length; _0x119898++) {
                var _0x35531b = 7;
                var _0x577ca5 = _0x19664f[_0x119898];
                _0x35531b = 3;
                if (!(_0x560497 && _0x560497.equals(_0x577ca5))) {
                  _0x4afdb0.push(_0x577ca5);
                  _0x560497 = _0x577ca5;
                }
              }
            }
            if (this.autoClose && _0x4afdb0.length > 1 && !_0x4afdb0[_0x4afdb0.length - 1].equals(_0x4afdb0[0])) {
              _0x4afdb0.push(_0x4afdb0[0]);
            }
            return _0x4afdb0;
          }
          copy(_0x3317bf) {
            super.copy(_0x3317bf);
            this.curves = [];
            for (let _0x25ba1e = 0, _0x122834 = _0x3317bf.curves.length; _0x25ba1e < _0x122834; _0x25ba1e++) {
              const _0x51ddcc = _0x3317bf.curves[_0x25ba1e];
              this.curves.push(_0x51ddcc.clone());
            }
            this.autoClose = _0x3317bf.autoClose;
            return this;
          }
          toJSON() {
            const _0x5f3ad2 = super.toJSON();
            _0x5f3ad2.autoClose = this.autoClose;
            _0x5f3ad2.curves = [];
            for (let _0x1b84f2 = 0, _0x586d13 = this.curves.length; _0x1b84f2 < _0x586d13; _0x1b84f2++) {
              var _0x5e9fb0 = 17;
              const _0x226cc8 = this.curves[_0x1b84f2];
              _0x5e9fb0 = 7;
              _0x5f3ad2.curves.push(_0x226cc8.toJSON());
            }
            return _0x5f3ad2;
          }
          fromJSON(_0x1e7814) {
            super.fromJSON(_0x1e7814);
            this.autoClose = _0x1e7814.autoClose;
            this.curves = [];
            for (let _0x168aee = 0, _0x10542a = _0x1e7814.curves.length; _0x168aee < _0x10542a; _0x168aee++) {
              var _0x204c6b = _0x1e7814.curves[_0x168aee];
              this.curves.push(new _0x4c70de[_0x204c6b.type]().fromJSON(_0x204c6b));
            }
            return this;
          }
        }
        class _0x3472b0 extends _0x44e76b {
          constructor(_0x46556f) {
            super();
            this.type = "Path";
            this.currentPoint = new _0x25f874();
            if (_0x46556f) {
              this.setFromPoints(_0x46556f);
            }
          }
          setFromPoints(_0x2b9b55) {
            this.moveTo(_0x2b9b55[0].x, _0x2b9b55[0].y);
            for (let _0x5c7f1a = 1, _0x5f5afb = _0x2b9b55.length; _0x5c7f1a < _0x5f5afb; _0x5c7f1a++) {
              this.lineTo(_0x2b9b55[_0x5c7f1a].x, _0x2b9b55[_0x5c7f1a].y);
            }
            return this;
          }
          moveTo(_0x3aaffa, _0x446d77) {
            this.currentPoint.set(_0x3aaffa, _0x446d77);
            return this;
          }
          lineTo(_0x4037ee, _0x2e90fc) {
            var _0x19b850 = new _0xc56f4(this.currentPoint.clone(), new _0x25f874(_0x4037ee, _0x2e90fc));
            this.curves.push(_0x19b850);
            this.currentPoint.set(_0x4037ee, _0x2e90fc);
            return this;
          }
          quadraticCurveTo(_0x5b1731, _0xc464a5, _0x5e4f7b, _0x98f00d) {
            _0xc464a5 = new _0x37c8d7(this.currentPoint.clone(), new _0x25f874(_0x5b1731, _0xc464a5), new _0x25f874(_0x5e4f7b, _0x98f00d));
            this.curves.push(_0xc464a5);
            this.currentPoint.set(_0x5e4f7b, _0x98f00d);
            return this;
          }
          bezierCurveTo(_0x4c94d4, _0x505070, _0x17f24f, _0x25605a, _0x1b3cf6, _0x159ac9) {
            _0x25605a = new _0x3601fc(this.currentPoint.clone(), new _0x25f874(_0x4c94d4, _0x505070), new _0x25f874(_0x17f24f, _0x25605a), new _0x25f874(_0x1b3cf6, _0x159ac9));
            this.curves.push(_0x25605a);
            this.currentPoint.set(_0x1b3cf6, _0x159ac9);
            return this;
          }
          splineThru(_0x11ea51) {
            var _0x3dcc89 = [this.currentPoint.clone()].concat(_0x11ea51);
            _0x3dcc89 = new _0x416de9(_0x3dcc89);
            this.curves.push(_0x3dcc89);
            this.currentPoint.copy(_0x11ea51[_0x11ea51.length - 1]);
            return this;
          }
          arc(_0x1367c3, _0x5681da, _0x4c0705, _0x2ed50a, _0x45a980, _0x1a2fd8) {
            var _0x17748c = this.currentPoint.x;
            var _0x265863 = this.currentPoint.y;
            this.absarc(_0x1367c3 + _0x17748c, _0x5681da + _0x265863, _0x4c0705, _0x2ed50a, _0x45a980, _0x1a2fd8);
            return this;
          }
          absarc(_0x1b2251, _0x3c78ea, _0x44efa7, _0x1fe2c8, _0x300477, _0x5601d1) {
            this.absellipse(_0x1b2251, _0x3c78ea, _0x44efa7, _0x44efa7, _0x1fe2c8, _0x300477, _0x5601d1);
            return this;
          }
          ellipse(_0x1e9800, _0x43572f, _0x83a999, _0x5dbb9a, _0x52b448, _0x88862a, _0x1f567d, _0xe4511b) {
            var _0x5aa322 = this.currentPoint.x;
            var _0x2f8e25 = this.currentPoint.y;
            this.absellipse(_0x1e9800 + _0x5aa322, _0x43572f + _0x2f8e25, _0x83a999, _0x5dbb9a, _0x52b448, _0x88862a, _0x1f567d, _0xe4511b);
            return this;
          }
          absellipse(_0x27f664, _0x246d2b, _0x4f24ba, _0x3dbe87, _0x47ec0a, _0x28d7be, _0x268faf, _0xb1f367) {
            const _0x5820e9 = new _0x28b4b3(_0x27f664, _0x246d2b, _0x4f24ba, _0x3dbe87, _0x47ec0a, _0x28d7be, _0x268faf, _0xb1f367);
            if (this.curves.length > 0) {
              var _0x19dcfa = 6;
              const _0x413158 = _0x5820e9.getPoint(0);
              _0x19dcfa = 4;
              if (!_0x413158.equals(this.currentPoint)) {
                this.lineTo(_0x413158.x, _0x413158.y);
              }
            }
            this.curves.push(_0x5820e9);
            _0xb1f367 = _0x5820e9.getPoint(1);
            this.currentPoint.copy(_0xb1f367);
            return this;
          }
          copy(_0x542cf9) {
            super.copy(_0x542cf9);
            this.currentPoint.copy(_0x542cf9.currentPoint);
            return this;
          }
          toJSON() {
            const _0x46bef3 = super.toJSON();
            _0x46bef3.currentPoint = this.currentPoint.toArray();
            return _0x46bef3;
          }
          fromJSON(_0xaf35b0) {
            super.fromJSON(_0xaf35b0);
            this.currentPoint.fromArray(_0xaf35b0.currentPoint);
            return this;
          }
        }
        class _0xe5830f extends _0x3472b0 {
          constructor(_0xbf10bf) {
            super(_0xbf10bf);
            this.uuid = _0x2b30b2();
            this.type = "Shape";
            this.holes = [];
          }
          getPointsHoles(_0x375e48) {
            const _0xa3619f = [];
            for (let _0x16bc8f = 0, _0xf7a6ec = this.holes.length; _0x16bc8f < _0xf7a6ec; _0x16bc8f++) {
              _0xa3619f[_0x16bc8f] = this.holes[_0x16bc8f].getPoints(_0x375e48);
            }
            return _0xa3619f;
          }
          extractPoints(_0x37108c) {
            return {
              shape: this.getPoints(_0x37108c),
              holes: this.getPointsHoles(_0x37108c)
            };
          }
          copy(_0x376ce9) {
            super.copy(_0x376ce9);
            this.holes = [];
            for (let _0x188e7a = 0, _0x1c973d = _0x376ce9.holes.length; _0x188e7a < _0x1c973d; _0x188e7a++) {
              const _0x54f250 = _0x376ce9.holes[_0x188e7a];
              this.holes.push(_0x54f250.clone());
            }
            return this;
          }
          toJSON() {
            const _0x1d4faf = super.toJSON();
            _0x1d4faf.uuid = this.uuid;
            _0x1d4faf.holes = [];
            for (let _0x46aefc = 0, _0x376e7a = this.holes.length; _0x46aefc < _0x376e7a; _0x46aefc++) {
              var _0x1424f9 = 0;
              const _0x1728aa = this.holes[_0x46aefc];
              _0x1424f9 = "fncc";
              _0x1d4faf.holes.push(_0x1728aa.toJSON());
            }
            return _0x1d4faf;
          }
          fromJSON(_0x2a1cc2) {
            super.fromJSON(_0x2a1cc2);
            this.uuid = _0x2a1cc2.uuid;
            this.holes = [];
            for (let _0xb83ebe = 0, _0x239699 = _0x2a1cc2.holes.length; _0xb83ebe < _0x239699; _0xb83ebe++) {
              var _0x39c091 = _0x2a1cc2.holes[_0xb83ebe];
              this.holes.push(new _0x3472b0().fromJSON(_0x39c091));
            }
            return this;
          }
        }
        var _0x18f2a1 = 9;
        const _0x20e38b = function (_0x172b50, _0x1cd60a, _0x24049e = 2) {
          var _0x17dd18 = _0x1cd60a && _0x1cd60a.length;
          var _0x39c37a = _0x17dd18 ? _0x1cd60a[0] * _0x24049e : _0x172b50.length;
          let _0x379a51 = _0x4e1a92(_0x172b50, 0, _0x39c37a, _0x24049e, true);
          var _0x573165 = [];
          if (!_0x379a51 || _0x379a51.next === _0x379a51.prev) {
            return _0x573165;
          }
          let _0x6d754d;
          let _0x40f1d4;
          let _0x296d6a;
          let _0x13315c;
          let _0x5c3d45;
          let _0x544235;
          let _0x14926b;
          if (_0x17dd18) {
            _0x379a51 = function (_0x4a7425, _0x487e55, _0x2d08c9, _0x13137) {
              const _0x49447e = [];
              let _0x121bfa;
              let _0x1dbcbd;
              let _0xde379a;
              let _0x33dfaf;
              let _0x97b6b8;
              _0x121bfa = 0;
              _0x1dbcbd = _0x487e55.length;
              for (; _0x121bfa < _0x1dbcbd; _0x121bfa++) {
                _0xde379a = _0x487e55[_0x121bfa] * _0x13137;
                _0x33dfaf = _0x121bfa < _0x1dbcbd - 1 ? _0x487e55[_0x121bfa + 1] * _0x13137 : _0x4a7425.length;
                _0x97b6b8 = _0x4e1a92(_0x4a7425, _0xde379a, _0x33dfaf, _0x13137, false);
                if (_0x97b6b8 === _0x97b6b8.next) {
                  _0x97b6b8.steiner = true;
                }
                _0x49447e.push(function (_0x344349) {
                  let _0x317214 = _0x344349;
                  let _0x40552b = _0x344349;
                  for (; (_0x317214.x < _0x40552b.x || _0x317214.x === _0x40552b.x && _0x317214.y < _0x40552b.y) && (_0x40552b = _0x317214), _0x317214 = _0x317214.next, _0x317214 !== _0x344349;);
                  return _0x40552b;
                }(_0x97b6b8));
              }
              _0x49447e.sort(_0x5317ad);
              _0x121bfa = 0;
              for (; _0x121bfa < _0x49447e.length; _0x121bfa++) {
                (function (_0x2428be, _0x150474) {
                  if (_0x150474 = function (_0x3eee69, _0x55092e) {
                    let _0x159057 = _0x55092e;
                    var _0xb5edb8 = _0x3eee69.x;
                    var _0x561c2f = _0x3eee69.y;
                    let _0x5fc5c8;
                    let _0x2dd57e = -Infinity;
                    do {
                      if (_0x561c2f <= _0x159057.y && _0x561c2f >= _0x159057.next.y && _0x159057.next.y !== _0x159057.y) {
                        var _0x2c662d = _0x159057.x + (_0x561c2f - _0x159057.y) * (_0x159057.next.x - _0x159057.x) / (_0x159057.next.y - _0x159057.y);
                        if (_0x2c662d <= _0xb5edb8 && _0x2c662d > _0x2dd57e) {
                          if ((_0x2dd57e = _0x2c662d) === _0xb5edb8) {
                            if (_0x561c2f === _0x159057.y) {
                              return _0x159057;
                            }
                            if (_0x561c2f === _0x159057.next.y) {
                              return _0x159057.next;
                            }
                          }
                          _0x5fc5c8 = _0x159057.x < _0x159057.next.x ? _0x159057 : _0x159057.next;
                        }
                      }
                    } while ((_0x159057 = _0x159057.next, _0x159057 !== _0x55092e));
                    if (!_0x5fc5c8) {
                      return null;
                    }
                    if (_0xb5edb8 === _0x2dd57e) {
                      return _0x5fc5c8;
                    }
                    var _0x5261ed = _0x5fc5c8;
                    var _0x2f5b20 = _0x5fc5c8.x;
                    var _0x2702ed = _0x5fc5c8.y;
                    let _0x22f008;
                    let _0x56235b = Infinity;
                    for (_0x159057 = _0x5fc5c8; _0xb5edb8 >= _0x159057.x && _0x159057.x >= _0x2f5b20 && _0xb5edb8 !== _0x159057.x && _0x15c82a(_0x561c2f < _0x2702ed ? _0xb5edb8 : _0x2dd57e, _0x561c2f, _0x2f5b20, _0x2702ed, _0x561c2f < _0x2702ed ? _0x2dd57e : _0xb5edb8, _0x561c2f, _0x159057.x, _0x159057.y) && (_0x22f008 = Math.abs(_0x561c2f - _0x159057.y) / (_0xb5edb8 - _0x159057.x), _0x2f947a(_0x159057, _0x3eee69) && (_0x22f008 < _0x56235b || _0x22f008 === _0x56235b && (_0x159057.x > _0x5fc5c8.x || _0x159057.x === _0x5fc5c8.x && function (_0x35f4e3, _0x2c472d) {
                      return _0x4578a3(_0x35f4e3.prev, _0x35f4e3, _0x2c472d.prev) < 0 && _0x4578a3(_0x2c472d.next, _0x35f4e3, _0x35f4e3.next) < 0;
                    }(_0x5fc5c8, _0x159057))) && (_0x5fc5c8 = _0x159057, _0x56235b = _0x22f008)), _0x159057 = _0x159057.next, _0x159057 !== _0x5261ed;);
                    return _0x5fc5c8;
                  }(_0x2428be, _0x150474)) {
                    _0x2428be = _0x1c83f5(_0x150474, _0x2428be);
                    _0x337f82(_0x150474, _0x150474.next);
                    _0x337f82(_0x2428be, _0x2428be.next);
                  }
                })(_0x49447e[_0x121bfa], _0x2d08c9);
                _0x2d08c9 = _0x337f82(_0x2d08c9, _0x2d08c9.next);
              }
              return _0x2d08c9;
            }(_0x172b50, _0x1cd60a, _0x379a51, _0x24049e);
          }
          if (_0x172b50.length > _0x24049e * 80) {
            _0x6d754d = _0x296d6a = _0x172b50[0];
            _0x40f1d4 = _0x13315c = _0x172b50[1];
            for (let _0x1b2f51 = _0x24049e; _0x1b2f51 < _0x39c37a; _0x1b2f51 += _0x24049e) {
              _0x5c3d45 = _0x172b50[_0x1b2f51];
              _0x544235 = _0x172b50[_0x1b2f51 + 1];
              if (_0x5c3d45 < _0x6d754d) {
                _0x6d754d = _0x5c3d45;
              }
              if (_0x544235 < _0x40f1d4) {
                _0x40f1d4 = _0x544235;
              }
              if (_0x5c3d45 > _0x296d6a) {
                _0x296d6a = _0x5c3d45;
              }
              if (_0x544235 > _0x13315c) {
                _0x13315c = _0x544235;
              }
            }
            _0x14926b = Math.max(_0x296d6a - _0x6d754d, _0x13315c - _0x40f1d4);
            _0x14926b = _0x14926b !== 0 ? 1 / _0x14926b : 0;
          }
          _0x4c6632(_0x379a51, _0x573165, _0x24049e, _0x6d754d, _0x40f1d4, _0x14926b);
          return _0x573165;
        };
        _0x18f2a1 = 6;
        function _0x4e1a92(_0x3f1d45, _0xee78b7, _0x22427e, _0x4373d7, _0x296054) {
          let _0x8551df;
          let _0x2959e5;
          if (_0x296054 === function (_0x5bb579, _0x3d0cc4, _0x2d4e8c, _0x10872f) {
            let _0xde901d = 0;
            for (let _0x269cd6 = _0x3d0cc4, _0x48d315 = _0x2d4e8c - _0x10872f; _0x269cd6 < _0x2d4e8c; _0x269cd6 += _0x10872f) {
              _0xde901d += (_0x5bb579[_0x48d315] - _0x5bb579[_0x269cd6]) * (_0x5bb579[_0x269cd6 + 1] + _0x5bb579[_0x48d315 + 1]);
              _0x48d315 = _0x269cd6;
            }
            return _0xde901d;
          }(_0x3f1d45, _0xee78b7, _0x22427e, _0x4373d7) > 0) {
            for (_0x8551df = _0xee78b7; _0x8551df < _0x22427e; _0x8551df += _0x4373d7) {
              _0x2959e5 = _0x3d0b1a(_0x8551df, _0x3f1d45[_0x8551df], _0x3f1d45[_0x8551df + 1], _0x2959e5);
            }
          } else {
            for (_0x8551df = _0x22427e - _0x4373d7; _0x8551df >= _0xee78b7; _0x8551df -= _0x4373d7) {
              _0x2959e5 = _0x3d0b1a(_0x8551df, _0x3f1d45[_0x8551df], _0x3f1d45[_0x8551df + 1], _0x2959e5);
            }
          }
          if (_0x2959e5 && _0x58a462(_0x2959e5, _0x2959e5.next)) {
            _0x69339c(_0x2959e5);
            _0x2959e5 = _0x2959e5.next;
          }
          return _0x2959e5;
        }
        function _0x337f82(_0x5ae246, _0x5e770a) {
          if (!_0x5ae246) {
            return _0x5ae246;
          }
          _0x5e770a = _0x5e770a || _0x5ae246;
          let _0x7956fa;
          let _0x47ebc9 = _0x5ae246;
          do {
            _0x7956fa = false;
            if (_0x47ebc9.steiner || !_0x58a462(_0x47ebc9, _0x47ebc9.next) && _0x4578a3(_0x47ebc9.prev, _0x47ebc9, _0x47ebc9.next) !== 0) {
              _0x47ebc9 = _0x47ebc9.next;
            } else {
              _0x69339c(_0x47ebc9);
              _0x47ebc9 = _0x5e770a = _0x47ebc9.prev;
              if (_0x47ebc9 === _0x47ebc9.next) {
                break;
              }
              _0x7956fa = true;
            }
          } while (_0x7956fa || _0x47ebc9 !== _0x5e770a);
          return _0x5e770a;
        }
        function _0x4c6632(_0x481c75, _0x748f5c, _0x251769, _0x1864ea, _0x55d570, _0x1c44fc, _0x208d5a) {
          if (_0x481c75) {
            if (!_0x208d5a && _0x1c44fc) {
              (function (_0x3bdab8, _0x40d187, _0x34e7c1, _0x985079) {
                let _0x389be1 = _0x3bdab8;
                for (; _0x389be1.z === null && (_0x389be1.z = _0x13f2be(_0x389be1.x, _0x389be1.y, _0x40d187, _0x34e7c1, _0x985079)), _0x389be1.prevZ = _0x389be1.prev, _0x389be1.nextZ = _0x389be1.next, _0x389be1 = _0x389be1.next, _0x389be1 !== _0x3bdab8;);
                _0x389be1.prevZ.nextZ = null;
                _0x389be1.prevZ = null;
                (function (_0x4a0a4d) {
                  let _0x56fe5e;
                  let _0x5f36d4;
                  let _0x2f3f36;
                  let _0x16f9bf;
                  let _0x52ca95;
                  let _0x25fdf3;
                  let _0x35e72f;
                  let _0xc6351e;
                  let _0x2acf24 = 1;
                  do {
                    _0x5f36d4 = _0x4a0a4d;
                    _0x4a0a4d = null;
                    _0x52ca95 = null;
                    _0x25fdf3 = 0;
                    for (; _0x5f36d4;) {
                      _0x25fdf3++;
                      _0x2f3f36 = _0x5f36d4;
                      _0x35e72f = 0;
                      _0x56fe5e = 0;
                      for (; _0x56fe5e < _0x2acf24 && (_0x35e72f++, _0x2f3f36 = _0x2f3f36.nextZ, _0x2f3f36); _0x56fe5e++);
                      for (_0xc6351e = _0x2acf24; _0x35e72f > 0 || _0xc6351e > 0 && _0x2f3f36;) {
                        if (_0x35e72f !== 0 && (_0xc6351e === 0 || !_0x2f3f36 || _0x5f36d4.z <= _0x2f3f36.z)) {
                          _0x16f9bf = _0x5f36d4;
                          _0x5f36d4 = _0x5f36d4.nextZ;
                          _0x35e72f--;
                        } else {
                          _0x16f9bf = _0x2f3f36;
                          _0x2f3f36 = _0x2f3f36.nextZ;
                          _0xc6351e--;
                        }
                        if (_0x52ca95) {
                          _0x52ca95.nextZ = _0x16f9bf;
                        } else {
                          _0x4a0a4d = _0x16f9bf;
                        }
                        _0x16f9bf.prevZ = _0x52ca95;
                        _0x52ca95 = _0x16f9bf;
                      }
                      _0x5f36d4 = _0x2f3f36;
                    }
                  } while ((_0x52ca95.nextZ = null, _0x2acf24 *= 2, _0x25fdf3 > 1));
                })(_0x389be1);
              })(_0x481c75, _0x1864ea, _0x55d570, _0x1c44fc);
            }
            let _0x7d01e;
            let _0x47f248;
            let _0x242222 = _0x481c75;
            for (; _0x481c75.prev !== _0x481c75.next;) {
              _0x7d01e = _0x481c75.prev;
              _0x47f248 = _0x481c75.next;
              if (_0x1c44fc ? function (_0x22c841, _0xcde780, _0x2a1386, _0x5ccc6d) {
                var _0x2f45a7 = _0x22c841.prev;
                var _0x3208fb = _0x22c841;
                var _0x2970f1 = _0x22c841.next;
                if (_0x4578a3(_0x2f45a7, _0x3208fb, _0x2970f1) >= 0) {
                  return false;
                }
                var _0x24f0c6 = (_0x2f45a7.x < _0x3208fb.x ? _0x2f45a7.x < _0x2970f1.x ? _0x2f45a7 : _0x2970f1 : _0x3208fb.x < _0x2970f1.x ? _0x3208fb : _0x2970f1).x;
                var _0x1f6251 = (_0x2f45a7.y < _0x3208fb.y ? _0x2f45a7.y < _0x2970f1.y ? _0x2f45a7 : _0x2970f1 : _0x3208fb.y < _0x2970f1.y ? _0x3208fb : _0x2970f1).y;
                var _0x4604fe = (_0x2f45a7.x > _0x3208fb.x ? _0x2f45a7.x > _0x2970f1.x ? _0x2f45a7 : _0x2970f1 : _0x3208fb.x > _0x2970f1.x ? _0x3208fb : _0x2970f1).x;
                var _0x44b843 = (_0x2f45a7.y > _0x3208fb.y ? _0x2f45a7.y > _0x2970f1.y ? _0x2f45a7 : _0x2970f1 : _0x3208fb.y > _0x2970f1.y ? _0x3208fb : _0x2970f1).y;
                var _0x58ae80 = _0x13f2be(_0x24f0c6, _0x1f6251, _0xcde780, _0x2a1386, _0x5ccc6d);
                var _0x14bb1a = _0x13f2be(_0x4604fe, _0x44b843, _0xcde780, _0x2a1386, _0x5ccc6d);
                let _0x1b2250 = _0x22c841.prevZ;
                let _0x4acef8 = _0x22c841.nextZ;
                for (; _0x1b2250 && _0x1b2250.z >= _0x58ae80 && _0x4acef8 && _0x4acef8.z <= _0x14bb1a;) {
                  if (_0x1b2250 !== _0x22c841.prev && _0x1b2250 !== _0x22c841.next && _0x15c82a(_0x2f45a7.x, _0x2f45a7.y, _0x3208fb.x, _0x3208fb.y, _0x2970f1.x, _0x2970f1.y, _0x1b2250.x, _0x1b2250.y) && _0x4578a3(_0x1b2250.prev, _0x1b2250, _0x1b2250.next) >= 0) {
                    return false;
                  }
                  _0x1b2250 = _0x1b2250.prevZ;
                  if (_0x4acef8 !== _0x22c841.prev && _0x4acef8 !== _0x22c841.next && _0x15c82a(_0x2f45a7.x, _0x2f45a7.y, _0x3208fb.x, _0x3208fb.y, _0x2970f1.x, _0x2970f1.y, _0x4acef8.x, _0x4acef8.y) && _0x4578a3(_0x4acef8.prev, _0x4acef8, _0x4acef8.next) >= 0) {
                    return false;
                  }
                  _0x4acef8 = _0x4acef8.nextZ;
                }
                for (; _0x1b2250 && _0x1b2250.z >= _0x58ae80;) {
                  if (_0x1b2250 !== _0x22c841.prev && _0x1b2250 !== _0x22c841.next && _0x15c82a(_0x2f45a7.x, _0x2f45a7.y, _0x3208fb.x, _0x3208fb.y, _0x2970f1.x, _0x2970f1.y, _0x1b2250.x, _0x1b2250.y) && _0x4578a3(_0x1b2250.prev, _0x1b2250, _0x1b2250.next) >= 0) {
                    return false;
                  }
                  _0x1b2250 = _0x1b2250.prevZ;
                }
                for (; _0x4acef8 && _0x4acef8.z <= _0x14bb1a;) {
                  if (_0x4acef8 !== _0x22c841.prev && _0x4acef8 !== _0x22c841.next && _0x15c82a(_0x2f45a7.x, _0x2f45a7.y, _0x3208fb.x, _0x3208fb.y, _0x2970f1.x, _0x2970f1.y, _0x4acef8.x, _0x4acef8.y) && _0x4578a3(_0x4acef8.prev, _0x4acef8, _0x4acef8.next) >= 0) {
                    return false;
                  }
                  _0x4acef8 = _0x4acef8.nextZ;
                }
                return true;
              }(_0x481c75, _0x1864ea, _0x55d570, _0x1c44fc) : function (_0x15bcbd) {
                var _0x2842c5 = _0x15bcbd.prev;
                var _0x397a88 = _0x15bcbd;
                var _0x4b03cf = _0x15bcbd.next;
                if (_0x4578a3(_0x2842c5, _0x397a88, _0x4b03cf) >= 0) {
                  return false;
                }
                let _0x224da1 = _0x15bcbd.next.next;
                for (; _0x224da1 !== _0x15bcbd.prev;) {
                  if (_0x15c82a(_0x2842c5.x, _0x2842c5.y, _0x397a88.x, _0x397a88.y, _0x4b03cf.x, _0x4b03cf.y, _0x224da1.x, _0x224da1.y) && _0x4578a3(_0x224da1.prev, _0x224da1, _0x224da1.next) >= 0) {
                    return false;
                  }
                  _0x224da1 = _0x224da1.next;
                }
                return true;
              }(_0x481c75)) {
                _0x748f5c.push(_0x7d01e.i / _0x251769);
                _0x748f5c.push(_0x481c75.i / _0x251769);
                _0x748f5c.push(_0x47f248.i / _0x251769);
                _0x69339c(_0x481c75);
                _0x481c75 = _0x47f248.next;
                _0x242222 = _0x47f248.next;
              } else if ((_0x481c75 = _0x47f248) === _0x242222) {
                if (_0x208d5a) {
                  if (_0x208d5a === 1) {
                    _0x4c6632(_0x481c75 = function (_0x142c65, _0x47a3bc, _0x3f1639) {
                      var _0x148ccd;
                      let _0x13d02a = _0x142c65;
                      _0x148ccd = 4;
                      do {
                        var _0x537ef2 = _0x13d02a.prev;
                        var _0x36702f = _0x13d02a.next.next;
                        if (!_0x58a462(_0x537ef2, _0x36702f) && _0x536e53(_0x537ef2, _0x13d02a, _0x13d02a.next, _0x36702f) && _0x2f947a(_0x537ef2, _0x36702f) && _0x2f947a(_0x36702f, _0x537ef2)) {
                          _0x47a3bc.push(_0x537ef2.i / _0x3f1639);
                          _0x47a3bc.push(_0x13d02a.i / _0x3f1639);
                          _0x47a3bc.push(_0x36702f.i / _0x3f1639);
                          _0x69339c(_0x13d02a);
                          _0x69339c(_0x13d02a.next);
                          _0x13d02a = _0x142c65 = _0x36702f;
                        }
                        _0x13d02a = _0x13d02a.next;
                      } while (_0x13d02a !== _0x142c65);
                      return _0x337f82(_0x13d02a);
                    }(_0x337f82(_0x481c75), _0x748f5c, _0x251769), _0x748f5c, _0x251769, _0x1864ea, _0x55d570, _0x1c44fc, 2);
                  } else if (_0x208d5a === 2) {
                    (function (_0x13de44, _0x3da0a0, _0x38de1f, _0x403edb, _0x1bdb3d, _0x3fb213) {
                      let _0x19debc = _0x13de44;
                      do {
                        let _0x4a33c8 = _0x19debc.next.next;
                        for (; _0x4a33c8 !== _0x19debc.prev;) {
                          if (_0x19debc.i !== _0x4a33c8.i && function (_0xb74319, _0x3526f5) {
                            return _0xb74319.next.i !== _0x3526f5.i && _0xb74319.prev.i !== _0x3526f5.i && !function (_0x4cb358, _0x59410d) {
                              let _0x362f76 = _0x4cb358;
                              do {
                                if (_0x362f76.i !== _0x4cb358.i && _0x362f76.next.i !== _0x4cb358.i && _0x362f76.i !== _0x59410d.i && _0x362f76.next.i !== _0x59410d.i && _0x536e53(_0x362f76, _0x362f76.next, _0x4cb358, _0x59410d)) {
                                  return true;
                                }
                              } while ((_0x362f76 = _0x362f76.next, _0x362f76 !== _0x4cb358));
                              return false;
                            }(_0xb74319, _0x3526f5) && (_0x2f947a(_0xb74319, _0x3526f5) && _0x2f947a(_0x3526f5, _0xb74319) && function (_0xcf0f59, _0x8416fe) {
                              let _0x24e512 = _0xcf0f59;
                              let _0x2ac172 = false;
                              for (var _0x1dfbe8 = (_0xcf0f59.x + _0x8416fe.x) / 2, _0x501ead = (_0xcf0f59.y + _0x8416fe.y) / 2; _0x24e512.y > _0x501ead != _0x24e512.next.y > _0x501ead && _0x24e512.next.y !== _0x24e512.y && _0x1dfbe8 < (_0x24e512.next.x - _0x24e512.x) * (_0x501ead - _0x24e512.y) / (_0x24e512.next.y - _0x24e512.y) + _0x24e512.x && (_0x2ac172 = !_0x2ac172), _0x24e512 = _0x24e512.next, _0x24e512 !== _0xcf0f59;);
                              return _0x2ac172;
                            }(_0xb74319, _0x3526f5) && (_0x4578a3(_0xb74319.prev, _0xb74319, _0x3526f5.prev) || _0x4578a3(_0xb74319, _0x3526f5.prev, _0x3526f5)) || _0x58a462(_0xb74319, _0x3526f5) && _0x4578a3(_0xb74319.prev, _0xb74319, _0xb74319.next) > 0 && _0x4578a3(_0x3526f5.prev, _0x3526f5, _0x3526f5.next) > 0);
                          }(_0x19debc, _0x4a33c8)) {
                            var _0x27e254 = 5;
                            var _0x3d5131 = _0x1c83f5(_0x19debc, _0x4a33c8);
                            _0x27e254 = 9;
                            _0x19debc = _0x337f82(_0x19debc, _0x19debc.next);
                            _0x3d5131 = _0x337f82(_0x3d5131, _0x3d5131.next);
                            _0x4c6632(_0x19debc, _0x3da0a0, _0x38de1f, _0x403edb, _0x1bdb3d, _0x3fb213);
                            return _0x4c6632(_0x3d5131, _0x3da0a0, _0x38de1f, _0x403edb, _0x1bdb3d, _0x3fb213);
                          }
                          _0x4a33c8 = _0x4a33c8.next;
                        }
                      } while ((_0x19debc = _0x19debc.next, _0x19debc !== _0x13de44));
                    })(_0x481c75, _0x748f5c, _0x251769, _0x1864ea, _0x55d570, _0x1c44fc);
                  }
                } else {
                  _0x4c6632(_0x337f82(_0x481c75), _0x748f5c, _0x251769, _0x1864ea, _0x55d570, _0x1c44fc, 1);
                }
                break;
              }
            }
          }
        }
        function _0x5317ad(_0x576480, _0x702dfe) {
          return _0x576480.x - _0x702dfe.x;
        }
        function _0x13f2be(_0x1baa56, _0x46bfc9, _0x33b27c, _0x3fc017, _0x1bfa6a) {
          return (_0x1baa56 = ((_0x1baa56 = ((_0x1baa56 = ((_0x1baa56 = ((_0x1baa56 = (_0x1baa56 - _0x33b27c) * 32767 * _0x1bfa6a) | _0x1baa56 << 8) & 16711935) | _0x1baa56 << 4) & 252645135) | _0x1baa56 << 2) & 858993459) | _0x1baa56 << 1) & 1431655765) | (_0x46bfc9 = ((_0x46bfc9 = ((_0x46bfc9 = ((_0x46bfc9 = ((_0x46bfc9 = (_0x46bfc9 - _0x3fc017) * 32767 * _0x1bfa6a) | _0x46bfc9 << 8) & 16711935) | _0x46bfc9 << 4) & 252645135) | _0x46bfc9 << 2) & 858993459) | _0x46bfc9 << 1) & 1431655765) << 1;
        }
        function _0x15c82a(_0x5eb36a, _0x500604, _0x14cebd, _0x4c1767, _0x296236, _0x99057c, _0x1c97e2, _0x4f25c) {
          return (_0x296236 - _0x1c97e2) * (_0x500604 - _0x4f25c) - (_0x5eb36a - _0x1c97e2) * (_0x99057c - _0x4f25c) >= 0 && (_0x5eb36a - _0x1c97e2) * (_0x4c1767 - _0x4f25c) - (_0x14cebd - _0x1c97e2) * (_0x500604 - _0x4f25c) >= 0 && (_0x14cebd - _0x1c97e2) * (_0x99057c - _0x4f25c) - (_0x296236 - _0x1c97e2) * (_0x4c1767 - _0x4f25c) >= 0;
        }
        function _0x4578a3(_0x4735b7, _0x5eeaa8, _0xae8599) {
          return (_0x5eeaa8.y - _0x4735b7.y) * (_0xae8599.x - _0x5eeaa8.x) - (_0x5eeaa8.x - _0x4735b7.x) * (_0xae8599.y - _0x5eeaa8.y);
        }
        function _0x58a462(_0x2f6e1d, _0xb137c9) {
          return _0x2f6e1d.x === _0xb137c9.x && _0x2f6e1d.y === _0xb137c9.y;
        }
        function _0x536e53(_0x41b641, _0x1b0bc1, _0x8c7b20, _0x4b7c10) {
          var _0x1c612c = _0x2da20e(_0x4578a3(_0x41b641, _0x1b0bc1, _0x8c7b20));
          var _0xfefbd1 = _0x2da20e(_0x4578a3(_0x41b641, _0x1b0bc1, _0x4b7c10));
          var _0xcad1b5 = _0x2da20e(_0x4578a3(_0x8c7b20, _0x4b7c10, _0x41b641));
          var _0x4f0f66 = _0x2da20e(_0x4578a3(_0x8c7b20, _0x4b7c10, _0x1b0bc1));
          return _0x1c612c !== _0xfefbd1 && _0xcad1b5 !== _0x4f0f66 || _0x1c612c === 0 && _0x4a9e26(_0x41b641, _0x8c7b20, _0x1b0bc1) || _0xfefbd1 === 0 && _0x4a9e26(_0x41b641, _0x4b7c10, _0x1b0bc1) || _0xcad1b5 === 0 && _0x4a9e26(_0x8c7b20, _0x41b641, _0x4b7c10) || !(_0x4f0f66 !== 0 || !_0x4a9e26(_0x8c7b20, _0x1b0bc1, _0x4b7c10));
        }
        function _0x4a9e26(_0x3f723e, _0x554e03, _0x47f91d) {
          return _0x554e03.x <= Math.max(_0x3f723e.x, _0x47f91d.x) && _0x554e03.x >= Math.min(_0x3f723e.x, _0x47f91d.x) && _0x554e03.y <= Math.max(_0x3f723e.y, _0x47f91d.y) && _0x554e03.y >= Math.min(_0x3f723e.y, _0x47f91d.y);
        }
        function _0x2da20e(_0x67cebb) {
          if (_0x67cebb > 0) {
            return 1;
          } else if (_0x67cebb < 0) {
            return -1;
          } else {
            return 0;
          }
        }
        function _0x2f947a(_0xcec9f0, _0x2c7083) {
          if (_0x4578a3(_0xcec9f0.prev, _0xcec9f0, _0xcec9f0.next) < 0) {
            return _0x4578a3(_0xcec9f0, _0x2c7083, _0xcec9f0.next) >= 0 && _0x4578a3(_0xcec9f0, _0xcec9f0.prev, _0x2c7083) >= 0;
          } else {
            return _0x4578a3(_0xcec9f0, _0x2c7083, _0xcec9f0.prev) < 0 || _0x4578a3(_0xcec9f0, _0xcec9f0.next, _0x2c7083) < 0;
          }
        }
        function _0x1c83f5(_0x1d6087, _0x489713) {
          const _0x5f0362 = new _0xee9d14(_0x1d6087.i, _0x1d6087.x, _0x1d6087.y);
          const _0x11f376 = new _0xee9d14(_0x489713.i, _0x489713.x, _0x489713.y);
          const _0x4a0818 = _0x1d6087.next;
          const _0x561a85 = _0x489713.prev;
          (_0x1d6087.next = _0x489713).prev = _0x1d6087;
          _0x5f0362.next = _0x4a0818;
          _0x4a0818.prev = _0x5f0362;
          _0x11f376.next = _0x5f0362;
          _0x5f0362.prev = _0x11f376;
          _0x561a85.next = _0x11f376;
          _0x11f376.prev = _0x561a85;
          return _0x11f376;
        }
        function _0x3d0b1a(_0x2cc7fd, _0x115e25, _0x13e52b, _0x5b936e) {
          var _0x82400d;
          const _0x4a3b69 = new _0xee9d14(_0x2cc7fd, _0x115e25, _0x13e52b);
          _0x82400d = "coob";
          if (_0x5b936e) {
            _0x4a3b69.next = _0x5b936e.next;
            (_0x4a3b69.prev = _0x5b936e).next.prev = _0x4a3b69;
            _0x5b936e.next = _0x4a3b69;
          } else {
            _0x4a3b69.prev = _0x4a3b69;
            _0x4a3b69.next = _0x4a3b69;
          }
          return _0x4a3b69;
        }
        function _0x69339c(_0x20adaf) {
          _0x20adaf.next.prev = _0x20adaf.prev;
          _0x20adaf.prev.next = _0x20adaf.next;
          if (_0x20adaf.prevZ) {
            _0x20adaf.prevZ.nextZ = _0x20adaf.nextZ;
          }
          if (_0x20adaf.nextZ) {
            _0x20adaf.nextZ.prevZ = _0x20adaf.prevZ;
          }
        }
        function _0xee9d14(_0x11dd67, _0x4bc399, _0x46ad89) {
          this.i = _0x11dd67;
          this.x = _0x4bc399;
          this.y = _0x46ad89;
          this.prev = null;
          this.next = null;
          this.z = null;
          this.prevZ = null;
          this.nextZ = null;
          this.steiner = false;
        }
        class _0x513d24 {
          static area(_0x12461f) {
            var _0x2d811e = 18;
            var _0x131d0f = _0x12461f.length;
            _0x2d811e = 4;
            var _0x16c74f;
            let _0x16a734 = 0;
            _0x16c74f = 7;
            for (let _0x5d7f3e = _0x131d0f - 1, _0x3dc33b = 0; _0x3dc33b < _0x131d0f; _0x5d7f3e = _0x3dc33b++) {
              _0x16a734 += _0x12461f[_0x5d7f3e].x * _0x12461f[_0x3dc33b].y - _0x12461f[_0x3dc33b].x * _0x12461f[_0x5d7f3e].y;
            }
            return _0x16a734 * 0.5;
          }
          static isClockWise(_0x51b1ad) {
            return _0x513d24.area(_0x51b1ad) < 0;
          }
          static triangulateShape(_0xa31c16, _0x5b0c35) {
            var _0x1ab747 = [];
            const _0x51f56b = [];
            const _0x44aa28 = [];
            _0x53e486(_0xa31c16);
            _0x25553d(_0x1ab747, _0xa31c16);
            let _0x37063b = _0xa31c16.length;
            _0x5b0c35.forEach(_0x53e486);
            for (let _0x25022f = 0; _0x25022f < _0x5b0c35.length; _0x25022f++) {
              _0x51f56b.push(_0x37063b);
              _0x37063b += _0x5b0c35[_0x25022f].length;
              _0x25553d(_0x1ab747, _0x5b0c35[_0x25022f]);
            }
            var _0x366dad = 4;
            const _0x1bc242 = _0x20e38b(_0x1ab747, _0x51f56b);
            _0x366dad = "lmka";
            for (let _0x185a3f = 0; _0x185a3f < _0x1bc242.length; _0x185a3f += 3) {
              _0x44aa28.push(_0x1bc242.slice(_0x185a3f, _0x185a3f + 3));
            }
            return _0x44aa28;
          }
        }
        function _0x53e486(_0x3f0704) {
          var _0x4bbe6b;
          var _0x5947b1 = _0x3f0704.length;
          _0x4bbe6b = 3;
          if (_0x5947b1 > 2 && _0x3f0704[_0x5947b1 - 1].equals(_0x3f0704[0])) {
            _0x3f0704.pop();
          }
        }
        function _0x25553d(_0x2f30de, _0x4bb38d) {
          for (let _0x31ccf3 = 0; _0x31ccf3 < _0x4bb38d.length; _0x31ccf3++) {
            _0x2f30de.push(_0x4bb38d[_0x31ccf3].x);
            _0x2f30de.push(_0x4bb38d[_0x31ccf3].y);
          }
        }
        class _0x2168e0 extends _0x3f374d {
          constructor(_0x223841 = new _0xe5830f([new _0x25f874(0.5, 0.5), new _0x25f874(-0.5, 0.5), new _0x25f874(-0.5, -0.5), new _0x25f874(0.5, -0.5)]), _0x39359a = {}) {
            super();
            this.type = "ExtrudeGeometry";
            this.parameters = {
              shapes: _0x223841,
              options: _0x39359a
            };
            _0x223841 = Array.isArray(_0x223841) ? _0x223841 : [_0x223841];
            const _0x14e2ae = this;
            const _0x1937d3 = [];
            const _0x319888 = [];
            for (let _0x194a0f = 0, _0x144565 = _0x223841.length; _0x194a0f < _0x144565; _0x194a0f++) {
              (function (_0x5d2856) {
                const _0x2d4248 = [];
                const _0x33208c = _0x39359a.curveSegments !== undefined ? _0x39359a.curveSegments : 12;
                const _0x4f7380 = _0x39359a.steps !== undefined ? _0x39359a.steps : 1;
                let _0x3e26c8 = _0x39359a.depth !== undefined ? _0x39359a.depth : 1;
                let _0x4a7bab = _0x39359a.bevelEnabled === undefined || _0x39359a.bevelEnabled;
                let _0x37b4ac = _0x39359a.bevelThickness !== undefined ? _0x39359a.bevelThickness : 0.2;
                let _0x208ff1 = _0x39359a.bevelSize !== undefined ? _0x39359a.bevelSize : _0x37b4ac - 0.1;
                let _0x14f431 = _0x39359a.bevelOffset !== undefined ? _0x39359a.bevelOffset : 0;
                let _0x2ab888 = _0x39359a.bevelSegments !== undefined ? _0x39359a.bevelSegments : 3;
                const _0x211294 = _0x39359a.extrudePath;
                const _0x3cc625 = _0x39359a.UVGenerator !== undefined ? _0x39359a.UVGenerator : _0x348313;
                if (_0x39359a.amount !== undefined) {
                  _0x3e26c8 = _0x39359a.amount;
                }
                let _0x342ded;
                let _0x1525ad;
                let _0x52b680;
                let _0x219411;
                let _0x33d878;
                let _0x607257 = false;
                if (_0x211294) {
                  _0x342ded = _0x211294.getSpacedPoints(_0x4f7380);
                  _0x607257 = true;
                  _0x4a7bab = false;
                  _0x1525ad = _0x211294.computeFrenetFrames(_0x4f7380, false);
                  _0x52b680 = new _0x1d20ef();
                  _0x219411 = new _0x1d20ef();
                  _0x33d878 = new _0x1d20ef();
                }
                if (!_0x4a7bab) {
                  _0x2ab888 = 0;
                  _0x37b4ac = 0;
                  _0x208ff1 = 0;
                  _0x14f431 = 0;
                }
                let _0x586fdf = (_0x5d2856 = _0x5d2856.extractPoints(_0x33208c)).shape;
                const _0x2c42d5 = _0x5d2856.holes;
                if (!_0x513d24.isClockWise(_0x586fdf)) {
                  _0x586fdf = _0x586fdf.reverse();
                  for (let _0x6fdfb3 = 0, _0x355cb7 = _0x2c42d5.length; _0x6fdfb3 < _0x355cb7; _0x6fdfb3++) {
                    var _0xd7f739;
                    const _0x49108e = _0x2c42d5[_0x6fdfb3];
                    _0xd7f739 = 12;
                    if (_0x513d24.isClockWise(_0x49108e)) {
                      _0x2c42d5[_0x6fdfb3] = _0x49108e.reverse();
                    }
                  }
                }
                const _0x36e137 = _0x513d24.triangulateShape(_0x586fdf, _0x2c42d5);
                const _0x547560 = _0x586fdf;
                for (let _0x4f0a36 = 0, _0x1c07e6 = _0x2c42d5.length; _0x4f0a36 < _0x1c07e6; _0x4f0a36++) {
                  var _0x28ed4d = _0x2c42d5[_0x4f0a36];
                  _0x586fdf = _0x586fdf.concat(_0x28ed4d);
                }
                function _0x54387e(_0x832089, _0x30db53, _0x5f0b6a) {
                  return _0x30db53.clone().multiplyScalar(_0x5f0b6a).add(_0x832089);
                }
                const _0x654dd8 = _0x586fdf.length;
                const _0x3d7527 = _0x36e137.length;
                function _0xcd4795(_0xff2fc5, _0x5c50db, _0x475aee) {
                  let _0x3d0f4c;
                  let _0x2ffa52;
                  let _0x4c46f7;
                  var _0x32eaf1 = _0xff2fc5.x - _0x5c50db.x;
                  var _0x1cdaf9 = _0xff2fc5.y - _0x5c50db.y;
                  var _0x331262 = _0x475aee.x - _0xff2fc5.x;
                  var _0x253b2f = _0x475aee.y - _0xff2fc5.y;
                  var _0x3bd949 = _0x32eaf1 * _0x32eaf1 + _0x1cdaf9 * _0x1cdaf9;
                  if (Math.abs(_0x32eaf1 * _0x253b2f - _0x1cdaf9 * _0x331262) > Number.EPSILON) {
                    var _0x25b5f6 = Math.sqrt(_0x3bd949);
                    var _0x1db1c7 = Math.sqrt(_0x331262 * _0x331262 + _0x253b2f * _0x253b2f);
                    var _0xf0f8ff = _0x5c50db.x - _0x1cdaf9 / _0x25b5f6;
                    _0x25b5f6 = _0x5c50db.y + _0x32eaf1 / _0x25b5f6;
                    _0x3d0f4c = _0xf0f8ff + _0x32eaf1 * (_0x1db1c7 = ((_0x475aee.x - _0x253b2f / _0x1db1c7 - _0xf0f8ff) * _0x253b2f - (_0x475aee.y + _0x331262 / _0x1db1c7 - _0x25b5f6) * _0x331262) / (_0x32eaf1 * _0x253b2f - _0x1cdaf9 * _0x331262)) - _0xff2fc5.x;
                    _0x2ffa52 = _0x25b5f6 + _0x1cdaf9 * _0x1db1c7 - _0xff2fc5.y;
                    if ((_0xff2fc5 = _0x3d0f4c * _0x3d0f4c + _0x2ffa52 * _0x2ffa52) <= 2) {
                      return new _0x25f874(_0x3d0f4c, _0x2ffa52);
                    }
                    _0x4c46f7 = Math.sqrt(_0xff2fc5 / 2);
                  } else {
                    var _0x4bed5e;
                    let _0x3fd3d7 = false;
                    _0x4bed5e = 11;
                    if (_0x32eaf1 > Number.EPSILON) {
                      if (_0x331262 > Number.EPSILON) {
                        _0x3fd3d7 = true;
                      }
                    } else if (_0x32eaf1 < -Number.EPSILON) {
                      if (_0x331262 < -Number.EPSILON) {
                        _0x3fd3d7 = true;
                      }
                    } else if (Math.sign(_0x1cdaf9) === Math.sign(_0x253b2f)) {
                      _0x3fd3d7 = true;
                    }
                    _0x4c46f7 = _0x3fd3d7 ? (_0x3d0f4c = -_0x1cdaf9, _0x2ffa52 = _0x32eaf1, Math.sqrt(_0x3bd949)) : (_0x3d0f4c = _0x32eaf1, _0x2ffa52 = _0x1cdaf9, Math.sqrt(_0x3bd949 / 2));
                  }
                  return new _0x25f874(_0x3d0f4c / _0x4c46f7, _0x2ffa52 / _0x4c46f7);
                }
                const _0x4a804a = [];
                for (let _0xb28e21 = 0, _0x375327 = _0x547560.length, _0x1d31cb = _0x375327 - 1, _0x16ac00 = _0xb28e21 + 1; _0xb28e21 < _0x375327; _0xb28e21++, _0x1d31cb++, _0x16ac00++) {
                  if (_0x1d31cb === _0x375327) {
                    _0x1d31cb = 0;
                  }
                  if (_0x16ac00 === _0x375327) {
                    _0x16ac00 = 0;
                  }
                  _0x4a804a[_0xb28e21] = _0xcd4795(_0x547560[_0xb28e21], _0x547560[_0x1d31cb], _0x547560[_0x16ac00]);
                }
                var _0x4d8a47 = 12;
                const _0x4760e0 = [];
                _0x4d8a47 = 7;
                let _0x1b7263;
                let _0x2d05ad = _0x4a804a.concat();
                for (let _0xe32f7f = 0, _0x155742 = _0x2c42d5.length; _0xe32f7f < _0x155742; _0xe32f7f++) {
                  var _0x154393 = 6;
                  var _0x4de8b0 = _0x2c42d5[_0xe32f7f];
                  _0x154393 = "ojfj";
                  _0x1b7263 = [];
                  for (let _0x3d5a3e = 0, _0x2a0e44 = _0x4de8b0.length, _0x5a3dc0 = _0x2a0e44 - 1, _0x3f8e5c = _0x3d5a3e + 1; _0x3d5a3e < _0x2a0e44; _0x3d5a3e++, _0x5a3dc0++, _0x3f8e5c++) {
                    if (_0x5a3dc0 === _0x2a0e44) {
                      _0x5a3dc0 = 0;
                    }
                    if (_0x3f8e5c === _0x2a0e44) {
                      _0x3f8e5c = 0;
                    }
                    _0x1b7263[_0x3d5a3e] = _0xcd4795(_0x4de8b0[_0x3d5a3e], _0x4de8b0[_0x5a3dc0], _0x4de8b0[_0x3f8e5c]);
                  }
                  _0x4760e0.push(_0x1b7263);
                  _0x2d05ad = _0x2d05ad.concat(_0x1b7263);
                }
                for (let _0x1cf819 = 0; _0x1cf819 < _0x2ab888; _0x1cf819++) {
                  var _0x1bdc19 = _0x1cf819 / _0x2ab888;
                  var _0x702a64 = _0x37b4ac * Math.cos(_0x1bdc19 * Math.PI / 2);
                  var _0x13f1cb;
                  const _0x1ae9df = _0x208ff1 * Math.sin(_0x1bdc19 * Math.PI / 2) + _0x14f431;
                  _0x13f1cb = 9;
                  for (let _0x349792 = 0, _0x18635b = _0x547560.length; _0x349792 < _0x18635b; _0x349792++) {
                    var _0x429087 = _0x54387e(_0x547560[_0x349792], _0x4a804a[_0x349792], _0x1ae9df);
                    _0x314a7f(_0x429087.x, _0x429087.y, -_0x702a64);
                  }
                  for (let _0x4a9cbf = 0, _0x3a03d5 = _0x2c42d5.length; _0x4a9cbf < _0x3a03d5; _0x4a9cbf++) {
                    var _0x3f408a = _0x2c42d5[_0x4a9cbf];
                    _0x1b7263 = _0x4760e0[_0x4a9cbf];
                    for (let _0x560479 = 0, _0x474972 = _0x3f408a.length; _0x560479 < _0x474972; _0x560479++) {
                      var _0x37879d = _0x54387e(_0x3f408a[_0x560479], _0x1b7263[_0x560479], _0x1ae9df);
                      _0x314a7f(_0x37879d.x, _0x37879d.y, -_0x702a64);
                    }
                  }
                }
                const _0x14d79e = _0x208ff1 + _0x14f431;
                for (let _0x342830 = 0; _0x342830 < _0x654dd8; _0x342830++) {
                  var _0x34938d = _0x4a7bab ? _0x54387e(_0x586fdf[_0x342830], _0x2d05ad[_0x342830], _0x14d79e) : _0x586fdf[_0x342830];
                  if (_0x607257) {
                    _0x219411.copy(_0x1525ad.normals[0]).multiplyScalar(_0x34938d.x);
                    _0x52b680.copy(_0x1525ad.binormals[0]).multiplyScalar(_0x34938d.y);
                    _0x33d878.copy(_0x342ded[0]).add(_0x219411).add(_0x52b680);
                    _0x314a7f(_0x33d878.x, _0x33d878.y, _0x33d878.z);
                  } else {
                    _0x314a7f(_0x34938d.x, _0x34938d.y, 0);
                  }
                }
                for (let _0x2c7619 = 1; _0x2c7619 <= _0x4f7380; _0x2c7619++) {
                  for (let _0x19e7fd = 0; _0x19e7fd < _0x654dd8; _0x19e7fd++) {
                    var _0x3c1216 = _0x4a7bab ? _0x54387e(_0x586fdf[_0x19e7fd], _0x2d05ad[_0x19e7fd], _0x14d79e) : _0x586fdf[_0x19e7fd];
                    if (_0x607257) {
                      _0x219411.copy(_0x1525ad.normals[_0x2c7619]).multiplyScalar(_0x3c1216.x);
                      _0x52b680.copy(_0x1525ad.binormals[_0x2c7619]).multiplyScalar(_0x3c1216.y);
                      _0x33d878.copy(_0x342ded[_0x2c7619]).add(_0x219411).add(_0x52b680);
                      _0x314a7f(_0x33d878.x, _0x33d878.y, _0x33d878.z);
                    } else {
                      _0x314a7f(_0x3c1216.x, _0x3c1216.y, _0x3e26c8 / _0x4f7380 * _0x2c7619);
                    }
                  }
                }
                for (let _0x5c86cf = _0x2ab888 - 1; _0x5c86cf >= 0; _0x5c86cf--) {
                  var _0x284bab = _0x5c86cf / _0x2ab888;
                  var _0xf73e1f = _0x37b4ac * Math.cos(_0x284bab * Math.PI / 2);
                  const _0x457d6d = _0x208ff1 * Math.sin(_0x284bab * Math.PI / 2) + _0x14f431;
                  for (let _0x18eeef = 0, _0x4bbdb0 = _0x547560.length; _0x18eeef < _0x4bbdb0; _0x18eeef++) {
                    var _0x51ebad = _0x54387e(_0x547560[_0x18eeef], _0x4a804a[_0x18eeef], _0x457d6d);
                    _0x314a7f(_0x51ebad.x, _0x51ebad.y, _0x3e26c8 + _0xf73e1f);
                  }
                  for (let _0x265bf4 = 0, _0x3c710c = _0x2c42d5.length; _0x265bf4 < _0x3c710c; _0x265bf4++) {
                    var _0x2ce966 = _0x2c42d5[_0x265bf4];
                    _0x1b7263 = _0x4760e0[_0x265bf4];
                    for (let _0x2c464a = 0, _0x291ea2 = _0x2ce966.length; _0x2c464a < _0x291ea2; _0x2c464a++) {
                      var _0x27fc80 = _0x54387e(_0x2ce966[_0x2c464a], _0x1b7263[_0x2c464a], _0x457d6d);
                      if (_0x607257) {
                        _0x314a7f(_0x27fc80.x, _0x27fc80.y + _0x342ded[_0x4f7380 - 1].y, _0x342ded[_0x4f7380 - 1].x + _0xf73e1f);
                      } else {
                        _0x314a7f(_0x27fc80.x, _0x27fc80.y, _0x3e26c8 + _0xf73e1f);
                      }
                    }
                  }
                }
                function _0x44ce1e(_0xd0ae9b, _0x514d06) {
                  var _0x246dc9 = 11;
                  let _0x539dc2 = _0xd0ae9b.length;
                  _0x246dc9 = 6;
                  for (; --_0x539dc2 >= 0;) {
                    var _0x1069d7 = _0x539dc2;
                    let _0x92ffaf = _0x539dc2 - 1;
                    if (_0x92ffaf < 0) {
                      _0x92ffaf = _0xd0ae9b.length - 1;
                    }
                    for (let _0x58a87d = 0, _0x14d728 = _0x4f7380 + _0x2ab888 * 2; _0x58a87d < _0x14d728; _0x58a87d++) {
                      var _0x352035 = _0x654dd8 * _0x58a87d;
                      var _0x1a78e7 = _0x654dd8 * (_0x58a87d + 1);
                      (function (_0x4a9c42, _0x2c9427, _0x2f8fd9, _0x2a72c1) {
                        _0x1b0ada(_0x4a9c42);
                        _0x1b0ada(_0x2c9427);
                        _0x1b0ada(_0x2a72c1);
                        _0x1b0ada(_0x2c9427);
                        _0x1b0ada(_0x2f8fd9);
                        _0x1b0ada(_0x2a72c1);
                        _0x2a72c1 = _0x1937d3.length / 3;
                        _0x2e1a9f((_0x2a72c1 = _0x3cc625.generateSideWallUV(_0x14e2ae, _0x1937d3, _0x2a72c1 - 6, _0x2a72c1 - 3, _0x2a72c1 - 2, _0x2a72c1 - 1))[0]);
                        _0x2e1a9f(_0x2a72c1[1]);
                        _0x2e1a9f(_0x2a72c1[3]);
                        _0x2e1a9f(_0x2a72c1[1]);
                        _0x2e1a9f(_0x2a72c1[2]);
                        _0x2e1a9f(_0x2a72c1[3]);
                      })(_0x514d06 + _0x1069d7 + _0x352035, _0x514d06 + _0x92ffaf + _0x352035, _0x514d06 + _0x92ffaf + _0x1a78e7, _0x514d06 + _0x1069d7 + _0x1a78e7);
                    }
                  }
                }
                function _0x314a7f(_0x259daa, _0x2eb47f, _0x1e5d69) {
                  _0x2d4248.push(_0x259daa);
                  _0x2d4248.push(_0x2eb47f);
                  _0x2d4248.push(_0x1e5d69);
                }
                function _0x5c6bc5(_0x370cdc, _0x21bf36, _0x156c92) {
                  _0x1b0ada(_0x370cdc);
                  _0x1b0ada(_0x21bf36);
                  _0x1b0ada(_0x156c92);
                  _0x156c92 = _0x1937d3.length / 3;
                  _0x2e1a9f((_0x156c92 = _0x3cc625.generateTopUV(_0x14e2ae, _0x1937d3, _0x156c92 - 3, _0x156c92 - 2, _0x156c92 - 1))[0]);
                  _0x2e1a9f(_0x156c92[1]);
                  _0x2e1a9f(_0x156c92[2]);
                }
                function _0x1b0ada(_0x28a5dc) {
                  _0x1937d3.push(_0x2d4248[_0x28a5dc * 3 + 0]);
                  _0x1937d3.push(_0x2d4248[_0x28a5dc * 3 + 1]);
                  _0x1937d3.push(_0x2d4248[_0x28a5dc * 3 + 2]);
                }
                function _0x2e1a9f(_0x163f45) {
                  _0x319888.push(_0x163f45.x);
                  _0x319888.push(_0x163f45.y);
                }
                (function () {
                  var _0x36a89d = _0x1937d3.length / 3;
                  if (_0x4a7bab) {
                    var _0x898bb0;
                    let _0x150c22 = _0x654dd8 * 0;
                    _0x898bb0 = 11;
                    for (let _0x29a26d = 0; _0x29a26d < _0x3d7527; _0x29a26d++) {
                      var _0x462aa6 = _0x36e137[_0x29a26d];
                      _0x5c6bc5(_0x462aa6[2] + _0x150c22, _0x462aa6[1] + _0x150c22, _0x462aa6[0] + _0x150c22);
                    }
                    _0x150c22 = _0x654dd8 * (_0x4f7380 + _0x2ab888 * 2);
                    for (let _0x13744c = 0; _0x13744c < _0x3d7527; _0x13744c++) {
                      var _0x5e9b84 = 2;
                      var _0x2fb717 = _0x36e137[_0x13744c];
                      _0x5e9b84 = 14;
                      _0x5c6bc5(_0x2fb717[0] + _0x150c22, _0x2fb717[1] + _0x150c22, _0x2fb717[2] + _0x150c22);
                    }
                  } else {
                    for (let _0x8f513f = 0; _0x8f513f < _0x3d7527; _0x8f513f++) {
                      var _0x66d779 = _0x36e137[_0x8f513f];
                      _0x5c6bc5(_0x66d779[2], _0x66d779[1], _0x66d779[0]);
                    }
                    for (let _0x46f31 = 0; _0x46f31 < _0x3d7527; _0x46f31++) {
                      var _0x2934d4 = _0x36e137[_0x46f31];
                      _0x5c6bc5(_0x2934d4[0] + _0x654dd8 * _0x4f7380, _0x2934d4[1] + _0x654dd8 * _0x4f7380, _0x2934d4[2] + _0x654dd8 * _0x4f7380);
                    }
                  }
                  _0x14e2ae.addGroup(_0x36a89d, _0x1937d3.length / 3 - _0x36a89d, 0);
                })();
                (function () {
                  var _0x1706eb = _0x1937d3.length / 3;
                  let _0x3eaeea = 0;
                  _0x44ce1e(_0x547560, _0x3eaeea);
                  _0x3eaeea += _0x547560.length;
                  for (let _0x390ec1 = 0, _0x1e3005 = _0x2c42d5.length; _0x390ec1 < _0x1e3005; _0x390ec1++) {
                    var _0x3b902f;
                    var _0x548278 = _0x2c42d5[_0x390ec1];
                    _0x3b902f = 6;
                    _0x44ce1e(_0x548278, _0x3eaeea);
                    _0x3eaeea += _0x548278.length;
                  }
                  _0x14e2ae.addGroup(_0x1706eb, _0x1937d3.length / 3 - _0x1706eb, 1);
                })();
              })(_0x223841[_0x194a0f]);
            }
            this.setAttribute("position", new _0x17b758(_0x1937d3, 3));
            this.setAttribute("uv", new _0x17b758(_0x319888, 2));
            this.computeVertexNormals();
          }
          toJSON() {
            var _0x1481a7 = super.toJSON();
            return function (_0x1e3a5a, _0x3f1976, _0x25ec8e) {
              _0x25ec8e.shapes = [];
              if (Array.isArray(_0x1e3a5a)) {
                for (let _0x1afc4a = 0, _0x318686 = _0x1e3a5a.length; _0x1afc4a < _0x318686; _0x1afc4a++) {
                  var _0x51e6c5 = _0x1e3a5a[_0x1afc4a];
                  _0x25ec8e.shapes.push(_0x51e6c5.uuid);
                }
              } else {
                _0x25ec8e.shapes.push(_0x1e3a5a.uuid);
              }
              if (_0x3f1976.extrudePath !== undefined) {
                _0x25ec8e.options.extrudePath = _0x3f1976.extrudePath.toJSON();
              }
              return _0x25ec8e;
            }(this.parameters.shapes, this.parameters.options, _0x1481a7);
          }
          static fromJSON(_0xe0e0f1, _0x8f542a) {
            const _0x2abbf1 = [];
            for (let _0x314112 = 0, _0x1edacf = _0xe0e0f1.shapes.length; _0x314112 < _0x1edacf; _0x314112++) {
              var _0x2df486;
              var _0x1e36d5 = _0x8f542a[_0xe0e0f1.shapes[_0x314112]];
              _0x2df486 = 4;
              _0x2abbf1.push(_0x1e36d5);
            }
            var _0xe00fca = 7;
            var _0x951d61 = _0xe0e0f1.options.extrudePath;
            _0xe00fca = 6;
            if (_0x951d61 !== undefined) {
              _0xe0e0f1.options.extrudePath = new _0x4c70de[_0x951d61.type]().fromJSON(_0x951d61);
            }
            return new _0x2168e0(_0x2abbf1, _0xe0e0f1.options);
          }
        }
        const _0x348313 = {
          generateTopUV: function (_0x4c8f4f, _0x419a73, _0x5c8cfa, _0x12c1aa, _0x3df749) {
            var _0x6c62d6 = _0x419a73[_0x5c8cfa * 3];
            var _0x24a130 = _0x419a73[_0x5c8cfa * 3 + 1];
            var _0xf08e58 = _0x419a73[_0x12c1aa * 3];
            _0x5c8cfa = _0x419a73[_0x12c1aa * 3 + 1];
            _0x12c1aa = _0x419a73[_0x3df749 * 3];
            _0x3df749 = _0x419a73[_0x3df749 * 3 + 1];
            return [new _0x25f874(_0x6c62d6, _0x24a130), new _0x25f874(_0xf08e58, _0x5c8cfa), new _0x25f874(_0x12c1aa, _0x3df749)];
          },
          generateSideWallUV: function (_0x101f13, _0x410927, _0x5a2aef, _0x5e21d1, _0x29473f, _0x13207d) {
            var _0x3ee665 = _0x410927[_0x5a2aef * 3];
            var _0x5525ad = _0x410927[_0x5a2aef * 3 + 1];
            var _0x109da4 = _0x410927[_0x5a2aef * 3 + 2];
            var _0x44be7a = _0x410927[_0x5e21d1 * 3];
            var _0x1e6638 = _0x410927[_0x5e21d1 * 3 + 1];
            var _0x57a76d = _0x410927[_0x5e21d1 * 3 + 2];
            var _0x4ea147 = _0x410927[_0x29473f * 3];
            var _0x3476e1 = _0x410927[_0x29473f * 3 + 1];
            _0x5a2aef = _0x410927[_0x29473f * 3 + 2];
            _0x5e21d1 = _0x410927[_0x13207d * 3];
            _0x29473f = _0x410927[_0x13207d * 3 + 1];
            _0x13207d = _0x410927[_0x13207d * 3 + 2];
            if (Math.abs(_0x5525ad - _0x1e6638) < Math.abs(_0x3ee665 - _0x44be7a)) {
              return [new _0x25f874(_0x3ee665, 1 - _0x109da4), new _0x25f874(_0x44be7a, 1 - _0x57a76d), new _0x25f874(_0x4ea147, 1 - _0x5a2aef), new _0x25f874(_0x5e21d1, 1 - _0x13207d)];
            } else {
              return [new _0x25f874(_0x5525ad, 1 - _0x109da4), new _0x25f874(_0x1e6638, 1 - _0x57a76d), new _0x25f874(_0x3476e1, 1 - _0x5a2aef), new _0x25f874(_0x29473f, 1 - _0x13207d)];
            }
          }
        };
        class _0x20b5e9 extends _0xc297b7 {
          constructor(_0x566474 = 1, _0x31a3e6 = 0) {
            var _0x1bb8bc = (1 + Math.sqrt(5)) / 2;
            super([-1, _0x1bb8bc, 0, 1, _0x1bb8bc, 0, -1, -_0x1bb8bc, 0, 1, -_0x1bb8bc, 0, 0, -1, _0x1bb8bc, 0, 1, _0x1bb8bc, 0, -1, -_0x1bb8bc, 0, 1, -_0x1bb8bc, _0x1bb8bc, 0, -1, _0x1bb8bc, 0, 1, -_0x1bb8bc, 0, -1, -_0x1bb8bc, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], _0x566474, _0x31a3e6);
            this.type = "IcosahedronGeometry";
            this.parameters = {
              radius: _0x566474,
              detail: _0x31a3e6
            };
          }
          static fromJSON(_0x536351) {
            return new _0x20b5e9(_0x536351.radius, _0x536351.detail);
          }
        }
        class _0x1a50d7 extends _0x3f374d {
          constructor(_0x409e04 = [new _0x25f874(0, 0.5), new _0x25f874(0.5, 0), new _0x25f874(0, -0.5)], _0xafa597 = 12, _0x1cb3cf = 0, _0x34a966 = Math.PI * 2) {
            super();
            this.type = "LatheGeometry";
            this.parameters = {
              points: _0x409e04,
              segments: _0xafa597,
              phiStart: _0x1cb3cf,
              phiLength: _0x34a966
            };
            _0xafa597 = Math.floor(_0xafa597);
            _0x34a966 = _0x6865cb(_0x34a966, 0, Math.PI * 2);
            const _0x59524a = [];
            const _0x8a6d85 = [];
            const _0x50f353 = [];
            const _0x37aab1 = [];
            const _0x468f55 = [];
            var _0x5ccc61 = 1 / _0xafa597;
            const _0x1ce20d = new _0x1d20ef();
            const _0x5df8ea = new _0x25f874();
            const _0x39b6f4 = new _0x1d20ef();
            const _0x18f2c8 = new _0x1d20ef();
            const _0x25625d = new _0x1d20ef();
            let _0x1d0e2e = 0;
            let _0x4b0ded = 0;
            for (let _0x34cf65 = 0; _0x34cf65 <= _0x409e04.length - 1; _0x34cf65++) {
              switch (_0x34cf65) {
                case 0:
                  _0x1d0e2e = _0x409e04[_0x34cf65 + 1].x - _0x409e04[_0x34cf65].x;
                  _0x4b0ded = _0x409e04[_0x34cf65 + 1].y - _0x409e04[_0x34cf65].y;
                  _0x39b6f4.x = +_0x4b0ded;
                  _0x39b6f4.y = -_0x1d0e2e;
                  _0x39b6f4.z = _0x4b0ded * 0;
                  _0x25625d.copy(_0x39b6f4);
                  _0x39b6f4.normalize();
                  _0x37aab1.push(_0x39b6f4.x, _0x39b6f4.y, _0x39b6f4.z);
                  break;
                case _0x409e04.length - 1:
                  _0x37aab1.push(_0x25625d.x, _0x25625d.y, _0x25625d.z);
                  break;
                default:
                  _0x1d0e2e = _0x409e04[_0x34cf65 + 1].x - _0x409e04[_0x34cf65].x;
                  _0x4b0ded = _0x409e04[_0x34cf65 + 1].y - _0x409e04[_0x34cf65].y;
                  _0x39b6f4.x = +_0x4b0ded;
                  _0x39b6f4.y = -_0x1d0e2e;
                  _0x39b6f4.z = _0x4b0ded * 0;
                  _0x18f2c8.copy(_0x39b6f4);
                  _0x39b6f4.x += _0x25625d.x;
                  _0x39b6f4.y += _0x25625d.y;
                  _0x39b6f4.z += _0x25625d.z;
                  _0x39b6f4.normalize();
                  _0x37aab1.push(_0x39b6f4.x, _0x39b6f4.y, _0x39b6f4.z);
                  _0x25625d.copy(_0x18f2c8);
              }
            }
            for (let _0x23bdb9 = 0; _0x23bdb9 <= _0xafa597; _0x23bdb9++) {
              var _0x38025b = _0x1cb3cf + _0x23bdb9 * _0x5ccc61 * _0x34a966;
              var _0x315e2b = Math.sin(_0x38025b);
              var _0x1fcfac = Math.cos(_0x38025b);
              for (let _0x52497a = 0; _0x52497a <= _0x409e04.length - 1; _0x52497a++) {
                _0x1ce20d.x = _0x409e04[_0x52497a].x * _0x315e2b;
                _0x1ce20d.y = _0x409e04[_0x52497a].y;
                _0x1ce20d.z = _0x409e04[_0x52497a].x * _0x1fcfac;
                _0x8a6d85.push(_0x1ce20d.x, _0x1ce20d.y, _0x1ce20d.z);
                _0x5df8ea.x = _0x23bdb9 / _0xafa597;
                _0x5df8ea.y = _0x52497a / (_0x409e04.length - 1);
                _0x50f353.push(_0x5df8ea.x, _0x5df8ea.y);
                var _0x2f0bd2 = _0x37aab1[_0x52497a * 3 + 0] * _0x315e2b;
                var _0x117977 = _0x37aab1[_0x52497a * 3 + 1];
                var _0x317230 = _0x37aab1[_0x52497a * 3 + 0] * _0x1fcfac;
                _0x468f55.push(_0x2f0bd2, _0x117977, _0x317230);
              }
            }
            for (let _0x1a0583 = 0; _0x1a0583 < _0xafa597; _0x1a0583++) {
              for (let _0x31cdc9 = 0; _0x31cdc9 < _0x409e04.length - 1; _0x31cdc9++) {
                var _0x1e9dbc = _0x31cdc9 + _0x1a0583 * _0x409e04.length;
                var _0x3fa543 = _0x1e9dbc + _0x409e04.length;
                var _0x281164 = _0x1e9dbc + _0x409e04.length + 1;
                var _0x417894 = _0x1e9dbc + 1;
                _0x59524a.push(_0x1e9dbc, _0x3fa543, _0x417894);
                _0x59524a.push(_0x3fa543, _0x281164, _0x417894);
              }
            }
            this.setIndex(_0x59524a);
            this.setAttribute("position", new _0x17b758(_0x8a6d85, 3));
            this.setAttribute("uv", new _0x17b758(_0x50f353, 2));
            this.setAttribute("normal", new _0x17b758(_0x468f55, 3));
          }
          static fromJSON(_0x14fd8f) {
            return new _0x1a50d7(_0x14fd8f.points, _0x14fd8f.segments, _0x14fd8f.phiStart, _0x14fd8f.phiLength);
          }
        }
        class _0x439bba extends _0xc297b7 {
          constructor(_0x121af5 = 1, _0x1c8855 = 0) {
            super([1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], _0x121af5, _0x1c8855);
            this.type = "OctahedronGeometry";
            this.parameters = {
              radius: _0x121af5,
              detail: _0x1c8855
            };
          }
          static fromJSON(_0x15b9b7) {
            return new _0x439bba(_0x15b9b7.radius, _0x15b9b7.detail);
          }
        }
        class _0x39022f extends _0x3f374d {
          constructor(_0x303c2a = 0.5, _0x5884f6 = 1, _0x24bb02 = 8, _0x4f4078 = 1, _0x412561 = 0, _0x4c94c8 = Math.PI * 2) {
            super();
            this.type = "RingGeometry";
            this.parameters = {
              innerRadius: _0x303c2a,
              outerRadius: _0x5884f6,
              thetaSegments: _0x24bb02,
              phiSegments: _0x4f4078,
              thetaStart: _0x412561,
              thetaLength: _0x4c94c8
            };
            _0x24bb02 = Math.max(3, _0x24bb02);
            const _0xc2c46d = [];
            const _0x47aeb7 = [];
            const _0x7a5ca6 = [];
            const _0x10284a = [];
            let _0x1f0bec = _0x303c2a;
            var _0x1b0f2a = (_0x5884f6 - _0x303c2a) / (_0x4f4078 = Math.max(1, _0x4f4078));
            const _0x398af4 = new _0x1d20ef();
            const _0x5c4ae9 = new _0x25f874();
            for (let _0x2a7460 = 0; _0x2a7460 <= _0x4f4078; _0x2a7460++) {
              for (let _0x5a5bcb = 0; _0x5a5bcb <= _0x24bb02; _0x5a5bcb++) {
                var _0x53c8b5 = _0x412561 + _0x5a5bcb / _0x24bb02 * _0x4c94c8;
                _0x398af4.x = _0x1f0bec * Math.cos(_0x53c8b5);
                _0x398af4.y = _0x1f0bec * Math.sin(_0x53c8b5);
                _0x47aeb7.push(_0x398af4.x, _0x398af4.y, _0x398af4.z);
                _0x7a5ca6.push(0, 0, 1);
                _0x5c4ae9.x = (_0x398af4.x / _0x5884f6 + 1) / 2;
                _0x5c4ae9.y = (_0x398af4.y / _0x5884f6 + 1) / 2;
                _0x10284a.push(_0x5c4ae9.x, _0x5c4ae9.y);
              }
              _0x1f0bec += _0x1b0f2a;
            }
            for (let _0x407fcc = 0; _0x407fcc < _0x4f4078; _0x407fcc++) {
              var _0x453561 = _0x407fcc * (_0x24bb02 + 1);
              for (let _0x58ae64 = 0; _0x58ae64 < _0x24bb02; _0x58ae64++) {
                var _0x4fc12d = _0x58ae64 + _0x453561;
                var _0x34f03a = _0x4fc12d + _0x24bb02 + 1;
                var _0x164bae = _0x4fc12d + _0x24bb02 + 2;
                var _0x3a9e7a = _0x4fc12d + 1;
                _0xc2c46d.push(_0x4fc12d, _0x34f03a, _0x3a9e7a);
                _0xc2c46d.push(_0x34f03a, _0x164bae, _0x3a9e7a);
              }
            }
            this.setIndex(_0xc2c46d);
            this.setAttribute("position", new _0x17b758(_0x47aeb7, 3));
            this.setAttribute("normal", new _0x17b758(_0x7a5ca6, 3));
            this.setAttribute("uv", new _0x17b758(_0x10284a, 2));
          }
          static fromJSON(_0x42ba03) {
            return new _0x39022f(_0x42ba03.innerRadius, _0x42ba03.outerRadius, _0x42ba03.thetaSegments, _0x42ba03.phiSegments, _0x42ba03.thetaStart, _0x42ba03.thetaLength);
          }
        }
        class _0x5a2b3b extends _0x3f374d {
          constructor(_0x425479 = new _0xe5830f([new _0x25f874(0, 0.5), new _0x25f874(-0.5, -0.5), new _0x25f874(0.5, -0.5)]), _0x2ddebc = 12) {
            super();
            this.type = "ShapeGeometry";
            this.parameters = {
              shapes: _0x425479,
              curveSegments: _0x2ddebc
            };
            const _0x5e8853 = [];
            const _0x58079d = [];
            const _0x496804 = [];
            const _0x43dccc = [];
            let _0x37cead = 0;
            let _0x401d6a = 0;
            if (Array.isArray(_0x425479) === false) {
              _0x4313ee(_0x425479);
            } else {
              for (let _0x1b4df6 = 0; _0x1b4df6 < _0x425479.length; _0x1b4df6++) {
                _0x4313ee(_0x425479[_0x1b4df6]);
                this.addGroup(_0x37cead, _0x401d6a, _0x1b4df6);
                _0x37cead += _0x401d6a;
                _0x401d6a = 0;
              }
            }
            function _0x4313ee(_0x523bc1) {
              var _0x4de8dd = _0x58079d.length / 3;
              var _0x1eeafd = 7;
              let _0x5ce7a6 = (_0x523bc1 = _0x523bc1.extractPoints(_0x2ddebc)).shape;
              _0x1eeafd = 11;
              var _0x229146 = 5;
              const _0x5cad98 = _0x523bc1.holes;
              _0x229146 = 14;
              if (_0x513d24.isClockWise(_0x5ce7a6) === false) {
                _0x5ce7a6 = _0x5ce7a6.reverse();
              }
              for (let _0x1e5730 = 0, _0xd42c2a = _0x5cad98.length; _0x1e5730 < _0xd42c2a; _0x1e5730++) {
                const _0x24d359 = _0x5cad98[_0x1e5730];
                if (_0x513d24.isClockWise(_0x24d359) === true) {
                  _0x5cad98[_0x1e5730] = _0x24d359.reverse();
                }
              }
              var _0x45a38a;
              var _0x3f2b70 = _0x513d24.triangulateShape(_0x5ce7a6, _0x5cad98);
              _0x45a38a = 15;
              for (let _0xfe702b = 0, _0x126a90 = _0x5cad98.length; _0xfe702b < _0x126a90; _0xfe702b++) {
                var _0x4dc5e4 = 7;
                var _0x20589b = _0x5cad98[_0xfe702b];
                _0x4dc5e4 = 1;
                _0x5ce7a6 = _0x5ce7a6.concat(_0x20589b);
              }
              for (let _0x32ffc1 = 0, _0x45adbe = _0x5ce7a6.length; _0x32ffc1 < _0x45adbe; _0x32ffc1++) {
                var _0x263ec8;
                var _0x2b94b1 = _0x5ce7a6[_0x32ffc1];
                _0x263ec8 = 7;
                _0x58079d.push(_0x2b94b1.x, _0x2b94b1.y, 0);
                _0x496804.push(0, 0, 1);
                _0x43dccc.push(_0x2b94b1.x, _0x2b94b1.y);
              }
              for (let _0x116683 = 0, _0x5671e3 = _0x3f2b70.length; _0x116683 < _0x5671e3; _0x116683++) {
                var _0x37cd40 = _0x3f2b70[_0x116683];
                var _0x40d752 = _0x37cd40[0] + _0x4de8dd;
                var _0x2eeb23 = _0x37cd40[1] + _0x4de8dd;
                _0x37cd40 = _0x37cd40[2] + _0x4de8dd;
                _0x5e8853.push(_0x40d752, _0x2eeb23, _0x37cd40);
                _0x401d6a += 3;
              }
            }
            this.setIndex(_0x5e8853);
            this.setAttribute("position", new _0x17b758(_0x58079d, 3));
            this.setAttribute("normal", new _0x17b758(_0x496804, 3));
            this.setAttribute("uv", new _0x17b758(_0x43dccc, 2));
          }
          toJSON() {
            var _0x4a77de = super.toJSON();
            return function (_0xf85294, _0x17af38) {
              _0x17af38.shapes = [];
              if (Array.isArray(_0xf85294)) {
                for (let _0x4b1b9c = 0, _0x368c89 = _0xf85294.length; _0x4b1b9c < _0x368c89; _0x4b1b9c++) {
                  var _0x1d10d1 = _0xf85294[_0x4b1b9c];
                  _0x17af38.shapes.push(_0x1d10d1.uuid);
                }
              } else {
                _0x17af38.shapes.push(_0xf85294.uuid);
              }
              return _0x17af38;
            }(this.parameters.shapes, _0x4a77de);
          }
          static fromJSON(_0x5449b8, _0x56bafc) {
            const _0x11b57b = [];
            for (let _0x2374ba = 0, _0x6393b = _0x5449b8.shapes.length; _0x2374ba < _0x6393b; _0x2374ba++) {
              var _0x5c4811 = 11;
              var _0x4edbdf = _0x56bafc[_0x5449b8.shapes[_0x2374ba]];
              _0x5c4811 = 13;
              _0x11b57b.push(_0x4edbdf);
            }
            return new _0x5a2b3b(_0x11b57b, _0x5449b8.curveSegments);
          }
        }
        class _0x330d7e extends _0x3f374d {
          constructor(_0x2ea7b3 = 1, _0x4bc046 = 32, _0xb3ac47 = 16, _0x20a04a = 0, _0x285c52 = Math.PI * 2, _0x4b47b7 = 0, _0x3f5766 = Math.PI) {
            super();
            this.type = "SphereGeometry";
            this.parameters = {
              radius: _0x2ea7b3,
              widthSegments: _0x4bc046,
              heightSegments: _0xb3ac47,
              phiStart: _0x20a04a,
              phiLength: _0x285c52,
              thetaStart: _0x4b47b7,
              thetaLength: _0x3f5766
            };
            _0x4bc046 = Math.max(3, Math.floor(_0x4bc046));
            _0xb3ac47 = Math.max(2, Math.floor(_0xb3ac47));
            var _0x2d6198 = Math.min(_0x4b47b7 + _0x3f5766, Math.PI);
            let _0x49d94d = 0;
            const _0xc70457 = [];
            const _0x10919f = new _0x1d20ef();
            const _0x4ea799 = new _0x1d20ef();
            const _0x4334fd = [];
            const _0x2ba5bf = [];
            const _0x18048e = [];
            const _0x4c4604 = [];
            for (let _0x53e1dd = 0; _0x53e1dd <= _0xb3ac47; _0x53e1dd++) {
              const _0x127c37 = [];
              var _0x234d03 = _0x53e1dd / _0xb3ac47;
              let _0x4bfade = 0;
              if (_0x53e1dd == 0 && _0x4b47b7 == 0) {
                _0x4bfade = 0.5 / _0x4bc046;
              } else if (_0x53e1dd == _0xb3ac47 && _0x2d6198 == Math.PI) {
                _0x4bfade = -0.5 / _0x4bc046;
              }
              for (let _0x4a114a = 0; _0x4a114a <= _0x4bc046; _0x4a114a++) {
                var _0xb62be0 = 5;
                var _0x24f5e4 = _0x4a114a / _0x4bc046;
                _0xb62be0 = 16;
                _0x10919f.x = -_0x2ea7b3 * Math.cos(_0x20a04a + _0x24f5e4 * _0x285c52) * Math.sin(_0x4b47b7 + _0x234d03 * _0x3f5766);
                _0x10919f.y = _0x2ea7b3 * Math.cos(_0x4b47b7 + _0x234d03 * _0x3f5766);
                _0x10919f.z = _0x2ea7b3 * Math.sin(_0x20a04a + _0x24f5e4 * _0x285c52) * Math.sin(_0x4b47b7 + _0x234d03 * _0x3f5766);
                _0x2ba5bf.push(_0x10919f.x, _0x10919f.y, _0x10919f.z);
                _0x4ea799.copy(_0x10919f).normalize();
                _0x18048e.push(_0x4ea799.x, _0x4ea799.y, _0x4ea799.z);
                _0x4c4604.push(_0x24f5e4 + _0x4bfade, 1 - _0x234d03);
                _0x127c37.push(_0x49d94d++);
              }
              _0xc70457.push(_0x127c37);
            }
            for (let _0x279d08 = 0; _0x279d08 < _0xb3ac47; _0x279d08++) {
              for (let _0x35d3ab = 0; _0x35d3ab < _0x4bc046; _0x35d3ab++) {
                var _0x43a363 = _0xc70457[_0x279d08][_0x35d3ab + 1];
                var _0x50fa73 = _0xc70457[_0x279d08][_0x35d3ab];
                var _0x4594e9 = _0xc70457[_0x279d08 + 1][_0x35d3ab];
                var _0x2caf47 = _0xc70457[_0x279d08 + 1][_0x35d3ab + 1];
                if (_0x279d08 !== 0 || _0x4b47b7 > 0) {
                  _0x4334fd.push(_0x43a363, _0x50fa73, _0x2caf47);
                }
                if (_0x279d08 !== _0xb3ac47 - 1 || _0x2d6198 < Math.PI) {
                  _0x4334fd.push(_0x50fa73, _0x4594e9, _0x2caf47);
                }
              }
            }
            this.setIndex(_0x4334fd);
            this.setAttribute("position", new _0x17b758(_0x2ba5bf, 3));
            this.setAttribute("normal", new _0x17b758(_0x18048e, 3));
            this.setAttribute("uv", new _0x17b758(_0x4c4604, 2));
          }
          static fromJSON(_0x1b70b1) {
            return new _0x330d7e(_0x1b70b1.radius, _0x1b70b1.widthSegments, _0x1b70b1.heightSegments, _0x1b70b1.phiStart, _0x1b70b1.phiLength, _0x1b70b1.thetaStart, _0x1b70b1.thetaLength);
          }
        }
        class _0x2784ec extends _0xc297b7 {
          constructor(_0x26cdae = 1, _0x39cacd = 0) {
            super([1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], _0x26cdae, _0x39cacd);
            this.type = "TetrahedronGeometry";
            this.parameters = {
              radius: _0x26cdae,
              detail: _0x39cacd
            };
          }
          static fromJSON(_0x282e74) {
            return new _0x2784ec(_0x282e74.radius, _0x282e74.detail);
          }
        }
        class _0x18f6df extends _0x3f374d {
          constructor(_0x36cc5f = 1, _0x2c4068 = 0.4, _0x1b60e2 = 8, _0x38e727 = 6, _0x5ea7a4 = Math.PI * 2) {
            super();
            this.type = "TorusGeometry";
            this.parameters = {
              radius: _0x36cc5f,
              tube: _0x2c4068,
              radialSegments: _0x1b60e2,
              tubularSegments: _0x38e727,
              arc: _0x5ea7a4
            };
            _0x1b60e2 = Math.floor(_0x1b60e2);
            _0x38e727 = Math.floor(_0x38e727);
            const _0x4c88eb = [];
            const _0x4066ae = [];
            const _0x5e7597 = [];
            const _0x581997 = [];
            const _0x136c96 = new _0x1d20ef();
            const _0x239f94 = new _0x1d20ef();
            const _0x210804 = new _0x1d20ef();
            for (let _0x1b8277 = 0; _0x1b8277 <= _0x1b60e2; _0x1b8277++) {
              for (let _0x5aeebc = 0; _0x5aeebc <= _0x38e727; _0x5aeebc++) {
                var _0x5e235c = _0x5aeebc / _0x38e727 * _0x5ea7a4;
                var _0x3d45c5 = _0x1b8277 / _0x1b60e2 * Math.PI * 2;
                _0x239f94.x = (_0x36cc5f + _0x2c4068 * Math.cos(_0x3d45c5)) * Math.cos(_0x5e235c);
                _0x239f94.y = (_0x36cc5f + _0x2c4068 * Math.cos(_0x3d45c5)) * Math.sin(_0x5e235c);
                _0x239f94.z = _0x2c4068 * Math.sin(_0x3d45c5);
                _0x4066ae.push(_0x239f94.x, _0x239f94.y, _0x239f94.z);
                _0x136c96.x = _0x36cc5f * Math.cos(_0x5e235c);
                _0x136c96.y = _0x36cc5f * Math.sin(_0x5e235c);
                _0x210804.subVectors(_0x239f94, _0x136c96).normalize();
                _0x5e7597.push(_0x210804.x, _0x210804.y, _0x210804.z);
                _0x581997.push(_0x5aeebc / _0x38e727);
                _0x581997.push(_0x1b8277 / _0x1b60e2);
              }
            }
            for (let _0x4c948b = 1; _0x4c948b <= _0x1b60e2; _0x4c948b++) {
              for (let _0x19e647 = 1; _0x19e647 <= _0x38e727; _0x19e647++) {
                var _0x586918 = (_0x38e727 + 1) * _0x4c948b + _0x19e647 - 1;
                var _0x2a6b3b = (_0x38e727 + 1) * (_0x4c948b - 1) + _0x19e647 - 1;
                var _0x2bfa10 = (_0x38e727 + 1) * (_0x4c948b - 1) + _0x19e647;
                var _0x4b8dd7 = (_0x38e727 + 1) * _0x4c948b + _0x19e647;
                _0x4c88eb.push(_0x586918, _0x2a6b3b, _0x4b8dd7);
                _0x4c88eb.push(_0x2a6b3b, _0x2bfa10, _0x4b8dd7);
              }
            }
            this.setIndex(_0x4c88eb);
            this.setAttribute("position", new _0x17b758(_0x4066ae, 3));
            this.setAttribute("normal", new _0x17b758(_0x5e7597, 3));
            this.setAttribute("uv", new _0x17b758(_0x581997, 2));
          }
          static fromJSON(_0x2c9cd7) {
            return new _0x18f6df(_0x2c9cd7.radius, _0x2c9cd7.tube, _0x2c9cd7.radialSegments, _0x2c9cd7.tubularSegments, _0x2c9cd7.arc);
          }
        }
        class _0x38f3d7 extends _0x3f374d {
          constructor(_0xd026db = 1, _0x576b11 = 0.4, _0x39b47 = 64, _0x161526 = 8, _0x46897f = 2, _0x5aade2 = 3) {
            super();
            this.type = "TorusKnotGeometry";
            this.parameters = {
              radius: _0xd026db,
              tube: _0x576b11,
              tubularSegments: _0x39b47,
              radialSegments: _0x161526,
              p: _0x46897f,
              q: _0x5aade2
            };
            _0x39b47 = Math.floor(_0x39b47);
            _0x161526 = Math.floor(_0x161526);
            const _0x481196 = [];
            const _0x2064d8 = [];
            const _0x30c4aa = [];
            const _0x7b26b8 = [];
            const _0x555bfb = new _0x1d20ef();
            const _0x1b889f = new _0x1d20ef();
            var _0x4fdda6 = new _0x1d20ef();
            var _0xbff73f = new _0x1d20ef();
            const _0x2ad871 = new _0x1d20ef();
            const _0x53ea2f = new _0x1d20ef();
            const _0x50b352 = new _0x1d20ef();
            for (let _0x14489d = 0; _0x14489d <= _0x39b47; ++_0x14489d) {
              var _0x598f8b = _0x14489d / _0x39b47 * _0x46897f * Math.PI * 2;
              _0x3541f4(_0x598f8b, _0x46897f, _0x5aade2, _0xd026db, _0x4fdda6);
              _0x3541f4(0.01 + _0x598f8b, _0x46897f, _0x5aade2, _0xd026db, _0xbff73f);
              _0x53ea2f.subVectors(_0xbff73f, _0x4fdda6);
              _0x50b352.addVectors(_0xbff73f, _0x4fdda6);
              _0x2ad871.crossVectors(_0x53ea2f, _0x50b352);
              _0x50b352.crossVectors(_0x2ad871, _0x53ea2f);
              _0x2ad871.normalize();
              _0x50b352.normalize();
              for (let _0xdd12e4 = 0; _0xdd12e4 <= _0x161526; ++_0xdd12e4) {
                var _0x4f8437 = _0xdd12e4 / _0x161526 * Math.PI * 2;
                var _0x3d64d6 = -_0x576b11 * Math.cos(_0x4f8437);
                _0x4f8437 = _0x576b11 * Math.sin(_0x4f8437);
                _0x555bfb.x = _0x4fdda6.x + (_0x3d64d6 * _0x50b352.x + _0x4f8437 * _0x2ad871.x);
                _0x555bfb.y = _0x4fdda6.y + (_0x3d64d6 * _0x50b352.y + _0x4f8437 * _0x2ad871.y);
                _0x555bfb.z = _0x4fdda6.z + (_0x3d64d6 * _0x50b352.z + _0x4f8437 * _0x2ad871.z);
                _0x2064d8.push(_0x555bfb.x, _0x555bfb.y, _0x555bfb.z);
                _0x1b889f.subVectors(_0x555bfb, _0x4fdda6).normalize();
                _0x30c4aa.push(_0x1b889f.x, _0x1b889f.y, _0x1b889f.z);
                _0x7b26b8.push(_0x14489d / _0x39b47);
                _0x7b26b8.push(_0xdd12e4 / _0x161526);
              }
            }
            for (let _0x15ab0d = 1; _0x15ab0d <= _0x39b47; _0x15ab0d++) {
              for (let _0x8f55ef = 1; _0x8f55ef <= _0x161526; _0x8f55ef++) {
                var _0x221eb0 = (_0x161526 + 1) * (_0x15ab0d - 1) + (_0x8f55ef - 1);
                var _0x2ca48a = (_0x161526 + 1) * _0x15ab0d + (_0x8f55ef - 1);
                var _0x42c0da = (_0x161526 + 1) * _0x15ab0d + _0x8f55ef;
                var _0x16db0c = (_0x161526 + 1) * (_0x15ab0d - 1) + _0x8f55ef;
                _0x481196.push(_0x221eb0, _0x2ca48a, _0x16db0c);
                _0x481196.push(_0x2ca48a, _0x42c0da, _0x16db0c);
              }
            }
            function _0x3541f4(_0x428f83, _0x3bb782, _0x1de2a9, _0x12bf88, _0x3f62f4) {
              var _0xaf3b7a = Math.cos(_0x428f83);
              var _0x47aec1 = Math.sin(_0x428f83);
              _0x3bb782 = _0x1de2a9 / _0x3bb782 * _0x428f83;
              _0x428f83 = Math.cos(_0x3bb782);
              _0x3f62f4.x = _0x12bf88 * (2 + _0x428f83) * 0.5 * _0xaf3b7a;
              _0x3f62f4.y = _0x12bf88 * (2 + _0x428f83) * _0x47aec1 * 0.5;
              _0x3f62f4.z = _0x12bf88 * Math.sin(_0x3bb782) * 0.5;
            }
            this.setIndex(_0x481196);
            this.setAttribute("position", new _0x17b758(_0x2064d8, 3));
            this.setAttribute("normal", new _0x17b758(_0x30c4aa, 3));
            this.setAttribute("uv", new _0x17b758(_0x7b26b8, 2));
          }
          static fromJSON(_0x10669e) {
            return new _0x38f3d7(_0x10669e.radius, _0x10669e.tube, _0x10669e.tubularSegments, _0x10669e.radialSegments, _0x10669e.p, _0x10669e.q);
          }
        }
        class _0x3d5222 extends _0x3f374d {
          constructor(_0x54cfa5 = new _0x49a817(new _0x1d20ef(-1, -1, 0), new _0x1d20ef(-1, 1, 0), new _0x1d20ef(1, 1, 0)), _0x4b05f1 = 64, _0x35a7ca = 1, _0x37d0c2 = 8, _0x56ad64 = false) {
            super();
            this.type = "TubeGeometry";
            this.parameters = {
              path: _0x54cfa5,
              tubularSegments: _0x4b05f1,
              radius: _0x35a7ca,
              radialSegments: _0x37d0c2,
              closed: _0x56ad64
            };
            const _0x3c5c48 = _0x54cfa5.computeFrenetFrames(_0x4b05f1, _0x56ad64);
            this.tangents = _0x3c5c48.tangents;
            this.normals = _0x3c5c48.normals;
            this.binormals = _0x3c5c48.binormals;
            const _0x5b4b70 = new _0x1d20ef();
            const _0x426858 = new _0x1d20ef();
            const _0x55b76c = new _0x25f874();
            let _0x4170a5 = new _0x1d20ef();
            const _0x313bf7 = [];
            const _0x2608d6 = [];
            const _0xbb0503 = [];
            const _0x4bf47b = [];
            function _0x1776ad(_0x37181d) {
              _0x4170a5 = _0x54cfa5.getPointAt(_0x37181d / _0x4b05f1, _0x4170a5);
              var _0x48e035 = _0x3c5c48.normals[_0x37181d];
              var _0x1fe1fd = _0x3c5c48.binormals[_0x37181d];
              for (let _0x4741f5 = 0; _0x4741f5 <= _0x37d0c2; _0x4741f5++) {
                var _0xc82690 = _0x4741f5 / _0x37d0c2 * Math.PI * 2;
                var _0x2656b8 = Math.sin(_0xc82690);
                _0xc82690 = -Math.cos(_0xc82690);
                _0x426858.x = _0xc82690 * _0x48e035.x + _0x2656b8 * _0x1fe1fd.x;
                _0x426858.y = _0xc82690 * _0x48e035.y + _0x2656b8 * _0x1fe1fd.y;
                _0x426858.z = _0xc82690 * _0x48e035.z + _0x2656b8 * _0x1fe1fd.z;
                _0x426858.normalize();
                _0x2608d6.push(_0x426858.x, _0x426858.y, _0x426858.z);
                _0x5b4b70.x = _0x4170a5.x + _0x35a7ca * _0x426858.x;
                _0x5b4b70.y = _0x4170a5.y + _0x35a7ca * _0x426858.y;
                _0x5b4b70.z = _0x4170a5.z + _0x35a7ca * _0x426858.z;
                _0x313bf7.push(_0x5b4b70.x, _0x5b4b70.y, _0x5b4b70.z);
              }
            }
            (function () {
              for (let _0x55522d = 0; _0x55522d < _0x4b05f1; _0x55522d++) {
                _0x1776ad(_0x55522d);
              }
              _0x1776ad(_0x56ad64 === false ? _0x4b05f1 : 0);
              (function () {
                for (let _0x3a4bbb = 0; _0x3a4bbb <= _0x4b05f1; _0x3a4bbb++) {
                  for (let _0x54ba7c = 0; _0x54ba7c <= _0x37d0c2; _0x54ba7c++) {
                    _0x55b76c.x = _0x3a4bbb / _0x4b05f1;
                    _0x55b76c.y = _0x54ba7c / _0x37d0c2;
                    _0xbb0503.push(_0x55b76c.x, _0x55b76c.y);
                  }
                }
              })();
              (function () {
                for (let _0x1b8b9e = 1; _0x1b8b9e <= _0x4b05f1; _0x1b8b9e++) {
                  for (let _0xeae183 = 1; _0xeae183 <= _0x37d0c2; _0xeae183++) {
                    var _0x47c9a5 = (_0x37d0c2 + 1) * (_0x1b8b9e - 1) + (_0xeae183 - 1);
                    var _0x35e258 = (_0x37d0c2 + 1) * _0x1b8b9e + (_0xeae183 - 1);
                    var _0x52c4ee = (_0x37d0c2 + 1) * _0x1b8b9e + _0xeae183;
                    var _0x3da7ae = (_0x37d0c2 + 1) * (_0x1b8b9e - 1) + _0xeae183;
                    _0x4bf47b.push(_0x47c9a5, _0x35e258, _0x3da7ae);
                    _0x4bf47b.push(_0x35e258, _0x52c4ee, _0x3da7ae);
                  }
                }
              })();
            })();
            this.setIndex(_0x4bf47b);
            this.setAttribute("position", new _0x17b758(_0x313bf7, 3));
            this.setAttribute("normal", new _0x17b758(_0x2608d6, 3));
            this.setAttribute("uv", new _0x17b758(_0xbb0503, 2));
          }
          toJSON() {
            var _0x47bea8;
            const _0x43fd32 = super.toJSON();
            _0x47bea8 = 11;
            _0x43fd32.path = this.parameters.path.toJSON();
            return _0x43fd32;
          }
          static fromJSON(_0x547514) {
            return new _0x3d5222(new _0x4c70de[_0x547514.path.type]().fromJSON(_0x547514.path), _0x547514.tubularSegments, _0x547514.radius, _0x547514.radialSegments, _0x547514.closed);
          }
        }
        class _0x4bd317 extends _0x3f374d {
          constructor(_0x31378d = null) {
            super();
            this.type = "WireframeGeometry";
            this.parameters = {
              geometry: _0x31378d
            };
            if (_0x31378d !== null) {
              const _0xb5f83c = [];
              var _0x1b7fe0 = new Set();
              const _0x37708d = new _0x1d20ef();
              const _0xc858a4 = new _0x1d20ef();
              if (_0x31378d.index !== null) {
                var _0x375763 = 12;
                var _0x54bd6c = _0x31378d.attributes.position;
                _0x375763 = 6;
                var _0x336459;
                const _0x5434c4 = _0x31378d.index;
                _0x336459 = "jafe";
                let _0x2da774 = _0x31378d.groups;
                if (_0x2da774.length === 0) {
                  _0x2da774 = [{
                    start: 0,
                    count: _0x5434c4.count,
                    materialIndex: 0
                  }];
                }
                for (let _0x27d095 = 0, _0x5b132c = _0x2da774.length; _0x27d095 < _0x5b132c; ++_0x27d095) {
                  var _0x2c0574 = _0x2da774[_0x27d095];
                  var _0x42eacc = _0x2c0574.start;
                  for (let _0x5dc80d = _0x42eacc, _0x34c743 = _0x42eacc + _0x2c0574.count; _0x5dc80d < _0x34c743; _0x5dc80d += 3) {
                    for (let _0xdadea1 = 0; _0xdadea1 < 3; _0xdadea1++) {
                      var _0x176677 = _0x5434c4.getX(_0x5dc80d + _0xdadea1);
                      var _0x32603c = _0x5434c4.getX(_0x5dc80d + (_0xdadea1 + 1) % 3);
                      _0x37708d.fromBufferAttribute(_0x54bd6c, _0x176677);
                      _0xc858a4.fromBufferAttribute(_0x54bd6c, _0x32603c);
                      if (_0x57807f(_0x37708d, _0xc858a4, _0x1b7fe0) === true) {
                        _0xb5f83c.push(_0x37708d.x, _0x37708d.y, _0x37708d.z);
                        _0xb5f83c.push(_0xc858a4.x, _0xc858a4.y, _0xc858a4.z);
                      }
                    }
                  }
                }
              } else {
                var _0x1288f0 = 11;
                var _0x49dd18 = _0x31378d.attributes.position;
                _0x1288f0 = 8;
                for (let _0x44e9 = 0, _0x182615 = _0x49dd18.count / 3; _0x44e9 < _0x182615; _0x44e9++) {
                  for (let _0x5231c2 = 0; _0x5231c2 < 3; _0x5231c2++) {
                    var _0x112903 = _0x44e9 * 3 + _0x5231c2;
                    var _0x41ec1b = _0x44e9 * 3 + (_0x5231c2 + 1) % 3;
                    _0x37708d.fromBufferAttribute(_0x49dd18, _0x112903);
                    _0xc858a4.fromBufferAttribute(_0x49dd18, _0x41ec1b);
                    if (_0x57807f(_0x37708d, _0xc858a4, _0x1b7fe0) === true) {
                      _0xb5f83c.push(_0x37708d.x, _0x37708d.y, _0x37708d.z);
                      _0xb5f83c.push(_0xc858a4.x, _0xc858a4.y, _0xc858a4.z);
                    }
                  }
                }
              }
              this.setAttribute("position", new _0x17b758(_0xb5f83c, 3));
            }
          }
        }
        function _0x57807f(_0x26799d, _0x29eba4, _0x334e8a) {
          var _0x1c9ad7 = 10;
          var _0x414d16 = _0x26799d.x + "," + _0x26799d.y + "," + _0x26799d.z + "-" + _0x29eba4.x + "," + _0x29eba4.y + "," + _0x29eba4.z;
          _0x1c9ad7 = 3;
          _0x26799d = _0x29eba4.x + "," + _0x29eba4.y + "," + _0x29eba4.z + "-" + _0x26799d.x + "," + _0x26799d.y + "," + _0x26799d.z;
          return _0x334e8a.has(_0x414d16) !== true && _0x334e8a.has(_0x26799d) !== true && (_0x334e8a.add(_0x414d16, _0x26799d), true);
        }
        var _0x5b91ab;
        var _0x4d4800 = Object.freeze({
          "__proto__": null,
          BoxGeometry: _0xce9a1e,
          BoxBufferGeometry: _0xce9a1e,
          CircleGeometry: _0x336546,
          CircleBufferGeometry: _0x336546,
          ConeGeometry: _0x458021,
          ConeBufferGeometry: _0x458021,
          CylinderGeometry: _0x292b7e,
          CylinderBufferGeometry: _0x292b7e,
          DodecahedronGeometry: _0x6a340,
          DodecahedronBufferGeometry: _0x6a340,
          EdgesGeometry: _0x26805c,
          ExtrudeGeometry: _0x2168e0,
          ExtrudeBufferGeometry: _0x2168e0,
          IcosahedronGeometry: _0x20b5e9,
          IcosahedronBufferGeometry: _0x20b5e9,
          LatheGeometry: _0x1a50d7,
          LatheBufferGeometry: _0x1a50d7,
          OctahedronGeometry: _0x439bba,
          OctahedronBufferGeometry: _0x439bba,
          PlaneGeometry: _0x41807a,
          PlaneBufferGeometry: _0x41807a,
          PolyhedronGeometry: _0xc297b7,
          PolyhedronBufferGeometry: _0xc297b7,
          RingGeometry: _0x39022f,
          RingBufferGeometry: _0x39022f,
          ShapeGeometry: _0x5a2b3b,
          ShapeBufferGeometry: _0x5a2b3b,
          SphereGeometry: _0x330d7e,
          SphereBufferGeometry: _0x330d7e,
          TetrahedronGeometry: _0x2784ec,
          TetrahedronBufferGeometry: _0x2784ec,
          TorusGeometry: _0x18f6df,
          TorusBufferGeometry: _0x18f6df,
          TorusKnotGeometry: _0x38f3d7,
          TorusKnotBufferGeometry: _0x38f3d7,
          TubeGeometry: _0x3d5222,
          TubeBufferGeometry: _0x3d5222,
          WireframeGeometry: _0x4bd317
        });
        _0x5b91ab = "nado";
        class _0x4c27da extends _0x2098dd {
          constructor(_0x1fce25) {
            super();
            this.type = "ShadowMaterial";
            this.color = new _0x1282c2(0);
            this.transparent = true;
            this.setValues(_0x1fce25);
          }
          copy(_0x30e282) {
            super.copy(_0x30e282);
            this.color.copy(_0x30e282.color);
            return this;
          }
        }
        _0x4c27da.prototype.isShadowMaterial = true;
        class _0x3097df extends _0x2098dd {
          constructor(_0x3a3ff5) {
            super();
            this.defines = {
              STANDARD: ""
            };
            this.type = "MeshStandardMaterial";
            this.color = new _0x1282c2(16777215);
            this.roughness = 1;
            this.metalness = 0;
            this.map = null;
            this.lightMap = null;
            this.lightMapIntensity = 1;
            this.aoMap = null;
            this.aoMapIntensity = 1;
            this.emissive = new _0x1282c2(0);
            this.emissiveIntensity = 1;
            this.emissiveMap = null;
            this.bumpMap = null;
            this.bumpScale = 1;
            this.normalMap = null;
            this.normalMapType = _0x360692;
            this.normalScale = new _0x25f874(1, 1);
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.roughnessMap = null;
            this.metalnessMap = null;
            this.alphaMap = null;
            this.envMap = null;
            this.envMapIntensity = 1;
            this.refractionRatio = 0.98;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = "round";
            this.wireframeLinejoin = "round";
            this.flatShading = false;
            this.setValues(_0x3a3ff5);
          }
          copy(_0x20691e) {
            super.copy(_0x20691e);
            this.defines = {
              STANDARD: ""
            };
            this.color.copy(_0x20691e.color);
            this.roughness = _0x20691e.roughness;
            this.metalness = _0x20691e.metalness;
            this.map = _0x20691e.map;
            this.lightMap = _0x20691e.lightMap;
            this.lightMapIntensity = _0x20691e.lightMapIntensity;
            this.aoMap = _0x20691e.aoMap;
            this.aoMapIntensity = _0x20691e.aoMapIntensity;
            this.emissive.copy(_0x20691e.emissive);
            this.emissiveMap = _0x20691e.emissiveMap;
            this.emissiveIntensity = _0x20691e.emissiveIntensity;
            this.bumpMap = _0x20691e.bumpMap;
            this.bumpScale = _0x20691e.bumpScale;
            this.normalMap = _0x20691e.normalMap;
            this.normalMapType = _0x20691e.normalMapType;
            this.normalScale.copy(_0x20691e.normalScale);
            this.displacementMap = _0x20691e.displacementMap;
            this.displacementScale = _0x20691e.displacementScale;
            this.displacementBias = _0x20691e.displacementBias;
            this.roughnessMap = _0x20691e.roughnessMap;
            this.metalnessMap = _0x20691e.metalnessMap;
            this.alphaMap = _0x20691e.alphaMap;
            this.envMap = _0x20691e.envMap;
            this.envMapIntensity = _0x20691e.envMapIntensity;
            this.refractionRatio = _0x20691e.refractionRatio;
            this.wireframe = _0x20691e.wireframe;
            this.wireframeLinewidth = _0x20691e.wireframeLinewidth;
            this.wireframeLinecap = _0x20691e.wireframeLinecap;
            this.wireframeLinejoin = _0x20691e.wireframeLinejoin;
            this.flatShading = _0x20691e.flatShading;
            return this;
          }
        }
        _0x3097df.prototype.isMeshStandardMaterial = true;
        class _0x20cdf9 extends _0x3097df {
          constructor(_0x61eead) {
            super();
            this.defines = {
              STANDARD: "",
              PHYSICAL: ""
            };
            this.type = "MeshPhysicalMaterial";
            this.clearcoatMap = null;
            this.clearcoatRoughness = 0;
            this.clearcoatRoughnessMap = null;
            this.clearcoatNormalScale = new _0x25f874(1, 1);
            this.clearcoatNormalMap = null;
            this.ior = 1.5;
            Object.defineProperty(this, "reflectivity", {
              get: function () {
                return _0x6865cb((this.ior - 1) * 2.5 / (this.ior + 1), 0, 1);
              },
              set: function (_0x2a79ac) {
                this.ior = (1 + _0x2a79ac * 0.4) / (1 - _0x2a79ac * 0.4);
              }
            });
            this.sheenColor = new _0x1282c2(0);
            this.sheenColorMap = null;
            this.sheenRoughness = 1;
            this.sheenRoughnessMap = null;
            this.transmissionMap = null;
            this.thickness = 0;
            this.thicknessMap = null;
            this.attenuationDistance = 0;
            this.attenuationColor = new _0x1282c2(1, 1, 1);
            this.specularIntensity = 1;
            this.specularIntensityMap = null;
            this.specularColor = new _0x1282c2(1, 1, 1);
            this.specularColorMap = null;
            this._sheen = 0;
            this._clearcoat = 0;
            this._transmission = 0;
            this.setValues(_0x61eead);
          }
          get sheen() {
            return this._sheen;
          }
          set sheen(_0x50b214) {
            if (this._sheen > 0 != _0x50b214 > 0) {
              this.version++;
            }
            this._sheen = _0x50b214;
          }
          get clearcoat() {
            return this._clearcoat;
          }
          set clearcoat(_0x172941) {
            if (this._clearcoat > 0 != _0x172941 > 0) {
              this.version++;
            }
            this._clearcoat = _0x172941;
          }
          get transmission() {
            return this._transmission;
          }
          set transmission(_0x10f277) {
            if (this._transmission > 0 != _0x10f277 > 0) {
              this.version++;
            }
            this._transmission = _0x10f277;
          }
          copy(_0x518a41) {
            super.copy(_0x518a41);
            this.defines = {
              STANDARD: "",
              PHYSICAL: ""
            };
            this.clearcoat = _0x518a41.clearcoat;
            this.clearcoatMap = _0x518a41.clearcoatMap;
            this.clearcoatRoughness = _0x518a41.clearcoatRoughness;
            this.clearcoatRoughnessMap = _0x518a41.clearcoatRoughnessMap;
            this.clearcoatNormalMap = _0x518a41.clearcoatNormalMap;
            this.clearcoatNormalScale.copy(_0x518a41.clearcoatNormalScale);
            this.ior = _0x518a41.ior;
            this.sheen = _0x518a41.sheen;
            this.sheenColor.copy(_0x518a41.sheenColor);
            this.sheenColorMap = _0x518a41.sheenColorMap;
            this.sheenRoughness = _0x518a41.sheenRoughness;
            this.sheenRoughnessMap = _0x518a41.sheenRoughnessMap;
            this.transmission = _0x518a41.transmission;
            this.transmissionMap = _0x518a41.transmissionMap;
            this.thickness = _0x518a41.thickness;
            this.thicknessMap = _0x518a41.thicknessMap;
            this.attenuationDistance = _0x518a41.attenuationDistance;
            this.attenuationColor.copy(_0x518a41.attenuationColor);
            this.specularIntensity = _0x518a41.specularIntensity;
            this.specularIntensityMap = _0x518a41.specularIntensityMap;
            this.specularColor.copy(_0x518a41.specularColor);
            this.specularColorMap = _0x518a41.specularColorMap;
            return this;
          }
        }
        _0x20cdf9.prototype.isMeshPhysicalMaterial = true;
        class _0x1ff2dc extends _0x2098dd {
          constructor(_0x5349da) {
            super();
            this.type = "MeshPhongMaterial";
            this.color = new _0x1282c2(16777215);
            this.specular = new _0x1282c2(1118481);
            this.shininess = 30;
            this.map = null;
            this.lightMap = null;
            this.lightMapIntensity = 1;
            this.aoMap = null;
            this.aoMapIntensity = 1;
            this.emissive = new _0x1282c2(0);
            this.emissiveIntensity = 1;
            this.emissiveMap = null;
            this.bumpMap = null;
            this.bumpScale = 1;
            this.normalMap = null;
            this.normalMapType = _0x360692;
            this.normalScale = new _0x25f874(1, 1);
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.specularMap = null;
            this.alphaMap = null;
            this.envMap = null;
            this.combine = _0x2e0cd0;
            this.reflectivity = 1;
            this.refractionRatio = 0.98;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = "round";
            this.wireframeLinejoin = "round";
            this.flatShading = false;
            this.setValues(_0x5349da);
          }
          copy(_0x215321) {
            super.copy(_0x215321);
            this.color.copy(_0x215321.color);
            this.specular.copy(_0x215321.specular);
            this.shininess = _0x215321.shininess;
            this.map = _0x215321.map;
            this.lightMap = _0x215321.lightMap;
            this.lightMapIntensity = _0x215321.lightMapIntensity;
            this.aoMap = _0x215321.aoMap;
            this.aoMapIntensity = _0x215321.aoMapIntensity;
            this.emissive.copy(_0x215321.emissive);
            this.emissiveMap = _0x215321.emissiveMap;
            this.emissiveIntensity = _0x215321.emissiveIntensity;
            this.bumpMap = _0x215321.bumpMap;
            this.bumpScale = _0x215321.bumpScale;
            this.normalMap = _0x215321.normalMap;
            this.normalMapType = _0x215321.normalMapType;
            this.normalScale.copy(_0x215321.normalScale);
            this.displacementMap = _0x215321.displacementMap;
            this.displacementScale = _0x215321.displacementScale;
            this.displacementBias = _0x215321.displacementBias;
            this.specularMap = _0x215321.specularMap;
            this.alphaMap = _0x215321.alphaMap;
            this.envMap = _0x215321.envMap;
            this.combine = _0x215321.combine;
            this.reflectivity = _0x215321.reflectivity;
            this.refractionRatio = _0x215321.refractionRatio;
            this.wireframe = _0x215321.wireframe;
            this.wireframeLinewidth = _0x215321.wireframeLinewidth;
            this.wireframeLinecap = _0x215321.wireframeLinecap;
            this.wireframeLinejoin = _0x215321.wireframeLinejoin;
            this.flatShading = _0x215321.flatShading;
            return this;
          }
        }
        _0x1ff2dc.prototype.isMeshPhongMaterial = true;
        class _0x1f6f48 extends _0x2098dd {
          constructor(_0x31de64) {
            super();
            this.defines = {
              TOON: ""
            };
            this.type = "MeshToonMaterial";
            this.color = new _0x1282c2(16777215);
            this.map = null;
            this.gradientMap = null;
            this.lightMap = null;
            this.lightMapIntensity = 1;
            this.aoMap = null;
            this.aoMapIntensity = 1;
            this.emissive = new _0x1282c2(0);
            this.emissiveIntensity = 1;
            this.emissiveMap = null;
            this.bumpMap = null;
            this.bumpScale = 1;
            this.normalMap = null;
            this.normalMapType = _0x360692;
            this.normalScale = new _0x25f874(1, 1);
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.alphaMap = null;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = "round";
            this.wireframeLinejoin = "round";
            this.setValues(_0x31de64);
          }
          ["ypoc".split("").reverse().join("")](_0x1fec35) {
            super.copy(_0x1fec35);
            this.color.copy(_0x1fec35.color);
            this.map = _0x1fec35.map;
            this.gradientMap = _0x1fec35.gradientMap;
            this.lightMap = _0x1fec35.lightMap;
            this.lightMapIntensity = _0x1fec35.lightMapIntensity;
            this.aoMap = _0x1fec35.aoMap;
            this.aoMapIntensity = _0x1fec35.aoMapIntensity;
            this.emissive.copy(_0x1fec35.emissive);
            this.emissiveMap = _0x1fec35.emissiveMap;
            this.emissiveIntensity = _0x1fec35.emissiveIntensity;
            this.bumpMap = _0x1fec35.bumpMap;
            this.bumpScale = _0x1fec35.bumpScale;
            this.normalMap = _0x1fec35.normalMap;
            this.normalMapType = _0x1fec35.normalMapType;
            this.normalScale.copy(_0x1fec35.normalScale);
            this.displacementMap = _0x1fec35.displacementMap;
            this.displacementScale = _0x1fec35.displacementScale;
            this.displacementBias = _0x1fec35.displacementBias;
            this.alphaMap = _0x1fec35.alphaMap;
            this.wireframe = _0x1fec35.wireframe;
            this.wireframeLinewidth = _0x1fec35.wireframeLinewidth;
            this.wireframeLinecap = _0x1fec35.wireframeLinecap;
            this.wireframeLinejoin = _0x1fec35.wireframeLinejoin;
            return this;
          }
        }
        _0x1f6f48.prototype.isMeshToonMaterial = true;
        class _0x45ab6a extends _0x2098dd {
          constructor(_0x4b964e) {
            super();
            this.type = "MeshNormalMaterial";
            this.bumpMap = null;
            this.bumpScale = 1;
            this.normalMap = null;
            this.normalMapType = _0x360692;
            this.normalScale = new _0x25f874(1, 1);
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.fog = false;
            this.flatShading = false;
            this.setValues(_0x4b964e);
          }
          copy(_0x3c2d9c) {
            super.copy(_0x3c2d9c);
            this.bumpMap = _0x3c2d9c.bumpMap;
            this.bumpScale = _0x3c2d9c.bumpScale;
            this.normalMap = _0x3c2d9c.normalMap;
            this.normalMapType = _0x3c2d9c.normalMapType;
            this.normalScale.copy(_0x3c2d9c.normalScale);
            this.displacementMap = _0x3c2d9c.displacementMap;
            this.displacementScale = _0x3c2d9c.displacementScale;
            this.displacementBias = _0x3c2d9c.displacementBias;
            this.wireframe = _0x3c2d9c.wireframe;
            this.wireframeLinewidth = _0x3c2d9c.wireframeLinewidth;
            this.flatShading = _0x3c2d9c.flatShading;
            return this;
          }
        }
        _0x45ab6a.prototype.isMeshNormalMaterial = true;
        class _0x4af1bc extends _0x2098dd {
          constructor(_0x29107f) {
            super();
            this.type = "MeshLambertMaterial";
            this.color = new _0x1282c2(16777215);
            this.map = null;
            this.lightMap = null;
            this.lightMapIntensity = 1;
            this.aoMap = null;
            this.aoMapIntensity = 1;
            this.emissive = new _0x1282c2(0);
            this.emissiveIntensity = 1;
            this.emissiveMap = null;
            this.specularMap = null;
            this.alphaMap = null;
            this.envMap = null;
            this.combine = _0x2e0cd0;
            this.reflectivity = 1;
            this.refractionRatio = 0.98;
            this.wireframe = false;
            this.wireframeLinewidth = 1;
            this.wireframeLinecap = "round";
            this.wireframeLinejoin = "round";
            this.setValues(_0x29107f);
          }
          copy(_0x40edf9) {
            super.copy(_0x40edf9);
            this.color.copy(_0x40edf9.color);
            this.map = _0x40edf9.map;
            this.lightMap = _0x40edf9.lightMap;
            this.lightMapIntensity = _0x40edf9.lightMapIntensity;
            this.aoMap = _0x40edf9.aoMap;
            this.aoMapIntensity = _0x40edf9.aoMapIntensity;
            this.emissive.copy(_0x40edf9.emissive);
            this.emissiveMap = _0x40edf9.emissiveMap;
            this.emissiveIntensity = _0x40edf9.emissiveIntensity;
            this.specularMap = _0x40edf9.specularMap;
            this.alphaMap = _0x40edf9.alphaMap;
            this.envMap = _0x40edf9.envMap;
            this.combine = _0x40edf9.combine;
            this.reflectivity = _0x40edf9.reflectivity;
            this.refractionRatio = _0x40edf9.refractionRatio;
            this.wireframe = _0x40edf9.wireframe;
            this.wireframeLinewidth = _0x40edf9.wireframeLinewidth;
            this.wireframeLinecap = _0x40edf9.wireframeLinecap;
            this.wireframeLinejoin = _0x40edf9.wireframeLinejoin;
            return this;
          }
        }
        _0x4af1bc.prototype.isMeshLambertMaterial = true;
        class _0x17f8df extends _0x2098dd {
          constructor(_0x5d7b98) {
            super();
            this.defines = {
              MATCAP: ""
            };
            this.type = "MeshMatcapMaterial";
            this.color = new _0x1282c2(16777215);
            this.matcap = null;
            this.map = null;
            this.bumpMap = null;
            this.bumpScale = 1;
            this.normalMap = null;
            this.normalMapType = _0x360692;
            this.normalScale = new _0x25f874(1, 1);
            this.displacementMap = null;
            this.displacementScale = 1;
            this.displacementBias = 0;
            this.alphaMap = null;
            this.flatShading = false;
            this.setValues(_0x5d7b98);
          }
          copy(_0x5dc229) {
            super.copy(_0x5dc229);
            this.defines = {
              MATCAP: ""
            };
            this.color.copy(_0x5dc229.color);
            this.matcap = _0x5dc229.matcap;
            this.map = _0x5dc229.map;
            this.bumpMap = _0x5dc229.bumpMap;
            this.bumpScale = _0x5dc229.bumpScale;
            this.normalMap = _0x5dc229.normalMap;
            this.normalMapType = _0x5dc229.normalMapType;
            this.normalScale.copy(_0x5dc229.normalScale);
            this.displacementMap = _0x5dc229.displacementMap;
            this.displacementScale = _0x5dc229.displacementScale;
            this.displacementBias = _0x5dc229.displacementBias;
            this.alphaMap = _0x5dc229.alphaMap;
            this.flatShading = _0x5dc229.flatShading;
            return this;
          }
        }
        _0x17f8df.prototype.isMeshMatcapMaterial = true;
        class _0x4cd9cc extends _0x3c9a1c {
          constructor(_0x56b019) {
            super();
            this.type = "LineDashedMaterial";
            this.scale = 1;
            this.dashSize = 3;
            this.gapSize = 1;
            this.setValues(_0x56b019);
          }
          copy(_0x1d4e50) {
            super.copy(_0x1d4e50);
            this.scale = _0x1d4e50.scale;
            this.dashSize = _0x1d4e50.dashSize;
            this.gapSize = _0x1d4e50.gapSize;
            return this;
          }
        }
        _0x4cd9cc.prototype.isLineDashedMaterial = true;
        var _0x4ebf35 = Object.freeze({
          "__proto__": null,
          ShadowMaterial: _0x4c27da,
          SpriteMaterial: _0x4b5ffc,
          RawShaderMaterial: _0x1cac03,
          ShaderMaterial: _0x18cc6b,
          PointsMaterial: _0x541061,
          MeshPhysicalMaterial: _0x20cdf9,
          MeshStandardMaterial: _0x3097df,
          MeshPhongMaterial: _0x1ff2dc,
          MeshToonMaterial: _0x1f6f48,
          MeshNormalMaterial: _0x45ab6a,
          MeshLambertMaterial: _0x4af1bc,
          MeshDepthMaterial: _0x3b5e8b,
          MeshDistanceMaterial: _0x1b6045,
          MeshBasicMaterial: _0x4c4e20,
          MeshMatcapMaterial: _0x17f8df,
          LineDashedMaterial: _0x4cd9cc,
          LineBasicMaterial: _0x3c9a1c,
          Material: _0x2098dd
        });
        var _0x1dc09a;
        const _0x1c7a6e = {
          arraySlice: function (_0x25b463, _0x2c5bfc, _0x4e1d0e) {
            if (_0x1c7a6e.isTypedArray(_0x25b463)) {
              return new _0x25b463.constructor(_0x25b463.subarray(_0x2c5bfc, _0x4e1d0e !== undefined ? _0x4e1d0e : _0x25b463.length));
            } else {
              return _0x25b463.slice(_0x2c5bfc, _0x4e1d0e);
            }
          },
          convertArray: function (_0x1048be, _0x320962, _0x415b10) {
            if (!_0x1048be || !_0x415b10 && _0x1048be.constructor === _0x320962) {
              return _0x1048be;
            } else if (typeof _0x320962.BYTES_PER_ELEMENT == "number") {
              return new _0x320962(_0x1048be);
            } else {
              return Array.prototype.slice.call(_0x1048be);
            }
          },
          isTypedArray: function (_0x1194c4) {
            return ArrayBuffer.isView(_0x1194c4) && !(_0x1194c4 instanceof DataView);
          },
          getKeyframeOrder: function (_0x590ba5) {
            var _0x8f4cb1 = _0x590ba5.length;
            var _0x67b806 = 9;
            const _0x2b1043 = new Array(_0x8f4cb1);
            _0x67b806 = "nhnj";
            for (let _0x2ed6a3 = 0; _0x2ed6a3 !== _0x8f4cb1; ++_0x2ed6a3) {
              _0x2b1043[_0x2ed6a3] = _0x2ed6a3;
            }
            _0x2b1043.sort(function (_0x37f2ee, _0x5e048f) {
              return _0x590ba5[_0x37f2ee] - _0x590ba5[_0x5e048f];
            });
            return _0x2b1043;
          },
          sortedArray: function (_0x12c61a, _0x194282, _0xd6d607) {
            var _0x4f5854 = _0x12c61a.length;
            var _0x41be1a;
            const _0x2266b1 = new _0x12c61a.constructor(_0x4f5854);
            _0x41be1a = 14;
            for (let _0x204a00 = 0, _0x158d0a = 0; _0x158d0a !== _0x4f5854; ++_0x204a00) {
              var _0x4e6fb1 = 14;
              var _0x44480e = _0xd6d607[_0x204a00] * _0x194282;
              _0x4e6fb1 = "ejjh";
              for (let _0x1c6c36 = 0; _0x1c6c36 !== _0x194282; ++_0x1c6c36) {
                _0x2266b1[_0x158d0a++] = _0x12c61a[_0x44480e + _0x1c6c36];
              }
            }
            return _0x2266b1;
          },
          flattenJSON: function (_0x5074dc, _0x1d1ed0, _0x29f800, _0x3abef1) {
            let _0x1b8171 = 1;
            let _0x4ef020 = _0x5074dc[0];
            for (; _0x4ef020 !== undefined && _0x4ef020[_0x3abef1] === undefined;) {
              _0x4ef020 = _0x5074dc[_0x1b8171++];
            }
            if (_0x4ef020 !== undefined) {
              let _0x228c04 = _0x4ef020[_0x3abef1];
              if (_0x228c04 !== undefined) {
                if (Array.isArray(_0x228c04)) {
                  for (; _0x228c04 = _0x4ef020[_0x3abef1], _0x228c04 !== undefined && (_0x1d1ed0.push(_0x4ef020.time), _0x29f800.push.apply(_0x29f800, _0x228c04)), _0x4ef020 = _0x5074dc[_0x1b8171++], _0x4ef020 !== undefined;);
                } else if (_0x228c04.toArray !== undefined) {
                  for (; _0x228c04 = _0x4ef020[_0x3abef1], _0x228c04 !== undefined && (_0x1d1ed0.push(_0x4ef020.time), _0x228c04.toArray(_0x29f800, _0x29f800.length)), _0x4ef020 = _0x5074dc[_0x1b8171++], _0x4ef020 !== undefined;);
                } else {
                  for (; _0x228c04 = _0x4ef020[_0x3abef1], _0x228c04 !== undefined && (_0x1d1ed0.push(_0x4ef020.time), _0x29f800.push(_0x228c04)), _0x4ef020 = _0x5074dc[_0x1b8171++], _0x4ef020 !== undefined;);
                }
              }
            }
          },
          subclip: function (_0x44fc39, _0x2d4691, _0x3030ac, _0x3937c6, _0x4f36ed = 30) {
            const _0x5ed52a = _0x44fc39.clone();
            _0x5ed52a.name = _0x2d4691;
            var _0x481e13;
            const _0x5398bf = [];
            _0x481e13 = 0;
            for (let _0x9d456d = 0; _0x9d456d < _0x5ed52a.tracks.length; ++_0x9d456d) {
              const _0x48fb78 = _0x5ed52a.tracks[_0x9d456d];
              var _0x3a73f0 = _0x48fb78.getValueSize();
              const _0x763f15 = [];
              const _0xbd3c0 = [];
              for (let _0x329af4 = 0; _0x329af4 < _0x48fb78.times.length; ++_0x329af4) {
                var _0x564e1e;
                var _0x542ba9 = _0x48fb78.times[_0x329af4] * _0x4f36ed;
                _0x564e1e = "blcl";
                if (!(_0x542ba9 < _0x3030ac || _0x3937c6 <= _0x542ba9)) {
                  _0x763f15.push(_0x48fb78.times[_0x329af4]);
                  for (let _0x142311 = 0; _0x142311 < _0x3a73f0; ++_0x142311) {
                    _0xbd3c0.push(_0x48fb78.values[_0x329af4 * _0x3a73f0 + _0x142311]);
                  }
                }
              }
              if (_0x763f15.length !== 0) {
                _0x48fb78.times = _0x1c7a6e.convertArray(_0x763f15, _0x48fb78.times.constructor);
                _0x48fb78.values = _0x1c7a6e.convertArray(_0xbd3c0, _0x48fb78.values.constructor);
                _0x5398bf.push(_0x48fb78);
              }
            }
            _0x5ed52a.tracks = _0x5398bf;
            let _0x4faf03 = Infinity;
            for (let _0x5b21da = 0; _0x5b21da < _0x5ed52a.tracks.length; ++_0x5b21da) {
              if (_0x4faf03 > _0x5ed52a.tracks[_0x5b21da].times[0]) {
                _0x4faf03 = _0x5ed52a.tracks[_0x5b21da].times[0];
              }
            }
            for (let _0x33c0e3 = 0; _0x33c0e3 < _0x5ed52a.tracks.length; ++_0x33c0e3) {
              _0x5ed52a.tracks[_0x33c0e3].shift(_0x4faf03 * -1);
            }
            _0x5ed52a.resetDuration();
            return _0x5ed52a;
          },
          makeClipAdditive: function (_0x1eeb57, _0x32b1ac = 0, _0x6d20a1 = _0x1eeb57, _0x40d20a = 30) {
            var _0xaf39eb = _0x6d20a1.tracks.length;
            var _0x1bfd13 = _0x32b1ac / (_0x40d20a = _0x40d20a <= 0 ? 30 : _0x40d20a);
            for (let _0x291379 = 0; _0x291379 < _0xaf39eb; ++_0x291379) {
              const _0x22903f = _0x6d20a1.tracks[_0x291379];
              const _0x58b71c = _0x22903f.ValueTypeName;
              if (_0x58b71c !== "bool" && _0x58b71c !== "string") {
                const _0x4e97b0 = _0x1eeb57.tracks.find(function (_0x372a7d) {
                  return _0x372a7d.name === _0x22903f.name && _0x372a7d.ValueTypeName === _0x58b71c;
                });
                if (_0x4e97b0 !== undefined) {
                  let _0xa7a9c7 = 0;
                  var _0x530b7e = _0x22903f.getValueSize();
                  if (_0x22903f.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
                    _0xa7a9c7 = _0x530b7e / 3;
                  }
                  let _0x2673b1 = 0;
                  var _0x2f9142 = _0x4e97b0.getValueSize();
                  if (_0x4e97b0.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
                    _0x2673b1 = _0x2f9142 / 3;
                  }
                  var _0x1304b8;
                  var _0x3cb5b5 = _0x22903f.times.length - 1;
                  _0x1304b8 = 7;
                  let _0x2a04f5;
                  if (_0x1bfd13 <= _0x22903f.times[0]) {
                    var _0x49f5a2 = _0xa7a9c7;
                    var _0xb6402c = _0x530b7e - _0xa7a9c7;
                    _0x2a04f5 = _0x1c7a6e.arraySlice(_0x22903f.values, _0x49f5a2, _0xb6402c);
                  } else if (_0x1bfd13 >= _0x22903f.times[_0x3cb5b5]) {
                    _0x3cb5b5 = _0x3cb5b5 * _0x530b7e + _0xa7a9c7;
                    var _0x3a74b3 = _0x3cb5b5 + _0x530b7e - _0xa7a9c7;
                    _0x2a04f5 = _0x1c7a6e.arraySlice(_0x22903f.values, _0x3cb5b5, _0x3a74b3);
                  } else {
                    var _0x53ebd9 = 13;
                    const _0x4db6ad = _0x22903f.createInterpolant();
                    _0x53ebd9 = 18;
                    _0x3a74b3 = _0xa7a9c7;
                    _0x530b7e -= _0xa7a9c7;
                    _0x4db6ad.evaluate(_0x1bfd13);
                    _0x2a04f5 = _0x1c7a6e.arraySlice(_0x4db6ad.resultBuffer, _0x3a74b3, _0x530b7e);
                  }
                  if (_0x58b71c === "quaternion") {
                    new _0x53f372().fromArray(_0x2a04f5).normalize().conjugate().toArray(_0x2a04f5);
                  }
                  var _0x595ae4 = _0x4e97b0.times.length;
                  for (let _0x4706c8 = 0; _0x4706c8 < _0x595ae4; ++_0x4706c8) {
                    var _0x135757 = _0x4706c8 * _0x2f9142 + _0x2673b1;
                    if (_0x58b71c === "quaternion") {
                      _0x53f372.multiplyQuaternionsFlat(_0x4e97b0.values, _0x135757, _0x2a04f5, 0, _0x4e97b0.values, _0x135757);
                    } else {
                      var _0x145b7e = _0x2f9142 - _0x2673b1 * 2;
                      for (let _0x35f5c9 = 0; _0x35f5c9 < _0x145b7e; ++_0x35f5c9) {
                        _0x4e97b0.values[_0x135757 + _0x35f5c9] -= _0x2a04f5[_0x35f5c9];
                      }
                    }
                  }
                }
              }
            }
            _0x1eeb57.blendMode = _0x3b8c97;
            return _0x1eeb57;
          }
        };
        _0x1dc09a = 6;
        class _0x3d5743 {
          constructor(_0x526b80, _0x1d28c9, _0x4c5900, _0x4c6bd3) {
            this.parameterPositions = _0x526b80;
            this._cachedIndex = 0;
            this.resultBuffer = _0x4c6bd3 !== undefined ? _0x4c6bd3 : new _0x1d28c9.constructor(_0x4c5900);
            this.sampleValues = _0x1d28c9;
            this.valueSize = _0x4c5900;
            this.settings = null;
            this.DefaultSettings_ = {};
          }
          evaluate(_0x4dd318) {
            var _0x7144fd = this.parameterPositions;
            let _0x5f5736 = this._cachedIndex;
            let _0x431c35 = _0x7144fd[_0x5f5736];
            let _0x3fc903 = _0x7144fd[_0x5f5736 - 1];
            _0x43053a: {
              _0x3f250f: {
                var _0x382b09;
                let _0xff9d81;
                _0x382b09 = 8;
                _0x51cf8f: {
                  _0x2f0d9a: if (!(_0x4dd318 < _0x431c35)) {
                    for (var _0x1e05cb = _0x5f5736 + 2;;) {
                      if (_0x431c35 === undefined) {
                        if (_0x4dd318 < _0x3fc903) {
                          break _0x2f0d9a;
                        }
                        _0x5f5736 = _0x7144fd.length;
                        this._cachedIndex = _0x5f5736;
                        return this.afterEnd_(_0x5f5736 - 1, _0x4dd318, _0x3fc903);
                      }
                      if (_0x5f5736 === _0x1e05cb) {
                        break;
                      }
                      _0x3fc903 = _0x431c35;
                      _0x431c35 = _0x7144fd[++_0x5f5736];
                      if (_0x4dd318 < _0x431c35) {
                        break _0x3f250f;
                      }
                    }
                    _0xff9d81 = _0x7144fd.length;
                    break _0x51cf8f;
                  }
                  if (_0x4dd318 >= _0x3fc903) {
                    break _0x43053a;
                  }
                  var _0x1275a6 = 5;
                  var _0x4531cb = _0x7144fd[1];
                  _0x1275a6 = 7;
                  if (_0x4dd318 < _0x4531cb) {
                    _0x5f5736 = 2;
                    _0x3fc903 = _0x4531cb;
                  }
                  for (var _0xead799 = _0x5f5736 - 2;;) {
                    if (_0x3fc903 === undefined) {
                      this._cachedIndex = 0;
                      return this.beforeStart_(0, _0x4dd318, _0x431c35);
                    }
                    if (_0x5f5736 === _0xead799) {
                      break;
                    }
                    _0x431c35 = _0x3fc903;
                    _0x3fc903 = _0x7144fd[--_0x5f5736 - 1];
                    if (_0x4dd318 >= _0x3fc903) {
                      break _0x3f250f;
                    }
                  }
                  _0xff9d81 = _0x5f5736;
                  _0x5f5736 = 0;
                }
                for (; _0x5f5736 < _0xff9d81;) {
                  var _0x237bdc = _0x5f5736 + _0xff9d81 >>> 1;
                  if (_0x4dd318 < _0x7144fd[_0x237bdc]) {
                    _0xff9d81 = _0x237bdc;
                  } else {
                    _0x5f5736 = 1 + _0x237bdc;
                  }
                }
                _0x431c35 = _0x7144fd[_0x5f5736];
                _0x3fc903 = _0x7144fd[_0x5f5736 - 1];
                if (_0x3fc903 === undefined) {
                  this._cachedIndex = 0;
                  return this.beforeStart_(0, _0x4dd318, _0x431c35);
                }
                if (_0x431c35 === undefined) {
                  _0x5f5736 = _0x7144fd.length;
                  this._cachedIndex = _0x5f5736;
                  return this.afterEnd_(_0x5f5736 - 1, _0x3fc903, _0x4dd318);
                }
              }
              this._cachedIndex = _0x5f5736;
              this.intervalChanged_(_0x5f5736, _0x3fc903, _0x431c35);
            }
            return this.interpolate_(_0x5f5736, _0x3fc903, _0x4dd318, _0x431c35);
          }
          getSettings_() {
            return this.settings || this.DefaultSettings_;
          }
          copySampleValue_(_0x24a4e9) {
            const _0x485dc5 = this.resultBuffer;
            const _0x32901c = this.sampleValues;
            const _0x309618 = this.valueSize;
            const _0x2ec8ec = _0x24a4e9 * _0x309618;
            for (let _0x362f35 = 0; _0x362f35 !== _0x309618; ++_0x362f35) {
              _0x485dc5[_0x362f35] = _0x32901c[_0x2ec8ec + _0x362f35];
            }
            return _0x485dc5;
          }
          interpolate_() {
            throw new Error("``````````````````````````````````````````");
          }
          intervalChanged_() {}
        }
        _0x3d5743.prototype.beforeStart_ = _0x3d5743.prototype.copySampleValue_;
        _0x3d5743.prototype.afterEnd_ = _0x3d5743.prototype.copySampleValue_;
        class _0x3efaf9 extends _0x3d5743 {
          constructor(_0x577f9d, _0x589c25, _0x381f24, _0x124006) {
            super(_0x577f9d, _0x589c25, _0x381f24, _0x124006);
            this._weightPrev = -0;
            this._offsetPrev = -0;
            this._weightNext = -0;
            this._offsetNext = -0;
            this.DefaultSettings_ = {
              endingStart: _0x1f25f8,
              endingEnd: _0x1f25f8
            };
          }
          intervalChanged_(_0x15058f, _0x12fd09, _0x370b81) {
            var _0x214fa1 = this.parameterPositions;
            let _0x4abd12 = _0x15058f - 2;
            let _0x56f78a = _0x15058f + 1;
            let _0x35ed9f = _0x214fa1[_0x4abd12];
            let _0x5b5362 = _0x214fa1[_0x56f78a];
            if (_0x35ed9f === undefined) {
              switch (this.getSettings_().endingStart) {
                case _0x3c5781:
                  _0x4abd12 = _0x15058f;
                  _0x35ed9f = _0x12fd09 * 2 - _0x370b81;
                  break;
                case _0x408fc9:
                  _0x4abd12 = _0x214fa1.length - 2;
                  _0x35ed9f = _0x12fd09 + _0x214fa1[_0x4abd12] - _0x214fa1[_0x4abd12 + 1];
                  break;
                default:
                  _0x4abd12 = _0x15058f;
                  _0x35ed9f = _0x370b81;
              }
            }
            if (_0x5b5362 === undefined) {
              switch (this.getSettings_().endingEnd) {
                case _0x3c5781:
                  _0x56f78a = _0x15058f;
                  _0x5b5362 = _0x370b81 * 2 - _0x12fd09;
                  break;
                case _0x408fc9:
                  _0x56f78a = 1;
                  _0x5b5362 = _0x370b81 + _0x214fa1[1] - _0x214fa1[0];
                  break;
                default:
                  _0x56f78a = _0x15058f - 1;
                  _0x5b5362 = _0x12fd09;
              }
            }
            var _0xd41e22 = (_0x370b81 - _0x12fd09) * 0.5;
            var _0x1c2a5f = this.valueSize;
            this._weightPrev = _0xd41e22 / (_0x12fd09 - _0x35ed9f);
            this._weightNext = _0xd41e22 / (_0x5b5362 - _0x370b81);
            this._offsetPrev = _0x4abd12 * _0x1c2a5f;
            this._offsetNext = _0x56f78a * _0x1c2a5f;
          }
          interpolate_(_0x226716, _0x5e4d36, _0x441782, _0x54e0d7) {
            const _0x15eba6 = this.resultBuffer;
            const _0x1b5309 = this.sampleValues;
            const _0x105f0f = this.valueSize;
            const _0x2b3c9d = _0x226716 * _0x105f0f;
            const _0x597ec8 = _0x2b3c9d - _0x105f0f;
            const _0x3bf7b1 = this._offsetPrev;
            const _0x4fe74b = this._offsetNext;
            const _0x5ba01f = this._weightPrev;
            const _0x3c2d93 = this._weightNext;
            const _0x159d9d = (_0x441782 - _0x5e4d36) / (_0x54e0d7 - _0x5e4d36);
            const _0x3abdf3 = _0x159d9d * _0x159d9d;
            const _0x20fb35 = _0x3abdf3 * _0x159d9d;
            var _0x5f1054 = -_0x5ba01f * _0x20fb35 + _0x5ba01f * 2 * _0x3abdf3 - _0x5ba01f * _0x159d9d;
            var _0x54fe35 = (1 + _0x5ba01f) * _0x20fb35 + (-1.5 - _0x5ba01f * 2) * _0x3abdf3 + (-0.5 + _0x5ba01f) * _0x159d9d + 1;
            var _0x93552e = (-1 - _0x3c2d93) * _0x20fb35 + (1.5 + _0x3c2d93) * _0x3abdf3 + _0x159d9d * 0.5;
            var _0x55f6b6 = _0x3c2d93 * _0x20fb35 - _0x3c2d93 * _0x3abdf3;
            for (let _0x179b73 = 0; _0x179b73 !== _0x105f0f; ++_0x179b73) {
              _0x15eba6[_0x179b73] = _0x5f1054 * _0x1b5309[_0x3bf7b1 + _0x179b73] + _0x54fe35 * _0x1b5309[_0x597ec8 + _0x179b73] + _0x93552e * _0x1b5309[_0x2b3c9d + _0x179b73] + _0x55f6b6 * _0x1b5309[_0x4fe74b + _0x179b73];
            }
            return _0x15eba6;
          }
        }
        class _0x57b9af extends _0x3d5743 {
          constructor(_0x1e98e3, _0x4dfee7, _0x14e9b0, _0x259766) {
            super(_0x1e98e3, _0x4dfee7, _0x14e9b0, _0x259766);
          }
          interpolate_(_0xdd34b1, _0x56b8a2, _0x3e3659, _0x9e5ab) {
            const _0x45d1a1 = this.resultBuffer;
            const _0x790083 = this.sampleValues;
            const _0x1520b2 = this.valueSize;
            const _0x3e721f = _0xdd34b1 * _0x1520b2;
            const _0x529df2 = _0x3e721f - _0x1520b2;
            const _0x308950 = (_0x3e3659 - _0x56b8a2) / (_0x9e5ab - _0x56b8a2);
            const _0xf56148 = 1 - _0x308950;
            for (let _0x5a52dd = 0; _0x5a52dd !== _0x1520b2; ++_0x5a52dd) {
              _0x45d1a1[_0x5a52dd] = _0x790083[_0x529df2 + _0x5a52dd] * _0xf56148 + _0x790083[_0x3e721f + _0x5a52dd] * _0x308950;
            }
            return _0x45d1a1;
          }
        }
        class _0x36b6ea extends _0x3d5743 {
          constructor(_0x55e75c, _0x53b609, _0x17b232, _0x5748b6) {
            super(_0x55e75c, _0x53b609, _0x17b232, _0x5748b6);
          }
          interpolate_(_0x4574d5) {
            return this.copySampleValue_(_0x4574d5 - 1);
          }
        }
        class _0x5c15b3 {
          constructor(_0x45bcda, _0x20cade, _0x104839, _0x471439) {
            if (_0x45bcda === undefined) {
              throw new Error("``````````````````````````````````````````");
            }
            if (_0x20cade === undefined || _0x20cade.length === 0) {
              throw new Error("``````````````````````````````````````````");
            }
            this.name = _0x45bcda;
            this.times = _0x1c7a6e.convertArray(_0x20cade, this.TimeBufferType);
            this.values = _0x1c7a6e.convertArray(_0x104839, this.ValueBufferType);
            this.setInterpolation(_0x471439 || this.DefaultInterpolation);
          }
          static toJSON(_0x1f9861) {
            var _0x476f16 = 12;
            const _0xd87440 = _0x1f9861.constructor;
            _0x476f16 = 9;
            let _0x389a5b;
            var _0x1a629a;
            if (_0xd87440.toJSON !== this.toJSON) {
              _0x389a5b = _0xd87440.toJSON(_0x1f9861);
            } else {
              _0x389a5b = {
                name: _0x1f9861.name,
                times: _0x1c7a6e.convertArray(_0x1f9861.times, Array),
                values: _0x1c7a6e.convertArray(_0x1f9861.values, Array)
              };
              if ((_0x1a629a = _0x1f9861.getInterpolation()) !== _0x1f9861.DefaultInterpolation) {
                _0x389a5b.interpolation = _0x1a629a;
              }
            }
            _0x389a5b.type = _0x1f9861.ValueTypeName;
            return _0x389a5b;
          }
          InterpolantFactoryMethodDiscrete(_0x1c0b15) {
            return new _0x36b6ea(this.times, this.values, this.getValueSize(), _0x1c0b15);
          }
          InterpolantFactoryMethodLinear(_0x7e7aed) {
            return new _0x57b9af(this.times, this.values, this.getValueSize(), _0x7e7aed);
          }
          InterpolantFactoryMethodSmooth(_0x553b27) {
            return new _0x3efaf9(this.times, this.values, this.getValueSize(), _0x553b27);
          }
          setInterpolation(_0x51d1e4) {
            var _0x36a732 = 14;
            let _0x3f0bd7;
            _0x36a732 = 1;
            switch (_0x51d1e4) {
              case _0x797fdb:
                _0x3f0bd7 = this.InterpolantFactoryMethodDiscrete;
                break;
              case _0x4a85dd:
                _0x3f0bd7 = this.InterpolantFactoryMethodLinear;
                break;
              case _0x2fb845:
                _0x3f0bd7 = this.InterpolantFactoryMethodSmooth;
            }
            if (_0x3f0bd7 !== undefined) {
              this.createInterpolant = _0x3f0bd7;
              return this;
            }
            var _0x9e623 = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
            if (this.createInterpolant === undefined) {
              if (_0x51d1e4 === this.DefaultInterpolation) {
                throw new Error(_0x9e623);
              }
              this.setInterpolation(this.DefaultInterpolation);
            }
            return this;
          }
          getInterpolation() {
            switch (this.createInterpolant) {
              case this.InterpolantFactoryMethodDiscrete:
                return _0x797fdb;
              case this.InterpolantFactoryMethodLinear:
                return _0x4a85dd;
              case this.InterpolantFactoryMethodSmooth:
                return _0x2fb845;
            }
          }
          getValueSize() {
            return this.values.length / this.times.length;
          }
          shift(_0x221206) {
            if (_0x221206 !== 0) {
              var _0x3029bc;
              const _0x21e924 = this.times;
              _0x3029bc = 12;
              for (let _0x16e3bf = 0, _0x4509b0 = _0x21e924.length; _0x16e3bf !== _0x4509b0; ++_0x16e3bf) {
                _0x21e924[_0x16e3bf] += _0x221206;
              }
            }
            return this;
          }
          scale(_0x1fbb38) {
            if (_0x1fbb38 !== 1) {
              const _0xb8ca9f = this.times;
              for (let _0x4a77e2 = 0, _0x3db0a4 = _0xb8ca9f.length; _0x4a77e2 !== _0x3db0a4; ++_0x4a77e2) {
                _0xb8ca9f[_0x4a77e2] *= _0x1fbb38;
              }
            }
            return this;
          }
          trim(_0x25dd98, _0x7ef2a7) {
            var _0x516e03;
            var _0x46321c = this.times;
            var _0x594d66 = _0x46321c.length;
            let _0x3cbb98 = 0;
            let _0x442381 = _0x594d66 - 1;
            for (; _0x3cbb98 !== _0x594d66 && _0x46321c[_0x3cbb98] < _0x25dd98;) {
              ++_0x3cbb98;
            }
            for (; _0x442381 !== -1 && _0x46321c[_0x442381] > _0x7ef2a7;) {
              --_0x442381;
            }
            ++_0x442381;
            if (!(_0x3cbb98 === 0 && _0x442381 === _0x594d66)) {
              if (_0x3cbb98 >= _0x442381) {
                _0x442381 = Math.max(_0x442381, 1);
                _0x3cbb98 = _0x442381 - 1;
              }
              _0x516e03 = this.getValueSize();
              this.times = _0x1c7a6e.arraySlice(_0x46321c, _0x3cbb98, _0x442381);
              this.values = _0x1c7a6e.arraySlice(this.values, _0x3cbb98 * _0x516e03, _0x442381 * _0x516e03);
            }
            return this;
          }
          validate() {
            var _0x27d618;
            let _0x1c74e9 = true;
            _0x27d618 = 11;
            var _0x3428e1;
            var _0x3aaef1 = this.getValueSize();
            _0x3428e1 = 14;
            if (_0x3aaef1 - Math.floor(_0x3aaef1) != 0) {
              _0x1c74e9 = false;
            }
            var _0x12438c = this.times;
            var _0x263083 = this.values;
            var _0x234661 = _0x12438c.length;
            if (_0x234661 === 0) {
              _0x1c74e9 = false;
            }
            let _0x3fd2b2 = null;
            for (let _0x7c4a5d = 0; _0x7c4a5d !== _0x234661; _0x7c4a5d++) {
              var _0x2c96c9 = _0x12438c[_0x7c4a5d];
              if (typeof _0x2c96c9 == "number" && isNaN(_0x2c96c9)) {
                _0x1c74e9 = false;
                break;
              }
              if (_0x3fd2b2 !== null && _0x3fd2b2 > _0x2c96c9) {
                _0x1c74e9 = false;
                break;
              }
              _0x3fd2b2 = _0x2c96c9;
            }
            if (_0x263083 !== undefined && _0x1c7a6e.isTypedArray(_0x263083)) {
              for (let _0x1ece61 = 0, _0x1931ec = _0x263083.length; _0x1ece61 !== _0x1931ec; ++_0x1ece61) {
                var _0x3df1e2 = _0x263083[_0x1ece61];
                if (isNaN(_0x3df1e2)) {
                  _0x1c74e9 = false;
                  break;
                }
              }
            }
            return _0x1c74e9;
          }
          optimize() {
            const _0x37ec90 = _0x1c7a6e.arraySlice(this.times);
            const _0x1f92b8 = _0x1c7a6e.arraySlice(this.values);
            const _0x1db164 = this.getValueSize();
            const _0x5b3635 = this.getInterpolation() === _0x2fb845;
            const _0x59a36b = _0x37ec90.length - 1;
            let _0x381d71 = 1;
            for (let _0x1fdf10 = 1; _0x1fdf10 < _0x59a36b; ++_0x1fdf10) {
              let _0x523733 = false;
              var _0x4ad03b = _0x37ec90[_0x1fdf10];
              if (_0x4ad03b !== _0x37ec90[_0x1fdf10 + 1] && (_0x1fdf10 !== 1 || _0x4ad03b !== _0x37ec90[0])) {
                if (_0x5b3635) {
                  _0x523733 = true;
                } else {
                  var _0x4ba683 = _0x1fdf10 * _0x1db164;
                  var _0x1a54a3 = _0x4ba683 - _0x1db164;
                  var _0x973d1c = _0x4ba683 + _0x1db164;
                  for (let _0x2c4722 = 0; _0x2c4722 !== _0x1db164; ++_0x2c4722) {
                    var _0x1edd03 = _0x1f92b8[_0x4ba683 + _0x2c4722];
                    if (_0x1edd03 !== _0x1f92b8[_0x1a54a3 + _0x2c4722] || _0x1edd03 !== _0x1f92b8[_0x973d1c + _0x2c4722]) {
                      _0x523733 = true;
                      break;
                    }
                  }
                }
              }
              if (_0x523733) {
                if (_0x1fdf10 !== _0x381d71) {
                  _0x37ec90[_0x381d71] = _0x37ec90[_0x1fdf10];
                  var _0x127c2d = _0x1fdf10 * _0x1db164;
                  var _0x1423df = _0x381d71 * _0x1db164;
                  for (let _0x47c7f1 = 0; _0x47c7f1 !== _0x1db164; ++_0x47c7f1) {
                    _0x1f92b8[_0x1423df + _0x47c7f1] = _0x1f92b8[_0x127c2d + _0x47c7f1];
                  }
                }
                ++_0x381d71;
              }
            }
            if (_0x59a36b > 0) {
              _0x37ec90[_0x381d71] = _0x37ec90[_0x59a36b];
              for (let _0x2598b3 = _0x59a36b * _0x1db164, _0x37c4ca = _0x381d71 * _0x1db164, _0x2d9c6b = 0; _0x2d9c6b !== _0x1db164; ++_0x2d9c6b) {
                _0x1f92b8[_0x37c4ca + _0x2d9c6b] = _0x1f92b8[_0x2598b3 + _0x2d9c6b];
              }
              ++_0x381d71;
            }
            if (_0x381d71 !== _0x37ec90.length) {
              this.times = _0x1c7a6e.arraySlice(_0x37ec90, 0, _0x381d71);
              this.values = _0x1c7a6e.arraySlice(_0x1f92b8, 0, _0x381d71 * _0x1db164);
            } else {
              this.times = _0x37ec90;
              this.values = _0x1f92b8;
            }
            return this;
          }
          clone() {
            var _0x358f90 = _0x1c7a6e.arraySlice(this.times, 0);
            var _0x379b2a = _0x1c7a6e.arraySlice(this.values, 0);
            const _0x4f3983 = new (0, this.constructor)(this.name, _0x358f90, _0x379b2a);
            _0x4f3983.createInterpolant = this.createInterpolant;
            return _0x4f3983;
          }
        }
        _0x5c15b3.prototype.TimeBufferType = Float32Array;
        _0x5c15b3.prototype.ValueBufferType = Float32Array;
        _0x5c15b3.prototype.DefaultInterpolation = _0x4a85dd;
        class _0x1fa1e5 extends _0x5c15b3 {}
        _0x1fa1e5.prototype.ValueTypeName = "bool";
        _0x1fa1e5.prototype.ValueBufferType = Array;
        _0x1fa1e5.prototype.DefaultInterpolation = _0x797fdb;
        _0x1fa1e5.prototype.InterpolantFactoryMethodLinear = undefined;
        _0x1fa1e5.prototype.InterpolantFactoryMethodSmooth = undefined;
        class _0x188377 extends _0x5c15b3 {}
        _0x188377.prototype.ValueTypeName = "color";
        class _0x14bd5d extends _0x5c15b3 {}
        _0x14bd5d.prototype.ValueTypeName = "number";
        class _0x1dcdd4 extends _0x3d5743 {
          constructor(_0x5e46f3, _0x2d6d7a, _0x420d8f, _0x1ddd60) {
            super(_0x5e46f3, _0x2d6d7a, _0x420d8f, _0x1ddd60);
          }
          interpolate_(_0x11b7ce, _0x4ab2eb, _0x39b390, _0xba1550) {
            var _0x47f35c = this.resultBuffer;
            var _0x2aeefd = this.sampleValues;
            var _0x3ed89a = this.valueSize;
            var _0x18dbcc = (_0x39b390 - _0x4ab2eb) / (_0xba1550 - _0x4ab2eb);
            let _0x2fac4c = _0x11b7ce * _0x3ed89a;
            for (var _0x4f2c64 = _0x2fac4c + _0x3ed89a; _0x2fac4c !== _0x4f2c64; _0x2fac4c += 4) {
              _0x53f372.slerpFlat(_0x47f35c, 0, _0x2aeefd, _0x2fac4c - _0x3ed89a, _0x2aeefd, _0x2fac4c, _0x18dbcc);
            }
            return _0x47f35c;
          }
        }
        class _0x2319ad extends _0x5c15b3 {
          InterpolantFactoryMethodLinear(_0x4c5808) {
            return new _0x1dcdd4(this.times, this.values, this.getValueSize(), _0x4c5808);
          }
        }
        _0x2319ad.prototype.ValueTypeName = "quaternion";
        _0x2319ad.prototype.DefaultInterpolation = _0x4a85dd;
        _0x2319ad.prototype.InterpolantFactoryMethodSmooth = undefined;
        class _0x47b732 extends _0x5c15b3 {}
        _0x47b732.prototype.ValueTypeName = "string";
        _0x47b732.prototype.ValueBufferType = Array;
        _0x47b732.prototype.DefaultInterpolation = _0x797fdb;
        _0x47b732.prototype.InterpolantFactoryMethodLinear = undefined;
        _0x47b732.prototype.InterpolantFactoryMethodSmooth = undefined;
        class _0x3604eb extends _0x5c15b3 {}
        class _0xac731b {
          constructor(_0xf967d0, _0x302d5f = -1, _0x14a60e, _0xd5d31e = _0x335480) {
            this.name = _0xf967d0;
            this.tracks = _0x14a60e;
            this.duration = _0x302d5f;
            this.blendMode = _0xd5d31e;
            this.uuid = _0x2b30b2();
            if (this.duration < 0) {
              this.resetDuration();
            }
          }
          static parse(_0x1e1b0d) {
            const _0x5b172c = [];
            const _0x5ead2f = _0x1e1b0d.tracks;
            const _0x153294 = 1 / (_0x1e1b0d.fps || 1);
            for (let _0x9b530e = 0, _0x2d2ff4 = _0x5ead2f.length; _0x9b530e !== _0x2d2ff4; ++_0x9b530e) {
              _0x5b172c.push(function (_0x119729) {
                if (_0x119729.type === undefined) {
                  throw new Error("``````````````````````````````````````````");
                }
                var _0x16d77b;
                const _0x5d0d5b = function (_0x4d9045) {
                  switch (_0x4d9045.toLowerCase()) {
                    case "scalar":
                    case "double":
                    case "float":
                    case "number":
                    case "integer":
                      return _0x14bd5d;
                    case "vector":
                    case "vector2":
                    case "vector3":
                    case "vector4":
                      return _0x3604eb;
                    case "color":
                      return _0x188377;
                    case "quaternion":
                      return _0x2319ad;
                    case "bool":
                    case "boolean":
                      return _0x1fa1e5;
                    case "string":
                      return _0x47b732;
                  }
                  throw new Error("");
                }(_0x119729.type);
                _0x16d77b = "ggib";
                var _0x240e12;
                var _0x461908;
                if (_0x119729.times === undefined) {
                  _0x240e12 = [];
                  _0x461908 = [];
                  _0x1c7a6e.flattenJSON(_0x119729.keys, _0x240e12, _0x461908, "value");
                  _0x119729.times = _0x240e12;
                  _0x119729.values = _0x461908;
                }
                if (_0x5d0d5b.parse !== undefined) {
                  return _0x5d0d5b.parse(_0x119729);
                } else {
                  return new _0x5d0d5b(_0x119729.name, _0x119729.times, _0x119729.values, _0x119729.interpolation);
                }
              }(_0x5ead2f[_0x9b530e]).scale(_0x153294));
            }
            const _0x4b6e4c = new this(_0x1e1b0d.name, _0x1e1b0d.duration, _0x5b172c, _0x1e1b0d.blendMode);
            _0x4b6e4c.uuid = _0x1e1b0d.uuid;
            return _0x4b6e4c;
          }
          static toJSON(_0x5481cd) {
            const _0x434720 = [];
            const _0x33f9d1 = _0x5481cd.tracks;
            _0x5481cd = {
              name: _0x5481cd.name,
              duration: _0x5481cd.duration,
              tracks: _0x434720,
              uuid: _0x5481cd.uuid,
              blendMode: _0x5481cd.blendMode
            };
            for (let _0x2f5c79 = 0, _0x3f9f12 = _0x33f9d1.length; _0x2f5c79 !== _0x3f9f12; ++_0x2f5c79) {
              _0x434720.push(_0x5c15b3.toJSON(_0x33f9d1[_0x2f5c79]));
            }
            return _0x5481cd;
          }
          static CreateFromMorphTargetSequence(_0x47a70d, _0x5222ba, _0x4969cf, _0xb7acd4) {
            var _0x3b2125 = _0x5222ba.length;
            var _0x3ef6e1;
            const _0x5b6518 = [];
            _0x3ef6e1 = "elhm";
            for (let _0x363e42 = 0; _0x363e42 < _0x3b2125; _0x363e42++) {
              let _0x1c9dc4 = [];
              let _0x30fee2 = [];
              _0x1c9dc4.push((_0x363e42 + _0x3b2125 - 1) % _0x3b2125, _0x363e42, (_0x363e42 + 1) % _0x3b2125);
              _0x30fee2.push(0, 1, 0);
              var _0x233eea = 10;
              var _0x338069 = _0x1c7a6e.getKeyframeOrder(_0x1c9dc4);
              _0x233eea = "cjod";
              _0x1c9dc4 = _0x1c7a6e.sortedArray(_0x1c9dc4, 1, _0x338069);
              _0x30fee2 = _0x1c7a6e.sortedArray(_0x30fee2, 1, _0x338069);
              if (!(_0xb7acd4 || _0x1c9dc4[0] !== 0)) {
                _0x1c9dc4.push(_0x3b2125);
                _0x30fee2.push(_0x30fee2[0]);
              }
              _0x5b6518.push(new _0x14bd5d(".morphTargetInfluences[" + _0x5222ba[_0x363e42].name + "]", _0x1c9dc4, _0x30fee2).scale(1 / _0x4969cf));
            }
            return new this(_0x47a70d, -1, _0x5b6518);
          }
          static findByName(_0x155b27, _0x2f0ba0) {
            var _0x5dd00d = 9;
            let _0x3b0031 = _0x155b27;
            _0x5dd00d = 8;
            if (!Array.isArray(_0x155b27)) {
              _0x3b0031 = _0x155b27.geometry && _0x155b27.geometry.animations || _0x155b27.animations;
            }
            for (let _0x356e69 = 0; _0x356e69 < _0x3b0031.length; _0x356e69++) {
              if (_0x3b0031[_0x356e69].name === _0x2f0ba0) {
                return _0x3b0031[_0x356e69];
              }
            }
            return null;
          }
          static CreateClipsFromMorphTargetSequences(_0x576a01, _0x2cf53d, _0x10931e) {
            const _0x224e71 = {};
            var _0x2644fb = /^([\w-]*?)([\d]+)$/;
            for (let _0x18bda8 = 0, _0x2d3e3a = _0x576a01.length; _0x18bda8 < _0x2d3e3a; _0x18bda8++) {
              const _0x6645d7 = _0x576a01[_0x18bda8];
              var _0x29b15b = _0x6645d7.name.match(_0x2644fb);
              if (_0x29b15b && _0x29b15b.length > 1) {
                let _0x30f039 = _0x224e71[_0x29b15b = _0x29b15b[1]];
                if (!_0x30f039) {
                  _0x224e71[_0x29b15b] = _0x30f039 = [];
                }
                _0x30f039.push(_0x6645d7);
              }
            }
            const _0x1d2275 = [];
            for (const _0x3e35a5 in _0x224e71) {
              _0x1d2275.push(this.CreateFromMorphTargetSequence(_0x3e35a5, _0x224e71[_0x3e35a5], _0x2cf53d, _0x10931e));
            }
            return _0x1d2275;
          }
          static parseAnimation(_0x471b95, _0x3bb5f9) {
            if (!_0x471b95) {
              return null;
            }
            function _0x5cae1d(_0x37742c, _0x5b40b7, _0x279246, _0x317e0a, _0x130ddd) {
              var _0x29ef77;
              var _0x3f86e1;
              if (_0x279246.length !== 0) {
                _0x29ef77 = [];
                _0x3f86e1 = [];
                _0x1c7a6e.flattenJSON(_0x279246, _0x29ef77, _0x3f86e1, _0x317e0a);
                if (_0x29ef77.length !== 0) {
                  _0x130ddd.push(new _0x37742c(_0x5b40b7, _0x29ef77, _0x3f86e1));
                }
              }
            }
            var _0x58a3ed = 6;
            const _0x5a1d99 = [];
            _0x58a3ed = 8;
            var _0x4fe5d7 = _0x471b95.name || "default";
            var _0x5eef49 = _0x471b95.fps || 30;
            var _0x498fc1 = _0x471b95.blendMode;
            let _0x30777b = _0x471b95.length || -1;
            var _0x45e21a = _0x471b95.hierarchy || [];
            for (let _0x55ba8f = 0; _0x55ba8f < _0x45e21a.length; _0x55ba8f++) {
              var _0x30f796 = _0x45e21a[_0x55ba8f].keys;
              if (_0x30f796 && _0x30f796.length !== 0) {
                if (_0x30f796[0].morphTargets) {
                  const _0x20bfdf = {};
                  let _0x29b39b;
                  for (_0x29b39b = 0; _0x29b39b < _0x30f796.length; _0x29b39b++) {
                    if (_0x30f796[_0x29b39b].morphTargets) {
                      for (let _0xb23125 = 0; _0xb23125 < _0x30f796[_0x29b39b].morphTargets.length; _0xb23125++) {
                        _0x20bfdf[_0x30f796[_0x29b39b].morphTargets[_0xb23125]] = -1;
                      }
                    }
                  }
                  for (const _0x56d41e in _0x20bfdf) {
                    const _0x596cab = [];
                    const _0x439112 = [];
                    for (let _0x42a4bb = 0; _0x42a4bb !== _0x30f796[_0x29b39b].morphTargets.length; ++_0x42a4bb) {
                      var _0x2342ad = _0x30f796[_0x29b39b];
                      _0x596cab.push(_0x2342ad.time);
                      _0x439112.push(_0x2342ad.morphTarget === _0x56d41e ? 1 : 0);
                    }
                    _0x5a1d99.push(new _0x14bd5d(".morphTargetInfluence[" + _0x56d41e + "]", _0x596cab, _0x439112));
                  }
                  _0x30777b = _0x20bfdf.length * (_0x5eef49 || 1);
                } else {
                  var _0x483590 = ".bones[" + _0x3bb5f9[_0x55ba8f].name + "]";
                  _0x5cae1d(_0x3604eb, _0x483590 + ".position", _0x30f796, "pos", _0x5a1d99);
                  _0x5cae1d(_0x2319ad, _0x483590 + ".quaternion", _0x30f796, "rot", _0x5a1d99);
                  _0x5cae1d(_0x3604eb, _0x483590 + ".scale", _0x30f796, "scl", _0x5a1d99);
                }
              }
            }
            if (_0x5a1d99.length === 0) {
              return null;
            } else {
              return new this(_0x4fe5d7, _0x30777b, _0x5a1d99, _0x498fc1);
            }
          }
          resetDuration() {
            let _0x510a1c = 0;
            for (let _0x59fe61 = 0, _0x3d6e16 = this.tracks.length; _0x59fe61 !== _0x3d6e16; ++_0x59fe61) {
              var _0x49d242 = this.tracks[_0x59fe61];
              _0x510a1c = Math.max(_0x510a1c, _0x49d242.times[_0x49d242.times.length - 1]);
            }
            this.duration = _0x510a1c;
            return this;
          }
          trim() {
            for (let _0x26a7c2 = 0; _0x26a7c2 < this.tracks.length; _0x26a7c2++) {
              this.tracks[_0x26a7c2].trim(0, this.duration);
            }
            return this;
          }
          validate() {
            var _0x4a86ef = 12;
            let _0x327764 = true;
            _0x4a86ef = "nkbe";
            for (let _0x78d0db = 0; _0x78d0db < this.tracks.length; _0x78d0db++) {
              _0x327764 = _0x327764 && this.tracks[_0x78d0db].validate();
            }
            return _0x327764;
          }
          optimize() {
            for (let _0x41ed84 = 0; _0x41ed84 < this.tracks.length; _0x41ed84++) {
              this.tracks[_0x41ed84].optimize();
            }
            return this;
          }
          clone() {
            const _0x33ed2d = [];
            for (let _0x5e40cd = 0; _0x5e40cd < this.tracks.length; _0x5e40cd++) {
              _0x33ed2d.push(this.tracks[_0x5e40cd].clone());
            }
            return new this.constructor(this.name, this.duration, _0x33ed2d, this.blendMode);
          }
          toJSON() {
            return this.constructor.toJSON(this);
          }
        }
        const _0x20b6af = {
          enabled: !(_0x3604eb.prototype.ValueTypeName = "vector"),
          files: {},
          add: function (_0x5b43ef, _0x4230c8) {
            if (this.enabled !== false) {
              this.files[_0x5b43ef] = _0x4230c8;
            }
          },
          get: function (_0x222249) {
            if (this.enabled !== false) {
              return this.files[_0x222249];
            }
          },
          remove: function (_0x1d1e54) {
            delete this.files[_0x1d1e54];
          },
          clear: function () {
            this.files = {};
          }
        };
        class _0x5c0696 {
          constructor(_0x16386c, _0x68073e, _0x4dcc6f) {
            const _0xe18a41 = this;
            let _0x5c33b5;
            let _0x56295d = false;
            let _0x5b0632 = 0;
            let _0x9c6af = 0;
            const _0x495168 = [];
            this.onStart = undefined;
            this.onLoad = _0x16386c;
            this.onProgress = _0x68073e;
            this.onError = _0x4dcc6f;
            this.itemStart = function (_0x3392) {
              _0x9c6af++;
              if (_0x56295d === false && _0xe18a41.onStart !== undefined) {
                _0xe18a41.onStart(_0x3392, _0x5b0632, _0x9c6af);
              }
              _0x56295d = true;
            };
            this.itemEnd = function (_0xd20830) {
              _0x5b0632++;
              if (_0xe18a41.onProgress !== undefined) {
                _0xe18a41.onProgress(_0xd20830, _0x5b0632, _0x9c6af);
              }
              if (_0x5b0632 === _0x9c6af) {
                _0x56295d = false;
                if (_0xe18a41.onLoad !== undefined) {
                  _0xe18a41.onLoad();
                }
              }
            };
            this.itemError = function (_0x15b481) {
              if (_0xe18a41.onError !== undefined) {
                _0xe18a41.onError(_0x15b481);
              }
            };
            this.resolveURL = function (_0xfcb606) {
              if (_0x5c33b5) {
                return _0x5c33b5(_0xfcb606);
              } else {
                return _0xfcb606;
              }
            };
            this.setURLModifier = function (_0x2c05e4) {
              _0x5c33b5 = _0x2c05e4;
              return this;
            };
            this.addHandler = function (_0x18b864, _0x4582b7) {
              _0x495168.push(_0x18b864, _0x4582b7);
              return this;
            };
            this.removeHandler = function (_0x12971d) {
              if ((_0x12971d = _0x495168.indexOf(_0x12971d)) !== -1) {
                _0x495168.splice(_0x12971d, 2);
              }
              return this;
            };
            this.getHandler = function (_0x4288c6) {
              for (let _0x4e1b2c = 0, _0x59c8c1 = _0x495168.length; _0x4e1b2c < _0x59c8c1; _0x4e1b2c += 2) {
                const _0x4097fe = _0x495168[_0x4e1b2c];
                var _0x1a4194 = _0x495168[_0x4e1b2c + 1];
                if (_0x4097fe.global) {
                  _0x4097fe.lastIndex = 0;
                }
                if (_0x4097fe.test(_0x4288c6)) {
                  return _0x1a4194;
                }
              }
              return null;
            };
          }
        }
        const _0x53ffaa = new _0x5c0696();
        class _0x49b33b {
          constructor(_0x19f792) {
            this.manager = _0x19f792 !== undefined ? _0x19f792 : _0x53ffaa;
            this.crossOrigin = "anonymous";
            this.withCredentials = false;
            this.path = "";
            this.resourcePath = "";
            this.requestHeader = {};
          }
          load() {}
          loadAsync(_0x607fc, _0x1e87e9) {
            var _0x4e85ae;
            const _0x589832 = this;
            _0x4e85ae = "hgei";
            return new Promise(function (_0x308121, _0x5a3e97) {
              _0x589832.load(_0x607fc, _0x308121, _0x1e87e9, _0x5a3e97);
            });
          }
          parse() {}
          setCrossOrigin(_0x5d1e15) {
            this.crossOrigin = _0x5d1e15;
            return this;
          }
          setWithCredentials(_0x236457) {
            this.withCredentials = _0x236457;
            return this;
          }
          setPath(_0x489ab0) {
            this.path = _0x489ab0;
            return this;
          }
          setResourcePath(_0xf5ae91) {
            this.resourcePath = _0xf5ae91;
            return this;
          }
          setRequestHeader(_0xee11f7) {
            this.requestHeader = _0xee11f7;
            return this;
          }
        }
        const _0x1eff97 = {};
        class _0x2e611b extends _0x49b33b {
          constructor(_0x5aa98e) {
            super(_0x5aa98e);
          }
          load(_0x3930e7, _0x53d81c, _0x29fa7c, _0x1a564b) {
            if (_0x3930e7 === undefined) {
              _0x3930e7 = "";
            }
            if (this.path !== undefined) {
              _0x3930e7 = this.path + _0x3930e7;
            }
            _0x3930e7 = this.manager.resolveURL(_0x3930e7);
            var _0x36e232;
            const _0x4caa89 = _0x20b6af.get(_0x3930e7);
            _0x36e232 = 6;
            if (_0x4caa89 !== undefined) {
              this.manager.itemStart(_0x3930e7);
              // TOLOOK
              setTimeout(() => {
                if (_0x53d81c) {
                  _0x53d81c(_0x4caa89);
                }
                this.manager.itemEnd(_0x3930e7);
              }, 0);
              return _0x4caa89;
            }
            var _0x54af02;
            if (_0x1eff97[_0x3930e7] === undefined) {
              _0x1eff97[_0x3930e7] = [];
              _0x1eff97[_0x3930e7].push({
                onLoad: _0x53d81c,
                onProgress: _0x29fa7c,
                onError: _0x1a564b
              });
              _0x54af02 = new Request(_0x3930e7, {
                headers: new Headers(this.requestHeader),
                credentials: this.withCredentials ? "include" : "same-origin"
              });
              fetch(_0x54af02).then(_0x5de6f8 => {
                if (_0x5de6f8.status !== 200 && _0x5de6f8.status !== 0) {
                  throw Error("``````````````````````````````````````````");
                }
                {
                  _0x5de6f8.status;
                  if (typeof ReadableStream == "undefined" || _0x5de6f8.body.getReader === undefined) {
                    return _0x5de6f8;
                  }
                  const _0x4ee035 = _0x1eff97[_0x3930e7];
                  const _0x3fc43e = _0x5de6f8.body.getReader();
                  const _0x478db5 = (_0x5de6f8 = _0x5de6f8.headers.get("Content-Length")) ? parseInt(_0x5de6f8) : 0;
                  const _0x1e732c = _0x478db5 !== 0;
                  var _0x2bd5b8 = 15;
                  let _0x5215bb = 0;
                  _0x2bd5b8 = 8;
                  _0x5de6f8 = new ReadableStream({
                    start(_0x3a2b0c) {
                      (function _0x4d60bc() {
                        _0x3fc43e.read().then(({
                          done: _0x325d85,
                          value: _0x2edc81
                        }) => {
                          if (_0x325d85) {
                            _0x3a2b0c.close();
                          } else {
                            _0x5215bb += _0x2edc81.byteLength;
                            const _0x5bfa70 = new ProgressEvent("progress", {
                              lengthComputable: _0x1e732c,
                              loaded: _0x5215bb,
                              total: _0x478db5
                            });
                            for (let _0xf55611 = 0, _0xf7e5d1 = _0x4ee035.length; _0xf55611 < _0xf7e5d1; _0xf55611++) {
                              var _0x6d1e0 = 5;
                              const _0x38d6b0 = _0x4ee035[_0xf55611];
                              _0x6d1e0 = 1;
                              if (_0x38d6b0.onProgress) {
                                _0x38d6b0.onProgress(_0x5bfa70);
                              }
                            }
                            _0x3a2b0c.enqueue(_0x2edc81);
                            _0x4d60bc();
                          }
                        });
                      })();
                    }
                  });
                  return new Response(_0x5de6f8);
                }
              }).then(_0x1a1ec5 => {
                switch (this.responseType) {
                  case "arraybuffer":
                    return _0x1a1ec5.arrayBuffer();
                  case "blob":
                    return _0x1a1ec5.blob();
                  case "document":
                    return _0x1a1ec5.text().then(_0x3afa44 => new DOMParser().parseFromString(_0x3afa44, this.mimeType));
                  case "json":
                    return _0x1a1ec5.json();
                  default:
                    return _0x1a1ec5.text();
                }
              }).then(_0x48d78f => {
                _0x20b6af.add(_0x3930e7, _0x48d78f);
                var _0x58562a = _0x1eff97[_0x3930e7];
                delete _0x1eff97[_0x3930e7];
                for (let _0x519065 = 0, _0x512e3e = _0x58562a.length; _0x519065 < _0x512e3e; _0x519065++) {
                  const _0x19d37f = _0x58562a[_0x519065];
                  if (_0x19d37f.onLoad) {
                    _0x19d37f.onLoad(_0x48d78f);
                  }
                }
              }).catch(_0x251ff5 => {
                var _0x56fee1 = 6;
                var _0x642562 = _0x1eff97[_0x3930e7];
                _0x56fee1 = "ihjm";
                if (_0x642562 === undefined) {
                  this.manager.itemError(_0x3930e7);
                  throw _0x251ff5;
                }
                delete _0x1eff97[_0x3930e7];
                for (let _0x2b4046 = 0, _0x385f43 = _0x642562.length; _0x2b4046 < _0x385f43; _0x2b4046++) {
                  const _0x2e0e3b = _0x642562[_0x2b4046];
                  if (_0x2e0e3b.onError) {
                    _0x2e0e3b.onError(_0x251ff5);
                  }
                }
                this.manager.itemError(_0x3930e7);
              }).finally(() => {
                this.manager.itemEnd(_0x3930e7);
              });
              this.manager.itemStart(_0x3930e7);
            } else {
              _0x1eff97[_0x3930e7].push({
                onLoad: _0x53d81c,
                onProgress: _0x29fa7c,
                onError: _0x1a564b
              });
            }
          }
          setResponseType(_0xb9fbcd) {
            this.responseType = _0xb9fbcd;
            return this;
          }
          setMimeType(_0x4c1e10) {
            this.mimeType = _0x4c1e10;
            return this;
          }
        }
        class _0x1cb0d3 extends _0x49b33b {
          constructor(_0x919057) {
            super(_0x919057);
          }
          load(_0x510410, _0x385c5a, _0x43e680, _0x112e95) {
            const _0x37b619 = this;
            const _0x3e82c6 = new _0x2e611b(this.manager);
            _0x3e82c6.setPath(this.path);
            _0x3e82c6.setRequestHeader(this.requestHeader);
            _0x3e82c6.setWithCredentials(this.withCredentials);
            _0x3e82c6.load(_0x510410, function (_0x26d27c) {
              try {
                _0x385c5a(_0x37b619.parse(JSON.parse(_0x26d27c)));
              } catch (_0xa863ad) {
                if (_0x112e95) {
                  _0x112e95(_0xa863ad);
                }
                _0x37b619.manager.itemError(_0x510410);
              }
            }, _0x43e680, _0x112e95);
          }
          parse(_0x4d3c) {
            const _0x18202b = [];
            for (let _0x3e5da7 = 0; _0x3e5da7 < _0x4d3c.length; _0x3e5da7++) {
              var _0x13690d = _0xac731b.parse(_0x4d3c[_0x3e5da7]);
              _0x18202b.push(_0x13690d);
            }
            return _0x18202b;
          }
        }
        class _0x14555b extends _0x49b33b {
          constructor(_0x2a91eb) {
            super(_0x2a91eb);
          }
          load(_0x4d9ec9, _0x4847ea, _0x3043cb, _0x2177be) {
            const _0x43f8f3 = this;
            const _0x147984 = [];
            const _0x3a9b24 = new _0x4d21cf();
            const _0x4f8173 = new _0x2e611b(this.manager);
            _0x4f8173.setPath(this.path);
            _0x4f8173.setResponseType("arraybuffer");
            _0x4f8173.setRequestHeader(this.requestHeader);
            _0x4f8173.setWithCredentials(_0x43f8f3.withCredentials);
            var _0x302312 = 5;
            let _0x11ffe3 = 0;
            _0x302312 = 13;
            if (Array.isArray(_0x4d9ec9)) {
              for (let _0x1e49d8 = 0, _0x3677d5 = _0x4d9ec9.length; _0x1e49d8 < _0x3677d5; ++_0x1e49d8) {
                (function (_0x1816fe) {
                  _0x4f8173.load(_0x4d9ec9[_0x1816fe], function (_0x192223) {
                    _0x192223 = _0x43f8f3.parse(_0x192223, true);
                    _0x147984[_0x1816fe] = {
                      width: _0x192223.width,
                      height: _0x192223.height,
                      format: _0x192223.format,
                      mipmaps: _0x192223.mipmaps
                    };
                    _0x11ffe3 += 1;
                    if (_0x11ffe3 === 6) {
                      if (_0x192223.mipmapCount === 1) {
                        _0x3a9b24.minFilter = _0x202e90;
                      }
                      _0x3a9b24.image = _0x147984;
                      _0x3a9b24.format = _0x192223.format;
                      _0x3a9b24.needsUpdate = true;
                      if (_0x4847ea) {
                        _0x4847ea(_0x3a9b24);
                      }
                    }
                  }, _0x3043cb, _0x2177be);
                })(_0x1e49d8);
              }
            } else {
              _0x4f8173.load(_0x4d9ec9, function (_0x9d8471) {
                var _0x30be4d;
                var _0x29c9aa = _0x43f8f3.parse(_0x9d8471, true);
                _0x30be4d = 10;
                if (_0x29c9aa.isCubemap) {
                  var _0x5cadb6 = _0x29c9aa.mipmaps.length / _0x29c9aa.mipmapCount;
                  for (let _0x102578 = 0; _0x102578 < _0x5cadb6; _0x102578++) {
                    _0x147984[_0x102578] = {
                      mipmaps: []
                    };
                    for (let _0x3eb302 = 0; _0x3eb302 < _0x29c9aa.mipmapCount; _0x3eb302++) {
                      _0x147984[_0x102578].mipmaps.push(_0x29c9aa.mipmaps[_0x102578 * _0x29c9aa.mipmapCount + _0x3eb302]);
                      _0x147984[_0x102578].format = _0x29c9aa.format;
                      _0x147984[_0x102578].width = _0x29c9aa.width;
                      _0x147984[_0x102578].height = _0x29c9aa.height;
                    }
                  }
                  _0x3a9b24.image = _0x147984;
                } else {
                  _0x3a9b24.image.width = _0x29c9aa.width;
                  _0x3a9b24.image.height = _0x29c9aa.height;
                  _0x3a9b24.mipmaps = _0x29c9aa.mipmaps;
                }
                if (_0x29c9aa.mipmapCount === 1) {
                  _0x3a9b24.minFilter = _0x202e90;
                }
                _0x3a9b24.format = _0x29c9aa.format;
                _0x3a9b24.needsUpdate = true;
                if (_0x4847ea) {
                  _0x4847ea(_0x3a9b24);
                }
              }, _0x3043cb, _0x2177be);
            }
            return _0x3a9b24;
          }
        }
        class _0x40234e extends _0x49b33b {
          constructor(_0x1f9960) {
            super(_0x1f9960);
          }
          load(_0x3563e0, _0x1898fc, _0x437973, _0x2a3803) {
            if (this.path !== undefined) {
              _0x3563e0 = this.path + _0x3563e0;
            }
            _0x3563e0 = this.manager.resolveURL(_0x3563e0);
            const _0x1af4bf = this;
            const _0x4adfbe = _0x20b6af.get(_0x3563e0);
            if (_0x4adfbe !== undefined) {
              _0x1af4bf.manager.itemStart(_0x3563e0);
              // TOLOOK
              setTimeout(function () {
                if (_0x1898fc) {
                  _0x1898fc(_0x4adfbe);
                }
                _0x1af4bf.manager.itemEnd(_0x3563e0);
              }, 0);
              return _0x4adfbe;
            }
            const _0x47a488 = _0xc7d73e("img");
            function _0x3350e5() {
              _0x57c438();
              _0x20b6af.add(_0x3563e0, this);
              if (_0x1898fc) {
                _0x1898fc(this);
              }
              _0x1af4bf.manager.itemEnd(_0x3563e0);
            }
            function _0x8db99a(_0x40c781) {
              _0x57c438();
              if (_0x2a3803) {
                _0x2a3803(_0x40c781);
              }
              _0x1af4bf.manager.itemError(_0x3563e0);
              _0x1af4bf.manager.itemEnd(_0x3563e0);
            }
            function _0x57c438() {
              _0x47a488.removeEventListener("load", _0x3350e5, false);
              _0x47a488.removeEventListener("error", _0x8db99a, false);
            }
            _0x47a488.addEventListener("load", _0x3350e5, false);
            _0x47a488.addEventListener("error", _0x8db99a, false);
            if (_0x3563e0.substr(0, 5) !== "data:" && this.crossOrigin !== undefined) {
              _0x47a488.crossOrigin = this.crossOrigin;
            }
            _0x1af4bf.manager.itemStart(_0x3563e0);
            _0x47a488.src = _0x3563e0;
            return _0x47a488;
          }
        }
        class _0x73eeb7 extends _0x49b33b {
          constructor(_0x10bdab) {
            super(_0x10bdab);
          }
          load(_0x49f837, _0x21ea6f, _0x6664e, _0x403fff) {
            const _0x1e89d8 = new _0x50e2c1();
            const _0x1d30fa = new _0x40234e(this.manager);
            _0x1d30fa.setCrossOrigin(this.crossOrigin);
            _0x1d30fa.setPath(this.path);
            let _0x3b67a9 = 0;
            for (let _0x4f5e7e = 0; _0x4f5e7e < _0x49f837.length; ++_0x4f5e7e) {
              (function (_0x39a053) {
                _0x1d30fa.load(_0x49f837[_0x39a053], function (_0x1d5e83) {
                  _0x1e89d8.images[_0x39a053] = _0x1d5e83;
                  _0x3b67a9++;
                  if (_0x3b67a9 === 6) {
                    _0x1e89d8.needsUpdate = true;
                    if (_0x21ea6f) {
                      _0x21ea6f(_0x1e89d8);
                    }
                  }
                }, undefined, _0x403fff);
              })(_0x4f5e7e);
            }
            return _0x1e89d8;
          }
        }
        class _0x4123db extends _0x49b33b {
          constructor(_0x4c5181) {
            super(_0x4c5181);
          }
          load(_0x4580cd, _0x38cb8f, _0x5c28f3, _0x139bdd) {
            const _0x3e5b14 = this;
            const _0xe45e61 = new _0x415c15();
            const _0x37994a = new _0x2e611b(this.manager);
            _0x37994a.setResponseType("arraybuffer");
            _0x37994a.setRequestHeader(this.requestHeader);
            _0x37994a.setPath(this.path);
            _0x37994a.setWithCredentials(_0x3e5b14.withCredentials);
            _0x37994a.load(_0x4580cd, function (_0x231ff5) {
              if (_0x231ff5 = _0x3e5b14.parse(_0x231ff5)) {
                if (_0x231ff5.image !== undefined) {
                  _0xe45e61.image = _0x231ff5.image;
                } else if (_0x231ff5.data !== undefined) {
                  _0xe45e61.image.width = _0x231ff5.width;
                  _0xe45e61.image.height = _0x231ff5.height;
                  _0xe45e61.image.data = _0x231ff5.data;
                }
                _0xe45e61.wrapS = _0x231ff5.wrapS !== undefined ? _0x231ff5.wrapS : _0x4f55c6;
                _0xe45e61.wrapT = _0x231ff5.wrapT !== undefined ? _0x231ff5.wrapT : _0x4f55c6;
                _0xe45e61.magFilter = _0x231ff5.magFilter !== undefined ? _0x231ff5.magFilter : _0x202e90;
                _0xe45e61.minFilter = _0x231ff5.minFilter !== undefined ? _0x231ff5.minFilter : _0x202e90;
                _0xe45e61.anisotropy = _0x231ff5.anisotropy !== undefined ? _0x231ff5.anisotropy : 1;
                if (_0x231ff5.encoding !== undefined) {
                  _0xe45e61.encoding = _0x231ff5.encoding;
                }
                if (_0x231ff5.flipY !== undefined) {
                  _0xe45e61.flipY = _0x231ff5.flipY;
                }
                if (_0x231ff5.format !== undefined) {
                  _0xe45e61.format = _0x231ff5.format;
                }
                if (_0x231ff5.type !== undefined) {
                  _0xe45e61.type = _0x231ff5.type;
                }
                if (_0x231ff5.mipmaps !== undefined) {
                  _0xe45e61.mipmaps = _0x231ff5.mipmaps;
                  _0xe45e61.minFilter = _0x3f90fb;
                }
                if (_0x231ff5.mipmapCount === 1) {
                  _0xe45e61.minFilter = _0x202e90;
                }
                if (_0x231ff5.generateMipmaps !== undefined) {
                  _0xe45e61.generateMipmaps = _0x231ff5.generateMipmaps;
                }
                _0xe45e61.needsUpdate = true;
                if (_0x38cb8f) {
                  _0x38cb8f(_0xe45e61, _0x231ff5);
                }
              }
            }, _0x5c28f3, _0x139bdd);
            return _0xe45e61;
          }
        }
        class _0x1a00a6 extends _0x49b33b {
          constructor(_0x30e608) {
            super(_0x30e608);
          }
          load(_0x781f37, _0x527ca2, _0x4750c5, _0x438bf3) {
            const _0x25339d = new _0x3d39cb();
            const _0x362181 = new _0x40234e(this.manager);
            _0x362181.setCrossOrigin(this.crossOrigin);
            _0x362181.setPath(this.path);
            _0x362181.load(_0x781f37, function (_0x57e782) {
              _0x25339d.image = _0x57e782;
              _0x25339d.needsUpdate = true;
              if (_0x527ca2 !== undefined) {
                _0x527ca2(_0x25339d);
              }
            }, _0x4750c5, _0x438bf3);
            return _0x25339d;
          }
        }
        class _0x35e82a extends _0x3b73b1 {
          constructor(_0x161c02, _0x43fecd = 1) {
            super();
            this.type = "Light";
            this.color = new _0x1282c2(_0x161c02);
            this.intensity = _0x43fecd;
          }
          dispose() {}
          copy(_0x491714) {
            super.copy(_0x491714);
            this.color.copy(_0x491714.color);
            this.intensity = _0x491714.intensity;
            return this;
          }
          toJSON(_0x2b6c08) {
            const _0x5b23c3 = super.toJSON(_0x2b6c08);
            _0x5b23c3.object.color = this.color.getHex();
            _0x5b23c3.object.intensity = this.intensity;
            if (this.groundColor !== undefined) {
              _0x5b23c3.object.groundColor = this.groundColor.getHex();
            }
            if (this.distance !== undefined) {
              _0x5b23c3.object.distance = this.distance;
            }
            if (this.angle !== undefined) {
              _0x5b23c3.object.angle = this.angle;
            }
            if (this.decay !== undefined) {
              _0x5b23c3.object.decay = this.decay;
            }
            if (this.penumbra !== undefined) {
              _0x5b23c3.object.penumbra = this.penumbra;
            }
            if (this.shadow !== undefined) {
              _0x5b23c3.object.shadow = this.shadow.toJSON();
            }
            return _0x5b23c3;
          }
        }
        _0x35e82a.prototype.isLight = true;
        class _0x9dd963 extends _0x35e82a {
          constructor(_0x2412c7, _0x22b372, _0x549c7a) {
            super(_0x2412c7, _0x549c7a);
            this.type = "HemisphereLight";
            this.position.copy(_0x3b73b1.DefaultUp);
            this.updateMatrix();
            this.groundColor = new _0x1282c2(_0x22b372);
          }
          copy(_0xa93aa7) {
            _0x35e82a.prototype.copy.call(this, _0xa93aa7);
            this.groundColor.copy(_0xa93aa7.groundColor);
            return this;
          }
        }
        _0x9dd963.prototype.isHemisphereLight = true;
        const _0x3133a1 = new _0x33b2c9();
        const _0x279fdb = new _0x1d20ef();
        const _0x3322bf = new _0x1d20ef();
        class _0x566dfe {
          constructor(_0x457bb7) {
            this.camera = _0x457bb7;
            this.bias = 0;
            this.normalBias = 0;
            this.radius = 1;
            this.blurSamples = 8;
            this.mapSize = new _0x25f874(512, 512);
            this.map = null;
            this.mapPass = null;
            this.matrix = new _0x33b2c9();
            this.autoUpdate = true;
            this.needsUpdate = false;
            this._frustum = new _0x1d3bc5();
            this._frameExtents = new _0x25f874(1, 1);
            this._viewportCount = 1;
            this._viewports = [new _0x275701(0, 0, 1, 1)];
          }
          getViewportCount() {
            return this._viewportCount;
          }
          getFrustum() {
            return this._frustum;
          }
          updateMatrices(_0x1eee77) {
            const _0x152057 = this.camera;
            const _0x2dd2d2 = this.matrix;
            _0x279fdb.setFromMatrixPosition(_0x1eee77.matrixWorld);
            _0x152057.position.copy(_0x279fdb);
            _0x3322bf.setFromMatrixPosition(_0x1eee77.target.matrixWorld);
            _0x152057.lookAt(_0x3322bf);
            _0x152057.updateMatrixWorld();
            _0x3133a1.multiplyMatrices(_0x152057.projectionMatrix, _0x152057.matrixWorldInverse);
            this._frustum.setFromProjectionMatrix(_0x3133a1);
            _0x2dd2d2.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
            _0x2dd2d2.multiply(_0x152057.projectionMatrix);
            _0x2dd2d2.multiply(_0x152057.matrixWorldInverse);
          }
          getViewport(_0x4009d4) {
            return this._viewports[_0x4009d4];
          }
          getFrameExtents() {
            return this._frameExtents;
          }
          dispose() {
            if (this.map) {
              this.map.dispose();
            }
            if (this.mapPass) {
              this.mapPass.dispose();
            }
          }
          copy(_0x347e20) {
            this.camera = _0x347e20.camera.clone();
            this.bias = _0x347e20.bias;
            this.radius = _0x347e20.radius;
            this.mapSize.copy(_0x347e20.mapSize);
            return this;
          }
          clone() {
            return new this.constructor().copy(this);
          }
          toJSON() {
            var _0x5df33d = 2;
            const _0x50cdce = {};
            _0x5df33d = 6;
            if (this.bias !== 0) {
              _0x50cdce.bias = this.bias;
            }
            if (this.normalBias !== 0) {
              _0x50cdce.normalBias = this.normalBias;
            }
            if (this.radius !== 1) {
              _0x50cdce.radius = this.radius;
            }
            if (!(this.mapSize.x === 512 && this.mapSize.y === 512)) {
              _0x50cdce.mapSize = this.mapSize.toArray();
            }
            _0x50cdce.camera = this.camera.toJSON(false).object;
            delete _0x50cdce.camera.matrix;
            return _0x50cdce;
          }
        }
        class _0x515453 extends _0x566dfe {
          constructor() {
            super(new _0x41f6fd(50, 1, 0.5, 500));
            this.focus = 1;
          }
          updateMatrices(_0xed2ebc) {
            const _0x3b541e = this.camera;
            var _0x179699 = _0x77398c * 2 * _0xed2ebc.angle * this.focus;
            var _0x381af0 = this.mapSize.width / this.mapSize.height;
            var _0x2a6431 = _0xed2ebc.distance || _0x3b541e.far;
            if (!(_0x179699 === _0x3b541e.fov && _0x381af0 === _0x3b541e.aspect && _0x2a6431 === _0x3b541e.far)) {
              _0x3b541e.fov = _0x179699;
              _0x3b541e.aspect = _0x381af0;
              _0x3b541e.far = _0x2a6431;
              _0x3b541e.updateProjectionMatrix();
            }
            super.updateMatrices(_0xed2ebc);
          }
          copy(_0x7cbc6a) {
            super.copy(_0x7cbc6a);
            this.focus = _0x7cbc6a.focus;
            return this;
          }
        }
        _0x515453.prototype.isSpotLightShadow = true;
        class _0x4c87af extends _0x35e82a {
          constructor(_0x1cbf57, _0x51cef8, _0x503b3b = 0, _0x363bfd = Math.PI / 3, _0x286e97 = 0, _0x3e7d46 = 1) {
            super(_0x1cbf57, _0x51cef8);
            this.type = "SpotLight";
            this.position.copy(_0x3b73b1.DefaultUp);
            this.updateMatrix();
            this.target = new _0x3b73b1();
            this.distance = _0x503b3b;
            this.angle = _0x363bfd;
            this.penumbra = _0x286e97;
            this.decay = _0x3e7d46;
            this.shadow = new _0x515453();
          }
          get power() {
            return this.intensity * Math.PI;
          }
          set power(_0x1f1dd6) {
            this.intensity = _0x1f1dd6 / Math.PI;
          }
          dispose() {
            this.shadow.dispose();
          }
          copy(_0xd9f90e) {
            super.copy(_0xd9f90e);
            this.distance = _0xd9f90e.distance;
            this.angle = _0xd9f90e.angle;
            this.penumbra = _0xd9f90e.penumbra;
            this.decay = _0xd9f90e.decay;
            this.target = _0xd9f90e.target.clone();
            this.shadow = _0xd9f90e.shadow.clone();
            return this;
          }
        }
        _0x4c87af.prototype.isSpotLight = true;
        const _0x115237 = new _0x33b2c9();
        const _0x330786 = new _0x1d20ef();
        const _0xd1857d = new _0x1d20ef();
        class _0x2099db extends _0x566dfe {
          constructor() {
            super(new _0x41f6fd(90, 1, 0.5, 500));
            this._frameExtents = new _0x25f874(4, 2);
            this._viewportCount = 6;
            this._viewports = [new _0x275701(2, 1, 1, 1), new _0x275701(0, 1, 1, 1), new _0x275701(3, 1, 1, 1), new _0x275701(1, 1, 1, 1), new _0x275701(3, 0, 1, 1), new _0x275701(1, 0, 1, 1)];
            this._cubeDirections = [new _0x1d20ef(1, 0, 0), new _0x1d20ef(-1, 0, 0), new _0x1d20ef(0, 0, 1), new _0x1d20ef(0, 0, -1), new _0x1d20ef(0, 1, 0), new _0x1d20ef(0, -1, 0)];
            this._cubeUps = [new _0x1d20ef(0, 1, 0), new _0x1d20ef(0, 1, 0), new _0x1d20ef(0, 1, 0), new _0x1d20ef(0, 1, 0), new _0x1d20ef(0, 0, 1), new _0x1d20ef(0, 0, -1)];
          }
          updateMatrices(_0x382386, _0x12e60e = 0) {
            const _0x1d066e = this.camera;
            const _0x550b95 = this.matrix;
            var _0x148a35 = _0x382386.distance || _0x1d066e.far;
            if (_0x148a35 !== _0x1d066e.far) {
              _0x1d066e.far = _0x148a35;
              _0x1d066e.updateProjectionMatrix();
            }
            _0x330786.setFromMatrixPosition(_0x382386.matrixWorld);
            _0x1d066e.position.copy(_0x330786);
            _0xd1857d.copy(_0x1d066e.position);
            _0xd1857d.add(this._cubeDirections[_0x12e60e]);
            _0x1d066e.up.copy(this._cubeUps[_0x12e60e]);
            _0x1d066e.lookAt(_0xd1857d);
            _0x1d066e.updateMatrixWorld();
            _0x550b95.makeTranslation(-_0x330786.x, -_0x330786.y, -_0x330786.z);
            _0x115237.multiplyMatrices(_0x1d066e.projectionMatrix, _0x1d066e.matrixWorldInverse);
            this._frustum.setFromProjectionMatrix(_0x115237);
          }
        }
        _0x2099db.prototype.isPointLightShadow = true;
        class _0x484caa extends _0x35e82a {
          constructor(_0x15bb12, _0x545294, _0x464160 = 0, _0x5a1dfd = 1) {
            super(_0x15bb12, _0x545294);
            this.type = "PointLight";
            this.distance = _0x464160;
            this.decay = _0x5a1dfd;
            this.shadow = new _0x2099db();
          }
          get power() {
            return this.intensity * 4 * Math.PI;
          }
          set power(_0x271f54) {
            this.intensity = _0x271f54 / (Math.PI * 4);
          }
          dispose() {
            this.shadow.dispose();
          }
          copy(_0x15ea39) {
            super.copy(_0x15ea39);
            this.distance = _0x15ea39.distance;
            this.decay = _0x15ea39.decay;
            this.shadow = _0x15ea39.shadow.clone();
            return this;
          }
        }
        _0x484caa.prototype.isPointLight = true;
        class _0x442ccb extends _0x566dfe {
          constructor() {
            super(new _0x2a01ad(-5, 5, 5, -5, 0.5, 500));
          }
        }
        _0x442ccb.prototype.isDirectionalLightShadow = true;
        class _0x26c73e extends _0x35e82a {
          constructor(_0xc1ed, _0x14eefc) {
            super(_0xc1ed, _0x14eefc);
            this.type = "DirectionalLight";
            this.position.copy(_0x3b73b1.DefaultUp);
            this.updateMatrix();
            this.target = new _0x3b73b1();
            this.shadow = new _0x442ccb();
          }
          dispose() {
            this.shadow.dispose();
          }
          copy(_0x3e6dc6) {
            super.copy(_0x3e6dc6);
            this.target = _0x3e6dc6.target.clone();
            this.shadow = _0x3e6dc6.shadow.clone();
            return this;
          }
        }
        _0x26c73e.prototype.isDirectionalLight = true;
        class _0x186da0 extends _0x35e82a {
          constructor(_0x176b43, _0x4664f2) {
            super(_0x176b43, _0x4664f2);
            this.type = "AmbientLight";
          }
        }
        _0x186da0.prototype.isAmbientLight = true;
        class _0x17478f extends _0x35e82a {
          constructor(_0x8f2201, _0x551492, _0x276e0a = 10, _0xfc2d79 = 10) {
            super(_0x8f2201, _0x551492);
            this.type = "RectAreaLight";
            this.width = _0x276e0a;
            this.height = _0xfc2d79;
          }
          get power() {
            return this.intensity * this.width * this.height * Math.PI;
          }
          set power(_0x51c8a1) {
            this.intensity = _0x51c8a1 / (this.width * this.height * Math.PI);
          }
          copy(_0x4e6f89) {
            super.copy(_0x4e6f89);
            this.width = _0x4e6f89.width;
            this.height = _0x4e6f89.height;
            return this;
          }
          toJSON(_0x8761f) {
            var _0x545303;
            const _0x325a58 = super.toJSON(_0x8761f);
            _0x545303 = 4;
            _0x325a58.object.width = this.width;
            _0x325a58.object.height = this.height;
            return _0x325a58;
          }
        }
        _0x17478f.prototype.isRectAreaLight = true;
        class _0xa5033 {
          constructor() {
            this.coefficients = [];
            for (let _0x6d48fa = 0; _0x6d48fa < 9; _0x6d48fa++) {
              this.coefficients.push(new _0x1d20ef());
            }
          }
          set(_0x5c6d45) {
            for (let _0x3215f2 = 0; _0x3215f2 < 9; _0x3215f2++) {
              this.coefficients[_0x3215f2].copy(_0x5c6d45[_0x3215f2]);
            }
            return this;
          }
          zero() {
            for (let _0x1acf56 = 0; _0x1acf56 < 9; _0x1acf56++) {
              this.coefficients[_0x1acf56].set(0, 0, 0);
            }
            return this;
          }
          getAt(_0x5cdec2, _0x214af8) {
            var _0x4a0ccb = _0x5cdec2.x;
            var _0xef9d5c = _0x5cdec2.y;
            var _0x3fedf8 = _0x5cdec2.z;
            _0x5cdec2 = this.coefficients;
            _0x214af8.copy(_0x5cdec2[0]).multiplyScalar(0.282095);
            _0x214af8.addScaledVector(_0x5cdec2[1], _0xef9d5c * 0.488603);
            _0x214af8.addScaledVector(_0x5cdec2[2], _0x3fedf8 * 0.488603);
            _0x214af8.addScaledVector(_0x5cdec2[3], _0x4a0ccb * 0.488603);
            _0x214af8.addScaledVector(_0x5cdec2[4], _0x4a0ccb * _0xef9d5c * 1.092548);
            _0x214af8.addScaledVector(_0x5cdec2[5], _0xef9d5c * _0x3fedf8 * 1.092548);
            _0x214af8.addScaledVector(_0x5cdec2[6], (_0x3fedf8 * 3 * _0x3fedf8 - 1) * 0.315392);
            _0x214af8.addScaledVector(_0x5cdec2[7], _0x4a0ccb * _0x3fedf8 * 1.092548);
            _0x214af8.addScaledVector(_0x5cdec2[8], (_0x4a0ccb * _0x4a0ccb - _0xef9d5c * _0xef9d5c) * 0.546274);
            return _0x214af8;
          }
          getIrradianceAt(_0x414a9e, _0x1f5613) {
            var _0x515771 = _0x414a9e.x;
            var _0x34f4b3 = _0x414a9e.y;
            var _0xa40ef4 = _0x414a9e.z;
            _0x414a9e = this.coefficients;
            _0x1f5613.copy(_0x414a9e[0]).multiplyScalar(0.886227);
            _0x1f5613.addScaledVector(_0x414a9e[1], _0x34f4b3 * 1.023328);
            _0x1f5613.addScaledVector(_0x414a9e[2], _0xa40ef4 * 1.023328);
            _0x1f5613.addScaledVector(_0x414a9e[3], _0x515771 * 1.023328);
            _0x1f5613.addScaledVector(_0x414a9e[4], _0x515771 * 0.858086 * _0x34f4b3);
            _0x1f5613.addScaledVector(_0x414a9e[5], _0x34f4b3 * 0.858086 * _0xa40ef4);
            _0x1f5613.addScaledVector(_0x414a9e[6], _0xa40ef4 * 0.743125 * _0xa40ef4 - 0.247708);
            _0x1f5613.addScaledVector(_0x414a9e[7], _0x515771 * 0.858086 * _0xa40ef4);
            _0x1f5613.addScaledVector(_0x414a9e[8], (_0x515771 * _0x515771 - _0x34f4b3 * _0x34f4b3) * 0.429043);
            return _0x1f5613;
          }
          add(_0x6d9fbe) {
            for (let _0x2f0efa = 0; _0x2f0efa < 9; _0x2f0efa++) {
              this.coefficients[_0x2f0efa].add(_0x6d9fbe.coefficients[_0x2f0efa]);
            }
            return this;
          }
          addScaledSH(_0x1fc786, _0xc528cf) {
            for (let _0x1baf0b = 0; _0x1baf0b < 9; _0x1baf0b++) {
              this.coefficients[_0x1baf0b].addScaledVector(_0x1fc786.coefficients[_0x1baf0b], _0xc528cf);
            }
            return this;
          }
          scale(_0x20c3ff) {
            for (let _0x34d2e9 = 0; _0x34d2e9 < 9; _0x34d2e9++) {
              this.coefficients[_0x34d2e9].multiplyScalar(_0x20c3ff);
            }
            return this;
          }
          lerp(_0x126c70, _0x5093e2) {
            for (let _0x4c467c = 0; _0x4c467c < 9; _0x4c467c++) {
              this.coefficients[_0x4c467c].lerp(_0x126c70.coefficients[_0x4c467c], _0x5093e2);
            }
            return this;
          }
          equals(_0x5ab26d) {
            for (let _0x32ade6 = 0; _0x32ade6 < 9; _0x32ade6++) {
              if (!this.coefficients[_0x32ade6].equals(_0x5ab26d.coefficients[_0x32ade6])) {
                return false;
              }
            }
            return true;
          }
          copy(_0x2c9723) {
            return this.set(_0x2c9723.coefficients);
          }
          clone() {
            return new this.constructor().copy(this);
          }
          fromArray(_0x3d08ab, _0x338dd6 = 0) {
            var _0x4140d4 = 9;
            const _0x150e37 = this.coefficients;
            _0x4140d4 = 8;
            for (let _0x49cd39 = 0; _0x49cd39 < 9; _0x49cd39++) {
              _0x150e37[_0x49cd39].fromArray(_0x3d08ab, _0x338dd6 + _0x49cd39 * 3);
            }
            return this;
          }
          toArray(_0x324822 = [], _0x283f66 = 0) {
            const _0x31bfd2 = this.coefficients;
            for (let _0x392776 = 0; _0x392776 < 9; _0x392776++) {
              _0x31bfd2[_0x392776].toArray(_0x324822, _0x283f66 + _0x392776 * 3);
            }
            return _0x324822;
          }
          static getBasisAt(_0x282577, _0x162d80) {
            var _0x149cf5 = _0x282577.x;
            var _0x5e2065 = _0x282577.y;
            _0x282577 = _0x282577.z;
            _0x162d80[0] = 0.282095;
            _0x162d80[1] = _0x5e2065 * 0.488603;
            _0x162d80[2] = _0x282577 * 0.488603;
            _0x162d80[3] = _0x149cf5 * 0.488603;
            _0x162d80[4] = _0x149cf5 * 1.092548 * _0x5e2065;
            _0x162d80[5] = _0x5e2065 * 1.092548 * _0x282577;
            _0x162d80[6] = (_0x282577 * 3 * _0x282577 - 1) * 0.315392;
            _0x162d80[7] = _0x149cf5 * 1.092548 * _0x282577;
            _0x162d80[8] = (_0x149cf5 * _0x149cf5 - _0x5e2065 * _0x5e2065) * 0.546274;
          }
        }
        _0xa5033.prototype.isSphericalHarmonics3 = true;
        class _0x1a6fa1 extends _0x35e82a {
          constructor(_0x6fc2e5 = new _0xa5033(), _0x3511ea = 1) {
            super(undefined, _0x3511ea);
            this.sh = _0x6fc2e5;
          }
          copy(_0x18b97d) {
            super.copy(_0x18b97d);
            this.sh.copy(_0x18b97d.sh);
            return this;
          }
          fromJSON(_0x38bf0b) {
            this.intensity = _0x38bf0b.intensity;
            this.sh.fromArray(_0x38bf0b.sh);
            return this;
          }
          toJSON(_0x68deb5) {
            const _0x33863a = super.toJSON(_0x68deb5);
            _0x33863a.object.sh = this.sh.toArray();
            return _0x33863a;
          }
        }
        _0x1a6fa1.prototype.isLightProbe = true;
        class _0x1f5f31 extends _0x49b33b {
          constructor(_0x36fe6a) {
            super(_0x36fe6a);
            this.textures = {};
          }
          load(_0x5b4817, _0x5022d3, _0x4e7e1f, _0x511a8f) {
            const _0x531e70 = this;
            const _0x5f3193 = new _0x2e611b(_0x531e70.manager);
            _0x5f3193.setPath(_0x531e70.path);
            _0x5f3193.setRequestHeader(_0x531e70.requestHeader);
            _0x5f3193.setWithCredentials(_0x531e70.withCredentials);
            _0x5f3193.load(_0x5b4817, function (_0x580be1) {
              try {
                _0x5022d3(_0x531e70.parse(JSON.parse(_0x580be1)));
              } catch (_0x280d77) {
                if (_0x511a8f) {
                  _0x511a8f(_0x280d77);
                }
                _0x531e70.manager.itemError(_0x5b4817);
              }
            }, _0x4e7e1f, _0x511a8f);
          }
          parse(_0x45ca03) {
            const _0x2fa037 = this.textures;
            function _0x598f49(_0x167c3e) {
              _0x2fa037[_0x167c3e];
              return _0x2fa037[_0x167c3e];
            }
            const _0x1bbc66 = new _0x4ebf35[_0x45ca03.type]();
            if (_0x45ca03.uuid !== undefined) {
              _0x1bbc66.uuid = _0x45ca03.uuid;
            }
            if (_0x45ca03.name !== undefined) {
              _0x1bbc66.name = _0x45ca03.name;
            }
            if (_0x45ca03.color !== undefined && _0x1bbc66.color !== undefined) {
              _0x1bbc66.color.setHex(_0x45ca03.color);
            }
            if (_0x45ca03.roughness !== undefined) {
              _0x1bbc66.roughness = _0x45ca03.roughness;
            }
            if (_0x45ca03.metalness !== undefined) {
              _0x1bbc66.metalness = _0x45ca03.metalness;
            }
            if (_0x45ca03.sheen !== undefined) {
              _0x1bbc66.sheen = _0x45ca03.sheen;
            }
            if (_0x45ca03.sheenColor !== undefined) {
              _0x1bbc66.sheenColor = new _0x1282c2().setHex(_0x45ca03.sheenColor);
            }
            if (_0x45ca03.sheenRoughness !== undefined) {
              _0x1bbc66.sheenRoughness = _0x45ca03.sheenRoughness;
            }
            if (_0x45ca03.emissive !== undefined && _0x1bbc66.emissive !== undefined) {
              _0x1bbc66.emissive.setHex(_0x45ca03.emissive);
            }
            if (_0x45ca03.specular !== undefined && _0x1bbc66.specular !== undefined) {
              _0x1bbc66.specular.setHex(_0x45ca03.specular);
            }
            if (_0x45ca03.specularIntensity !== undefined) {
              _0x1bbc66.specularIntensity = _0x45ca03.specularIntensity;
            }
            if (_0x45ca03.specularColor !== undefined && _0x1bbc66.specularColor !== undefined) {
              _0x1bbc66.specularColor.setHex(_0x45ca03.specularColor);
            }
            if (_0x45ca03.shininess !== undefined) {
              _0x1bbc66.shininess = _0x45ca03.shininess;
            }
            if (_0x45ca03.clearcoat !== undefined) {
              _0x1bbc66.clearcoat = _0x45ca03.clearcoat;
            }
            if (_0x45ca03.clearcoatRoughness !== undefined) {
              _0x1bbc66.clearcoatRoughness = _0x45ca03.clearcoatRoughness;
            }
            if (_0x45ca03.transmission !== undefined) {
              _0x1bbc66.transmission = _0x45ca03.transmission;
            }
            if (_0x45ca03.thickness !== undefined) {
              _0x1bbc66.thickness = _0x45ca03.thickness;
            }
            if (_0x45ca03.attenuationDistance !== undefined) {
              _0x1bbc66.attenuationDistance = _0x45ca03.attenuationDistance;
            }
            if (_0x45ca03.attenuationColor !== undefined && _0x1bbc66.attenuationColor !== undefined) {
              _0x1bbc66.attenuationColor.setHex(_0x45ca03.attenuationColor);
            }
            if (_0x45ca03.fog !== undefined) {
              _0x1bbc66.fog = _0x45ca03.fog;
            }
            if (_0x45ca03.flatShading !== undefined) {
              _0x1bbc66.flatShading = _0x45ca03.flatShading;
            }
            if (_0x45ca03.blending !== undefined) {
              _0x1bbc66.blending = _0x45ca03.blending;
            }
            if (_0x45ca03.combine !== undefined) {
              _0x1bbc66.combine = _0x45ca03.combine;
            }
            if (_0x45ca03.side !== undefined) {
              _0x1bbc66.side = _0x45ca03.side;
            }
            if (_0x45ca03.shadowSide !== undefined) {
              _0x1bbc66.shadowSide = _0x45ca03.shadowSide;
            }
            if (_0x45ca03.opacity !== undefined) {
              _0x1bbc66.opacity = _0x45ca03.opacity;
            }
            if (_0x45ca03.format !== undefined) {
              _0x1bbc66.format = _0x45ca03.format;
            }
            if (_0x45ca03.transparent !== undefined) {
              _0x1bbc66.transparent = _0x45ca03.transparent;
            }
            if (_0x45ca03.alphaTest !== undefined) {
              _0x1bbc66.alphaTest = _0x45ca03.alphaTest;
            }
            if (_0x45ca03.depthTest !== undefined) {
              _0x1bbc66.depthTest = _0x45ca03.depthTest;
            }
            if (_0x45ca03.depthWrite !== undefined) {
              _0x1bbc66.depthWrite = _0x45ca03.depthWrite;
            }
            if (_0x45ca03.colorWrite !== undefined) {
              _0x1bbc66.colorWrite = _0x45ca03.colorWrite;
            }
            if (_0x45ca03.stencilWrite !== undefined) {
              _0x1bbc66.stencilWrite = _0x45ca03.stencilWrite;
            }
            if (_0x45ca03.stencilWriteMask !== undefined) {
              _0x1bbc66.stencilWriteMask = _0x45ca03.stencilWriteMask;
            }
            if (_0x45ca03.stencilFunc !== undefined) {
              _0x1bbc66.stencilFunc = _0x45ca03.stencilFunc;
            }
            if (_0x45ca03.stencilRef !== undefined) {
              _0x1bbc66.stencilRef = _0x45ca03.stencilRef;
            }
            if (_0x45ca03.stencilFuncMask !== undefined) {
              _0x1bbc66.stencilFuncMask = _0x45ca03.stencilFuncMask;
            }
            if (_0x45ca03.stencilFail !== undefined) {
              _0x1bbc66.stencilFail = _0x45ca03.stencilFail;
            }
            if (_0x45ca03.stencilZFail !== undefined) {
              _0x1bbc66.stencilZFail = _0x45ca03.stencilZFail;
            }
            if (_0x45ca03.stencilZPass !== undefined) {
              _0x1bbc66.stencilZPass = _0x45ca03.stencilZPass;
            }
            if (_0x45ca03.wireframe !== undefined) {
              _0x1bbc66.wireframe = _0x45ca03.wireframe;
            }
            if (_0x45ca03.wireframeLinewidth !== undefined) {
              _0x1bbc66.wireframeLinewidth = _0x45ca03.wireframeLinewidth;
            }
            if (_0x45ca03.wireframeLinecap !== undefined) {
              _0x1bbc66.wireframeLinecap = _0x45ca03.wireframeLinecap;
            }
            if (_0x45ca03.wireframeLinejoin !== undefined) {
              _0x1bbc66.wireframeLinejoin = _0x45ca03.wireframeLinejoin;
            }
            if (_0x45ca03.rotation !== undefined) {
              _0x1bbc66.rotation = _0x45ca03.rotation;
            }
            if (_0x45ca03.linewidth !== 1) {
              _0x1bbc66.linewidth = _0x45ca03.linewidth;
            }
            if (_0x45ca03.dashSize !== undefined) {
              _0x1bbc66.dashSize = _0x45ca03.dashSize;
            }
            if (_0x45ca03.gapSize !== undefined) {
              _0x1bbc66.gapSize = _0x45ca03.gapSize;
            }
            if (_0x45ca03.scale !== undefined) {
              _0x1bbc66.scale = _0x45ca03.scale;
            }
            if (_0x45ca03.polygonOffset !== undefined) {
              _0x1bbc66.polygonOffset = _0x45ca03.polygonOffset;
            }
            if (_0x45ca03.polygonOffsetFactor !== undefined) {
              _0x1bbc66.polygonOffsetFactor = _0x45ca03.polygonOffsetFactor;
            }
            if (_0x45ca03.polygonOffsetUnits !== undefined) {
              _0x1bbc66.polygonOffsetUnits = _0x45ca03.polygonOffsetUnits;
            }
            if (_0x45ca03.dithering !== undefined) {
              _0x1bbc66.dithering = _0x45ca03.dithering;
            }
            if (_0x45ca03.alphaToCoverage !== undefined) {
              _0x1bbc66.alphaToCoverage = _0x45ca03.alphaToCoverage;
            }
            if (_0x45ca03.premultipliedAlpha !== undefined) {
              _0x1bbc66.premultipliedAlpha = _0x45ca03.premultipliedAlpha;
            }
            if (_0x45ca03.visible !== undefined) {
              _0x1bbc66.visible = _0x45ca03.visible;
            }
            if (_0x45ca03.toneMapped !== undefined) {
              _0x1bbc66.toneMapped = _0x45ca03.toneMapped;
            }
            if (_0x45ca03.userData !== undefined) {
              _0x1bbc66.userData = _0x45ca03.userData;
            }
            if (_0x45ca03.vertexColors !== undefined) {
              if (typeof _0x45ca03.vertexColors == "number") {
                _0x1bbc66.vertexColors = _0x45ca03.vertexColors > 0;
              } else {
                _0x1bbc66.vertexColors = _0x45ca03.vertexColors;
              }
            }
            if (_0x45ca03.uniforms !== undefined) {
              for (const _0x56a7f5 in _0x45ca03.uniforms) {
                var _0x1e458a = _0x45ca03.uniforms[_0x56a7f5];
                _0x1bbc66.uniforms[_0x56a7f5] = {};
                switch (_0x1e458a.type) {
                  case "t":
                    _0x1bbc66.uniforms[_0x56a7f5].value = _0x598f49(_0x1e458a.value);
                    break;
                  case "c":
                    _0x1bbc66.uniforms[_0x56a7f5].value = new _0x1282c2().setHex(_0x1e458a.value);
                    break;
                  case "v2":
                    _0x1bbc66.uniforms[_0x56a7f5].value = new _0x25f874().fromArray(_0x1e458a.value);
                    break;
                  case "v3":
                    _0x1bbc66.uniforms[_0x56a7f5].value = new _0x1d20ef().fromArray(_0x1e458a.value);
                    break;
                  case "v4":
                    _0x1bbc66.uniforms[_0x56a7f5].value = new _0x275701().fromArray(_0x1e458a.value);
                    break;
                  case "m3":
                    _0x1bbc66.uniforms[_0x56a7f5].value = new _0x30cf5e().fromArray(_0x1e458a.value);
                    break;
                  case "m4":
                    _0x1bbc66.uniforms[_0x56a7f5].value = new _0x33b2c9().fromArray(_0x1e458a.value);
                    break;
                  default:
                    _0x1bbc66.uniforms[_0x56a7f5].value = _0x1e458a.value;
                }
              }
            }
            if (_0x45ca03.defines !== undefined) {
              _0x1bbc66.defines = _0x45ca03.defines;
            }
            if (_0x45ca03.vertexShader !== undefined) {
              _0x1bbc66.vertexShader = _0x45ca03.vertexShader;
            }
            if (_0x45ca03.fragmentShader !== undefined) {
              _0x1bbc66.fragmentShader = _0x45ca03.fragmentShader;
            }
            if (_0x45ca03.extensions !== undefined) {
              for (const _0x23a4c0 in _0x45ca03.extensions) {
                _0x1bbc66.extensions[_0x23a4c0] = _0x45ca03.extensions[_0x23a4c0];
              }
            }
            if (_0x45ca03.shading !== undefined) {
              _0x1bbc66.flatShading = _0x45ca03.shading === 1;
            }
            if (_0x45ca03.size !== undefined) {
              _0x1bbc66.size = _0x45ca03.size;
            }
            if (_0x45ca03.sizeAttenuation !== undefined) {
              _0x1bbc66.sizeAttenuation = _0x45ca03.sizeAttenuation;
            }
            if (_0x45ca03.map !== undefined) {
              _0x1bbc66.map = _0x598f49(_0x45ca03.map);
            }
            if (_0x45ca03.matcap !== undefined) {
              _0x1bbc66.matcap = _0x598f49(_0x45ca03.matcap);
            }
            if (_0x45ca03.alphaMap !== undefined) {
              _0x1bbc66.alphaMap = _0x598f49(_0x45ca03.alphaMap);
            }
            if (_0x45ca03.bumpMap !== undefined) {
              _0x1bbc66.bumpMap = _0x598f49(_0x45ca03.bumpMap);
            }
            if (_0x45ca03.bumpScale !== undefined) {
              _0x1bbc66.bumpScale = _0x45ca03.bumpScale;
            }
            if (_0x45ca03.normalMap !== undefined) {
              _0x1bbc66.normalMap = _0x598f49(_0x45ca03.normalMap);
            }
            if (_0x45ca03.normalMapType !== undefined) {
              _0x1bbc66.normalMapType = _0x45ca03.normalMapType;
            }
            if (_0x45ca03.normalScale !== undefined) {
              let _0x4afaf2 = _0x45ca03.normalScale;
              if (Array.isArray(_0x4afaf2) === false) {
                _0x4afaf2 = [_0x4afaf2, _0x4afaf2];
              }
              _0x1bbc66.normalScale = new _0x25f874().fromArray(_0x4afaf2);
            }
            if (_0x45ca03.displacementMap !== undefined) {
              _0x1bbc66.displacementMap = _0x598f49(_0x45ca03.displacementMap);
            }
            if (_0x45ca03.displacementScale !== undefined) {
              _0x1bbc66.displacementScale = _0x45ca03.displacementScale;
            }
            if (_0x45ca03.displacementBias !== undefined) {
              _0x1bbc66.displacementBias = _0x45ca03.displacementBias;
            }
            if (_0x45ca03.roughnessMap !== undefined) {
              _0x1bbc66.roughnessMap = _0x598f49(_0x45ca03.roughnessMap);
            }
            if (_0x45ca03.metalnessMap !== undefined) {
              _0x1bbc66.metalnessMap = _0x598f49(_0x45ca03.metalnessMap);
            }
            if (_0x45ca03.emissiveMap !== undefined) {
              _0x1bbc66.emissiveMap = _0x598f49(_0x45ca03.emissiveMap);
            }
            if (_0x45ca03.emissiveIntensity !== undefined) {
              _0x1bbc66.emissiveIntensity = _0x45ca03.emissiveIntensity;
            }
            if (_0x45ca03.specularMap !== undefined) {
              _0x1bbc66.specularMap = _0x598f49(_0x45ca03.specularMap);
            }
            if (_0x45ca03.specularIntensityMap !== undefined) {
              _0x1bbc66.specularIntensityMap = _0x598f49(_0x45ca03.specularIntensityMap);
            }
            if (_0x45ca03.specularColorMap !== undefined) {
              _0x1bbc66.specularColorMap = _0x598f49(_0x45ca03.specularColorMap);
            }
            if (_0x45ca03.envMap !== undefined) {
              _0x1bbc66.envMap = _0x598f49(_0x45ca03.envMap);
            }
            if (_0x45ca03.envMapIntensity !== undefined) {
              _0x1bbc66.envMapIntensity = _0x45ca03.envMapIntensity;
            }
            if (_0x45ca03.reflectivity !== undefined) {
              _0x1bbc66.reflectivity = _0x45ca03.reflectivity;
            }
            if (_0x45ca03.refractionRatio !== undefined) {
              _0x1bbc66.refractionRatio = _0x45ca03.refractionRatio;
            }
            if (_0x45ca03.lightMap !== undefined) {
              _0x1bbc66.lightMap = _0x598f49(_0x45ca03.lightMap);
            }
            if (_0x45ca03.lightMapIntensity !== undefined) {
              _0x1bbc66.lightMapIntensity = _0x45ca03.lightMapIntensity;
            }
            if (_0x45ca03.aoMap !== undefined) {
              _0x1bbc66.aoMap = _0x598f49(_0x45ca03.aoMap);
            }
            if (_0x45ca03.aoMapIntensity !== undefined) {
              _0x1bbc66.aoMapIntensity = _0x45ca03.aoMapIntensity;
            }
            if (_0x45ca03.gradientMap !== undefined) {
              _0x1bbc66.gradientMap = _0x598f49(_0x45ca03.gradientMap);
            }
            if (_0x45ca03.clearcoatMap !== undefined) {
              _0x1bbc66.clearcoatMap = _0x598f49(_0x45ca03.clearcoatMap);
            }
            if (_0x45ca03.clearcoatRoughnessMap !== undefined) {
              _0x1bbc66.clearcoatRoughnessMap = _0x598f49(_0x45ca03.clearcoatRoughnessMap);
            }
            if (_0x45ca03.clearcoatNormalMap !== undefined) {
              _0x1bbc66.clearcoatNormalMap = _0x598f49(_0x45ca03.clearcoatNormalMap);
            }
            if (_0x45ca03.clearcoatNormalScale !== undefined) {
              _0x1bbc66.clearcoatNormalScale = new _0x25f874().fromArray(_0x45ca03.clearcoatNormalScale);
            }
            if (_0x45ca03.transmissionMap !== undefined) {
              _0x1bbc66.transmissionMap = _0x598f49(_0x45ca03.transmissionMap);
            }
            if (_0x45ca03.thicknessMap !== undefined) {
              _0x1bbc66.thicknessMap = _0x598f49(_0x45ca03.thicknessMap);
            }
            if (_0x45ca03.sheenColorMap !== undefined) {
              _0x1bbc66.sheenColorMap = _0x598f49(_0x45ca03.sheenColorMap);
            }
            if (_0x45ca03.sheenRoughnessMap !== undefined) {
              _0x1bbc66.sheenRoughnessMap = _0x598f49(_0x45ca03.sheenRoughnessMap);
            }
            return _0x1bbc66;
          }
          setTextures(_0xac9ea) {
            this.textures = _0xac9ea;
            return this;
          }
        }
        class _0x22c4d1 {
          static decodeText(_0x302e27) {
            if (typeof TextDecoder != "undefined") {
              return new TextDecoder().decode(_0x302e27);
            }
            let _0x122b70 = "";
            for (let _0x116919 = 0, _0xbcda08 = _0x302e27.length; _0x116919 < _0xbcda08; _0x116919++) {
              _0x122b70 += String.fromCharCode(_0x302e27[_0x116919]);
            }
            try {
              return decodeURIComponent(escape(_0x122b70));
            } catch (_0x4b9b55) {
              return _0x122b70;
            }
          }
          static extractUrlBase(_0x19bde3) {
            var _0x1731d0 = _0x19bde3.lastIndexOf("/");
            if (_0x1731d0 === -1) {
              return "./";
            } else {
              return _0x19bde3.substr(0, _0x1731d0 + 1);
            }
          }
          static resolveURL(_0x224f20, _0x91ed2a) {
            if (typeof _0x224f20 != "string" || _0x224f20 === "") {
              return "";
            } else {
              if (/^https?:\/\//i.test(_0x91ed2a) && /^\//.test(_0x224f20)) {
                _0x91ed2a = _0x91ed2a.replace(/(^https?:\/\/[^\/]+).*/i, "$1");
              }
              if (/^(https?:)?\/\//i.test(_0x224f20) || /^data:.*,.*$/i.test(_0x224f20) || /^blob:.*$/i.test(_0x224f20)) {
                return _0x224f20;
              } else {
                return _0x91ed2a + _0x224f20;
              }
            }
          }
        }
        class _0x5b7573 extends _0x3f374d {
          constructor() {
            super();
            this.type = "InstancedBufferGeometry";
            this.instanceCount = Infinity;
          }
          copy(_0x5f197) {
            super.copy(_0x5f197);
            this.instanceCount = _0x5f197.instanceCount;
            return this;
          }
          clone() {
            return new this.constructor().copy(this);
          }
          toJSON() {
            const _0x155be8 = super.toJSON(this);
            _0x155be8.instanceCount = this.instanceCount;
            _0x155be8.isInstancedBufferGeometry = true;
            return _0x155be8;
          }
        }
        _0x5b7573.prototype.isInstancedBufferGeometry = true;
        class _0x40014d extends _0x49b33b {
          constructor(_0x5dbf00) {
            super(_0x5dbf00);
          }
          load(_0x1fd24c, _0x441804, _0x4d4e91, _0x3a1214) {
            const _0x34898d = this;
            const _0x50fd41 = new _0x2e611b(_0x34898d.manager);
            _0x50fd41.setPath(_0x34898d.path);
            _0x50fd41.setRequestHeader(_0x34898d.requestHeader);
            _0x50fd41.setWithCredentials(_0x34898d.withCredentials);
            _0x50fd41.load(_0x1fd24c, function (_0x48128b) {
              try {
                _0x441804(_0x34898d.parse(JSON.parse(_0x48128b)));
              } catch (_0x56c048) {
                if (_0x3a1214) {
                  _0x3a1214(_0x56c048);
                }
                _0x34898d.manager.itemError(_0x1fd24c);
              }
            }, _0x4d4e91, _0x3a1214);
          }
          parse(_0x401b75) {
            const _0x3a583a = {};
            const _0x1241b4 = {};
            function _0x59edd7(_0x5d7a47, _0xafe439) {
              if (_0x3a583a[_0xafe439] !== undefined) {
                return _0x3a583a[_0xafe439];
              }
              var _0x11842f = _0x5d7a47.interleavedBuffers[_0xafe439];
              _0x5d7a47 = function (_0x59d9cb, _0x194cfb) {
                if (_0x1241b4[_0x194cfb] !== undefined) {
                  return _0x1241b4[_0x194cfb];
                } else {
                  _0x59d9cb = (_0x59d9cb = _0x59d9cb.arrayBuffers)[_0x194cfb];
                  _0x59d9cb = new Uint32Array(_0x59d9cb).buffer;
                  return _0x1241b4[_0x194cfb] = _0x59d9cb;
                }
              }(_0x5d7a47, _0x11842f.buffer);
              _0x5d7a47 = _0x25bc5a(_0x11842f.type, _0x5d7a47);
              const _0x4635ff = new _0x3f5d1e(_0x5d7a47, _0x11842f.stride);
              _0x4635ff.uuid = _0x11842f.uuid;
              _0x3a583a[_0xafe439] = _0x4635ff;
              return _0x4635ff;
            }
            const _0x2bd5f2 = new (_0x401b75.isInstancedBufferGeometry ? _0x5b7573 : _0x3f374d)();
            var _0x58a2be = _0x401b75.data.index;
            if (_0x58a2be !== undefined) {
              _0x3014ab = _0x25bc5a(_0x58a2be.type, _0x58a2be.array);
              _0x2bd5f2.setIndex(new _0x570a7f(_0x3014ab, 1));
            }
            var _0x4e32ac = _0x401b75.data.attributes;
            for (const _0x26c012 in _0x4e32ac) {
              var _0x4b866d = _0x4e32ac[_0x26c012];
              var _0x2ebe91;
              let _0x500631;
              _0x2ebe91 = 9;
              if (_0x4b866d.isInterleavedBufferAttribute) {
                var _0x543762;
                var _0xc70dde = _0x59edd7(_0x401b75.data, _0x4b866d.data);
                _0x543762 = 0;
                _0x500631 = new _0x49f211(_0xc70dde, _0x4b866d.itemSize, _0x4b866d.offset, _0x4b866d.normalized);
              } else {
                _0xc70dde = _0x25bc5a(_0x4b866d.type, _0x4b866d.array);
                _0x500631 = new (_0x4b866d.isInstancedBufferAttribute ? _0x4da3fc : _0x570a7f)(_0xc70dde, _0x4b866d.itemSize, _0x4b866d.normalized);
              }
              if (_0x4b866d.name !== undefined) {
                _0x500631.name = _0x4b866d.name;
              }
              if (_0x4b866d.usage !== undefined) {
                _0x500631.setUsage(_0x4b866d.usage);
              }
              if (_0x4b866d.updateRange !== undefined) {
                _0x500631.updateRange.offset = _0x4b866d.updateRange.offset;
                _0x500631.updateRange.count = _0x4b866d.updateRange.count;
              }
              _0x2bd5f2.setAttribute(_0x26c012, _0x500631);
            }
            var _0x542dd1 = _0x401b75.data.morphAttributes;
            if (_0x542dd1) {
              for (const _0x4ed1c5 in _0x542dd1) {
                var _0x58f2b0;
                var _0x377f1b = _0x542dd1[_0x4ed1c5];
                _0x58f2b0 = 12;
                const _0x4d38da = [];
                for (let _0x48f653 = 0, _0x42b592 = _0x377f1b.length; _0x48f653 < _0x42b592; _0x48f653++) {
                  var _0x3db228;
                  var _0x5cd615 = _0x377f1b[_0x48f653];
                  let _0x4e3096;
                  _0x4e3096 = _0x5cd615.isInterleavedBufferAttribute ? (_0x3db228 = _0x59edd7(_0x401b75.data, _0x5cd615.data), new _0x49f211(_0x3db228, _0x5cd615.itemSize, _0x5cd615.offset, _0x5cd615.normalized)) : (_0x3db228 = _0x25bc5a(_0x5cd615.type, _0x5cd615.array), new _0x570a7f(_0x3db228, _0x5cd615.itemSize, _0x5cd615.normalized));
                  if (_0x5cd615.name !== undefined) {
                    _0x4e3096.name = _0x5cd615.name;
                  }
                  _0x4d38da.push(_0x4e3096);
                }
                _0x2bd5f2.morphAttributes[_0x4ed1c5] = _0x4d38da;
              }
            }
            if (_0x401b75.data.morphTargetsRelative) {
              _0x2bd5f2.morphTargetsRelative = true;
            }
            var _0x3e5f59 = _0x401b75.data.groups || _0x401b75.data.drawcalls || _0x401b75.data.offsets;
            if (_0x3e5f59 !== undefined) {
              for (let _0x3b9c54 = 0, _0x5e2e45 = _0x3e5f59.length; _0x3b9c54 !== _0x5e2e45; ++_0x3b9c54) {
                var _0x2ead09;
                var _0x27ebe4 = _0x3e5f59[_0x3b9c54];
                _0x2ead09 = 12;
                _0x2bd5f2.addGroup(_0x27ebe4.start, _0x27ebe4.count, _0x27ebe4.materialIndex);
              }
            }
            var _0x3014ab = _0x401b75.data.boundingSphere;
            if (_0x3014ab !== undefined) {
              var _0x172eb7 = 12;
              const _0x3c93ae = new _0x1d20ef();
              _0x172eb7 = 6;
              if (_0x3014ab.center !== undefined) {
                _0x3c93ae.fromArray(_0x3014ab.center);
              }
              _0x2bd5f2.boundingSphere = new _0x26f734(_0x3c93ae, _0x3014ab.radius);
            }
            if (_0x401b75.name) {
              _0x2bd5f2.name = _0x401b75.name;
            }
            if (_0x401b75.userData) {
              _0x2bd5f2.userData = _0x401b75.userData;
            }
            return _0x2bd5f2;
          }
        }
        class _0x467434 extends _0x49b33b {
          constructor(_0x49d806) {
            super(_0x49d806);
          }
          load(_0x80279e, _0x32fa91, _0x5274f3, _0x3ae262) {
            const _0x2141cc = this;
            var _0x11d382 = this.path === "" ? _0x22c4d1.extractUrlBase(_0x80279e) : this.path;
            this.resourcePath = this.resourcePath || _0x11d382;
            var _0x14ce48 = 8;
            const _0x438e66 = new _0x2e611b(this.manager);
            _0x14ce48 = 11;
            _0x438e66.setPath(this.path);
            _0x438e66.setRequestHeader(this.requestHeader);
            _0x438e66.setWithCredentials(this.withCredentials);
            _0x438e66.load(_0x80279e, function (_0x22b1b2) {
              let _0x232155 = null;
              try {
                _0x232155 = JSON.parse(_0x22b1b2);
              } catch (_0x2e5a64) {
                if (_0x3ae262 !== undefined) {
                  _0x3ae262(_0x2e5a64);
                }
                return;
              }
              var _0x4e95c3;
              const _0x4eff05 = _0x232155.metadata;
              _0x4e95c3 = "mage";
              if (_0x4eff05 !== undefined && _0x4eff05.type !== undefined && _0x4eff05.type.toLowerCase() !== "geometry") {
                _0x2141cc.parse(_0x232155, _0x32fa91);
              }
            }, _0x5274f3, _0x3ae262);
          }
          async loadAsync(_0x2eb428, _0x20314b) {
            var _0x37f0f4 = 14;
            var _0x5cfc4d = this.path === "" ? _0x22c4d1.extractUrlBase(_0x2eb428) : this.path;
            _0x37f0f4 = 2;
            this.resourcePath = this.resourcePath || _0x5cfc4d;
            const _0x320347 = new _0x2e611b(this.manager);
            _0x320347.setPath(this.path);
            _0x320347.setRequestHeader(this.requestHeader);
            _0x320347.setWithCredentials(this.withCredentials);
            _0x20314b = await _0x320347.loadAsync(_0x2eb428, _0x20314b);
            const _0x416634 = (_0x20314b = JSON.parse(_0x20314b)).metadata;
            if (_0x416634 === undefined || _0x416634.type === undefined || _0x416634.type.toLowerCase() === "geometry") {
              throw new Error("``````````````````````````````````````````");
            }
            return this.parseAsync(_0x20314b);
          }
          parse(_0x27bd50, _0x45eb31) {
            var _0x4337ea = this.parseAnimations(_0x27bd50.animations);
            var _0x392116 = this.parseShapes(_0x27bd50.shapes);
            var _0x30b75e = this.parseGeometries(_0x27bd50.geometries, _0x392116);
            var _0x3e3115 = this.parseImages(_0x27bd50.images, function () {
              if (_0x45eb31 !== undefined) {
                _0x45eb31(_0x73b06b);
              }
            });
            var _0x47ee33 = this.parseTextures(_0x27bd50.textures, _0x3e3115);
            _0x392116 = this.parseMaterials(_0x27bd50.materials, _0x47ee33);
            const _0x73b06b = this.parseObject(_0x27bd50.object, _0x30b75e, _0x392116, _0x47ee33, _0x4337ea);
            _0x27bd50 = this.parseSkeletons(_0x27bd50.skeletons, _0x73b06b);
            this.bindSkeletons(_0x73b06b, _0x27bd50);
            if (_0x45eb31 !== undefined) {
              var _0x19e71b;
              let _0xce6dc9 = false;
              _0x19e71b = "lilf";
              for (const _0x199ad9 in _0x3e3115) {
                if (_0x3e3115[_0x199ad9] instanceof HTMLImageElement) {
                  _0xce6dc9 = true;
                  break;
                }
              }
              if (_0xce6dc9 === false) {
                _0x45eb31(_0x73b06b);
              }
            }
            return _0x73b06b;
          }
          async parseAsync(_0x259229) {
            var _0x216c29 = this.parseAnimations(_0x259229.animations);
            var _0x52d0b0 = this.parseShapes(_0x259229.shapes);
            var _0x2c5384 = this.parseGeometries(_0x259229.geometries, _0x52d0b0);
            var _0x49f2f4 = await this.parseImagesAsync(_0x259229.images);
            _0x52d0b0 = this.parseTextures(_0x259229.textures, _0x49f2f4);
            _0x49f2f4 = this.parseMaterials(_0x259229.materials, _0x52d0b0);
            _0x216c29 = this.parseObject(_0x259229.object, _0x2c5384, _0x49f2f4, _0x52d0b0, _0x216c29);
            _0x259229 = this.parseSkeletons(_0x259229.skeletons, _0x216c29);
            this.bindSkeletons(_0x216c29, _0x259229);
            return _0x216c29;
          }
          parseShapes(_0x4a7be8) {
            var _0x56d54e = 13;
            const _0x4cf93c = {};
            _0x56d54e = 12;
            if (_0x4a7be8 !== undefined) {
              for (let _0xe34455 = 0, _0x3b422a = _0x4a7be8.length; _0xe34455 < _0x3b422a; _0xe34455++) {
                var _0x28506e;
                var _0x3e4e9d = new _0xe5830f().fromJSON(_0x4a7be8[_0xe34455]);
                _0x28506e = "kjcl";
                _0x4cf93c[_0x3e4e9d.uuid] = _0x3e4e9d;
              }
            }
            return _0x4cf93c;
          }
          parseSkeletons(_0x3dbcb6, _0x40cf2f) {
            const _0x51d66e = {};
            const _0x24a07a = {};
            _0x40cf2f.traverse(function (_0x549bc0) {
              if (_0x549bc0.isBone) {
                _0x24a07a[_0x549bc0.uuid] = _0x549bc0;
              }
            });
            if (_0x3dbcb6 !== undefined) {
              for (let _0x10eafe = 0, _0x45c150 = _0x3dbcb6.length; _0x10eafe < _0x45c150; _0x10eafe++) {
                var _0x3f1317 = new _0x571a0b().fromJSON(_0x3dbcb6[_0x10eafe], _0x24a07a);
                _0x51d66e[_0x3f1317.uuid] = _0x3f1317;
              }
            }
            return _0x51d66e;
          }
          parseGeometries(_0x21da99, _0x3e03f6) {
            const _0x1bba02 = {};
            if (_0x21da99 !== undefined) {
              var _0x21af51;
              const _0x36b5b3 = new _0x40014d();
              _0x21af51 = 12;
              for (let _0x5a6f8e = 0, _0x385db0 = _0x21da99.length; _0x5a6f8e < _0x385db0; _0x5a6f8e++) {
                let _0x10a50e;
                var _0x3203a0 = _0x21da99[_0x5a6f8e];
                switch (_0x3203a0.type) {
                  case "BufferGeometry":
                  case "InstancedBufferGeometry":
                    _0x10a50e = _0x36b5b3.parse(_0x3203a0);
                    break;
                  case "Geometry":
                    break;
                  default:
                    if (_0x3203a0.type in _0x4d4800) {
                      _0x10a50e = _0x4d4800[_0x3203a0.type].fromJSON(_0x3203a0, _0x3e03f6);
                    }
                }
                _0x10a50e.uuid = _0x3203a0.uuid;
                if (_0x3203a0.name !== undefined) {
                  _0x10a50e.name = _0x3203a0.name;
                }
                if (_0x10a50e.isBufferGeometry === true && _0x3203a0.userData !== undefined) {
                  _0x10a50e.userData = _0x3203a0.userData;
                }
                _0x1bba02[_0x3203a0.uuid] = _0x10a50e;
              }
            }
            return _0x1bba02;
          }
          parseMaterials(_0x156148, _0x47efa9) {
            const _0x5a9a18 = {};
            const _0x58cdc9 = {};
            if (_0x156148 !== undefined) {
              var _0x434d08;
              const _0x5d4f16 = new _0x1f5f31();
              _0x434d08 = 7;
              _0x5d4f16.setTextures(_0x47efa9);
              for (let _0x6f9d5f = 0, _0x38f4fe = _0x156148.length; _0x6f9d5f < _0x38f4fe; _0x6f9d5f++) {
                var _0x236763 = _0x156148[_0x6f9d5f];
                if (_0x236763.type === "MultiMaterial") {
                  const _0x3a89d0 = [];
                  for (let _0x1f3b0c = 0; _0x1f3b0c < _0x236763.materials.length; _0x1f3b0c++) {
                    var _0x354964 = _0x236763.materials[_0x1f3b0c];
                    if (_0x5a9a18[_0x354964.uuid] === undefined) {
                      _0x5a9a18[_0x354964.uuid] = _0x5d4f16.parse(_0x354964);
                    }
                    _0x3a89d0.push(_0x5a9a18[_0x354964.uuid]);
                  }
                  _0x58cdc9[_0x236763.uuid] = _0x3a89d0;
                } else {
                  if (_0x5a9a18[_0x236763.uuid] === undefined) {
                    _0x5a9a18[_0x236763.uuid] = _0x5d4f16.parse(_0x236763);
                  }
                  _0x58cdc9[_0x236763.uuid] = _0x5a9a18[_0x236763.uuid];
                }
              }
            }
            return _0x58cdc9;
          }
          parseAnimations(_0x3ecadb) {
            const _0x72f8e3 = {};
            if (_0x3ecadb !== undefined) {
              for (let _0x4344e4 = 0; _0x4344e4 < _0x3ecadb.length; _0x4344e4++) {
                var _0x16abae = 4;
                var _0x5d177c = _0x3ecadb[_0x4344e4];
                _0x16abae = 2;
                _0x72f8e3[(_0x5d177c = _0xac731b.parse(_0x5d177c)).uuid] = _0x5d177c;
              }
            }
            return _0x72f8e3;
          }
          parseImages(_0x324030, _0x1612ee) {
            const _0x44a64d = this;
            const _0x875c31 = {};
            var _0x2ced4c;
            let _0x2e5775;
            _0x2ced4c = 9;
            function _0x5137a4(_0x4e83c8) {
              if (typeof _0x4e83c8 != "string") {
                if (_0x4e83c8.data) {
                  return {
                    data: _0x25bc5a(_0x4e83c8.type, _0x4e83c8.data),
                    width: _0x4e83c8.width,
                    height: _0x4e83c8.height
                  };
                } else {
                  return null;
                }
              }
              var _0x11160e;
              _0x4e83c8 = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(_0x4e83c8 = _0x4e83c8) ? _0x4e83c8 : _0x44a64d.resourcePath + _0x4e83c8;
              _0x11160e = _0x4e83c8;
              _0x44a64d.manager.itemStart(_0x11160e);
              return _0x2e5775.load(_0x11160e, function () {
                _0x44a64d.manager.itemEnd(_0x11160e);
              }, undefined, function () {
                _0x44a64d.manager.itemError(_0x11160e);
                _0x44a64d.manager.itemEnd(_0x11160e);
              });
            }
            if (_0x324030 !== undefined && _0x324030.length > 0) {
              _0x1612ee = new _0x5c0696(_0x1612ee);
              _0x2e5775 = new _0x40234e(_0x1612ee);
              _0x2e5775.setCrossOrigin(this.crossOrigin);
              for (let _0x162e25 = 0, _0x37863b = _0x324030.length; _0x162e25 < _0x37863b; _0x162e25++) {
                var _0xd0127 = _0x324030[_0x162e25];
                var _0x5d1c5b = _0xd0127.url;
                if (Array.isArray(_0x5d1c5b)) {
                  _0x875c31[_0xd0127.uuid] = [];
                  for (let _0x335276 = 0, _0xca2fc6 = _0x5d1c5b.length; _0x335276 < _0xca2fc6; _0x335276++) {
                    var _0x523ba4 = 12;
                    var _0x24cc98 = _0x5137a4(_0x5d1c5b[_0x335276]);
                    _0x523ba4 = 2;
                    if (_0x24cc98 !== null) {
                      if (_0x24cc98 instanceof HTMLImageElement) {
                        _0x875c31[_0xd0127.uuid].push(_0x24cc98);
                      } else {
                        _0x875c31[_0xd0127.uuid].push(new _0x415c15(_0x24cc98.data, _0x24cc98.width, _0x24cc98.height));
                      }
                    }
                  }
                } else {
                  var _0x5b74b5 = _0x5137a4(_0xd0127.url);
                  if (_0x5b74b5 !== null) {
                    _0x875c31[_0xd0127.uuid] = _0x5b74b5;
                  }
                }
              }
            }
            return _0x875c31;
          }
          async parseImagesAsync(_0x27b7a9) {
            const _0x141ea0 = this;
            const _0x3b612c = {};
            let _0x10be50;
            async function _0x338916(_0x1a3921) {
              if (typeof _0x1a3921 != "string") {
                if (_0x1a3921.data) {
                  return {
                    data: _0x25bc5a(_0x1a3921.type, _0x1a3921.data),
                    width: _0x1a3921.width,
                    height: _0x1a3921.height
                  };
                } else {
                  return null;
                }
              } else {
                _0x1a3921 = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(_0x1a3921) ? _0x1a3921 : _0x141ea0.resourcePath + _0x1a3921;
                return _0x10be50.loadAsync(_0x1a3921);
              }
            }
            if (_0x27b7a9 !== undefined && _0x27b7a9.length > 0) {
              _0x10be50 = new _0x40234e(this.manager);
              _0x10be50.setCrossOrigin(this.crossOrigin);
              for (let _0x220d41 = 0, _0x1bdbc7 = _0x27b7a9.length; _0x220d41 < _0x1bdbc7; _0x220d41++) {
                var _0x3afa49 = _0x27b7a9[_0x220d41];
                var _0x10b956 = _0x3afa49.url;
                if (Array.isArray(_0x10b956)) {
                  _0x3b612c[_0x3afa49.uuid] = [];
                  for (let _0x1fc9df = 0, _0x3d19eb = _0x10b956.length; _0x1fc9df < _0x3d19eb; _0x1fc9df++) {
                    var _0x1ac604 = await _0x338916(_0x10b956[_0x1fc9df]);
                    if (_0x1ac604 !== null) {
                      if (_0x1ac604 instanceof HTMLImageElement) {
                        _0x3b612c[_0x3afa49.uuid].push(_0x1ac604);
                      } else {
                        _0x3b612c[_0x3afa49.uuid].push(new _0x415c15(_0x1ac604.data, _0x1ac604.width, _0x1ac604.height));
                      }
                    }
                  }
                } else {
                  var _0x1fcca6;
                  var _0x2fc100 = await _0x338916(_0x3afa49.url);
                  _0x1fcca6 = 4;
                  if (_0x2fc100 !== null) {
                    _0x3b612c[_0x3afa49.uuid] = _0x2fc100;
                  }
                }
              }
            }
            return _0x3b612c;
          }
          parseTextures(_0x2c7f6b, _0x1a3aad) {
            function _0x146d84(_0x4d09f9, _0x271bae) {
              if (typeof _0x4d09f9 == "number") {
                return _0x4d09f9;
              } else {
                return _0x271bae[_0x4d09f9];
              }
            }
            const _0x3fb425 = {};
            if (_0x2c7f6b !== undefined) {
              for (let _0x150b69 = 0, _0x50ab88 = _0x2c7f6b.length; _0x150b69 < _0x50ab88; _0x150b69++) {
                var _0xbc2b0c = 10;
                var _0x411a63 = _0x2c7f6b[_0x150b69];
                _0xbc2b0c = 3;
                let _0x4d441a;
                _0x411a63.image;
                _0x1a3aad[_0x411a63.image];
                var _0x5e9e77;
                var _0x4cf01f = _0x1a3aad[_0x411a63.image];
                _0x5e9e77 = 14;
                if (Array.isArray(_0x4cf01f)) {
                  _0x4d441a = new _0x50e2c1(_0x4cf01f);
                  if (_0x4cf01f.length === 6) {
                    _0x4d441a.needsUpdate = true;
                  }
                } else {
                  _0x4d441a = _0x4cf01f && _0x4cf01f.data ? new _0x415c15(_0x4cf01f.data, _0x4cf01f.width, _0x4cf01f.height) : new _0x3d39cb(_0x4cf01f);
                  if (_0x4cf01f) {
                    _0x4d441a.needsUpdate = true;
                  }
                }
                _0x4d441a.uuid = _0x411a63.uuid;
                if (_0x411a63.name !== undefined) {
                  _0x4d441a.name = _0x411a63.name;
                }
                if (_0x411a63.mapping !== undefined) {
                  _0x4d441a.mapping = _0x146d84(_0x411a63.mapping, _0x16de31);
                }
                if (_0x411a63.offset !== undefined) {
                  _0x4d441a.offset.fromArray(_0x411a63.offset);
                }
                if (_0x411a63.repeat !== undefined) {
                  _0x4d441a.repeat.fromArray(_0x411a63.repeat);
                }
                if (_0x411a63.center !== undefined) {
                  _0x4d441a.center.fromArray(_0x411a63.center);
                }
                if (_0x411a63.rotation !== undefined) {
                  _0x4d441a.rotation = _0x411a63.rotation;
                }
                if (_0x411a63.wrap !== undefined) {
                  _0x4d441a.wrapS = _0x146d84(_0x411a63.wrap[0], _0xa991cb);
                  _0x4d441a.wrapT = _0x146d84(_0x411a63.wrap[1], _0xa991cb);
                }
                if (_0x411a63.format !== undefined) {
                  _0x4d441a.format = _0x411a63.format;
                }
                if (_0x411a63.type !== undefined) {
                  _0x4d441a.type = _0x411a63.type;
                }
                if (_0x411a63.encoding !== undefined) {
                  _0x4d441a.encoding = _0x411a63.encoding;
                }
                if (_0x411a63.minFilter !== undefined) {
                  _0x4d441a.minFilter = _0x146d84(_0x411a63.minFilter, _0xf1a393);
                }
                if (_0x411a63.magFilter !== undefined) {
                  _0x4d441a.magFilter = _0x146d84(_0x411a63.magFilter, _0xf1a393);
                }
                if (_0x411a63.anisotropy !== undefined) {
                  _0x4d441a.anisotropy = _0x411a63.anisotropy;
                }
                if (_0x411a63.flipY !== undefined) {
                  _0x4d441a.flipY = _0x411a63.flipY;
                }
                if (_0x411a63.premultiplyAlpha !== undefined) {
                  _0x4d441a.premultiplyAlpha = _0x411a63.premultiplyAlpha;
                }
                if (_0x411a63.unpackAlignment !== undefined) {
                  _0x4d441a.unpackAlignment = _0x411a63.unpackAlignment;
                }
                if (_0x411a63.userData !== undefined) {
                  _0x4d441a.userData = _0x411a63.userData;
                }
                _0x3fb425[_0x411a63.uuid] = _0x4d441a;
              }
            }
            return _0x3fb425;
          }
          parseObject(_0x5dc5f8, _0x28da8c, _0x37cff9, _0x274de5, _0x3fac54) {
            let _0x454b5c;
            let _0x158c49;
            let _0x5f3f87;
            function _0x4b49e5(_0xff9ffc) {
              _0x28da8c[_0xff9ffc];
              return _0x28da8c[_0xff9ffc];
            }
            function _0x3df5f0(_0x3018c0) {
              if (_0x3018c0 !== undefined) {
                if (Array.isArray(_0x3018c0)) {
                  const _0x1def34 = [];
                  for (let _0x8c75cd = 0, _0x40ba13 = _0x3018c0.length; _0x8c75cd < _0x40ba13; _0x8c75cd++) {
                    var _0x58b6f6 = _0x3018c0[_0x8c75cd];
                    _0x37cff9[_0x58b6f6];
                    _0x1def34.push(_0x37cff9[_0x58b6f6]);
                  }
                  return _0x1def34;
                }
                _0x37cff9[_0x3018c0];
                return _0x37cff9[_0x3018c0];
              }
            }
            function _0x1ef431(_0x16c9ca) {
              _0x274de5[_0x16c9ca];
              return _0x274de5[_0x16c9ca];
            }
            switch (_0x5dc5f8.type) {
              case "Scene":
                _0x454b5c = new _0x291ff9();
                if (_0x5dc5f8.background !== undefined) {
                  if (Number.isInteger(_0x5dc5f8.background)) {
                    _0x454b5c.background = new _0x1282c2(_0x5dc5f8.background);
                  } else {
                    _0x454b5c.background = _0x1ef431(_0x5dc5f8.background);
                  }
                }
                if (_0x5dc5f8.environment !== undefined) {
                  _0x454b5c.environment = _0x1ef431(_0x5dc5f8.environment);
                }
                if (_0x5dc5f8.fog !== undefined) {
                  if (_0x5dc5f8.fog.type === "Fog") {
                    _0x454b5c.fog = new _0x2f0e9d(_0x5dc5f8.fog.color, _0x5dc5f8.fog.near, _0x5dc5f8.fog.far);
                  } else if (_0x5dc5f8.fog.type === "FogExp2") {
                    _0x454b5c.fog = new _0x8a9faa(_0x5dc5f8.fog.color, _0x5dc5f8.fog.density);
                  }
                }
                break;
              case "PerspectiveCamera":
                _0x454b5c = new _0x41f6fd(_0x5dc5f8.fov, _0x5dc5f8.aspect, _0x5dc5f8.near, _0x5dc5f8.far);
                if (_0x5dc5f8.focus !== undefined) {
                  _0x454b5c.focus = _0x5dc5f8.focus;
                }
                if (_0x5dc5f8.zoom !== undefined) {
                  _0x454b5c.zoom = _0x5dc5f8.zoom;
                }
                if (_0x5dc5f8.filmGauge !== undefined) {
                  _0x454b5c.filmGauge = _0x5dc5f8.filmGauge;
                }
                if (_0x5dc5f8.filmOffset !== undefined) {
                  _0x454b5c.filmOffset = _0x5dc5f8.filmOffset;
                }
                if (_0x5dc5f8.view !== undefined) {
                  _0x454b5c.view = Object.assign({}, _0x5dc5f8.view);
                }
                break;
              case "OrthographicCamera":
                _0x454b5c = new _0x2a01ad(_0x5dc5f8.left, _0x5dc5f8.right, _0x5dc5f8.top, _0x5dc5f8.bottom, _0x5dc5f8.near, _0x5dc5f8.far);
                if (_0x5dc5f8.zoom !== undefined) {
                  _0x454b5c.zoom = _0x5dc5f8.zoom;
                }
                if (_0x5dc5f8.view !== undefined) {
                  _0x454b5c.view = Object.assign({}, _0x5dc5f8.view);
                }
                break;
              case "AmbientLight":
                _0x454b5c = new _0x186da0(_0x5dc5f8.color, _0x5dc5f8.intensity);
                break;
              case "DirectionalLight":
                _0x454b5c = new _0x26c73e(_0x5dc5f8.color, _0x5dc5f8.intensity);
                break;
              case "PointLight":
                _0x454b5c = new _0x484caa(_0x5dc5f8.color, _0x5dc5f8.intensity, _0x5dc5f8.distance, _0x5dc5f8.decay);
                break;
              case "RectAreaLight":
                _0x454b5c = new _0x17478f(_0x5dc5f8.color, _0x5dc5f8.intensity, _0x5dc5f8.width, _0x5dc5f8.height);
                break;
              case "SpotLight":
                _0x454b5c = new _0x4c87af(_0x5dc5f8.color, _0x5dc5f8.intensity, _0x5dc5f8.distance, _0x5dc5f8.angle, _0x5dc5f8.penumbra, _0x5dc5f8.decay);
                break;
              case "HemisphereLight":
                _0x454b5c = new _0x9dd963(_0x5dc5f8.color, _0x5dc5f8.groundColor, _0x5dc5f8.intensity);
                break;
              case "LightProbe":
                _0x454b5c = new _0x1a6fa1().fromJSON(_0x5dc5f8);
                break;
              case "SkinnedMesh":
                _0x158c49 = _0x4b49e5(_0x5dc5f8.geometry);
                _0x5f3f87 = _0x3df5f0(_0x5dc5f8.material);
                _0x454b5c = new _0x1d0bf6(_0x158c49, _0x5f3f87);
                if (_0x5dc5f8.bindMode !== undefined) {
                  _0x454b5c.bindMode = _0x5dc5f8.bindMode;
                }
                if (_0x5dc5f8.bindMatrix !== undefined) {
                  _0x454b5c.bindMatrix.fromArray(_0x5dc5f8.bindMatrix);
                }
                if (_0x5dc5f8.skeleton !== undefined) {
                  _0x454b5c.skeleton = _0x5dc5f8.skeleton;
                }
                break;
              case "Mesh":
                _0x158c49 = _0x4b49e5(_0x5dc5f8.geometry);
                _0x5f3f87 = _0x3df5f0(_0x5dc5f8.material);
                _0x454b5c = new _0x9b7b04(_0x158c49, _0x5f3f87);
                break;
              case "InstancedMesh":
                _0x158c49 = _0x4b49e5(_0x5dc5f8.geometry);
                _0x5f3f87 = _0x3df5f0(_0x5dc5f8.material);
                var _0x2571ae = _0x5dc5f8.count;
                var _0x2719e2 = _0x5dc5f8.instanceMatrix;
                var _0xd8a8d8 = _0x5dc5f8.instanceColor;
                _0x454b5c = new _0x238c8f(_0x158c49, _0x5f3f87, _0x2571ae);
                _0x454b5c.instanceMatrix = new _0x4da3fc(new Float32Array(_0x2719e2.array), 16);
                if (_0xd8a8d8 !== undefined) {
                  _0x454b5c.instanceColor = new _0x4da3fc(new Float32Array(_0xd8a8d8.array), _0xd8a8d8.itemSize);
                }
                break;
              case "LOD":
                _0x454b5c = new _0x4bfa65();
                break;
              case "Line":
                _0x454b5c = new _0x266c5e(_0x4b49e5(_0x5dc5f8.geometry), _0x3df5f0(_0x5dc5f8.material));
                break;
              case "LineLoop":
                _0x454b5c = new _0x3a7022(_0x4b49e5(_0x5dc5f8.geometry), _0x3df5f0(_0x5dc5f8.material));
                break;
              case "LineSegments":
                _0x454b5c = new _0x2fd8c1(_0x4b49e5(_0x5dc5f8.geometry), _0x3df5f0(_0x5dc5f8.material));
                break;
              case "PointCloud":
              case "Points":
                _0x454b5c = new _0x5ead64(_0x4b49e5(_0x5dc5f8.geometry), _0x3df5f0(_0x5dc5f8.material));
                break;
              case "Sprite":
                _0x454b5c = new _0x5edc9a(_0x3df5f0(_0x5dc5f8.material));
                break;
              case "Group":
                _0x454b5c = new _0x2245c9();
                break;
              case "Bone":
                _0x454b5c = new _0x425abb();
                break;
              default:
                _0x454b5c = new _0x3b73b1();
            }
            _0x454b5c.uuid = _0x5dc5f8.uuid;
            if (_0x5dc5f8.name !== undefined) {
              _0x454b5c.name = _0x5dc5f8.name;
            }
            if (_0x5dc5f8.matrix !== undefined) {
              _0x454b5c.matrix.fromArray(_0x5dc5f8.matrix);
              if (_0x5dc5f8.matrixAutoUpdate !== undefined) {
                _0x454b5c.matrixAutoUpdate = _0x5dc5f8.matrixAutoUpdate;
              }
              if (_0x454b5c.matrixAutoUpdate) {
                _0x454b5c.matrix.decompose(_0x454b5c.position, _0x454b5c.quaternion, _0x454b5c.scale);
              }
            } else {
              if (_0x5dc5f8.position !== undefined) {
                _0x454b5c.position.fromArray(_0x5dc5f8.position);
              }
              if (_0x5dc5f8.rotation !== undefined) {
                _0x454b5c.rotation.fromArray(_0x5dc5f8.rotation);
              }
              if (_0x5dc5f8.quaternion !== undefined) {
                _0x454b5c.quaternion.fromArray(_0x5dc5f8.quaternion);
              }
              if (_0x5dc5f8.scale !== undefined) {
                _0x454b5c.scale.fromArray(_0x5dc5f8.scale);
              }
            }
            if (_0x5dc5f8.castShadow !== undefined) {
              _0x454b5c.castShadow = _0x5dc5f8.castShadow;
            }
            if (_0x5dc5f8.receiveShadow !== undefined) {
              _0x454b5c.receiveShadow = _0x5dc5f8.receiveShadow;
            }
            if (_0x5dc5f8.shadow) {
              if (_0x5dc5f8.shadow.bias !== undefined) {
                _0x454b5c.shadow.bias = _0x5dc5f8.shadow.bias;
              }
              if (_0x5dc5f8.shadow.normalBias !== undefined) {
                _0x454b5c.shadow.normalBias = _0x5dc5f8.shadow.normalBias;
              }
              if (_0x5dc5f8.shadow.radius !== undefined) {
                _0x454b5c.shadow.radius = _0x5dc5f8.shadow.radius;
              }
              if (_0x5dc5f8.shadow.mapSize !== undefined) {
                _0x454b5c.shadow.mapSize.fromArray(_0x5dc5f8.shadow.mapSize);
              }
              if (_0x5dc5f8.shadow.camera !== undefined) {
                _0x454b5c.shadow.camera = this.parseObject(_0x5dc5f8.shadow.camera);
              }
            }
            if (_0x5dc5f8.visible !== undefined) {
              _0x454b5c.visible = _0x5dc5f8.visible;
            }
            if (_0x5dc5f8.frustumCulled !== undefined) {
              _0x454b5c.frustumCulled = _0x5dc5f8.frustumCulled;
            }
            if (_0x5dc5f8.renderOrder !== undefined) {
              _0x454b5c.renderOrder = _0x5dc5f8.renderOrder;
            }
            if (_0x5dc5f8.userData !== undefined) {
              _0x454b5c.userData = _0x5dc5f8.userData;
            }
            if (_0x5dc5f8.layers !== undefined) {
              _0x454b5c.layers.mask = _0x5dc5f8.layers;
            }
            if (_0x5dc5f8.children !== undefined) {
              var _0x4b1d7f = _0x5dc5f8.children;
              for (let _0x5722f2 = 0; _0x5722f2 < _0x4b1d7f.length; _0x5722f2++) {
                _0x454b5c.add(this.parseObject(_0x4b1d7f[_0x5722f2], _0x28da8c, _0x37cff9, _0x274de5, _0x3fac54));
              }
            }
            if (_0x5dc5f8.animations !== undefined) {
              var _0x244efa = 10;
              var _0x169b8e = _0x5dc5f8.animations;
              _0x244efa = "lqhh";
              for (let _0x382d6b = 0; _0x382d6b < _0x169b8e.length; _0x382d6b++) {
                var _0x486b11 = _0x169b8e[_0x382d6b];
                _0x454b5c.animations.push(_0x3fac54[_0x486b11]);
              }
            }
            if (_0x5dc5f8.type === "LOD") {
              if (_0x5dc5f8.autoUpdate !== undefined) {
                _0x454b5c.autoUpdate = _0x5dc5f8.autoUpdate;
              }
              var _0x10b3e2 = _0x5dc5f8.levels;
              for (let _0x188177 = 0; _0x188177 < _0x10b3e2.length; _0x188177++) {
                var _0xf12344 = _0x10b3e2[_0x188177];
                var _0x32cc77 = _0x454b5c.getObjectByProperty("uuid", _0xf12344.object);
                if (_0x32cc77 !== undefined) {
                  _0x454b5c.addLevel(_0x32cc77, _0xf12344.distance);
                }
              }
            }
            return _0x454b5c;
          }
          bindSkeletons(_0x3d18d9, _0x530d47) {
            if (Object.keys(_0x530d47).length !== 0) {
              _0x3d18d9.traverse(function (_0x3c4778) {
                var _0x28e3e5;
                if (_0x3c4778.isSkinnedMesh === true && _0x3c4778.skeleton !== undefined) {
                  if (!((_0x28e3e5 = _0x530d47[_0x3c4778.skeleton]) === undefined)) {
                    _0x3c4778.bind(_0x28e3e5, _0x3c4778.bindMatrix);
                  }
                }
              });
            }
          }
          setTexturePath(_0x157b05) {
            return this.setResourcePath(_0x157b05);
          }
        }
        const _0x16de31 = {
          UVMapping: _0x658452,
          CubeReflectionMapping: _0x2097dc,
          CubeRefractionMapping: _0x38a1fa,
          EquirectangularReflectionMapping: _0x23c46a,
          EquirectangularRefractionMapping: _0x3eb421,
          CubeUVReflectionMapping: _0x41f85a,
          CubeUVRefractionMapping: _0x14f15e
        };
        const _0xa991cb = {
          RepeatWrapping: _0xc7a5e0,
          ClampToEdgeWrapping: _0x4f55c6,
          MirroredRepeatWrapping: _0x53382e
        };
        const _0xf1a393 = {
          NearestFilter: _0x297826,
          NearestMipmapNearestFilter: _0x5d282a,
          NearestMipmapLinearFilter: _0x99c93,
          LinearFilter: _0x202e90,
          LinearMipmapNearestFilter: _0x12c84a,
          LinearMipmapLinearFilter: _0x3f90fb
        };
        class _0x394802 extends _0x49b33b {
          constructor(_0x4fc30a) {
            super(_0x4fc30a);
            this.options = {
              premultiplyAlpha: "none"
            };
          }
          setOptions(_0x46b7ea) {
            this.options = _0x46b7ea;
            return this;
          }
          load(_0x361034, _0x5004f0, _0x11f615, _0x23d5eb) {
            if (_0x361034 === undefined) {
              _0x361034 = "";
            }
            if (this.path !== undefined) {
              _0x361034 = this.path + _0x361034;
            }
            _0x361034 = this.manager.resolveURL(_0x361034);
            const _0x80ff2e = this;
            const _0x5b3eac = _0x20b6af.get(_0x361034);
            if (_0x5b3eac !== undefined) {
              _0x80ff2e.manager.itemStart(_0x361034);
              // TOLOOK
              setTimeout(function () {
                if (_0x5004f0) {
                  _0x5004f0(_0x5b3eac);
                }
                _0x80ff2e.manager.itemEnd(_0x361034);
              }, 0);
              return _0x5b3eac;
            }
            var _0x1835d6 = 3;
            const _0x228dc9 = {};
            _0x1835d6 = "mefd";
            _0x228dc9.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
            _0x228dc9.headers = this.requestHeader;
            fetch(_0x361034, _0x228dc9).then(function (_0xa332a) {
              return _0xa332a.blob();
            }).then(function (_0x53e68b) {
              return createImageBitmap(_0x53e68b, Object.assign(_0x80ff2e.options, {
                colorSpaceConversion: "none"
              }));
            }).then(function (_0x121fa5) {
              _0x20b6af.add(_0x361034, _0x121fa5);
              if (_0x5004f0) {
                _0x5004f0(_0x121fa5);
              }
              _0x80ff2e.manager.itemEnd(_0x361034);
            }).catch(function (_0x26e831) {
              if (_0x23d5eb) {
                _0x23d5eb(_0x26e831);
              }
              _0x80ff2e.manager.itemError(_0x361034);
              _0x80ff2e.manager.itemEnd(_0x361034);
            });
            _0x80ff2e.manager.itemStart(_0x361034);
          }
        }
        let _0x1b990e;
        _0x394802.prototype.isImageBitmapLoader = true;
        const _0x59e1e3 = {
          getContext: function () {
            if (_0x1b990e === undefined) {
              _0x1b990e = new (window.AudioContext || window.webkitAudioContext)();
            }
            return _0x1b990e;
          },
          setContext: function (_0x4330f2) {
            _0x1b990e = _0x4330f2;
          }
        };
        class _0x35e38c extends _0x49b33b {
          constructor(_0x4cfcc8) {
            super(_0x4cfcc8);
          }
          load(_0x4504d5, _0x1965ed, _0x1a99ec, _0x360c57) {
            const _0x4845f0 = this;
            const _0x4c5ac1 = new _0x2e611b(this.manager);
            _0x4c5ac1.setResponseType("arraybuffer");
            _0x4c5ac1.setPath(this.path);
            _0x4c5ac1.setRequestHeader(this.requestHeader);
            _0x4c5ac1.setWithCredentials(this.withCredentials);
            _0x4c5ac1.load(_0x4504d5, function (_0x5d1eb5) {
              try {
                var _0x4065c1;
                var _0x28b8a9 = _0x5d1eb5.slice(0);
                _0x4065c1 = 7;
                _0x59e1e3.getContext().decodeAudioData(_0x28b8a9, function (_0x5618ae) {
                  _0x1965ed(_0x5618ae);
                });
              } catch (_0x1e3c4c) {
                if (_0x360c57) {
                  _0x360c57(_0x1e3c4c);
                }
                _0x4845f0.manager.itemError(_0x4504d5);
              }
            }, _0x1a99ec, _0x360c57);
          }
        }
        class _0x2d34d8 extends _0x1a6fa1 {
          constructor(_0x1c941e, _0x78dae9, _0x20466c = 1) {
            super(undefined, _0x20466c);
            var _0x53a61a = 7;
            var _0x39e0d4 = new _0x1282c2().set(_0x1c941e);
            _0x53a61a = 11;
            _0x20466c = new _0x1282c2().set(_0x78dae9);
            _0x1c941e = new _0x1d20ef(_0x39e0d4.r, _0x39e0d4.g, _0x39e0d4.b);
            _0x78dae9 = new _0x1d20ef(_0x20466c.r, _0x20466c.g, _0x20466c.b);
            _0x20466c = (_0x39e0d4 = Math.sqrt(Math.PI)) * Math.sqrt(0.75);
            this.sh.coefficients[0].copy(_0x1c941e).add(_0x78dae9).multiplyScalar(_0x39e0d4);
            this.sh.coefficients[1].copy(_0x1c941e).sub(_0x78dae9).multiplyScalar(_0x20466c);
          }
        }
        _0x2d34d8.prototype.isHemisphereLightProbe = true;
        class _0x4e1a1a extends _0x1a6fa1 {
          constructor(_0x3b3e77, _0x22c21f = 1) {
            super(undefined, _0x22c21f);
            _0x3b3e77 = new _0x1282c2().set(_0x3b3e77);
            this.sh.coefficients[0].set(_0x3b3e77.r, _0x3b3e77.g, _0x3b3e77.b).multiplyScalar(Math.sqrt(Math.PI) * 2);
          }
        }
        _0x4e1a1a.prototype.isAmbientLightProbe = true;
        const _0x1c242e = new _0x33b2c9();
        const _0x1cdd0c = new _0x33b2c9();
        const _0xb60796 = new _0x33b2c9();
        class _0x57d891 {
          constructor() {
            this.type = "StereoCamera";
            this.aspect = 1;
            this.eyeSep = 0.064;
            this.cameraL = new _0x41f6fd();
            this.cameraL.layers.enable(1);
            this.cameraL.matrixAutoUpdate = false;
            this.cameraR = new _0x41f6fd();
            this.cameraR.layers.enable(2);
            this.cameraR.matrixAutoUpdate = false;
            this._cache = {
              focus: null,
              fov: null,
              aspect: null,
              near: null,
              far: null,
              zoom: null,
              eyeSep: null
            };
          }
          update(_0x157462) {
            var _0x59e95c = 15;
            const _0x2ca5d1 = this._cache;
            _0x59e95c = 14;
            var _0x4d75be;
            var _0x10ef88;
            var _0x50708e;
            var _0x321b48;
            if (!(_0x2ca5d1.focus === _0x157462.focus && _0x2ca5d1.fov === _0x157462.fov && _0x2ca5d1.aspect === _0x157462.aspect * this.aspect && _0x2ca5d1.near === _0x157462.near && _0x2ca5d1.far === _0x157462.far && _0x2ca5d1.zoom === _0x157462.zoom && _0x2ca5d1.eyeSep === this.eyeSep)) {
              _0x2ca5d1.focus = _0x157462.focus;
              _0x2ca5d1.fov = _0x157462.fov;
              _0x2ca5d1.aspect = _0x157462.aspect * this.aspect;
              _0x2ca5d1.near = _0x157462.near;
              _0x2ca5d1.far = _0x157462.far;
              _0x2ca5d1.zoom = _0x157462.zoom;
              _0x2ca5d1.eyeSep = this.eyeSep;
              _0xb60796.copy(_0x157462.projectionMatrix);
              _0x4d75be = (_0x321b48 = _0x2ca5d1.eyeSep / 2) * _0x2ca5d1.near / _0x2ca5d1.focus;
              _0x10ef88 = _0x2ca5d1.near * Math.tan(_0x21403c * _0x2ca5d1.fov * 0.5) / _0x2ca5d1.zoom;
              _0x1cdd0c.elements[12] = -_0x321b48;
              _0x1c242e.elements[12] = _0x321b48;
              _0x50708e = -_0x10ef88 * _0x2ca5d1.aspect + _0x4d75be;
              _0x321b48 = _0x10ef88 * _0x2ca5d1.aspect + _0x4d75be;
              _0xb60796.elements[0] = _0x2ca5d1.near * 2 / (_0x321b48 - _0x50708e);
              _0xb60796.elements[8] = (_0x321b48 + _0x50708e) / (_0x321b48 - _0x50708e);
              this.cameraL.projectionMatrix.copy(_0xb60796);
              _0x50708e = -_0x10ef88 * _0x2ca5d1.aspect - _0x4d75be;
              _0x321b48 = _0x10ef88 * _0x2ca5d1.aspect - _0x4d75be;
              _0xb60796.elements[0] = _0x2ca5d1.near * 2 / (_0x321b48 - _0x50708e);
              _0xb60796.elements[8] = (_0x321b48 + _0x50708e) / (_0x321b48 - _0x50708e);
              this.cameraR.projectionMatrix.copy(_0xb60796);
            }
            this.cameraL.matrixWorld.copy(_0x157462.matrixWorld).multiply(_0x1cdd0c);
            this.cameraR.matrixWorld.copy(_0x157462.matrixWorld).multiply(_0x1c242e);
          }
        }
        class _0x24e012 {
          constructor(_0x16ea09 = true) {
            this.autoStart = _0x16ea09;
            this.startTime = 0;
            this.oldTime = 0;
            this.elapsedTime = 0;
            this.running = false;
          }
          start() {
            this.startTime = _0x145ded();
            this.oldTime = this.startTime;
            this.elapsedTime = 0;
            this.running = true;
          }
          stop() {
            this.getElapsedTime();
            this.running = false;
            this.autoStart = false;
          }
          getElapsedTime() {
            this.getDelta();
            return this.elapsedTime;
          }
          getDelta() {
            let _0x48e9bf = 0;
            if (this.autoStart && !this.running) {
              this.start();
              return 0;
            } else {
              if (this.running) {
                _0x48e9bf = ((_0x15824c = _0x145ded()) - this.oldTime) / 1000;
                this.oldTime = _0x15824c;
                this.elapsedTime += _0x48e9bf;
              }
              return _0x48e9bf;
            }
            var _0x15824c;
          }
        }
        function _0x145ded() {
          return (typeof performance == "undefined" ? Date : performance).now();
        }
        const _0x3ec37d = new _0x1d20ef();
        const _0x2a6fb9 = new _0x53f372();
        const _0x391b08 = new _0x1d20ef();
        const _0x5c0426 = new _0x1d20ef();
        class _0x1fe98f extends _0x3b73b1 {
          constructor() {
            super();
            this.type = "AudioListener";
            this.context = _0x59e1e3.getContext();
            this.gain = this.context.createGain();
            this.gain.connect(this.context.destination);
            this.filter = null;
            this.timeDelta = 0;
            this._clock = new _0x24e012();
          }
          getInput() {
            return this.gain;
          }
          removeFilter() {
            if (this.filter !== null) {
              this.gain.disconnect(this.filter);
              this.filter.disconnect(this.context.destination);
              this.gain.connect(this.context.destination);
              this.filter = null;
            }
            return this;
          }
          getFilter() {
            return this.filter;
          }
          setFilter(_0x2673cb) {
            if (this.filter !== null) {
              this.gain.disconnect(this.filter);
              this.filter.disconnect(this.context.destination);
            } else {
              this.gain.disconnect(this.context.destination);
            }
            this.filter = _0x2673cb;
            this.gain.connect(this.filter);
            this.filter.connect(this.context.destination);
            return this;
          }
          getMasterVolume() {
            return this.gain.gain.value;
          }
          setMasterVolume(_0x2709a3) {
            this.gain.gain.setTargetAtTime(_0x2709a3, this.context.currentTime, 0.01);
            return this;
          }
          updateMatrixWorld(_0x441fc3) {
            super.updateMatrixWorld(_0x441fc3);
            const _0x95e8ff = this.context.listener;
            var _0x4a5c1c = this.up;
            this.timeDelta = this._clock.getDelta();
            this.matrixWorld.decompose(_0x3ec37d, _0x2a6fb9, _0x391b08);
            _0x5c0426.set(0, 0, -1).applyQuaternion(_0x2a6fb9);
            if (_0x95e8ff.positionX) {
              _0x441fc3 = this.context.currentTime + this.timeDelta;
              _0x95e8ff.positionX.linearRampToValueAtTime(_0x3ec37d.x, _0x441fc3);
              _0x95e8ff.positionY.linearRampToValueAtTime(_0x3ec37d.y, _0x441fc3);
              _0x95e8ff.positionZ.linearRampToValueAtTime(_0x3ec37d.z, _0x441fc3);
              _0x95e8ff.forwardX.linearRampToValueAtTime(_0x5c0426.x, _0x441fc3);
              _0x95e8ff.forwardY.linearRampToValueAtTime(_0x5c0426.y, _0x441fc3);
              _0x95e8ff.forwardZ.linearRampToValueAtTime(_0x5c0426.z, _0x441fc3);
              _0x95e8ff.upX.linearRampToValueAtTime(_0x4a5c1c.x, _0x441fc3);
              _0x95e8ff.upY.linearRampToValueAtTime(_0x4a5c1c.y, _0x441fc3);
              _0x95e8ff.upZ.linearRampToValueAtTime(_0x4a5c1c.z, _0x441fc3);
            } else {
              _0x95e8ff.setPosition(_0x3ec37d.x, _0x3ec37d.y, _0x3ec37d.z);
              _0x95e8ff.setOrientation(_0x5c0426.x, _0x5c0426.y, _0x5c0426.z, _0x4a5c1c.x, _0x4a5c1c.y, _0x4a5c1c.z);
            }
          }
        }
        class _0x38f928 extends _0x3b73b1 {
          constructor(_0x759775) {
            super();
            this.type = "Audio";
            this.listener = _0x759775;
            this.context = _0x759775.context;
            this.gain = this.context.createGain();
            this.gain.connect(_0x759775.getInput());
            this.autoplay = false;
            this.buffer = null;
            this.detune = 0;
            this.loop = false;
            this.loopStart = 0;
            this.loopEnd = 0;
            this.offset = 0;
            this.duration = undefined;
            this.playbackRate = 1;
            this.isPlaying = false;
            this.hasPlaybackControl = true;
            this.source = null;
            this.sourceType = "empty";
            this._startedAt = 0;
            this._progress = 0;
            this._connected = false;
            this.filters = [];
          }
          getOutput() {
            return this.gain;
          }
          setNodeSource(_0x4761c8) {
            this.hasPlaybackControl = false;
            this.sourceType = "audioNode";
            this.source = _0x4761c8;
            this.connect();
            return this;
          }
          setMediaElementSource(_0x1c6ee7) {
            this.hasPlaybackControl = false;
            this.sourceType = "mediaNode";
            this.source = this.context.createMediaElementSource(_0x1c6ee7);
            this.connect();
            return this;
          }
          setMediaStreamSource(_0x2f56de) {
            this.hasPlaybackControl = false;
            this.sourceType = "mediaStreamNode";
            this.source = this.context.createMediaStreamSource(_0x2f56de);
            this.connect();
            return this;
          }
          setBuffer(_0x9e3070) {
            this.buffer = _0x9e3070;
            this.sourceType = "buffer";
            if (this.autoplay) {
              this.play();
            }
            return this;
          }
          play(_0x4dd020 = 0) {
            if (this.isPlaying !== true && this.hasPlaybackControl !== false) {
              this._startedAt = this.context.currentTime + _0x4dd020;
              const _0x172f23 = this.context.createBufferSource();
              _0x172f23.buffer = this.buffer;
              _0x172f23.loop = this.loop;
              _0x172f23.loopStart = this.loopStart;
              _0x172f23.loopEnd = this.loopEnd;
              _0x172f23.onended = this.onEnded.bind(this);
              _0x172f23.start(this._startedAt, this._progress + this.offset, this.duration);
              this.isPlaying = true;
              this.source = _0x172f23;
              this.setDetune(this.detune);
              this.setPlaybackRate(this.playbackRate);
              return this.connect();
            }
          }
          pause() {
            if (this.hasPlaybackControl !== false) {
              if (this.isPlaying === true) {
                this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
                if (this.loop === true) {
                  this._progress = this._progress % (this.duration || this.buffer.duration);
                }
                this.source.stop();
                this.source.onended = null;
                this.isPlaying = false;
              }
              return this;
            }
          }
          stop() {
            if (this.hasPlaybackControl !== false) {
              this._progress = 0;
              this.source.stop();
              this.source.onended = null;
              this.isPlaying = false;
              return this;
            }
          }
          connect() {
            if (this.filters.length > 0) {
              this.source.connect(this.filters[0]);
              for (let _0xcc5973 = 1, _0x38d4ad = this.filters.length; _0xcc5973 < _0x38d4ad; _0xcc5973++) {
                this.filters[_0xcc5973 - 1].connect(this.filters[_0xcc5973]);
              }
              this.filters[this.filters.length - 1].connect(this.getOutput());
            } else {
              this.source.connect(this.getOutput());
            }
            this._connected = true;
            return this;
          }
          disconnect() {
            if (this.filters.length > 0) {
              this.source.disconnect(this.filters[0]);
              for (let _0x2ac259 = 1, _0x192dba = this.filters.length; _0x2ac259 < _0x192dba; _0x2ac259++) {
                this.filters[_0x2ac259 - 1].disconnect(this.filters[_0x2ac259]);
              }
              this.filters[this.filters.length - 1].disconnect(this.getOutput());
            } else {
              this.source.disconnect(this.getOutput());
            }
            this._connected = false;
            return this;
          }
          getFilters() {
            return this.filters;
          }
          setFilters(_0x141574) {
            _0x141574 = _0x141574 || [];
            if (this._connected === true) {
              this.disconnect();
              this.filters = _0x141574.slice();
              this.connect();
            } else {
              this.filters = _0x141574.slice();
            }
            return this;
          }
          setDetune(_0x21484b) {
            this.detune = _0x21484b;
            if (this.source.detune !== undefined) {
              if (this.isPlaying === true) {
                this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
              }
              return this;
            }
          }
          getDetune() {
            return this.detune;
          }
          getFilter() {
            return this.getFilters()[0];
          }
          setFilter(_0x549a03) {
            return this.setFilters(_0x549a03 ? [_0x549a03] : []);
          }
          setPlaybackRate(_0x5a92b7) {
            if (this.hasPlaybackControl !== false) {
              this.playbackRate = _0x5a92b7;
              if (this.isPlaying === true) {
                this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
              }
              return this;
            }
          }
          getPlaybackRate() {
            return this.playbackRate;
          }
          onEnded() {
            this.isPlaying = false;
          }
          getLoop() {
            return this.hasPlaybackControl !== false && this.loop;
          }
          setLoop(_0x4fec37) {
            if (this.hasPlaybackControl !== false) {
              this.loop = _0x4fec37;
              if (this.isPlaying === true) {
                this.source.loop = this.loop;
              }
              return this;
            }
          }
          setLoopStart(_0x12771d) {
            this.loopStart = _0x12771d;
            return this;
          }
          setLoopEnd(_0x35199e) {
            this.loopEnd = _0x35199e;
            return this;
          }
          getVolume() {
            return this.gain.gain.value;
          }
          setVolume(_0xf1a90c) {
            this.gain.gain.setTargetAtTime(_0xf1a90c, this.context.currentTime, 0.01);
            return this;
          }
        }
        const _0x104516 = new _0x1d20ef();
        const _0x230037 = new _0x53f372();
        const _0x43511e = new _0x1d20ef();
        const _0x575eaf = new _0x1d20ef();
        class _0x2e8df3 extends _0x38f928 {
          constructor(_0x5890c1) {
            super(_0x5890c1);
            this.panner = this.context.createPanner();
            this.panner.panningModel = "HRTF";
            this.panner.connect(this.gain);
          }
          getOutput() {
            return this.panner;
          }
          getRefDistance() {
            return this.panner.refDistance;
          }
          setRefDistance(_0x55fe7f) {
            this.panner.refDistance = _0x55fe7f;
            return this;
          }
          getRolloffFactor() {
            return this.panner.rolloffFactor;
          }
          setRolloffFactor(_0x5343b8) {
            this.panner.rolloffFactor = _0x5343b8;
            return this;
          }
          getDistanceModel() {
            return this.panner.distanceModel;
          }
          setDistanceModel(_0x2bc8f8) {
            this.panner.distanceModel = _0x2bc8f8;
            return this;
          }
          getMaxDistance() {
            return this.panner.maxDistance;
          }
          setMaxDistance(_0xddac2d) {
            this.panner.maxDistance = _0xddac2d;
            return this;
          }
          setDirectionalCone(_0x2d9abf, _0x414327, _0x39f93c) {
            this.panner.coneInnerAngle = _0x2d9abf;
            this.panner.coneOuterAngle = _0x414327;
            this.panner.coneOuterGain = _0x39f93c;
            return this;
          }
          updateMatrixWorld(_0x2e1404) {
            super.updateMatrixWorld(_0x2e1404);
            if (this.hasPlaybackControl !== true || this.isPlaying !== false) {
              this.matrixWorld.decompose(_0x104516, _0x230037, _0x43511e);
              _0x575eaf.set(0, 0, 1).applyQuaternion(_0x230037);
              const _0x27efdb = this.panner;
              if (_0x27efdb.positionX) {
                _0x2e1404 = this.context.currentTime + this.listener.timeDelta;
                _0x27efdb.positionX.linearRampToValueAtTime(_0x104516.x, _0x2e1404);
                _0x27efdb.positionY.linearRampToValueAtTime(_0x104516.y, _0x2e1404);
                _0x27efdb.positionZ.linearRampToValueAtTime(_0x104516.z, _0x2e1404);
                _0x27efdb.orientationX.linearRampToValueAtTime(_0x575eaf.x, _0x2e1404);
                _0x27efdb.orientationY.linearRampToValueAtTime(_0x575eaf.y, _0x2e1404);
                _0x27efdb.orientationZ.linearRampToValueAtTime(_0x575eaf.z, _0x2e1404);
              } else {
                _0x27efdb.setPosition(_0x104516.x, _0x104516.y, _0x104516.z);
                _0x27efdb.setOrientation(_0x575eaf.x, _0x575eaf.y, _0x575eaf.z);
              }
            }
          }
        }
        class _0x4cf142 {
          constructor(_0x2218d8, _0x276dd8 = 2048) {
            this.analyser = _0x2218d8.context.createAnalyser();
            this.analyser.fftSize = _0x276dd8;
            this.data = new Uint8Array(this.analyser.frequencyBinCount);
            _0x2218d8.getOutput().connect(this.analyser);
          }
          getFrequencyData() {
            this.analyser.getByteFrequencyData(this.data);
            return this.data;
          }
          getAverageFrequency() {
            let _0x5e0453 = 0;
            var _0x476e0b = this.getFrequencyData();
            for (let _0x1a1b91 = 0; _0x1a1b91 < _0x476e0b.length; _0x1a1b91++) {
              _0x5e0453 += _0x476e0b[_0x1a1b91];
            }
            return _0x5e0453 / _0x476e0b.length;
          }
        }
        class _0x16824e {
          constructor(_0x37c31d, _0x1e22e0, _0x2d6743) {
            let _0x1cb1bd;
            let _0xe46d36;
            let _0xa1cfc3;
            this.binding = _0x37c31d;
            this.valueSize = _0x2d6743;
            switch (_0x1e22e0) {
              case "quaternion":
                _0x1cb1bd = this._slerp;
                _0xe46d36 = this._slerpAdditive;
                _0xa1cfc3 = this._setAdditiveIdentityQuaternion;
                this.buffer = new Float64Array(_0x2d6743 * 6);
                this._workIndex = 5;
                break;
              case "string":
              case "bool":
                _0x1cb1bd = this._select;
                _0xe46d36 = this._select;
                _0xa1cfc3 = this._setAdditiveIdentityOther;
                this.buffer = new Array(_0x2d6743 * 5);
                break;
              default:
                _0x1cb1bd = this._lerp;
                _0xe46d36 = this._lerpAdditive;
                _0xa1cfc3 = this._setAdditiveIdentityNumeric;
                this.buffer = new Float64Array(_0x2d6743 * 5);
            }
            this._mixBufferRegion = _0x1cb1bd;
            this._mixBufferRegionAdditive = _0xe46d36;
            this._setIdentity = _0xa1cfc3;
            this._origIndex = 3;
            this._addIndex = 4;
            this.cumulativeWeight = 0;
            this.cumulativeWeightAdditive = 0;
            this.useCount = 0;
            this.referenceCount = 0;
          }
          accumulate(_0x582087, _0x44b954) {
            const _0x386d67 = this.buffer;
            const _0x3d633b = this.valueSize;
            const _0x555de8 = _0x582087 * _0x3d633b + _0x3d633b;
            var _0x1b0f85 = 7;
            let _0x1578c1 = this.cumulativeWeight;
            _0x1b0f85 = 7;
            if (_0x1578c1 === 0) {
              for (let _0x1f5ea9 = 0; _0x1f5ea9 !== _0x3d633b; ++_0x1f5ea9) {
                _0x386d67[_0x555de8 + _0x1f5ea9] = _0x386d67[_0x1f5ea9];
              }
              _0x1578c1 = _0x44b954;
            } else {
              _0x1578c1 += _0x44b954;
              _0x44b954 /= _0x1578c1;
              this._mixBufferRegion(_0x386d67, _0x555de8, 0, _0x44b954, _0x3d633b);
            }
            this.cumulativeWeight = _0x1578c1;
          }
          accumulateAdditive(_0x380630) {
            var _0x344c9b = this.buffer;
            var _0xa778d2 = this.valueSize;
            var _0x2a5953 = _0xa778d2 * this._addIndex;
            if (this.cumulativeWeightAdditive === 0) {
              this._setIdentity();
            }
            this._mixBufferRegionAdditive(_0x344c9b, _0x2a5953, 0, _0x380630, _0xa778d2);
            this.cumulativeWeightAdditive += _0x380630;
          }
          apply(_0x39d134) {
            const _0x387546 = this.valueSize;
            const _0x3fa2d0 = this.buffer;
            const _0x31e495 = _0x39d134 * _0x387546 + _0x387546;
            const _0x489bba = this.cumulativeWeight;
            const _0x515fc4 = this.cumulativeWeightAdditive;
            const _0x4c41be = this.binding;
            this.cumulativeWeight = 0;
            this.cumulativeWeightAdditive = 0;
            if (_0x489bba < 1) {
              _0x39d134 = _0x387546 * this._origIndex;
              this._mixBufferRegion(_0x3fa2d0, _0x31e495, _0x39d134, 1 - _0x489bba, _0x387546);
            }
            if (_0x515fc4 > 0) {
              this._mixBufferRegionAdditive(_0x3fa2d0, _0x31e495, this._addIndex * _0x387546, 1, _0x387546);
            }
            for (let _0x301a70 = _0x387546, _0x41651e = _0x387546 + _0x387546; _0x301a70 !== _0x41651e; ++_0x301a70) {
              if (_0x3fa2d0[_0x301a70] !== _0x3fa2d0[_0x301a70 + _0x387546]) {
                _0x4c41be.setValue(_0x3fa2d0, _0x31e495);
                break;
              }
            }
          }
          saveOriginalState() {
            const _0x34bbc7 = this.binding;
            const _0x22fb5c = this.buffer;
            const _0x4b12c8 = this.valueSize;
            const _0x4a1a70 = _0x4b12c8 * this._origIndex;
            _0x34bbc7.getValue(_0x22fb5c, _0x4a1a70);
            for (let _0x180978 = _0x4b12c8, _0x2de78c = _0x4a1a70; _0x180978 !== _0x2de78c; ++_0x180978) {
              _0x22fb5c[_0x180978] = _0x22fb5c[_0x4a1a70 + _0x180978 % _0x4b12c8];
            }
            this._setIdentity();
            this.cumulativeWeight = 0;
            this.cumulativeWeightAdditive = 0;
          }
          restoreOriginalState() {
            var _0x5a8feb = this.valueSize * 3;
            this.binding.setValue(this.buffer, _0x5a8feb);
          }
          _setAdditiveIdentityNumeric() {
            var _0x5b3893 = this._addIndex * this.valueSize;
            var _0x55a088 = _0x5b3893 + this.valueSize;
            for (let _0x44115f = _0x5b3893; _0x44115f < _0x55a088; _0x44115f++) {
              this.buffer[_0x44115f] = 0;
            }
          }
          _setAdditiveIdentityQuaternion() {
            this._setAdditiveIdentityNumeric();
            this.buffer[this._addIndex * this.valueSize + 3] = 1;
          }
          _setAdditiveIdentityOther() {
            var _0x5538ce = this._origIndex * this.valueSize;
            var _0x14c425 = this._addIndex * this.valueSize;
            for (let _0x32e07f = 0; _0x32e07f < this.valueSize; _0x32e07f++) {
              this.buffer[_0x14c425 + _0x32e07f] = this.buffer[_0x5538ce + _0x32e07f];
            }
          }
          _select(_0x4fc3e9, _0xd3b6e5, _0x64ae3c, _0xdf67da, _0x45656e) {
            if (_0xdf67da >= 0.5) {
              for (let _0x5d52a0 = 0; _0x5d52a0 !== _0x45656e; ++_0x5d52a0) {
                _0x4fc3e9[_0xd3b6e5 + _0x5d52a0] = _0x4fc3e9[_0x64ae3c + _0x5d52a0];
              }
            }
          }
          _slerp(_0x34dd4c, _0x493151, _0x5f572d, _0x29ec6e) {
            _0x53f372.slerpFlat(_0x34dd4c, _0x493151, _0x34dd4c, _0x493151, _0x34dd4c, _0x5f572d, _0x29ec6e);
          }
          _slerpAdditive(_0x3a112d, _0x1c68f3, _0x4b1643, _0x1741b6, _0x21217a) {
            _0x21217a = this._workIndex * _0x21217a;
            _0x53f372.multiplyQuaternionsFlat(_0x3a112d, _0x21217a, _0x3a112d, _0x1c68f3, _0x3a112d, _0x4b1643);
            _0x53f372.slerpFlat(_0x3a112d, _0x1c68f3, _0x3a112d, _0x1c68f3, _0x3a112d, _0x21217a, _0x1741b6);
          }
          _lerp(_0x54a725, _0x393b63, _0xdc0197, _0x57eebb, _0xce16e1) {
            var _0x2c88b1;
            var _0x999508 = 1 - _0x57eebb;
            _0x2c88b1 = "lqbq";
            for (let _0x2a88b8 = 0; _0x2a88b8 !== _0xce16e1; ++_0x2a88b8) {
              var _0x4e62fa = _0x393b63 + _0x2a88b8;
              _0x54a725[_0x4e62fa] = _0x54a725[_0x4e62fa] * _0x999508 + _0x54a725[_0xdc0197 + _0x2a88b8] * _0x57eebb;
            }
          }
          _lerpAdditive(_0x2620d9, _0x12e03d, _0xdd862e, _0x5c9492, _0x88c803) {
            for (let _0x361c05 = 0; _0x361c05 !== _0x88c803; ++_0x361c05) {
              var _0x2f9575 = _0x12e03d + _0x361c05;
              _0x2620d9[_0x2f9575] = _0x2620d9[_0x2f9575] + _0x2620d9[_0xdd862e + _0x361c05] * _0x5c9492;
            }
          }
        }
        _0x3fcb2c = "\\[\\]\\.:\\/";
        var _0x51e732 = 16;
        const _0x1917ae = new RegExp("[" + _0x3fcb2c + "]", "g");
        _0x51e732 = 6;
        _0x4133c6 = "[^" + _0x3fcb2c + "]";
        _0x35fa32 = "[^" + _0x3fcb2c.replace("\\.", "") + "]";
        _0x4cd0fa = /((?:WC+[\/:])*)/.source.replace("WC", _0x4133c6);
        _0x3fcb2c = /(WCOD+)?/.source.replace("WCOD", _0x35fa32);
        _0x35fa32 = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _0x4133c6);
        _0x4133c6 = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _0x4133c6);
        const _0x45aa25 = new RegExp("^" + _0x4cd0fa + _0x3fcb2c + _0x35fa32 + _0x4133c6 + "$");
        const _0x5574ec = ["material", "materials", "bones"];
        class _0x246d87 {
          constructor(_0xa251d4, _0x122506, _0x17004a) {
            this.path = _0x122506;
            this.parsedPath = _0x17004a || _0x246d87.parseTrackName(_0x122506);
            this.node = _0x246d87.findNode(_0xa251d4, this.parsedPath.nodeName) || _0xa251d4;
            this.rootNode = _0xa251d4;
            this.getValue = this._getValue_unbound;
            this.setValue = this._setValue_unbound;
          }
          static create(_0x3aa7a4, _0x21a430, _0x3fbe07) {
            return new (_0x3aa7a4 && _0x3aa7a4.isAnimationObjectGroup ? _0x246d87.Composite : _0x246d87)(_0x3aa7a4, _0x21a430, _0x3fbe07);
          }
          static sanitizeNodeName(_0x52beeb) {
            return _0x52beeb.replace(/\s/g, "_").replace(_0x1917ae, "");
          }
          static parseTrackName(_0x4e5f78) {
            var _0x362a32 = _0x45aa25.exec(_0x4e5f78);
            if (!_0x362a32) {
              throw new Error("``````````````````````````````````````````");
            }
            var _0x5ae6aa;
            const _0x2551e5 = {
              nodeName: _0x362a32[2],
              objectName: _0x362a32[3],
              objectIndex: _0x362a32[4],
              propertyName: _0x362a32[5],
              propertyIndex: _0x362a32[6]
            };
            _0x5ae6aa = 6;
            var _0x2f5490 = _0x2551e5.nodeName && _0x2551e5.nodeName.lastIndexOf(".");
            if (_0x2f5490 !== undefined && _0x2f5490 !== -1) {
              _0x362a32 = _0x2551e5.nodeName.substring(_0x2f5490 + 1);
              if (_0x5574ec.indexOf(_0x362a32) !== -1) {
                _0x2551e5.nodeName = _0x2551e5.nodeName.substring(0, _0x2f5490);
                _0x2551e5.objectName = _0x362a32;
              }
            }
            if (_0x2551e5.propertyName === null || _0x2551e5.propertyName.length === 0) {
              throw new Error("``````````````````````````````````````````");
            }
            return _0x2551e5;
          }
          static findNode(_0x7358c1, _0x248ff2) {
            if (!_0x248ff2 || _0x248ff2 === "" || _0x248ff2 === "." || _0x248ff2 === -1 || _0x248ff2 === _0x7358c1.name || _0x248ff2 === _0x7358c1.uuid) {
              return _0x7358c1;
            }
            if (_0x7358c1.skeleton) {
              var _0x2a254c;
              var _0x3f4b85 = _0x7358c1.skeleton.getBoneByName(_0x248ff2);
              _0x2a254c = "chka";
              if (_0x3f4b85 !== undefined) {
                return _0x3f4b85;
              }
            }
            if (_0x7358c1.children) {
              var _0x420d43 = 9;
              const _0x28951b = function (_0x29e50b) {
                for (let _0x59b35c = 0; _0x59b35c < _0x29e50b.length; _0x59b35c++) {
                  var _0x59f84b = _0x29e50b[_0x59b35c];
                  if (_0x59f84b.name === _0x248ff2 || _0x59f84b.uuid === _0x248ff2) {
                    return _0x59f84b;
                  }
                  if (_0x59f84b = _0x28951b(_0x59f84b.children)) {
                    return _0x59f84b;
                  }
                }
                return null;
              };
              _0x420d43 = "gfon";
              _0x7358c1 = _0x28951b(_0x7358c1.children);
              if (_0x7358c1) {
                return _0x7358c1;
              }
            }
            return null;
          }
          _getValue_unavailable() {}
          _setValue_unavailable() {}
          _getValue_direct(_0x3ca9c6, _0x5cfa98) {
            _0x3ca9c6[_0x5cfa98] = this.targetObject[this.propertyName];
          }
          _getValue_array(_0x26c47b, _0x4df623) {
            var _0x41e7a2 = this.resolvedProperty;
            for (let _0x18b865 = 0, _0x42aa87 = _0x41e7a2.length; _0x18b865 !== _0x42aa87; ++_0x18b865) {
              _0x26c47b[_0x4df623++] = _0x41e7a2[_0x18b865];
            }
          }
          _getValue_arrayElement(_0x2030eb, _0x31f651) {
            _0x2030eb[_0x31f651] = this.resolvedProperty[this.propertyIndex];
          }
          _getValue_toArray(_0x1d95c9, _0x4be4b7) {
            this.resolvedProperty.toArray(_0x1d95c9, _0x4be4b7);
          }
          _setValue_direct(_0xfa5e1b, _0x112159) {
            this.targetObject[this.propertyName] = _0xfa5e1b[_0x112159];
          }
          _setValue_direct_setNeedsUpdate(_0x3eee9b, _0x23301d) {
            this.targetObject[this.propertyName] = _0x3eee9b[_0x23301d];
            this.targetObject.needsUpdate = true;
          }
          _setValue_direct_setMatrixWorldNeedsUpdate(_0x25d7ff, _0xd69967) {
            this.targetObject[this.propertyName] = _0x25d7ff[_0xd69967];
            this.targetObject.matrixWorldNeedsUpdate = true;
          }
          _setValue_array(_0x42251c, _0x7e7ced) {
            const _0x108bb3 = this.resolvedProperty;
            for (let _0x54f3fb = 0, _0x1c791f = _0x108bb3.length; _0x54f3fb !== _0x1c791f; ++_0x54f3fb) {
              _0x108bb3[_0x54f3fb] = _0x42251c[_0x7e7ced++];
            }
          }
          _setValue_array_setNeedsUpdate(_0x504f96, _0x3ce33e) {
            const _0x3beaa2 = this.resolvedProperty;
            for (let _0x90f0ae = 0, _0x3111f0 = _0x3beaa2.length; _0x90f0ae !== _0x3111f0; ++_0x90f0ae) {
              _0x3beaa2[_0x90f0ae] = _0x504f96[_0x3ce33e++];
            }
            this.targetObject.needsUpdate = true;
          }
          _setValue_array_setMatrixWorldNeedsUpdate(_0x22a778, _0x158bba) {
            const _0x2ad0b1 = this.resolvedProperty;
            for (let _0x17ecc9 = 0, _0x1bcc6e = _0x2ad0b1.length; _0x17ecc9 !== _0x1bcc6e; ++_0x17ecc9) {
              _0x2ad0b1[_0x17ecc9] = _0x22a778[_0x158bba++];
            }
            this.targetObject.matrixWorldNeedsUpdate = true;
          }
          _setValue_arrayElement(_0x1db030, _0xc51c30) {
            this.resolvedProperty[this.propertyIndex] = _0x1db030[_0xc51c30];
          }
          _setValue_arrayElement_setNeedsUpdate(_0xa1aa39, _0x59ca89) {
            this.resolvedProperty[this.propertyIndex] = _0xa1aa39[_0x59ca89];
            this.targetObject.needsUpdate = true;
          }
          _setValue_arrayElement_setMatrixWorldNeedsUpdate(_0x20979d, _0x559b10) {
            this.resolvedProperty[this.propertyIndex] = _0x20979d[_0x559b10];
            this.targetObject.matrixWorldNeedsUpdate = true;
          }
          _setValue_fromArray(_0x2c0232, _0x4f2721) {
            this.resolvedProperty.fromArray(_0x2c0232, _0x4f2721);
          }
          _setValue_fromArray_setNeedsUpdate(_0x47bc29, _0x107a35) {
            this.resolvedProperty.fromArray(_0x47bc29, _0x107a35);
            this.targetObject.needsUpdate = true;
          }
          _setValue_fromArray_setMatrixWorldNeedsUpdate(_0x41b6c7, _0x180543) {
            this.resolvedProperty.fromArray(_0x41b6c7, _0x180543);
            this.targetObject.matrixWorldNeedsUpdate = true;
          }
          _getValue_unbound(_0x2d22c3, _0x5ba474) {
            this.bind();
            this.getValue(_0x2d22c3, _0x5ba474);
          }
          _setValue_unbound(_0x265ca4, _0xc6ea11) {
            this.bind();
            this.setValue(_0x265ca4, _0xc6ea11);
          }
          bind() {
            let _0x471f93 = this.node;
            var _0x7a0f50 = this.parsedPath;
            var _0x4a1f47 = _0x7a0f50.objectName;
            var _0x5ab583 = _0x7a0f50.propertyName;
            let _0x426ded = _0x7a0f50.propertyIndex;
            if (!_0x471f93) {
              _0x471f93 = _0x246d87.findNode(this.rootNode, _0x7a0f50.nodeName) || this.rootNode;
              this.node = _0x471f93;
            }
            this.getValue = this._getValue_unavailable;
            this.setValue = this._setValue_unavailable;
            if (_0x471f93) {
              if (_0x4a1f47) {
                let _0x534548 = _0x7a0f50.objectIndex;
                switch (_0x4a1f47) {
                  case "materials":
                    if (!_0x471f93.material) {
                      return;
                    }
                    if (!_0x471f93.material.materials) {
                      return;
                    }
                    _0x471f93 = _0x471f93.material.materials;
                    break;
                  case "bones":
                    if (!_0x471f93.skeleton) {
                      return;
                    }
                    _0x471f93 = _0x471f93.skeleton.bones;
                    for (let _0x1cc61d = 0; _0x1cc61d < _0x471f93.length; _0x1cc61d++) {
                      if (_0x471f93[_0x1cc61d].name === _0x534548) {
                        _0x534548 = _0x1cc61d;
                        break;
                      }
                    }
                    break;
                  default:
                    if (_0x471f93[_0x4a1f47] === undefined) {
                      return;
                    }
                    _0x471f93 = _0x471f93[_0x4a1f47];
                }
                if (_0x534548 !== undefined) {
                  if (_0x471f93[_0x534548] === undefined) {
                    return;
                  }
                  _0x471f93 = _0x471f93[_0x534548];
                }
              }
              var _0x13b742 = 7;
              var _0x5e9b1d = _0x471f93[_0x5ab583];
              _0x13b742 = 5;
              if (_0x5e9b1d !== undefined) {
                let _0x5f56e3 = this.Versioning.None;
                this.targetObject = _0x471f93;
                if (_0x471f93.needsUpdate !== undefined) {
                  _0x5f56e3 = this.Versioning.NeedsUpdate;
                } else if (_0x471f93.matrixWorldNeedsUpdate !== undefined) {
                  _0x5f56e3 = this.Versioning.MatrixWorldNeedsUpdate;
                }
                var _0x40aa33;
                let _0x1417e0 = this.BindingType.Direct;
                _0x40aa33 = 3;
                if (_0x426ded !== undefined) {
                  if (_0x5ab583 === "morphTargetInfluences") {
                    if (!_0x471f93.geometry) {
                      return;
                    }
                    if (!_0x471f93.geometry.isBufferGeometry) {
                      return;
                    }
                    if (!_0x471f93.geometry.morphAttributes) {
                      return;
                    }
                    if (_0x471f93.morphTargetDictionary[_0x426ded] !== undefined) {
                      _0x426ded = _0x471f93.morphTargetDictionary[_0x426ded];
                    }
                  }
                  _0x1417e0 = this.BindingType.ArrayElement;
                  this.resolvedProperty = _0x5e9b1d;
                  this.propertyIndex = _0x426ded;
                } else if (_0x5e9b1d.fromArray !== undefined && _0x5e9b1d.toArray !== undefined) {
                  _0x1417e0 = this.BindingType.HasFromToArray;
                  this.resolvedProperty = _0x5e9b1d;
                } else if (Array.isArray(_0x5e9b1d)) {
                  _0x1417e0 = this.BindingType.EntireArray;
                  this.resolvedProperty = _0x5e9b1d;
                } else {
                  this.propertyName = _0x5ab583;
                }
                this.getValue = this.GetterByBindingType[_0x1417e0];
                this.setValue = this.SetterByBindingTypeAndVersioning[_0x1417e0][_0x5f56e3];
              } else {
                _0x7a0f50.nodeName;
              }
            }
          }
          unbind() {
            this.node = null;
            this.getValue = this._getValue_unbound;
            this.setValue = this._setValue_unbound;
          }
        }
        _0x246d87.Composite = class {
          constructor(_0x77e448, _0x371925, _0xe3c20) {
            _0xe3c20 = _0xe3c20 || _0x246d87.parseTrackName(_0x371925);
            this._targetGroup = _0x77e448;
            this._bindings = _0x77e448.subscribe_(_0x371925, _0xe3c20);
          }
          getValue(_0x5c725d, _0x268554) {
            this.bind();
            const _0x360c34 = this._targetGroup.nCachedObjects_;
            const _0x206627 = this._bindings[_0x360c34];
            if (_0x206627 !== undefined) {
              _0x206627.getValue(_0x5c725d, _0x268554);
            }
          }
          setValue(_0x2648c9, _0x16dec9) {
            const _0x27a6bb = this._bindings;
            for (let _0x245661 = this._targetGroup.nCachedObjects_, _0x1e3f97 = _0x27a6bb.length; _0x245661 !== _0x1e3f97; ++_0x245661) {
              _0x27a6bb[_0x245661].setValue(_0x2648c9, _0x16dec9);
            }
          }
          bind() {
            const _0x32435d = this._bindings;
            for (let _0x4fec4b = this._targetGroup.nCachedObjects_, _0x2b63bf = _0x32435d.length; _0x4fec4b !== _0x2b63bf; ++_0x4fec4b) {
              _0x32435d[_0x4fec4b].bind();
            }
          }
          unbind() {
            const _0x5e218c = this._bindings;
            for (let _0x252bec = this._targetGroup.nCachedObjects_, _0x5eac53 = _0x5e218c.length; _0x252bec !== _0x5eac53; ++_0x252bec) {
              _0x5e218c[_0x252bec].unbind();
            }
          }
        };
        _0x246d87.prototype.BindingType = {
          Direct: 0,
          EntireArray: 1,
          ArrayElement: 2,
          HasFromToArray: 3
        };
        _0x246d87.prototype.Versioning = {
          None: 0,
          NeedsUpdate: 1,
          MatrixWorldNeedsUpdate: 2
        };
        _0x246d87.prototype.GetterByBindingType = [_0x246d87.prototype._getValue_direct, _0x246d87.prototype._getValue_array, _0x246d87.prototype._getValue_arrayElement, _0x246d87.prototype._getValue_toArray];
        _0x246d87.prototype.SetterByBindingTypeAndVersioning = [[_0x246d87.prototype._setValue_direct, _0x246d87.prototype._setValue_direct_setNeedsUpdate, _0x246d87.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [_0x246d87.prototype._setValue_array, _0x246d87.prototype._setValue_array_setNeedsUpdate, _0x246d87.prototype._setValue_array_setMatrixWorldNeedsUpdate], [_0x246d87.prototype._setValue_arrayElement, _0x246d87.prototype._setValue_arrayElement_setNeedsUpdate, _0x246d87.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [_0x246d87.prototype._setValue_fromArray, _0x246d87.prototype._setValue_fromArray_setNeedsUpdate, _0x246d87.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];
        class _0x4874cc {
          constructor() {
            this.uuid = _0x2b30b2();
            this._objects = Array.prototype.slice.call(arguments);
            this.nCachedObjects_ = 0;
            var _0x2f427d;
            const _0x430838 = {};
            _0x2f427d = "adhh";
            this._indicesByUUID = _0x430838;
            for (let _0x19b6ed = 0, _0x30407c = arguments.length; _0x19b6ed !== _0x30407c; ++_0x19b6ed) {
              _0x430838[arguments[_0x19b6ed].uuid] = _0x19b6ed;
            }
            this._paths = [];
            this._parsedPaths = [];
            this._bindings = [];
            this._bindingsIndicesByPath = {};
            const _0xd48eeb = this;
            this.stats = {
              objects: {
                get total() {
                  return _0xd48eeb._objects.length;
                },
                get inUse() {
                  return this.total - _0xd48eeb.nCachedObjects_;
                }
              },
              get bindingsPerObject() {
                return _0xd48eeb._bindings.length;
              }
            };
          }
          add() {
            const _0x39167a = this._objects;
            const _0x2f9670 = this._indicesByUUID;
            const _0x116fcd = this._paths;
            const _0x246549 = this._parsedPaths;
            const _0x571cf9 = this._bindings;
            const _0x2d1812 = _0x571cf9.length;
            let _0x847290;
            let _0x3582b6 = _0x39167a.length;
            let _0x5042ba = this.nCachedObjects_;
            for (let _0x57891c = 0, _0x474f89 = arguments.length; _0x57891c !== _0x474f89; ++_0x57891c) {
              var _0x5fe5e2 = arguments[_0x57891c];
              var _0x3740ca = _0x5fe5e2.uuid;
              let _0x369688 = _0x2f9670[_0x3740ca];
              if (_0x369688 === undefined) {
                _0x369688 = _0x3582b6++;
                _0x2f9670[_0x3740ca] = _0x369688;
                _0x39167a.push(_0x5fe5e2);
                for (let _0x1495e4 = 0, _0x634ab5 = _0x2d1812; _0x1495e4 !== _0x634ab5; ++_0x1495e4) {
                  _0x571cf9[_0x1495e4].push(new _0x246d87(_0x5fe5e2, _0x116fcd[_0x1495e4], _0x246549[_0x1495e4]));
                }
              } else if (_0x369688 < _0x5042ba) {
                _0x847290 = _0x39167a[_0x369688];
                var _0x422a02 = --_0x5042ba;
                var _0x1ca9f1 = _0x39167a[_0x422a02];
                _0x2f9670[_0x1ca9f1.uuid] = _0x369688;
                _0x39167a[_0x369688] = _0x1ca9f1;
                _0x2f9670[_0x3740ca] = _0x422a02;
                _0x39167a[_0x422a02] = _0x5fe5e2;
                for (let _0x5dbc71 = 0, _0x22790b = _0x2d1812; _0x5dbc71 !== _0x22790b; ++_0x5dbc71) {
                  const _0x2022ac = _0x571cf9[_0x5dbc71];
                  const _0x1ae9c9 = _0x2022ac[_0x422a02];
                  let _0x8931e3 = _0x2022ac[_0x369688];
                  _0x2022ac[_0x369688] = _0x1ae9c9;
                  if (_0x8931e3 === undefined) {
                    _0x8931e3 = new _0x246d87(_0x5fe5e2, _0x116fcd[_0x5dbc71], _0x246549[_0x5dbc71]);
                  }
                  _0x2022ac[_0x422a02] = _0x8931e3;
                }
              } else {
                _0x39167a[_0x369688];
              }
            }
            this.nCachedObjects_ = _0x5042ba;
          }
          remove() {
            const _0x3dbdb9 = this._objects;
            const _0x1d06da = this._indicesByUUID;
            const _0x19869a = this._bindings;
            const _0x3acafd = _0x19869a.length;
            var _0xf39c89;
            let _0x31bee7 = this.nCachedObjects_;
            _0xf39c89 = "dfia";
            for (let _0x11d8e9 = 0, _0x20ed67 = arguments.length; _0x11d8e9 !== _0x20ed67; ++_0x11d8e9) {
              var _0x38b0ea = arguments[_0x11d8e9];
              var _0x19adf2 = _0x38b0ea.uuid;
              var _0x5f6dd7 = _0x1d06da[_0x19adf2];
              if (_0x5f6dd7 !== undefined && _0x5f6dd7 >= _0x31bee7) {
                var _0x598f41 = _0x31bee7++;
                var _0x1bc6c2 = _0x3dbdb9[_0x598f41];
                _0x1d06da[_0x1bc6c2.uuid] = _0x5f6dd7;
                _0x3dbdb9[_0x5f6dd7] = _0x1bc6c2;
                _0x1d06da[_0x19adf2] = _0x598f41;
                _0x3dbdb9[_0x598f41] = _0x38b0ea;
                for (let _0x947b1b = 0, _0x49de91 = _0x3acafd; _0x947b1b !== _0x49de91; ++_0x947b1b) {
                  const _0x125492 = _0x19869a[_0x947b1b];
                  const _0x30e5f7 = _0x125492[_0x598f41];
                  const _0xce05cf = _0x125492[_0x5f6dd7];
                  _0x125492[_0x5f6dd7] = _0x30e5f7;
                  _0x125492[_0x598f41] = _0xce05cf;
                }
              }
            }
            this.nCachedObjects_ = _0x31bee7;
          }
          uncache() {
            const _0x217229 = this._objects;
            const _0x5b5386 = this._indicesByUUID;
            const _0x18e65f = this._bindings;
            const _0x25c7c9 = _0x18e65f.length;
            let _0x56e346 = this.nCachedObjects_;
            let _0xa11504 = _0x217229.length;
            for (let _0x29dcd9 = 0, _0x431c0a = arguments.length; _0x29dcd9 !== _0x431c0a; ++_0x29dcd9) {
              var _0x5e50fe = arguments[_0x29dcd9].uuid;
              var _0x511d23 = _0x5b5386[_0x5e50fe];
              if (_0x511d23 !== undefined) {
                delete _0x5b5386[_0x5e50fe];
                if (_0x511d23 < _0x56e346) {
                  var _0x743f97 = --_0x56e346;
                  _0x5e50fe = _0x217229[_0x743f97];
                  var _0x541e6b = --_0xa11504;
                  var _0x25d15d = _0x217229[_0x541e6b];
                  _0x5b5386[_0x5e50fe.uuid] = _0x511d23;
                  _0x217229[_0x511d23] = _0x5e50fe;
                  _0x5b5386[_0x25d15d.uuid] = _0x743f97;
                  _0x217229[_0x743f97] = _0x25d15d;
                  _0x217229.pop();
                  for (let _0x2a1512 = 0, _0x194dd7 = _0x25c7c9; _0x2a1512 !== _0x194dd7; ++_0x2a1512) {
                    const _0x2f9fd1 = _0x18e65f[_0x2a1512];
                    const _0x259ab4 = _0x2f9fd1[_0x743f97];
                    const _0x4f3fd7 = _0x2f9fd1[_0x541e6b];
                    _0x2f9fd1[_0x511d23] = _0x259ab4;
                    _0x2f9fd1[_0x743f97] = _0x4f3fd7;
                    _0x2f9fd1.pop();
                  }
                } else {
                  var _0x1b2c63 = 12;
                  var _0x2b2f35 = --_0xa11504;
                  _0x1b2c63 = 8;
                  _0x25d15d = _0x217229[_0x2b2f35];
                  if (_0x2b2f35 > 0) {
                    _0x5b5386[_0x25d15d.uuid] = _0x511d23;
                  }
                  _0x217229[_0x511d23] = _0x25d15d;
                  _0x217229.pop();
                  for (let _0x44b95d = 0, _0x48589d = _0x25c7c9; _0x44b95d !== _0x48589d; ++_0x44b95d) {
                    const _0x321e35 = _0x18e65f[_0x44b95d];
                    _0x321e35[_0x511d23] = _0x321e35[_0x2b2f35];
                    _0x321e35.pop();
                  }
                }
              }
            }
            this.nCachedObjects_ = _0x56e346;
          }
          subscribe_(_0x28cdfc, _0x14c1fc) {
            const _0x4ca0c5 = this._bindingsIndicesByPath;
            let _0x5f20a1 = _0x4ca0c5[_0x28cdfc];
            const _0x43cabc = this._bindings;
            if (_0x5f20a1 !== undefined) {
              return _0x43cabc[_0x5f20a1];
            }
            const _0x31383c = this._paths;
            const _0x3eef56 = this._parsedPaths;
            const _0x2b12f6 = this._objects;
            const _0x4a2baf = _0x2b12f6.length;
            const _0x560733 = this.nCachedObjects_;
            const _0x1a4042 = new Array(_0x4a2baf);
            _0x5f20a1 = _0x43cabc.length;
            _0x4ca0c5[_0x28cdfc] = _0x5f20a1;
            _0x31383c.push(_0x28cdfc);
            _0x3eef56.push(_0x14c1fc);
            _0x43cabc.push(_0x1a4042);
            for (let _0x2d3310 = _0x560733, _0x5d91bf = _0x2b12f6.length; _0x2d3310 !== _0x5d91bf; ++_0x2d3310) {
              var _0x4aad12 = _0x2b12f6[_0x2d3310];
              _0x1a4042[_0x2d3310] = new _0x246d87(_0x4aad12, _0x28cdfc, _0x14c1fc);
            }
            return _0x1a4042;
          }
          unsubscribe_(_0x3b2b47) {
            const _0x1429f8 = this._bindingsIndicesByPath;
            const _0xc20f46 = _0x1429f8[_0x3b2b47];
            if (_0xc20f46 !== undefined) {
              const _0x5dcc51 = this._paths;
              const _0x287862 = this._parsedPaths;
              const _0xea58b4 = this._bindings;
              const _0x1ea350 = _0xea58b4.length - 1;
              const _0x113002 = _0xea58b4[_0x1ea350];
              _0x1429f8[_0x3b2b47[_0x1ea350]] = _0xc20f46;
              _0xea58b4[_0xc20f46] = _0x113002;
              _0xea58b4.pop();
              _0x287862[_0xc20f46] = _0x287862[_0x1ea350];
              _0x287862.pop();
              _0x5dcc51[_0xc20f46] = _0x5dcc51[_0x1ea350];
              _0x5dcc51.pop();
            }
          }
        }
        _0x4874cc.prototype.isAnimationObjectGroup = true;
        class _0x42aa4b {
          constructor(_0x5becdd, _0x298fb6, _0x4178d0 = null, _0x2bf181 = _0x298fb6.blendMode) {
            this._mixer = _0x5becdd;
            this._clip = _0x298fb6;
            this._localRoot = _0x4178d0;
            this.blendMode = _0x2bf181;
            const _0x25b7d5 = _0x298fb6.tracks;
            const _0x4caa7f = _0x25b7d5.length;
            const _0x5e00a8 = new Array(_0x4caa7f);
            var _0x189d6d = 4;
            var _0x284b02 = {
              endingStart: _0x1f25f8,
              endingEnd: _0x1f25f8
            };
            _0x189d6d = 11;
            for (let _0x6afb65 = 0; _0x6afb65 !== _0x4caa7f; ++_0x6afb65) {
              const _0x3bf855 = _0x25b7d5[_0x6afb65].createInterpolant(null);
              _0x5e00a8[_0x6afb65] = _0x3bf855;
              _0x3bf855.settings = _0x284b02;
            }
            this._interpolantSettings = _0x284b02;
            this._interpolants = _0x5e00a8;
            this._propertyBindings = new Array(_0x4caa7f);
            this._cacheIndex = null;
            this._byClipCacheIndex = null;
            this._timeScaleInterpolant = null;
            this._weightInterpolant = null;
            this.loop = _0x21636b;
            this._loopCount = -1;
            this._startTime = null;
            this.time = 0;
            this.timeScale = 1;
            this._effectiveTimeScale = 1;
            this.weight = 1;
            this._effectiveWeight = 1;
            this.repetitions = Infinity;
            this.paused = false;
            this.enabled = true;
            this.clampWhenFinished = false;
            this.zeroSlopeAtStart = true;
            this.zeroSlopeAtEnd = true;
          }
          play() {
            this._mixer._activateAction(this);
            return this;
          }
          stop() {
            this._mixer._deactivateAction(this);
            return this.reset();
          }
          reset() {
            this.paused = false;
            this.enabled = true;
            this.time = 0;
            this._loopCount = -1;
            this._startTime = null;
            return this.stopFading().stopWarping();
          }
          isRunning() {
            return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
          }
          isScheduled() {
            return this._mixer._isActiveAction(this);
          }
          startAt(_0xbc557c) {
            this._startTime = _0xbc557c;
            return this;
          }
          setLoop(_0xfe889f, _0x5f0fd7) {
            this.loop = _0xfe889f;
            this.repetitions = _0x5f0fd7;
            return this;
          }
          setEffectiveWeight(_0x194692) {
            this.weight = _0x194692;
            this._effectiveWeight = this.enabled ? _0x194692 : 0;
            return this.stopFading();
          }
          getEffectiveWeight() {
            return this._effectiveWeight;
          }
          fadeIn(_0x425be5) {
            return this._scheduleFading(_0x425be5, 0, 1);
          }
          fadeOut(_0x70a246) {
            return this._scheduleFading(_0x70a246, 1, 0);
          }
          crossFadeFrom(_0x40809d, _0x45b95c, _0x4d102f) {
            var _0x14a599;
            var _0x496c58;
            _0x40809d.fadeOut(_0x45b95c);
            this.fadeIn(_0x45b95c);
            if (_0x4d102f) {
              _0x4d102f = (_0x14a599 = this._clip.duration) / (_0x496c58 = _0x40809d._clip.duration);
              _0x40809d.warp(1, _0x496c58 / _0x14a599, _0x45b95c);
              this.warp(_0x4d102f, 1, _0x45b95c);
            }
            return this;
          }
          crossFadeTo(_0x28fe1b, _0x19e449, _0x2f3f5a) {
            return _0x28fe1b.crossFadeFrom(this, _0x19e449, _0x2f3f5a);
          }
          stopFading() {
            var _0x58dd2a;
            var _0x208431 = this._weightInterpolant;
            _0x58dd2a = 6;
            if (_0x208431 !== null) {
              this._weightInterpolant = null;
              this._mixer._takeBackControlInterpolant(_0x208431);
            }
            return this;
          }
          setEffectiveTimeScale(_0x2a233a) {
            this.timeScale = _0x2a233a;
            this._effectiveTimeScale = this.paused ? 0 : _0x2a233a;
            return this.stopWarping();
          }
          getEffectiveTimeScale() {
            return this._effectiveTimeScale;
          }
          setDuration(_0x3ae7a3) {
            this.timeScale = this._clip.duration / _0x3ae7a3;
            return this.stopWarping();
          }
          syncWith(_0x3219f0) {
            this.time = _0x3219f0.time;
            this.timeScale = _0x3219f0.timeScale;
            return this.stopWarping();
          }
          halt(_0xc1e83a) {
            return this.warp(this._effectiveTimeScale, 0, _0xc1e83a);
          }
          warp(_0x24ff84, _0x1235f4, _0x203fd8) {
            const _0x28546e = this._mixer;
            const _0xab056e = _0x28546e.time;
            const _0x1cccaa = this.timeScale;
            let _0x50770c = this._timeScaleInterpolant;
            if (_0x50770c === null) {
              _0x50770c = _0x28546e._lendControlInterpolant();
              this._timeScaleInterpolant = _0x50770c;
            }
            const _0x480f03 = _0x50770c.parameterPositions;
            const _0x20360b = _0x50770c.sampleValues;
            _0x480f03[0] = _0xab056e;
            _0x480f03[1] = _0xab056e + _0x203fd8;
            _0x20360b[0] = _0x24ff84 / _0x1cccaa;
            _0x20360b[1] = _0x1235f4 / _0x1cccaa;
            return this;
          }
          stopWarping() {
            var _0x369979 = 8;
            var _0xf7006c = this._timeScaleInterpolant;
            _0x369979 = 12;
            if (_0xf7006c !== null) {
              this._timeScaleInterpolant = null;
              this._mixer._takeBackControlInterpolant(_0xf7006c);
            }
            return this;
          }
          getMixer() {
            return this._mixer;
          }
          getClip() {
            return this._clip;
          }
          getRoot() {
            return this._localRoot || this._mixer._root;
          }
          _update(_0x2a7e90, _0x2859f7, _0x31a8c3, _0x506183) {
            if (this.enabled) {
              var _0x2c4169 = this._startTime;
              if (_0x2c4169 !== null) {
                if ((_0x2c4169 = (_0x2a7e90 - _0x2c4169) * _0x31a8c3) < 0 || _0x31a8c3 === 0) {
                  return;
                }
                this._startTime = null;
                _0x2859f7 = _0x31a8c3 * _0x2c4169;
              }
              _0x2859f7 *= this._updateTimeScale(_0x2a7e90);
              var _0x1cd990 = this._updateTime(_0x2859f7);
              var _0x2c0839 = this._updateWeight(_0x2a7e90);
              if (_0x2c0839 > 0) {
                const _0x53a8c9 = this._interpolants;
                const _0x54323e = this._propertyBindings;
                if (this.blendMode === _0x3b8c97) {
                  for (let _0x5bd325 = 0, _0x1c990b = _0x53a8c9.length; _0x5bd325 !== _0x1c990b; ++_0x5bd325) {
                    _0x53a8c9[_0x5bd325].evaluate(_0x1cd990);
                    _0x54323e[_0x5bd325].accumulateAdditive(_0x2c0839);
                  }
                } else {
                  for (let _0x114088 = 0, _0x34bb90 = _0x53a8c9.length; _0x114088 !== _0x34bb90; ++_0x114088) {
                    _0x53a8c9[_0x114088].evaluate(_0x1cd990);
                    _0x54323e[_0x114088].accumulate(_0x506183, _0x2c0839);
                  }
                }
              }
            } else {
              this._updateWeight(_0x2a7e90);
            }
          }
          _updateWeight(_0x14797f) {
            let _0x5b594d = 0;
            if (this.enabled) {
              _0x5b594d = this.weight;
              var _0x31ab46 = 4;
              const _0xbc4f58 = this._weightInterpolant;
              _0x31ab46 = 3;
              var _0x1d7dc8;
              var _0x184c03;
              _0x1d7dc8 = 3;
              if (_0xbc4f58 !== null) {
                _0x184c03 = _0xbc4f58.evaluate(_0x14797f)[0];
                _0x5b594d *= _0x184c03;
                if (_0x14797f > _0xbc4f58.parameterPositions[1]) {
                  this.stopFading();
                  if (_0x184c03 === 0) {
                    this.enabled = false;
                  }
                }
              }
            }
            this._effectiveWeight = _0x5b594d;
            return _0x5b594d;
          }
          ["elacSemiTetadpu_".split("").reverse().join("")](_0x4cb3fe) {
            let _0x5b87e5 = 0;
            if (!this.paused) {
              _0x5b87e5 = this.timeScale;
              const _0x3c327b = this._timeScaleInterpolant;
              var _0x242822;
              if (_0x3c327b !== null) {
                _0x242822 = _0x3c327b.evaluate(_0x4cb3fe)[0];
                _0x5b87e5 *= _0x242822;
                if (_0x4cb3fe > _0x3c327b.parameterPositions[1]) {
                  this.stopWarping();
                  if (_0x5b87e5 === 0) {
                    this.paused = true;
                  } else {
                    this.timeScale = _0x5b87e5;
                  }
                }
              }
            }
            this._effectiveTimeScale = _0x5b87e5;
            return _0x5b87e5;
          }
          _updateTime(_0x9e8c40) {
            var _0x561917 = this._clip.duration;
            var _0x5c0444 = this.loop;
            let _0x3ca4e5 = this.time + _0x9e8c40;
            let _0x139e41 = this._loopCount;
            var _0xa48432;
            var _0x12f586 = _0x5c0444 === _0x100c0f;
            if (_0x9e8c40 === 0) {
              if (_0x139e41 !== -1 && _0x12f586 && (_0x139e41 & 1) == 1) {
                return _0x561917 - _0x3ca4e5;
              } else {
                return _0x3ca4e5;
              }
            }
            if (_0x5c0444 === _0x191ce6) {
              if (_0x139e41 === -1) {
                this._loopCount = 0;
                this._setEndings(true, true, false);
              }
              _0x80eae3: {
                if (_0x3ca4e5 >= _0x561917) {
                  _0x3ca4e5 = _0x561917;
                } else {
                  if (!(_0x3ca4e5 < 0)) {
                    this.time = _0x3ca4e5;
                    break _0x80eae3;
                  }
                  _0x3ca4e5 = 0;
                }
                if (this.clampWhenFinished) {
                  this.paused = true;
                } else {
                  this.enabled = false;
                }
                this.time = _0x3ca4e5;
                this._mixer.dispatchEvent({
                  type: "finished",
                  action: this,
                  direction: _0x9e8c40 < 0 ? -1 : 1
                });
              }
            } else {
              if (_0x139e41 === -1) {
                if (_0x9e8c40 >= 0) {
                  _0x139e41 = 0;
                  this._setEndings(true, this.repetitions === 0, _0x12f586);
                } else {
                  this._setEndings(this.repetitions === 0, true, _0x12f586);
                }
              }
              if (_0x3ca4e5 >= _0x561917 || _0x3ca4e5 < 0) {
                _0x3ca4e5 -= _0x561917 * (_0xa48432 = Math.floor(_0x3ca4e5 / _0x561917));
                _0x139e41 += Math.abs(_0xa48432);
                if ((_0x5c0444 = this.repetitions - _0x139e41) <= 0) {
                  if (this.clampWhenFinished) {
                    this.paused = true;
                  } else {
                    this.enabled = false;
                  }
                  _0x3ca4e5 = _0x9e8c40 > 0 ? _0x561917 : 0;
                  this.time = _0x3ca4e5;
                  this._mixer.dispatchEvent({
                    type: "finished",
                    action: this,
                    direction: _0x9e8c40 > 0 ? 1 : -1
                  });
                } else {
                  if (_0x5c0444 == 1) {
                    this._setEndings(_0x5c0444 = _0x9e8c40 < 0, !_0x5c0444, _0x12f586);
                  } else {
                    this._setEndings(false, false, _0x12f586);
                  }
                  this._loopCount = _0x139e41;
                  this.time = _0x3ca4e5;
                  this._mixer.dispatchEvent({
                    type: "loop",
                    action: this,
                    loopDelta: _0xa48432
                  });
                }
              } else {
                this.time = _0x3ca4e5;
              }
              if (_0x12f586 && (_0x139e41 & 1) == 1) {
                return _0x561917 - _0x3ca4e5;
              }
            }
            return _0x3ca4e5;
          }
          _setEndings(_0x214da8, _0x536580, _0x110c1a) {
            const _0x1d2cdd = this._interpolantSettings;
            if (_0x110c1a) {
              _0x1d2cdd.endingStart = _0x3c5781;
              _0x1d2cdd.endingEnd = _0x3c5781;
            } else {
              _0x1d2cdd.endingStart = _0x214da8 ? this.zeroSlopeAtStart ? _0x3c5781 : _0x1f25f8 : _0x408fc9;
              _0x1d2cdd.endingEnd = _0x536580 ? this.zeroSlopeAtEnd ? _0x3c5781 : _0x1f25f8 : _0x408fc9;
            }
          }
          _scheduleFading(_0x143f08, _0x3588c5, _0xeb2541) {
            const _0x27a0c1 = this._mixer;
            const _0xd698f5 = _0x27a0c1.time;
            let _0x156a94 = this._weightInterpolant;
            if (_0x156a94 === null) {
              _0x156a94 = _0x27a0c1._lendControlInterpolant();
              this._weightInterpolant = _0x156a94;
            }
            const _0x47a7d7 = _0x156a94.parameterPositions;
            const _0x5c2c52 = _0x156a94.sampleValues;
            _0x47a7d7[0] = _0xd698f5;
            _0x5c2c52[0] = _0x3588c5;
            _0x47a7d7[1] = _0xd698f5 + _0x143f08;
            _0x5c2c52[1] = _0xeb2541;
            return this;
          }
        }
        class _0x356be4 extends _0x3a55ab {
          constructor(_0x46a2af) {
            super();
            this._root = _0x46a2af;
            this._initMemoryManager();
            this._accuIndex = 0;
            this.time = 0;
            this.timeScale = 1;
          }
          _bindAction(_0x3eaf20, _0x31facf) {
            const _0x22c6c5 = _0x3eaf20._localRoot || this._root;
            const _0x4d6284 = _0x3eaf20._clip.tracks;
            const _0x2a362d = _0x4d6284.length;
            const _0x22f084 = _0x3eaf20._propertyBindings;
            const _0x96d826 = _0x3eaf20._interpolants;
            const _0x75ad78 = _0x22c6c5.uuid;
            const _0x5efbce = this._bindingsByRootAndName;
            let _0x3c3233 = _0x5efbce[_0x75ad78];
            if (_0x3c3233 === undefined) {
              _0x3c3233 = {};
              _0x5efbce[_0x75ad78] = _0x3c3233;
            }
            for (let _0x8fc6e5 = 0; _0x8fc6e5 !== _0x2a362d; ++_0x8fc6e5) {
              const _0x259941 = _0x4d6284[_0x8fc6e5];
              const _0x2dc0de = _0x259941.name;
              let _0x435b7a = _0x3c3233[_0x2dc0de];
              if (_0x435b7a !== undefined) {
                _0x22f084[_0x8fc6e5] = _0x435b7a;
              } else {
                _0x435b7a = _0x22f084[_0x8fc6e5];
                if (_0x435b7a !== undefined) {
                  if (_0x435b7a._cacheIndex === null) {
                    ++_0x435b7a.referenceCount;
                    this._addInactiveBinding(_0x435b7a, _0x75ad78, _0x2dc0de);
                  }
                  continue;
                }
                var _0x20f3ae = 11;
                var _0x4baf88 = _0x31facf && _0x31facf._propertyBindings[_0x8fc6e5].binding.parsedPath;
                _0x20f3ae = "fmbj";
                _0x435b7a = new _0x16824e(_0x246d87.create(_0x22c6c5, _0x2dc0de, _0x4baf88), _0x259941.ValueTypeName, _0x259941.getValueSize());
                ++_0x435b7a.referenceCount;
                this._addInactiveBinding(_0x435b7a, _0x75ad78, _0x2dc0de);
                _0x22f084[_0x8fc6e5] = _0x435b7a;
              }
              _0x96d826[_0x8fc6e5].resultBuffer = _0x435b7a.buffer;
            }
          }
          _activateAction(_0x50748c) {
            if (!this._isActiveAction(_0x50748c)) {
              var _0x3f8ffc;
              var _0x40ce25;
              var _0x272b56;
              if (_0x50748c._cacheIndex === null) {
                _0x3f8ffc = (_0x50748c._localRoot || this._root).uuid;
                _0x40ce25 = _0x50748c._clip.uuid;
                _0x272b56 = this._actionsByClip[_0x40ce25];
                this._bindAction(_0x50748c, _0x272b56 && _0x272b56.knownActions[0]);
                this._addInactiveAction(_0x50748c, _0x40ce25, _0x3f8ffc);
              }
              var _0x4c779d = 3;
              var _0x5a6189 = _0x50748c._propertyBindings;
              _0x4c779d = 10;
              for (let _0x5c1c4a = 0, _0x5dd7b8 = _0x5a6189.length; _0x5c1c4a !== _0x5dd7b8; ++_0x5c1c4a) {
                const _0x55d0fc = _0x5a6189[_0x5c1c4a];
                if (_0x55d0fc.useCount++ == 0) {
                  this._lendBinding(_0x55d0fc);
                  _0x55d0fc.saveOriginalState();
                }
              }
              this._lendAction(_0x50748c);
            }
          }
          _deactivateAction(_0x275cfc) {
            if (this._isActiveAction(_0x275cfc)) {
              var _0x49cc32 = 6;
              var _0x19a89e = _0x275cfc._propertyBindings;
              _0x49cc32 = 8;
              for (let _0x27e19a = 0, _0x38b68a = _0x19a89e.length; _0x27e19a !== _0x38b68a; ++_0x27e19a) {
                const _0x1856df = _0x19a89e[_0x27e19a];
                if (--_0x1856df.useCount == 0) {
                  _0x1856df.restoreOriginalState();
                  this._takeBackBinding(_0x1856df);
                }
              }
              this._takeBackAction(_0x275cfc);
            }
          }
          _initMemoryManager() {
            this._actions = [];
            this._nActiveActions = 0;
            this._actionsByClip = {};
            this._bindings = [];
            this._nActiveBindings = 0;
            this._bindingsByRootAndName = {};
            this._controlInterpolants = [];
            this._nActiveControlInterpolants = 0;
            const _0x207bc0 = this;
            this.stats = {
              actions: {
                get total() {
                  return _0x207bc0._actions.length;
                },
                get inUse() {
                  return _0x207bc0._nActiveActions;
                }
              },
              bindings: {
                get total() {
                  return _0x207bc0._bindings.length;
                },
                get inUse() {
                  return _0x207bc0._nActiveBindings;
                }
              },
              controlInterpolants: {
                get total() {
                  return _0x207bc0._controlInterpolants.length;
                },
                get inUse() {
                  return _0x207bc0._nActiveControlInterpolants;
                }
              }
            };
          }
          _isActiveAction(_0x4e0a22) {
            return (_0x4e0a22 = _0x4e0a22._cacheIndex) !== null && _0x4e0a22 < this._nActiveActions;
          }
          _addInactiveAction(_0x4bf5c3, _0x3a451f, _0x8c1c8) {
            const _0xeb8e19 = this._actions;
            const _0x4f8074 = this._actionsByClip;
            let _0xd52c81 = _0x4f8074[_0x3a451f];
            if (_0xd52c81 === undefined) {
              _0xd52c81 = {
                knownActions: [_0x4bf5c3],
                actionByRoot: {}
              };
              _0x4bf5c3._byClipCacheIndex = 0;
              _0x4f8074[_0x3a451f] = _0xd52c81;
            } else {
              var _0x2779bd = 12;
              const _0x3fae0c = _0xd52c81.knownActions;
              _0x2779bd = 11;
              _0x4bf5c3._byClipCacheIndex = _0x3fae0c.length;
              _0x3fae0c.push(_0x4bf5c3);
            }
            _0x4bf5c3._cacheIndex = _0xeb8e19.length;
            _0xeb8e19.push(_0x4bf5c3);
            _0xd52c81.actionByRoot[_0x8c1c8] = _0x4bf5c3;
          }
          _removeInactiveAction(_0x47d3ef) {
            const _0x4679f7 = this._actions;
            const _0x2d1d93 = _0x4679f7[_0x4679f7.length - 1];
            const _0x2570fd = _0x47d3ef._cacheIndex;
            _0x2d1d93._cacheIndex = _0x2570fd;
            _0x4679f7[_0x2570fd] = _0x2d1d93;
            _0x4679f7.pop();
            _0x47d3ef._cacheIndex = null;
            const _0x7d794a = _0x47d3ef._clip.uuid;
            const _0x287a76 = this._actionsByClip;
            const _0x2c8cb2 = _0x287a76[_0x7d794a];
            const _0xdac749 = _0x2c8cb2.knownActions;
            const _0x4010f7 = _0xdac749[_0xdac749.length - 1];
            const _0x4c0d6f = _0x47d3ef._byClipCacheIndex;
            _0x4010f7._byClipCacheIndex = _0x4c0d6f;
            _0xdac749[_0x4c0d6f] = _0x4010f7;
            _0xdac749.pop();
            _0x47d3ef._byClipCacheIndex = null;
            delete _0x2c8cb2.actionByRoot[(_0x47d3ef._localRoot || this._root).uuid];
            if (_0xdac749.length === 0) {
              delete _0x287a76[_0x7d794a];
            }
            this._removeInactiveBindingsForAction(_0x47d3ef);
          }
          _removeInactiveBindingsForAction(_0x2f10fc) {
            var _0x195bad = _0x2f10fc._propertyBindings;
            for (let _0x29da79 = 0, _0x155928 = _0x195bad.length; _0x29da79 !== _0x155928; ++_0x29da79) {
              var _0xac27a0 = 10;
              const _0x56e4bd = _0x195bad[_0x29da79];
              _0xac27a0 = 2;
              if (--_0x56e4bd.referenceCount == 0) {
                this._removeInactiveBinding(_0x56e4bd);
              }
            }
          }
          _lendAction(_0x4fd5d3) {
            const _0x23faae = this._actions;
            const _0x41d8c7 = _0x4fd5d3._cacheIndex;
            const _0x140119 = this._nActiveActions++;
            const _0x2b5f22 = _0x23faae[_0x140119];
            _0x4fd5d3._cacheIndex = _0x140119;
            _0x23faae[_0x140119] = _0x4fd5d3;
            _0x2b5f22._cacheIndex = _0x41d8c7;
            _0x23faae[_0x41d8c7] = _0x2b5f22;
          }
          _takeBackAction(_0x3287c9) {
            const _0x508e12 = this._actions;
            const _0x5c3114 = _0x3287c9._cacheIndex;
            const _0x5554d9 = --this._nActiveActions;
            const _0x2082dd = _0x508e12[_0x5554d9];
            _0x3287c9._cacheIndex = _0x5554d9;
            _0x508e12[_0x5554d9] = _0x3287c9;
            _0x2082dd._cacheIndex = _0x5c3114;
            _0x508e12[_0x5c3114] = _0x2082dd;
          }
          _addInactiveBinding(_0x90373c, _0x5805e2, _0x5bab55) {
            const _0x43a50e = this._bindingsByRootAndName;
            const _0x53b375 = this._bindings;
            var _0x1a4879;
            let _0x59745e = _0x43a50e[_0x5805e2];
            _0x1a4879 = 2;
            if (_0x59745e === undefined) {
              _0x59745e = {};
              _0x43a50e[_0x5805e2] = _0x59745e;
            }
            (_0x59745e[_0x5bab55] = _0x90373c)._cacheIndex = _0x53b375.length;
            _0x53b375.push(_0x90373c);
          }
          _removeInactiveBinding(_0x3cb9b6) {
            const _0x185bfd = this._bindings;
            const _0xf83d21 = _0x3cb9b6.binding;
            const _0x7474ca = _0xf83d21.rootNode.uuid;
            const _0x11e7fc = _0xf83d21.path;
            const _0x78dec3 = this._bindingsByRootAndName;
            const _0x479890 = _0x78dec3[_0x7474ca];
            const _0x2d4081 = _0x185bfd[_0x185bfd.length - 1];
            const _0xa7ec21 = _0x3cb9b6._cacheIndex;
            _0x2d4081._cacheIndex = _0xa7ec21;
            _0x185bfd[_0xa7ec21] = _0x2d4081;
            _0x185bfd.pop();
            delete _0x479890[_0x11e7fc];
            if (Object.keys(_0x479890).length === 0) {
              delete _0x78dec3[_0x7474ca];
            }
          }
          _lendBinding(_0x3962ae) {
            const _0x38c863 = this._bindings;
            const _0x23aa93 = _0x3962ae._cacheIndex;
            const _0x39c2b3 = this._nActiveBindings++;
            const _0x1bff5a = _0x38c863[_0x39c2b3];
            _0x3962ae._cacheIndex = _0x39c2b3;
            _0x38c863[_0x39c2b3] = _0x3962ae;
            _0x1bff5a._cacheIndex = _0x23aa93;
            _0x38c863[_0x23aa93] = _0x1bff5a;
          }
          _takeBackBinding(_0x317f81) {
            const _0x38c70f = this._bindings;
            const _0x42c203 = _0x317f81._cacheIndex;
            const _0x5095af = --this._nActiveBindings;
            const _0xab1160 = _0x38c70f[_0x5095af];
            _0x317f81._cacheIndex = _0x5095af;
            _0x38c70f[_0x5095af] = _0x317f81;
            _0xab1160._cacheIndex = _0x42c203;
            _0x38c70f[_0x42c203] = _0xab1160;
          }
          _lendControlInterpolant() {
            const _0x4f510b = this._controlInterpolants;
            const _0x3f8e81 = this._nActiveControlInterpolants++;
            let _0x2a0714 = _0x4f510b[_0x3f8e81];
            if (_0x2a0714 === undefined) {
              _0x2a0714 = new _0x57b9af(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
              _0x2a0714.__cacheIndex = _0x3f8e81;
              _0x4f510b[_0x3f8e81] = _0x2a0714;
            }
            return _0x2a0714;
          }
          _takeBackControlInterpolant(_0x107df0) {
            const _0x5c0e2c = this._controlInterpolants;
            const _0x2437e8 = _0x107df0.__cacheIndex;
            const _0x3394a0 = --this._nActiveControlInterpolants;
            const _0x1b091e = _0x5c0e2c[_0x3394a0];
            _0x107df0.__cacheIndex = _0x3394a0;
            _0x5c0e2c[_0x3394a0] = _0x107df0;
            _0x1b091e.__cacheIndex = _0x2437e8;
            _0x5c0e2c[_0x2437e8] = _0x1b091e;
          }
          clipAction(_0x341ce6, _0x19bc0e, _0x15184d) {
            var _0x53760c = (_0x5ef693 = _0x19bc0e || this._root).uuid;
            let _0x3bda89 = typeof _0x341ce6 == "string" ? _0xac731b.findByName(_0x5ef693, _0x341ce6) : _0x341ce6;
            var _0x170d25 = _0x3bda89 !== null ? _0x3bda89.uuid : _0x341ce6;
            var _0x5ef693 = this._actionsByClip[_0x170d25];
            var _0x162302 = 11;
            let _0x5e5e40 = null;
            _0x162302 = "lpmd";
            if (_0x15184d === undefined) {
              _0x15184d = _0x3bda89 !== null ? _0x3bda89.blendMode : _0x335480;
            }
            if (_0x5ef693 !== undefined) {
              if ((_0x341ce6 = _0x5ef693.actionByRoot[_0x53760c]) !== undefined && _0x341ce6.blendMode === _0x15184d) {
                return _0x341ce6;
              }
              _0x5e5e40 = _0x5ef693.knownActions[0];
              if (_0x3bda89 === null) {
                _0x3bda89 = _0x5e5e40._clip;
              }
            }
            if (_0x3bda89 === null) {
              return null;
            } else {
              _0x15184d = new _0x42aa4b(this, _0x3bda89, _0x19bc0e, _0x15184d);
              this._bindAction(_0x15184d, _0x5e5e40);
              this._addInactiveAction(_0x15184d, _0x170d25, _0x53760c);
              return _0x15184d;
            }
          }
          existingAction(_0x323e79, _0x353cb6) {
            var _0x4cf125;
            var _0x3401bc;
            _0x4cf125 = "ieqo";
            _0x353cb6 = (_0x3401bc = _0x353cb6 || this._root).uuid;
            _0x323e79 = (_0x3401bc = typeof _0x323e79 == "string" ? _0xac731b.findByName(_0x3401bc, _0x323e79) : _0x323e79) ? _0x3401bc.uuid : _0x323e79;
            return (_0x323e79 = this._actionsByClip[_0x323e79]) !== undefined && _0x323e79.actionByRoot[_0x353cb6] || null;
          }
          stopAllAction() {
            const _0x153a6a = this._actions;
            for (let _0x4a4cf8 = this._nActiveActions - 1; _0x4a4cf8 >= 0; --_0x4a4cf8) {
              _0x153a6a[_0x4a4cf8].stop();
            }
            return this;
          }
          update(_0x5f43a5) {
            _0x5f43a5 *= this.timeScale;
            var _0x1c1722 = this._actions;
            var _0x3fe152 = this._nActiveActions;
            var _0x1f0684 = this.time += _0x5f43a5;
            var _0x481386 = Math.sign(_0x5f43a5);
            var _0x52e3b3 = this._accuIndex ^= 1;
            for (let _0x56c377 = 0; _0x56c377 !== _0x3fe152; ++_0x56c377) {
              _0x1c1722[_0x56c377]._update(_0x1f0684, _0x5f43a5, _0x481386, _0x52e3b3);
            }
            const _0x67427b = this._bindings;
            const _0x15fa93 = this._nActiveBindings;
            for (let _0x20e8fa = 0; _0x20e8fa !== _0x15fa93; ++_0x20e8fa) {
              _0x67427b[_0x20e8fa].apply(_0x52e3b3);
            }
            return this;
          }
          setTime(_0x4508dc) {
            for (let _0x16d8ca = this.time = 0; _0x16d8ca < this._actions.length; _0x16d8ca++) {
              this._actions[_0x16d8ca].time = 0;
            }
            return this.update(_0x4508dc);
          }
          getRoot() {
            return this._root;
          }
          uncacheClip(_0x732352) {
            const _0x3e8d2d = this._actions;
            const _0x26190e = _0x732352.uuid;
            const _0x957604 = this._actionsByClip;
            const _0x3a402b = _0x957604[_0x26190e];
            if (_0x3a402b !== undefined) {
              var _0x1f61df = _0x3a402b.knownActions;
              for (let _0x43812a = 0, _0x1ef8fd = _0x1f61df.length; _0x43812a !== _0x1ef8fd; ++_0x43812a) {
                const _0x108c01 = _0x1f61df[_0x43812a];
                this._deactivateAction(_0x108c01);
                const _0x3f0ad7 = _0x108c01._cacheIndex;
                const _0x2f075f = _0x3e8d2d[_0x3e8d2d.length - 1];
                _0x108c01._cacheIndex = null;
                _0x108c01._byClipCacheIndex = null;
                _0x2f075f._cacheIndex = _0x3f0ad7;
                _0x3e8d2d[_0x3f0ad7] = _0x2f075f;
                _0x3e8d2d.pop();
                this._removeInactiveBindingsForAction(_0x108c01);
              }
              delete _0x957604[_0x26190e];
            }
          }
          uncacheRoot(_0x5e11f4) {
            var _0x54b890 = _0x5e11f4.uuid;
            var _0x5da449 = this._actionsByClip;
            for (const _0xcc854f in _0x5da449) {
              var _0x1ae3ed = _0x5da449[_0xcc854f].actionByRoot[_0x54b890];
              if (_0x1ae3ed !== undefined) {
                this._deactivateAction(_0x1ae3ed);
                this._removeInactiveAction(_0x1ae3ed);
              }
            }
            var _0x27354f = this._bindingsByRootAndName[_0x54b890];
            if (_0x27354f !== undefined) {
              for (const _0x7b2ebb in _0x27354f) {
                const _0x42eb53 = _0x27354f[_0x7b2ebb];
                _0x42eb53.restoreOriginalState();
                this._removeInactiveBinding(_0x42eb53);
              }
            }
          }
          uncacheAction(_0x43fbf4, _0x232483) {
            if ((_0x232483 = this.existingAction(_0x43fbf4, _0x232483)) !== null) {
              this._deactivateAction(_0x232483);
              this._removeInactiveAction(_0x232483);
            }
          }
        }
        _0x356be4.prototype._controlInterpolantsResultBuffer = new Float32Array(1);
        class _0x472c4a {
          constructor(_0x787366) {
            this.value = _0x787366 = typeof _0x787366 == "string" ? arguments[1] : _0x787366;
          }
          clone() {
            return new _0x472c4a(this.value.clone === undefined ? this.value : this.value.clone());
          }
        }
        class _0xab7a6a extends _0x3f5d1e {
          constructor(_0xf229d9, _0x306f82, _0x20e589 = 1) {
            super(_0xf229d9, _0x306f82);
            this.meshPerAttribute = _0x20e589;
          }
          copy(_0x4af702) {
            super.copy(_0x4af702);
            this.meshPerAttribute = _0x4af702.meshPerAttribute;
            return this;
          }
          clone(_0x370175) {
            const _0x15d861 = super.clone(_0x370175);
            _0x15d861.meshPerAttribute = this.meshPerAttribute;
            return _0x15d861;
          }
          toJSON(_0x48cc2e) {
            var _0x9b5264;
            const _0x15aef1 = super.toJSON(_0x48cc2e);
            _0x9b5264 = "ljmq";
            _0x15aef1.isInstancedInterleavedBuffer = true;
            _0x15aef1.meshPerAttribute = this.meshPerAttribute;
            return _0x15aef1;
          }
        }
        _0xab7a6a.prototype.isInstancedInterleavedBuffer = true;
        class _0x5c4ef4 {
          constructor(_0x595fe5, _0x1c171a, _0x1ac280, _0x42ab16, _0x28f8c6) {
            this.buffer = _0x595fe5;
            this.type = _0x1c171a;
            this.itemSize = _0x1ac280;
            this.elementSize = _0x42ab16;
            this.count = _0x28f8c6;
            this.version = 0;
          }
          set needsUpdate(_0x5e3c17) {
            if (_0x5e3c17 === true) {
              this.version++;
            }
          }
          setBuffer(_0x33ed8b) {
            this.buffer = _0x33ed8b;
            return this;
          }
          setType(_0x477f41, _0x4076d5) {
            this.type = _0x477f41;
            this.elementSize = _0x4076d5;
            return this;
          }
          setItemSize(_0x4c749d) {
            this.itemSize = _0x4c749d;
            return this;
          }
          setCount(_0x4c6289) {
            this.count = _0x4c6289;
            return this;
          }
        }
        _0x5c4ef4.prototype.isGLBufferAttribute = true;
        class _0x426fe0 {
          constructor(_0x58fb82, _0x1abafb, _0x2075e2 = 0, _0x7d545b = Infinity) {
            this.ray = new _0x123ff1(_0x58fb82, _0x1abafb);
            this.near = _0x2075e2;
            this.far = _0x7d545b;
            this.camera = null;
            this.layers = new _0x10d507();
            this.params = {
              Mesh: {},
              Line: {
                threshold: 1
              },
              LOD: {},
              Points: {
                threshold: 1
              },
              Sprite: {}
            };
          }
          set(_0x27fa50, _0x2dd92b) {
            this.ray.set(_0x27fa50, _0x2dd92b);
          }
          setFromCamera(_0x2c8aee, _0x2fb002) {
            if (_0x2fb002 && _0x2fb002.isPerspectiveCamera) {
              this.ray.origin.setFromMatrixPosition(_0x2fb002.matrixWorld);
              this.ray.direction.set(_0x2c8aee.x, _0x2c8aee.y, 0.5).unproject(_0x2fb002).sub(this.ray.origin).normalize();
              this.camera = _0x2fb002;
            } else if (_0x2fb002 && _0x2fb002.isOrthographicCamera) {
              this.ray.origin.set(_0x2c8aee.x, _0x2c8aee.y, (_0x2fb002.near + _0x2fb002.far) / (_0x2fb002.near - _0x2fb002.far)).unproject(_0x2fb002);
              this.ray.direction.set(0, 0, -1).transformDirection(_0x2fb002.matrixWorld);
              this.camera = _0x2fb002;
            }
          }
          intersectObject(_0x161dec, _0x12725e = true, _0x4c9946 = []) {
            _0x41719d(_0x161dec, this, _0x4c9946, _0x12725e);
            _0x4c9946.sort(_0x387b98);
            return _0x4c9946;
          }
          intersectObjects(_0x6828db, _0x1eed9b = true, _0x477c11 = []) {
            for (let _0x38f3fc = 0, _0x361659 = _0x6828db.length; _0x38f3fc < _0x361659; _0x38f3fc++) {
              _0x41719d(_0x6828db[_0x38f3fc], this, _0x477c11, _0x1eed9b);
            }
            _0x477c11.sort(_0x387b98);
            return _0x477c11;
          }
        }
        function _0x387b98(_0x44c166, _0x1e55a4) {
          return _0x44c166.distance - _0x1e55a4.distance;
        }
        function _0x41719d(_0x3ee742, _0x34da5c, _0x2051da, _0x20a4b5) {
          if (_0x3ee742.layers.test(_0x34da5c.layers)) {
            _0x3ee742.raycast(_0x34da5c, _0x2051da);
          }
          if (_0x20a4b5 === true) {
            var _0x18e30c = _0x3ee742.children;
            for (let _0x4a293f = 0, _0x3f49ac = _0x18e30c.length; _0x4a293f < _0x3f49ac; _0x4a293f++) {
              _0x41719d(_0x18e30c[_0x4a293f], _0x34da5c, _0x2051da, true);
            }
          }
        }
        class _0x40b38f {
          constructor(_0x20d41c = 1, _0x343382 = 0, _0x272828 = 0) {
            this.radius = _0x20d41c;
            this.phi = _0x343382;
            this.theta = _0x272828;
            return this;
          }
          set(_0x28db88, _0x73b28d, _0x5b39a3) {
            this.radius = _0x28db88;
            this.phi = _0x73b28d;
            this.theta = _0x5b39a3;
            return this;
          }
          copy(_0x1eb5b5) {
            this.radius = _0x1eb5b5.radius;
            this.phi = _0x1eb5b5.phi;
            this.theta = _0x1eb5b5.theta;
            return this;
          }
          makeSafe() {
            this.phi = Math.max(0.000001, Math.min(Math.PI - 0.000001, this.phi));
            return this;
          }
          setFromVector3(_0x453292) {
            return this.setFromCartesianCoords(_0x453292.x, _0x453292.y, _0x453292.z);
          }
          setFromCartesianCoords(_0x328c01, _0x4b6a7e, _0x53817a) {
            this.radius = Math.sqrt(_0x328c01 * _0x328c01 + _0x4b6a7e * _0x4b6a7e + _0x53817a * _0x53817a);
            if (this.radius === 0) {
              this.theta = 0;
              this.phi = 0;
            } else {
              this.theta = Math.atan2(_0x328c01, _0x53817a);
              this.phi = Math.acos(_0x6865cb(_0x4b6a7e / this.radius, -1, 1));
            }
            return this;
          }
          clone() {
            return new this.constructor().copy(this);
          }
        }
        class _0x1308f8 {
          constructor(_0x1d5b14 = 1, _0x1aec4e = 0, _0x8ab584 = 0) {
            this.radius = _0x1d5b14;
            this.theta = _0x1aec4e;
            this.y = _0x8ab584;
            return this;
          }
          set(_0x3812ac, _0x41a475, _0x1f42bf) {
            this.radius = _0x3812ac;
            this.theta = _0x41a475;
            this.y = _0x1f42bf;
            return this;
          }
          copy(_0x2598ff) {
            this.radius = _0x2598ff.radius;
            this.theta = _0x2598ff.theta;
            this.y = _0x2598ff.y;
            return this;
          }
          setFromVector3(_0x44a349) {
            return this.setFromCartesianCoords(_0x44a349.x, _0x44a349.y, _0x44a349.z);
          }
          setFromCartesianCoords(_0x305c18, _0x435f64, _0x1861fc) {
            this.radius = Math.sqrt(_0x305c18 * _0x305c18 + _0x1861fc * _0x1861fc);
            this.theta = Math.atan2(_0x305c18, _0x1861fc);
            this.y = _0x435f64;
            return this;
          }
          clone() {
            return new this.constructor().copy(this);
          }
        }
        const _0x294fd6 = new _0x25f874();
        class _0x4e4f24 {
          constructor(_0x1455a0 = new _0x25f874(Infinity, Infinity), _0x28738a = new _0x25f874(-Infinity, -Infinity)) {
            this.min = _0x1455a0;
            this.max = _0x28738a;
          }
          set(_0x151253, _0x5b1ce9) {
            this.min.copy(_0x151253);
            this.max.copy(_0x5b1ce9);
            return this;
          }
          setFromPoints(_0x266e8b) {
            this.makeEmpty();
            for (let _0x27f5ea = 0, _0xe348c2 = _0x266e8b.length; _0x27f5ea < _0xe348c2; _0x27f5ea++) {
              this.expandByPoint(_0x266e8b[_0x27f5ea]);
            }
            return this;
          }
          setFromCenterAndSize(_0x5cf772, _0x1a53f8) {
            _0x1a53f8 = _0x294fd6.copy(_0x1a53f8).multiplyScalar(0.5);
            this.min.copy(_0x5cf772).sub(_0x1a53f8);
            this.max.copy(_0x5cf772).add(_0x1a53f8);
            return this;
          }
          clone() {
            return new this.constructor().copy(this);
          }
          copy(_0x1fd0ad) {
            this.min.copy(_0x1fd0ad.min);
            this.max.copy(_0x1fd0ad.max);
            return this;
          }
          makeEmpty() {
            this.min.x = this.min.y = Infinity;
            this.max.x = this.max.y = -Infinity;
            return this;
          }
          isEmpty() {
            return this.max.x < this.min.x || this.max.y < this.min.y;
          }
          getCenter(_0x52bc9a) {
            if (this.isEmpty()) {
              return _0x52bc9a.set(0, 0);
            } else {
              return _0x52bc9a.addVectors(this.min, this.max).multiplyScalar(0.5);
            }
          }
          getSize(_0x32a95e) {
            if (this.isEmpty()) {
              return _0x32a95e.set(0, 0);
            } else {
              return _0x32a95e.subVectors(this.max, this.min);
            }
          }
          expandByPoint(_0x41359f) {
            this.min.min(_0x41359f);
            this.max.max(_0x41359f);
            return this;
          }
          expandByVector(_0x4b8370) {
            this.min.sub(_0x4b8370);
            this.max.add(_0x4b8370);
            return this;
          }
          expandByScalar(_0x47c7ca) {
            this.min.addScalar(-_0x47c7ca);
            this.max.addScalar(_0x47c7ca);
            return this;
          }
          containsPoint(_0x204ac6) {
            return !(_0x204ac6.x < this.min.x || _0x204ac6.x > this.max.x || _0x204ac6.y < this.min.y || _0x204ac6.y > this.max.y);
          }
          containsBox(_0x1e4b27) {
            return this.min.x <= _0x1e4b27.min.x && _0x1e4b27.max.x <= this.max.x && this.min.y <= _0x1e4b27.min.y && _0x1e4b27.max.y <= this.max.y;
          }
          getParameter(_0xd2a8d2, _0x1c41a8) {
            return _0x1c41a8.set((_0xd2a8d2.x - this.min.x) / (this.max.x - this.min.x), (_0xd2a8d2.y - this.min.y) / (this.max.y - this.min.y));
          }
          intersectsBox(_0xc41232) {
            return !(_0xc41232.max.x < this.min.x || _0xc41232.min.x > this.max.x || _0xc41232.max.y < this.min.y || _0xc41232.min.y > this.max.y);
          }
          clampPoint(_0x398a81, _0x5a9a34) {
            return _0x5a9a34.copy(_0x398a81).clamp(this.min, this.max);
          }
          distanceToPoint(_0x317a52) {
            return _0x294fd6.copy(_0x317a52).clamp(this.min, this.max).sub(_0x317a52).length();
          }
          intersect(_0x5d1ea8) {
            this.min.max(_0x5d1ea8.min);
            this.max.min(_0x5d1ea8.max);
            return this;
          }
          union(_0x34bafe) {
            this.min.min(_0x34bafe.min);
            this.max.max(_0x34bafe.max);
            return this;
          }
          translate(_0x5b8a51) {
            this.min.add(_0x5b8a51);
            this.max.add(_0x5b8a51);
            return this;
          }
          equals(_0x47fcb0) {
            return _0x47fcb0.min.equals(this.min) && _0x47fcb0.max.equals(this.max);
          }
        }
        _0x4e4f24.prototype.isBox2 = true;
        const _0xb85ced = new _0x1d20ef();
        const _0x4a541c = new _0x1d20ef();
        class _0x3d84a8 {
          constructor(_0x194519 = new _0x1d20ef(), _0x400e2e = new _0x1d20ef()) {
            this.start = _0x194519;
            this.end = _0x400e2e;
          }
          set(_0x497a6, _0x2e4cb5) {
            this.start.copy(_0x497a6);
            this.end.copy(_0x2e4cb5);
            return this;
          }
          copy(_0x21eb65) {
            this.start.copy(_0x21eb65.start);
            this.end.copy(_0x21eb65.end);
            return this;
          }
          getCenter(_0xe76f5b) {
            return _0xe76f5b.addVectors(this.start, this.end).multiplyScalar(0.5);
          }
          delta(_0x2498c7) {
            return _0x2498c7.subVectors(this.end, this.start);
          }
          distanceSq() {
            return this.start.distanceToSquared(this.end);
          }
          distance() {
            return this.start.distanceTo(this.end);
          }
          at(_0x1ea448, _0x4a2646) {
            return this.delta(_0x4a2646).multiplyScalar(_0x1ea448).add(this.start);
          }
          closestPointToPointParameter(_0x52c8df, _0x4fb4b9) {
            _0xb85ced.subVectors(_0x52c8df, this.start);
            _0x4a541c.subVectors(this.end, this.start);
            _0x52c8df = _0x4a541c.dot(_0x4a541c);
            var _0x20c6b6 = 6;
            let _0x5b1d76 = _0x4a541c.dot(_0xb85ced) / _0x52c8df;
            _0x20c6b6 = "pebo";
            if (_0x4fb4b9) {
              _0x5b1d76 = _0x6865cb(_0x5b1d76, 0, 1);
            }
            return _0x5b1d76;
          }
          closestPointToPoint(_0x53ccaf, _0x4cdb33, _0x27446f) {
            _0x4cdb33 = this.closestPointToPointParameter(_0x53ccaf, _0x4cdb33);
            return this.delta(_0x27446f).multiplyScalar(_0x4cdb33).add(this.start);
          }
          applyMatrix4(_0x4487da) {
            this.start.applyMatrix4(_0x4487da);
            this.end.applyMatrix4(_0x4487da);
            return this;
          }
          equals(_0x3cf86d) {
            return _0x3cf86d.start.equals(this.start) && _0x3cf86d.end.equals(this.end);
          }
          clone() {
            return new this.constructor().copy(this);
          }
        }
        const _0x19b81a = new _0x1d20ef();
        class _0x3ef4c4 extends _0x3b73b1 {
          constructor(_0x49142d, _0x295df4) {
            super();
            this.light = _0x49142d;
            this.light.updateMatrixWorld();
            this.matrix = _0x49142d.matrixWorld;
            this.matrixAutoUpdate = false;
            this.color = _0x295df4;
            const _0x4df6ae = new _0x3f374d();
            const _0x3ab05d = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];
            for (let _0x22eb93 = 0, _0x2ca6d6 = 1; _0x22eb93 < 32; _0x22eb93++, _0x2ca6d6++) {
              var _0x1c2151 = _0x22eb93 / 32 * Math.PI * 2;
              var _0x518278 = _0x2ca6d6 / 32 * Math.PI * 2;
              _0x3ab05d.push(Math.cos(_0x1c2151), Math.sin(_0x1c2151), 1, Math.cos(_0x518278), Math.sin(_0x518278), 1);
            }
            _0x4df6ae.setAttribute("position", new _0x17b758(_0x3ab05d, 3));
            _0x295df4 = new _0x3c9a1c({
              fog: false,
              toneMapped: false
            });
            this.cone = new _0x2fd8c1(_0x4df6ae, _0x295df4);
            this.add(this.cone);
            this.update();
          }
          dispose() {
            this.cone.geometry.dispose();
            this.cone.material.dispose();
          }
          update() {
            this.light.updateMatrixWorld();
            var _0x343466 = this.light.distance || 1000;
            var _0x1f49e3 = _0x343466 * Math.tan(this.light.angle);
            this.cone.scale.set(_0x1f49e3, _0x1f49e3, _0x343466);
            _0x19b81a.setFromMatrixPosition(this.light.target.matrixWorld);
            this.cone.lookAt(_0x19b81a);
            if (this.color !== undefined) {
              this.cone.material.color.set(this.color);
            } else {
              this.cone.material.color.copy(this.light.color);
            }
          }
        }
        const _0x1ea5ab = new _0x1d20ef();
        const _0x457b6b = new _0x33b2c9();
        const _0x2a474f = new _0x33b2c9();
        class _0x55d828 extends _0x2fd8c1 {
          constructor(_0x5357c9) {
            var _0x41fd3c = function _0x2d9e68(_0x17d89c) {
              const _0x2a9a22 = [];
              if (_0x17d89c && _0x17d89c.isBone) {
                _0x2a9a22.push(_0x17d89c);
              }
              for (let _0x213df4 = 0; _0x213df4 < _0x17d89c.children.length; _0x213df4++) {
                _0x2a9a22.push.apply(_0x2a9a22, _0x2d9e68(_0x17d89c.children[_0x213df4]));
              }
              return _0x2a9a22;
            }(_0x5357c9);
            const _0x4c2e1c = new _0x3f374d();
            const _0x3c4bb0 = [];
            const _0x3fba09 = [];
            var _0x3c1dd3 = new _0x1282c2(0, 0, 1);
            var _0x2bc455 = new _0x1282c2(0, 1, 0);
            for (let _0x24642 = 0; _0x24642 < _0x41fd3c.length; _0x24642++) {
              var _0x53673d = 11;
              var _0x279ba3 = _0x41fd3c[_0x24642];
              _0x53673d = 9;
              if (_0x279ba3.parent && _0x279ba3.parent.isBone) {
                _0x3c4bb0.push(0, 0, 0);
                _0x3c4bb0.push(0, 0, 0);
                _0x3fba09.push(_0x3c1dd3.r, _0x3c1dd3.g, _0x3c1dd3.b);
                _0x3fba09.push(_0x2bc455.r, _0x2bc455.g, _0x2bc455.b);
              }
            }
            _0x4c2e1c.setAttribute("position", new _0x17b758(_0x3c4bb0, 3));
            _0x4c2e1c.setAttribute("color", new _0x17b758(_0x3fba09, 3));
            super(_0x4c2e1c, new _0x3c9a1c({
              vertexColors: true,
              depthTest: false,
              depthWrite: false,
              toneMapped: false,
              transparent: true
            }));
            this.type = "SkeletonHelper";
            this.isSkeletonHelper = true;
            this.root = _0x5357c9;
            this.bones = _0x41fd3c;
            this.matrix = _0x5357c9.matrixWorld;
            this.matrixAutoUpdate = false;
          }
          updateMatrixWorld(_0x1ccf20) {
            var _0x2347e7 = 11;
            var _0x5b9ab1 = this.bones;
            _0x2347e7 = "agnm";
            const _0x52e6db = this.geometry;
            const _0x42d940 = _0x52e6db.getAttribute("position");
            _0x2a474f.copy(this.root.matrixWorld).invert();
            for (let _0x47de5e = 0, _0x1b212f = 0; _0x47de5e < _0x5b9ab1.length; _0x47de5e++) {
              var _0x3bc491 = _0x5b9ab1[_0x47de5e];
              if (_0x3bc491.parent && _0x3bc491.parent.isBone) {
                _0x457b6b.multiplyMatrices(_0x2a474f, _0x3bc491.matrixWorld);
                _0x1ea5ab.setFromMatrixPosition(_0x457b6b);
                _0x42d940.setXYZ(_0x1b212f, _0x1ea5ab.x, _0x1ea5ab.y, _0x1ea5ab.z);
                _0x457b6b.multiplyMatrices(_0x2a474f, _0x3bc491.parent.matrixWorld);
                _0x1ea5ab.setFromMatrixPosition(_0x457b6b);
                _0x42d940.setXYZ(_0x1b212f + 1, _0x1ea5ab.x, _0x1ea5ab.y, _0x1ea5ab.z);
                _0x1b212f += 2;
              }
            }
            _0x52e6db.getAttribute("position").needsUpdate = true;
            super.updateMatrixWorld(_0x1ccf20);
          }
        }
        class _0x16bc5b extends _0x9b7b04 {
          constructor(_0xb594bf, _0x3a859c, _0xb08b51) {
            super(new _0x330d7e(_0x3a859c, 4, 2), new _0x4c4e20({
              wireframe: true,
              fog: false,
              toneMapped: false
            }));
            this.light = _0xb594bf;
            this.light.updateMatrixWorld();
            this.color = _0xb08b51;
            this.type = "PointLightHelper";
            this.matrix = this.light.matrixWorld;
            this.matrixAutoUpdate = false;
            this.update();
          }
          dispose() {
            this.geometry.dispose();
            this.material.dispose();
          }
          update() {
            if (this.color !== undefined) {
              this.material.color.set(this.color);
            } else {
              this.material.color.copy(this.light.color);
            }
          }
        }
        const _0x4fd77a = new _0x1d20ef();
        const _0x3cb05a = new _0x1282c2();
        const _0x30cd93 = new _0x1282c2();
        class _0x4f1a7d extends _0x3b73b1 {
          constructor(_0x35c4a7, _0x57b45e, _0x3bb670) {
            super();
            this.light = _0x35c4a7;
            this.light.updateMatrixWorld();
            this.matrix = _0x35c4a7.matrixWorld;
            this.matrixAutoUpdate = false;
            this.color = _0x3bb670;
            const _0x6bf4d2 = new _0x439bba(_0x57b45e);
            _0x6bf4d2.rotateY(Math.PI * 0.5);
            this.material = new _0x4c4e20({
              wireframe: true,
              fog: false,
              toneMapped: false
            });
            if (this.color === undefined) {
              this.material.vertexColors = true;
            }
            _0x57b45e = _0x6bf4d2.getAttribute("position");
            _0x57b45e = new Float32Array(_0x57b45e.count * 3);
            _0x6bf4d2.setAttribute("color", new _0x570a7f(_0x57b45e, 3));
            this.add(new _0x9b7b04(_0x6bf4d2, this.material));
            this.update();
          }
          dispose() {
            this.children[0].geometry.dispose();
            this.children[0].material.dispose();
          }
          update() {
            var _0x496d46 = 5;
            const _0x2edb30 = this.children[0];
            _0x496d46 = 8;
            if (this.color !== undefined) {
              this.material.color.set(this.color);
            } else {
              const _0x560720 = _0x2edb30.geometry.getAttribute("color");
              _0x3cb05a.copy(this.light.color);
              _0x30cd93.copy(this.light.groundColor);
              for (let _0x235c2c = 0, _0x41d9b3 = _0x560720.count; _0x235c2c < _0x41d9b3; _0x235c2c++) {
                var _0x4ce6de;
                var _0x38e462 = _0x235c2c < _0x41d9b3 / 2 ? _0x3cb05a : _0x30cd93;
                _0x4ce6de = "oqpf";
                _0x560720.setXYZ(_0x235c2c, _0x38e462.r, _0x38e462.g, _0x38e462.b);
              }
              _0x560720.needsUpdate = true;
            }
            _0x2edb30.lookAt(_0x4fd77a.setFromMatrixPosition(this.light.matrixWorld).negate());
          }
        }
        class _0x41bf5e extends _0x2fd8c1 {
          constructor(_0x377193 = 10, _0x2ac42a = 10, _0x34b5a1 = 4473924, _0x3528e6 = 8947848) {
            _0x34b5a1 = new _0x1282c2(_0x34b5a1);
            _0x3528e6 = new _0x1282c2(_0x3528e6);
            var _0x19af5c = _0x2ac42a / 2;
            var _0x2e4a31 = _0x377193 / _0x2ac42a;
            var _0x1d4021 = _0x377193 / 2;
            const _0x2b9cca = [];
            const _0x2c3a33 = [];
            for (let _0x415dce = 0, _0x25f188 = 0, _0x2cd261 = -_0x1d4021; _0x415dce <= _0x2ac42a; _0x415dce++, _0x2cd261 += _0x2e4a31) {
              _0x2b9cca.push(-_0x1d4021, 0, _0x2cd261, _0x1d4021, 0, _0x2cd261);
              _0x2b9cca.push(_0x2cd261, 0, -_0x1d4021, _0x2cd261, 0, _0x1d4021);
              var _0x8605b1 = 6;
              const _0x161b85 = _0x415dce === _0x19af5c ? _0x34b5a1 : _0x3528e6;
              _0x8605b1 = "dmad";
              _0x161b85.toArray(_0x2c3a33, _0x25f188);
              _0x25f188 += 3;
              _0x161b85.toArray(_0x2c3a33, _0x25f188);
              _0x25f188 += 3;
              _0x161b85.toArray(_0x2c3a33, _0x25f188);
              _0x25f188 += 3;
              _0x161b85.toArray(_0x2c3a33, _0x25f188);
              _0x25f188 += 3;
            }
            var _0x26634a = 11;
            const _0x4f61ec = new _0x3f374d();
            _0x26634a = "mnio";
            _0x4f61ec.setAttribute("position", new _0x17b758(_0x2b9cca, 3));
            _0x4f61ec.setAttribute("color", new _0x17b758(_0x2c3a33, 3));
            super(_0x4f61ec, _0x377193 = new _0x3c9a1c({
              vertexColors: true,
              toneMapped: false
            }));
            this.type = "GridHelper";
          }
        }
        class _0x4ca0ef extends _0x2fd8c1 {
          constructor(_0x4d4032 = 10, _0x300088 = 16, _0x353022 = 8, _0x11dfd6 = 64, _0x377599 = 4473924, _0x2df984 = 8947848) {
            _0x377599 = new _0x1282c2(_0x377599);
            _0x2df984 = new _0x1282c2(_0x2df984);
            const _0x3c08a6 = [];
            const _0x348c43 = [];
            for (let _0x5ef823 = 0; _0x5ef823 <= _0x300088; _0x5ef823++) {
              var _0x414ba2 = _0x5ef823 / _0x300088 * (Math.PI * 2);
              var _0x358155 = Math.sin(_0x414ba2) * _0x4d4032;
              _0x414ba2 = Math.cos(_0x414ba2) * _0x4d4032;
              _0x3c08a6.push(0, 0, 0);
              _0x3c08a6.push(_0x358155, 0, _0x414ba2);
              _0x414ba2 = _0x5ef823 & 1 ? _0x377599 : _0x2df984;
              _0x348c43.push(_0x414ba2.r, _0x414ba2.g, _0x414ba2.b);
              _0x348c43.push(_0x414ba2.r, _0x414ba2.g, _0x414ba2.b);
            }
            for (let _0x1202b0 = 0; _0x1202b0 <= _0x353022; _0x1202b0++) {
              var _0x423ad6 = _0x1202b0 & 1 ? _0x377599 : _0x2df984;
              var _0x3b8211 = _0x4d4032 - _0x4d4032 / _0x353022 * _0x1202b0;
              for (let _0x350cac = 0; _0x350cac < _0x11dfd6; _0x350cac++) {
                var _0x248a09 = _0x350cac / _0x11dfd6 * (Math.PI * 2);
                var _0x2a791c = Math.sin(_0x248a09) * _0x3b8211;
                var _0x107b32 = Math.cos(_0x248a09) * _0x3b8211;
                _0x3c08a6.push(_0x2a791c, 0, _0x107b32);
                _0x348c43.push(_0x423ad6.r, _0x423ad6.g, _0x423ad6.b);
                _0x248a09 = (_0x350cac + 1) / _0x11dfd6 * (Math.PI * 2);
                _0x2a791c = Math.sin(_0x248a09) * _0x3b8211;
                _0x107b32 = Math.cos(_0x248a09) * _0x3b8211;
                _0x3c08a6.push(_0x2a791c, 0, _0x107b32);
                _0x348c43.push(_0x423ad6.r, _0x423ad6.g, _0x423ad6.b);
              }
            }
            const _0xa4d79c = new _0x3f374d();
            _0xa4d79c.setAttribute("position", new _0x17b758(_0x3c08a6, 3));
            _0xa4d79c.setAttribute("color", new _0x17b758(_0x348c43, 3));
            super(_0xa4d79c, new _0x3c9a1c({
              vertexColors: true,
              toneMapped: false
            }));
            this.type = "PolarGridHelper";
          }
        }
        const _0x25d3af = new _0x1d20ef();
        const _0x50c9f4 = new _0x1d20ef();
        const _0x28b3fc = new _0x1d20ef();
        class _0x48cb3c extends _0x3b73b1 {
          constructor(_0x486095, _0x5e4d7e, _0x2329be) {
            super();
            this.light = _0x486095;
            this.light.updateMatrixWorld();
            this.matrix = _0x486095.matrixWorld;
            this.matrixAutoUpdate = false;
            this.color = _0x2329be;
            if (_0x5e4d7e === undefined) {
              _0x5e4d7e = 1;
            }
            var _0x7ab72d;
            let _0x2c6f86 = new _0x3f374d();
            _0x7ab72d = 4;
            _0x2c6f86.setAttribute("position", new _0x17b758([-_0x5e4d7e, _0x5e4d7e, 0, _0x5e4d7e, _0x5e4d7e, 0, _0x5e4d7e, -_0x5e4d7e, 0, -_0x5e4d7e, -_0x5e4d7e, 0, -_0x5e4d7e, _0x5e4d7e, 0], 3));
            _0x5e4d7e = new _0x3c9a1c({
              fog: false,
              toneMapped: false
            });
            this.lightPlane = new _0x266c5e(_0x2c6f86, _0x5e4d7e);
            this.add(this.lightPlane);
            _0x2c6f86 = new _0x3f374d();
            _0x2c6f86.setAttribute("position", new _0x17b758([0, 0, 0, 0, 0, 1], 3));
            this.targetLine = new _0x266c5e(_0x2c6f86, _0x5e4d7e);
            this.add(this.targetLine);
            this.update();
          }
          dispose() {
            this.lightPlane.geometry.dispose();
            this.lightPlane.material.dispose();
            this.targetLine.geometry.dispose();
            this.targetLine.material.dispose();
          }
          update() {
            _0x25d3af.setFromMatrixPosition(this.light.matrixWorld);
            _0x50c9f4.setFromMatrixPosition(this.light.target.matrixWorld);
            _0x28b3fc.subVectors(_0x50c9f4, _0x25d3af);
            this.lightPlane.lookAt(_0x50c9f4);
            if (this.color !== undefined) {
              this.lightPlane.material.color.set(this.color);
              this.targetLine.material.color.set(this.color);
            } else {
              this.lightPlane.material.color.copy(this.light.color);
              this.targetLine.material.color.copy(this.light.color);
            }
            this.targetLine.lookAt(_0x50c9f4);
            this.targetLine.scale.z = _0x28b3fc.length();
          }
        }
        const _0x1f3db9 = new _0x1d20ef();
        const _0x4566d2 = new _0x324380();
        class _0x56c180 extends _0x2fd8c1 {
          constructor(_0x16d331) {
            const _0x1fa02c = new _0x3f374d();
            var _0x1b5ef6 = new _0x3c9a1c({
              color: 16777215,
              vertexColors: true,
              toneMapped: false
            });
            const _0x210398 = [];
            const _0x4820e5 = [];
            const _0x50ca42 = {};
            var _0x205c58 = new _0x1282c2(16755200);
            var _0x1b999b = new _0x1282c2(16711680);
            var _0x231ed5 = new _0x1282c2(43775);
            var _0x2c6808 = new _0x1282c2(16777215);
            var _0x3cda28 = new _0x1282c2(3355443);
            function _0x3c1bd9(_0x7d2363, _0x4120da, _0x22ed4e) {
              _0x145959(_0x7d2363, _0x22ed4e);
              _0x145959(_0x4120da, _0x22ed4e);
            }
            function _0x145959(_0x449968, _0x5b02c0) {
              _0x210398.push(0, 0, 0);
              _0x4820e5.push(_0x5b02c0.r, _0x5b02c0.g, _0x5b02c0.b);
              if (_0x50ca42[_0x449968] === undefined) {
                _0x50ca42[_0x449968] = [];
              }
              _0x50ca42[_0x449968].push(_0x210398.length / 3 - 1);
            }
            _0x3c1bd9("n1", "n2", _0x205c58);
            _0x3c1bd9("n2", "n4", _0x205c58);
            _0x3c1bd9("n4", "n3", _0x205c58);
            _0x3c1bd9("n3", "n1", _0x205c58);
            _0x3c1bd9("f1", "f2", _0x205c58);
            _0x3c1bd9("f2", "f4", _0x205c58);
            _0x3c1bd9("f4", "f3", _0x205c58);
            _0x3c1bd9("f3", "f1", _0x205c58);
            _0x3c1bd9("n1", "f1", _0x205c58);
            _0x3c1bd9("n2", "f2", _0x205c58);
            _0x3c1bd9("n3", "f3", _0x205c58);
            _0x3c1bd9("n4", "f4", _0x205c58);
            _0x3c1bd9("p", "n1", _0x1b999b);
            _0x3c1bd9("p", "n2", _0x1b999b);
            _0x3c1bd9("p", "n3", _0x1b999b);
            _0x3c1bd9("p", "n4", _0x1b999b);
            _0x3c1bd9("u1", "u2", _0x231ed5);
            _0x3c1bd9("u2", "u3", _0x231ed5);
            _0x3c1bd9("u3", "u1", _0x231ed5);
            _0x3c1bd9("c", "t", _0x2c6808);
            _0x3c1bd9("p", "c", _0x3cda28);
            _0x3c1bd9("cn1", "cn2", _0x3cda28);
            _0x3c1bd9("cn3", "cn4", _0x3cda28);
            _0x3c1bd9("cf1", "cf2", _0x3cda28);
            _0x3c1bd9("cf3", "cf4", _0x3cda28);
            _0x1fa02c.setAttribute("position", new _0x17b758(_0x210398, 3));
            _0x1fa02c.setAttribute("color", new _0x17b758(_0x4820e5, 3));
            super(_0x1fa02c, _0x1b5ef6);
            this.type = "CameraHelper";
            this.camera = _0x16d331;
            if (this.camera.updateProjectionMatrix) {
              this.camera.updateProjectionMatrix();
            }
            this.matrix = _0x16d331.matrixWorld;
            this.matrixAutoUpdate = false;
            this.pointMap = _0x50ca42;
            this.update();
          }
          update() {
            const _0x5eda39 = this.geometry;
            var _0x2fe004 = this.pointMap;
            _0x4566d2.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
            _0x2b5c85("c", _0x2fe004, _0x5eda39, _0x4566d2, 0, 0, -1);
            _0x2b5c85("t", _0x2fe004, _0x5eda39, _0x4566d2, 0, 0, 1);
            _0x2b5c85("n1", _0x2fe004, _0x5eda39, _0x4566d2, -1, -1, -1);
            _0x2b5c85("n2", _0x2fe004, _0x5eda39, _0x4566d2, 1, -1, -1);
            _0x2b5c85("n3", _0x2fe004, _0x5eda39, _0x4566d2, -1, 1, -1);
            _0x2b5c85("n4", _0x2fe004, _0x5eda39, _0x4566d2, 1, 1, -1);
            _0x2b5c85("f1", _0x2fe004, _0x5eda39, _0x4566d2, -1, -1, 1);
            _0x2b5c85("f2", _0x2fe004, _0x5eda39, _0x4566d2, 1, -1, 1);
            _0x2b5c85("f3", _0x2fe004, _0x5eda39, _0x4566d2, -1, 1, 1);
            _0x2b5c85("f4", _0x2fe004, _0x5eda39, _0x4566d2, 1, 1, 1);
            _0x2b5c85("u1", _0x2fe004, _0x5eda39, _0x4566d2, 0.7, 1.1, -1);
            _0x2b5c85("u2", _0x2fe004, _0x5eda39, _0x4566d2, -0.7, 1.1, -1);
            _0x2b5c85("u3", _0x2fe004, _0x5eda39, _0x4566d2, 0, 2, -1);
            _0x2b5c85("cf1", _0x2fe004, _0x5eda39, _0x4566d2, -1, 0, 1);
            _0x2b5c85("cf2", _0x2fe004, _0x5eda39, _0x4566d2, 1, 0, 1);
            _0x2b5c85("cf3", _0x2fe004, _0x5eda39, _0x4566d2, 0, -1, 1);
            _0x2b5c85("cf4", _0x2fe004, _0x5eda39, _0x4566d2, 0, 1, 1);
            _0x2b5c85("cn1", _0x2fe004, _0x5eda39, _0x4566d2, -1, 0, -1);
            _0x2b5c85("cn2", _0x2fe004, _0x5eda39, _0x4566d2, 1, 0, -1);
            _0x2b5c85("cn3", _0x2fe004, _0x5eda39, _0x4566d2, 0, -1, -1);
            _0x2b5c85("cn4", _0x2fe004, _0x5eda39, _0x4566d2, 0, 1, -1);
            _0x5eda39.getAttribute("position").needsUpdate = true;
          }
          dispose() {
            this.geometry.dispose();
            this.material.dispose();
          }
        }
        function _0x2b5c85(_0x2f7272, _0x389996, _0x2f26c6, _0xeb98e, _0x47b834, _0x533469, _0x5dabfb) {
          _0x1f3db9.set(_0x47b834, _0x533469, _0x5dabfb).unproject(_0xeb98e);
          var _0x572ee6;
          var _0xb43d4e = _0x389996[_0x2f7272];
          _0x572ee6 = 8;
          if (_0xb43d4e !== undefined) {
            const _0x2fc8eb = _0x2f26c6.getAttribute("position");
            for (let _0x380d44 = 0, _0x31dbe2 = _0xb43d4e.length; _0x380d44 < _0x31dbe2; _0x380d44++) {
              _0x2fc8eb.setXYZ(_0xb43d4e[_0x380d44], _0x1f3db9.x, _0x1f3db9.y, _0x1f3db9.z);
            }
          }
        }
        var _0x39c9b6 = 11;
        const _0x1c7c8c = new _0x227d92();
        _0x39c9b6 = 1;
        class _0x2e2d8a extends _0x2fd8c1 {
          constructor(_0x447a41, _0x25c59d = 16776960) {
            var _0x409af8 = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
            var _0x34214b = new Float32Array(24);
            const _0x18e935 = new _0x3f374d();
            _0x18e935.setIndex(new _0x570a7f(_0x409af8, 1));
            _0x18e935.setAttribute("position", new _0x570a7f(_0x34214b, 3));
            super(_0x18e935, new _0x3c9a1c({
              color: _0x25c59d,
              toneMapped: false
            }));
            this.object = _0x447a41;
            this.type = "BoxHelper";
            this.matrixAutoUpdate = false;
            this.update();
          }
          update(_0x1aabdc) {
            if (this.object !== undefined) {
              _0x1c7c8c.setFromObject(this.object);
            }
            if (!_0x1c7c8c.isEmpty()) {
              var _0xfa6f64 = _0x1c7c8c.min;
              var _0x28e70e = _0x1c7c8c.max;
              const _0x506c89 = this.geometry.attributes.position;
              const _0x3da029 = _0x506c89.array;
              _0x3da029[0] = _0x28e70e.x;
              _0x3da029[1] = _0x28e70e.y;
              _0x3da029[2] = _0x28e70e.z;
              _0x3da029[3] = _0xfa6f64.x;
              _0x3da029[4] = _0x28e70e.y;
              _0x3da029[5] = _0x28e70e.z;
              _0x3da029[6] = _0xfa6f64.x;
              _0x3da029[7] = _0xfa6f64.y;
              _0x3da029[8] = _0x28e70e.z;
              _0x3da029[9] = _0x28e70e.x;
              _0x3da029[10] = _0xfa6f64.y;
              _0x3da029[11] = _0x28e70e.z;
              _0x3da029[12] = _0x28e70e.x;
              _0x3da029[13] = _0x28e70e.y;
              _0x3da029[14] = _0xfa6f64.z;
              _0x3da029[15] = _0xfa6f64.x;
              _0x3da029[16] = _0x28e70e.y;
              _0x3da029[17] = _0xfa6f64.z;
              _0x3da029[18] = _0xfa6f64.x;
              _0x3da029[19] = _0xfa6f64.y;
              _0x3da029[20] = _0xfa6f64.z;
              _0x3da029[21] = _0x28e70e.x;
              _0x3da029[22] = _0xfa6f64.y;
              _0x3da029[23] = _0xfa6f64.z;
              _0x506c89.needsUpdate = true;
              this.geometry.computeBoundingSphere();
            }
          }
          setFromObject(_0x4eeeee) {
            this.object = _0x4eeeee;
            this.update();
            return this;
          }
          copy(_0x7e6e2c) {
            _0x2fd8c1.prototype.copy.call(this, _0x7e6e2c);
            this.object = _0x7e6e2c.object;
            return this;
          }
        }
        class _0x22ce42 extends _0x2fd8c1 {
          constructor(_0x1498bf, _0x43c97b = 16776960) {
            var _0x42ec41 = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
            const _0xc54fda = new _0x3f374d();
            _0xc54fda.setIndex(new _0x570a7f(_0x42ec41, 1));
            _0xc54fda.setAttribute("position", new _0x17b758([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3));
            super(_0xc54fda, new _0x3c9a1c({
              color: _0x43c97b,
              toneMapped: false
            }));
            this.box = _0x1498bf;
            this.type = "Box3Helper";
            this.geometry.computeBoundingSphere();
          }
          updateMatrixWorld(_0x300895) {
            var _0x1dee59;
            const _0x162830 = this.box;
            _0x1dee59 = 17;
            if (!_0x162830.isEmpty()) {
              _0x162830.getCenter(this.position);
              _0x162830.getSize(this.scale);
              this.scale.multiplyScalar(0.5);
              super.updateMatrixWorld(_0x300895);
            }
          }
        }
        class _0x493088 extends _0x266c5e {
          constructor(_0x47ead0, _0x4fefae = 1, _0x3d74bf = 16776960) {
            const _0x981cbf = new _0x3f374d();
            _0x981cbf.setAttribute("position", new _0x17b758([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3));
            _0x981cbf.computeBoundingSphere();
            super(_0x981cbf, new _0x3c9a1c({
              color: _0x3d74bf,
              toneMapped: false
            }));
            this.type = "PlaneHelper";
            this.plane = _0x47ead0;
            this.size = _0x4fefae;
            var _0x5e68da;
            const _0x3cbe0c = new _0x3f374d();
            _0x5e68da = 5;
            _0x3cbe0c.setAttribute("position", new _0x17b758([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3));
            _0x3cbe0c.computeBoundingSphere();
            this.add(new _0x9b7b04(_0x3cbe0c, new _0x4c4e20({
              color: _0x3d74bf,
              opacity: 0.2,
              transparent: true,
              depthWrite: false,
              toneMapped: false
            })));
          }
          updateMatrixWorld(_0x488162) {
            let _0x56e99a = -this.plane.constant;
            if (Math.abs(_0x56e99a) < 1e-8) {
              _0x56e99a = 1e-8;
            }
            this.scale.set(this.size * 0.5, this.size * 0.5, _0x56e99a);
            this.children[0].material.side = _0x56e99a < 0 ? _0x460782 : _0xe70805;
            this.lookAt(this.plane.normal);
            super.updateMatrixWorld(_0x488162);
          }
        }
        var _0x4085ba;
        const _0x4d3a3e = new _0x1d20ef();
        _0x4085ba = 8;
        let _0x37f714;
        let _0x3306a7;
        class _0x163a33 extends _0x3b73b1 {
          constructor(_0x1652e4 = new _0x1d20ef(0, 0, 1), _0x1ee650 = new _0x1d20ef(0, 0, 0), _0x1eda5f = 1, _0x29ec02 = 16776960, _0x143458 = _0x1eda5f * 0.2, _0x4cc330 = _0x143458 * 0.2) {
            super();
            this.type = "ArrowHelper";
            if (_0x37f714 === undefined) {
              _0x37f714 = new _0x3f374d();
              _0x37f714.setAttribute("position", new _0x17b758([0, 0, 0, 0, 1, 0], 3));
              _0x3306a7 = new _0x292b7e(0, 0.5, 1, 5, 1);
              _0x3306a7.translate(0, -0.5, 0);
            }
            this.position.copy(_0x1ee650);
            this.line = new _0x266c5e(_0x37f714, new _0x3c9a1c({
              color: _0x29ec02,
              toneMapped: false
            }));
            this.line.matrixAutoUpdate = false;
            this.add(this.line);
            this.cone = new _0x9b7b04(_0x3306a7, new _0x4c4e20({
              color: _0x29ec02,
              toneMapped: false
            }));
            this.cone.matrixAutoUpdate = false;
            this.add(this.cone);
            this.setDirection(_0x1652e4);
            this.setLength(_0x1eda5f, _0x143458, _0x4cc330);
          }
          setDirection(_0x186031) {
            if (_0x186031.y > 0.99999) {
              this.quaternion.set(0, 0, 0, 1);
            } else if (_0x186031.y < -0.99999) {
              this.quaternion.set(1, 0, 0, 0);
            } else {
              _0x4d3a3e.set(_0x186031.z, 0, -_0x186031.x).normalize();
              _0x186031 = Math.acos(_0x186031.y);
              this.quaternion.setFromAxisAngle(_0x4d3a3e, _0x186031);
            }
          }
          setLength(_0x1cce75, _0x427f4d = _0x1cce75 * 0.2, _0x47ea20 = _0x427f4d * 0.2) {
            this.line.scale.set(1, Math.max(0.0001, _0x1cce75 - _0x427f4d), 1);
            this.line.updateMatrix();
            this.cone.scale.set(_0x47ea20, _0x427f4d, _0x47ea20);
            this.cone.position.y = _0x1cce75;
            this.cone.updateMatrix();
          }
          setColor(_0x10e713) {
            this.line.material.color.set(_0x10e713);
            this.cone.material.color.set(_0x10e713);
          }
          copy(_0x546e21) {
            super.copy(_0x546e21, false);
            this.line.copy(_0x546e21.line);
            this.cone.copy(_0x546e21.cone);
            return this;
          }
        }
        class _0x451429 extends _0x2fd8c1 {
          constructor(_0x388b69 = 1) {
            _0x388b69 = [0, 0, 0, _0x388b69, 0, 0, 0, 0, 0, 0, _0x388b69, 0, 0, 0, 0, 0, 0, _0x388b69];
            const _0x26aea4 = new _0x3f374d();
            _0x26aea4.setAttribute("position", new _0x17b758(_0x388b69, 3));
            _0x26aea4.setAttribute("color", new _0x17b758([1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1], 3));
            super(_0x26aea4, _0x388b69 = new _0x3c9a1c({
              vertexColors: true,
              toneMapped: false
            }));
            this.type = "AxesHelper";
          }
          setColors(_0x1eea01, _0x2e6966, _0x1fd093) {
            var _0x3b8992;
            const _0x12d3dc = new _0x1282c2();
            _0x3b8992 = "ochk";
            var _0x28ce3b = this.geometry.attributes.color.array;
            _0x12d3dc.set(_0x1eea01);
            _0x12d3dc.toArray(_0x28ce3b, 0);
            _0x12d3dc.toArray(_0x28ce3b, 3);
            _0x12d3dc.set(_0x2e6966);
            _0x12d3dc.toArray(_0x28ce3b, 6);
            _0x12d3dc.toArray(_0x28ce3b, 9);
            _0x12d3dc.set(_0x1fd093);
            _0x12d3dc.toArray(_0x28ce3b, 12);
            _0x12d3dc.toArray(_0x28ce3b, 15);
            this.geometry.attributes.color.needsUpdate = true;
            return this;
          }
          dispose() {
            this.geometry.dispose();
            this.material.dispose();
          }
        }
        class _0x3877cf {
          constructor() {
            this.type = "ShapePath";
            this.color = new _0x1282c2();
            this.subPaths = [];
            this.currentPath = null;
          }
          moveTo(_0x2cb138, _0x4d1092) {
            this.currentPath = new _0x3472b0();
            this.subPaths.push(this.currentPath);
            this.currentPath.moveTo(_0x2cb138, _0x4d1092);
            return this;
          }
          lineTo(_0x2f8a89, _0x289988) {
            this.currentPath.lineTo(_0x2f8a89, _0x289988);
            return this;
          }
          quadraticCurveTo(_0x125b46, _0x4060fa, _0xe1e2f3, _0x503101) {
            this.currentPath.quadraticCurveTo(_0x125b46, _0x4060fa, _0xe1e2f3, _0x503101);
            return this;
          }
          bezierCurveTo(_0x336ebe, _0x2f08fc, _0x45ac7d, _0x5b2cda, _0x3328b4, _0x5a79fb) {
            this.currentPath.bezierCurveTo(_0x336ebe, _0x2f08fc, _0x45ac7d, _0x5b2cda, _0x3328b4, _0x5a79fb);
            return this;
          }
          splineThru(_0xcc0faf) {
            this.currentPath.splineThru(_0xcc0faf);
            return this;
          }
          toShapes(_0x325b92, _0x15ef30) {
            function _0x1a7c12(_0x3fff14) {
              const _0x5c03be = [];
              for (let _0x4e3711 = 0, _0x20afd6 = _0x3fff14.length; _0x4e3711 < _0x20afd6; _0x4e3711++) {
                var _0x55bba2 = _0x3fff14[_0x4e3711];
                const _0xf7744 = new _0xe5830f();
                _0xf7744.curves = _0x55bba2.curves;
                _0x5c03be.push(_0xf7744);
              }
              return _0x5c03be;
            }
            const _0x2b6110 = _0x513d24.isClockWise;
            const _0x24f5c5 = this.subPaths;
            if (_0x24f5c5.length === 0) {
              return [];
            }
            if (_0x15ef30 === true) {
              return _0x1a7c12(_0x24f5c5);
            }
            let _0x5212f8;
            let _0x23aa70;
            let _0x389a2e;
            const _0x3daaff = [];
            if (_0x24f5c5.length === 1) {
              _0x23aa70 = _0x24f5c5[0];
              _0x389a2e = new _0xe5830f();
              _0x389a2e.curves = _0x23aa70.curves;
              _0x3daaff.push(_0x389a2e);
              return _0x3daaff;
            }
            let _0x50a76d = !_0x2b6110(_0x24f5c5[0].getPoints());
            _0x50a76d = _0x325b92 ? !_0x50a76d : _0x50a76d;
            const _0x312bad = [];
            const _0xc858cc = [];
            let _0x1ea251 = [];
            let _0x55de55 = 0;
            var _0x409215;
            var _0x330e7e;
            _0xc858cc[_0x55de55] = undefined;
            _0x1ea251[_0x55de55] = [];
            for (let _0x108adc = 0, _0xbb207f = _0x24f5c5.length; _0x108adc < _0xbb207f; _0x108adc++) {
              _0x23aa70 = _0x24f5c5[_0x108adc];
              _0x5212f8 = _0x2b6110(_0x409215 = _0x23aa70.getPoints());
              _0x5212f8 = _0x325b92 ? !_0x5212f8 : _0x5212f8;
              if (_0x5212f8) {
                if (!_0x50a76d && _0xc858cc[_0x55de55]) {
                  _0x55de55++;
                }
                _0xc858cc[_0x55de55] = {
                  s: new _0xe5830f(),
                  p: _0x409215
                };
                _0xc858cc[_0x55de55].s.curves = _0x23aa70.curves;
                if (_0x50a76d) {
                  _0x55de55++;
                }
                _0x1ea251[_0x55de55] = [];
              } else {
                _0x1ea251[_0x55de55].push({
                  h: _0x23aa70,
                  p: _0x409215[0]
                });
              }
            }
            if (!_0xc858cc[0]) {
              return _0x1a7c12(_0x24f5c5);
            }
            if (_0xc858cc.length > 1) {
              var _0x538636;
              let _0x3d870f = false;
              _0x538636 = 9;
              var _0x118b2f;
              const _0x5b3e7d = [];
              _0x118b2f = 5;
              for (let _0x5a749d = 0, _0xd18fe6 = _0xc858cc.length; _0x5a749d < _0xd18fe6; _0x5a749d++) {
                _0x312bad[_0x5a749d] = [];
              }
              for (let _0x568162 = 0, _0x3f5d76 = _0xc858cc.length; _0x568162 < _0x3f5d76; _0x568162++) {
                var _0x24b73d;
                var _0x420aa5 = _0x1ea251[_0x568162];
                _0x24b73d = 6;
                for (let _0x31a603 = 0; _0x31a603 < _0x420aa5.length; _0x31a603++) {
                  var _0x2c3e56 = _0x420aa5[_0x31a603];
                  let _0x5f5ab6 = true;
                  for (let _0x1aa69b = 0; _0x1aa69b < _0xc858cc.length; _0x1aa69b++) {
                    if (!!function (_0xf1269b, _0x7edf71) {
                      var _0x4065c2 = _0x7edf71.length;
                      var _0x5d6247 = 6;
                      let _0x20670d = false;
                      _0x5d6247 = 6;
                      for (let _0x192ab6 = _0x4065c2 - 1, _0x17f45a = 0; _0x17f45a < _0x4065c2; _0x192ab6 = _0x17f45a++) {
                        let _0x77893d = _0x7edf71[_0x192ab6];
                        let _0x2dcd8c = _0x7edf71[_0x17f45a];
                        let _0xf19348 = _0x2dcd8c.x - _0x77893d.x;
                        let _0x1bcc91 = _0x2dcd8c.y - _0x77893d.y;
                        if (Math.abs(_0x1bcc91) > Number.EPSILON) {
                          if (_0x1bcc91 < 0) {
                            _0x77893d = _0x7edf71[_0x17f45a];
                            _0xf19348 = -_0xf19348;
                            _0x2dcd8c = _0x7edf71[_0x192ab6];
                            _0x1bcc91 = -_0x1bcc91;
                          }
                          if (!(_0xf1269b.y < _0x77893d.y || _0xf1269b.y > _0x2dcd8c.y)) {
                            if (_0xf1269b.y === _0x77893d.y) {
                              if (_0xf1269b.x === _0x77893d.x) {
                                return 1;
                              }
                            } else {
                              var _0x50577e = _0x1bcc91 * (_0xf1269b.x - _0x77893d.x) - _0xf19348 * (_0xf1269b.y - _0x77893d.y);
                              if (_0x50577e == 0) {
                                return 1;
                              }
                              if (!(_0x50577e < 0)) {
                                _0x20670d = !_0x20670d;
                              }
                            }
                          }
                        } else if (_0xf1269b.y === _0x77893d.y && (_0x2dcd8c.x <= _0xf1269b.x && _0xf1269b.x <= _0x77893d.x || _0x77893d.x <= _0xf1269b.x && _0xf1269b.x <= _0x2dcd8c.x)) {
                          return 1;
                        }
                      }
                      return _0x20670d;
                    }(_0x2c3e56.p, _0xc858cc[_0x1aa69b].p)) {
                      if (_0x568162 !== _0x1aa69b) {
                        _0x5b3e7d.push({
                          froms: _0x568162,
                          tos: _0x1aa69b,
                          hole: _0x31a603
                        });
                      }
                      if (_0x5f5ab6) {
                        _0x5f5ab6 = false;
                        _0x312bad[_0x1aa69b].push(_0x2c3e56);
                      } else {
                        _0x3d870f = true;
                      }
                    }
                  }
                  if (_0x5f5ab6) {
                    _0x312bad[_0x568162].push(_0x2c3e56);
                  }
                }
              }
              if (_0x5b3e7d.length > 0) {
                if (!_0x3d870f) {
                  _0x1ea251 = _0x312bad;
                }
              }
            }
            for (let _0x5394b0 = 0, _0x3dcd50 = _0xc858cc.length; _0x5394b0 < _0x3dcd50; _0x5394b0++) {
              _0x389a2e = _0xc858cc[_0x5394b0].s;
              _0x3daaff.push(_0x389a2e);
              for (let _0x2669df = 0, _0x337734 = (_0x330e7e = _0x1ea251[_0x5394b0]).length; _0x2669df < _0x337734; _0x2669df++) {
                _0x389a2e.holes.push(_0x330e7e[_0x2669df].h);
              }
            }
            return _0x3daaff;
          }
        }
        const _0x45e572 = new Float32Array(1);
        const _0x1799d9 = new Int32Array(_0x45e572.buffer);
        class _0x4c931e {
          static toHalfFloat(_0x46aaa5) {
            if (_0x46aaa5 > 65504) {
              _0x46aaa5 = 65504;
            }
            _0x45e572[0] = _0x46aaa5;
            var _0x3b92e8 = 5;
            var _0x49c563 = _0x1799d9[0];
            _0x3b92e8 = 11;
            let _0x4ec597 = _0x49c563 >> 16 & 32768;
            let _0x19a136 = _0x49c563 >> 12 & 2047;
            if (!((_0x46aaa5 = _0x49c563 >> 23 & 255) < 103)) {
              if (_0x46aaa5 > 142) {
                _0x4ec597 |= 31744;
                _0x4ec597 |= (_0x46aaa5 == 255 ? 0 : 1) && _0x49c563 & 8388607;
              } else if (_0x46aaa5 < 113) {
                _0x19a136 |= 2048;
                _0x4ec597 |= (_0x19a136 >> 114 - _0x46aaa5) + (_0x19a136 >> 113 - _0x46aaa5 & 1);
              } else {
                _0x4ec597 |= _0x46aaa5 - 112 << 10 | _0x19a136 >> 1;
                _0x4ec597 += _0x19a136 & 1;
              }
            }
            return _0x4ec597;
          }
        }
        const _0x53873d = 0;
        const _0x4dceb9 = 1;
        const _0x717af5 = 0;
        const _0x13e92d = 1;
        const _0x469131 = 2;
        _0x52649c.create = function (_0x29c176, _0x46741c) {
          _0x29c176.prototype = Object.create(_0x52649c.prototype);
          (_0x29c176.prototype.constructor = _0x29c176).prototype.getPoint = _0x46741c;
          return _0x29c176;
        };
        _0x3472b0.prototype.fromPoints = function (_0x32d878) {
          return this.setFromPoints(_0x32d878);
        };
        _0x41bf5e.prototype.setColors = function () {};
        _0x55d828.prototype.update = function () {};
        _0x49b33b.prototype.extractUrlBase = function (_0x582882) {
          return _0x22c4d1.extractUrlBase(_0x582882);
        };
        _0x49b33b.Handlers = {
          add: function () {},
          get: function () {}
        };
        _0x4e4f24.prototype.center = function (_0x2460c4) {
          return this.getCenter(_0x2460c4);
        };
        _0x4e4f24.prototype.empty = function () {
          return this.isEmpty();
        };
        _0x4e4f24.prototype.isIntersectionBox = function (_0x1f86a7) {
          return this.intersectsBox(_0x1f86a7);
        };
        _0x4e4f24.prototype.size = function (_0x476a98) {
          return this.getSize(_0x476a98);
        };
        _0x227d92.prototype.center = function (_0x582d86) {
          return this.getCenter(_0x582d86);
        };
        _0x227d92.prototype.empty = function () {
          return this.isEmpty();
        };
        _0x227d92.prototype.isIntersectionBox = function (_0x5979bb) {
          return this.intersectsBox(_0x5979bb);
        };
        _0x227d92.prototype.isIntersectionSphere = function (_0x26db6e) {
          return this.intersectsSphere(_0x26db6e);
        };
        _0x227d92.prototype.size = function (_0x2de95f) {
          return this.getSize(_0x2de95f);
        };
        _0x26f734.prototype.empty = function () {
          return this.isEmpty();
        };
        _0x1d3bc5.prototype.setFromMatrix = function (_0x58ff13) {
          return this.setFromProjectionMatrix(_0x58ff13);
        };
        _0x3d84a8.prototype.center = function (_0x370420) {
          return this.getCenter(_0x370420);
        };
        _0x30cf5e.prototype.flattenToArrayOffset = function (_0x1118c0, _0x23df19) {
          return this.toArray(_0x1118c0, _0x23df19);
        };
        _0x30cf5e.prototype.multiplyVector3 = function (_0xe511e1) {
          return _0xe511e1.applyMatrix3(this);
        };
        _0x30cf5e.prototype.multiplyVector3Array = function () {};
        _0x30cf5e.prototype.applyToBufferAttribute = function (_0x1d8b69) {
          return _0x1d8b69.applyMatrix3(this);
        };
        _0x30cf5e.prototype.applyToVector3Array = function () {};
        _0x30cf5e.prototype.getInverse = function (_0x33e5f4) {
          return this.copy(_0x33e5f4).invert();
        };
        _0x33b2c9.prototype.extractPosition = function (_0x3da243) {
          return this.copyPosition(_0x3da243);
        };
        _0x33b2c9.prototype.flattenToArrayOffset = function (_0x57c091, _0xe36357) {
          return this.toArray(_0x57c091, _0xe36357);
        };
        _0x33b2c9.prototype.getPosition = function () {
          return new _0x1d20ef().setFromMatrixColumn(this, 3);
        };
        _0x33b2c9.prototype.setRotationFromQuaternion = function (_0x591710) {
          return this.makeRotationFromQuaternion(_0x591710);
        };
        _0x33b2c9.prototype.multiplyToArray = function () {};
        _0x33b2c9.prototype.multiplyVector3 = function (_0xf3e185) {
          return _0xf3e185.applyMatrix4(this);
        };
        _0x33b2c9.prototype.multiplyVector4 = function (_0x46868c) {
          return _0x46868c.applyMatrix4(this);
        };
        _0x33b2c9.prototype.multiplyVector3Array = function () {};
        _0x33b2c9.prototype.rotateAxis = function (_0x4c1714) {
          _0x4c1714.transformDirection(this);
        };
        _0x33b2c9.prototype.crossVector = function (_0x52036e) {
          return _0x52036e.applyMatrix4(this);
        };
        _0x33b2c9.prototype.translate = function () {};
        _0x33b2c9.prototype.rotateX = function () {};
        _0x33b2c9.prototype.rotateY = function () {};
        _0x33b2c9.prototype.rotateZ = function () {};
        _0x33b2c9.prototype.rotateByAxis = function () {};
        _0x33b2c9.prototype.applyToBufferAttribute = function (_0x424bd9) {
          return _0x424bd9.applyMatrix4(this);
        };
        _0x33b2c9.prototype.applyToVector3Array = function () {};
        _0x33b2c9.prototype.makeFrustum = function (_0x3d5b9d, _0x30925b, _0x4f68f7, _0x54675f, _0x397c08, _0x2f774e) {
          return this.makePerspective(_0x3d5b9d, _0x30925b, _0x54675f, _0x4f68f7, _0x397c08, _0x2f774e);
        };
        _0x33b2c9.prototype.getInverse = function (_0x15ffca) {
          return this.copy(_0x15ffca).invert();
        };
        _0x2bef9b.prototype.isIntersectionLine = function (_0x558cd6) {
          return this.intersectsLine(_0x558cd6);
        };
        _0x53f372.prototype.multiplyVector3 = function (_0x3b46b6) {
          return _0x3b46b6.applyQuaternion(this);
        };
        _0x53f372.prototype.inverse = function () {
          return this.invert();
        };
        _0x123ff1.prototype.isIntersectionBox = function (_0x1935ba) {
          return this.intersectsBox(_0x1935ba);
        };
        _0x123ff1.prototype.isIntersectionPlane = function (_0x57538d) {
          return this.intersectsPlane(_0x57538d);
        };
        _0x123ff1.prototype.isIntersectionSphere = function (_0x5bf23e) {
          return this.intersectsSphere(_0x5bf23e);
        };
        _0x54aa93.prototype.area = function () {
          return this.getArea();
        };
        _0x54aa93.prototype.barycoordFromPoint = function (_0x14bc7e, _0x15e282) {
          return this.getBarycoord(_0x14bc7e, _0x15e282);
        };
        _0x54aa93.prototype.midpoint = function (_0x2a01f9) {
          return this.getMidpoint(_0x2a01f9);
        };
        _0x54aa93.prototypenormal = function (_0x4a1460) {
          return this.getNormal(_0x4a1460);
        };
        _0x54aa93.prototype.plane = function (_0x187f4e) {
          return this.getPlane(_0x187f4e);
        };
        _0x54aa93.barycoordFromPoint = function (_0x3ac396, _0x26b4fe, _0x2dc27f, _0x1b16e5, _0x5a314a) {
          return _0x54aa93.getBarycoord(_0x3ac396, _0x26b4fe, _0x2dc27f, _0x1b16e5, _0x5a314a);
        };
        _0x54aa93.normal = function (_0x330b14, _0x20057a, _0x5e58a0, _0x5c813a) {
          return _0x54aa93.getNormal(_0x330b14, _0x20057a, _0x5e58a0, _0x5c813a);
        };
        _0xe5830f.prototype.extractAllPoints = function (_0x4bb409) {
          return this.extractPoints(_0x4bb409);
        };
        _0xe5830f.prototype.extrude = function (_0x2097cc) {
          return new _0x2168e0(this, _0x2097cc);
        };
        _0xe5830f.prototype.makeGeometry = function (_0x308488) {
          return new _0x5a2b3b(this, _0x308488);
        };
        _0x25f874.prototype.fromAttribute = function (_0x105879, _0x4870be, _0xdd17c0) {
          return this.fromBufferAttribute(_0x105879, _0x4870be, _0xdd17c0);
        };
        _0x25f874.prototype.distanceToManhattan = function (_0x1484ef) {
          return this.manhattanDistanceTo(_0x1484ef);
        };
        _0x25f874.prototype.lengthManhattan = function () {
          return this.manhattanLength();
        };
        _0x1d20ef.prototype.setEulerFromRotationMatrix = function () {};
        _0x1d20ef.prototype.setEulerFromQuaternion = function () {};
        _0x1d20ef.prototype.getPositionFromMatrix = function (_0x127b1b) {
          return this.setFromMatrixPosition(_0x127b1b);
        };
        _0x1d20ef.prototype.getScaleFromMatrix = function (_0x3af38a) {
          return this.setFromMatrixScale(_0x3af38a);
        };
        _0x1d20ef.prototype.getColumnFromMatrix = function (_0x12a60e, _0x6dc1dc) {
          return this.setFromMatrixColumn(_0x6dc1dc, _0x12a60e);
        };
        _0x1d20ef.prototype.applyProjection = function (_0x464359) {
          return this.applyMatrix4(_0x464359);
        };
        _0x1d20ef.prototype.fromAttribute = function (_0x29dfdd, _0x9307a, _0x4db5c0) {
          return this.fromBufferAttribute(_0x29dfdd, _0x9307a, _0x4db5c0);
        };
        _0x1d20ef.prototype.distanceToManhattan = function (_0x32da02) {
          return this.manhattanDistanceTo(_0x32da02);
        };
        _0x1d20ef.prototype.lengthManhattan = function () {
          return this.manhattanLength();
        };
        _0x275701.prototype.fromAttribute = function (_0x26af01, _0x1a048f, _0x35a40f) {
          return this.fromBufferAttribute(_0x26af01, _0x1a048f, _0x35a40f);
        };
        _0x275701.prototype.lengthManhattan = function () {
          return this.manhattanLength();
        };
        _0x3b73b1.prototype.getChildByName = function (_0x4f2e91) {
          return this.getObjectByName(_0x4f2e91);
        };
        _0x3b73b1.prototype.renderDepth = function () {};
        _0x3b73b1.prototype.translate = function (_0x5e2a1d, _0xbd5d09) {
          return this.translateOnAxis(_0xbd5d09, _0x5e2a1d);
        };
        _0x3b73b1.prototype.getWorldRotation = function () {};
        _0x3b73b1.prototype.applyMatrix = function (_0x3fd098) {
          return this.applyMatrix4(_0x3fd098);
        };
        Object.defineProperties(_0x3b73b1.prototype, {
          eulerOrder: {
            get: function () {
              return this.rotation.order;
            },
            set: function (_0x2b11b7) {
              this.rotation.order = _0x2b11b7;
            }
          },
          useQuaternion: {
            get: function () {},
            set: function () {}
          }
        });
        _0x9b7b04.prototype.setDrawMode = function () {};
        Object.defineProperties(_0x9b7b04.prototype, {
          drawMode: {
            get: function () {
              return _0x78b248;
            },
            set: function () {}
          }
        });
        _0x1d0bf6.prototype.initBones = function () {};
        _0x41f6fd.prototype.setLens = function (_0x186d67, _0x1ba6f7) {
          if (_0x1ba6f7 !== undefined) {
            this.filmGauge = _0x1ba6f7;
          }
          this.setFocalLength(_0x186d67);
        };
        Object.defineProperties(_0x35e82a.prototype, {
          onlyShadow: {
            set: function () {}
          },
          shadowCameraFov: {
            set: function (_0x46f134) {
              this.shadow.camera.fov = _0x46f134;
            }
          },
          shadowCameraLeft: {
            set: function (_0x4a4a7b) {
              this.shadow.camera.left = _0x4a4a7b;
            }
          },
          shadowCameraRight: {
            set: function (_0x4ba0f3) {
              this.shadow.camera.right = _0x4ba0f3;
            }
          },
          shadowCameraTop: {
            set: function (_0x1cb5f4) {
              this.shadow.camera.top = _0x1cb5f4;
            }
          },
          shadowCameraBottom: {
            set: function (_0x51aeb8) {
              this.shadow.camera.bottom = _0x51aeb8;
            }
          },
          shadowCameraNear: {
            set: function (_0x54a24c) {
              this.shadow.camera.near = _0x54a24c;
            }
          },
          shadowCameraFar: {
            set: function (_0x3a2f6f) {
              this.shadow.camera.far = _0x3a2f6f;
            }
          },
          shadowCameraVisible: {
            set: function () {}
          },
          shadowBias: {
            set: function (_0x4f7be0) {
              this.shadow.bias = _0x4f7be0;
            }
          },
          shadowDarkness: {
            set: function () {}
          },
          shadowMapWidth: {
            set: function (_0x19d568) {
              this.shadow.mapSize.width = _0x19d568;
            }
          },
          shadowMapHeight: {
            set: function (_0x56e817) {
              this.shadow.mapSize.height = _0x56e817;
            }
          }
        });
        Object.defineProperties(_0x570a7f.prototype, {
          length: {
            get: function () {
              return this.array.length;
            }
          },
          dynamic: {
            get: function () {
              return this.usage === _0x22fb6f;
            },
            set: function () {
              this.setUsage(_0x22fb6f);
            }
          }
        });
        _0x570a7f.prototype.setDynamic = function (_0x17a463) {
          this.setUsage(_0x17a463 === true ? _0x22fb6f : _0x4d2364);
          return this;
        };
        _0x570a7f.prototype.copyIndicesArray = function () {};
        _0x570a7f.prototype.setArray = function () {};
        _0x3f374d.prototype.addIndex = function (_0xbc8f98) {
          this.setIndex(_0xbc8f98);
        };
        _0x3f374d.prototype.addAttribute = function (_0x80fa5e, _0xb38fde) {
          if (_0xb38fde && _0xb38fde.isBufferAttribute || _0xb38fde && _0xb38fde.isInterleavedBufferAttribute) {
            if (_0x80fa5e === "index") {
              this.setIndex(_0xb38fde);
              return this;
            } else {
              return this.setAttribute(_0x80fa5e, _0xb38fde);
            }
          } else {
            return this.setAttribute(_0x80fa5e, new _0x570a7f(_0xb38fde, arguments[2]));
          }
        };
        _0x3f374d.prototype.addDrawCall = function (_0x74b6af, _0xd4158c, _0x30410b) {
          this.addGroup(_0x74b6af, _0xd4158c);
        };
        _0x3f374d.prototype.clearDrawCalls = function () {
          this.clearGroups();
        };
        _0x3f374d.prototype.computeOffsets = function () {};
        _0x3f374d.prototype.removeAttribute = function (_0xffb104) {
          return this.deleteAttribute(_0xffb104);
        };
        _0x3f374d.prototype.applyMatrix = function (_0x41549b) {
          return this.applyMatrix4(_0x41549b);
        };
        Object.defineProperties(_0x3f374d.prototype, {
          drawcalls: {
            get: function () {
              return this.groups;
            }
          },
          offsets: {
            get: function () {
              return this.groups;
            }
          }
        });
        _0x3f5d1e.prototype.setDynamic = function (_0x34bb10) {
          this.setUsage(_0x34bb10 === true ? _0x22fb6f : _0x4d2364);
          return this;
        };
        _0x3f5d1e.prototype.setArray = function () {};
        _0x2168e0.prototype.getArrays = function () {};
        _0x2168e0.prototype.addShapeList = function () {};
        _0x2168e0.prototype.addShape = function () {};
        _0x291ff9.prototype.dispose = function () {};
        _0x472c4a.prototype.onUpdate = function () {
          return this;
        };
        Object.defineProperties(_0x2098dd.prototype, {
          wrapAround: {
            get: function () {},
            set: function () {}
          },
          overdraw: {
            get: function () {},
            set: function () {}
          },
          wrapRGB: {
            get: function () {
              return new _0x1282c2();
            }
          },
          shading: {
            get: function () {},
            set: function (_0x56840f) {
              this.flatShading = _0x56840f === _0x2e28c7;
            }
          },
          stencilMask: {
            get: function () {
              return this.stencilFuncMask;
            },
            set: function (_0x531b1b) {
              this.stencilFuncMask = _0x531b1b;
            }
          },
          vertexTangents: {
            get: function () {},
            set: function () {}
          }
        });
        Object.defineProperties(_0x18cc6b.prototype, {
          derivatives: {
            get: function () {
              return this.extensions.derivatives;
            },
            set: function (_0x1066db) {
              this.extensions.derivatives = _0x1066db;
            }
          }
        });
        _0x45974d.prototype.clearTarget = function (_0xf93663, _0x38d738, _0x4db5c4, _0x21f775) {
          this.setRenderTarget(_0xf93663);
          this.clear(_0x38d738, _0x4db5c4, _0x21f775);
        };
        _0x45974d.prototype.animate = function (_0x4b1b95) {
          this.setAnimationLoop(_0x4b1b95);
        };
        _0x45974d.prototype.getCurrentRenderTarget = function () {
          return this.getRenderTarget();
        };
        _0x45974d.prototype.getMaxAnisotropy = function () {
          return this.capabilities.getMaxAnisotropy();
        };
        _0x45974d.prototype.getPrecision = function () {
          return this.capabilities.precision;
        };
        _0x45974d.prototype.resetGLState = function () {
          return this.state.reset();
        };
        _0x45974d.prototype.supportsFloatTextures = function () {
          return this.extensions.get("OES_texture_float");
        };
        _0x45974d.prototype.supportsHalfFloatTextures = function () {
          return this.extensions.get("OES_texture_half_float");
        };
        _0x45974d.prototype.supportsStandardDerivatives = function () {
          return this.extensions.get("OES_standard_derivatives");
        };
        _0x45974d.prototype.supportsCompressedTextureS3TC = function () {
          return this.extensions.get("WEBGL_compressed_texture_s3tc");
        };
        _0x45974d.prototype.supportsCompressedTexturePVRTC = function () {
          return this.extensions.get("WEBGL_compressed_texture_pvrtc");
        };
        _0x45974d.prototype.supportsBlendMinMax = function () {
          return this.extensions.get("EXT_blend_minmax");
        };
        _0x45974d.prototype.supportsVertexTextures = function () {
          return this.capabilities.vertexTextures;
        };
        _0x45974d.prototype.supportsInstancedArrays = function () {
          return this.extensions.get("ANGLE_instanced_arrays");
        };
        _0x45974d.prototype.enableScissorTest = function (_0x3a0f12) {
          this.setScissorTest(_0x3a0f12);
        };
        _0x45974d.prototype.initMaterial = function () {};
        _0x45974d.prototype.addPrePlugin = function () {};
        _0x45974d.prototype.addPostPlugin = function () {};
        _0x45974d.prototype.updateShadowMap = function () {};
        _0x45974d.prototype.setFaceCulling = function () {};
        _0x45974d.prototype.allocTextureUnit = function () {};
        _0x45974d.prototype.setTexture = function () {};
        _0x45974d.prototype.setTexture2D = function () {};
        _0x45974d.prototype.setTextureCube = function () {};
        _0x45974d.prototype.getActiveMipMapLevel = function () {
          return this.getActiveMipmapLevel();
        };
        Object.defineProperties(_0x45974d.prototype, {
          shadowMapEnabled: {
            get: function () {
              return this.shadowMap.enabled;
            },
            set: function (_0x52d1cc) {
              this.shadowMap.enabled = _0x52d1cc;
            }
          },
          shadowMapType: {
            get: function () {
              return this.shadowMap.type;
            },
            set: function (_0x4fa868) {
              this.shadowMap.type = _0x4fa868;
            }
          },
          shadowMapCullFace: {
            get: function () {},
            set: function () {}
          },
          context: {
            get: function () {
              return this.getContext();
            }
          },
          vr: {
            get: function () {
              return this.xr;
            }
          },
          gammaInput: {
            get: function () {
              return false;
            },
            set: function () {}
          },
          gammaOutput: {
            get: function () {
              return false;
            },
            set: function (_0x34232d) {
              this.outputEncoding = _0x34232d === true ? _0x320ef1 : _0xca2f2a;
            }
          },
          toneMappingWhitePoint: {
            get: function () {
              return 1;
            },
            set: function () {}
          },
          gammaFactor: {
            get: function () {
              return 2;
            },
            set: function () {}
          }
        });
        Object.defineProperties(_0x1eaba7.prototype, {
          cullFace: {
            get: function () {},
            set: function () {}
          },
          renderReverseSided: {
            get: function () {},
            set: function () {}
          },
          renderSingleSided: {
            get: function () {},
            set: function () {}
          }
        });
        Object.defineProperties(_0x4eb744.prototype, {
          wrapS: {
            get: function () {
              return this.texture.wrapS;
            },
            set: function (_0x202380) {
              this.texture.wrapS = _0x202380;
            }
          },
          wrapT: {
            get: function () {
              return this.texture.wrapT;
            },
            set: function (_0x139902) {
              this.texture.wrapT = _0x139902;
            }
          },
          magFilter: {
            get: function () {
              return this.texture.magFilter;
            },
            set: function (_0x53d28a) {
              this.texture.magFilter = _0x53d28a;
            }
          },
          minFilter: {
            get: function () {
              return this.texture.minFilter;
            },
            set: function (_0x5838dc) {
              this.texture.minFilter = _0x5838dc;
            }
          },
          anisotropy: {
            get: function () {
              return this.texture.anisotropy;
            },
            set: function (_0x172257) {
              this.texture.anisotropy = _0x172257;
            }
          },
          offset: {
            get: function () {
              return this.texture.offset;
            },
            set: function (_0xec728e) {
              this.texture.offset = _0xec728e;
            }
          },
          repeat: {
            get: function () {
              return this.texture.repeat;
            },
            set: function (_0x28b6a8) {
              this.texture.repeat = _0x28b6a8;
            }
          },
          format: {
            get: function () {
              return this.texture.format;
            },
            set: function (_0x749ef1) {
              this.texture.format = _0x749ef1;
            }
          },
          type: {
            get: function () {
              return this.texture.type;
            },
            set: function (_0x15eb32) {
              this.texture.type = _0x15eb32;
            }
          },
          generateMipmaps: {
            get: function () {
              return this.texture.generateMipmaps;
            },
            set: function (_0x2755c0) {
              this.texture.generateMipmaps = _0x2755c0;
            }
          }
        });
        _0x38f928.prototype.load = function (_0x48b251) {
          var _0x2f4954 = 16;
          const _0x564497 = this;
          _0x2f4954 = 11;
          new _0x35e38c().load(_0x48b251, function (_0x3dc34f) {
            _0x564497.setBuffer(_0x3dc34f);
          });
          return this;
        };
        _0x4cf142.prototype.getData = function () {
          return this.getFrequencyData();
        };
        _0x534d0b.prototype.updateCubeMap = function (_0x161460, _0x5582ee) {
          return this.update(_0x161460, _0x5582ee);
        };
        _0x534d0b.prototype.clear = function (_0x303dec, _0x3fc67c, _0x586669, _0x39ec16) {
          return this.renderTarget.clear(_0x303dec, _0x3fc67c, _0x586669, _0x39ec16);
        };
        _0x5e369a.crossOrigin = undefined;
        _0x5e369a.loadTexture = function (_0x2881de, _0x5893f3, _0x5d505d, _0x2818b0) {
          const _0xd014a3 = new _0x1a00a6();
          _0xd014a3.setCrossOrigin(this.crossOrigin);
          var _0x24bb4d;
          const _0x558006 = _0xd014a3.load(_0x2881de, _0x5d505d, undefined, _0x2818b0);
          _0x24bb4d = 7;
          if (_0x5893f3) {
            _0x558006.mapping = _0x5893f3;
          }
          return _0x558006;
        };
        _0x5e369a.loadTextureCube = function (_0x4c6992, _0x5f5043, _0x340cf3, _0x1b61d8) {
          const _0x59af50 = new _0x73eeb7();
          _0x59af50.setCrossOrigin(this.crossOrigin);
          const _0x27d44e = _0x59af50.load(_0x4c6992, _0x340cf3, undefined, _0x1b61d8);
          if (_0x5f5043) {
            _0x27d44e.mapping = _0x5f5043;
          }
          return _0x27d44e;
        };
        _0x5e369a.loadCompressedTexture = function () {};
        _0x5e369a.loadCompressedTextureCube = function () {};
        const _0x553b7d = {
          createMultiMaterialObject: function () {},
          detach: function () {},
          attach: function () {}
        };
        function _0x74ce46(_0x5ea8ec, _0x48953f, _0x3750ec) {
          var _0x120c15 = 8;
          var _0xa1eac1 = _0x3750ec.length - _0x5ea8ec - 1;
          _0x120c15 = "pdef";
          if (_0x48953f >= _0x3750ec[_0xa1eac1]) {
            return _0xa1eac1 - 1;
          }
          if (_0x48953f <= _0x3750ec[_0x5ea8ec]) {
            return _0x5ea8ec;
          }
          let _0x590ac3 = _0x5ea8ec;
          let _0x591f16 = _0xa1eac1;
          let _0x7e06b1 = Math.floor((_0x590ac3 + _0x591f16) / 2);
          for (; _0x48953f < _0x3750ec[_0x7e06b1] || _0x48953f >= _0x3750ec[_0x7e06b1 + 1];) {
            if (_0x48953f < _0x3750ec[_0x7e06b1]) {
              _0x591f16 = _0x7e06b1;
            } else {
              _0x590ac3 = _0x7e06b1;
            }
            _0x7e06b1 = Math.floor((_0x590ac3 + _0x591f16) / 2);
          }
          return _0x7e06b1;
        }
        function _0x5a6240(_0xe0873e, _0xd2ca55, _0x4bb6f0, _0x17965a) {
          const _0x4bea83 = [];
          const _0x496373 = [];
          const _0x527ba0 = [];
          for (let _0x5a6e7a = _0x4bea83[0] = 1; _0x5a6e7a <= _0x4bb6f0; ++_0x5a6e7a) {
            _0x496373[_0x5a6e7a] = _0xd2ca55 - _0x17965a[_0xe0873e + 1 - _0x5a6e7a];
            _0x527ba0[_0x5a6e7a] = _0x17965a[_0xe0873e + _0x5a6e7a] - _0xd2ca55;
            var _0xc92ec4;
            let _0x5b0362 = 0;
            _0xc92ec4 = "epbi";
            for (let _0x106146 = 0; _0x106146 < _0x5a6e7a; ++_0x106146) {
              var _0x3cffb0 = _0x527ba0[_0x106146 + 1];
              var _0x1c9e21 = _0x496373[_0x5a6e7a - _0x106146];
              var _0x15b888 = _0x4bea83[_0x106146] / (_0x3cffb0 + _0x1c9e21);
              _0x4bea83[_0x106146] = _0x5b0362 + _0x3cffb0 * _0x15b888;
              _0x5b0362 = _0x1c9e21 * _0x15b888;
            }
            _0x4bea83[_0x5a6e7a] = _0x5b0362;
          }
          return _0x4bea83;
        }
        if (typeof __THREE_DEVTOOLS__ != "undefined") {
          __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
            detail: {
              revision: _0x57ec7c
            }
          }));
        }
        if (typeof window != "undefined") {
          if (!window.__THREE__) {
            window.__THREE__ = _0x57ec7c;
          }
        }
        class _0x489d2a {
          constructor(_0x270897, _0xa19dcf, _0x2e1551, _0x130d78, _0x34ef99) {
            this.degree1 = _0x270897;
            this.degree2 = _0xa19dcf;
            this.knots1 = _0x2e1551;
            this.knots2 = _0x130d78;
            this.controlPoints = [];
            var _0x50522d = _0x2e1551.length - _0x270897 - 1;
            var _0x5061bd = _0x130d78.length - _0xa19dcf - 1;
            for (let _0x893781 = 0; _0x893781 < _0x50522d; ++_0x893781) {
              this.controlPoints[_0x893781] = [];
              for (let _0x3cec11 = 0; _0x3cec11 < _0x5061bd; ++_0x3cec11) {
                var _0x418df9 = _0x34ef99[_0x893781][_0x3cec11];
                this.controlPoints[_0x893781][_0x3cec11] = new _0x275701(_0x418df9.x, _0x418df9.y, _0x418df9.z, _0x418df9.w);
              }
            }
          }
          getPoint(_0x1f9163, _0x343a3f, _0x517260) {
            _0x1f9163 = this.knots1[0] + _0x1f9163 * (this.knots1[this.knots1.length - 1] - this.knots1[0]);
            _0x343a3f = this.knots2[0] + _0x343a3f * (this.knots2[this.knots2.length - 1] - this.knots2[0]);
            (function (_0x5aff45, _0xa505c6, _0x32eb45, _0x1f3d12, _0x20b270, _0x38719d, _0x334078, _0x2e78c5) {
              var _0x5d86f2 = _0x74ce46(_0x5aff45, _0x38719d, _0x32eb45);
              var _0x442069 = _0x74ce46(_0xa505c6, _0x334078, _0x1f3d12);
              var _0x8bf798 = _0x5a6240(_0x5d86f2, _0x38719d, _0x5aff45, _0x32eb45);
              var _0x2c9952 = _0x5a6240(_0x442069, _0x334078, _0xa505c6, _0x1f3d12);
              const _0x1f07a1 = [];
              for (let _0x4b348d = 0; _0x4b348d <= _0xa505c6; ++_0x4b348d) {
                _0x1f07a1[_0x4b348d] = new _0x275701(0, 0, 0, 0);
                for (let _0xa5b50a = 0; _0xa5b50a <= _0x5aff45; ++_0xa5b50a) {
                  const _0x2c642a = _0x20b270[_0x5d86f2 - _0x5aff45 + _0xa5b50a][_0x442069 - _0xa505c6 + _0x4b348d].clone();
                  var _0x554531 = _0x2c642a.w;
                  _0x2c642a.x *= _0x554531;
                  _0x2c642a.y *= _0x554531;
                  _0x2c642a.z *= _0x554531;
                  _0x1f07a1[_0x4b348d].add(_0x2c642a.multiplyScalar(_0x8bf798[_0xa5b50a]));
                }
              }
              const _0x2c4ca3 = new _0x275701(0, 0, 0, 0);
              for (let _0x16d72c = 0; _0x16d72c <= _0xa505c6; ++_0x16d72c) {
                _0x2c4ca3.add(_0x1f07a1[_0x16d72c].multiplyScalar(_0x2c9952[_0x16d72c]));
              }
              _0x2c4ca3.divideScalar(_0x2c4ca3.w);
              _0x2e78c5.set(_0x2c4ca3.x, _0x2c4ca3.y, _0x2c4ca3.z);
            })(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, _0x1f9163, _0x343a3f, _0x517260);
          }
        }
        class _0x49c9c8 extends _0x3f374d {
          constructor(_0x2b7596 = (_0x468237, _0x26969a, _0x13797f) => _0x13797f.set(_0x468237, _0x26969a, Math.cos(_0x468237) * Math.sin(_0x26969a)), _0x525da8 = 8, _0x2c5355 = 8) {
            super();
            this.type = "ParametricGeometry";
            this.parameters = {
              func: _0x2b7596,
              slices: _0x525da8,
              stacks: _0x2c5355
            };
            const _0x1ecb3b = [];
            const _0x1e0ef7 = [];
            const _0x59443b = [];
            const _0x107821 = [];
            const _0x39587a = new _0x1d20ef();
            var _0x455e1f = new _0x1d20ef();
            var _0x11c08a = new _0x1d20ef();
            const _0x2e06a3 = new _0x1d20ef();
            const _0x15ddd2 = new _0x1d20ef();
            _0x2b7596.length;
            var _0x16e6b3 = _0x525da8 + 1;
            for (let _0x1143fc = 0; _0x1143fc <= _0x2c5355; _0x1143fc++) {
              var _0x85757b = _0x1143fc / _0x2c5355;
              for (let _0x4c3317 = 0; _0x4c3317 <= _0x525da8; _0x4c3317++) {
                var _0x4b0056 = _0x4c3317 / _0x525da8;
                _0x2b7596(_0x4b0056, _0x85757b, _0x455e1f);
                _0x1e0ef7.push(_0x455e1f.x, _0x455e1f.y, _0x455e1f.z);
                if (_0x4b0056 - 0.00001 >= 0) {
                  _0x2b7596(_0x4b0056 - 0.00001, _0x85757b, _0x11c08a);
                  _0x2e06a3.subVectors(_0x455e1f, _0x11c08a);
                } else {
                  _0x2b7596(0.00001 + _0x4b0056, _0x85757b, _0x11c08a);
                  _0x2e06a3.subVectors(_0x11c08a, _0x455e1f);
                }
                if (_0x85757b - 0.00001 >= 0) {
                  _0x2b7596(_0x4b0056, _0x85757b - 0.00001, _0x11c08a);
                  _0x15ddd2.subVectors(_0x455e1f, _0x11c08a);
                } else {
                  _0x2b7596(_0x4b0056, 0.00001 + _0x85757b, _0x11c08a);
                  _0x15ddd2.subVectors(_0x11c08a, _0x455e1f);
                }
                _0x39587a.crossVectors(_0x2e06a3, _0x15ddd2).normalize();
                _0x59443b.push(_0x39587a.x, _0x39587a.y, _0x39587a.z);
                _0x107821.push(_0x4b0056, _0x85757b);
              }
            }
            for (let _0x4e78f4 = 0; _0x4e78f4 < _0x2c5355; _0x4e78f4++) {
              for (let _0x3603d8 = 0; _0x3603d8 < _0x525da8; _0x3603d8++) {
                var _0x2db50f = _0x4e78f4 * _0x16e6b3 + _0x3603d8;
                var _0x449312 = _0x4e78f4 * _0x16e6b3 + _0x3603d8 + 1;
                var _0x472b4c = (_0x4e78f4 + 1) * _0x16e6b3 + _0x3603d8 + 1;
                var _0x575e4a = (_0x4e78f4 + 1) * _0x16e6b3 + _0x3603d8;
                _0x1ecb3b.push(_0x2db50f, _0x449312, _0x575e4a);
                _0x1ecb3b.push(_0x449312, _0x472b4c, _0x575e4a);
              }
            }
            this.setIndex(_0x1ecb3b);
            this.setAttribute("position", new _0x17b758(_0x1e0ef7, 3));
            this.setAttribute("normal", new _0x17b758(_0x59443b, 3));
            this.setAttribute("uv", new _0x17b758(_0x107821, 2));
          }
        }
        function _0x408289(_0x445e08, _0x10f01d) {
          var _0x1650db = _0x1e4044();
          return (_0x408289 = function (_0x225a4b, _0x21e6fc) {
            return _0x1650db[_0x225a4b -= 112];
          })(_0x445e08, _0x10f01d);
        }
        function _0x36d145(_0x1534b8, _0x543425) {
          var _0x32b49a;
          var _0x580f14 = _0x408289;
          var _0x361c7b = Object[_0x580f14(151)](_0x1534b8);
          if (Object.getOwnPropertySymbols) {
            _0x32b49a = Object.getOwnPropertySymbols(_0x1534b8);
            if (_0x543425) {
              _0x32b49a = _0x32b49a[_0x580f14(166)](function (_0x5cfa1e) {
                var _0x1b0431 = _0x580f14;
                return Object[_0x1b0431(139)](_0x1534b8, _0x5cfa1e)[_0x1b0431(173)];
              });
            }
            _0x361c7b[_0x580f14(163)][_0x580f14(126)](_0x361c7b, _0x32b49a);
          }
          return _0x361c7b;
        }
        function _0x1a927a(_0x4fb6cd) {
          for (var _0x18cdad = _0x408289, _0x1239f0 = 1; _0x1239f0 < arguments[_0x18cdad(211)]; _0x1239f0++) {
            var _0x144b0f = arguments[_0x1239f0] != null ? arguments[_0x1239f0] : {};
            if (_0x1239f0 % 2) {
              _0x36d145(Object(_0x144b0f), true)[_0x18cdad(160)](function (_0x11b605) {
                _0x5064cc(_0x4fb6cd, _0x11b605, _0x144b0f[_0x11b605]);
              });
            } else if (Object[_0x18cdad(184)]) {
              Object[_0x18cdad(181)](_0x4fb6cd, Object[_0x18cdad(184)](_0x144b0f));
            } else {
              _0x36d145(Object(_0x144b0f))[_0x18cdad(160)](function (_0x244dd6) {
                var _0x284861 = 5;
                var _0x8c8e8f = _0x18cdad;
                _0x284861 = 10;
                Object[_0x8c8e8f(152)](_0x4fb6cd, _0x244dd6, Object[_0x8c8e8f(139)](_0x144b0f, _0x244dd6));
              });
            }
          }
          return _0x4fb6cd;
        }
        function _0x51bb04() {}
        (function () {
          var _0x4b7faf = _0x408289;
          var _0x4c92be = _0x1e4044();
          for (;;) {
            try {
              if (+parseInt(_0x4b7faf(177)) * (parseInt(_0x4b7faf(185)) / 2) + -parseInt(_0x4b7faf(154)) / 3 * (-parseInt(_0x4b7faf(114)) / 4) + -parseInt(_0x4b7faf(131)) / 5 + -parseInt(_0x4b7faf(132)) / 6 + -parseInt(_0x4b7faf(204)) / 7 * (parseInt(_0x4b7faf(150)) / 8) + -parseInt(_0x4b7faf(123)) / 9 + parseInt(_0x4b7faf(205)) / 10 * (parseInt(_0x4b7faf(212)) / 11) == 126932) {
                break;
              }
              _0x4c92be.push(_0x4c92be.shift());
            } catch (_0x52f6a6) {
              _0x4c92be.push(_0x4c92be.shift());
            }
          }
        })();
        var _0xe427ed = {
          enabled: false,
          files: {},
          add: function (_0x2900fb, _0x4d498d) {
            var _0x16af8f = _0x408289;
            if (this[_0x16af8f(192)] !== false) {
              this[_0x16af8f(134)][_0x2900fb] = _0x4d498d;
            }
          },
          get: function (_0x51c3c6) {
            var _0x48d505 = _0x408289;
            if (this[_0x48d505(192)] !== false) {
              return this[_0x48d505(134)][_0x51c3c6];
            }
          },
          remove: function (_0xfbf743) {
            delete this[_0x408289(134)][_0xfbf743];
          },
          clear: function () {
            this[_0x408289(134)] = {};
          }
        };
        var _0x1bcba3 = {
          log: function () {
            var _0x547c9e;
            var _0x309c60 = _0x408289;
            if (document[_0x309c60(202)]) {
              return (_0x547c9e = console)[_0x309c60(213)][_0x309c60(126)](_0x547c9e, arguments);
            } else {
              return _0x51bb04;
            }
          },
          warn: function () {
            var _0x2d707b;
            var _0x5238d3 = _0x408289;
            if (document[_0x5238d3(202)]) {
              return (_0x2d707b = console).warn[_0x5238d3(126)](_0x2d707b, arguments);
            } else {
              return _0x51bb04;
            }
          },
          time: function () {
            var _0x35455a;
            var _0x57ea81 = _0x408289;
            if (document[_0x57ea81(202)]) {
              return (_0x35455a = console)[_0x57ea81(198)][_0x57ea81(126)](_0x35455a, arguments);
            } else {
              return _0x51bb04;
            }
          },
          timeEnd: function () {
            var _0x13490f;
            var _0x353b63 = _0x408289;
            if (document[_0x353b63(202)]) {
              return (_0x13490f = console)[_0x353b63(178)][_0x353b63(126)](_0x13490f, arguments);
            } else {
              return _0x51bb04;
            }
          },
          error: function (_0x1af3d4) {
            var _0x431380 = _0x408289;
            Uc[_0x431380(199)][_0x431380(200)](_0x431380(148)[_0x431380(146)](_0x1af3d4));
            if (document[_0x431380(202)]) {
              return undefined;
            } else {
              return _0x51bb04;
            }
          }
        };
        function _0x52f0a5(_0xbc53a2, _0x5a9508, _0x13df73) {
          if (_0x5a9508 in _0xbc53a2) {
            Object[_0x408289(152)](_0xbc53a2, _0x5a9508, {
              value: _0x13df73,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            _0xbc53a2[_0x5a9508] = _0x13df73;
          }
          return _0xbc53a2;
        }
        function _0x1e4044() {
          var _0x3ad333 = 17;
          var _0x4940d0 = ["formatBezierPoints", "getOwnPropertyDescriptors", "38krwCrh", "clearScene", "extractFrameData", "bezierPoints", "psdHeight", "Points", "remove", "enabled", "deleteGroup", "map", "children", "computeBoundingBox", "WebGLRenderer", "time", "message", "error", "OriginalSize", "sdsDebug", "#fff", "2289RwJzfv", "2499470Udayzz", "positionX", "wrapS", "renderThree ", "style", "renderThree", "length", "22PPCdAZ", "log", "domElement", "positionY", "66636GrgRvP", "traverse", "material", "MeshLambertMaterial", "rotation", "rotateZ", "initialize", "layerKey", "matrix4", "1374813HFfmik", "setSize", "DirectionalLight", "apply", "Height", "psdWidth", "warn", "layer", "453640CKUTFM", "1178934MrnwMF", "lookAt", "files", "wrapT", "Mesh", "Width", "geometry", "getOwnPropertyDescriptor", "dispose", ", h: ", "lowp", "cropDesignCanvas", "Name", "render", "concat", "rotateX", "预览图", "splice", "5864ZDKQkg", "keys", "defineProperty", "Matrix4", "39HBvdoU", "matrix3To4", "center", "PerspectiveCamera", "frameData", "Vector3", "forEach", "set", "applyMatrix4", "push", "getPoint", "clear", "filter", "webglCanvas", "rotateY", "updateMatrix", "normalize", "position", "tan", "enumerable", "handleSmartObject", "CanvasTexture", "renderLists", "4744SEDame", "timeEnd", "Scene", "split", "defineProperties", "add"];
          _0x3ad333 = 5;
          return (_0x1e4044 = function () {
            return _0x4940d0;
          })();
        }
        var _0x2b0f91;
        const _0x35329e = _0xae3fcb(function _0x298db4(_0x210d1d) {
          var _0x34a6f5 = _0x408289;
          var _0x62a18d = this;
          _0x5b4327(this, _0x298db4);
          _0x52f0a5(this, _0x34a6f5(120), function () {});
          _0x52f0a5(this, _0x34a6f5(183), function (_0x13d6d4) {
            var _0x54c247 = [];
            var _0x13cf63 = [];
            _0x13d6d4.forEach(function (_0x3fa90e, _0x5820d4) {
              var _0x13a91d = _0x408289;
              (_0x13cf63 = _0x5820d4 % 4 == 0 ? [] : _0x13cf63)[_0x13a91d(163)](_0x3fa90e);
              if (_0x5820d4 % 4 == 3) {
                _0x54c247[_0x13a91d(163)](_0x13cf63);
              }
            });
            return _0x54c247;
          });
          _0x52f0a5(this, _0x34a6f5(155), function (_0x2fd6b2) {
            var _0x513b92 = _0x34a6f5;
            (_0x2fd6b2 = _0xa3187a(_0x2fd6b2))[_0x513b92(149)](2, 0, 0);
            _0x2fd6b2[_0x513b92(149)](6, 0, 0);
            _0x2fd6b2[_0x513b92(149)](8, 0, 0);
            _0x2fd6b2.splice(9, 0, 0);
            _0x2fd6b2[_0x513b92(149)](10, 0, 1);
            _0x2fd6b2[_0x513b92(149)](11, 0, 0);
            _0x2fd6b2.splice(14, 0, 0);
            return _0x2fd6b2;
          });
          _0x52f0a5(this, _0x34a6f5(187), function (_0x3144db) {
            var _0x5c5cf7 = _0x34a6f5;
            var _0x3b417a = _0x3144db.matrix3;
            _0x3b417a = _0x62a18d[_0x5c5cf7(155)](_0x3b417a);
            return _0x1a927a(_0x1a927a({}, _0x3144db), {}, {
              matrix4: _0x3b417a
            });
          });
          _0x52f0a5(this, _0x34a6f5(193), function (_0x4706d1) {
            var _0x193bfd = _0x34a6f5;
            if (_0x4706d1) {
              _0x4706d1[_0x193bfd(115)](function (_0x18b98f) {
                var _0x49c15a = _0x193bfd;
                if (_0x18b98f instanceof _0x461967[_0x49c15a(136)]) {
                  _0x18b98f[_0x49c15a(138)][_0x49c15a(140)]();
                  _0x18b98f[_0x49c15a(138)] = null;
                  _0x18b98f[_0x49c15a(116)][_0x49c15a(194)][_0x49c15a(140)]();
                  _0x18b98f[_0x49c15a(116)][_0x49c15a(140)]();
                  _0x18b98f[_0x49c15a(116)] = null;
                }
              });
            }
          });
          _0x52f0a5(this, _0x34a6f5(186), function (_0x332b20, _0x592909, _0x3358d1) {
            var _0x16e368 = 11;
            var _0x2fa8ba = _0x34a6f5;
            _0x16e368 = 4;
            if (_0x592909.length > 0) {
              _0x592909[_0x2fa8ba(160)](function (_0x4c6a38) {
                var _0x5027c6;
                var _0x323c4b = _0x2fa8ba;
                _0x5027c6 = 3;
                if (_0x4c6a38 instanceof _0x461967[_0x323c4b(179)]) {
                  _0x4c6a38[_0x323c4b(195)][_0x323c4b(160)](function (_0x3112c8) {
                    _0x62a18d[_0x323c4b(193)](_0x3112c8);
                  });
                } else {
                  _0x62a18d[_0x323c4b(193)](_0x4c6a38);
                }
                _0x332b20[_0x323c4b(191)](_0x4c6a38);
              });
              _0x332b20[_0x2fa8ba(165)]();
            }
            _0x3358d1();
          });
          _0x52f0a5(this, _0x34a6f5(210), function (_0x54e2ee, _0xf31fb1) {
            var _0x4e16fb;
            var _0xd46ddb;
            var _0x113d07;
            var _0x4a848b = _0x34a6f5;
            var _0x59a91d = _0x54e2ee[_0x4a848b(158)];
            var _0x253d8e = _0x54e2ee.cropDesignCanvas;
            _0x54e2ee[_0x4a848b(121)];
            var _0x5e64aa = _0x54e2ee[_0x4a848b(128)];
            var _0x25f355 = _0x54e2ee[_0x4a848b(189)];
            var _0x2f5ae1 = _0x54e2ee[_0x4a848b(167)];
            var _0xdf7709 = [];
            var _0x18e5ed = _0x5e64aa;
            var _0xb054e4 = _0x25f355;
            (function () {
              var _0x2768d1 = _0x4a848b;
              _0xd46ddb = new _0x461967[_0x2768d1(179)]();
              (_0x113d07 = new _0x461967[_0x2768d1(157)](90, _0x18e5ed / _0xb054e4, 1, 2000)).position.x = 0;
              _0x113d07[_0x2768d1(171)].y = 0;
              var _0x5639ab = 1;
              var _0x41d716 = _0x18e5ed < _0xb054e4 ? _0xb054e4 : _0x18e5ed;
              _0x5639ab = 8;
              function _0x2ead90(_0x571a2e) {
                return +_0x571a2e;
              }
              _0x113d07[_0x2768d1(171)].z = -_0x41d716 * (0.5 / Math[_0x2768d1(172)](Math.PI / 180 * 45));
              _0x113d07.up.x = 0;
              _0x113d07.up.y = -1;
              _0x113d07.up.z = 0;
              _0x113d07[_0x2768d1(133)](0, 0, 0);
              (_0x3f5ddc = new _0x26c73e(_0x2768d1(203)))[_0x2768d1(171)][_0x2768d1(161)](0, 0, -2000)[_0x2768d1(170)]();
              _0xd46ddb[_0x2768d1(182)](_0x3f5ddc);
              (_0x3de99f = new _0x461967[_0x2768d1(125)](_0x2768d1(203)))[_0x2768d1(171)].set(0, 0, 2000)[_0x2768d1(170)]();
              _0xd46ddb.add(_0x3de99f);
              (_0x41d716 = new _0x461967[_0x2768d1(175)](_0x253d8e))[_0x2768d1(118)] = Math.PI * 90 / 180;
              _0x41d716[_0x2768d1(207)] = 1000;
              _0x41d716[_0x2768d1(135)] = 1000;
              var _0x3f5ddc = new _0x461967[_0x2768d1(117)]({
                map: _0x41d716,
                side: 2
              });
              var _0x2aecc5 = _0x59a91d[_0x2768d1(188)][_0x2768d1(194)](function (_0x318e11) {
                return _0x318e11.map(function (_0x5f0633) {
                  return new _0x461967[_0x408289(159)](_0x2ead90(_0x5f0633.x), _0x2ead90(_0x5f0633.y), 0);
                });
              });
              var _0x3de99f = _0x2aecc5.length - 1;
              _0x41d716 = (_0x41d716 = [])[_0x2768d1(146)].apply(_0x41d716, _0xa3187a(_0xa3187a(new Array(2))[_0x2768d1(194)](function (_0x39bbae, _0x2b7af9) {
                var _0x48769a = _0x2768d1;
                return _0xa3187a(new Array(_0x2aecc5[_0x48769a(211)]))[_0x48769a(194)](function () {
                  return _0x2b7af9;
                });
              })));
              var _0x18a00c = new _0x489d2a(_0x3de99f, _0x3de99f, _0x41d716, _0x41d716, _0x2aecc5);
              _0x41d716 = new _0x49c9c8(function (_0x2555f0, _0x124bba, _0x281102) {
                return _0x18a00c[_0x2768d1(164)](_0x2555f0, _0x124bba, _0x281102);
              }, 20, 20);
              _0x41d716[_0x2768d1(162)](new _0x461967[_0x2768d1(153)]()[_0x2768d1(161)](_0x59a91d[_0x2768d1(122)][0], _0x59a91d[_0x2768d1(122)][4], _0x59a91d.matrix4[8], _0x59a91d.matrix4[12], _0x59a91d[_0x2768d1(122)][1], _0x59a91d[_0x2768d1(122)][5], _0x59a91d[_0x2768d1(122)][9], _0x59a91d[_0x2768d1(122)][13], _0x59a91d[_0x2768d1(122)][2], _0x59a91d.matrix4[6], _0x59a91d[_0x2768d1(122)][10], _0x59a91d[_0x2768d1(122)][14], _0x59a91d[_0x2768d1(122)][3], _0x59a91d[_0x2768d1(122)][7], _0x59a91d[_0x2768d1(122)][11], _0x59a91d.matrix4[15]));
              (_0x41d716 = new _0x461967[_0x2768d1(136)](_0x41d716, _0x3f5ddc)).matrixAutoUpdate = false;
              _0x3f5ddc = _0x59a91d.rect;
              _0x41d716[_0x2768d1(171)].x = _0x3f5ddc[_0x2768d1(206)];
              _0x41d716[_0x2768d1(171)].y = _0x3f5ddc[_0x2768d1(113)];
              _0x41d716[_0x2768d1(171)].z = 0;
              _0x41d716[_0x2768d1(118)].x = Math.PI / 180 * 0;
              _0x41d716[_0x2768d1(118)].y = Math.PI / 180 * 0;
              _0x41d716[_0x2768d1(118)].z = Math.PI / 180 * 0;
              _0x41d716[_0x2768d1(138)][_0x2768d1(119)](Math.PI / 180 * 0);
              _0x41d716[_0x2768d1(138)][_0x2768d1(147)](Math.PI / 180 * 0);
              _0x41d716.geometry[_0x2768d1(168)](Math.PI / 180 * 0);
              _0x41d716[_0x2768d1(138)][_0x2768d1(196)]();
              _0x41d716[_0x2768d1(138)][_0x2768d1(156)]();
              _0x41d716[_0x2768d1(169)]();
              _0xd46ddb[_0x2768d1(182)](_0x41d716);
              _0xdf7709[_0x2768d1(163)](_0x41d716);
              if (!(_0x41d716 = _0x2f5ae1).style) {
                _0x41d716[_0x2768d1(209)] = {
                  width: _0x18e5ed,
                  height: _0xb054e4
                };
              }
              _0x4e16fb = null;
              (_0x4e16fb = new _0x461967[_0x2768d1(197)]({
                alpha: true,
                canvas: _0x41d716,
                precision: _0x2768d1(142),
                preserveDrawingBuffer: false
              }))[_0x2768d1(124)](_0x18e5ed, _0xb054e4);
            })();
            // TOLOOK
            setTimeout(function () {
              var _0x2a7874 = 8;
              var _0x53531b = _0x4a848b;
              _0x2a7874 = 5;
              _0x4e16fb[_0x53531b(145)](_0xd46ddb, _0x113d07);
              var _0x333913 = _0x4e16fb[_0x53531b(112)];
              _0xf31fb1(_0x333913);
              _0x62a18d[_0x53531b(186)](_0xd46ddb, _0xdf7709, function () {
                var _0x475e49 = _0x53531b;
                _0x113d07.clear();
                _0xdf7709 = [];
                _0x4e16fb[_0x475e49(176)][_0x475e49(140)]();
                _0x4e16fb[_0x475e49(140)]();
                _0x4e16fb = _0x113d07 = _0xd46ddb = null;
                _0xe427ed.clear();
              });
            }, 0);
          });
          _0x52f0a5(this, _0x34a6f5(174), function (_0x3262dc, _0x401e93) {
            var _0x1f196d = _0x34a6f5;
            var _0x330f65 = _0x3262dc[_0x1f196d(130)];
            var _0x4f83e4 = _0x3262dc[_0x1f196d(143)];
            var _0x113acf = _0x3262dc[_0x1f196d(128)];
            var _0x86d143 = _0x3262dc[_0x1f196d(189)];
            var _0x5c17c3 = _0x3262dc.webglCanvas;
            var _0x3ad5ca = true;
            _0x4af8ce = Array.isArray(_0x330f65[_0x1f196d(190)]) ? _0x330f65.Points : (_0x1bcba3[_0x1f196d(213)]("不扭曲的智能对象：", _0x330f65), _0x3ad5ca = false, [{
              x: 0,
              y: 0
            }, {
              x: 0 + (_0x567dbe = (_0x154a5d = _0x31852f(_0x330f65[_0x1f196d(201)][_0x1f196d(180)](",").map(function (_0x1c3a2c) {
                return +_0x1c3a2c;
              }), 2))[0]) / 3,
              y: 0
            }, {
              x: 0 + _0x567dbe / 3 * 2,
              y: 0
            }, {
              x: 0 + _0x567dbe,
              y: 0
            }, {
              x: 0,
              y: 0 + (_0x456b36 = _0x154a5d[1]) / 3
            }, {
              x: 0 + _0x567dbe / 3,
              y: 0 + _0x456b36 / 3
            }, {
              x: 0 + _0x567dbe / 3 * 2,
              y: 0 + _0x456b36 / 3
            }, {
              x: 0 + _0x567dbe,
              y: 0 + _0x456b36 / 3
            }, {
              x: 0,
              y: 0 + _0x456b36 / 3 * 2
            }, {
              x: 0 + _0x567dbe / 3,
              y: 0 + _0x456b36 / 3 * 2
            }, {
              x: 0 + _0x567dbe / 3 * 2,
              y: 0 + _0x456b36 / 3 * 2
            }, {
              x: 0 + _0x567dbe,
              y: 0 + _0x456b36 / 3 * 2
            }, {
              x: 0,
              y: 0 + _0x456b36
            }, {
              x: 0 + _0x567dbe / 3,
              y: 0 + _0x456b36
            }, {
              x: 0 + _0x567dbe / 3 * 2,
              y: 0 + _0x456b36
            }, {
              x: 0 + _0x567dbe,
              y: 0 + _0x456b36
            }]);
            _0x3262dc = _0x62a18d.formatBezierPoints(_0x4af8ce);
            var _0x154a5d = _0x31852f(_0x330f65.BoundingRect.split(",").map(function (_0x4b4941) {
              return +_0x4b4941;
            }), 4);
            var _0x567dbe = _0x154a5d[0];
            var _0x456b36 = _0x154a5d[1];
            var _0x4af8ce = _0x154a5d[2];
            _0x154a5d = _0x154a5d[3];
            _0x154a5d = _0x62a18d[_0x1f196d(187)]({
              bezierPoints: _0x3262dc,
              rect: {
                width: _0x4af8ce,
                height: _0x154a5d,
                positionX: _0x3ad5ca && _0x330f65[_0x1f196d(137)] > 20 && _0x330f65[_0x1f196d(127)] > 20 ? _0x330f65.X + (_0x330f65[_0x1f196d(137)] / 2 - _0x113acf / 2) : _0x567dbe + (_0x4af8ce / 2 - _0x113acf / 2),
                positionY: _0x3ad5ca && _0x330f65[_0x1f196d(137)] > 20 && _0x330f65[_0x1f196d(127)] > 20 ? _0x330f65.Y + (_0x330f65[_0x1f196d(127)] / 2 - _0x86d143 / 2) : _0x456b36 + (_0x154a5d / 2 - _0x86d143 / 2)
              },
              matrix3: _0x330f65.Matrix3
            });
            if (_0x330f65.Width < 50 || _0x330f65[_0x1f196d(127)] < 50) {
              _0x1bcba3[_0x1f196d(129)]("数据异常：存在不符合预期的宽高值的图层："[_0x1f196d(146)](_0x330f65[_0x1f196d(144)], ", w: ").concat(_0x330f65[_0x1f196d(137)], _0x1f196d(141)).concat(_0x330f65[_0x1f196d(127)]));
            }
            _0x1bcba3[_0x1f196d(198)]("renderThree "[_0x1f196d(146)](_0x330f65.key));
            _0x62a18d[_0x1f196d(210)]({
              frameData: _0x154a5d,
              cropDesignCanvas: _0x4f83e4,
              layerKey: _0x330f65.key,
              psdWidth: _0x113acf,
              psdHeight: _0x86d143,
              webglCanvas: _0x5c17c3
            }, function (_0x21384a) {
              var _0x5e3a8c = _0x1f196d;
              _0x1bcba3[_0x5e3a8c(178)](_0x5e3a8c(208)[_0x5e3a8c(146)](_0x330f65.key));
              _0x401e93(_0x21384a);
            });
          });
          this[_0x34a6f5(120)](_0x210d1d);
        });
        _0x2b0f91 = 6;
        var _0x4268f;
        var _0x3a16f5 = _0x11318b(9944);
        _0x4268f = 12;
        function _0x4270ee(_0x26d000, _0x1966e4) {
          return (_0x4270ee = Object.setPrototypeOf || function (_0x53510d, _0x481a9f) {
            _0x53510d.__proto__ = _0x481a9f;
            return _0x53510d;
          })(_0x26d000, _0x1966e4);
        }
        function _0x584322(_0x376e17, _0x3752e3) {
          if (_0x3752e3 && (_0x43c5c1(_0x3752e3) === "object" || typeof _0x3752e3 == "function")) {
            return _0x3752e3;
          }
          if (_0x3752e3 !== undefined) {
            throw new TypeError("``````````````````````````````````````````");
          }
          return function (_0x216d2c) {
            if (_0x216d2c === undefined) {
              throw new ReferenceError("``````````````````````````````````````````");
            }
            return _0x216d2c;
          }(_0x376e17);
        }
        function _0x59eaf8(_0x43528e) {
          return (_0x59eaf8 = Object.setPrototypeOf ? Object.getPrototypeOf : function (_0xd7a320) {
            return _0xd7a320.__proto__ || Object.getPrototypeOf(_0xd7a320);
          })(_0x43528e);
        }
        function _0x444041() {
          var _0x5ada5f = 8;
          var _0x240d00 = ["position", "backgroundRepeat", "fixed", "fbody", "relative", "justifyContent", "Set", "img_url", "contain", "call", "auto", "right", "baseHeight", "height", "1px #eee solid", "backgroundImage", "closeBtn", "34462030xfsiTo", "done", "next", "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.", "swiperClass", "6beGCzJ", "Map", "forEach", "borderColor", "swiperWrap", "marginBottom", "padding", "int", "XTU-big-show", "boxSizing", "left", "mySwiper", "div", "371lGvPRh", "kill", "zIndex", "renderHtml", "35px", "baseWidth", "style", "undefined", "background", "center", "3066550AngOLF", "550px", "XTU-big-show-wrap", "prototype", "swiperEl", "appendChild", "createSwiper", "#505050", "wrapDiv", "fdWrap", "width", "parentNode", "onclick", "dotWrap", "number", "className", "constructor", "152552DHuTax", "no-repeat", ") no-repeat center", "overflowX", "4995964eqdFYo", "#fff", "apply", "_onchange", "50px", "construct", "top", "length", "slice", "XTUtuList", "670px", "createElement", "valueOf", "sham", "558543GOFNtA", "99999", "display", "icon", "#eee", "10px", "-wrap .XTU-vertical-item", "name", "url(", "renderSwiperItem", "2691158Lfkqia", "10874610VLgBxW", "Arguments", "100px", "onchange", "11HvAShy", "space-between", "textAlign", "XTU-vertical-item", "element", "float", "toString", "test", "rendeso", "5px", "function", "overflowY", "verticalDom", "3etpuJo", "close", "backgroundSize", "backgroundPosition", "backgroundColor", "concat"];
          _0x5ada5f = 7;
          return (_0x444041 = function () {
            return _0x240d00;
          })();
        }
        function _0x4e8f2b(_0xafe4c8, _0x1e8ad9) {
          var _0x17da94 = _0x2f9bfd;
          if (_0x1e8ad9 == null || _0x1e8ad9 > _0xafe4c8[_0x17da94(390)]) {
            _0x1e8ad9 = _0xafe4c8[_0x17da94(390)];
          }
          for (var _0x3bab22 = 0, _0xe4e1f3 = new Array(_0x1e8ad9); _0x3bab22 < _0x1e8ad9; _0x3bab22++) {
            _0xe4e1f3[_0x3bab22] = _0xafe4c8[_0x3bab22];
          }
          return _0xe4e1f3;
        }
        function _0x2f9bfd(_0x2e0951, _0x524eee) {
          var _0x1b4aee = _0x444041();
          return (_0x2f9bfd = function (_0x429e39, _0x861459) {
            return _0x1b4aee[_0x429e39 -= 379];
          })(_0x2e0951, _0x524eee);
        }
        (function () {
          var _0x4df8bf = _0x2f9bfd;
          var _0x50560c = _0x444041();
          for (;;) {
            try {
              if (-parseInt(_0x4df8bf(397)) + -parseInt(_0x4df8bf(407)) / 2 + parseInt(_0x4df8bf(425)) / 3 * (-parseInt(_0x4df8bf(383)) / 4) + -parseInt(_0x4df8bf(476)) / 5 * (-parseInt(_0x4df8bf(453)) / 6) + parseInt(_0x4df8bf(466)) / 7 * (parseInt(_0x4df8bf(379)) / 8) + -parseInt(_0x4df8bf(408)) / 9 + parseInt(_0x4df8bf(448)) / 10 * (parseInt(_0x4df8bf(412)) / 11) == 708767) {
                break;
              }
              _0x50560c.push(_0x50560c.shift());
            } catch (_0x10fe90) {
              _0x50560c.push(_0x50560c.shift());
            }
          }
        })();
        var _0x1a5646 = 15;
        var _0x21e3b2 = function () {
          var _0x2dbeea = _0x2f9bfd;
          (function (_0x2f2493, _0x3c9014) {
            if (typeof _0x3c9014 != "function" && _0x3c9014 !== null) {
              throw new TypeError("``````````````````````````````````````````");
            }
            _0x2f2493.prototype = Object.create(_0x3c9014 && _0x3c9014.prototype, {
              constructor: {
                value: _0x2f2493,
                writable: true,
                configurable: true
              }
            });
            Object.defineProperty(_0x2f2493, "prototype", {
              writable: false
            });
            if (_0x3c9014) {
              _0x4270ee(_0x2f2493, _0x3c9014);
            }
          })(_0x4859bb, _0x4692ca);
          var _0x53fa9e = function (_0x598d52) {
            var _0x3adfe5 = function () {
              var _0x31b225 = _0x2f9bfd;
              if (typeof Reflect == "undefined" || !Reflect[_0x31b225(388)]) {
                return false;
              }
              if (Reflect[_0x31b225(388)][_0x31b225(396)]) {
                return false;
              }
              if (typeof Proxy === _0x31b225(422)) {
                return true;
              }
              try {
                Boolean[_0x31b225(479)][_0x31b225(395)].call(Reflect.construct(Boolean, [], function () {}));
                return true;
              } catch (_0x5a0629) {
                return false;
              }
            }();
            return function () {
              var _0xf046bb;
              var _0x49f127 = _0x2f9bfd;
              var _0x3428ea = _0x59eaf8(_0x598d52);
              return _0x584322(this, _0x3adfe5 ? (_0xf046bb = _0x59eaf8(this).constructor, Reflect.construct(_0x3428ea, arguments, _0xf046bb)) : _0x3428ea[_0x49f127(385)](this, arguments));
            };
          }(_0x4859bb);
          function _0x4859bb(_0x1f5e9f, _0x4eee14) {
            var _0x38bd09 = _0x2f9bfd;
            var _0x127621 = (_0x2029d3 = _0x4eee14[_0x38bd09(471)]) === undefined ? 0 : _0x2029d3;
            var _0x2029d3 = (_0x29571b = _0x4eee14[_0x38bd09(443)]) === undefined ? 0 : _0x29571b;
            var _0x29571b = (_0x29571b = _0x4eee14[_0x38bd09(416)]) === undefined ? null : _0x29571b;
            _0x4eee14 = (_0x4eee14 = _0x4eee14[_0x38bd09(411)]) === undefined ? null : _0x4eee14;
            _0x5b4327(this, _0x4859bb);
            (_0x4eee14 = _0x53fa9e[_0x38bd09(440)](this, _0x1f5e9f, {
              baseWidth: _0x127621,
              baseHeight: _0x2029d3,
              element: _0x29571b,
              onchange: _0x4eee14
            }))[_0x38bd09(452)] = _0x38bd09(461);
            return _0x4eee14;
          }
          _0xae3fcb(_0x4859bb, [{
            key: _0x2dbeea(460),
            value: function () {
              var _0x330964 = _0x2dbeea;
              var _0x458804 = (_0xbf15ce = this[_0x330964(484)]())[_0x330964(485)];
              var _0x43e743 = _0xbf15ce[_0x330964(434)];
              var _0x3a4871 = (_0x286b21 = this[_0x330964(469)]())[_0x330964(480)];
              var _0xbf15ce = _0x286b21[_0x330964(457)];
              var _0x286b21 = _0x286b21[_0x330964(489)];
              _0x3a4871[_0x330964(472)][_0x330964(486)] = _0x330964(477);
              this.renderSwiperItem(_0xbf15ce);
              this[_0x330964(420)](_0x286b21);
              _0x43e743[_0x330964(481)](_0x3a4871);
              this[_0x330964(416)][_0x330964(481)](_0x458804);
              this[_0x330964(482)](_0x3a4871);
              this[_0x330964(424)](_0x43e743);
              this[_0x330964(426)](_0x458804);
              return this.mySwiper;
            }
          }, {
            key: "onchange",
            value: function (_0x4da1cf) {
              var _0x4e7e46;
              var _0x2ca76c = _0x2dbeea;
              _0x4e7e46 = 6;
              if (this._onchange) {
                this[_0x2ca76c(386)](_0x4da1cf);
              }
              for (var _0x5cf7d2 = document.querySelectorAll(`.${this[_0x2ca76c(452)]}${_0x2ca76c(403)}`), _0x5c5dd6 = 0; _0x5c5dd6 < _0x5cf7d2.length; _0x5c5dd6++) {
                _0x5cf7d2[_0x5c5dd6][_0x2ca76c(472)][_0x2ca76c(456)] = _0x5c5dd6 == _0x4da1cf ? _0x2ca76c(483) : "#eee";
              }
            }
          }, {
            key: _0x2dbeea(426),
            value: function (_0x1e3a29) {
              var _0x56bf0c = _0x2dbeea;
              var _0xa52886 = this;
              var _0x3b1989 = document.createElement(_0x56bf0c(465));
              _0x3b1989[_0x56bf0c(472)][_0x56bf0c(431)] = "absolute";
              _0x3b1989[_0x56bf0c(472)][_0x56bf0c(486)] = "35px";
              _0x3b1989[_0x56bf0c(472)].height = _0x56bf0c(470);
              _0x3b1989[_0x56bf0c(472)][_0x56bf0c(459)] = _0x56bf0c(421);
              _0x3b1989[_0x56bf0c(472)][_0x56bf0c(442)] = _0x56bf0c(410);
              _0x3b1989[_0x56bf0c(472)][_0x56bf0c(389)] = _0x56bf0c(387);
              _0x3b1989[_0x56bf0c(472)][_0x56bf0c(474)] = _0x56bf0c(405)[_0x56bf0c(430)](_0x4d5890[_0x56bf0c(400)][_0x56bf0c(447)], _0x56bf0c(381));
              _0x3b1989[_0x56bf0c(472)].backgroundSize = "contain";
              _0x1e3a29.appendChild(_0x3b1989);
              _0x3b1989[_0x56bf0c(488)] = function () {
                var _0x482e02 = _0x56bf0c;
                _0x1e3a29.remove();
                _0xa52886[_0x482e02(464)][_0x482e02(467)]();
              };
            }
          }, {
            key: _0x2dbeea(484),
            value: function () {
              var _0x491ac2 = _0x2dbeea;
              var _0x2b0945 = document[_0x491ac2(394)](_0x491ac2(465));
              _0x2b0945[_0x491ac2(491)] = _0x491ac2(478);
              _0x2b0945.style.position = _0x491ac2(433);
              _0x2b0945[_0x491ac2(472)][_0x491ac2(389)] = 0;
              _0x2b0945[_0x491ac2(472)][_0x491ac2(463)] = 0;
              _0x2b0945[_0x491ac2(472)][_0x491ac2(486)] = "100vw";
              _0x2b0945[_0x491ac2(472)][_0x491ac2(444)] = "100vh";
              _0x2b0945[_0x491ac2(472)][_0x491ac2(474)] = _0x491ac2(384);
              _0x2b0945.style[_0x491ac2(468)] = _0x491ac2(398);
              var _0x3437f5 = document.createElement("div");
              _0x2b0945[_0x491ac2(481)](_0x3437f5);
              _0x3437f5[_0x491ac2(472)].width = _0x491ac2(393);
              _0x3437f5[_0x491ac2(472)].margin = "50px auto";
              _0x3437f5[_0x491ac2(472)][_0x491ac2(399)] = "flex";
              _0x3437f5.style[_0x491ac2(436)] = _0x491ac2(413);
              return {
                fdWrap: _0x2b0945,
                fbody: _0x3437f5
              };
            }
          }, {
            key: _0x2dbeea(424),
            value: function (_0x3a4338) {
              var _0x150e86 = _0x2dbeea;
              var _0x52dfd4 = this;
              var _0x169b90 = this[_0x150e86(392)];
              var _0x1d1763 = document[_0x150e86(394)](_0x150e86(465));
              _0x1d1763[_0x150e86(472)][_0x150e86(486)] = _0x150e86(410);
              _0x1d1763.style[_0x150e86(444)] = "550px";
              _0x1d1763[_0x150e86(472)][_0x150e86(423)] = _0x150e86(441);
              _0x1d1763[_0x150e86(472)][_0x150e86(382)] = "hidden";
              for (var _0x17a157 = 0; _0x17a157 < _0x169b90[_0x150e86(390)]; _0x17a157++) {
                (function (_0x5b7a0a) {
                  var _0x30d17c = _0x150e86;
                  var _0x2006ab = _0x169b90[_0x5b7a0a];
                  var _0x24572b = document[_0x30d17c(394)]("div");
                  _0x24572b[_0x30d17c(491)] = _0x30d17c(415);
                  _0x24572b[_0x30d17c(472)][_0x30d17c(427)] = _0x30d17c(439);
                  _0x24572b[_0x30d17c(472)].backgroundPosition = _0x30d17c(475);
                  _0x24572b[_0x30d17c(472)][_0x30d17c(432)] = _0x30d17c(380);
                  _0x24572b[_0x30d17c(472)][_0x30d17c(462)] = "border-box";
                  _0x24572b.style[_0x30d17c(486)] = "100%";
                  _0x24572b[_0x30d17c(472)][_0x30d17c(444)] = _0x30d17c(410);
                  _0x24572b[_0x30d17c(472)][_0x30d17c(458)] = _0x30d17c(402);
                  _0x24572b[_0x30d17c(472)].border = _0x30d17c(445);
                  if (_0x5b7a0a == 0) {
                    _0x24572b[_0x30d17c(472)][_0x30d17c(456)] = "#505050";
                  }
                  _0x1d1763[_0x30d17c(481)](_0x24572b);
                  _0x24572b.onclick = function () {
                    var _0x603f91 = _0x30d17c;
                    _0x52dfd4[_0x603f91(464)].slide(_0x5b7a0a);
                    _0x24572b[_0x603f91(487)].childNodes[_0x603f91(455)](function (_0x352287) {
                      var _0x270cdb = 8;
                      var _0x4a3824 = _0x603f91;
                      _0x270cdb = 11;
                      _0x352287.style[_0x4a3824(456)] = _0x4a3824(401);
                    });
                    _0x24572b[_0x603f91(472)].borderColor = "#505050";
                  };
                })(_0x17a157);
              }
              _0x3a4338[_0x150e86(481)](_0x1d1763);
            }
          }, {
            key: _0x2dbeea(406),
            value: function (_0xd48013) {
              var _0x4c6979;
              var _0x2bce70 = _0x2dbeea;
              var _0x10f57c = function (_0x5ceb16, _0x11d31e) {
                var _0x58cc14 = _0x2f9bfd;
                var _0x401a66 = typeof Symbol !== _0x58cc14(473) && _0x5ceb16[Symbol.iterator] || _0x5ceb16["@@iterator"];
                if (!_0x401a66) {
                  if (Array.isArray(_0x5ceb16) || (_0x401a66 = function (_0x3cb7ad, _0x567594) {
                    var _0x314411 = _0x2f9bfd;
                    if (_0x3cb7ad) {
                      if (typeof _0x3cb7ad == "string") {
                        return _0x4e8f2b(_0x3cb7ad, _0x567594);
                      }
                      var _0x4e40b3;
                      var _0x41f126 = Object[_0x314411(479)][_0x314411(418)].call(_0x3cb7ad)[_0x314411(391)](8, -1);
                      _0x4e40b3 = "dnjg";
                      if ((_0x41f126 = _0x41f126 === "Object" && _0x3cb7ad.constructor ? _0x3cb7ad[_0x314411(492)][_0x314411(404)] : _0x41f126) === _0x314411(454) || _0x41f126 === _0x314411(437)) {
                        return Array.from(_0x3cb7ad);
                      } else if (_0x41f126 === _0x314411(409) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/[_0x314411(419)](_0x41f126)) {
                        return _0x4e8f2b(_0x3cb7ad, _0x567594);
                      } else {
                        return undefined;
                      }
                    }
                  }(_0x5ceb16)) || _0x11d31e && _0x5ceb16 && typeof _0x5ceb16[_0x58cc14(390)] === _0x58cc14(490)) {
                    if (_0x401a66) {
                      _0x5ceb16 = _0x401a66;
                    }
                    var _0x58f8c4;
                    var _0x35a931 = 0;
                    _0x58f8c4 = 11;
                    return {
                      s: _0x11d31e = function () {},
                      n: function () {
                        if (_0x35a931 >= _0x5ceb16.length) {
                          return {
                            done: true
                          };
                        } else {
                          return {
                            done: false,
                            value: _0x5ceb16[_0x35a931++]
                          };
                        }
                      },
                      e: function (_0x459e6b) {
                        throw _0x459e6b;
                      },
                      f: _0x11d31e
                    };
                  }
                  throw new TypeError(_0x58cc14(451));
                }
                var _0x374c6e;
                var _0x17ed4d = true;
                var _0x258fe9 = false;
                return {
                  s: function () {
                    _0x401a66 = _0x401a66[_0x58cc14(440)](_0x5ceb16);
                  },
                  n: function () {
                    var _0x33eac8 = _0x401a66[_0x58cc14(450)]();
                    _0x17ed4d = _0x33eac8.done;
                    return _0x33eac8;
                  },
                  e: function (_0x4ff7c4) {
                    _0x258fe9 = true;
                    _0x374c6e = _0x4ff7c4;
                  },
                  f: function () {
                    try {
                      if (!(_0x17ed4d || _0x401a66.return == null)) {
                        _0x401a66.return();
                      }
                    } finally {
                      if (_0x258fe9) {
                        throw _0x374c6e;
                      }
                    }
                  }
                };
              }(this[_0x2bce70(392)]);
              try {
                for (_0x10f57c.s(); !(_0x4c6979 = _0x10f57c.n())[_0x2bce70(449)];) {
                  var _0x1446b0 = _0x4c6979.value;
                  var _0x330368 = document.createElement(_0x2bce70(465));
                  _0x330368.style[_0x2bce70(417)] = _0x2bce70(463);
                  _0x330368[_0x2bce70(472)].position = _0x2bce70(435);
                  _0x330368.style[_0x2bce70(486)] = "100%";
                  _0x330368[_0x2bce70(472)][_0x2bce70(414)] = "center";
                  var _0x40efae = document[_0x2bce70(394)](_0x2bce70(465));
                  _0x40efae[_0x2bce70(472)].width = _0x2bce70(477);
                  _0x40efae[_0x2bce70(472)][_0x2bce70(444)] = _0x2bce70(477);
                  _0x40efae.style[_0x2bce70(446)] = _0x2bce70(405)[_0x2bce70(430)](_0x1446b0[_0x2bce70(438)], ")");
                  _0x40efae[_0x2bce70(472)][_0x2bce70(428)] = _0x2bce70(475);
                  _0x40efae[_0x2bce70(472)][_0x2bce70(432)] = _0x2bce70(380);
                  _0x40efae.style[_0x2bce70(427)] = _0x2bce70(439);
                  _0x40efae.style[_0x2bce70(429)] = _0x2bce70(384);
                  _0x330368[_0x2bce70(481)](_0x40efae);
                  _0xd48013[_0x2bce70(481)](_0x330368);
                }
              } catch (_0x1c319c) {
                _0x10f57c.e(_0x1c319c);
              } finally {
                _0x10f57c.f();
              }
            }
          }]);
          return _0x4859bb;
        }();
        _0x1a5646 = 0;
        function _0x40ba31(_0x7ff44c, _0x234d0f) {
          var _0x2b926c = _0x240c2d();
          return (_0x40ba31 = function (_0x1bed02, _0x169c10) {
            return _0x2b926c[_0x1bed02 -= 120];
          })(_0x7ff44c, _0x234d0f);
        }
        (function () {
          var _0x4ff39a = _0x40ba31;
          var _0x523a9d = _0x240c2d();
          for (;;) {
            try {
              if (-parseInt(_0x4ff39a(127)) + -parseInt(_0x4ff39a(130)) / 2 + parseInt(_0x4ff39a(129)) / 3 * (-parseInt(_0x4ff39a(132)) / 4) + parseInt(_0x4ff39a(135)) / 5 + -parseInt(_0x4ff39a(123)) / 6 * (parseInt(_0x4ff39a(134)) / 7) + parseInt(_0x4ff39a(122)) / 8 * (parseInt(_0x4ff39a(126)) / 9) + parseInt(_0x4ff39a(124)) / 10 == 306575) {
                break;
              }
              _0x523a9d.push(_0x523a9d.shift());
            } catch (_0x499312) {
              _0x523a9d.push(_0x523a9d.shift());
            }
          }
        })();
        var _0x131b64 = {};
        function _0x240c2d() {
          var _0xa91ead = ["random", "9mhXDJY", "590846xZUQBi", "log", "1229946kpSTbS", "741476ABTlnj", "fromCharCode", "4qRExGy", "length", "21TFHjCs", "188795AsSNZg", "----", "charCodeAt", "2667488bADsSv", "468540PFpBgC", "15412160rebype"];
          return (_0x240c2d = function () {
            return _0xa91ead;
          })();
        }
        _0x131b64.DI = function (_0xf9ebdc) {
          for (var _0x670d7c = _0x40ba31, _0x16ee1d = 0, _0x45f374 = 0; _0x45f374 < _0xf9ebdc; _0x45f374++) {
            _0x16ee1d += Math[_0x670d7c(125)]();
          }
          return _0x16ee1d / _0xf9ebdc < Math.PI / 4;
        };
        _0x131b64.VR = function (_0x41d3a7, _0x5852a7) {
          var _0x383c44 = _0x40ba31;
          var _0x92fac1 = "";
          if (!_0x131b64.DI(29)) {
            _0x5852a7 -= 4;
          }
          for (var _0x10c1f0 = 0; _0x10c1f0 < _0x41d3a7[_0x383c44(133)]; _0x10c1f0++) {
            _0x92fac1 += String[_0x383c44(131)](_0x41d3a7[_0x383c44(121)](_0x10c1f0) - _0x5852a7 - _0x10c1f0);
          }
          return _0x92fac1;
        };
        _0x131b64.j4 = function (_0xefe6d3, _0x524459) {
          var _0x4d7294 = _0x40ba31;
          var _0x26edb5 = "";
          if (!_0x131b64.DI(29)) {
            _0x524459 += 4;
          }
          for (var _0x1d6c08 = 0; _0x1d6c08 < _0xefe6d3[_0x4d7294(133)]; _0x1d6c08++) {
            _0x26edb5 += String[_0x4d7294(131)](_0xefe6d3[_0x4d7294(121)](_0x1d6c08) + _0x524459 + _0x1d6c08);
          }
          return _0x26edb5;
        };
        _0x131b64.Jy = function (_0xd54a5a) {
          var _0x1267ad = _0x40ba31;
          var _0x39ba92 = "";
          if (!_0x131b64.DI(28)) {
            _0xd54a5a += "-3";
          }
          for (var _0x53b388 = 0; _0x53b388 < _0xd54a5a[_0x1267ad(133)]; _0x53b388++) {
            var _0x51b92a = _0xd54a5a[_0x1267ad(121)](_0x53b388);
            if (_0x51b92a < 32 || _0x51b92a > 127) {
              throw "e";
            }
            _0x39ba92 += String.fromCharCode(32 + (_0x51b92a - 32 + 17 + _0x53b388 * 3) % 96);
          }
          return _0x39ba92;
        };
        _0x131b64.MQ = function (_0x37fa45) {
          var _0x16566a = _0x40ba31;
          var _0x160988 = "";
          if (!_0x131b64.DI(28)) {
            _0x37fa45 += "-1";
          }
          for (var _0x447d07 = 0; _0x447d07 < _0x37fa45.length; _0x447d07++) {
            var _0x182876 = _0x37fa45[_0x16566a(121)](_0x447d07);
            _0x182876 -= 32;
            _0x182876 += 960000;
            _0x182876 -= 17 + _0x447d07 * 3;
            _0x182876 %= 96;
            _0x160988 += String[_0x16566a(131)](32 + _0x182876);
          }
          return _0x160988;
        };
        _0x131b64.p2 = function (_0x583ad2) {
          var _0xe68c15 = _0x40ba31;
          var _0x3b8011 = "";
          if (!_0x131b64.DI(28)) {
            _0x583ad2 += "-3";
          }
          for (var _0x4a0a29 = 0; _0x4a0a29 < _0x583ad2[_0xe68c15(133)]; _0x4a0a29++) {
            var _0x55fa1d = _0x583ad2[_0xe68c15(121)](_0x4a0a29);
            if (_0x55fa1d < 32 || _0x55fa1d > 126) {
              throw "e";
            }
            _0x3b8011 += String[_0xe68c15(131)](32 + (_0x55fa1d - 32 + 17 + _0x4a0a29 * 3) % 95);
          }
          return _0x3b8011;
        };
        _0x131b64.Y0 = function (_0x3d21c0) {
          var _0xe04f06 = _0x40ba31;
          var _0x730067 = "";
          if (!_0x131b64.DI(28)) {
            _0x3d21c0 += "-1";
          }
          for (var _0xac161c = 0; _0xac161c < _0x3d21c0[_0xe04f06(133)]; _0xac161c++) {
            var _0x1a7b7a = _0x3d21c0.charCodeAt(_0xac161c);
            _0x1a7b7a -= 32;
            _0x1a7b7a += 950000;
            _0x1a7b7a -= 17 + _0xac161c * 3;
            _0x1a7b7a %= 95;
            _0x730067 += String[_0xe04f06(131)](32 + _0x1a7b7a);
          }
          return _0x730067;
        };
        _0x131b64.Dy = function (_0x176a67, _0x2bf858) {
          var _0x355987 = _0x40ba31;
          var _0x2395bf = "";
          if (!_0x131b64.DI(29)) {
            _0x2bf858 += 3;
          }
          for (var _0x212272 = 0; _0x212272 < _0x176a67[_0x355987(133)]; _0x212272++) {
            _0x2395bf += String[_0x355987(131)]((256 << 16) + _0x176a67[_0x355987(121)](_0x212272) + _0x2bf858 * _0x212272 & 255);
          }
          return _0x2395bf;
        };
        const _0x5c9e5f = _0x131b64;
        function _0x384af1(_0x4cc0ab, _0x365178) {
          var _0x9947d8;
          var _0x360630 = _0x221e29;
          var _0x495281 = Object.keys(_0x4cc0ab);
          if (Object[_0x360630(433)]) {
            _0x9947d8 = Object.getOwnPropertySymbols(_0x4cc0ab);
            if (_0x365178) {
              _0x9947d8 = _0x9947d8[_0x360630(443)](function (_0x49da68) {
                return Object.getOwnPropertyDescriptor(_0x4cc0ab, _0x49da68).enumerable;
              });
            }
            _0x495281[_0x360630(411)][_0x360630(440)](_0x495281, _0x9947d8);
          }
          return _0x495281;
        }
        function _0x4669ce(_0x5981e3) {
          for (var _0x32429d = _0x221e29, _0x4da7b1 = 1; _0x4da7b1 < arguments[_0x32429d(418)]; _0x4da7b1++) {
            var _0x143936 = arguments[_0x4da7b1] != null ? arguments[_0x4da7b1] : {};
            if (_0x4da7b1 % 2) {
              _0x384af1(Object(_0x143936), true)[_0x32429d(409)](function (_0x763cce) {
                _0x5064cc(_0x5981e3, _0x763cce, _0x143936[_0x763cce]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object[_0x32429d(400)](_0x5981e3, Object[_0x32429d(423)](_0x143936));
            } else {
              _0x384af1(Object(_0x143936))[_0x32429d(409)](function (_0x2b7b7d) {
                var _0x33022a = 7;
                var _0x3fab11 = _0x32429d;
                _0x33022a = 14;
                Object[_0x3fab11(429)](_0x5981e3, _0x2b7b7d, Object[_0x3fab11(401)](_0x143936, _0x2b7b7d));
              });
            }
          }
          return _0x5981e3;
        }
        function _0x221e29(_0x2a215e, _0x272a9a) {
          var _0x351141 = 8;
          var _0x26cacf = _0x39e848();
          _0x351141 = 9;
          return (_0x221e29 = function (_0x908268, _0x6db03f) {
            return _0x26cacf[_0x908268 -= 400];
          })(_0x2a215e, _0x272a9a);
        }
        function _0x2144b9(_0x1ba467) {
          var _0x56a113;
          var _0x1cc931;
          var _0x2abeb3;
          var _0x3fb1e6 = _0x221e29;
          var _0x1cd95a = _0x1ba467[_0x3fb1e6(424)];
          var _0x32a90c = _0x1ba467[_0x3fb1e6(415)];
          var _0x18fe51 = _0x1ba467[_0x3fb1e6(438)];
          var _0x14db15 = function (_0x3ede3d) {
            for (var _0x36012b = _0x221e29, _0x1c3dd8 = _0x3ede3d[_0x36012b(407)](","), _0x1837e3 = (_0x3ede3d = _0x1c3dd8[0][_0x36012b(442)](/:(.*?);/)[1], atob(_0x1c3dd8[1])), _0x1b7d24 = _0x1837e3.length, _0x287c18 = new Uint8Array(_0x1b7d24); _0x1b7d24--;) {
              _0x287c18[_0x1b7d24] = _0x1837e3[_0x36012b(430)](_0x1b7d24);
            }
            return new Blob([_0x287c18], {
              type: _0x3ede3d
            });
          }((_0x56a113 = _0x32a90c, _0x1cc931 = 600, _0x3ab17c = _0x221e29, _0x2abeb3 = (_0x14db15 = document.createElement("canvas"))[_0x3ab17c(428)]("2d"), _0x32a90c = _0x1cc931, (_0x1ba467 = _0x56a113[_0x3ab17c(414)] / _0x56a113[_0x3ab17c(436)]) > 1 ? _0x1cc931 = _0x32a90c / _0x1ba467 : _0x32a90c = _0x1cc931 * _0x1ba467, _0x14db15[_0x3ab17c(414)] = _0x32a90c, _0x14db15[_0x3ab17c(436)] = _0x1cc931, _0x2abeb3[_0x3ab17c(413)](_0x56a113, 0, 0, _0x32a90c, _0x1cc931), _0x14db15[_0x3ab17c(425)]()));
          var _0x3ab17c = new window[_0x3fb1e6(432)]([_0x14db15], _0x3fb1e6(426), {
            type: _0x3fb1e6(410)
          });
          (_0x14db15 = new FormData())[_0x3fb1e6(404)](_0x3fb1e6(435), _0x3ab17c);
          return _0x1f9890()[_0x3fb1e6(434)](_0x1cd95a, _0x14db15, {
            headers: _0x4669ce({
              "Content-Type": _0x3fb1e6(406)
            }, _0x18fe51)
          })[_0x3fb1e6(416)](function (_0x222f08) {});
        }
        function _0x39e848() {
          var _0x15e7f9 = ["split", "646pzFGue", "forEach", "image/png", "push", "data", "drawImage", "width", "canvas", "catch", "6302316nsoZsn", "length", "842712tbeiOP", "cancelToken", "7vOJzFn", "CancelToken", "getOwnPropertyDescriptors", "url", "toDataURL", "image.png", "35047320lwXdqC", "getContext", "defineProperty", "charCodeAt", "68022PSFrlf", "File", "getOwnPropertySymbols", "post", "image", "height", "log", "headers", "7092090WcLRnP", "apply", "170HQRTsh", "match", "filter", "113280MiwMuZ", "defineProperties", "getOwnPropertyDescriptor", "source", "1688TrxjwL", "append", "129vPBZOU", "multipart/form-data"];
          return (_0x39e848 = function () {
            return _0x15e7f9;
          })();
        }
        (function () {
          var _0x5ec4da = _0x221e29;
          var _0x9d9909 = _0x39e848();
          for (;;) {
            try {
              if (-parseInt(_0x5ec4da(403)) * (-parseInt(_0x5ec4da(408)) / 2) + parseInt(_0x5ec4da(405)) / 3 * (parseInt(_0x5ec4da(444)) / 4) + parseInt(_0x5ec4da(439)) / 5 + parseInt(_0x5ec4da(417)) / 6 * (parseInt(_0x5ec4da(421)) / 7) + -parseInt(_0x5ec4da(419)) / 8 + parseInt(_0x5ec4da(431)) / 9 * (-parseInt(_0x5ec4da(441)) / 10) + -parseInt(_0x5ec4da(427)) / 11 == 811843) {
                break;
              }
              _0x9d9909.push(_0x9d9909.shift());
            } catch (_0x2c9449) {
              _0x9d9909.push(_0x9d9909.shift());
            }
          }
        })();
        var _0x17c062 = _0x308f45;
        function _0x360609() {
          var _0x422119 = ["raster", "layers", "rasterize", "object", "setSize", "offsetWidth", "trim", "width", "renderType", "test", "relative", "clearRect", "name", "Map", "server", "keys", "findIndex", "continue", "msg", "element", "icon", "return", "view", "undefined", "setup", "data", "done", "post", "source", "dispatchEvent", "docementSvg", "anonymous", "getItems", "businessGoodsType", "sKu", "editor", "backgroundRepeat", "block", "mark", "createElement", "string", "display", "size", "4684670tHhCdN", "projects", "points", "originalSize", "webglCanvas", "layerName", "backgroundColor", "finish", "32YnNENZ", "sent", "appendChild", "XTU_loading", "setItem", "then", "backgroundSize", "1548617Vjhqdo", "top", "1048pOSnFG", "XTU_lo_", "getView", "jsad@651&*asdsasd", "canvas", "backgroundPosition", "matrix", "XTUtuList", "image 请传有效图片链接", "clipPath", "content", "gotthrwng", "请传入psdlist", "use", "prototype", "image", `
                  <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" style="margin: auto;display: block; shape-rendering: auto;position:absolute;top:50%;left:50%;transform: translate(-50%,-50%);" >
                  <circle cx="50" cy="50" r="9" stroke-width="1" stroke="#58acf4" stroke-dasharray="14.137166941154069 14.137166941154069" fill="none" stroke-linecap="round">
                  <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="1s" keyTimes="0;1" values="0 50 50;360 50 50"></animateTransform>
                  </circle>
                  </svg>
                  `, "render", "floor", "forEach", "end", "baseWidth", "100%", "url", "stop", "code", "~", "checkb", "88qDxSCg", "/upload", "getItem", "xmrToken", "zIndex", "div", "数据还没准备好", "right", "bounds", "value", "int", "changet", "XTU_oi", "none", "rgba(255,255,255,.5)", "Matrix", "891111txMnsA", "BoundingRect", "absolute", "7311irkgvO", "split", "498qqUUxF", "zoomIn", "concat", "swiper", "renderList", "getPos", "number", "isArray", "title", "clip", "neibu", "clear", "gotpolk", "getSvgList", "Raster", "join", "innerHTML", "getElementById", "5px", "@@iterator", "commandJSON", "save", "Set", "push", "oss", "img_url", "position", "changetu", "handleSmartObject", "carousel", "all", "XTU-svg", "1000px", "apply", "mySwiper", "abrupt", "length", "url(", "backgroundImage", "preCanvas", "localStorage", "50px", "center", "XTU_an_", "borderRadius", "filter", "random", "constructor", "请传入产品goodsID", "scale", "preLayer", "beginPath", "index", "?uwmuAvukNixUnncoUvgi1nqqvixu1", "parseSvg", "remove", "Object", "wrap", "~~~~~~~", "list", "qinchurul", "wrapDiv", "designFrequency", "style", "call", "R*,#-3-A+A9BD", "paper", "getContext", "/save/", "catch", "uptainse", "get", "sku", "token", "some", "importSVG", "drawImage", "height", "XTU:carouselchange", "next", "jishu", "no-repeat", "layerInfo", "1546740ZvDuvg", "className", "maxBtn", "prev", "10px", "wrapHeight", "renderUrl", "loadingDiv", "toString", "krc1oqe0gukogvko0{kfuuqte", "58925VbuXzd", "361088JxAKkP", "getTime", "stringify", "comdsae", "Arguments", "rect", "wrapWidth", "svg", "getImg", "onload", "clipCanvas", "参数data 类型不正确", "update", "onclick", "slice", "sessionStorage", "SmartObject", "Autoken", "layerInfoArr", "map"];
          return (_0x360609 = function () {
            return _0x422119;
          })();
        }
        function _0x55cc4d(_0x5cba50, _0x50dfa9) {
          var _0x1fe9e2 = _0x308f45;
          var _0x33df9c = typeof Symbol !== _0x1fe9e2(439) && _0x5cba50[Symbol.iterator] || _0x5cba50[_0x1fe9e2(544)];
          if (!_0x33df9c) {
            if (Array.isArray(_0x5cba50) || (_0x33df9c = function (_0x316497, _0x2c2e6b) {
              var _0x453a50 = _0x308f45;
              if (_0x316497) {
                if (typeof _0x316497 === _0x453a50(456)) {
                  return _0x278e8e(_0x316497, _0x2c2e6b);
                }
                var _0x75a6e4 = Object[_0x453a50(490)][_0x453a50(616)][_0x453a50(589)](_0x316497)[_0x453a50(633)](8, -1);
                if ((_0x75a6e4 = _0x75a6e4 === _0x453a50(581) && _0x316497[_0x453a50(572)] ? _0x316497.constructor.name : _0x75a6e4) === _0x453a50(429) || _0x75a6e4 === _0x453a50(547)) {
                  return Array.from(_0x316497);
                } else if (_0x75a6e4 === _0x453a50(623) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/[_0x453a50(648)](_0x75a6e4)) {
                  return _0x278e8e(_0x316497, _0x2c2e6b);
                } else {
                  return undefined;
                }
              }
            }(_0x5cba50)) || _0x50dfa9 && _0x5cba50 && typeof _0x5cba50[_0x1fe9e2(561)] === _0x1fe9e2(531)) {
              if (_0x33df9c) {
                _0x5cba50 = _0x33df9c;
              }
              var _0x489ab2 = 0;
              return {
                s: _0x50dfa9 = function () {},
                n: function () {
                  if (_0x489ab2 >= _0x5cba50[_0x1fe9e2(561)]) {
                    return {
                      done: true
                    };
                  } else {
                    return {
                      done: false,
                      value: _0x5cba50[_0x489ab2++]
                    };
                  }
                },
                e: function (_0x5abbec) {
                  throw _0x5abbec;
                },
                f: _0x50dfa9
              };
            }
            throw new TypeError("``````````````````````````````````````````");
          }
          var _0x271c93;
          var _0x30c10c = true;
          var _0x1c1714 = false;
          return {
            s: function () {
              _0x33df9c = _0x33df9c[_0x1fe9e2(589)](_0x5cba50);
            },
            n: function () {
              var _0x5a6373 = _0x1fe9e2;
              var _0x54dae8 = _0x33df9c[_0x5a6373(604)]();
              _0x30c10c = _0x54dae8[_0x5a6373(442)];
              return _0x54dae8;
            },
            e: function (_0x84f4b9) {
              _0x1c1714 = true;
              _0x271c93 = _0x84f4b9;
            },
            f: function () {
              var _0x5bcee3 = 15;
              var _0x2aba3a = _0x1fe9e2;
              _0x5bcee3 = 0;
              try {
                if (!(_0x30c10c || _0x33df9c[_0x2aba3a(437)] == null)) {
                  _0x33df9c.return();
                }
              } finally {
                if (_0x1c1714) {
                  throw _0x271c93;
                }
              }
            }
          };
        }
        function _0x278e8e(_0x529fe8, _0x16ebab) {
          var _0x547ddb;
          var _0x420869 = _0x308f45;
          _0x547ddb = 6;
          if (_0x16ebab == null || _0x16ebab > _0x529fe8[_0x420869(561)]) {
            _0x16ebab = _0x529fe8[_0x420869(561)];
          }
          for (var _0x22f5fa = 0, _0x3fb1ef = new Array(_0x16ebab); _0x22f5fa < _0x16ebab; _0x22f5fa++) {
            _0x3fb1ef[_0x22f5fa] = _0x529fe8[_0x22f5fa];
          }
          return _0x3fb1ef;
        }
        (function () {
          var _0x5114ed = _0x308f45;
          var _0x541b4d = _0x360609();
          for (;;) {
            try {
              if (-parseInt(_0x5114ed(520)) + parseInt(_0x5114ed(619)) / 2 + -parseInt(_0x5114ed(523)) / 3 * (parseInt(_0x5114ed(476)) / 4) + -parseInt(_0x5114ed(618)) / 5 * (parseInt(_0x5114ed(525)) / 6) + parseInt(_0x5114ed(474)) / 7 + parseInt(_0x5114ed(467)) / 8 * (-parseInt(_0x5114ed(608)) / 9) + -parseInt(_0x5114ed(459)) / 10 * (-parseInt(_0x5114ed(504)) / 11) == 954311) {
                break;
              }
              _0x541b4d.push(_0x541b4d.shift());
            } catch (_0x599282) {
              _0x541b4d.push(_0x541b4d.shift());
            }
          }
        })();
        var _0x30a602 = _0x11dd89();
        var _0x246c66 = _0x40c9f1("11<urvvj") + _0x40c9f1(_0x17c062(617));
        var _0x1e4b71 = _0x40c9f1("vpwqEpikugf1nqqvixu1");
        var _0x2f33f5 = _0x5c9e5f.Y0(_0x17c062(590));
        _0x5c9e5f.Y0("@ASF#fajsjf");
        var _0x1cfdf4 = _0x40c9f1(_0x17c062(578));
        var _0x77ce32 = _0x40c9f1("?pgmqv(");
        function _0x1f24d8(_0x84abf8, _0x4c982f) {
          var _0x2083d5 = _0x17c062;
          var _0x124cfa = false;
          if (_0x84abf8 && _0x4c982f && (_0x4c982f = window.sessionStorage[_0x2083d5(506)](_0x30a602))) {
            _0x4c982f = Number(_0x4c982f);
            return new Date()[_0x2083d5(620)]() - _0x4c982f < 28800000 || _0x124cfa;
          } else {
            return _0x124cfa;
          }
        }
        function _0x5a5e71() {
          return _0x4bcb25[_0x17c062(558)](this, arguments);
        }
        function _0x308f45(_0xd71bcc, _0x48bc0e) {
          var _0xdf462e;
          var _0x2db108 = _0x360609();
          _0xdf462e = 9;
          return (_0x308f45 = function (_0x1ecdbf, _0x3636b1) {
            return _0x2db108[_0x1ecdbf -= 429];
          })(_0xd71bcc, _0x48bc0e);
        }
        function _0x4bcb25() {
          var _0x1c58ab = _0x17c062;
          return (_0x4bcb25 = _0x4a4b23(_0x2af9e7()[_0x1c58ab(454)](function _0x38ef0a(_0x49bf46, _0x3d2c3a, _0x1a3578) {
            var _0x2cb1d4;
            var _0x2188d6;
            var _0x1474a2;
            var _0x521ab0 = _0x1c58ab;
            return _0x2af9e7()[_0x521ab0(582)](function (_0x3d8f6e) {
              var _0x58c0d3;
              var _0x420109 = _0x521ab0;
              for (;;) {
                switch (_0x3d8f6e[_0x420109(611)] = _0x3d8f6e[_0x420109(604)]) {
                  case 0:
                    if (!(_0x2cb1d4 = (_0x2cb1d4 = window.localStorage.getItem(_0x420109(587))) ? Number(_0x2cb1d4) + _0x1a3578 : _0x1a3578)) {
                      _0x3d8f6e[_0x420109(604)] = 17;
                      break;
                    }
                    100;
                    300;
                    _0x58c0d3 = undefined;
                    _0x58c0d3 = _0x17c062;
                    if (Math[_0x58c0d3(494)](Math[_0x58c0d3(571)]() * 200) + 100 <= _0x2cb1d4) {
                      _0x2188d6 = {
                        userAgent: navigator.userAgent,
                        use: parseInt(_0x2cb1d4),
                        actual: _0x2cb1d4
                      };
                      _0x3d8f6e.next = 8;
                      return _0x1f9890()[_0x420109(443)](""[_0x420109(527)](_0x246c66).concat(_0x1e4b71), {
                        number: _0x2188d6[_0x420109(489)]
                      }, {
                        headers: _0x5064cc({}, _0x40c9f1("pgmqv"), _0x49bf46)
                      });
                    }
                    _0x3d8f6e.next = 17;
                    break;
                  case 8:
                    if (!(_0x1474a2 = _0x3d8f6e[_0x420109(468)])[_0x420109(441)].code || _0x1474a2.data.code != 1) {
                      _0x3d8f6e[_0x420109(604)] = 13;
                      break;
                    }
                    _0x2cb1d4 = 0;
                    _0x3d8f6e[_0x420109(604)] = 17;
                    break;
                  case 13:
                    _0x1474a2 = new Date()[_0x420109(620)]();
                    window[_0x420109(634)].setItem(_0x30a602, _0x1474a2 - 43200000);
                    throw ""[_0x420109(527)](_0x5c9e5f.j4(_0x420109(502), 3), " ")[_0x420109(527)](_0x40c9f1("11<urvvj") + _0x40c9f1(_0x17c062(617)));
                  case 17:
                    window[_0x420109(565)].setItem(_0x40c9f1("{epgwsgtHpikugf"), _0x2cb1d4);
                  case 18:
                  case _0x420109(496):
                    return _0x3d8f6e[_0x420109(500)]();
                }
              }
            }, _0x38ef0a);
          })))[_0x1c58ab(558)](this, arguments);
        }
        if (window.OffscreenCanvas) {
          new OffscreenCanvas(1, 1);
        } else {
          document[_0x17c062(455)](_0x17c062(480));
        }
        var _0x1294a6;
        var _0x251933;
        var _0x2e78f5;
        var _0x1d73a3;
        var _0x3d954a;
        var _0x24e5e9;
        var _0x533a74;
        var _0x5d0927;
        var _0x43b3a4;
        var _0x1e651e;
        var _0x5957d7;
        var _0x3abb5f;
        var _0x592c64;
        var _0x526818;
        var _0x1d14b2;
        var _0x4607e1;
        var _0x5becb7;
        _0xae3fcb(_0x5634f7, [{
          key: (_0x5becb7 = _0x17c062)(514),
          value: (_0x4133c6 = _0x5becb7, _0x4607e1 = _0x4a4b23(_0x2af9e7()[_0x4133c6(454)](function _0x215449() {
            return _0x2af9e7().wrap(function (_0x19de6f) {
              for (var _0x272de1 = _0x308f45;;) {
                switch (_0x19de6f[_0x272de1(611)] = _0x19de6f[_0x272de1(604)]) {
                  case 0:
                    _0x5634f7.paper[_0x272de1(460)][_0x272de1(495)](function (_0x30810b) {
                      var _0x5a54f3;
                      var _0x47aff1 = _0x272de1;
                      _0x5a54f3 = "qbmf";
                      _0x30810b.clear();
                      _0x30810b[_0x47aff1(580)]();
                    });
                    _0x5634f7[_0x272de1(591)][_0x272de1(460)] = [];
                    window[_0x272de1(634)][_0x272de1(471)](_0x30a602, "" + new Date().getTime());
                    if (this.sKu && _0x4d5890[_0x272de1(483)].length <= 0) {
                      _0x19de6f.next = 6;
                      return this[_0x272de1(538)](this[_0x272de1(450)]);
                    }
                    _0x19de6f[_0x272de1(604)] = 7;
                    break;
                  case 6:
                    _0x4d5890[_0x272de1(483)] = _0x19de6f[_0x272de1(468)];
                  case 7:
                    if (_0x4d5890[_0x272de1(483)].length <= 0) {
                      throw _0x272de1(583);
                    }
                    _0x19de6f.next = 9;
                    break;
                  case 9:
                    this[_0x272de1(528)]();
                    _0x19de6f.next = 12;
                    return this[_0x272de1(579)]();
                  case 12:
                    if (this[_0x272de1(526)]) {
                      this[_0x272de1(503)]();
                    }
                    if (this[_0x272de1(628)]) {
                      this.onload();
                    }
                    this.load = true;
                  case 15:
                  case _0x272de1(496):
                    return _0x19de6f[_0x272de1(500)]();
                }
              }
            }, _0x215449, this);
          })), function () {
            return _0x4607e1.apply(this, arguments);
          })
        }, {
          key: "destroy",
          value: (_0x1d14b2 = _0x4a4b23(_0x2af9e7().mark(function _0x51059b() {
            var _0x1c3e68 = 9;
            var _0xe996e1 = _0x308f45;
            _0x1c3e68 = 15;
            return _0x2af9e7()[_0xe996e1(582)](function (_0x54f7c9) {
              for (var _0x3ccc57 = _0xe996e1;;) {
                switch (_0x54f7c9[_0x3ccc57(611)] = _0x54f7c9[_0x3ccc57(604)]) {
                  case 0:
                    _0x5634f7.paper.projects[_0x3ccc57(495)](function (_0x2b1dd7) {
                      _0x2b1dd7[_0x3ccc57(536)]();
                      _0x2b1dd7.remove();
                    });
                    _0x5634f7.paper[_0x3ccc57(460)] = [];
                    _0x4d5890.XTUtuList = [];
                    this[_0x3ccc57(586)][_0x3ccc57(541)] = "";
                    this[_0x3ccc57(636)] = "";
                    this[_0x3ccc57(449)] = null;
                    this.preCanvas = null;
                    this[_0x3ccc57(575)] = null;
                    this[_0x3ccc57(545)] = {};
                    this[_0x3ccc57(450)] = [];
                    _0x4d5890[_0x3ccc57(598)] = null;
                  case 11:
                  case "end":
                    return _0x54f7c9[_0x3ccc57(500)]();
                }
              }
            }, _0x51059b, this);
          })), function () {
            return _0x1d14b2.apply(this, arguments);
          })
        }, {
          key: "checkb",
          value: (_0x592c64 = _0x5becb7, _0x526818 = _0x4a4b23(_0x2af9e7()[_0x592c64(454)](function _0x43638e() {
            var _0xaf379;
            var _0x53fa1e = _0x592c64;
            var _0x3c301c = this;
            return _0x2af9e7()[_0x53fa1e(582)](function (_0xc54f45) {
              for (var _0x3de11e = _0x53fa1e;;) {
                switch (_0xc54f45[_0x3de11e(611)] = _0xc54f45[_0x3de11e(604)]) {
                  case 0:
                    if (_0x1f24d8(this[_0x3de11e(636)], _0x4d5890.token)) {
                      _0xc54f45.next = 2;
                      break;
                    }
                    return _0xc54f45[_0x3de11e(560)](_0x3de11e(437));
                  case 2:
                    (_0xaf379 = document.createElement(_0x3de11e(509))).className = _0x3de11e(503);
                    _0xaf379[_0x3de11e(588)][_0x3de11e(563)] = _0x3de11e(562)[_0x3de11e(527)](_0x4d5890[_0x3de11e(436)][_0x3de11e(610)], ")");
                    _0xaf379[_0x3de11e(588)][_0x3de11e(481)] = "center";
                    _0xaf379[_0x3de11e(588)][_0x3de11e(452)] = _0x3de11e(606);
                    _0xaf379[_0x3de11e(588)][_0x3de11e(473)] = "60% 60%";
                    _0xaf379[_0x3de11e(588)][_0x3de11e(465)] = "rgba(0,0,0,0)";
                    _0xaf379[_0x3de11e(588)][_0x3de11e(569)] = _0x3de11e(557);
                    _0xaf379[_0x3de11e(588)][_0x3de11e(646)] = _0x3de11e(566);
                    _0xaf379[_0x3de11e(588)][_0x3de11e(602)] = "50px";
                    _0xaf379.style[_0x3de11e(551)] = _0x3de11e(522);
                    _0xaf379[_0x3de11e(588)][_0x3de11e(511)] = _0x3de11e(612);
                    _0xaf379[_0x3de11e(588)][_0x3de11e(475)] = "10px";
                    _0xaf379.style[_0x3de11e(508)] = "10";
                    _0xaf379[_0x3de11e(588)].padding = _0x3de11e(543);
                    _0xaf379[_0x3de11e(632)] = _0x4a4b23(_0x2af9e7()[_0x3de11e(454)](function _0x14776f() {
                      var _0x1b6d53;
                      var _0x294dfd;
                      return _0x2af9e7().wrap(function (_0x4cf14b) {
                        for (var _0x5dbdd2 = _0x308f45;;) {
                          switch (_0x4cf14b[_0x5dbdd2(611)] = _0x4cf14b[_0x5dbdd2(604)]) {
                            case 0:
                              _0x4cf14b.next = 2;
                              return _0x3c301c[_0x5dbdd2(627)]();
                            case 2:
                              _0x1b6d53 = _0x4cf14b.sent;
                              _0x294dfd = [];
                              _0x1b6d53[_0x5dbdd2(495)](function (_0x4e1eaf) {
                                var _0x4ed2b1 = _0x5dbdd2;
                                var _0xfc4b93 = {
                                  [_0x4ed2b1(550)]: _0x4e1eaf
                                };
                                _0x294dfd[_0x4ed2b1(548)](_0xfc4b93);
                              });
                              new _0x21e3b2(_0x294dfd, {
                                element: _0x3c301c[_0x5dbdd2(435)]
                              })[_0x5dbdd2(514)]();
                            case 7:
                            case "end":
                              return _0x4cf14b.stop();
                          }
                        }
                      }, _0x14776f);
                    }));
                  case 19:
                  case _0x3de11e(496):
                    return _0xc54f45[_0x3de11e(500)]();
                }
              }
            }, _0x43638e, this);
          })), function () {
            return _0x526818.apply(this, arguments);
          })
        }, {
          key: _0x5becb7(627),
          value: (_0x5957d7 = _0x5becb7, _0x3abb5f = _0x4a4b23(_0x2af9e7()[_0x5957d7(454)](function _0x50a546(_0x117362) {
            var _0x407c01;
            var _0x3078fa;
            var _0x34944f;
            var _0x57ea48;
            var _0x551505;
            var _0xe7f19d;
            var _0x3b41eb;
            var _0x34fbb7;
            var _0x59f98b = _0x5957d7;
            return _0x2af9e7()[_0x59f98b(582)](function (_0x4a186c) {
              for (var _0x1068bd = _0x59f98b;;) {
                switch (_0x4a186c[_0x1068bd(611)] = _0x4a186c[_0x1068bd(604)]) {
                  case 0:
                    _0x407c01 = 1000;
                    _0x3078fa = [];
                    if (this[_0x1068bd(564)]) {
                      _0x4a186c[_0x1068bd(604)] = 7;
                      break;
                    }
                    if (typeof _0x117362 == "number") {
                      return _0x4a186c[_0x1068bd(560)]("return", _0x4d5890[_0x1068bd(483)][_0x117362] ? [_0x4d5890.XTUtuList[_0x117362][_0x1068bd(550)]] : []);
                    }
                    _0x4a186c[_0x1068bd(604)] = 5;
                    break;
                  case 5:
                    _0x4d5890.XTUtuList[_0x1068bd(495)](function (_0x118ee8) {
                      var _0xd640a0;
                      var _0x18d05e = _0x1068bd;
                      _0xd640a0 = 10;
                      _0x3078fa[_0x18d05e(548)](_0x118ee8[_0x18d05e(550)]);
                    });
                    return _0x4a186c[_0x1068bd(560)](_0x1068bd(437), _0x3078fa);
                  case 7:
                    if (this[_0x1068bd(647)] == _0x1068bd(430)) {
                      _0x34944f = _0x4d5890[_0x1068bd(483)];
                      if (typeof _0x117362 == _0x1068bd(531) && _0x4d5890.XTUtuList[_0x117362]) {
                        _0x34944f = [_0x4d5890[_0x1068bd(483)][_0x117362]];
                      }
                      _0x4a186c[_0x1068bd(604)] = 12;
                      return this.comdsae({
                        renderList: _0x34944f
                      });
                    }
                    _0x4a186c[_0x1068bd(604)] = 14;
                    break;
                  case 12:
                    _0x34944f[_0x1068bd(495)](function (_0xd6bf47) {
                      _0x3078fa[_0x1068bd(548)](_0xd6bf47.renderUrl);
                    });
                    return _0x4a186c[_0x1068bd(560)](_0x1068bd(437), _0x3078fa);
                  case 14:
                    _0x57ea48 = true;
                    _0x551505 = null;
                    _0xe7f19d = _0x5634f7[_0x1068bd(591)][_0x1068bd(460)];
                    if (typeof _0x117362 == _0x1068bd(531) && _0x4d5890[_0x1068bd(483)][_0x117362]) {
                      _0x57ea48 = false;
                      _0xe7f19d = [_0xe7f19d[_0x551505 = _0x117362]];
                    }
                    _0x4a186c.t0 = _0x2af9e7().keys(this[_0x1068bd(545)]);
                  case 19:
                    if ((_0x4a186c.t1 = _0x4a186c.t0())[_0x1068bd(442)]) {
                      _0x4a186c.next = 25;
                      break;
                    }
                    _0x3b41eb = _0x4a186c.t1[_0x1068bd(513)];
                    _0x4a186c[_0x1068bd(604)] = 23;
                    return this[_0x1068bd(515)]({
                      canvas: this[_0x1068bd(545)][_0x3b41eb][_0x1068bd(480)],
                      layers: _0x3b41eb,
                      renderAll: _0x57ea48,
                      index: _0x551505,
                      neibu: true
                    });
                  case 23:
                    _0x4a186c[_0x1068bd(604)] = 19;
                    break;
                  case 25:
                    _0x34fbb7 = new _0x5634f7.paper[_0x1068bd(539)](new _0x5634f7[_0x1068bd(591)].Size(_0x407c01, _0x407c01));
                    _0xe7f19d[_0x1068bd(495)](function (_0x381684) {
                      var _0x5de724 = _0x1068bd;
                      var _0x42064f = _0x381684.getItem({
                        name: _0x5de724(556)
                      });
                      var _0x5c9394 = _0x42064f[_0x5de724(512)][_0x5de724(646)];
                      var _0x358b99 = _0x42064f[_0x5de724(512)].height;
                      var _0x5594da = _0x5c9394 / _0x358b99;
                      _0x42064f.bounds[_0x5de724(646)] = _0x407c01;
                      _0x42064f[_0x5de724(512)][_0x5de724(602)] = _0x42064f[_0x5de724(512)][_0x5de724(646)] / _0x5594da;
                      _0x5594da = (_0x381684 = _0x42064f[_0x5de724(641)]({
                        raster: _0x34fbb7,
                        insert: false
                      })).canvas.toDataURL("image/jpeg", 0.7);
                      _0x42064f[_0x5de724(512)][_0x5de724(646)] = _0x5c9394;
                      _0x42064f.bounds.height = _0x358b99;
                      _0x381684[_0x5de724(580)]();
                      _0x3078fa[_0x5de724(548)](_0x5594da);
                    });
                    return _0x4a186c[_0x1068bd(560)](_0x1068bd(437), _0x3078fa);
                  case 28:
                  case _0x1068bd(496):
                    return _0x4a186c.stop();
                }
              }
            }, _0x50a546, this);
          })), function (_0x4b26ed) {
            return _0x3abb5f[_0x5957d7(558)](this, arguments);
          })
        }, {
          key: "getSvgList",
          value: (_0x43b3a4 = _0x5becb7, _0x1e651e = _0x4a4b23(_0x2af9e7()[_0x43b3a4(454)](function _0x2d588b(_0x185503) {
            var _0x371994;
            var _0x46317c;
            var _0x487868;
            var _0x19c518 = _0x43b3a4;
            return _0x2af9e7()[_0x19c518(582)](function (_0x1b5c5e) {
              for (var _0x1be6e9 = _0x19c518;;) {
                switch (_0x1b5c5e[_0x1be6e9(611)] = _0x1b5c5e[_0x1be6e9(604)]) {
                  case 0:
                    _0x1b5c5e[_0x1be6e9(604)] = 2;
                    return _0x1f9890()[_0x1be6e9(596)](""[_0x1be6e9(527)](_0x246c66)[_0x1be6e9(527)](_0x1cfdf4)[_0x1be6e9(527)](_0x185503[_0x1be6e9(540)](",")).concat(_0x77ce32)[_0x1be6e9(527)](this[_0x1be6e9(636)]), {
                      headers: _0x5064cc({}, _0x2f33f5, _0x4d5890[_0x1be6e9(598)])
                    });
                  case 2:
                    if ((_0x371994 = _0x1b5c5e[_0x1be6e9(468)])[_0x1be6e9(441)][_0x1be6e9(501)] && _0x371994[_0x1be6e9(441)][_0x1be6e9(501)] != 0) {
                      _0x1b5c5e[_0x1be6e9(604)] = 5;
                      break;
                    }
                    throw _0x371994[_0x1be6e9(441)][_0x1be6e9(434)];
                  case 5:
                    _0x46317c = _0x371994[_0x1be6e9(441)].data[_0x1be6e9(584)];
                    _0x487868 = [];
                    _0x46317c.forEach(function (_0x129ff2) {
                      var _0xbe2b6f = 9;
                      var _0x553a69 = {
                        title: _0x129ff2[_0x1be6e9(626)],
                        psd_svg: _0x129ff2[_0x1be6e9(626)],
                        sku: _0x129ff2[_0x1be6e9(597)]
                      };
                      _0xbe2b6f = 1;
                      _0x487868.push(_0x553a69);
                    });
                    return _0x1b5c5e[_0x1be6e9(560)]("return", _0x487868);
                  case 9:
                  case _0x1be6e9(496):
                    return _0x1b5c5e[_0x1be6e9(500)]();
                }
              }
            }, _0x2d588b, this);
          })), function (_0x30665b) {
            return _0x1e651e[_0x43b3a4(558)](this, arguments);
          })
        }, {
          key: _0x5becb7(528),
          value: function () {
            var _0x368ff9;
            var _0x55086f = _0x5becb7;
            var _0x11e9d1 = this;
            if (_0x1f24d8(this.Autoken, _0x4d5890[_0x55086f(598)])) {
              (_0x368ff9 = new _0x4692ca(_0x4d5890.XTUtuList, {
                baseWidth: this[_0x55086f(497)],
                baseHeight: this[_0x55086f(497)],
                element: this.element,
                onchange: function (_0x4dc0ca) {
                  var _0x15ab2e = _0x55086f;
                  _0x4dc0ca = new CustomEvent(_0x15ab2e(603), {
                    detail: {
                      index: _0x4dc0ca
                    },
                    bubbles: true,
                    cancelable: true
                  });
                  document[_0x15ab2e(445)](_0x4dc0ca);
                  if (_0x11e9d1.preCanvas) {
                    for (var _0x415d78 in _0x11e9d1[_0x15ab2e(545)]) {
                      _0x11e9d1[_0x15ab2e(515)]({
                        canvas: _0x11e9d1[_0x15ab2e(545)][_0x415d78][_0x15ab2e(480)],
                        layers: _0x415d78,
                        neibu: true
                      });
                      if (_0x11e9d1.renderType == _0x15ab2e(430)) {
                        break;
                      }
                    }
                  }
                }
              })).int();
              this[_0x55086f(554)] = _0x368ff9[_0x55086f(559)];
            }
          }
        }, {
          key: _0x5becb7(579),
          value: (_0x533a74 = _0x5becb7, _0x5d0927 = _0x4a4b23(_0x2af9e7()[_0x533a74(454)](function _0x173662() {
            var _0x55a4de;
            var _0x4d4355;
            var _0x38ffd7;
            var _0x5b1362;
            var _0x991f71;
            var _0x44be4c;
            var _0x414d3c;
            var _0x226448;
            var _0x5413a1 = _0x533a74;
            return _0x2af9e7()[_0x5413a1(582)](function (_0x2af7f6) {
              for (var _0x293c96 = _0x5413a1;;) {
                switch (_0x2af7f6.prev = _0x2af7f6[_0x293c96(604)]) {
                  case 0:
                    if (_0x1f24d8(this.Autoken, _0x4d5890[_0x293c96(598)])) {
                      _0x2af7f6.next = 2;
                      break;
                    }
                    return _0x2af7f6.abrupt(_0x293c96(437));
                  case 2:
                    _0x55a4de = _0x4d5890[_0x293c96(483)];
                    _0x4d4355 = 0;
                  case 4:
                    if (!(_0x4d4355 < _0x55a4de[_0x293c96(561)])) {
                      _0x2af7f6[_0x293c96(604)] = 33;
                      break;
                    }
                    _0x38ffd7 = _0x55a4de[_0x4d4355];
                    if (this[_0x293c96(647)] == _0x293c96(430)) {
                      return _0x2af7f6[_0x293c96(560)](_0x293c96(433), 30);
                    }
                    _0x2af7f6[_0x293c96(604)] = 8;
                    break;
                  case 8:
                    _0x5634f7[_0x293c96(591)][_0x293c96(440)](document[_0x293c96(542)](`XTU_lo_${_0x38ffd7[_0x293c96(597)]}`));
                    _0x5b1362 = _0x5634f7[_0x293c96(591)][_0x293c96(460)][_0x4d4355][_0x293c96(478)]();
                    _0x5634f7.paper[_0x293c96(460)][_0x4d4355][_0x293c96(463)] = this[_0x293c96(487)]();
                    _0x2af7f6[_0x293c96(604)] = 13;
                    return function () {
                      return _0x2b4a7a[_0x30e2e1(387)](this, arguments);
                    }(_0x38ffd7.psd_svg || _0x38ffd7[_0x293c96(626)]);
                  case 13:
                    if (_0x991f71 = _0x2af7f6[_0x293c96(468)]) {
                      _0x2af7f6[_0x293c96(604)] = 16;
                      break;
                    }
                    return _0x2af7f6[_0x293c96(560)](_0x293c96(433), 30);
                  case 16:
                    _0x38ffd7[_0x293c96(637)] = _0x991f71[_0x293c96(607)];
                    _0x38ffd7[_0x293c96(446)] = _0x991f71[_0x293c96(446)];
                    _0x38ffd7[_0x293c96(625)] = _0x991f71.wrapWidth;
                    _0x38ffd7[_0x293c96(613)] = _0x991f71[_0x293c96(613)];
                    (_0x44be4c = _0x4331e5()[_0x293c96(460)][_0x4d4355][_0x293c96(600)](_0x38ffd7[_0x293c96(446)], {
                      insert: true
                    }))[_0x293c96(551)] = _0x5b1362[_0x293c96(567)];
                    _0x414d3c = _0x44be4c[_0x293c96(512)][_0x293c96(646)];
                    _0x226448 = _0x44be4c[_0x293c96(512)].height;
                    _0x226448 = _0x414d3c / _0x226448;
                    _0x44be4c[_0x293c96(574)](_0x226448 > 1 ? _0x5b1362[_0x293c96(512)][_0x293c96(646)] / _0x44be4c[_0x293c96(512)][_0x293c96(646)] : _0x5b1362[_0x293c96(512)][_0x293c96(646)] / _0x44be4c[_0x293c96(512)][_0x293c96(602)]);
                    _0x44be4c[_0x293c96(651)] = _0x293c96(556);
                    _0x44be4c[_0x293c96(448)]({
                      className: _0x293c96(539)
                    })[_0x293c96(495)](function (_0x34f400) {
                      var _0x4dafb5 = _0x293c96;
                      var _0x166b06 = new _0x5634f7[_0x4dafb5(591)][_0x4dafb5(539)]({
                        crossOrigin: _0x4dafb5(447),
                        source: _0x34f400[_0x4dafb5(444)],
                        insert: false
                      });
                      _0x166b06[_0x4dafb5(643)](_0x34f400[_0x4dafb5(458)]);
                      _0x166b06.matrix = _0x34f400.matrix;
                      _0x166b06[_0x4dafb5(651)] = _0x34f400[_0x4dafb5(651)];
                      _0x166b06.blendMode = _0x34f400.blendMode;
                      _0x166b06.opacity = _0x34f400.opacity;
                      _0x34f400.replaceWith(_0x166b06);
                      _0x166b06[_0x4dafb5(438)][_0x4dafb5(631)]();
                    });
                    _0x5b1362[_0x293c96(631)]();
                  case 30:
                    _0x4d4355++;
                    _0x2af7f6.next = 4;
                    break;
                  case 33:
                  case _0x293c96(496):
                    return _0x2af7f6[_0x293c96(500)]();
                }
              }
            }, _0x173662, this);
          })), function () {
            return _0x5d0927[_0x533a74(558)](this, arguments);
          })
        }, {
          key: "uptainse",
          value: function (_0x52aa07) {
            var _0x46e2b7 = 12;
            var _0x3590bc = _0x5becb7;
            _0x46e2b7 = 7;
            this[_0x3590bc(615)] = document[_0x3590bc(542)](_0x3590bc(470));
            if (!this[_0x3590bc(615)]) {
              this.loadingDiv = document[_0x3590bc(455)](_0x3590bc(509));
              this[_0x3590bc(615)].id = _0x3590bc(470);
              this[_0x3590bc(615)][_0x3590bc(588)].width = _0x3590bc(498);
              this[_0x3590bc(615)][_0x3590bc(588)][_0x3590bc(602)] = "100%";
              this.loadingDiv[_0x3590bc(588)].top = "0";
              this[_0x3590bc(615)].style.left = "0";
              this[_0x3590bc(615)][_0x3590bc(588)][_0x3590bc(551)] = _0x3590bc(522);
              this[_0x3590bc(615)][_0x3590bc(588)][_0x3590bc(508)] = "10";
              this[_0x3590bc(615)][_0x3590bc(588)][_0x3590bc(465)] = _0x3590bc(518);
              this.loadingDiv[_0x3590bc(541)] = _0x3590bc(492);
              this.element[_0x3590bc(469)](this[_0x3590bc(615)]);
            }
            this[_0x3590bc(615)][_0x3590bc(588)][_0x3590bc(457)] = _0x3590bc(_0x52aa07 ? 453 : 517);
          }
        }, {
          key: "comdsae",
          value: (_0x3d954a = _0x5becb7, _0x24e5e9 = _0x4a4b23(_0x2af9e7()[_0x3d954a(454)](function _0x42a70a(_0x1153e7) {
            var _0x5881b4;
            var _0x160a84;
            var _0x29ceaf;
            var _0x342e3f;
            var _0x10ee28;
            var _0x2470df;
            var _0x1bf403;
            var _0x59c165;
            var _0x2b013d;
            var _0x4a9849;
            var _0x28893d;
            var _0x5ada2f;
            var _0x3646ca;
            var _0x1b9817 = this;
            return _0x2af9e7().wrap(function (_0xd5f465) {
              for (var _0x19b9b8 = _0x308f45;;) {
                switch (_0xd5f465[_0x19b9b8(611)] = _0xd5f465[_0x19b9b8(604)]) {
                  case 0:
                    _0x5881b4 = _0x1153e7[_0x19b9b8(529)];
                    this[_0x19b9b8(595)](true);
                    _0xd5f465.t0 = _0x2af9e7()[_0x19b9b8(431)](this.commandJSON);
                  case 3:
                    if ((_0xd5f465.t1 = _0xd5f465.t0())[_0x19b9b8(442)]) {
                      _0xd5f465[_0x19b9b8(604)] = 12;
                      break;
                    }
                    _0x160a84 = _0xd5f465.t1[_0x19b9b8(513)];
                    if (this.commandJSON[_0x160a84][_0x19b9b8(499)]) {
                      _0xd5f465[_0x19b9b8(604)] = 10;
                      break;
                    }
                    _0xd5f465.next = 8;
                    return _0x2144b9({
                      url: ""[_0x19b9b8(527)](_0x246c66, _0x19b9b8(505)),
                      canvas: this[_0x19b9b8(545)][_0x160a84].canvas,
                      headers: _0x5064cc({}, _0x2f33f5, _0x4d5890.token)
                    });
                  case 8:
                    _0x29ceaf = _0xd5f465[_0x19b9b8(468)];
                    this[_0x19b9b8(545)][_0x160a84].url = _0x29ceaf.data[_0x19b9b8(441)][0].url;
                  case 10:
                    _0xd5f465[_0x19b9b8(604)] = 3;
                    break;
                  case 12:
                    _0x342e3f = [];
                    _0x10ee28 = function (_0x39d993) {
                      var _0x2387e0 = _0x19b9b8;
                      _0x39d993[_0x2387e0(524)](",")[_0x2387e0(495)](function (_0x53853b) {
                        var _0x557679 = _0x2387e0;
                        if (!_0x342e3f.some(function (_0x5969d) {
                          return _0x5969d[_0x308f45(651)] == _0x53853b;
                        })) {
                          _0x342e3f[_0x557679(548)]({
                            name: _0x53853b,
                            content: _0x1b9817.commandJSON[_0x39d993].url
                          });
                        }
                      });
                    };
                    for (_0x2470df in this[_0x19b9b8(545)]) {
                      _0x10ee28(_0x2470df);
                    }
                    _0x1bf403 = _0x55cc4d(_0x4d5890[_0x19b9b8(483)]);
                    try {
                      for (_0x1bf403.s(); !(_0x59c165 = _0x1bf403.n())[_0x19b9b8(442)];) {
                        if ((_0x2b013d = _0x59c165[_0x19b9b8(513)])[_0x19b9b8(507)] && _0x2b013d.xmrToken[_0x19b9b8(444)]) {
                          _0x2b013d.xmrToken[_0x19b9b8(444)].cancel();
                        }
                      }
                    } catch (_0x29d4f2) {
                      _0x1bf403.e(_0x29d4f2);
                    } finally {
                      _0x1bf403.f();
                    }
                    _0x4a9849 = [];
                    _0x28893d = _0x55cc4d(_0x5881b4);
                    _0xd5f465[_0x19b9b8(611)] = 19;
                    _0x3646ca = function () {
                      var _0x506868 = _0x19b9b8;
                      var _0x34a828 = _0x5ada2f[_0x506868(513)];
                      if (_0xf40819 = document.getElementById(_0x506868(568)[_0x506868(527)](_0x34a828[_0x506868(597)]))) {
                        _0xf40819[_0x506868(588)][_0x506868(508)] = -1;
                      }
                      if (_0x34a828.renderUrl) {
                        return _0x506868(433);
                      }
                      _0x4f8752 = _0x221e29;
                      var _0x45fef5 = _0x1f9890()[_0x4f8752(422)][_0x4f8752(402)]();
                      var _0x2af8c8 = new Date().getTime() + " " + Math[_0x506868(571)](1000000);
                      _0x34a828[_0x506868(507)] = {
                        token: _0x45fef5[_0x506868(598)],
                        source: _0x45fef5,
                        key: _0x2af8c8
                      };
                      var _0x3abe58;
                      var _0x25e3ce;
                      var _0x2c42a7;
                      var _0x4f8752;
                      var _0x385c86;
                      _0x4f8752 = (_0x2c42a7 = {
                        url: `${_0x246c66}${_0x506868(593)}${_0x1b9817[_0x506868(636)]}`,
                        data: {
                          psd_sku: _0x34a828[_0x506868(597)],
                          data: _0x342e3f
                        },
                        headers: (_0x5064cc(_0x385c86 = {}, _0x2f33f5, _0x4d5890[_0x506868(598)]), _0x5064cc(_0x385c86, "source", _0x506868(451)), _0x385c86),
                        cancelToken: _0x34a828[_0x506868(507)] ? _0x34a828[_0x506868(507)][_0x506868(598)] : ""
                      })[(_0xf40819 = _0x221e29)(424)];
                      _0x45fef5 = _0x2c42a7[_0xf40819(412)];
                      _0x2af8c8 = _0x2c42a7[_0xf40819(438)];
                      _0x385c86 = _0x2c42a7[_0xf40819(420)];
                      _0x2c42a7 = {};
                      if (_0x385c86) {
                        _0x2c42a7[_0xf40819(420)] = _0x385c86;
                      }
                      var _0xf40819 = _0x1f9890()[_0xf40819(434)](_0x4f8752, _0x4669ce({}, _0x45fef5), _0x4669ce({
                        headers: _0x4669ce({}, _0x2af8c8)
                      }, _0x2c42a7))[_0xf40819(416)](function (_0x7d0cf) {})[_0x506868(472)]((_0x3abe58 = _0x506868, _0x25e3ce = _0x4a4b23(_0x2af9e7()[_0x3abe58(454)](function _0x1f4db8(_0x3d4222) {
                        var _0x31af1f;
                        var _0x56dd20;
                        var _0x4671cd;
                        var _0x14ae79;
                        var _0x573b89;
                        var _0x317f36;
                        var _0x108360;
                        var _0x1806fa;
                        var _0x4e860b = _0x3abe58;
                        return _0x2af9e7()[_0x4e860b(582)](function (_0x3200eb) {
                          for (var _0x808ec4 = _0x4e860b;;) {
                            switch (_0x3200eb[_0x808ec4(611)] = _0x3200eb[_0x808ec4(604)]) {
                              case 0:
                                if (_0x3d4222 && _0x3d4222[_0x808ec4(441)][_0x808ec4(441)][_0x808ec4(549)]) {
                                  _0x1806fa = `${_0x3d4222[_0x808ec4(441)].data[_0x808ec4(549)]}`;
                                  if ((_0x573b89 = _0x4d5890[_0x808ec4(483)][_0x808ec4(432)](function (_0x5e3128) {
                                    var _0x1d5994 = _0x808ec4;
                                    return _0x5e3128.sku == _0x34a828[_0x1d5994(597)];
                                  })) != -1) {
                                    _0x4d5890[_0x808ec4(483)][_0x573b89][_0x808ec4(614)] = _0x1806fa;
                                  }
                                  _0x31af1f = document[_0x808ec4(542)](_0x808ec4(477)[_0x808ec4(527)](_0x34a828.sku));
                                  _0x56dd20 = _0x31af1f.getContext("2d");
                                  _0x317f36 = Number(_0x3d4222[_0x808ec4(441)][_0x808ec4(441)].width);
                                  _0x108360 = Number(_0x3d4222[_0x808ec4(441)][_0x808ec4(441)][_0x808ec4(602)]);
                                  _0x4671cd = _0x317f36 / _0x108360;
                                  _0x3200eb[_0x808ec4(604)] = 11;
                                  return _0x418ec2(_0x1806fa);
                                }
                                _0x3200eb[_0x808ec4(604)] = 18;
                                break;
                              case 11:
                                _0x14ae79 = _0x3200eb[_0x808ec4(468)];
                                _0x573b89 = _0x31af1f[_0x808ec4(646)];
                                _0x317f36 = _0x31af1f[_0x808ec4(602)];
                                _0x1806fa = _0x108360 = 0;
                                if (_0x4671cd > 1) {
                                  _0x317f36 = _0x573b89 / _0x4671cd;
                                  _0x108360 = (_0x31af1f[_0x808ec4(602)] - _0x317f36) / 2;
                                } else {
                                  _0x573b89 = _0x317f36 * _0x4671cd;
                                  _0x1806fa = (_0x31af1f[_0x808ec4(646)] - _0x573b89) / 2;
                                }
                                _0x56dd20[_0x808ec4(601)](_0x14ae79, _0x1806fa, _0x108360, _0x573b89, _0x317f36);
                              case 18:
                              case _0x808ec4(496):
                                return _0x3200eb[_0x808ec4(500)]();
                            }
                          }
                        }, _0x1f4db8);
                      })), function (_0x3d4252) {
                        return _0x25e3ce[_0x3abe58(558)](this, arguments);
                      }));
                      _0x4a9849[_0x506868(548)](_0xf40819);
                    };
                    _0x28893d.s();
                  case 22:
                    if ((_0x5ada2f = _0x28893d.n())[_0x19b9b8(442)]) {
                      _0xd5f465[_0x19b9b8(604)] = 28;
                      break;
                    }
                    if (_0x3646ca() === _0x19b9b8(433)) {
                      return _0xd5f465.abrupt(_0x19b9b8(433), 26);
                    }
                    _0xd5f465[_0x19b9b8(604)] = 26;
                    break;
                  case 26:
                    _0xd5f465[_0x19b9b8(604)] = 22;
                    break;
                  case 28:
                    _0xd5f465[_0x19b9b8(604)] = 33;
                    break;
                  case 30:
                    _0xd5f465[_0x19b9b8(611)] = 30;
                    _0xd5f465.t2 = _0xd5f465.catch(19);
                    _0x28893d.e(_0xd5f465.t2);
                  case 33:
                    _0xd5f465[_0x19b9b8(611)] = 33;
                    _0x28893d.f();
                    return _0xd5f465[_0x19b9b8(466)](33);
                  case 36:
                    _0xd5f465[_0x19b9b8(604)] = 38;
                    return Promise[_0x19b9b8(555)](_0x4a9849);
                  case 38:
                    this[_0x19b9b8(595)](false);
                  case 39:
                  case _0x19b9b8(496):
                    return _0xd5f465[_0x19b9b8(500)]();
                }
              }
            }, _0x42a70a, this, [[19, 30, 33, 36]]);
          })), function (_0x272a1b) {
            return _0x24e5e9[_0x3d954a(558)](this, arguments);
          })
        }, {
          key: "qinchurul",
          value: function (_0x16d8e2) {
            var _0x514c59 = _0x5becb7;
            _0x4d5890[_0x514c59(483)] = _0x4d5890[_0x514c59(483)][_0x514c59(638)](function (_0x4729b1, _0x3271a7) {
              var _0x4a2748 = 5;
              var _0x4d1c97 = _0x514c59;
              _0x4a2748 = "denn";
              if (_0x16d8e2 != null && typeof _0x16d8e2 == _0x4d1c97(531)) {
                if (_0x16d8e2 == _0x3271a7) {
                  _0x4729b1.renderUrl = null;
                }
              } else {
                _0x4729b1[_0x4d1c97(614)] = null;
              }
              return _0x4729b1;
            });
          }
        }, {
          key: _0x5becb7(552),
          value: (_0x2e78f5 = _0x5becb7, _0x1d73a3 = _0x4a4b23(_0x2af9e7()[_0x2e78f5(454)](function _0x5d61eb(_0x3d5333) {
            var _0x558bbe;
            var _0xd49837;
            var _0xf30cce;
            var _0x3f6374;
            var _0x1ca51e;
            var _0x39cf43;
            var _0x5d09eb;
            var _0x1a0168;
            var _0x2c8024;
            var _0x5ae0af;
            var _0x96da5a = _0x2e78f5;
            return _0x2af9e7()[_0x96da5a(582)](function (_0xe3060) {
              for (var _0x37ba69 = _0x96da5a;;) {
                switch (_0xe3060[_0x37ba69(611)] = _0xe3060.next) {
                  case 0:
                    _0x39cf43 = function (_0xe143fb) {
                      var _0x1eb1aa;
                      var _0x134ea8 = _0x37ba69;
                      var _0x1bb5b5 = _0xe143fb.name;
                      var _0x5b2037 = _0xe143fb.content;
                      if (JSON[_0x134ea8(621)](_0xd49837) === "{}") {
                        return false;
                      }
                      for (_0x1eb1aa in _0xd49837) {
                        if (_0xd49837[_0x1eb1aa] == _0x5b2037) {
                          _0xd49837[_0x1eb1aa + "," + _0x1bb5b5] = _0x5b2037;
                          delete _0xd49837[_0x1eb1aa];
                          return true;
                        }
                      }
                      return false;
                    };
                    if (_0x558bbe = _0x3d5333[_0x37ba69(441)]) {
                      _0xe3060.next = 4;
                      break;
                    }
                    throw "``````````````````````````````````````````";
                  case 4:
                    if (Array[_0x37ba69(532)](_0x558bbe)) {
                      _0xe3060[_0x37ba69(604)] = 6;
                      break;
                    }
                    throw _0x37ba69(630);
                  case 6:
                    _0xd49837 = {};
                    _0xf30cce = _0x55cc4d(_0x558bbe);
                    try {
                      for (_0xf30cce.s(); !(_0x3f6374 = _0xf30cce.n())[_0x37ba69(442)];) {
                        if ((_0x1ca51e = _0x3f6374[_0x37ba69(513)])[_0x37ba69(651)] && _0x1ca51e[_0x37ba69(486)]) {
                          if (!_0x39cf43(_0x1ca51e)) {
                            _0xd49837[_0x1ca51e.name] = _0x1ca51e[_0x37ba69(486)];
                          }
                        }
                      }
                    } catch (_0x279151) {
                      _0xf30cce.e(_0x279151);
                    } finally {
                      _0xf30cce.f();
                    }
                    if (this[_0x37ba69(647)] != _0x37ba69(430)) {
                      _0xe3060[_0x37ba69(604)] = 34;
                      break;
                    }
                    this[_0x37ba69(545)] = {};
                    _0xe3060.t0 = _0x2af9e7()[_0x37ba69(431)](_0xd49837);
                  case 12:
                    if ((_0xe3060.t1 = _0xe3060.t0())[_0x37ba69(442)]) {
                      _0xe3060.next = 30;
                      break;
                    }
                    _0x5d09eb = _0xe3060.t1[_0x37ba69(513)];
                    _0xe3060.t2 = _0x418ec2;
                    _0xe3060[_0x37ba69(604)] = 17;
                    return _0x31ab21(_0xd49837[_0x5d09eb]);
                  case 17:
                    _0xe3060.t3 = _0xe3060[_0x37ba69(468)];
                    _0xe3060.next = 20;
                    return (0, _0xe3060.t2)(_0xe3060.t3);
                  case 20:
                    _0x1a0168 = _0xe3060[_0x37ba69(468)];
                    (_0x2c8024 = document[_0x37ba69(455)](_0x37ba69(480))).width = _0x1a0168[_0x37ba69(646)];
                    _0x2c8024[_0x37ba69(602)] = _0x1a0168[_0x37ba69(602)];
                    _0x2c8024[_0x37ba69(592)]("2d")[_0x37ba69(601)](_0x1a0168, 0, 0, _0x1a0168[_0x37ba69(646)], _0x1a0168[_0x37ba69(602)]);
                    this[_0x37ba69(545)][_0x5d09eb] = {
                      canvas: _0x2c8024,
                      url: ""
                    };
                    this[_0x37ba69(564)] = _0x2c8024;
                    _0xe3060[_0x37ba69(604)] = 12;
                    break;
                  case 30:
                    this[_0x37ba69(585)]();
                    _0x2c8024 = this[_0x37ba69(554)].getPos();
                    this[_0x37ba69(622)]({
                      renderList: [_0x4d5890[_0x37ba69(483)][_0x2c8024]]
                    });
                    return _0xe3060[_0x37ba69(560)](_0x37ba69(437));
                  case 34:
                    this[_0x37ba69(585)]();
                    for (_0x5ae0af in _0xd49837) {
                      if (this[_0x37ba69(545)][_0x5ae0af] && this[_0x37ba69(545)][_0x5ae0af] != _0xd49837[_0x5ae0af] || !this.commandJSON[_0x5ae0af]) {
                        this[_0x37ba69(515)]({
                          image: _0xd49837[_0x5ae0af],
                          layers: _0x5ae0af,
                          jishu: false
                        });
                      }
                    }
                    _0x5a5e71(_0x4d5890[_0x37ba69(598)], this[_0x37ba69(636)], 1);
                  case 37:
                  case _0x37ba69(496):
                    return _0xe3060.stop();
                }
              }
            }, _0x5d61eb, this);
          })), function (_0x2211ff) {
            return _0x1d73a3.apply(this, arguments);
          })
        }, {
          key: _0x5becb7(515),
          value: (_0x1294a6 = _0x5becb7, _0x251933 = _0x4a4b23(_0x2af9e7()[_0x1294a6(454)](function _0x505d04(_0x26927b) {
            var _0x254dfc;
            var _0x4e595c;
            var _0x1ed850;
            var _0x313323;
            var _0x434005;
            var _0x303230;
            var _0x297075;
            var _0x3d3c02;
            var _0x488e5d;
            var _0x43a950;
            var _0x506846;
            var _0x306011;
            var _0x3a4407;
            var _0x4b59ad;
            var _0x53c45a;
            var _0x55a18c;
            var _0x3a9462;
            var _0x59f703;
            var _0x34e979;
            var _0x2e5130;
            var _0xf17485;
            var _0x5639a7;
            var _0x3d5fa6;
            var _0x61c36c;
            var _0x5d4420;
            var _0x43dcd2 = _0x1294a6;
            return _0x2af9e7()[_0x43dcd2(582)](function (_0x3d4bfd) {
              for (var _0x17094f = _0x43dcd2;;) {
                switch (_0x3d4bfd[_0x17094f(611)] = _0x3d4bfd[_0x17094f(604)]) {
                  case 0:
                    _0x254dfc = _0x26927b.canvas;
                    _0x4e595c = _0x26927b[_0x17094f(491)];
                    _0x1ed850 = _0x26927b[_0x17094f(640)];
                    _0x303230 = _0x26927b.renderAll;
                    _0x313323 = _0x303230 !== undefined && _0x303230;
                    _0x297075 = _0x26927b[_0x17094f(605)];
                    _0x434005 = _0x297075 === undefined || _0x297075;
                    _0x488e5d = _0x26927b[_0x17094f(535)];
                    _0x303230 = _0x488e5d !== undefined && _0x488e5d;
                    _0x297075 = _0x26927b[_0x17094f(577)];
                    if (_0x1f24d8(this[_0x17094f(636)], _0x4d5890[_0x17094f(598)])) {
                      _0x3d4bfd[_0x17094f(604)] = 3;
                      break;
                    }
                    return _0x3d4bfd.abrupt(_0x17094f(437));
                  case 3:
                    if ((_0x254dfc || _0x4e595c) && _0x1ed850) {
                      _0x3d4bfd[_0x17094f(604)] = 5;
                      break;
                    }
                    throw "~~~~~~~";
                  case 5:
                    if (_0x4e595c && typeof _0x4e595c != "string") {
                      throw _0x17094f(484);
                    }
                    _0x3d4bfd[_0x17094f(604)] = 7;
                    break;
                  case 7:
                    _0x3d3c02 = _0x254dfc;
                    if (_0x4e595c) {
                      _0x3d4bfd.t0 = _0x418ec2;
                      _0x3d4bfd.next = 12;
                      return _0x31ab21(_0x4e595c);
                    }
                    _0x3d4bfd.next = 21;
                    break;
                  case 12:
                    _0x3d4bfd.t1 = _0x3d4bfd[_0x17094f(468)];
                    _0x3d4bfd[_0x17094f(604)] = 15;
                    return (0, _0x3d4bfd.t0)(_0x3d4bfd.t1);
                  case 15:
                    _0x488e5d = _0x3d4bfd[_0x17094f(468)];
                    (_0x3d3c02 = document.createElement(_0x17094f(480)))[_0x17094f(646)] = _0x488e5d[_0x17094f(646)];
                    _0x3d3c02.height = _0x488e5d[_0x17094f(602)];
                    _0x3d3c02[_0x17094f(592)]("2d").drawImage(_0x488e5d, 0, 0, _0x488e5d[_0x17094f(646)], _0x488e5d.height);
                  case 21:
                    _0x55a18c = _0x4d5890[_0x17094f(483)];
                    _0x43a950 = _0x1ed850[_0x17094f(524)](",")[_0x17094f(638)](function (_0x436bdb) {
                      return _0x436bdb[_0x17094f(645)]();
                    });
                    this.preCanvas = _0x3d3c02;
                    this.preLayer = _0x1ed850;
                    if (!this.commandJSON[_0x1ed850]) {
                      this[_0x17094f(545)][_0x1ed850] = {};
                    }
                    this[_0x17094f(545)][_0x1ed850][_0x17094f(480)] = _0x3d3c02;
                    if (!_0x303230) {
                      this.commandJSON[_0x1ed850][_0x17094f(499)] = "";
                      this[_0x17094f(585)]();
                    }
                    _0x506846 = this[_0x17094f(554)][_0x17094f(530)]();
                    if (typeof _0x297075 == "number" && _0x55a18c[_0x297075]) {
                      _0x506846 = _0x297075;
                    }
                    if (_0x306011 = document[_0x17094f(542)](_0x17094f(568)[_0x17094f(527)](_0x55a18c[_0x506846][_0x17094f(597)]))) {
                      _0x306011[_0x17094f(588)][_0x17094f(508)] = -1;
                    }
                    _0x306011 = _0x313323 ? _0x55a18c : [_0x55a18c[_0x506846]];
                    if (this[_0x17094f(647)] == _0x17094f(430)) {
                      _0x3d4bfd[_0x17094f(604)] = 36;
                      return this[_0x17094f(622)]({
                        renderList: _0x306011
                      });
                    }
                    _0x3d4bfd.next = 37;
                    break;
                  case 36:
                    return _0x3d4bfd[_0x17094f(560)](_0x17094f(437));
                  case 37:
                    _0x3a4407 = _0x313323 ? _0x5634f7.paper[_0x17094f(460)] : [_0x5634f7[_0x17094f(591)].projects[_0x506846]];
                    _0x4b59ad = [];
                    _0x53c45a = _0x55cc4d(_0x306011);
                    _0x3d4bfd.prev = 40;
                    _0x53c45a.s();
                  case 42:
                    if ((_0x55a18c = _0x53c45a.n())[_0x17094f(442)]) {
                      _0x3d4bfd[_0x17094f(604)] = 50;
                      break;
                    }
                    if ((_0x3a9462 = _0x55a18c[_0x17094f(513)])[_0x17094f(637)]) {
                      _0x3d4bfd[_0x17094f(604)] = 46;
                      break;
                    }
                    throw _0x17094f(510);
                  case 46:
                    _0x2e5130 = _0x3a9462[_0x17094f(637)][_0x17094f(570)](function (_0x301348) {
                      var _0x57ed30 = 11;
                      var _0x16eafa = _0x17094f;
                      _0x57ed30 = "ohhn";
                      return _0x43a950[_0x16eafa(599)](function (_0x58d47c) {
                        var _0x33f953 = _0x16eafa;
                        return _0x58d47c == _0x301348.id[_0x33f953(524)]("___")[0][_0x33f953(645)]();
                      });
                    });
                    _0x4b59ad = _0x4b59ad.concat(_0x2e5130);
                  case 48:
                    _0x3d4bfd[_0x17094f(604)] = 42;
                    break;
                  case 50:
                    _0x3d4bfd[_0x17094f(604)] = 55;
                    break;
                  case 52:
                    _0x3d4bfd[_0x17094f(611)] = 52;
                    _0x3d4bfd.t2 = _0x3d4bfd[_0x17094f(594)](40);
                    _0x53c45a.e(_0x3d4bfd.t2);
                  case 55:
                    _0x3d4bfd[_0x17094f(611)] = 55;
                    _0x53c45a.f();
                    return _0x3d4bfd[_0x17094f(466)](55);
                  case 58:
                    _0x59f703 = [];
                    _0x34e979 = _0x55cc4d(_0x4b59ad);
                    _0x3d4bfd[_0x17094f(611)] = 60;
                    _0x34e979.s();
                  case 62:
                    if ((_0x2e5130 = _0x34e979.n())[_0x17094f(442)]) {
                      _0x3d4bfd[_0x17094f(604)] = 86;
                      break;
                    }
                    _0xf17485 = _0x2e5130[_0x17094f(513)];
                    _0x5639a7 = _0x55cc4d(_0x3a4407);
                    _0x3d4bfd[_0x17094f(611)] = 65;
                    _0x5639a7.s();
                  case 67:
                    if ((_0x5d4420 = _0x5639a7.n()).done) {
                      _0x3d4bfd[_0x17094f(604)] = 76;
                      break;
                    }
                    _0x3d5fa6 = _0x5d4420[_0x17094f(513)];
                    if ((_0x61c36c = _0x3d5fa6[_0x17094f(506)]({
                      name: _0xf17485.id
                    })) && _0xf17485[_0x17094f(521)]) {
                      _0x3d4bfd[_0x17094f(604)] = 72;
                      break;
                    }
                    return _0x3d4bfd.abrupt("continue", 74);
                  case 72:
                    _0x5d4420 = this[_0x17094f(493)]({
                      layerInfo: _0xf17485,
                      canvas: _0x3d3c02,
                      raster: _0x61c36c,
                      wrapWidth: _0xf17485.wrapWidth,
                      wrapHeight: _0xf17485[_0x17094f(613)],
                      layerName: _0xf17485.id,
                      webglCanvas: _0x3d5fa6[_0x17094f(463)]
                    });
                    _0x59f703[_0x17094f(548)](_0x5d4420);
                  case 74:
                    _0x3d4bfd[_0x17094f(604)] = 67;
                    break;
                  case 76:
                    _0x3d4bfd[_0x17094f(604)] = 81;
                    break;
                  case 78:
                    _0x3d4bfd[_0x17094f(611)] = 78;
                    _0x3d4bfd.t3 = _0x3d4bfd[_0x17094f(594)](65);
                    _0x5639a7.e(_0x3d4bfd.t3);
                  case 81:
                    _0x3d4bfd[_0x17094f(611)] = 81;
                    _0x5639a7.f();
                    return _0x3d4bfd[_0x17094f(466)](81);
                  case 84:
                    _0x3d4bfd.next = 62;
                    break;
                  case 86:
                    _0x3d4bfd[_0x17094f(604)] = 91;
                    break;
                  case 88:
                    _0x3d4bfd[_0x17094f(611)] = 88;
                    _0x3d4bfd.t4 = _0x3d4bfd[_0x17094f(594)](60);
                    _0x34e979.e(_0x3d4bfd.t4);
                  case 91:
                    _0x3d4bfd[_0x17094f(611)] = 91;
                    _0x34e979.f();
                    return _0x3d4bfd[_0x17094f(466)](91);
                  case 94:
                    if (_0x434005) {
                      _0x5a5e71(_0x4d5890.token, this.Autoken, _0x306011[_0x17094f(561)]);
                    }
                    _0x3d4bfd[_0x17094f(604)] = 97;
                    return Promise[_0x17094f(555)](_0x59f703);
                  case 97:
                  case _0x17094f(496):
                    return _0x3d4bfd[_0x17094f(500)]();
                }
              }
            }, _0x505d04, this, [[40, 52, 55, 58], [60, 88, 91, 94], [65, 78, 81, 84]]);
          })), function (_0x2c8b4b) {
            return _0x251933[_0x1294a6(558)](this, arguments);
          })
        }, {
          key: "gotthrwng",
          value: function () {
            var _0x3430d5;
            var _0x14ffb3 = _0x5becb7;
            _0x3430d5 = 5;
            return _0x14ffb3 = window.OffscreenCanvas ? new OffscreenCanvas(1, 1) : document[_0x14ffb3(455)](_0x14ffb3(480));
          }
        }, {
          key: "gotpolk",
          value: function (_0x1950ed) {
            var _0x419e10 = _0x5becb7;
            var _0x335ee3 = document[_0x419e10(455)](_0x419e10(480));
            _0x335ee3[_0x419e10(646)] = 1000;
            _0x335ee3[_0x419e10(602)] = 1000;
            var _0x4cbbdc = _0x335ee3[_0x419e10(592)]("2d");
            _0x335ee3[_0x419e10(646)];
            _0x335ee3[_0x419e10(602)];
            var _0x36aa4c = _0x1950ed[_0x419e10(646)] / _0x1950ed[_0x419e10(602)] * 1000;
            var _0x5e38ae = (_0x335ee3[_0x419e10(646)] - _0x36aa4c) / 2;
            _0x419e10 = (_0x335ee3[_0x419e10(602)] - 1000) / 2;
            _0x4cbbdc.drawImage(_0x1950ed, _0x5e38ae, _0x419e10, _0x36aa4c, 1000);
            return _0x335ee3;
          }
        }, {
          key: _0x5becb7(493),
          value: function (_0x11c636) {
            var _0x1067b8 = _0x5becb7;
            var _0x460dc3 = this;
            var _0x3647d5 = (_0x309884 = _0x11c636[_0x1067b8(607)]) === undefined ? {} : _0x309884;
            var _0xf8382e = _0x11c636.canvas;
            var _0x3ca56e = _0x11c636[_0x1067b8(639)];
            var _0x132128 = _0x11c636.wrapHeight;
            var _0x180ff5 = _0x11c636[_0x1067b8(625)];
            var _0x309884 = _0x11c636[_0x1067b8(464)];
            _0x11c636 = _0x11c636[_0x1067b8(463)];
            if (_0x1f24d8(this[_0x1067b8(636)], _0x4d5890[_0x1067b8(598)])) {
              var _0x247eaa = {
                layer: {
                  BoundingRect: _0x3647d5.BoundingRect[_0x1067b8(540)](),
                  IsVisible: true,
                  Matrix3: _0x3647d5.Matrix3,
                  OriginalSize: _0x3647d5[_0x1067b8(462)],
                  Points: _0x3647d5[_0x1067b8(461)],
                  Type: _0x1067b8(635),
                  VectorMask: null,
                  Height: _0x3647d5[_0x1067b8(624)][3],
                  Width: _0x3647d5.rect[2],
                  X: _0x3647d5[_0x1067b8(624)][0],
                  Y: _0x3647d5[_0x1067b8(624)][1],
                  layerName: _0x309884
                },
                cropDesignCanvas: _0xf8382e,
                psdWidth: _0x180ff5,
                psdHeight: _0x132128,
                webglCanvas: _0x11c636
              };
              return new Promise(function (_0x37717a) {
                var _0xd78951 = _0x1067b8;
                new _0x35329e()[_0xd78951(553)](_0x247eaa, function (_0x5d70f7) {
                  var _0x5c88a8;
                  var _0x18ccff;
                  var _0x1a84e8;
                  var _0x5b2333;
                  var _0x26ea33;
                  var _0x390fca;
                  var _0x35a7d6 = _0xd78951;
                  if (_0x3ca56e) {
                    _0x5d70f7 = _0x5d70f7;
                    if (_0x3647d5[_0x35a7d6(485)]) {
                      if (_0x5d70f7[_0x35a7d6(646)] > _0x5d70f7[_0x35a7d6(602)]) {
                        _0x18ccff = _0x460dc3[_0x35a7d6(537)](_0x5d70f7);
                        (_0x5b2333 = document[_0x35a7d6(455)]("canvas")).width = _0x5d70f7[_0x35a7d6(646)];
                        _0x5b2333.height = _0x5d70f7[_0x35a7d6(602)];
                        _0x5c88a8 = _0x5b2333.getContext("2d");
                        _0x1a84e8 = _0x5b2333[_0x35a7d6(646)];
                        _0x26ea33 = _0x5b2333.width;
                        _0x5c88a8[_0x35a7d6(601)](_0x18ccff, 0, (_0x5b2333.height - _0x26ea33) / 2, _0x1a84e8, _0x26ea33);
                        _0x5d70f7 = _0x5b2333;
                      }
                      _0x5d70f7 = _0x460dc3.gotcanvg(_0x3647d5[_0x35a7d6(485)], _0x5d70f7, _0x180ff5, _0x132128);
                    }
                    if (_0x5d70f7.width != _0x5d70f7[_0x35a7d6(602)]) {
                      (_0x390fca = document[_0x35a7d6(455)]("canvas"))[_0x35a7d6(646)] = 1000;
                      _0x390fca[_0x35a7d6(602)] = 1000;
                      _0x5c88a8 = _0x390fca[_0x35a7d6(592)]("2d");
                      _0x18ccff = _0x390fca[_0x35a7d6(646)];
                      if ((_0x1a84e8 = _0x390fca[_0x35a7d6(602)]) < _0x18ccff / (_0x26ea33 = _0x5d70f7[_0x35a7d6(646)] / _0x5d70f7[_0x35a7d6(602)])) {
                        _0x18ccff = _0x1a84e8 * _0x26ea33;
                      } else {
                        _0x1a84e8 = _0x18ccff / _0x26ea33;
                      }
                      _0x5b2333 = (_0x390fca[_0x35a7d6(646)] - _0x18ccff) / 2;
                      _0x26ea33 = (_0x390fca[_0x35a7d6(602)] - _0x1a84e8) / 2;
                      _0x5c88a8[_0x35a7d6(601)](_0x5d70f7, _0x5b2333, _0x26ea33, _0x18ccff, _0x1a84e8);
                      _0x5d70f7 = _0x390fca;
                    }
                    _0x3ca56e[_0x35a7d6(643)](_0x5d70f7.width, _0x5d70f7.height);
                    _0x3ca56e[_0x35a7d6(482)] = new _0x5634f7[_0x35a7d6(591)][_0x35a7d6(519)](1, 0, 0, 0, 1, 0, 0);
                    _0x3ca56e[_0x35a7d6(512)] = _0x3ca56e[_0x35a7d6(438)][_0x35a7d6(512)];
                    (_0x390fca = _0x3ca56e.getContext("2d"))[_0x35a7d6(650)](0, 0, _0x3ca56e[_0x35a7d6(646)], _0x3ca56e[_0x35a7d6(602)]);
                    _0x390fca[_0x35a7d6(601)](_0x5d70f7, 0, 0, _0x3ca56e[_0x35a7d6(646)], _0x3ca56e.height);
                    _0x3ca56e[_0x35a7d6(438)][_0x35a7d6(631)]();
                  }
                  _0x37717a(_0x3ca56e);
                });
              });
            }
          }
        }, {
          key: "gotcanvg",
          value: function (_0x4012d6, _0x5bf72b, _0x4a8827, _0x113fe4) {
            var _0x3fe11e = _0x5becb7;
            var _0x1d586a = this[_0x3fe11e(629)];
            _0x1d586a.width = _0x4a8827;
            _0x1d586a[_0x3fe11e(602)] = _0x113fe4;
            var _0x2c61ea = _0x1d586a[_0x3fe11e(592)]("2d");
            _0x2c61ea[_0x3fe11e(650)](0, 0, _0x4a8827, _0x113fe4);
            new _0x3a16f5.Z(_0x4012d6)[_0x3fe11e(546)]()[_0x3fe11e(576)]().to(_0x2c61ea);
            _0x2c61ea[_0x3fe11e(534)]();
            _0x2c61ea[_0x3fe11e(601)](_0x5bf72b, 0, 0, _0x4a8827, _0x113fe4);
            return _0x1d586a;
          }
        }]);
        _0x4133c6 = _0x5634f7;
        function _0x5634f7(_0x3a35a5, _0x5f304a) {
          var _0x3ff247 = _0x308f45;
          var _0x4054f0 = _0x5f304a.list;
          var _0x365a4e = _0x5f304a.sKu;
          var _0x5b7212 = _0x5f304a[_0x3ff247(636)];
          var _0x53b9eb = _0x5f304a[_0x3ff247(598)];
          var _0x40c510 = (_0x16fdbb = _0x5f304a.zoomIn) === undefined || _0x16fdbb;
          var _0x57cedb = (_0x4d5132 = _0x5f304a[_0x3ff247(647)]) === undefined ? "1" : _0x4d5132;
          var _0x16fdbb = _0x5f304a.onload;
          var _0x4d5132 = _0x5f304a.testBaseUrl;
          _0x5f304a = _0x5f304a[_0x3ff247(436)];
          _0x5b4327(this, _0x5634f7);
          if (_0x5f304a && _0x43c5c1(_0x5f304a) == _0x3ff247(642)) {
            _0x4d5890.icon = Object.assign(_0x4d5890[_0x3ff247(436)], _0x5f304a);
          }
          this.id = _0x3a35a5;
          this[_0x3ff247(586)] = document[_0x3ff247(542)](_0x3a35a5);
          this.baseWidth = this[_0x3ff247(586)][_0x3ff247(644)];
          this[_0x3ff247(586)][_0x3ff247(541)] = "";
          this[_0x3ff247(435)] = document.createElement(_0x3ff247(509));
          this[_0x3ff247(435)][_0x3ff247(609)] = _0x3ff247(516);
          this[_0x3ff247(435)][_0x3ff247(588)][_0x3ff247(646)] = this.baseWidth + "px";
          this.element[_0x3ff247(588)][_0x3ff247(551)] = _0x3ff247(649);
          this[_0x3ff247(435)].innerHTML = "";
          this[_0x3ff247(586)][_0x3ff247(469)](this[_0x3ff247(435)]);
          if (!this[_0x3ff247(586)]) {
            throw "``````````````````````````````````````````";
          }
          if (_0x4d5132) {
            _0x246c66 = _0x4d5132;
          }
          _0x4d5890[_0x3ff247(483)] = [];
          if (!_0x4054f0 || !Array.isArray(_0x4054f0)) {
            if (!_0x365a4e || !Array[_0x3ff247(532)](_0x365a4e)) {
              throw _0x3ff247(488);
            }
            if (_0x365a4e[_0x3ff247(561)] > 10) {
              throw "``````````````````````````````````````````";
            }
            this[_0x3ff247(450)] = _0x365a4e;
          }
          if (!_0x5b7212) {
            throw _0x3ff247(573);
          }
          if (_0x4054f0 && _0x4054f0[_0x3ff247(561)] > 0) {
            _0x4054f0 = _0x4054f0[_0x3ff247(638)](function (_0x52fbef, _0x5bfb58) {
              var _0x3d7990 = _0x3ff247;
              if (!(_0x52fbef.sku != null && _0x52fbef.sku != null)) {
                _0x52fbef[_0x3d7990(597)] = _0x52fbef.psd_sku || _0x52fbef.id || _0x5bfb58;
              }
              return _0x52fbef;
            });
          }
          _0x4d5890.XTUtuList = _0x4054f0 || [];
          _0x4d5890[_0x3ff247(598)] = _0x53b9eb;
          this[_0x3ff247(636)] = _0x5b7212;
          this[_0x3ff247(449)] = "";
          this[_0x3ff247(554)] = null;
          this.clipCanvas = document[_0x3ff247(455)](_0x3ff247(480));
          this.zoomIn = _0x40c510;
          this.onload = _0x16fdbb;
          this.load = false;
          this[_0x3ff247(647)] = _0x57cedb;
          this[_0x3ff247(564)] = null;
          this.preLayer = null;
          this[_0x3ff247(545)] = {};
          this[_0x3ff247(514)]();
        }
        _0x5064cc(_0x4133c6, _0x17c062(591), _0x4331e5());
        const _0x24a4a6 = _0x4133c6;
      })();
      return _0x4d43c0.default;
    })();
  });